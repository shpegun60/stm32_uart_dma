#ifndef __CRC8_DALLAS_MAXIM_H__
#define __CRC8_DALLAS_MAXIM_H__ 1

#include "my_crc_port.h"

#ifdef _MY_CRC8_ENA

#include "my_ctype/my_ctypes_def.h"

#ifndef _MY_CRC_TEST_DISABLE
int crc8_test(u8 *data, size_t len, u8 * res);
#endif /* _MY_CRC_TEST_DISABLE */

/*
*************************************************************************************************
  Name  : CRC-8-Dallas/Maxim
  Poly  : 0x31    x^8 + x^5 + x^4 + 1
  Init  : 0xFF
  Revert: false
  XorOut: 0x00
  Check : 0xF7 ("123456789")
  MaxLen: 15 byte`s (127 bit`s) - detection of single, double, triple and all odd errors

  DALLAS SENSORS STANDARD!!!
  
Lookup Table:
0x00U, 0x31U, 0x62U, 0x53U, 0xC4U, 0xF5U, 0xA6U, 0x97U, 0xB9U, 0x88U, 0xDBU, 0xEAU, 0x7DU, 0x4CU, 0x1FU, 0x2EU,
0x43U, 0x72U, 0x21U, 0x10U, 0x87U, 0xB6U, 0xE5U, 0xD4U, 0xFAU, 0xCBU, 0x98U, 0xA9U, 0x3EU, 0x0FU, 0x5CU, 0x6DU,
0x86U, 0xB7U, 0xE4U, 0xD5U, 0x42U, 0x73U, 0x20U, 0x11U, 0x3FU, 0x0EU, 0x5DU, 0x6CU, 0xFBU, 0xCAU, 0x99U, 0xA8U,
0xC5U, 0xF4U, 0xA7U, 0x96U, 0x01U, 0x30U, 0x63U, 0x52U, 0x7CU, 0x4DU, 0x1EU, 0x2FU, 0xB8U, 0x89U, 0xDAU, 0xEBU,
0x3DU, 0x0CU, 0x5FU, 0x6EU, 0xF9U, 0xC8U, 0x9BU, 0xAAU, 0x84U, 0xB5U, 0xE6U, 0xD7U, 0x40U, 0x71U, 0x22U, 0x13U,
0x7EU, 0x4FU, 0x1CU, 0x2DU, 0xBAU, 0x8BU, 0xD8U, 0xE9U, 0xC7U, 0xF6U, 0xA5U, 0x94U, 0x03U, 0x32U, 0x61U, 0x50U,
0xBBU, 0x8AU, 0xD9U, 0xE8U, 0x7FU, 0x4EU, 0x1DU, 0x2CU, 0x02U, 0x33U, 0x60U, 0x51U, 0xC6U, 0xF7U, 0xA4U, 0x95U,
0xF8U, 0xC9U, 0x9AU, 0xABU, 0x3CU, 0x0DU, 0x5EU, 0x6FU, 0x41U, 0x70U, 0x23U, 0x12U, 0x85U, 0xB4U, 0xE7U, 0xD6U,
0x7AU, 0x4BU, 0x18U, 0x29U, 0xBEU, 0x8FU, 0xDCU, 0xEDU, 0xC3U, 0xF2U, 0xA1U, 0x90U, 0x07U, 0x36U, 0x65U, 0x54U,
0x39U, 0x08U, 0x5BU, 0x6AU, 0xFDU, 0xCCU, 0x9FU, 0xAEU, 0x80U, 0xB1U, 0xE2U, 0xD3U, 0x44U, 0x75U, 0x26U, 0x17U,
0xFCU, 0xCDU, 0x9EU, 0xAFU, 0x38U, 0x09U, 0x5AU, 0x6BU, 0x45U, 0x74U, 0x27U, 0x16U, 0x81U, 0xB0U, 0xE3U, 0xD2U,
0xBFU, 0x8EU, 0xDDU, 0xECU, 0x7BU, 0x4AU, 0x19U, 0x28U, 0x06U, 0x37U, 0x64U, 0x55U, 0xC2U, 0xF3U, 0xA0U, 0x91U,
0x47U, 0x76U, 0x25U, 0x14U, 0x83U, 0xB2U, 0xE1U, 0xD0U, 0xFEU, 0xCFU, 0x9CU, 0xADU, 0x3AU, 0x0BU, 0x58U, 0x69U,
0x04U, 0x35U, 0x66U, 0x57U, 0xC0U, 0xF1U, 0xA2U, 0x93U, 0xBDU, 0x8CU, 0xDFU, 0xEEU, 0x79U, 0x48U, 0x1BU, 0x2AU,
0xC1U, 0xF0U, 0xA3U, 0x92U, 0x05U, 0x34U, 0x67U, 0x56U, 0x78U, 0x49U, 0x1AU, 0x2BU, 0xBCU, 0x8DU, 0xDEU, 0xEFU,
0x82U, 0xB3U, 0xE0U, 0xD1U, 0x46U, 0x77U, 0x24U, 0x15U, 0x3BU, 0x0AU, 0x59U, 0x68U, 0xFFU, 0xCEU, 0x9DU, 0xACU,
*************************************************************************************************
*/

#define CRC8START(crc) /* ignored expression */
#define CRC8INIT ((u8)0xFFU)
#define CRC8POLY ((u8)0x31U) // = x^8 + x^5 + x^4 + 1
#define CRC8CHECK ((u8)0xF7U)
#define CRC8FINAL(crc) /* ignored expression */

void crc8_maxim_init_base(void* const crc);

#ifdef _MY_CRC8_TABLE_CALC_ENA

// fast implementation (CRC MSB -> LSB)------------------------------------------------------------------------------------------------------------------------------
u8 fast_crc8_maxim_array(u8 * data, unsigned int len);
u8 fast_crc8_maxim_byte(const u8 crc, const u8 data);

// base implementation ----------------------------
void fast_crc8_maxim_array_base(void* const crc, const u8* data, reg len);
void fast_crc8_maxim_byte_base(void* const crc, const u8 data);

#endif /* _MY_CRC8_TABLE_CALC_ENA */


#ifdef _MY_CRC8_GENERIC_CALC_ENA

// slow implementation (CRC MSB -> LSB)------------------------------------------------------------------------------------------------------------------------------
u8 slow_crc8_maxim_array(u8 * data, unsigned int len);
u8 slow_crc8_maxim_byte(u8 crc, const u8 data);

// base implementation ----------------------------
void slow_crc8_maxim_array_base(void* const crc, const u8* data, reg len);
void slow_crc8_maxim_byte_base(void* const crc, const u8 data);

#endif /* _MY_CRC8_GENERIC_CALC_ENA */


// fastest implementation of crc8-------------------------------------------------------------------------------------
#	define _MY_CRC8_INIT_BASE crc8_maxim_init_base
#
#ifdef _MY_CRC8_TABLE_CALC_ENA
#	define _MY_CRC8_ARRAY(data, len)  		fast_crc8_maxim_array((data), (len))
#	define _MY_CRC8_BYTE(last_crc, data)  	fast_crc8_maxim_byte((last_crc), (data))
#
#	define _MY_CRC8_ARRAY_BASE fast_crc8_maxim_array_base
#	define _MY_CRC8_BYTE_BASE fast_crc8_maxim_byte_base
#else
#	define _MY_CRC8_ARRAY(data, len)  		slow_crc8_maxim_array((data), (len))
#	define _MY_CRC8_BYTE(last_crc, data)  	slow_crc8_maxim_byte((last_crc), (data))
#
#	define _MY_CRC8_ARRAY_BASE slow_crc8_maxim_array_base
#	define _MY_CRC8_BYTE_BASE slow_crc8_maxim_byte_base
#endif /* _MY_CRC8_TABLE_CALC_ENA */
#
#endif /* _MY_CRC8_ENA*/

//---------------------------------------------------------------------
#endif /* __CRC8_DALLAS_MAXIM_H__ */
