
BluePill_generic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c28  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013bc  08007d38  08007d38  00008d38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080090f4  080090f4  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080090f4  080090f4  0000a0f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080090fc  080090fc  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080090fc  080090fc  0000a0fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08009104  08009104  0000a104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800910c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  080092e0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  080092e0  0000b4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000279ac  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000078cf  00000000  00000000  00032ba9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000b362  00000000  00000000  0003a478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001030  00000000  00000000  000457e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001106  00000000  00000000  00046810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fee2  00000000  00000000  00047916  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002510c  00000000  00000000  000677f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009b60b  00000000  00000000  0008c904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127f0f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003f6c  00000000  00000000  00127f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  0012bec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d20 	.word	0x08007d20

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007d20 	.word	0x08007d20

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <__aeabi_f2uiz>:
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	d20e      	bcs.n	80010ca <__aeabi_f2uiz+0x22>
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b0:	d30b      	bcc.n	80010ca <__aeabi_f2uiz+0x22>
 80010b2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d409      	bmi.n	80010d0 <__aeabi_f2uiz+0x28>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2uiz+0x32>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d102      	bne.n	80010e0 <__aeabi_f2uiz+0x38>
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	4770      	bx	lr
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b500      	push	{lr}
 80010ea:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ec:	2300      	movs	r3, #0
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f4:	484c      	ldr	r0, [pc, #304]	@ (8001228 <MX_ADC1_Init+0x140>)
 80010f6:	4a4d      	ldr	r2, [pc, #308]	@ (800122c <MX_ADC1_Init+0x144>)
 80010f8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010fe:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001100:	2201      	movs	r2, #1
 8001102:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001106:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800110a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 10;
 800110e:	230a      	movs	r3, #10
 8001110:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001112:	f000 fd8d 	bl	8001c30 <HAL_ADC_Init>
 8001116:	2800      	cmp	r0, #0
 8001118:	d164      	bne.n	80011e4 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800111a:	2300      	movs	r3, #0
 800111c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111e:	2201      	movs	r2, #1
 8001120:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001122:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	a901      	add	r1, sp, #4
 8001126:	4840      	ldr	r0, [pc, #256]	@ (8001228 <MX_ADC1_Init+0x140>)
 8001128:	f000 fbcc 	bl	80018c4 <HAL_ADC_ConfigChannel>
 800112c:	2800      	cmp	r0, #0
 800112e:	d15c      	bne.n	80011ea <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001134:	2302      	movs	r3, #2
 8001136:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	a901      	add	r1, sp, #4
 800113a:	483b      	ldr	r0, [pc, #236]	@ (8001228 <MX_ADC1_Init+0x140>)
 800113c:	f000 fbc2 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8001140:	2800      	cmp	r0, #0
 8001142:	d155      	bne.n	80011f0 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001144:	2302      	movs	r3, #2
 8001146:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001148:	2303      	movs	r3, #3
 800114a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	a901      	add	r1, sp, #4
 800114e:	4836      	ldr	r0, [pc, #216]	@ (8001228 <MX_ADC1_Init+0x140>)
 8001150:	f000 fbb8 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8001154:	2800      	cmp	r0, #0
 8001156:	d14e      	bne.n	80011f6 <MX_ADC1_Init+0x10e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001158:	2303      	movs	r3, #3
 800115a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800115c:	2304      	movs	r3, #4
 800115e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001160:	eb0d 0103 	add.w	r1, sp, r3
 8001164:	4830      	ldr	r0, [pc, #192]	@ (8001228 <MX_ADC1_Init+0x140>)
 8001166:	f000 fbad 	bl	80018c4 <HAL_ADC_ConfigChannel>
 800116a:	2800      	cmp	r0, #0
 800116c:	d146      	bne.n	80011fc <MX_ADC1_Init+0x114>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800116e:	2304      	movs	r3, #4
 8001170:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001172:	2305      	movs	r3, #5
 8001174:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001176:	a901      	add	r1, sp, #4
 8001178:	482b      	ldr	r0, [pc, #172]	@ (8001228 <MX_ADC1_Init+0x140>)
 800117a:	f000 fba3 	bl	80018c4 <HAL_ADC_ConfigChannel>
 800117e:	2800      	cmp	r0, #0
 8001180:	d13f      	bne.n	8001202 <MX_ADC1_Init+0x11a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001182:	2305      	movs	r3, #5
 8001184:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001186:	2306      	movs	r3, #6
 8001188:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	a901      	add	r1, sp, #4
 800118c:	4826      	ldr	r0, [pc, #152]	@ (8001228 <MX_ADC1_Init+0x140>)
 800118e:	f000 fb99 	bl	80018c4 <HAL_ADC_ConfigChannel>
 8001192:	2800      	cmp	r0, #0
 8001194:	d138      	bne.n	8001208 <MX_ADC1_Init+0x120>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001196:	2306      	movs	r3, #6
 8001198:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800119a:	2307      	movs	r3, #7
 800119c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	a901      	add	r1, sp, #4
 80011a0:	4821      	ldr	r0, [pc, #132]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011a2:	f000 fb8f 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80011a6:	bb90      	cbnz	r0, 800120e <MX_ADC1_Init+0x126>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	a901      	add	r1, sp, #4
 80011b2:	481d      	ldr	r0, [pc, #116]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011b4:	f000 fb86 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80011b8:	bb60      	cbnz	r0, 8001214 <MX_ADC1_Init+0x12c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011ba:	2308      	movs	r3, #8
 80011bc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80011be:	2309      	movs	r3, #9
 80011c0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	a901      	add	r1, sp, #4
 80011c4:	4818      	ldr	r0, [pc, #96]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011c6:	f000 fb7d 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80011ca:	bb30      	cbnz	r0, 800121a <MX_ADC1_Init+0x132>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011cc:	2309      	movs	r3, #9
 80011ce:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80011d0:	230a      	movs	r3, #10
 80011d2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	a901      	add	r1, sp, #4
 80011d6:	4814      	ldr	r0, [pc, #80]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011d8:	f000 fb74 	bl	80018c4 <HAL_ADC_ConfigChannel>
 80011dc:	bb00      	cbnz	r0, 8001220 <MX_ADC1_Init+0x138>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	b005      	add	sp, #20
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011e4:	f000 f982 	bl	80014ec <Error_Handler>
 80011e8:	e797      	b.n	800111a <MX_ADC1_Init+0x32>
    Error_Handler();
 80011ea:	f000 f97f 	bl	80014ec <Error_Handler>
 80011ee:	e79f      	b.n	8001130 <MX_ADC1_Init+0x48>
    Error_Handler();
 80011f0:	f000 f97c 	bl	80014ec <Error_Handler>
 80011f4:	e7a6      	b.n	8001144 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80011f6:	f000 f979 	bl	80014ec <Error_Handler>
 80011fa:	e7ad      	b.n	8001158 <MX_ADC1_Init+0x70>
    Error_Handler();
 80011fc:	f000 f976 	bl	80014ec <Error_Handler>
 8001200:	e7b5      	b.n	800116e <MX_ADC1_Init+0x86>
    Error_Handler();
 8001202:	f000 f973 	bl	80014ec <Error_Handler>
 8001206:	e7bc      	b.n	8001182 <MX_ADC1_Init+0x9a>
    Error_Handler();
 8001208:	f000 f970 	bl	80014ec <Error_Handler>
 800120c:	e7c3      	b.n	8001196 <MX_ADC1_Init+0xae>
    Error_Handler();
 800120e:	f000 f96d 	bl	80014ec <Error_Handler>
 8001212:	e7c9      	b.n	80011a8 <MX_ADC1_Init+0xc0>
    Error_Handler();
 8001214:	f000 f96a 	bl	80014ec <Error_Handler>
 8001218:	e7cf      	b.n	80011ba <MX_ADC1_Init+0xd2>
    Error_Handler();
 800121a:	f000 f967 	bl	80014ec <Error_Handler>
 800121e:	e7d5      	b.n	80011cc <MX_ADC1_Init+0xe4>
    Error_Handler();
 8001220:	f000 f964 	bl	80014ec <Error_Handler>
}
 8001224:	e7db      	b.n	80011de <MX_ADC1_Init+0xf6>
 8001226:	bf00      	nop
 8001228:	20000234 	.word	0x20000234
 800122c:	40012400 	.word	0x40012400

08001230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001230:	b530      	push	{r4, r5, lr}
 8001232:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	2300      	movs	r3, #0
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	9305      	str	r3, [sp, #20]
 800123a:	9306      	str	r3, [sp, #24]
 800123c:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800123e:	6802      	ldr	r2, [r0, #0]
 8001240:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <HAL_ADC_MspInit+0xa8>)
 8001242:	429a      	cmp	r2, r3
 8001244:	d001      	beq.n	800124a <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001246:	b009      	add	sp, #36	@ 0x24
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	f042 0204 	orr.w	r2, r2, #4
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	699a      	ldr	r2, [r3, #24]
 800126c:	f002 0204 	and.w	r2, r2, #4
 8001270:	9202      	str	r2, [sp, #8]
 8001272:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	9303      	str	r3, [sp, #12]
 8001284:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2503      	movs	r5, #3
 800128c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	a904      	add	r1, sp, #16
 8001290:	4812      	ldr	r0, [pc, #72]	@ (80012dc <HAL_ADC_MspInit+0xac>)
 8001292:	f000 ff4f 	bl	8002134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001296:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	a904      	add	r1, sp, #16
 800129c:	4810      	ldr	r0, [pc, #64]	@ (80012e0 <HAL_ADC_MspInit+0xb0>)
 800129e:	f000 ff49 	bl	8002134 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <HAL_ADC_MspInit+0xb4>)
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <HAL_ADC_MspInit+0xb8>)
 80012a6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a8:	2300      	movs	r3, #0
 80012aa:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	2280      	movs	r2, #128	@ 0x80
 80012b0:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b6:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012bc:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012be:	2220      	movs	r2, #32
 80012c0:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c4:	f000 fda2 	bl	8001e0c <HAL_DMA_Init>
 80012c8:	b918      	cbnz	r0, 80012d2 <HAL_ADC_MspInit+0xa2>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_ADC_MspInit+0xb4>)
 80012cc:	6223      	str	r3, [r4, #32]
 80012ce:	625c      	str	r4, [r3, #36]	@ 0x24
}
 80012d0:	e7b9      	b.n	8001246 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80012d2:	f000 f90b 	bl	80014ec <Error_Handler>
 80012d6:	e7f8      	b.n	80012ca <HAL_ADC_MspInit+0x9a>
 80012d8:	40012400 	.word	0x40012400
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	200001f0 	.word	0x200001f0
 80012e8:	40020008 	.word	0x40020008

080012ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012ec:	b500      	push	{lr}
 80012ee:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_DMA_Init+0x50>)
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	4611      	mov	r1, r2
 8001308:	200b      	movs	r0, #11
 800130a:	f000 fd27 	bl	8001d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800130e:	200b      	movs	r0, #11
 8001310:	f000 fd5a 	bl	8001dc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	4611      	mov	r1, r2
 8001318:	200e      	movs	r0, #14
 800131a:	f000 fd1f 	bl	8001d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800131e:	200e      	movs	r0, #14
 8001320:	f000 fd52 	bl	8001dc8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	4611      	mov	r1, r2
 8001328:	200f      	movs	r0, #15
 800132a:	f000 fd17 	bl	8001d5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 fd4a 	bl	8001dc8 <HAL_NVIC_EnableIRQ>

}
 8001334:	b003      	add	sp, #12
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001340:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001344:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	2400      	movs	r4, #0
 8001348:	9404      	str	r4, [sp, #16]
 800134a:	9405      	str	r4, [sp, #20]
 800134c:	9406      	str	r4, [sp, #24]
 800134e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b38      	ldr	r3, [pc, #224]	@ (8001434 <MX_GPIO_Init+0xf4>)
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	f042 0210 	orr.w	r2, r2, #16
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	f002 0210 	and.w	r2, r2, #16
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	f042 0220 	orr.w	r2, r2, #32
 800136a:	619a      	str	r2, [r3, #24]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	f002 0220 	and.w	r2, r2, #32
 8001372:	9201      	str	r2, [sp, #4]
 8001374:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f002 0204 	and.w	r2, r2, #4
 8001384:	9202      	str	r2, [sp, #8]
 8001386:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	f042 0208 	orr.w	r2, r2, #8
 800138e:	619a      	str	r2, [r3, #24]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	9303      	str	r3, [sp, #12]
 8001398:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800139a:	f8df 909c 	ldr.w	r9, [pc, #156]	@ 8001438 <MX_GPIO_Init+0xf8>
 800139e:	4622      	mov	r2, r4
 80013a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a4:	4648      	mov	r0, r9
 80013a6:	f001 f80b 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O_DIAG_EN_Pin|O_LATCH_Pin|O_EN_Pin, GPIO_PIN_RESET);
 80013aa:	4d24      	ldr	r5, [pc, #144]	@ (800143c <MX_GPIO_Init+0xfc>)
 80013ac:	4622      	mov	r2, r4
 80013ae:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80013b2:	4628      	mov	r0, r5
 80013b4:	f001 f804 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 80013b8:	f8df 8084 	ldr.w	r8, [pc, #132]	@ 8001440 <MX_GPIO_Init+0x100>
 80013bc:	4622      	mov	r2, r4
 80013be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80013c2:	4640      	mov	r0, r8
 80013c4:	f000 fffc 	bl	80023c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013cc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ce:	2701      	movs	r7, #1
 80013d0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2602      	movs	r6, #2
 80013d6:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013d8:	a904      	add	r1, sp, #16
 80013da:	4648      	mov	r0, r9
 80013dc:	f000 feaa 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ggggggg_Pin|hhhhhhhh_Pin;
 80013e0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013e4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e6:	4b17      	ldr	r3, [pc, #92]	@ (8001444 <MX_GPIO_Init+0x104>)
 80013e8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	a904      	add	r1, sp, #16
 80013ee:	4628      	mov	r0, r5
 80013f0:	f000 fea0 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O_DIAG_EN_Pin|O_LATCH_Pin|O_EN_Pin;
 80013f4:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80013f8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013fa:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013fe:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001400:	a904      	add	r1, sp, #16
 8001402:	4628      	mov	r0, r5
 8001404:	f000 fe96 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_FAULT_Pin;
 8001408:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800140c:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001410:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(I_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001412:	a904      	add	r1, sp, #16
 8001414:	4628      	mov	r0, r5
 8001416:	f000 fe8d 	bl	8002134 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800141a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800141e:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001422:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001426:	a904      	add	r1, sp, #16
 8001428:	4640      	mov	r0, r8
 800142a:	f000 fe83 	bl	8002134 <HAL_GPIO_Init>

}
 800142e:	b009      	add	sp, #36	@ 0x24
 8001430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001434:	40021000 	.word	0x40021000
 8001438:	40011000 	.word	0x40011000
 800143c:	40010c00 	.word	0x40010c00
 8001440:	40010800 	.word	0x40010800
 8001444:	10110000 	.word	0x10110000

08001448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001448:	b500      	push	{lr}
 800144a:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800144c:	2300      	movs	r3, #0
 800144e:	930c      	str	r3, [sp, #48]	@ 0x30
 8001450:	930d      	str	r3, [sp, #52]	@ 0x34
 8001452:	930f      	str	r3, [sp, #60]	@ 0x3c
 8001454:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001456:	9305      	str	r3, [sp, #20]
 8001458:	9306      	str	r3, [sp, #24]
 800145a:	9307      	str	r3, [sp, #28]
 800145c:	9308      	str	r3, [sp, #32]
 800145e:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	9303      	str	r3, [sp, #12]
 8001466:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001468:	2201      	movs	r2, #1
 800146a:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800146c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001470:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001472:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001474:	2202      	movs	r2, #2
 8001476:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001478:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800147a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800147e:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001480:	a80a      	add	r0, sp, #40	@ 0x28
 8001482:	f000 ffad 	bl	80023e0 <HAL_RCC_OscConfig>
 8001486:	b9d8      	cbnz	r0, 80014c0 <SystemClock_Config+0x78>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001488:	230f      	movs	r3, #15
 800148a:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800148c:	2102      	movs	r1, #2
 800148e:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001490:	2300      	movs	r3, #0
 8001492:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001498:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800149a:	9309      	str	r3, [sp, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800149c:	a805      	add	r0, sp, #20
 800149e:	f001 f9e5 	bl	800286c <HAL_RCC_ClockConfig>
 80014a2:	b978      	cbnz	r0, 80014c4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80014a4:	2302      	movs	r3, #2
 80014a6:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80014a8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80014ac:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ae:	a801      	add	r0, sp, #4
 80014b0:	f001 fac6 	bl	8002a40 <HAL_RCCEx_PeriphCLKConfig>
 80014b4:	b940      	cbnz	r0, 80014c8 <SystemClock_Config+0x80>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80014b6:	f001 f9a9 	bl	800280c <HAL_RCC_EnableCSS>
}
 80014ba:	b015      	add	sp, #84	@ 0x54
 80014bc:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <SystemClock_Config+0x7a>
 80014c4:	b672      	cpsid	i
 80014c6:	e7fe      	b.n	80014c6 <SystemClock_Config+0x7e>
 80014c8:	b672      	cpsid	i
 80014ca:	e7fe      	b.n	80014ca <SystemClock_Config+0x82>

080014cc <main>:
{
 80014cc:	b508      	push	{r3, lr}
  HAL_Init();
 80014ce:	f000 f997 	bl	8001800 <HAL_Init>
  SystemClock_Config();
 80014d2:	f7ff ffb9 	bl	8001448 <SystemClock_Config>
  MX_GPIO_Init();
 80014d6:	f7ff ff33 	bl	8001340 <MX_GPIO_Init>
  MX_DMA_Init();
 80014da:	f7ff ff07 	bl	80012ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014de:	f000 f8b1 	bl	8001644 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014e2:	f7ff fe01 	bl	80010e8 <MX_ADC1_Init>
  app_main();
 80014e6:	f002 faa7 	bl	8003a38 <app_main>
  while (1)
 80014ea:	e7fe      	b.n	80014ea <main+0x1e>

080014ec <Error_Handler>:
 80014ec:	b672      	cpsid	i
  while (1)
 80014ee:	e7fe      	b.n	80014ee <Error_Handler+0x2>

080014f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014f0:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_MspInit+0x3c>)
 80014f4:	699a      	ldr	r2, [r3, #24]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	619a      	str	r2, [r3, #24]
 80014fc:	699a      	ldr	r2, [r3, #24]
 80014fe:	f002 0201 	and.w	r2, r2, #1
 8001502:	9200      	str	r2, [sp, #0]
 8001504:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	69da      	ldr	r2, [r3, #28]
 8001508:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800150c:	61da      	str	r2, [r3, #28]
 800150e:	69db      	ldr	r3, [r3, #28]
 8001510:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001514:	9301      	str	r3, [sp, #4]
 8001516:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001518:	4a05      	ldr	r2, [pc, #20]	@ (8001530 <HAL_MspInit+0x40>)
 800151a:	6853      	ldr	r3, [r2, #4]
 800151c:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001520:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001524:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001526:	b002      	add	sp, #8
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	40021000 	.word	0x40021000
 8001530:	40010000 	.word	0x40010000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001536:	f001 fa73 	bl	8002a20 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800153a:	e7fe      	b.n	800153a <NMI_Handler+0x6>

0800153c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153c:	e7fe      	b.n	800153c <HardFault_Handler>

0800153e <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <MemManage_Handler>

08001540 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <BusFault_Handler>

08001542 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001542:	e7fe      	b.n	8001542 <UsageFault_Handler>

08001544 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001544:	4770      	bx	lr

08001546 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001546:	4770      	bx	lr

08001548 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001548:	4770      	bx	lr

0800154a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800154a:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 f96a 	bl	8001824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001550:	f003 fb6c 	bl	8004c2c <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001554:	bd08      	pop	{r3, pc}
	...

08001558 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001558:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800155a:	4802      	ldr	r0, [pc, #8]	@ (8001564 <DMA1_Channel1_IRQHandler+0xc>)
 800155c:	f000 fd48 	bl	8001ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001560:	bd08      	pop	{r3, pc}
 8001562:	bf00      	nop
 8001564:	200001f0 	.word	0x200001f0

08001568 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001568:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800156a:	4802      	ldr	r0, [pc, #8]	@ (8001574 <DMA1_Channel4_IRQHandler+0xc>)
 800156c:	f000 fd40 	bl	8001ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001570:	bd08      	pop	{r3, pc}
 8001572:	bf00      	nop
 8001574:	20000268 	.word	0x20000268

08001578 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001578:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800157a:	4802      	ldr	r0, [pc, #8]	@ (8001584 <DMA1_Channel5_IRQHandler+0xc>)
 800157c:	f000 fd38 	bl	8001ff0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001580:	bd08      	pop	{r3, pc}
 8001582:	bf00      	nop
 8001584:	200002ac 	.word	0x200002ac

08001588 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001588:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800158a:	4c05      	ldr	r4, [pc, #20]	@ (80015a0 <USART1_IRQHandler+0x18>)
 800158c:	4620      	mov	r0, r4
 800158e:	f001 fda1 	bl	80030d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(&huart1);
 8001592:	4620      	mov	r0, r4
 8001594:	f003 fd38 	bl	8005008 <getContainerUartInstance>
  if(uart_instance) {
 8001598:	b108      	cbz	r0, 800159e <USART1_IRQHandler+0x16>
	  USER_UART_IRQHandler(uart_instance);
 800159a:	f003 fd1d 	bl	8004fd8 <USER_UART_IRQHandler>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 800159e:	bd10      	pop	{r4, pc}
 80015a0:	200002f0 	.word	0x200002f0

080015a4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80015a4:	2001      	movs	r0, #1
 80015a6:	4770      	bx	lr

080015a8 <_kill>:

int _kill(int pid, int sig)
{
 80015a8:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015aa:	f005 f8b1 	bl	8006710 <__errno>
 80015ae:	2316      	movs	r3, #22
 80015b0:	6003      	str	r3, [r0, #0]
  return -1;
}
 80015b2:	f04f 30ff 	mov.w	r0, #4294967295
 80015b6:	bd08      	pop	{r3, pc}

080015b8 <_exit>:

void _exit (int status)
{
 80015b8:	b508      	push	{r3, lr}
  errno = EINVAL;
 80015ba:	f005 f8a9 	bl	8006710 <__errno>
 80015be:	2316      	movs	r3, #22
 80015c0:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80015c2:	e7fe      	b.n	80015c2 <_exit+0xa>

080015c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015c4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015c6:	1e16      	subs	r6, r2, #0
 80015c8:	dd07      	ble.n	80015da <_read+0x16>
 80015ca:	460c      	mov	r4, r1
 80015cc:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80015ce:	f3af 8000 	nop.w
 80015d2:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	42a5      	cmp	r5, r4
 80015d8:	d1f9      	bne.n	80015ce <_read+0xa>
  }

  return len;
}
 80015da:	4630      	mov	r0, r6
 80015dc:	bd70      	pop	{r4, r5, r6, pc}

080015de <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80015de:	f04f 30ff 	mov.w	r0, #4294967295
 80015e2:	4770      	bx	lr

080015e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	604b      	str	r3, [r1, #4]
  return 0;
}
 80015ea:	2000      	movs	r0, #0
 80015ec:	4770      	bx	lr

080015ee <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80015ee:	2001      	movs	r0, #1
 80015f0:	4770      	bx	lr

080015f2 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80015f2:	2000      	movs	r0, #0
 80015f4:	4770      	bx	lr
	...

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b508      	push	{r3, lr}
 80015fa:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001630 <_sbrk+0x38>)
 80015fe:	6812      	ldr	r2, [r2, #0]
 8001600:	b152      	cbz	r2, 8001618 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001602:	4a0b      	ldr	r2, [pc, #44]	@ (8001630 <_sbrk+0x38>)
 8001604:	6810      	ldr	r0, [r2, #0]
 8001606:	4403      	add	r3, r0
 8001608:	4a0a      	ldr	r2, [pc, #40]	@ (8001634 <_sbrk+0x3c>)
 800160a:	490b      	ldr	r1, [pc, #44]	@ (8001638 <_sbrk+0x40>)
 800160c:	1a52      	subs	r2, r2, r1
 800160e:	4293      	cmp	r3, r2
 8001610:	d806      	bhi.n	8001620 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001612:	4a07      	ldr	r2, [pc, #28]	@ (8001630 <_sbrk+0x38>)
 8001614:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001616:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 8001618:	4a05      	ldr	r2, [pc, #20]	@ (8001630 <_sbrk+0x38>)
 800161a:	4908      	ldr	r1, [pc, #32]	@ (800163c <_sbrk+0x44>)
 800161c:	6011      	str	r1, [r2, #0]
 800161e:	e7f0      	b.n	8001602 <_sbrk+0xa>
    errno = ENOMEM;
 8001620:	f005 f876 	bl	8006710 <__errno>
 8001624:	230c      	movs	r3, #12
 8001626:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	e7f3      	b.n	8001616 <_sbrk+0x1e>
 800162e:	bf00      	nop
 8001630:	20000264 	.word	0x20000264
 8001634:	20005000 	.word	0x20005000
 8001638:	00000400 	.word	0x00000400
 800163c:	200004b8 	.word	0x200004b8

08001640 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001640:	4770      	bx	lr
	...

08001644 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001644:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001646:	480a      	ldr	r0, [pc, #40]	@ (8001670 <MX_USART1_UART_Init+0x2c>)
 8001648:	4b0a      	ldr	r3, [pc, #40]	@ (8001674 <MX_USART1_UART_Init+0x30>)
 800164a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800164c:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001650:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001652:	2300      	movs	r3, #0
 8001654:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001656:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001658:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800165a:	220c      	movs	r2, #12
 800165c:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165e:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001662:	f001 fb31 	bl	8002cc8 <HAL_UART_Init>
 8001666:	b900      	cbnz	r0, 800166a <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001668:	bd08      	pop	{r3, pc}
    Error_Handler();
 800166a:	f7ff ff3f 	bl	80014ec <Error_Handler>
}
 800166e:	e7fb      	b.n	8001668 <MX_USART1_UART_Init+0x24>
 8001670:	200002f0 	.word	0x200002f0
 8001674:	40013800 	.word	0x40013800

08001678 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001678:	b570      	push	{r4, r5, r6, lr}
 800167a:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	2300      	movs	r3, #0
 800167e:	9302      	str	r3, [sp, #8]
 8001680:	9303      	str	r3, [sp, #12]
 8001682:	9304      	str	r3, [sp, #16]
 8001684:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 8001686:	6802      	ldr	r2, [r0, #0]
 8001688:	4b31      	ldr	r3, [pc, #196]	@ (8001750 <HAL_UART_MspInit+0xd8>)
 800168a:	429a      	cmp	r2, r3
 800168c:	d001      	beq.n	8001692 <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800168e:	b006      	add	sp, #24
 8001690:	bd70      	pop	{r4, r5, r6, pc}
 8001692:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001698:	699a      	ldr	r2, [r3, #24]
 800169a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800169e:	619a      	str	r2, [r3, #24]
 80016a0:	699a      	ldr	r2, [r3, #24]
 80016a2:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80016a6:	9200      	str	r2, [sp, #0]
 80016a8:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	699a      	ldr	r2, [r3, #24]
 80016ac:	f042 0204 	orr.w	r2, r2, #4
 80016b0:	619a      	str	r2, [r3, #24]
 80016b2:	699b      	ldr	r3, [r3, #24]
 80016b4:	f003 0304 	and.w	r3, r3, #4
 80016b8:	9301      	str	r3, [sp, #4]
 80016ba:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80016c0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ca:	4e22      	ldr	r6, [pc, #136]	@ (8001754 <HAL_UART_MspInit+0xdc>)
 80016cc:	a902      	add	r1, sp, #8
 80016ce:	4630      	mov	r0, r6
 80016d0:	f000 fd30 	bl	8002134 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016d8:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016da:	2500      	movs	r5, #0
 80016dc:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e0:	a902      	add	r1, sp, #8
 80016e2:	4630      	mov	r0, r6
 80016e4:	f000 fd26 	bl	8002134 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80016e8:	481b      	ldr	r0, [pc, #108]	@ (8001758 <HAL_UART_MspInit+0xe0>)
 80016ea:	4b1c      	ldr	r3, [pc, #112]	@ (800175c <HAL_UART_MspInit+0xe4>)
 80016ec:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ee:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016f0:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016f2:	2380      	movs	r3, #128	@ 0x80
 80016f4:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f6:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f8:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016fa:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016fc:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016fe:	f000 fb85 	bl	8001e0c <HAL_DMA_Init>
 8001702:	b9f0      	cbnz	r0, 8001742 <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001704:	4b14      	ldr	r3, [pc, #80]	@ (8001758 <HAL_UART_MspInit+0xe0>)
 8001706:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8001708:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800170a:	4815      	ldr	r0, [pc, #84]	@ (8001760 <HAL_UART_MspInit+0xe8>)
 800170c:	4b15      	ldr	r3, [pc, #84]	@ (8001764 <HAL_UART_MspInit+0xec>)
 800170e:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001710:	2310      	movs	r3, #16
 8001712:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001714:	2300      	movs	r3, #0
 8001716:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001718:	2280      	movs	r2, #128	@ 0x80
 800171a:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800171c:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800171e:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001720:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001722:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001724:	f000 fb72 	bl	8001e0c <HAL_DMA_Init>
 8001728:	b970      	cbnz	r0, 8001748 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 800172a:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <HAL_UART_MspInit+0xe8>)
 800172c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800172e:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001730:	2200      	movs	r2, #0
 8001732:	4611      	mov	r1, r2
 8001734:	2025      	movs	r0, #37	@ 0x25
 8001736:	f000 fb11 	bl	8001d5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800173a:	2025      	movs	r0, #37	@ 0x25
 800173c:	f000 fb44 	bl	8001dc8 <HAL_NVIC_EnableIRQ>
}
 8001740:	e7a5      	b.n	800168e <HAL_UART_MspInit+0x16>
      Error_Handler();
 8001742:	f7ff fed3 	bl	80014ec <Error_Handler>
 8001746:	e7dd      	b.n	8001704 <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8001748:	f7ff fed0 	bl	80014ec <Error_Handler>
 800174c:	e7ed      	b.n	800172a <HAL_UART_MspInit+0xb2>
 800174e:	bf00      	nop
 8001750:	40013800 	.word	0x40013800
 8001754:	40010800 	.word	0x40010800
 8001758:	200002ac 	.word	0x200002ac
 800175c:	40020058 	.word	0x40020058
 8001760:	20000268 	.word	0x20000268
 8001764:	40020044 	.word	0x40020044

08001768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001768:	f7ff ff6a 	bl	8001640 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800176c:	480b      	ldr	r0, [pc, #44]	@ (800179c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800176e:	490c      	ldr	r1, [pc, #48]	@ (80017a0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001770:	4a0c      	ldr	r2, [pc, #48]	@ (80017a4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001772:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001774:	e002      	b.n	800177c <LoopCopyDataInit>

08001776 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001776:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001778:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800177a:	3304      	adds	r3, #4

0800177c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800177c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001780:	d3f9      	bcc.n	8001776 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001782:	4a09      	ldr	r2, [pc, #36]	@ (80017a8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001784:	4c09      	ldr	r4, [pc, #36]	@ (80017ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001786:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001788:	e001      	b.n	800178e <LoopFillZerobss>

0800178a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800178a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800178c:	3204      	adds	r2, #4

0800178e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001790:	d3fb      	bcc.n	800178a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001792:	f004 ffc3 	bl	800671c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001796:	f7ff fe99 	bl	80014cc <main>
  bx lr
 800179a:	4770      	bx	lr
  ldr r0, =_sdata
 800179c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017a4:	0800910c 	.word	0x0800910c
  ldr r2, =_sbss
 80017a8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017ac:	200004b8 	.word	0x200004b8

080017b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017b0:	e7fe      	b.n	80017b0 <ADC1_2_IRQHandler>
	...

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b510      	push	{r4, lr}
 80017b6:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017b8:	4b0e      	ldr	r3, [pc, #56]	@ (80017f4 <HAL_InitTick+0x40>)
 80017ba:	781a      	ldrb	r2, [r3, #0]
 80017bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80017c4:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <HAL_InitTick+0x44>)
 80017c6:	6810      	ldr	r0, [r2, #0]
 80017c8:	fbb0 f0f3 	udiv	r0, r0, r3
 80017cc:	f000 fb0a 	bl	8001de4 <HAL_SYSTICK_Config>
 80017d0:	b968      	cbnz	r0, 80017ee <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	2c0f      	cmp	r4, #15
 80017d4:	d901      	bls.n	80017da <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
 80017d8:	e00a      	b.n	80017f0 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017da:	2200      	movs	r2, #0
 80017dc:	4621      	mov	r1, r4
 80017de:	f04f 30ff 	mov.w	r0, #4294967295
 80017e2:	f000 fabb 	bl	8001d5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_InitTick+0x48>)
 80017e8:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2000      	movs	r0, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80017ee:	2001      	movs	r0, #1
}
 80017f0:	bd10      	pop	{r4, pc}
 80017f2:	bf00      	nop
 80017f4:	20000004 	.word	0x20000004
 80017f8:	20000000 	.word	0x20000000
 80017fc:	20000008 	.word	0x20000008

08001800 <HAL_Init>:
{
 8001800:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001802:	4a07      	ldr	r2, [pc, #28]	@ (8001820 <HAL_Init+0x20>)
 8001804:	6813      	ldr	r3, [r2, #0]
 8001806:	f043 0310 	orr.w	r3, r3, #16
 800180a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800180c:	2003      	movs	r0, #3
 800180e:	f000 fa93 	bl	8001d38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8001812:	200f      	movs	r0, #15
 8001814:	f7ff ffce 	bl	80017b4 <HAL_InitTick>
  HAL_MspInit();
 8001818:	f7ff fe6a 	bl	80014f0 <HAL_MspInit>
}
 800181c:	2000      	movs	r0, #0
 800181e:	bd08      	pop	{r3, pc}
 8001820:	40022000 	.word	0x40022000

08001824 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001824:	4a03      	ldr	r2, [pc, #12]	@ (8001834 <HAL_IncTick+0x10>)
 8001826:	6811      	ldr	r1, [r2, #0]
 8001828:	4b03      	ldr	r3, [pc, #12]	@ (8001838 <HAL_IncTick+0x14>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	440b      	add	r3, r1
 800182e:	6013      	str	r3, [r2, #0]
}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000338 	.word	0x20000338
 8001838:	20000004 	.word	0x20000004

0800183c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800183c:	4b01      	ldr	r3, [pc, #4]	@ (8001844 <HAL_GetTick+0x8>)
 800183e:	6818      	ldr	r0, [r3, #0]
}
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	20000338 	.word	0x20000338

08001848 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001848:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800184a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800184c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800184e:	f012 0f50 	tst.w	r2, #80	@ 0x50
 8001852:	d11e      	bne.n	8001892 <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001854:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001856:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	6892      	ldr	r2, [r2, #8]
 8001860:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001864:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001868:	d003      	beq.n	8001872 <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800186a:	4618      	mov	r0, r3
 800186c:	f003 f93a 	bl	8004ae4 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001870:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001872:	7b1a      	ldrb	r2, [r3, #12]
 8001874:	2a00      	cmp	r2, #0
 8001876:	d1f8      	bne.n	800186a <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001878:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800187a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800187e:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001880:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001882:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 8001886:	d1f0      	bne.n	800186a <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001888:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800188a:	f042 0201 	orr.w	r2, r2, #1
 800188e:	629a      	str	r2, [r3, #40]	@ 0x28
 8001890:	e7eb      	b.n	800186a <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8001892:	6a1b      	ldr	r3, [r3, #32]
 8001894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001896:	4798      	blx	r3
}
 8001898:	e7ea      	b.n	8001870 <ADC_DMAConvCplt+0x28>

0800189a <HAL_ADC_ConvHalfCpltCallback>:
}
 800189a:	4770      	bx	lr

0800189c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800189c:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800189e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80018a0:	f7ff fffb 	bl	800189a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a4:	bd08      	pop	{r3, pc}

080018a6 <HAL_ADC_ErrorCallback>:
}
 80018a6:	4770      	bx	lr

080018a8 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018a8:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018aa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80018ac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80018ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018b2:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80018b4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80018b6:	f043 0304 	orr.w	r3, r3, #4
 80018ba:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018bc:	f7ff fff3 	bl	80018a6 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c0:	bd08      	pop	{r3, pc}
	...

080018c4 <HAL_ADC_ConfigChannel>:
{ 
 80018c4:	b430      	push	{r4, r5}
 80018c6:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80018c8:	2200      	movs	r2, #0
 80018ca:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018cc:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80018d0:	2a01      	cmp	r2, #1
 80018d2:	f000 8093 	beq.w	80019fc <HAL_ADC_ConfigChannel+0x138>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2201      	movs	r2, #1
 80018da:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80018de:	684a      	ldr	r2, [r1, #4]
 80018e0:	2a06      	cmp	r2, #6
 80018e2:	d82d      	bhi.n	8001940 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018e4:	6804      	ldr	r4, [r0, #0]
 80018e6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80018e8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018ec:	3a05      	subs	r2, #5
 80018ee:	f04f 0c1f 	mov.w	ip, #31
 80018f2:	fa0c fc02 	lsl.w	ip, ip, r2
 80018f6:	ea20 000c 	bic.w	r0, r0, ip
 80018fa:	680d      	ldr	r5, [r1, #0]
 80018fc:	fa05 f202 	lsl.w	r2, r5, r2
 8001900:	4302      	orrs	r2, r0
 8001902:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001904:	680a      	ldr	r2, [r1, #0]
 8001906:	2a09      	cmp	r2, #9
 8001908:	d938      	bls.n	800197c <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800190a:	681c      	ldr	r4, [r3, #0]
 800190c:	68e0      	ldr	r0, [r4, #12]
 800190e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001912:	3a1e      	subs	r2, #30
 8001914:	f04f 0c07 	mov.w	ip, #7
 8001918:	fa0c fc02 	lsl.w	ip, ip, r2
 800191c:	ea20 000c 	bic.w	r0, r0, ip
 8001920:	688d      	ldr	r5, [r1, #8]
 8001922:	fa05 f202 	lsl.w	r2, r5, r2
 8001926:	4302      	orrs	r2, r0
 8001928:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800192a:	680a      	ldr	r2, [r1, #0]
 800192c:	3a10      	subs	r2, #16
 800192e:	2a01      	cmp	r2, #1
 8001930:	d934      	bls.n	800199c <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001932:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 8001934:	2200      	movs	r2, #0
 8001936:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 800193a:	b002      	add	sp, #8
 800193c:	bc30      	pop	{r4, r5}
 800193e:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001940:	2a0c      	cmp	r2, #12
 8001942:	d80d      	bhi.n	8001960 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001944:	6805      	ldr	r5, [r0, #0]
 8001946:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001948:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800194c:	3a23      	subs	r2, #35	@ 0x23
 800194e:	241f      	movs	r4, #31
 8001950:	4094      	lsls	r4, r2
 8001952:	ea20 0004 	bic.w	r0, r0, r4
 8001956:	680c      	ldr	r4, [r1, #0]
 8001958:	4094      	lsls	r4, r2
 800195a:	4320      	orrs	r0, r4
 800195c:	6328      	str	r0, [r5, #48]	@ 0x30
 800195e:	e7d1      	b.n	8001904 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001960:	6805      	ldr	r5, [r0, #0]
 8001962:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 8001964:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001968:	3a41      	subs	r2, #65	@ 0x41
 800196a:	241f      	movs	r4, #31
 800196c:	4094      	lsls	r4, r2
 800196e:	ea20 0004 	bic.w	r0, r0, r4
 8001972:	680c      	ldr	r4, [r1, #0]
 8001974:	4094      	lsls	r4, r2
 8001976:	4320      	orrs	r0, r4
 8001978:	62e8      	str	r0, [r5, #44]	@ 0x2c
 800197a:	e7c3      	b.n	8001904 <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 800197c:	681c      	ldr	r4, [r3, #0]
 800197e:	6920      	ldr	r0, [r4, #16]
 8001980:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001984:	f04f 0c07 	mov.w	ip, #7
 8001988:	fa0c fc02 	lsl.w	ip, ip, r2
 800198c:	ea20 000c 	bic.w	r0, r0, ip
 8001990:	688d      	ldr	r5, [r1, #8]
 8001992:	fa05 f202 	lsl.w	r2, r5, r2
 8001996:	4302      	orrs	r2, r0
 8001998:	6122      	str	r2, [r4, #16]
 800199a:	e7c6      	b.n	800192a <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 800199c:	6818      	ldr	r0, [r3, #0]
 800199e:	4a18      	ldr	r2, [pc, #96]	@ (8001a00 <HAL_ADC_ConfigChannel+0x13c>)
 80019a0:	4290      	cmp	r0, r2
 80019a2:	d005      	beq.n	80019b0 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80019a6:	f042 0220 	orr.w	r2, r2, #32
 80019aa:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 80019ac:	2001      	movs	r0, #1
 80019ae:	e7c1      	b.n	8001934 <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80019b0:	6892      	ldr	r2, [r2, #8]
 80019b2:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 80019b6:	d11d      	bne.n	80019f4 <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80019b8:	4811      	ldr	r0, [pc, #68]	@ (8001a00 <HAL_ADC_ConfigChannel+0x13c>)
 80019ba:	6882      	ldr	r2, [r0, #8]
 80019bc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80019c0:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019c2:	680a      	ldr	r2, [r1, #0]
 80019c4:	2a10      	cmp	r2, #16
 80019c6:	d001      	beq.n	80019cc <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2000      	movs	r0, #0
 80019ca:	e7b3      	b.n	8001934 <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001a04 <HAL_ADC_ConfigChannel+0x140>)
 80019ce:	6812      	ldr	r2, [r2, #0]
 80019d0:	490d      	ldr	r1, [pc, #52]	@ (8001a08 <HAL_ADC_ConfigChannel+0x144>)
 80019d2:	fba1 1202 	umull	r1, r2, r1, r2
 80019d6:	0c92      	lsrs	r2, r2, #18
 80019d8:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019dc:	0052      	lsls	r2, r2, #1
 80019de:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80019e0:	9a01      	ldr	r2, [sp, #4]
 80019e2:	b14a      	cbz	r2, 80019f8 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 80019e4:	9a01      	ldr	r2, [sp, #4]
 80019e6:	3a01      	subs	r2, #1
 80019e8:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80019ea:	9a01      	ldr	r2, [sp, #4]
 80019ec:	2a00      	cmp	r2, #0
 80019ee:	d1f9      	bne.n	80019e4 <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019f0:	2000      	movs	r0, #0
 80019f2:	e79f      	b.n	8001934 <HAL_ADC_ConfigChannel+0x70>
 80019f4:	2000      	movs	r0, #0
 80019f6:	e79d      	b.n	8001934 <HAL_ADC_ConfigChannel+0x70>
 80019f8:	2000      	movs	r0, #0
 80019fa:	e79b      	b.n	8001934 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80019fc:	2002      	movs	r0, #2
 80019fe:	e79c      	b.n	800193a <HAL_ADC_ConfigChannel+0x76>
 8001a00:	40012400 	.word	0x40012400
 8001a04:	20000000 	.word	0x20000000
 8001a08:	431bde83 	.word	0x431bde83

08001a0c <ADC_Enable>:
{
 8001a0c:	b530      	push	{r4, r5, lr}
 8001a0e:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a14:	6803      	ldr	r3, [r0, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	f012 0f01 	tst.w	r2, #1
 8001a1c:	d13b      	bne.n	8001a96 <ADC_Enable+0x8a>
 8001a1e:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	f042 0201 	orr.w	r2, r2, #1
 8001a26:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a28:	4b1c      	ldr	r3, [pc, #112]	@ (8001a9c <ADC_Enable+0x90>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a1c      	ldr	r2, [pc, #112]	@ (8001aa0 <ADC_Enable+0x94>)
 8001a2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a32:	0c9b      	lsrs	r3, r3, #18
 8001a34:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001a36:	9b01      	ldr	r3, [sp, #4]
 8001a38:	b12b      	cbz	r3, 8001a46 <ADC_Enable+0x3a>
      wait_loop_index--;
 8001a3a:	9b01      	ldr	r3, [sp, #4]
 8001a3c:	3b01      	subs	r3, #1
 8001a3e:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001a40:	9b01      	ldr	r3, [sp, #4]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1f9      	bne.n	8001a3a <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 8001a46:	f7ff fef9 	bl	800183c <HAL_GetTick>
 8001a4a:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a4c:	6823      	ldr	r3, [r4, #0]
 8001a4e:	689b      	ldr	r3, [r3, #8]
 8001a50:	f013 0f01 	tst.w	r3, #1
 8001a54:	d006      	beq.n	8001a64 <ADC_Enable+0x58>
  return HAL_OK;
 8001a56:	2000      	movs	r0, #0
 8001a58:	e01e      	b.n	8001a98 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a5a:	6823      	ldr	r3, [r4, #0]
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	f013 0f01 	tst.w	r3, #1
 8001a62:	d116      	bne.n	8001a92 <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a64:	f7ff feea 	bl	800183c <HAL_GetTick>
 8001a68:	1b43      	subs	r3, r0, r5
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	d9f5      	bls.n	8001a5a <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a6e:	6823      	ldr	r3, [r4, #0]
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f013 0f01 	tst.w	r3, #1
 8001a76:	d1f0      	bne.n	8001a5a <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a78:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a7a:	f043 0310 	orr.w	r3, r3, #16
 8001a7e:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a80:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8001a88:	2300      	movs	r3, #0
 8001a8a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8001a8e:	2001      	movs	r0, #1
 8001a90:	e002      	b.n	8001a98 <ADC_Enable+0x8c>
  return HAL_OK;
 8001a92:	2000      	movs	r0, #0
 8001a94:	e000      	b.n	8001a98 <ADC_Enable+0x8c>
 8001a96:	2000      	movs	r0, #0
}
 8001a98:	b003      	add	sp, #12
 8001a9a:	bd30      	pop	{r4, r5, pc}
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	431bde83 	.word	0x431bde83

08001aa4 <HAL_ADC_Start_DMA>:
{
 8001aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001aa6:	4604      	mov	r4, r0
 8001aa8:	460d      	mov	r5, r1
 8001aaa:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001aac:	6801      	ldr	r1, [r0, #0]
 8001aae:	4842      	ldr	r0, [pc, #264]	@ (8001bb8 <HAL_ADC_Start_DMA+0x114>)
 8001ab0:	4281      	cmp	r1, r0
 8001ab2:	d05d      	beq.n	8001b70 <HAL_ADC_Start_DMA+0xcc>
 8001ab4:	4b41      	ldr	r3, [pc, #260]	@ (8001bbc <HAL_ADC_Start_DMA+0x118>)
 8001ab6:	4299      	cmp	r1, r3
 8001ab8:	d05a      	beq.n	8001b70 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 8001aba:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d077      	beq.n	8001bb2 <HAL_ADC_Start_DMA+0x10e>
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001ac8:	4620      	mov	r0, r4
 8001aca:	f7ff ff9f 	bl	8001a0c <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001ace:	4607      	mov	r7, r0
 8001ad0:	2800      	cmp	r0, #0
 8001ad2:	d16a      	bne.n	8001baa <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8001ad4:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001ad6:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8001ada:	f021 0101 	bic.w	r1, r1, #1
 8001ade:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001ae2:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001ae4:	6822      	ldr	r2, [r4, #0]
 8001ae6:	4b35      	ldr	r3, [pc, #212]	@ (8001bbc <HAL_ADC_Start_DMA+0x118>)
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d048      	beq.n	8001b7e <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aec:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001aee:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001af2:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001af4:	6853      	ldr	r3, [r2, #4]
 8001af6:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001afa:	d005      	beq.n	8001b08 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001afc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001afe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b02:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b06:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b08:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b0a:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b0e:	bf1a      	itte	ne
 8001b10:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
 8001b12:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001b16:	2300      	moveq	r3, #0
 8001b18:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b20:	6a23      	ldr	r3, [r4, #32]
 8001b22:	4a27      	ldr	r2, [pc, #156]	@ (8001bc0 <HAL_ADC_Start_DMA+0x11c>)
 8001b24:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b26:	6a23      	ldr	r3, [r4, #32]
 8001b28:	4a26      	ldr	r2, [pc, #152]	@ (8001bc4 <HAL_ADC_Start_DMA+0x120>)
 8001b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b2c:	6a23      	ldr	r3, [r4, #32]
 8001b2e:	4a26      	ldr	r2, [pc, #152]	@ (8001bc8 <HAL_ADC_Start_DMA+0x124>)
 8001b30:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b32:	6823      	ldr	r3, [r4, #0]
 8001b34:	f06f 0202 	mvn.w	r2, #2
 8001b38:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b3a:	6822      	ldr	r2, [r4, #0]
 8001b3c:	6893      	ldr	r3, [r2, #8]
 8001b3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b42:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b44:	6821      	ldr	r1, [r4, #0]
 8001b46:	4633      	mov	r3, r6
 8001b48:	462a      	mov	r2, r5
 8001b4a:	314c      	adds	r1, #76	@ 0x4c
 8001b4c:	6a20      	ldr	r0, [r4, #32]
 8001b4e:	f000 f993 	bl	8001e78 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b52:	6823      	ldr	r3, [r4, #0]
 8001b54:	689a      	ldr	r2, [r3, #8]
 8001b56:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001b5a:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	bf0c      	ite	eq
 8001b62:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b66:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8001b6a:	609a      	str	r2, [r3, #8]
}
 8001b6c:	4638      	mov	r0, r7
 8001b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b70:	4b11      	ldr	r3, [pc, #68]	@ (8001bb8 <HAL_ADC_Start_DMA+0x114>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001b78:	d09f      	beq.n	8001aba <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001b7a:	2701      	movs	r7, #1
 8001b7c:	e7f6      	b.n	8001b6c <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b7e:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001b88:	d0b0      	beq.n	8001aec <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b8a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b90:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_ADC_Start_DMA+0x114>)
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001b9a:	d0b5      	beq.n	8001b08 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b9c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b9e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ba2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ba6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ba8:	e7ae      	b.n	8001b08 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8001baa:	2300      	movs	r3, #0
 8001bac:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8001bb0:	e7dc      	b.n	8001b6c <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8001bb2:	2702      	movs	r7, #2
 8001bb4:	e7da      	b.n	8001b6c <HAL_ADC_Start_DMA+0xc8>
 8001bb6:	bf00      	nop
 8001bb8:	40012400 	.word	0x40012400
 8001bbc:	40012800 	.word	0x40012800
 8001bc0:	08001849 	.word	0x08001849
 8001bc4:	0800189d 	.word	0x0800189d
 8001bc8:	080018a9 	.word	0x080018a9

08001bcc <ADC_ConversionStop_Disable>:
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bce:	6803      	ldr	r3, [r0, #0]
 8001bd0:	689a      	ldr	r2, [r3, #8]
 8001bd2:	f012 0f01 	tst.w	r2, #1
 8001bd6:	d101      	bne.n	8001bdc <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001bd8:	2000      	movs	r0, #0
}
 8001bda:	bd38      	pop	{r3, r4, r5, pc}
 8001bdc:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001bde:	689a      	ldr	r2, [r3, #8]
 8001be0:	f022 0201 	bic.w	r2, r2, #1
 8001be4:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001be6:	f7ff fe29 	bl	800183c <HAL_GetTick>
 8001bea:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bec:	6823      	ldr	r3, [r4, #0]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f013 0f01 	tst.w	r3, #1
 8001bf4:	d106      	bne.n	8001c04 <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	e7ef      	b.n	8001bda <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bfa:	6823      	ldr	r3, [r4, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f013 0f01 	tst.w	r3, #1
 8001c02:	d013      	beq.n	8001c2c <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c04:	f7ff fe1a 	bl	800183c <HAL_GetTick>
 8001c08:	1b43      	subs	r3, r0, r5
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d9f5      	bls.n	8001bfa <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001c0e:	6823      	ldr	r3, [r4, #0]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f013 0f01 	tst.w	r3, #1
 8001c16:	d0f0      	beq.n	8001bfa <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c1a:	f043 0310 	orr.w	r3, r3, #16
 8001c1e:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c20:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001c28:	2001      	movs	r0, #1
 8001c2a:	e7d6      	b.n	8001bda <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	e7d4      	b.n	8001bda <ADC_ConversionStop_Disable+0xe>

08001c30 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001c30:	2800      	cmp	r0, #0
 8001c32:	d07a      	beq.n	8001d2a <HAL_ADC_Init+0xfa>
{
 8001c34:	b570      	push	{r4, r5, r6, lr}
 8001c36:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c38:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d04f      	beq.n	8001cde <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c3e:	4620      	mov	r0, r4
 8001c40:	f7ff ffc4 	bl	8001bcc <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c44:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c46:	f013 0310 	ands.w	r3, r3, #16
 8001c4a:	d168      	bne.n	8001d1e <HAL_ADC_Init+0xee>
 8001c4c:	2800      	cmp	r0, #0
 8001c4e:	d166      	bne.n	8001d1e <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8001c50:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001c52:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001c56:	f022 0202 	bic.w	r2, r2, #2
 8001c5a:	f042 0202 	orr.w	r2, r2, #2
 8001c5e:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c60:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c62:	6862      	ldr	r2, [r4, #4]
 8001c64:	69e5      	ldr	r5, [r4, #28]
 8001c66:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c68:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c6c:	68a5      	ldr	r5, [r4, #8]
 8001c6e:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001c72:	d004      	beq.n	8001c7e <HAL_ADC_Init+0x4e>
 8001c74:	2d01      	cmp	r5, #1
 8001c76:	bf14      	ite	ne
 8001c78:	2500      	movne	r5, #0
 8001c7a:	2501      	moveq	r5, #1
 8001c7c:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c7e:	7d26      	ldrb	r6, [r4, #20]
 8001c80:	2e01      	cmp	r6, #1
 8001c82:	d032      	beq.n	8001cea <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8001c84:	6826      	ldr	r6, [r4, #0]
 8001c86:	6871      	ldr	r1, [r6, #4]
 8001c88:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8001c8c:	4329      	orrs	r1, r5
 8001c8e:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001c90:	6825      	ldr	r5, [r4, #0]
 8001c92:	68ae      	ldr	r6, [r5, #8]
 8001c94:	4926      	ldr	r1, [pc, #152]	@ (8001d30 <HAL_ADC_Init+0x100>)
 8001c96:	4031      	ands	r1, r6
 8001c98:	4311      	orrs	r1, r2
 8001c9a:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c9c:	68a1      	ldr	r1, [r4, #8]
 8001c9e:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001ca2:	d001      	beq.n	8001ca8 <HAL_ADC_Init+0x78>
 8001ca4:	2901      	cmp	r1, #1
 8001ca6:	d102      	bne.n	8001cae <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001ca8:	6923      	ldr	r3, [r4, #16]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001cae:	6825      	ldr	r5, [r4, #0]
 8001cb0:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001cb2:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001cb6:	430b      	orrs	r3, r1
 8001cb8:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001cba:	6823      	ldr	r3, [r4, #0]
 8001cbc:	6899      	ldr	r1, [r3, #8]
 8001cbe:	4b1d      	ldr	r3, [pc, #116]	@ (8001d34 <HAL_ADC_Init+0x104>)
 8001cc0:	400b      	ands	r3, r1
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d022      	beq.n	8001d0c <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8001cc6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cc8:	f023 0312 	bic.w	r3, r3, #18
 8001ccc:	f043 0310 	orr.w	r3, r3, #16
 8001cd0:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cd2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8001cda:	2001      	movs	r0, #1
 8001cdc:	e024      	b.n	8001d28 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8001cde:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001ce0:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001ce4:	f7ff faa4 	bl	8001230 <HAL_ADC_MspInit>
 8001ce8:	e7a9      	b.n	8001c3e <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cea:	b931      	cbnz	r1, 8001cfa <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cec:	69a1      	ldr	r1, [r4, #24]
 8001cee:	3901      	subs	r1, #1
 8001cf0:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001cf4:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8001cf8:	e7c4      	b.n	8001c84 <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cfa:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001cfc:	f041 0120 	orr.w	r1, r1, #32
 8001d00:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d02:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001d04:	f041 0101 	orr.w	r1, r1, #1
 8001d08:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8001d0a:	e7bb      	b.n	8001c84 <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001d10:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d12:	f023 0303 	bic.w	r3, r3, #3
 8001d16:	f043 0301 	orr.w	r3, r3, #1
 8001d1a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001d1c:	e004      	b.n	8001d28 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d1e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001d20:	f043 0310 	orr.w	r3, r3, #16
 8001d24:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001d26:	2001      	movs	r0, #1
}
 8001d28:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d2a:	2001      	movs	r0, #1
}
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	ffe1f7fd 	.word	0xffe1f7fd
 8001d34:	ff1f0efe 	.word	0xff1f0efe

08001d38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4907      	ldr	r1, [pc, #28]	@ (8001d58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d3a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d3c:	0203      	lsls	r3, r0, #8
 8001d3e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d46:	0412      	lsls	r2, r2, #16
 8001d48:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d4c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001d54:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d5c:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d5e:	4b18      	ldr	r3, [pc, #96]	@ (8001dc0 <HAL_NVIC_SetPriority+0x64>)
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d66:	f1c3 0c07 	rsb	ip, r3, #7
 8001d6a:	f1bc 0f04 	cmp.w	ip, #4
 8001d6e:	bf28      	it	cs
 8001d70:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d74:	f103 0e04 	add.w	lr, r3, #4
 8001d78:	f1be 0f06 	cmp.w	lr, #6
 8001d7c:	bf8c      	ite	hi
 8001d7e:	3b03      	subhi	r3, #3
 8001d80:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d82:	f04f 3eff 	mov.w	lr, #4294967295
 8001d86:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d8a:	ea21 010c 	bic.w	r1, r1, ip
 8001d8e:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d90:	fa0e fe03 	lsl.w	lr, lr, r3
 8001d94:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d98:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001d9a:	2800      	cmp	r0, #0
 8001d9c:	db09      	blt.n	8001db2 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d9e:	0109      	lsls	r1, r1, #4
 8001da0:	b2c9      	uxtb	r1, r1
 8001da2:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001da6:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001daa:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001dae:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db2:	f000 000f 	and.w	r0, r0, #15
 8001db6:	0109      	lsls	r1, r1, #4
 8001db8:	b2c9      	uxtb	r1, r1
 8001dba:	4b02      	ldr	r3, [pc, #8]	@ (8001dc4 <HAL_NVIC_SetPriority+0x68>)
 8001dbc:	5419      	strb	r1, [r3, r0]
 8001dbe:	e7f6      	b.n	8001dae <HAL_NVIC_SetPriority+0x52>
 8001dc0:	e000ed00 	.word	0xe000ed00
 8001dc4:	e000ed14 	.word	0xe000ed14

08001dc8 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001dc8:	2800      	cmp	r0, #0
 8001dca:	db07      	blt.n	8001ddc <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dcc:	0941      	lsrs	r1, r0, #5
 8001dce:	f000 001f 	and.w	r0, r0, #31
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	4083      	lsls	r3, r0
 8001dd6:	4a02      	ldr	r2, [pc, #8]	@ (8001de0 <HAL_NVIC_EnableIRQ+0x18>)
 8001dd8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001de4:	3801      	subs	r0, #1
 8001de6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001dea:	d20b      	bcs.n	8001e04 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001df0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	4a05      	ldr	r2, [pc, #20]	@ (8001e08 <HAL_SYSTICK_Config+0x24>)
 8001df4:	21f0      	movs	r1, #240	@ 0xf0
 8001df6:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfa:	2000      	movs	r0, #0
 8001dfc:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	2207      	movs	r2, #7
 8001e00:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e02:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001e04:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001e0c:	b360      	cbz	r0, 8001e68 <HAL_DMA_Init+0x5c>
{
 8001e0e:	b410      	push	{r4}
 8001e10:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001e12:	6801      	ldr	r1, [r0, #0]
 8001e14:	4b15      	ldr	r3, [pc, #84]	@ (8001e6c <HAL_DMA_Init+0x60>)
 8001e16:	440b      	add	r3, r1
 8001e18:	4815      	ldr	r0, [pc, #84]	@ (8001e70 <HAL_DMA_Init+0x64>)
 8001e1a:	fba0 0303 	umull	r0, r3, r0, r3
 8001e1e:	091b      	lsrs	r3, r3, #4
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001e24:	4b13      	ldr	r3, [pc, #76]	@ (8001e74 <HAL_DMA_Init+0x68>)
 8001e26:	63d3      	str	r3, [r2, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e28:	2302      	movs	r3, #2
 8001e2a:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e2e:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e30:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 8001e34:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e38:	6853      	ldr	r3, [r2, #4]
 8001e3a:	6894      	ldr	r4, [r2, #8]
 8001e3c:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e3e:	68d4      	ldr	r4, [r2, #12]
 8001e40:	4323      	orrs	r3, r4
 8001e42:	6914      	ldr	r4, [r2, #16]
 8001e44:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e46:	6954      	ldr	r4, [r2, #20]
 8001e48:	4323      	orrs	r3, r4
 8001e4a:	6994      	ldr	r4, [r2, #24]
 8001e4c:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e4e:	69d4      	ldr	r4, [r2, #28]
 8001e50:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001e52:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e54:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e56:	2000      	movs	r0, #0
 8001e58:	6390      	str	r0, [r2, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e60:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8001e64:	bc10      	pop	{r4}
 8001e66:	4770      	bx	lr
    return HAL_ERROR;
 8001e68:	2001      	movs	r0, #1
}
 8001e6a:	4770      	bx	lr
 8001e6c:	bffdfff8 	.word	0xbffdfff8
 8001e70:	cccccccd 	.word	0xcccccccd
 8001e74:	40020000 	.word	0x40020000

08001e78 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e78:	f890 c020 	ldrb.w	ip, [r0, #32]
 8001e7c:	f1bc 0f01 	cmp.w	ip, #1
 8001e80:	d047      	beq.n	8001f12 <HAL_DMA_Start_IT+0x9a>
 8001e82:	f04f 0c01 	mov.w	ip, #1
 8001e86:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e8a:	f890 c021 	ldrb.w	ip, [r0, #33]	@ 0x21
 8001e8e:	fa5f fc8c 	uxtb.w	ip, ip
 8001e92:	f1bc 0f01 	cmp.w	ip, #1
 8001e96:	d004      	beq.n	8001ea2 <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	4770      	bx	lr
{
 8001ea2:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ea4:	2402      	movs	r4, #2
 8001ea6:	f880 4021 	strb.w	r4, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eaa:	2400      	movs	r4, #0
 8001eac:	6384      	str	r4, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001eae:	6805      	ldr	r5, [r0, #0]
 8001eb0:	682c      	ldr	r4, [r5, #0]
 8001eb2:	f024 0401 	bic.w	r4, r4, #1
 8001eb6:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001eb8:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8001eba:	2401      	movs	r4, #1
 8001ebc:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8001ebe:	40b4      	lsls	r4, r6
 8001ec0:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001ec2:	6804      	ldr	r4, [r0, #0]
 8001ec4:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001ec6:	6843      	ldr	r3, [r0, #4]
 8001ec8:	2b10      	cmp	r3, #16
 8001eca:	d012      	beq.n	8001ef2 <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ecc:	6803      	ldr	r3, [r0, #0]
 8001ece:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ed0:	6803      	ldr	r3, [r0, #0]
 8001ed2:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001ed4:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001ed6:	b18b      	cbz	r3, 8001efc <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ed8:	6802      	ldr	r2, [r0, #0]
 8001eda:	6813      	ldr	r3, [r2, #0]
 8001edc:	f043 030e 	orr.w	r3, r3, #14
 8001ee0:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001ee2:	6802      	ldr	r2, [r0, #0]
 8001ee4:	6813      	ldr	r3, [r2, #0]
 8001ee6:	f043 0301 	orr.w	r3, r3, #1
 8001eea:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001eec:	2000      	movs	r0, #0
}
 8001eee:	bc70      	pop	{r4, r5, r6}
 8001ef0:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001ef2:	6803      	ldr	r3, [r0, #0]
 8001ef4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ef6:	6803      	ldr	r3, [r0, #0]
 8001ef8:	60d9      	str	r1, [r3, #12]
 8001efa:	e7eb      	b.n	8001ed4 <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001efc:	6802      	ldr	r2, [r0, #0]
 8001efe:	6813      	ldr	r3, [r2, #0]
 8001f00:	f023 0304 	bic.w	r3, r3, #4
 8001f04:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001f06:	6802      	ldr	r2, [r0, #0]
 8001f08:	6813      	ldr	r3, [r2, #0]
 8001f0a:	f043 030a 	orr.w	r3, r3, #10
 8001f0e:	6013      	str	r3, [r2, #0]
 8001f10:	e7e7      	b.n	8001ee2 <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8001f12:	2002      	movs	r0, #2
}
 8001f14:	4770      	bx	lr

08001f16 <HAL_DMA_Abort>:
{
 8001f16:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f18:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001f1c:	b2d2      	uxtb	r2, r2
 8001f1e:	2a02      	cmp	r2, #2
 8001f20:	d006      	beq.n	8001f30 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f22:	2204      	movs	r2, #4
 8001f24:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8001f26:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001f2e:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f30:	6801      	ldr	r1, [r0, #0]
 8001f32:	680a      	ldr	r2, [r1, #0]
 8001f34:	f022 020e 	bic.w	r2, r2, #14
 8001f38:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	6801      	ldr	r1, [r0, #0]
 8001f3c:	680a      	ldr	r2, [r1, #0]
 8001f3e:	f022 0201 	bic.w	r2, r2, #1
 8001f42:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f44:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001f46:	2101      	movs	r1, #1
 8001f48:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f4a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f4e:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001f50:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8001f54:	2000      	movs	r0, #0
 8001f56:	e7e7      	b.n	8001f28 <HAL_DMA_Abort+0x12>

08001f58 <HAL_DMA_Abort_IT>:
{  
 8001f58:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f5a:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d003      	beq.n	8001f6c <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f64:	2304      	movs	r3, #4
 8001f66:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8001f68:	2001      	movs	r0, #1
}
 8001f6a:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f6c:	6802      	ldr	r2, [r0, #0]
 8001f6e:	6813      	ldr	r3, [r2, #0]
 8001f70:	f023 030e 	bic.w	r3, r3, #14
 8001f74:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f76:	6802      	ldr	r2, [r0, #0]
 8001f78:	6813      	ldr	r3, [r2, #0]
 8001f7a:	f023 0301 	bic.w	r3, r3, #1
 8001f7e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f80:	6803      	ldr	r3, [r0, #0]
 8001f82:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <HAL_DMA_Abort_IT+0x90>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d013      	beq.n	8001fb0 <HAL_DMA_Abort_IT+0x58>
 8001f88:	3214      	adds	r2, #20
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01e      	beq.n	8001fcc <HAL_DMA_Abort_IT+0x74>
 8001f8e:	3214      	adds	r2, #20
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d01d      	beq.n	8001fd0 <HAL_DMA_Abort_IT+0x78>
 8001f94:	3214      	adds	r2, #20
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d01d      	beq.n	8001fd6 <HAL_DMA_Abort_IT+0x7e>
 8001f9a:	3214      	adds	r2, #20
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d01d      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x84>
 8001fa0:	3214      	adds	r2, #20
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	bf14      	ite	ne
 8001fa6:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8001faa:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8001fae:	e000      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x5a>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	4a0e      	ldr	r2, [pc, #56]	@ (8001fec <HAL_DMA_Abort_IT+0x94>)
 8001fb4:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001fc2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001fc4:	b16b      	cbz	r3, 8001fe2 <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001fc6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001fc8:	2000      	movs	r0, #0
 8001fca:	e7ce      	b.n	8001f6a <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fcc:	2310      	movs	r3, #16
 8001fce:	e7f0      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x5a>
 8001fd0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fd4:	e7ed      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x5a>
 8001fd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fda:	e7ea      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x5a>
 8001fdc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fe0:	e7e7      	b.n	8001fb2 <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	e7c1      	b.n	8001f6a <HAL_DMA_Abort_IT+0x12>
 8001fe6:	bf00      	nop
 8001fe8:	40020008 	.word	0x40020008
 8001fec:	40020000 	.word	0x40020000

08001ff0 <HAL_DMA_IRQHandler>:
{
 8001ff0:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001ff2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001ff4:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001ff6:	6804      	ldr	r4, [r0, #0]
 8001ff8:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001ffa:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	408b      	lsls	r3, r1
 8002000:	4213      	tst	r3, r2
 8002002:	d034      	beq.n	800206e <HAL_DMA_IRQHandler+0x7e>
 8002004:	f015 0f04 	tst.w	r5, #4
 8002008:	d031      	beq.n	800206e <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800200a:	6823      	ldr	r3, [r4, #0]
 800200c:	f013 0f20 	tst.w	r3, #32
 8002010:	d103      	bne.n	800201a <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002012:	6823      	ldr	r3, [r4, #0]
 8002014:	f023 0304 	bic.w	r3, r3, #4
 8002018:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800201a:	6803      	ldr	r3, [r0, #0]
 800201c:	4a42      	ldr	r2, [pc, #264]	@ (8002128 <HAL_DMA_IRQHandler+0x138>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d013      	beq.n	800204a <HAL_DMA_IRQHandler+0x5a>
 8002022:	3214      	adds	r2, #20
 8002024:	4293      	cmp	r3, r2
 8002026:	d017      	beq.n	8002058 <HAL_DMA_IRQHandler+0x68>
 8002028:	3214      	adds	r2, #20
 800202a:	4293      	cmp	r3, r2
 800202c:	d016      	beq.n	800205c <HAL_DMA_IRQHandler+0x6c>
 800202e:	3214      	adds	r2, #20
 8002030:	4293      	cmp	r3, r2
 8002032:	d016      	beq.n	8002062 <HAL_DMA_IRQHandler+0x72>
 8002034:	3214      	adds	r2, #20
 8002036:	4293      	cmp	r3, r2
 8002038:	d016      	beq.n	8002068 <HAL_DMA_IRQHandler+0x78>
 800203a:	3214      	adds	r2, #20
 800203c:	4293      	cmp	r3, r2
 800203e:	bf14      	ite	ne
 8002040:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 8002044:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8002048:	e000      	b.n	800204c <HAL_DMA_IRQHandler+0x5c>
 800204a:	2304      	movs	r3, #4
 800204c:	4a37      	ldr	r2, [pc, #220]	@ (800212c <HAL_DMA_IRQHandler+0x13c>)
 800204e:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002050:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002052:	b103      	cbz	r3, 8002056 <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 8002054:	4798      	blx	r3
}
 8002056:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002058:	2340      	movs	r3, #64	@ 0x40
 800205a:	e7f7      	b.n	800204c <HAL_DMA_IRQHandler+0x5c>
 800205c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002060:	e7f4      	b.n	800204c <HAL_DMA_IRQHandler+0x5c>
 8002062:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002066:	e7f1      	b.n	800204c <HAL_DMA_IRQHandler+0x5c>
 8002068:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800206c:	e7ee      	b.n	800204c <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 800206e:	2302      	movs	r3, #2
 8002070:	408b      	lsls	r3, r1
 8002072:	4213      	tst	r3, r2
 8002074:	d03b      	beq.n	80020ee <HAL_DMA_IRQHandler+0xfe>
 8002076:	f015 0f02 	tst.w	r5, #2
 800207a:	d038      	beq.n	80020ee <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800207c:	6823      	ldr	r3, [r4, #0]
 800207e:	f013 0f20 	tst.w	r3, #32
 8002082:	d106      	bne.n	8002092 <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002084:	6823      	ldr	r3, [r4, #0]
 8002086:	f023 030a 	bic.w	r3, r3, #10
 800208a:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800208c:	2301      	movs	r3, #1
 800208e:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002092:	6803      	ldr	r3, [r0, #0]
 8002094:	4a24      	ldr	r2, [pc, #144]	@ (8002128 <HAL_DMA_IRQHandler+0x138>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d013      	beq.n	80020c2 <HAL_DMA_IRQHandler+0xd2>
 800209a:	3214      	adds	r2, #20
 800209c:	4293      	cmp	r3, r2
 800209e:	d01b      	beq.n	80020d8 <HAL_DMA_IRQHandler+0xe8>
 80020a0:	3214      	adds	r2, #20
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01a      	beq.n	80020dc <HAL_DMA_IRQHandler+0xec>
 80020a6:	3214      	adds	r2, #20
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d01a      	beq.n	80020e2 <HAL_DMA_IRQHandler+0xf2>
 80020ac:	3214      	adds	r2, #20
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d01a      	beq.n	80020e8 <HAL_DMA_IRQHandler+0xf8>
 80020b2:	3214      	adds	r2, #20
 80020b4:	4293      	cmp	r3, r2
 80020b6:	bf14      	ite	ne
 80020b8:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 80020bc:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 80020c0:	e000      	b.n	80020c4 <HAL_DMA_IRQHandler+0xd4>
 80020c2:	2302      	movs	r3, #2
 80020c4:	4a19      	ldr	r2, [pc, #100]	@ (800212c <HAL_DMA_IRQHandler+0x13c>)
 80020c6:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80020c8:	2300      	movs	r3, #0
 80020ca:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80020ce:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0c0      	beq.n	8002056 <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 80020d4:	4798      	blx	r3
 80020d6:	e7be      	b.n	8002056 <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020d8:	2320      	movs	r3, #32
 80020da:	e7f3      	b.n	80020c4 <HAL_DMA_IRQHandler+0xd4>
 80020dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020e0:	e7f0      	b.n	80020c4 <HAL_DMA_IRQHandler+0xd4>
 80020e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020e6:	e7ed      	b.n	80020c4 <HAL_DMA_IRQHandler+0xd4>
 80020e8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020ec:	e7ea      	b.n	80020c4 <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020ee:	2308      	movs	r3, #8
 80020f0:	408b      	lsls	r3, r1
 80020f2:	4213      	tst	r3, r2
 80020f4:	d0af      	beq.n	8002056 <HAL_DMA_IRQHandler+0x66>
 80020f6:	f015 0f08 	tst.w	r5, #8
 80020fa:	d0ac      	beq.n	8002056 <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020fc:	6823      	ldr	r3, [r4, #0]
 80020fe:	f023 030e 	bic.w	r3, r3, #14
 8002102:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002104:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8002106:	2301      	movs	r3, #1
 8002108:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 800210a:	fa03 f202 	lsl.w	r2, r3, r2
 800210e:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002110:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8002112:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8002116:	2300      	movs	r3, #0
 8002118:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 800211c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800211e:	2b00      	cmp	r3, #0
 8002120:	d099      	beq.n	8002056 <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8002122:	4798      	blx	r3
  return;
 8002124:	e797      	b.n	8002056 <HAL_DMA_IRQHandler+0x66>
 8002126:	bf00      	nop
 8002128:	40020008 	.word	0x40020008
 800212c:	40020000 	.word	0x40020000

08002130 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002130:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 8002132:	4770      	bx	lr

08002134 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002138:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800213a:	f8d1 9000 	ldr.w	r9, [r1]
 800213e:	f1b9 0f00 	cmp.w	r9, #0
 8002142:	f000 8126 	beq.w	8002392 <HAL_GPIO_Init+0x25e>
 8002146:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002148:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800214a:	4d93      	ldr	r5, [pc, #588]	@ (8002398 <HAL_GPIO_Init+0x264>)
      switch (GPIO_Init->Mode)
 800214c:	4c93      	ldr	r4, [pc, #588]	@ (800239c <HAL_GPIO_Init+0x268>)
 800214e:	4e94      	ldr	r6, [pc, #592]	@ (80023a0 <HAL_GPIO_Init+0x26c>)
 8002150:	f8df e250 	ldr.w	lr, [pc, #592]	@ 80023a4 <HAL_GPIO_Init+0x270>
 8002154:	4694      	mov	ip, r2
 8002156:	e0be      	b.n	80022d6 <HAL_GPIO_Init+0x1a2>
 8002158:	45a1      	cmp	r9, r4
 800215a:	d00d      	beq.n	8002178 <HAL_GPIO_Init+0x44>
 800215c:	d904      	bls.n	8002168 <HAL_GPIO_Init+0x34>
 800215e:	45b1      	cmp	r9, r6
 8002160:	d00a      	beq.n	8002178 <HAL_GPIO_Init+0x44>
 8002162:	45f1      	cmp	r9, lr
 8002164:	d008      	beq.n	8002178 <HAL_GPIO_Init+0x44>
 8002166:	e01b      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
 8002168:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 80023a8 <HAL_GPIO_Init+0x274>
 800216c:	45d1      	cmp	r9, sl
 800216e:	d003      	beq.n	8002178 <HAL_GPIO_Init+0x44>
 8002170:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 8002174:	45d1      	cmp	r9, sl
 8002176:	d10f      	bne.n	8002198 <HAL_GPIO_Init+0x64>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002178:	f8d1 c008 	ldr.w	ip, [r1, #8]
 800217c:	f1bc 0f00 	cmp.w	ip, #0
 8002180:	f000 80fb 	beq.w	800237a <HAL_GPIO_Init+0x246>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002184:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002188:	bf0c      	ite	eq
 800218a:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800218e:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002192:	f04f 0c08 	mov.w	ip, #8
 8002196:	e003      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8002198:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 800219c:	45d1      	cmp	r9, sl
 800219e:	d0eb      	beq.n	8002178 <HAL_GPIO_Init+0x44>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a0:	2fff      	cmp	r7, #255	@ 0xff
 80021a2:	bf99      	ittee	ls
 80021a4:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021a6:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80021a8:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80021ac:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80021b0:	f8d9 8000 	ldr.w	r8, [r9]
 80021b4:	f04f 0b0f 	mov.w	fp, #15
 80021b8:	fa0b fb0a 	lsl.w	fp, fp, sl
 80021bc:	ea28 080b 	bic.w	r8, r8, fp
 80021c0:	fa0c fa0a 	lsl.w	sl, ip, sl
 80021c4:	ea48 080a 	orr.w	r8, r8, sl
 80021c8:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021cc:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80021d0:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 80021d4:	d078      	beq.n	80022c8 <HAL_GPIO_Init+0x194>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021d6:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80021da:	f048 0801 	orr.w	r8, r8, #1
 80021de:	f8c5 8018 	str.w	r8, [r5, #24]
 80021e2:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80021e6:	f008 0801 	and.w	r8, r8, #1
 80021ea:	f8cd 8004 	str.w	r8, [sp, #4]
 80021ee:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80021f2:	f023 0803 	bic.w	r8, r3, #3
 80021f6:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 80021fa:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 80021fe:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002202:	f003 0b03 	and.w	fp, r3, #3
 8002206:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800220a:	f04f 090f 	mov.w	r9, #15
 800220e:	fa09 f90b 	lsl.w	r9, r9, fp
 8002212:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002216:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 80023ac <HAL_GPIO_Init+0x278>
 800221a:	4548      	cmp	r0, r9
 800221c:	f000 80b0 	beq.w	8002380 <HAL_GPIO_Init+0x24c>
 8002220:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8002224:	4548      	cmp	r0, r9
 8002226:	f000 80ae 	beq.w	8002386 <HAL_GPIO_Init+0x252>
 800222a:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 800222e:	4548      	cmp	r0, r9
 8002230:	f000 80ac 	beq.w	800238c <HAL_GPIO_Init+0x258>
 8002234:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8002238:	4548      	cmp	r0, r9
 800223a:	bf14      	ite	ne
 800223c:	f04f 0904 	movne.w	r9, #4
 8002240:	f04f 0903 	moveq.w	r9, #3
 8002244:	fa09 f90b 	lsl.w	r9, r9, fp
 8002248:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 800224c:	f8c8 9008 	str.w	r9, [r8, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002250:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002254:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002258:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 80023b0 <HAL_GPIO_Init+0x27c>
 800225c:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002260:	bf14      	ite	ne
 8002262:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002266:	ea28 0807 	biceq.w	r8, r8, r7
 800226a:	f8c9 8008 	str.w	r8, [r9, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800226e:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002272:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002276:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 80023b0 <HAL_GPIO_Init+0x27c>
 800227a:	f8d9 800c 	ldr.w	r8, [r9, #12]
 800227e:	bf14      	ite	ne
 8002280:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002284:	ea28 0807 	biceq.w	r8, r8, r7
 8002288:	f8c9 800c 	str.w	r8, [r9, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800228c:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002290:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002294:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 80023b0 <HAL_GPIO_Init+0x27c>
 8002298:	f8d9 8004 	ldr.w	r8, [r9, #4]
 800229c:	bf14      	ite	ne
 800229e:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80022a2:	ea28 0807 	biceq.w	r8, r8, r7
 80022a6:	f8c9 8004 	str.w	r8, [r9, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80022aa:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80022ae:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80022b2:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80023b0 <HAL_GPIO_Init+0x27c>
 80022b6:	f8d9 8000 	ldr.w	r8, [r9]
 80022ba:	bf14      	ite	ne
 80022bc:	ea48 0707 	orrne.w	r7, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022c0:	ea28 0707 	biceq.w	r7, r8, r7
 80022c4:	f8c9 7000 	str.w	r7, [r9]
        }
      }
    }

	position++;
 80022c8:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022ca:	f8d1 9000 	ldr.w	r9, [r1]
 80022ce:	3204      	adds	r2, #4
 80022d0:	fa39 f703 	lsrs.w	r7, r9, r3
 80022d4:	d05d      	beq.n	8002392 <HAL_GPIO_Init+0x25e>
    ioposition = (0x01uL << position);
 80022d6:	f04f 0801 	mov.w	r8, #1
 80022da:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022de:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 80022e2:	ea38 0909 	bics.w	r9, r8, r9
 80022e6:	d1ef      	bne.n	80022c8 <HAL_GPIO_Init+0x194>
      switch (GPIO_Init->Mode)
 80022e8:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80022ec:	f1b9 0f12 	cmp.w	r9, #18
 80022f0:	f63f af32 	bhi.w	8002158 <HAL_GPIO_Init+0x24>
 80022f4:	f1b9 0f12 	cmp.w	r9, #18
 80022f8:	f63f af52 	bhi.w	80021a0 <HAL_GPIO_Init+0x6c>
 80022fc:	f20f 0a04 	addw	sl, pc, #4
 8002300:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 8002304:	08002179 	.word	0x08002179
 8002308:	08002351 	.word	0x08002351
 800230c:	08002361 	.word	0x08002361
 8002310:	08002375 	.word	0x08002375
 8002314:	080021a1 	.word	0x080021a1
 8002318:	080021a1 	.word	0x080021a1
 800231c:	080021a1 	.word	0x080021a1
 8002320:	080021a1 	.word	0x080021a1
 8002324:	080021a1 	.word	0x080021a1
 8002328:	080021a1 	.word	0x080021a1
 800232c:	080021a1 	.word	0x080021a1
 8002330:	080021a1 	.word	0x080021a1
 8002334:	080021a1 	.word	0x080021a1
 8002338:	080021a1 	.word	0x080021a1
 800233c:	080021a1 	.word	0x080021a1
 8002340:	080021a1 	.word	0x080021a1
 8002344:	080021a1 	.word	0x080021a1
 8002348:	08002357 	.word	0x08002357
 800234c:	0800236b 	.word	0x0800236b
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002350:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 8002354:	e724      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002356:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800235a:	f10c 0c04 	add.w	ip, ip, #4
          break;
 800235e:	e71f      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002360:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002364:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002368:	e71a      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800236a:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800236e:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 8002372:	e715      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8002374:	f04f 0c00 	mov.w	ip, #0
 8002378:	e712      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800237a:	f04f 0c04 	mov.w	ip, #4
 800237e:	e70f      	b.n	80021a0 <HAL_GPIO_Init+0x6c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002380:	f04f 0900 	mov.w	r9, #0
 8002384:	e75e      	b.n	8002244 <HAL_GPIO_Init+0x110>
 8002386:	f04f 0901 	mov.w	r9, #1
 800238a:	e75b      	b.n	8002244 <HAL_GPIO_Init+0x110>
 800238c:	f04f 0902 	mov.w	r9, #2
 8002390:	e758      	b.n	8002244 <HAL_GPIO_Init+0x110>
  }
}
 8002392:	b003      	add	sp, #12
 8002394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002398:	40021000 	.word	0x40021000
 800239c:	10220000 	.word	0x10220000
 80023a0:	10310000 	.word	0x10310000
 80023a4:	10320000 	.word	0x10320000
 80023a8:	10120000 	.word	0x10120000
 80023ac:	40010800 	.word	0x40010800
 80023b0:	40010400 	.word	0x40010400

080023b4 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023b4:	6883      	ldr	r3, [r0, #8]
 80023b6:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80023b8:	bf14      	ite	ne
 80023ba:	2001      	movne	r0, #1
 80023bc:	2000      	moveq	r0, #0
 80023be:	4770      	bx	lr

080023c0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80023c0:	b10a      	cbz	r2, 80023c6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023c2:	6101      	str	r1, [r0, #16]
 80023c4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80023c6:	0409      	lsls	r1, r1, #16
 80023c8:	6101      	str	r1, [r0, #16]
  }
}
 80023ca:	4770      	bx	lr

080023cc <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023cc:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023ce:	ea01 0203 	and.w	r2, r1, r3
 80023d2:	ea21 0103 	bic.w	r1, r1, r3
 80023d6:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80023da:	6101      	str	r1, [r0, #16]
}
 80023dc:	4770      	bx	lr
	...

080023e0 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023e0:	2800      	cmp	r0, #0
 80023e2:	f000 8201 	beq.w	80027e8 <HAL_RCC_OscConfig+0x408>
{
 80023e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ee:	6803      	ldr	r3, [r0, #0]
 80023f0:	f013 0f01 	tst.w	r3, #1
 80023f4:	d02c      	beq.n	8002450 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023f6:	4b9f      	ldr	r3, [pc, #636]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	f003 030c 	and.w	r3, r3, #12
 80023fe:	2b04      	cmp	r3, #4
 8002400:	d01d      	beq.n	800243e <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002402:	4b9c      	ldr	r3, [pc, #624]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b08      	cmp	r3, #8
 800240c:	d012      	beq.n	8002434 <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800240e:	6863      	ldr	r3, [r4, #4]
 8002410:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002414:	d041      	beq.n	800249a <HAL_RCC_OscConfig+0xba>
 8002416:	2b00      	cmp	r3, #0
 8002418:	d155      	bne.n	80024c6 <HAL_RCC_OscConfig+0xe6>
 800241a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800241e:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002428:	601a      	str	r2, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002430:	601a      	str	r2, [r3, #0]
 8002432:	e037      	b.n	80024a4 <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002434:	4b8f      	ldr	r3, [pc, #572]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800243c:	d0e7      	beq.n	800240e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243e:	4b8d      	ldr	r3, [pc, #564]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002446:	d003      	beq.n	8002450 <HAL_RCC_OscConfig+0x70>
 8002448:	6863      	ldr	r3, [r4, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	f000 81ce 	beq.w	80027ec <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002450:	6823      	ldr	r3, [r4, #0]
 8002452:	f013 0f02 	tst.w	r3, #2
 8002456:	d075      	beq.n	8002544 <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002458:	4b86      	ldr	r3, [pc, #536]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f013 0f0c 	tst.w	r3, #12
 8002460:	d05f      	beq.n	8002522 <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002462:	4b84      	ldr	r3, [pc, #528]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f003 030c 	and.w	r3, r3, #12
 800246a:	2b08      	cmp	r3, #8
 800246c:	d054      	beq.n	8002518 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800246e:	6923      	ldr	r3, [r4, #16]
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 808a 	beq.w	800258a <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002476:	4b80      	ldr	r3, [pc, #512]	@ (8002678 <HAL_RCC_OscConfig+0x298>)
 8002478:	2201      	movs	r2, #1
 800247a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247c:	f7ff f9de 	bl	800183c <HAL_GetTick>
 8002480:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4e7c      	ldr	r6, [pc, #496]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002484:	6833      	ldr	r3, [r6, #0]
 8002486:	f013 0f02 	tst.w	r3, #2
 800248a:	d175      	bne.n	8002578 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7ff f9d6 	bl	800183c <HAL_GetTick>
 8002490:	1b40      	subs	r0, r0, r5
 8002492:	2802      	cmp	r0, #2
 8002494:	d9f6      	bls.n	8002484 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 8002496:	2003      	movs	r0, #3
 8002498:	e1ad      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249a:	4a76      	ldr	r2, [pc, #472]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 800249c:	6813      	ldr	r3, [r2, #0]
 800249e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024a2:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a4:	6863      	ldr	r3, [r4, #4]
 80024a6:	b343      	cbz	r3, 80024fa <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 80024a8:	f7ff f9c8 	bl	800183c <HAL_GetTick>
 80024ac:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ae:	4e71      	ldr	r6, [pc, #452]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 80024b0:	6833      	ldr	r3, [r6, #0]
 80024b2:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024b6:	d1cb      	bne.n	8002450 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff f9c0 	bl	800183c <HAL_GetTick>
 80024bc:	1b40      	subs	r0, r0, r5
 80024be:	2864      	cmp	r0, #100	@ 0x64
 80024c0:	d9f6      	bls.n	80024b0 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 80024c2:	2003      	movs	r0, #3
 80024c4:	e197      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024ca:	d009      	beq.n	80024e0 <HAL_RCC_OscConfig+0x100>
 80024cc:	4b69      	ldr	r3, [pc, #420]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024dc:	601a      	str	r2, [r3, #0]
 80024de:	e7e1      	b.n	80024a4 <HAL_RCC_OscConfig+0xc4>
 80024e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024e4:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80024e8:	681a      	ldr	r2, [r3, #0]
 80024ea:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80024ee:	601a      	str	r2, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024f6:	601a      	str	r2, [r3, #0]
 80024f8:	e7d4      	b.n	80024a4 <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80024fa:	f7ff f99f 	bl	800183c <HAL_GetTick>
 80024fe:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002500:	4e5c      	ldr	r6, [pc, #368]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002502:	6833      	ldr	r3, [r6, #0]
 8002504:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002508:	d0a2      	beq.n	8002450 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800250a:	f7ff f997 	bl	800183c <HAL_GetTick>
 800250e:	1b40      	subs	r0, r0, r5
 8002510:	2864      	cmp	r0, #100	@ 0x64
 8002512:	d9f6      	bls.n	8002502 <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 8002514:	2003      	movs	r0, #3
 8002516:	e16e      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002518:	4b56      	ldr	r3, [pc, #344]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002520:	d1a5      	bne.n	800246e <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002522:	4b54      	ldr	r3, [pc, #336]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f013 0f02 	tst.w	r3, #2
 800252a:	d003      	beq.n	8002534 <HAL_RCC_OscConfig+0x154>
 800252c:	6923      	ldr	r3, [r4, #16]
 800252e:	2b01      	cmp	r3, #1
 8002530:	f040 815e 	bne.w	80027f0 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002534:	4a4f      	ldr	r2, [pc, #316]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002536:	6813      	ldr	r3, [r2, #0]
 8002538:	6961      	ldr	r1, [r4, #20]
 800253a:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800253e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002542:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002544:	6823      	ldr	r3, [r4, #0]
 8002546:	f013 0f08 	tst.w	r3, #8
 800254a:	d03d      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800254c:	69a3      	ldr	r3, [r4, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d066      	beq.n	8002620 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002552:	4b49      	ldr	r3, [pc, #292]	@ (8002678 <HAL_RCC_OscConfig+0x298>)
 8002554:	2201      	movs	r2, #1
 8002556:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800255a:	f7ff f96f 	bl	800183c <HAL_GetTick>
 800255e:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002560:	4e44      	ldr	r6, [pc, #272]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002562:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002564:	f013 0f02 	tst.w	r3, #2
 8002568:	d121      	bne.n	80025ae <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800256a:	f7ff f967 	bl	800183c <HAL_GetTick>
 800256e:	1b40      	subs	r0, r0, r5
 8002570:	2802      	cmp	r0, #2
 8002572:	d9f6      	bls.n	8002562 <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 8002574:	2003      	movs	r0, #3
 8002576:	e13e      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002578:	4a3e      	ldr	r2, [pc, #248]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 800257a:	6813      	ldr	r3, [r2, #0]
 800257c:	6961      	ldr	r1, [r4, #20]
 800257e:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002582:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002586:	6013      	str	r3, [r2, #0]
 8002588:	e7dc      	b.n	8002544 <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 800258a:	4b3b      	ldr	r3, [pc, #236]	@ (8002678 <HAL_RCC_OscConfig+0x298>)
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002590:	f7ff f954 	bl	800183c <HAL_GetTick>
 8002594:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002596:	4e37      	ldr	r6, [pc, #220]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002598:	6833      	ldr	r3, [r6, #0]
 800259a:	f013 0f02 	tst.w	r3, #2
 800259e:	d0d1      	beq.n	8002544 <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025a0:	f7ff f94c 	bl	800183c <HAL_GetTick>
 80025a4:	1b40      	subs	r0, r0, r5
 80025a6:	2802      	cmp	r0, #2
 80025a8:	d9f6      	bls.n	8002598 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 80025aa:	2003      	movs	r0, #3
 80025ac:	e123      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025ae:	4b33      	ldr	r3, [pc, #204]	@ (800267c <HAL_RCC_OscConfig+0x29c>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a33      	ldr	r2, [pc, #204]	@ (8002680 <HAL_RCC_OscConfig+0x2a0>)
 80025b4:	fba2 2303 	umull	r2, r3, r2, r3
 80025b8:	0a5b      	lsrs	r3, r3, #9
 80025ba:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 80025bc:	bf00      	nop
  }
  while (Delay --);
 80025be:	9b01      	ldr	r3, [sp, #4]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	9201      	str	r2, [sp, #4]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f9      	bne.n	80025bc <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025c8:	6823      	ldr	r3, [r4, #0]
 80025ca:	f013 0f04 	tst.w	r3, #4
 80025ce:	f000 809b 	beq.w	8002708 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025d2:	4b28      	ldr	r3, [pc, #160]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 80025d4:	69db      	ldr	r3, [r3, #28]
 80025d6:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80025da:	d134      	bne.n	8002646 <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025dc:	4b25      	ldr	r3, [pc, #148]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 80025de:	69da      	ldr	r2, [r3, #28]
 80025e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025e4:	61da      	str	r2, [r3, #28]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80025f0:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025f2:	4b24      	ldr	r3, [pc, #144]	@ (8002684 <HAL_RCC_OscConfig+0x2a4>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025fa:	d026      	beq.n	800264a <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025fc:	68e3      	ldr	r3, [r4, #12]
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d042      	beq.n	8002688 <HAL_RCC_OscConfig+0x2a8>
 8002602:	2b00      	cmp	r3, #0
 8002604:	d158      	bne.n	80026b8 <HAL_RCC_OscConfig+0x2d8>
 8002606:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800260a:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 800260e:	6a1a      	ldr	r2, [r3, #32]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	621a      	str	r2, [r3, #32]
 8002616:	6a1a      	ldr	r2, [r3, #32]
 8002618:	f022 0204 	bic.w	r2, r2, #4
 800261c:	621a      	str	r2, [r3, #32]
 800261e:	e038      	b.n	8002692 <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 8002620:	4b15      	ldr	r3, [pc, #84]	@ (8002678 <HAL_RCC_OscConfig+0x298>)
 8002622:	2200      	movs	r2, #0
 8002624:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002628:	f7ff f908 	bl	800183c <HAL_GetTick>
 800262c:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800262e:	4e11      	ldr	r6, [pc, #68]	@ (8002674 <HAL_RCC_OscConfig+0x294>)
 8002630:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 8002632:	f013 0f02 	tst.w	r3, #2
 8002636:	d0c7      	beq.n	80025c8 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002638:	f7ff f900 	bl	800183c <HAL_GetTick>
 800263c:	1b40      	subs	r0, r0, r5
 800263e:	2802      	cmp	r0, #2
 8002640:	d9f6      	bls.n	8002630 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 8002642:	2003      	movs	r0, #3
 8002644:	e0d7      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 8002646:	2500      	movs	r5, #0
 8002648:	e7d3      	b.n	80025f2 <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	4a0e      	ldr	r2, [pc, #56]	@ (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800264c:	6813      	ldr	r3, [r2, #0]
 800264e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002652:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002654:	f7ff f8f2 	bl	800183c <HAL_GetTick>
 8002658:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265a:	4f0a      	ldr	r7, [pc, #40]	@ (8002684 <HAL_RCC_OscConfig+0x2a4>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002662:	d1cb      	bne.n	80025fc <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002664:	f7ff f8ea 	bl	800183c <HAL_GetTick>
 8002668:	1b80      	subs	r0, r0, r6
 800266a:	2864      	cmp	r0, #100	@ 0x64
 800266c:	d9f6      	bls.n	800265c <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 800266e:	2003      	movs	r0, #3
 8002670:	e0c1      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000
 8002678:	42420000 	.word	0x42420000
 800267c:	20000000 	.word	0x20000000
 8002680:	10624dd3 	.word	0x10624dd3
 8002684:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002688:	4a5e      	ldr	r2, [pc, #376]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 800268a:	6a13      	ldr	r3, [r2, #32]
 800268c:	f043 0301 	orr.w	r3, r3, #1
 8002690:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002692:	68e3      	ldr	r3, [r4, #12]
 8002694:	b333      	cbz	r3, 80026e4 <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 8002696:	f7ff f8d1 	bl	800183c <HAL_GetTick>
 800269a:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800269c:	4f59      	ldr	r7, [pc, #356]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800269e:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	f013 0f02 	tst.w	r3, #2
 80026a8:	d12d      	bne.n	8002706 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026aa:	f7ff f8c7 	bl	800183c <HAL_GetTick>
 80026ae:	1b80      	subs	r0, r0, r6
 80026b0:	4540      	cmp	r0, r8
 80026b2:	d9f6      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 80026b4:	2003      	movs	r0, #3
 80026b6:	e09e      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d009      	beq.n	80026d0 <HAL_RCC_OscConfig+0x2f0>
 80026bc:	4b51      	ldr	r3, [pc, #324]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 80026be:	6a1a      	ldr	r2, [r3, #32]
 80026c0:	f022 0201 	bic.w	r2, r2, #1
 80026c4:	621a      	str	r2, [r3, #32]
 80026c6:	6a1a      	ldr	r2, [r3, #32]
 80026c8:	f022 0204 	bic.w	r2, r2, #4
 80026cc:	621a      	str	r2, [r3, #32]
 80026ce:	e7e0      	b.n	8002692 <HAL_RCC_OscConfig+0x2b2>
 80026d0:	4b4c      	ldr	r3, [pc, #304]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 80026d2:	6a1a      	ldr	r2, [r3, #32]
 80026d4:	f042 0204 	orr.w	r2, r2, #4
 80026d8:	621a      	str	r2, [r3, #32]
 80026da:	6a1a      	ldr	r2, [r3, #32]
 80026dc:	f042 0201 	orr.w	r2, r2, #1
 80026e0:	621a      	str	r2, [r3, #32]
 80026e2:	e7d6      	b.n	8002692 <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 80026e4:	f7ff f8aa 	bl	800183c <HAL_GetTick>
 80026e8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026ea:	4f46      	ldr	r7, [pc, #280]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f0:	6a3b      	ldr	r3, [r7, #32]
 80026f2:	f013 0f02 	tst.w	r3, #2
 80026f6:	d006      	beq.n	8002706 <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026f8:	f7ff f8a0 	bl	800183c <HAL_GetTick>
 80026fc:	1b80      	subs	r0, r0, r6
 80026fe:	4540      	cmp	r0, r8
 8002700:	d9f6      	bls.n	80026f0 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 8002702:	2003      	movs	r0, #3
 8002704:	e077      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 8002706:	b9e5      	cbnz	r5, 8002742 <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002708:	69e3      	ldr	r3, [r4, #28]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d072      	beq.n	80027f4 <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800270e:	4a3d      	ldr	r2, [pc, #244]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 8002710:	6852      	ldr	r2, [r2, #4]
 8002712:	f002 020c 	and.w	r2, r2, #12
 8002716:	2a08      	cmp	r2, #8
 8002718:	d056      	beq.n	80027c8 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800271a:	2b02      	cmp	r3, #2
 800271c:	d017      	beq.n	800274e <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 800271e:	4b3a      	ldr	r3, [pc, #232]	@ (8002808 <HAL_RCC_OscConfig+0x428>)
 8002720:	2200      	movs	r2, #0
 8002722:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002724:	f7ff f88a 	bl	800183c <HAL_GetTick>
 8002728:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272a:	4d36      	ldr	r5, [pc, #216]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 800272c:	682b      	ldr	r3, [r5, #0]
 800272e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002732:	d047      	beq.n	80027c4 <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002734:	f7ff f882 	bl	800183c <HAL_GetTick>
 8002738:	1b00      	subs	r0, r0, r4
 800273a:	2802      	cmp	r0, #2
 800273c:	d9f6      	bls.n	800272c <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 800273e:	2003      	movs	r0, #3
 8002740:	e059      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002742:	4a30      	ldr	r2, [pc, #192]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 8002744:	69d3      	ldr	r3, [r2, #28]
 8002746:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800274a:	61d3      	str	r3, [r2, #28]
 800274c:	e7dc      	b.n	8002708 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b2e      	ldr	r3, [pc, #184]	@ (8002808 <HAL_RCC_OscConfig+0x428>)
 8002750:	2200      	movs	r2, #0
 8002752:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002754:	f7ff f872 	bl	800183c <HAL_GetTick>
 8002758:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275a:	4e2a      	ldr	r6, [pc, #168]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 800275c:	6833      	ldr	r3, [r6, #0]
 800275e:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002762:	d006      	beq.n	8002772 <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002764:	f7ff f86a 	bl	800183c <HAL_GetTick>
 8002768:	1b40      	subs	r0, r0, r5
 800276a:	2802      	cmp	r0, #2
 800276c:	d9f6      	bls.n	800275c <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 800276e:	2003      	movs	r0, #3
 8002770:	e041      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002772:	6a23      	ldr	r3, [r4, #32]
 8002774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002778:	d01a      	beq.n	80027b0 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277a:	4922      	ldr	r1, [pc, #136]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 800277c:	684a      	ldr	r2, [r1, #4]
 800277e:	6a23      	ldr	r3, [r4, #32]
 8002780:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002782:	4303      	orrs	r3, r0
 8002784:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8002788:	4313      	orrs	r3, r2
 800278a:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 800278c:	4b1e      	ldr	r3, [pc, #120]	@ (8002808 <HAL_RCC_OscConfig+0x428>)
 800278e:	2201      	movs	r2, #1
 8002790:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002792:	f7ff f853 	bl	800183c <HAL_GetTick>
 8002796:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002798:	4d1a      	ldr	r5, [pc, #104]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 800279a:	682b      	ldr	r3, [r5, #0]
 800279c:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 80027a0:	d10e      	bne.n	80027c0 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a2:	f7ff f84b 	bl	800183c <HAL_GetTick>
 80027a6:	1b00      	subs	r0, r0, r4
 80027a8:	2802      	cmp	r0, #2
 80027aa:	d9f6      	bls.n	800279a <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 80027ac:	2003      	movs	r0, #3
 80027ae:	e022      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b0:	4a14      	ldr	r2, [pc, #80]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 80027b2:	6853      	ldr	r3, [r2, #4]
 80027b4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80027b8:	68a1      	ldr	r1, [r4, #8]
 80027ba:	430b      	orrs	r3, r1
 80027bc:	6053      	str	r3, [r2, #4]
 80027be:	e7dc      	b.n	800277a <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 80027c0:	2000      	movs	r0, #0
 80027c2:	e018      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
 80027c4:	2000      	movs	r0, #0
 80027c6:	e016      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d017      	beq.n	80027fc <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80027cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002804 <HAL_RCC_OscConfig+0x424>)
 80027ce:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80027d4:	6a22      	ldr	r2, [r4, #32]
 80027d6:	4291      	cmp	r1, r2
 80027d8:	d112      	bne.n	8002800 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027da:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80027e0:	1a18      	subs	r0, r3, r0
 80027e2:	bf18      	it	ne
 80027e4:	2001      	movne	r0, #1
 80027e6:	e006      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80027e8:	2001      	movs	r0, #1
}
 80027ea:	4770      	bx	lr
        return HAL_ERROR;
 80027ec:	2001      	movs	r0, #1
 80027ee:	e002      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80027f0:	2001      	movs	r0, #1
 80027f2:	e000      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80027f4:	2000      	movs	r0, #0
}
 80027f6:	b002      	add	sp, #8
 80027f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80027fc:	2001      	movs	r0, #1
 80027fe:	e7fa      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 8002800:	2001      	movs	r0, #1
 8002802:	e7f8      	b.n	80027f6 <HAL_RCC_OscConfig+0x416>
 8002804:	40021000 	.word	0x40021000
 8002808:	42420000 	.word	0x42420000

0800280c <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 800280c:	4b01      	ldr	r3, [pc, #4]	@ (8002814 <HAL_RCC_EnableCSS+0x8>)
 800280e:	2201      	movs	r2, #1
 8002810:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 8002812:	4770      	bx	lr
 8002814:	42420000 	.word	0x42420000

08002818 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8002818:	4b0f      	ldr	r3, [pc, #60]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x40>)
 800281a:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800281c:	f003 020c 	and.w	r2, r3, #12
 8002820:	2a08      	cmp	r2, #8
 8002822:	d001      	beq.n	8002828 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8002824:	480d      	ldr	r0, [pc, #52]	@ (800285c <HAL_RCC_GetSysClockFreq+0x44>)
}
 8002826:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002828:	f3c3 4283 	ubfx	r2, r3, #18, #4
 800282c:	490c      	ldr	r1, [pc, #48]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x48>)
 800282e:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002830:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002834:	d00b      	beq.n	800284e <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002836:	4b08      	ldr	r3, [pc, #32]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x40>)
 8002838:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283a:	4a08      	ldr	r2, [pc, #32]	@ (800285c <HAL_RCC_GetSysClockFreq+0x44>)
 800283c:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002840:	f3c3 4340 	ubfx	r3, r3, #17, #1
 8002844:	4a07      	ldr	r2, [pc, #28]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x4c>)
 8002846:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002848:	fbb0 f0f3 	udiv	r0, r0, r3
 800284c:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_GetSysClockFreq+0x50>)
 8002850:	fb03 f000 	mul.w	r0, r3, r0
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	40021000 	.word	0x40021000
 800285c:	007a1200 	.word	0x007a1200
 8002860:	08007d80 	.word	0x08007d80
 8002864:	08007d7c 	.word	0x08007d7c
 8002868:	003d0900 	.word	0x003d0900

0800286c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800286c:	2800      	cmp	r0, #0
 800286e:	f000 80a2 	beq.w	80029b6 <HAL_RCC_ClockConfig+0x14a>
{
 8002872:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002876:	460d      	mov	r5, r1
 8002878:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800287a:	4b53      	ldr	r3, [pc, #332]	@ (80029c8 <HAL_RCC_ClockConfig+0x15c>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	428b      	cmp	r3, r1
 8002884:	d20b      	bcs.n	800289e <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002886:	4a50      	ldr	r2, [pc, #320]	@ (80029c8 <HAL_RCC_ClockConfig+0x15c>)
 8002888:	6813      	ldr	r3, [r2, #0]
 800288a:	f023 0307 	bic.w	r3, r3, #7
 800288e:	430b      	orrs	r3, r1
 8002890:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002892:	6813      	ldr	r3, [r2, #0]
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	428b      	cmp	r3, r1
 800289a:	f040 808e 	bne.w	80029ba <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800289e:	6823      	ldr	r3, [r4, #0]
 80028a0:	f013 0f02 	tst.w	r3, #2
 80028a4:	d017      	beq.n	80028d6 <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	f013 0f04 	tst.w	r3, #4
 80028aa:	d004      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028ac:	4a47      	ldr	r2, [pc, #284]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 80028ae:	6853      	ldr	r3, [r2, #4]
 80028b0:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028b4:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028b6:	6823      	ldr	r3, [r4, #0]
 80028b8:	f013 0f08 	tst.w	r3, #8
 80028bc:	d004      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028be:	4a43      	ldr	r2, [pc, #268]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 80028c0:	6853      	ldr	r3, [r2, #4]
 80028c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80028c6:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028c8:	4a40      	ldr	r2, [pc, #256]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 80028ca:	6853      	ldr	r3, [r2, #4]
 80028cc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028d0:	68a1      	ldr	r1, [r4, #8]
 80028d2:	430b      	orrs	r3, r1
 80028d4:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028d6:	6823      	ldr	r3, [r4, #0]
 80028d8:	f013 0f01 	tst.w	r3, #1
 80028dc:	d031      	beq.n	8002942 <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028de:	6862      	ldr	r2, [r4, #4]
 80028e0:	2a01      	cmp	r2, #1
 80028e2:	d020      	beq.n	8002926 <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028e4:	2a02      	cmp	r2, #2
 80028e6:	d025      	beq.n	8002934 <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	4b38      	ldr	r3, [pc, #224]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f013 0f02 	tst.w	r3, #2
 80028f0:	d065      	beq.n	80029be <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028f2:	4936      	ldr	r1, [pc, #216]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 80028f4:	684b      	ldr	r3, [r1, #4]
 80028f6:	f023 0303 	bic.w	r3, r3, #3
 80028fa:	4313      	orrs	r3, r2
 80028fc:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80028fe:	f7fe ff9d 	bl	800183c <HAL_GetTick>
 8002902:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002904:	4f31      	ldr	r7, [pc, #196]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002906:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	f003 030c 	and.w	r3, r3, #12
 8002910:	6862      	ldr	r2, [r4, #4]
 8002912:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8002916:	d014      	beq.n	8002942 <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002918:	f7fe ff90 	bl	800183c <HAL_GetTick>
 800291c:	1b80      	subs	r0, r0, r6
 800291e:	4540      	cmp	r0, r8
 8002920:	d9f3      	bls.n	800290a <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	e045      	b.n	80029b2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	4b29      	ldr	r3, [pc, #164]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800292e:	d1e0      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002930:	2001      	movs	r0, #1
 8002932:	e03e      	b.n	80029b2 <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002934:	4b25      	ldr	r3, [pc, #148]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800293c:	d1d9      	bne.n	80028f2 <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 800293e:	2001      	movs	r0, #1
 8002940:	e037      	b.n	80029b2 <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002942:	4b21      	ldr	r3, [pc, #132]	@ (80029c8 <HAL_RCC_ClockConfig+0x15c>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0307 	and.w	r3, r3, #7
 800294a:	42ab      	cmp	r3, r5
 800294c:	d90a      	bls.n	8002964 <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800294e:	4a1e      	ldr	r2, [pc, #120]	@ (80029c8 <HAL_RCC_ClockConfig+0x15c>)
 8002950:	6813      	ldr	r3, [r2, #0]
 8002952:	f023 0307 	bic.w	r3, r3, #7
 8002956:	432b      	orrs	r3, r5
 8002958:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800295a:	6813      	ldr	r3, [r2, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	42ab      	cmp	r3, r5
 8002962:	d12e      	bne.n	80029c2 <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002964:	6823      	ldr	r3, [r4, #0]
 8002966:	f013 0f04 	tst.w	r3, #4
 800296a:	d006      	beq.n	800297a <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800296c:	4a17      	ldr	r2, [pc, #92]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 800296e:	6853      	ldr	r3, [r2, #4]
 8002970:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002974:	68e1      	ldr	r1, [r4, #12]
 8002976:	430b      	orrs	r3, r1
 8002978:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800297a:	6823      	ldr	r3, [r4, #0]
 800297c:	f013 0f08 	tst.w	r3, #8
 8002980:	d007      	beq.n	8002992 <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002982:	4a12      	ldr	r2, [pc, #72]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 8002984:	6853      	ldr	r3, [r2, #4]
 8002986:	6921      	ldr	r1, [r4, #16]
 8002988:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 800298c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002990:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002992:	f7ff ff41 	bl	8002818 <HAL_RCC_GetSysClockFreq>
 8002996:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCC_ClockConfig+0x160>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800299e:	4a0c      	ldr	r2, [pc, #48]	@ (80029d0 <HAL_RCC_ClockConfig+0x164>)
 80029a0:	5cd3      	ldrb	r3, [r2, r3]
 80029a2:	40d8      	lsrs	r0, r3
 80029a4:	4b0b      	ldr	r3, [pc, #44]	@ (80029d4 <HAL_RCC_ClockConfig+0x168>)
 80029a6:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 80029a8:	4b0b      	ldr	r3, [pc, #44]	@ (80029d8 <HAL_RCC_ClockConfig+0x16c>)
 80029aa:	6818      	ldr	r0, [r3, #0]
 80029ac:	f7fe ff02 	bl	80017b4 <HAL_InitTick>
  return HAL_OK;
 80029b0:	2000      	movs	r0, #0
}
 80029b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 80029b6:	2001      	movs	r0, #1
}
 80029b8:	4770      	bx	lr
    return HAL_ERROR;
 80029ba:	2001      	movs	r0, #1
 80029bc:	e7f9      	b.n	80029b2 <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 80029be:	2001      	movs	r0, #1
 80029c0:	e7f7      	b.n	80029b2 <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 80029c2:	2001      	movs	r0, #1
 80029c4:	e7f5      	b.n	80029b2 <HAL_RCC_ClockConfig+0x146>
 80029c6:	bf00      	nop
 80029c8:	40022000 	.word	0x40022000
 80029cc:	40021000 	.word	0x40021000
 80029d0:	08007d6c 	.word	0x08007d6c
 80029d4:	20000000 	.word	0x20000000
 80029d8:	20000008 	.word	0x20000008

080029dc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029dc:	4b04      	ldr	r3, [pc, #16]	@ (80029f0 <HAL_RCC_GetPCLK1Freq+0x14>)
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029e4:	4a03      	ldr	r2, [pc, #12]	@ (80029f4 <HAL_RCC_GetPCLK1Freq+0x18>)
 80029e6:	5cd3      	ldrb	r3, [r2, r3]
 80029e8:	4a03      	ldr	r2, [pc, #12]	@ (80029f8 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029ea:	6810      	ldr	r0, [r2, #0]
}
 80029ec:	40d8      	lsrs	r0, r3
 80029ee:	4770      	bx	lr
 80029f0:	40021000 	.word	0x40021000
 80029f4:	08007d64 	.word	0x08007d64
 80029f8:	20000000 	.word	0x20000000

080029fc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029fc:	4b04      	ldr	r3, [pc, #16]	@ (8002a10 <HAL_RCC_GetPCLK2Freq+0x14>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002a04:	4a03      	ldr	r2, [pc, #12]	@ (8002a14 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002a06:	5cd3      	ldrb	r3, [r2, r3]
 8002a08:	4a03      	ldr	r2, [pc, #12]	@ (8002a18 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002a0a:	6810      	ldr	r0, [r2, #0]
}
 8002a0c:	40d8      	lsrs	r0, r3
 8002a0e:	4770      	bx	lr
 8002a10:	40021000 	.word	0x40021000
 8002a14:	08007d64 	.word	0x08007d64
 8002a18:	20000000 	.word	0x20000000

08002a1c <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002a1c:	4770      	bx	lr
	...

08002a20 <HAL_RCC_NMI_IRQHandler>:
{
 8002a20:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8002a22:	4b06      	ldr	r3, [pc, #24]	@ (8002a3c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a2a:	d100      	bne.n	8002a2e <HAL_RCC_NMI_IRQHandler+0xe>
}
 8002a2c:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8002a2e:	f7ff fff5 	bl	8002a1c <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002a32:	4b02      	ldr	r3, [pc, #8]	@ (8002a3c <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002a34:	2280      	movs	r2, #128	@ 0x80
 8002a36:	729a      	strb	r2, [r3, #10]
}
 8002a38:	e7f8      	b.n	8002a2c <HAL_RCC_NMI_IRQHandler+0xc>
 8002a3a:	bf00      	nop
 8002a3c:	40021000 	.word	0x40021000

08002a40 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a44:	b082      	sub	sp, #8
 8002a46:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a48:	6803      	ldr	r3, [r0, #0]
 8002a4a:	f013 0f01 	tst.w	r3, #1
 8002a4e:	d036      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a50:	4b3f      	ldr	r3, [pc, #252]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a52:	69db      	ldr	r3, [r3, #28]
 8002a54:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a58:	d149      	bne.n	8002aee <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a5a:	4b3d      	ldr	r3, [pc, #244]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a5c:	69da      	ldr	r2, [r3, #28]
 8002a5e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a62:	61da      	str	r2, [r3, #28]
 8002a64:	69db      	ldr	r3, [r3, #28]
 8002a66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a6e:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a70:	4b38      	ldr	r3, [pc, #224]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a78:	d03b      	beq.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a7a:	4b35      	ldr	r3, [pc, #212]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a7e:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002a82:	d013      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002a84:	6862      	ldr	r2, [r4, #4]
 8002a86:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002a8a:	429a      	cmp	r2, r3
 8002a8c:	d00e      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a8e:	4a30      	ldr	r2, [pc, #192]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a90:	6a13      	ldr	r3, [r2, #32]
 8002a92:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a96:	4930      	ldr	r1, [pc, #192]	@ (8002b58 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002a98:	2601      	movs	r6, #1
 8002a9a:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a9e:	2600      	movs	r6, #0
 8002aa0:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002aa4:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002aa6:	f013 0f01 	tst.w	r3, #1
 8002aaa:	d136      	bne.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002aac:	4a28      	ldr	r2, [pc, #160]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002aae:	6a13      	ldr	r3, [r2, #32]
 8002ab0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ab4:	6861      	ldr	r1, [r4, #4]
 8002ab6:	430b      	orrs	r3, r1
 8002ab8:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aba:	2d00      	cmp	r5, #0
 8002abc:	d13e      	bne.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002abe:	6823      	ldr	r3, [r4, #0]
 8002ac0:	f013 0f02 	tst.w	r3, #2
 8002ac4:	d006      	beq.n	8002ad4 <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ac6:	4a22      	ldr	r2, [pc, #136]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002ac8:	6853      	ldr	r3, [r2, #4]
 8002aca:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002ace:	68a1      	ldr	r1, [r4, #8]
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002ad4:	6823      	ldr	r3, [r4, #0]
 8002ad6:	f013 0f10 	tst.w	r3, #16
 8002ada:	d034      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002adc:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002ade:	6853      	ldr	r3, [r2, #4]
 8002ae0:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002ae4:	68e1      	ldr	r1, [r4, #12]
 8002ae6:	430b      	orrs	r3, r1
 8002ae8:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002aea:	2000      	movs	r0, #0
 8002aec:	e02c      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8002aee:	2500      	movs	r5, #0
 8002af0:	e7be      	b.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002af2:	4a18      	ldr	r2, [pc, #96]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002af4:	6813      	ldr	r3, [r2, #0]
 8002af6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002afa:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002afc:	f7fe fe9e 	bl	800183c <HAL_GetTick>
 8002b00:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b02:	4f14      	ldr	r7, [pc, #80]	@ (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002b0a:	d1b6      	bne.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b0c:	f7fe fe96 	bl	800183c <HAL_GetTick>
 8002b10:	1b80      	subs	r0, r0, r6
 8002b12:	2864      	cmp	r0, #100	@ 0x64
 8002b14:	d9f6      	bls.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8002b16:	2003      	movs	r0, #3
 8002b18:	e016      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002b1a:	f7fe fe8f 	bl	800183c <HAL_GetTick>
 8002b1e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b20:	4f0b      	ldr	r7, [pc, #44]	@ (8002b50 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b22:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b26:	6a3b      	ldr	r3, [r7, #32]
 8002b28:	f013 0f02 	tst.w	r3, #2
 8002b2c:	d1be      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b2e:	f7fe fe85 	bl	800183c <HAL_GetTick>
 8002b32:	1b80      	subs	r0, r0, r6
 8002b34:	4540      	cmp	r0, r8
 8002b36:	d9f6      	bls.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8002b38:	2003      	movs	r0, #3
 8002b3a:	e005      	b.n	8002b48 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b3c:	69d3      	ldr	r3, [r2, #28]
 8002b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b42:	61d3      	str	r3, [r2, #28]
 8002b44:	e7bb      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8002b46:	2000      	movs	r0, #0
}
 8002b48:	b002      	add	sp, #8
 8002b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b4e:	bf00      	nop
 8002b50:	40021000 	.word	0x40021000
 8002b54:	40007000 	.word	0x40007000
 8002b58:	42420000 	.word	0x42420000

08002b5c <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b5c:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b5e:	f102 030c 	add.w	r3, r2, #12
 8002b62:	e853 3f00 	ldrex	r3, [r3]
 8002b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b6a:	320c      	adds	r2, #12
 8002b6c:	e842 3100 	strex	r1, r3, [r2]
 8002b70:	2900      	cmp	r1, #0
 8002b72:	d1f3      	bne.n	8002b5c <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b74:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b76:	f102 0314 	add.w	r3, r2, #20
 8002b7a:	e853 3f00 	ldrex	r3, [r3]
 8002b7e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b82:	3214      	adds	r2, #20
 8002b84:	e842 3100 	strex	r1, r3, [r2]
 8002b88:	2900      	cmp	r1, #0
 8002b8a:	d1f3      	bne.n	8002b74 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b8c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b8e:	2b01      	cmp	r3, #1
 8002b90:	d005      	beq.n	8002b9e <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b92:	2320      	movs	r3, #32
 8002b94:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002b9c:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b9e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba0:	f102 030c 	add.w	r3, r2, #12
 8002ba4:	e853 3f00 	ldrex	r3, [r3]
 8002ba8:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bac:	320c      	adds	r2, #12
 8002bae:	e842 3100 	strex	r1, r3, [r2]
 8002bb2:	2900      	cmp	r1, #0
 8002bb4:	d1f3      	bne.n	8002b9e <UART_EndRxTransfer+0x42>
 8002bb6:	e7ec      	b.n	8002b92 <UART_EndRxTransfer+0x36>

08002bb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bb8:	b510      	push	{r4, lr}
 8002bba:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bbc:	6802      	ldr	r2, [r0, #0]
 8002bbe:	6913      	ldr	r3, [r2, #16]
 8002bc0:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002bc4:	68c1      	ldr	r1, [r0, #12]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8002bca:	6801      	ldr	r1, [r0, #0]
 8002bcc:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002bce:	6883      	ldr	r3, [r0, #8]
 8002bd0:	6900      	ldr	r0, [r0, #16]
 8002bd2:	4303      	orrs	r3, r0
 8002bd4:	6960      	ldr	r0, [r4, #20]
 8002bd6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002bd8:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 8002bdc:	f022 020c 	bic.w	r2, r2, #12
 8002be0:	4313      	orrs	r3, r2
 8002be2:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002be4:	6822      	ldr	r2, [r4, #0]
 8002be6:	6953      	ldr	r3, [r2, #20]
 8002be8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bec:	69a1      	ldr	r1, [r4, #24]
 8002bee:	430b      	orrs	r3, r1
 8002bf0:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002bf2:	6822      	ldr	r2, [r4, #0]
 8002bf4:	4b11      	ldr	r3, [pc, #68]	@ (8002c3c <UART_SetConfig+0x84>)
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d01b      	beq.n	8002c32 <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bfa:	f7ff feef 	bl	80029dc <HAL_RCC_GetPCLK1Freq>
 8002bfe:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c00:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c04:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002c08:	6862      	ldr	r2, [r4, #4]
 8002c0a:	0092      	lsls	r2, r2, #2
 8002c0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002c10:	6820      	ldr	r0, [r4, #0]
 8002c12:	490b      	ldr	r1, [pc, #44]	@ (8002c40 <UART_SetConfig+0x88>)
 8002c14:	fba1 4203 	umull	r4, r2, r1, r3
 8002c18:	0952      	lsrs	r2, r2, #5
 8002c1a:	2464      	movs	r4, #100	@ 0x64
 8002c1c:	fb04 3312 	mls	r3, r4, r2, r3
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	3332      	adds	r3, #50	@ 0x32
 8002c24:	fba1 1303 	umull	r1, r3, r1, r3
 8002c28:	0112      	lsls	r2, r2, #4
 8002c2a:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8002c2e:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c30:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c32:	f7ff fee3 	bl	80029fc <HAL_RCC_GetPCLK2Freq>
 8002c36:	4603      	mov	r3, r0
 8002c38:	e7e2      	b.n	8002c00 <UART_SetConfig+0x48>
 8002c3a:	bf00      	nop
 8002c3c:	40013800 	.word	0x40013800
 8002c40:	51eb851f 	.word	0x51eb851f

08002c44 <UART_WaitOnFlagUntilTimeout>:
{
 8002c44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c48:	4680      	mov	r8, r0
 8002c4a:	460e      	mov	r6, r1
 8002c4c:	4615      	mov	r5, r2
 8002c4e:	4699      	mov	r9, r3
 8002c50:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c52:	f8d8 3000 	ldr.w	r3, [r8]
 8002c56:	681c      	ldr	r4, [r3, #0]
 8002c58:	ea36 0404 	bics.w	r4, r6, r4
 8002c5c:	bf0c      	ite	eq
 8002c5e:	2401      	moveq	r4, #1
 8002c60:	2400      	movne	r4, #0
 8002c62:	42ac      	cmp	r4, r5
 8002c64:	d12d      	bne.n	8002cc2 <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8002c66:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002c6a:	d0f4      	beq.n	8002c56 <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c6c:	b12f      	cbz	r7, 8002c7a <UART_WaitOnFlagUntilTimeout+0x36>
 8002c6e:	f7fe fde5 	bl	800183c <HAL_GetTick>
 8002c72:	eba0 0009 	sub.w	r0, r0, r9
 8002c76:	42b8      	cmp	r0, r7
 8002c78:	d9eb      	bls.n	8002c52 <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c7a:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c7e:	f102 030c 	add.w	r3, r2, #12
 8002c82:	e853 3f00 	ldrex	r3, [r3]
 8002c86:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	320c      	adds	r2, #12
 8002c8c:	e842 3100 	strex	r1, r3, [r2]
 8002c90:	2900      	cmp	r1, #0
 8002c92:	d1f2      	bne.n	8002c7a <UART_WaitOnFlagUntilTimeout+0x36>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c98:	f102 0314 	add.w	r3, r2, #20
 8002c9c:	e853 3f00 	ldrex	r3, [r3]
 8002ca0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ca4:	3214      	adds	r2, #20
 8002ca6:	e842 3100 	strex	r1, r3, [r2]
 8002caa:	2900      	cmp	r1, #0
 8002cac:	d1f2      	bne.n	8002c94 <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState  = HAL_UART_STATE_READY;
 8002cae:	2320      	movs	r3, #32
 8002cb0:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	f888 3042 	strb.w	r3, [r8, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 8002cb8:	2300      	movs	r3, #0
 8002cba:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	e000      	b.n	8002cc4 <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8002cc2:	2000      	movs	r0, #0
}
 8002cc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002cc8 <HAL_UART_Init>:
  if (huart == NULL)
 8002cc8:	b360      	cbz	r0, 8002d24 <HAL_UART_Init+0x5c>
{
 8002cca:	b510      	push	{r4, lr}
 8002ccc:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002cce:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002cd2:	b313      	cbz	r3, 8002d1a <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002cd4:	2324      	movs	r3, #36	@ 0x24
 8002cd6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002cda:	6822      	ldr	r2, [r4, #0]
 8002cdc:	68d3      	ldr	r3, [r2, #12]
 8002cde:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002ce2:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	f7ff ff67 	bl	8002bb8 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cea:	6822      	ldr	r2, [r4, #0]
 8002cec:	6913      	ldr	r3, [r2, #16]
 8002cee:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002cf2:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cf4:	6822      	ldr	r2, [r4, #0]
 8002cf6:	6953      	ldr	r3, [r2, #20]
 8002cf8:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002cfc:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002cfe:	6822      	ldr	r2, [r4, #0]
 8002d00:	68d3      	ldr	r3, [r2, #12]
 8002d02:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002d06:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d08:	2000      	movs	r0, #0
 8002d0a:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d0c:	2320      	movs	r3, #32
 8002d0e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d12:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d16:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002d18:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002d1a:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002d1e:	f7fe fcab 	bl	8001678 <HAL_UART_MspInit>
 8002d22:	e7d7      	b.n	8002cd4 <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002d24:	2001      	movs	r0, #1
}
 8002d26:	4770      	bx	lr

08002d28 <HAL_UART_Transmit>:
{
 8002d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d2c:	b082      	sub	sp, #8
 8002d2e:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d30:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b20      	cmp	r3, #32
 8002d38:	d151      	bne.n	8002dde <HAL_UART_Transmit+0xb6>
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	460d      	mov	r5, r1
 8002d3e:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d050      	beq.n	8002de6 <HAL_UART_Transmit+0xbe>
 8002d44:	b90a      	cbnz	r2, 8002d4a <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002d46:	2001      	movs	r0, #1
 8002d48:	e04a      	b.n	8002de0 <HAL_UART_Transmit+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d4e:	2321      	movs	r3, #33	@ 0x21
 8002d50:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002d54:	f7fe fd72 	bl	800183c <HAL_GetTick>
 8002d58:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002d5a:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d5e:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d62:	68a3      	ldr	r3, [r4, #8]
 8002d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d68:	d009      	beq.n	8002d7e <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002d6a:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8002d6e:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	b343      	cbz	r3, 8002dc6 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d74:	f04f 0900 	mov.w	r9, #0
 8002d78:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8002d7c:	e014      	b.n	8002da8 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d7e:	6923      	ldr	r3, [r4, #16]
 8002d80:	b113      	cbz	r3, 8002d88 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002d82:	f04f 0a00 	mov.w	sl, #0
 8002d86:	e7f2      	b.n	8002d6e <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8002d88:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002d8a:	2500      	movs	r5, #0
 8002d8c:	e7ef      	b.n	8002d6e <HAL_UART_Transmit+0x46>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d8e:	6822      	ldr	r2, [r4, #0]
 8002d90:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002d94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d98:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002d9a:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002d9c:	3a01      	subs	r2, #1
 8002d9e:	b292      	uxth	r2, r2
 8002da0:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002da2:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	b173      	cbz	r3, 8002dc6 <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002da8:	9600      	str	r6, [sp, #0]
 8002daa:	463b      	mov	r3, r7
 8002dac:	464a      	mov	r2, r9
 8002dae:	4641      	mov	r1, r8
 8002db0:	4620      	mov	r0, r4
 8002db2:	f7ff ff47 	bl	8002c44 <UART_WaitOnFlagUntilTimeout>
 8002db6:	b9c0      	cbnz	r0, 8002dea <HAL_UART_Transmit+0xc2>
      if (pdata8bits == NULL)
 8002db8:	2d00      	cmp	r5, #0
 8002dba:	d0e8      	beq.n	8002d8e <HAL_UART_Transmit+0x66>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002dbc:	6823      	ldr	r3, [r4, #0]
 8002dbe:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002dc2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002dc4:	e7e9      	b.n	8002d9a <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002dc6:	9600      	str	r6, [sp, #0]
 8002dc8:	463b      	mov	r3, r7
 8002dca:	2200      	movs	r2, #0
 8002dcc:	2140      	movs	r1, #64	@ 0x40
 8002dce:	4620      	mov	r0, r4
 8002dd0:	f7ff ff38 	bl	8002c44 <UART_WaitOnFlagUntilTimeout>
 8002dd4:	b958      	cbnz	r0, 8002dee <HAL_UART_Transmit+0xc6>
    huart->gState = HAL_UART_STATE_READY;
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002ddc:	e000      	b.n	8002de0 <HAL_UART_Transmit+0xb8>
    return HAL_BUSY;
 8002dde:	2002      	movs	r0, #2
}
 8002de0:	b002      	add	sp, #8
 8002de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002de6:	2001      	movs	r0, #1
 8002de8:	e7fa      	b.n	8002de0 <HAL_UART_Transmit+0xb8>
        return HAL_TIMEOUT;
 8002dea:	2003      	movs	r0, #3
 8002dec:	e7f8      	b.n	8002de0 <HAL_UART_Transmit+0xb8>
      return HAL_TIMEOUT;
 8002dee:	2003      	movs	r0, #3
 8002df0:	e7f6      	b.n	8002de0 <HAL_UART_Transmit+0xb8>
	...

08002df4 <HAL_UART_Transmit_DMA>:
{
 8002df4:	b538      	push	{r3, r4, r5, lr}
 8002df6:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002df8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002dfc:	b2d2      	uxtb	r2, r2
 8002dfe:	2a20      	cmp	r2, #32
 8002e00:	d12f      	bne.n	8002e62 <HAL_UART_Transmit_DMA+0x6e>
 8002e02:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002e04:	2900      	cmp	r1, #0
 8002e06:	d02e      	beq.n	8002e66 <HAL_UART_Transmit_DMA+0x72>
 8002e08:	b90b      	cbnz	r3, 8002e0e <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8002e0a:	2001      	movs	r0, #1
}
 8002e0c:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 8002e0e:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002e10:	8483      	strh	r3, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002e12:	84c3      	strh	r3, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e14:	2200      	movs	r2, #0
 8002e16:	6442      	str	r2, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e18:	2021      	movs	r0, #33	@ 0x21
 8002e1a:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002e1e:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e20:	4d12      	ldr	r5, [pc, #72]	@ (8002e6c <HAL_UART_Transmit_DMA+0x78>)
 8002e22:	6285      	str	r5, [r0, #40]	@ 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002e24:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e26:	4d12      	ldr	r5, [pc, #72]	@ (8002e70 <HAL_UART_Transmit_DMA+0x7c>)
 8002e28:	62c5      	str	r5, [r0, #44]	@ 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e2a:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e2c:	4d11      	ldr	r5, [pc, #68]	@ (8002e74 <HAL_UART_Transmit_DMA+0x80>)
 8002e2e:	6305      	str	r5, [r0, #48]	@ 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8002e30:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e32:	6342      	str	r2, [r0, #52]	@ 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002e34:	6822      	ldr	r2, [r4, #0]
 8002e36:	3204      	adds	r2, #4
 8002e38:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e3a:	f7ff f81d 	bl	8001e78 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e44:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e46:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e48:	f102 0314 	add.w	r3, r2, #20
 8002e4c:	e853 3f00 	ldrex	r3, [r3]
 8002e50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e54:	3214      	adds	r2, #20
 8002e56:	e842 3100 	strex	r1, r3, [r2]
 8002e5a:	2900      	cmp	r1, #0
 8002e5c:	d1f3      	bne.n	8002e46 <HAL_UART_Transmit_DMA+0x52>
    return HAL_OK;
 8002e5e:	2000      	movs	r0, #0
 8002e60:	e7d4      	b.n	8002e0c <HAL_UART_Transmit_DMA+0x18>
    return HAL_BUSY;
 8002e62:	2002      	movs	r0, #2
 8002e64:	e7d2      	b.n	8002e0c <HAL_UART_Transmit_DMA+0x18>
      return HAL_ERROR;
 8002e66:	2001      	movs	r0, #1
 8002e68:	e7d0      	b.n	8002e0c <HAL_UART_Transmit_DMA+0x18>
 8002e6a:	bf00      	nop
 8002e6c:	08002f1f 	.word	0x08002f1f
 8002e70:	08002f6d 	.word	0x08002f6d
 8002e74:	08002f79 	.word	0x08002f79

08002e78 <HAL_UART_AbortReceive>:
{
 8002e78:	b510      	push	{r4, lr}
 8002e7a:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e7c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e7e:	f102 030c 	add.w	r3, r2, #12
 8002e82:	e853 3f00 	ldrex	r3, [r3]
 8002e86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e8a:	320c      	adds	r2, #12
 8002e8c:	e842 3100 	strex	r1, r3, [r2]
 8002e90:	2900      	cmp	r1, #0
 8002e92:	d1f3      	bne.n	8002e7c <HAL_UART_AbortReceive+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	f102 0314 	add.w	r3, r2, #20
 8002e9a:	e853 3f00 	ldrex	r3, [r3]
 8002e9e:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	3214      	adds	r2, #20
 8002ea4:	e842 3100 	strex	r1, r3, [r2]
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	d1f3      	bne.n	8002e94 <HAL_UART_AbortReceive+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002eac:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d01f      	beq.n	8002ef2 <HAL_UART_AbortReceive+0x7a>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eb2:	6823      	ldr	r3, [r4, #0]
 8002eb4:	695b      	ldr	r3, [r3, #20]
 8002eb6:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002eba:	d013      	beq.n	8002ee4 <HAL_UART_AbortReceive+0x6c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	f102 0314 	add.w	r3, r2, #20
 8002ec2:	e853 3f00 	ldrex	r3, [r3]
 8002ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eca:	3214      	adds	r2, #20
 8002ecc:	e842 3100 	strex	r1, r3, [r2]
 8002ed0:	2900      	cmp	r1, #0
 8002ed2:	d1f3      	bne.n	8002ebc <HAL_UART_AbortReceive+0x44>
    if (huart->hdmarx != NULL)
 8002ed4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002ed6:	b12b      	cbz	r3, 8002ee4 <HAL_UART_AbortReceive+0x6c>
      huart->hdmarx->XferAbortCallback = NULL;
 8002ed8:	2200      	movs	r2, #0
 8002eda:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002edc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002ede:	f7ff f81a 	bl	8001f16 <HAL_DMA_Abort>
 8002ee2:	b998      	cbnz	r0, 8002f0c <HAL_UART_AbortReceive+0x94>
  huart->RxXferCount = 0x00U;
 8002ee4:	2000      	movs	r0, #0
 8002ee6:	85e0      	strh	r0, [r4, #46]	@ 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8002ee8:	2320      	movs	r3, #32
 8002eea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002eee:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8002ef0:	bd10      	pop	{r4, pc}
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002ef2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef4:	f102 030c 	add.w	r3, r2, #12
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f00:	320c      	adds	r2, #12
 8002f02:	e842 3100 	strex	r1, r3, [r2]
 8002f06:	2900      	cmp	r1, #0
 8002f08:	d1f3      	bne.n	8002ef2 <HAL_UART_AbortReceive+0x7a>
 8002f0a:	e7d2      	b.n	8002eb2 <HAL_UART_AbortReceive+0x3a>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002f0c:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002f0e:	f7ff f90f 	bl	8002130 <HAL_DMA_GetError>
 8002f12:	2820      	cmp	r0, #32
 8002f14:	d1e6      	bne.n	8002ee4 <HAL_UART_AbortReceive+0x6c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f16:	2310      	movs	r3, #16
 8002f18:	6463      	str	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 8002f1a:	2003      	movs	r0, #3
 8002f1c:	e7e8      	b.n	8002ef0 <HAL_UART_AbortReceive+0x78>

08002f1e <UART_DMATransmitCplt>:
{
 8002f1e:	b508      	push	{r3, lr}
 8002f20:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f22:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f013 0f20 	tst.w	r3, #32
 8002f2c:	d11a      	bne.n	8002f64 <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f32:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f34:	f102 0314 	add.w	r3, r2, #20
 8002f38:	e853 3f00 	ldrex	r3, [r3]
 8002f3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f40:	3214      	adds	r2, #20
 8002f42:	e842 3100 	strex	r1, r3, [r2]
 8002f46:	2900      	cmp	r1, #0
 8002f48:	d1f3      	bne.n	8002f32 <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f4a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	f102 030c 	add.w	r3, r2, #12
 8002f50:	e853 3f00 	ldrex	r3, [r3]
 8002f54:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f58:	320c      	adds	r2, #12
 8002f5a:	e842 3100 	strex	r1, r3, [r2]
 8002f5e:	2900      	cmp	r1, #0
 8002f60:	d1f3      	bne.n	8002f4a <UART_DMATransmitCplt+0x2c>
}
 8002f62:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002f64:	f002 f864 	bl	8005030 <HAL_UART_TxCpltCallback>
}
 8002f68:	e7fb      	b.n	8002f62 <UART_DMATransmitCplt+0x44>

08002f6a <HAL_UART_TxHalfCpltCallback>:
}
 8002f6a:	4770      	bx	lr

08002f6c <UART_DMATxHalfCplt>:
{
 8002f6c:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002f6e:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002f70:	f7ff fffb 	bl	8002f6a <HAL_UART_TxHalfCpltCallback>
}
 8002f74:	bd08      	pop	{r3, pc}

08002f76 <HAL_UART_RxHalfCpltCallback>:
}
 8002f76:	4770      	bx	lr

08002f78 <UART_DMAError>:
{
 8002f78:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f7a:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f7c:	6823      	ldr	r3, [r4, #0]
 8002f7e:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f80:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002f84:	b2db      	uxtb	r3, r3
 8002f86:	2b21      	cmp	r3, #33	@ 0x21
 8002f88:	d00e      	beq.n	8002fa8 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8a:	6823      	ldr	r3, [r4, #0]
 8002f8c:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f8e:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	2b22      	cmp	r3, #34	@ 0x22
 8002f96:	d01c      	beq.n	8002fd2 <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f98:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f9a:	f043 0310 	orr.w	r3, r3, #16
 8002f9e:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8002fa0:	4620      	mov	r0, r4
 8002fa2:	f002 f853 	bl	800504c <HAL_UART_ErrorCallback>
}
 8002fa6:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002fa8:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002fac:	d0ed      	beq.n	8002f8a <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	84e3      	strh	r3, [r4, #38]	@ 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002fb2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fb4:	f102 030c 	add.w	r3, r2, #12
 8002fb8:	e853 3f00 	ldrex	r3, [r3]
 8002fbc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc0:	320c      	adds	r2, #12
 8002fc2:	e842 3100 	strex	r1, r3, [r2]
 8002fc6:	2900      	cmp	r1, #0
 8002fc8:	d1f3      	bne.n	8002fb2 <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 8002fca:	2320      	movs	r3, #32
 8002fcc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8002fd0:	e7db      	b.n	8002f8a <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002fd2:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002fd6:	d0df      	beq.n	8002f98 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002fdc:	4620      	mov	r0, r4
 8002fde:	f7ff fdbd 	bl	8002b5c <UART_EndRxTransfer>
 8002fe2:	e7d9      	b.n	8002f98 <UART_DMAError+0x20>

08002fe4 <UART_DMAAbortOnError>:
{
 8002fe4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fe6:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002fec:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8002fee:	f002 f82d 	bl	800504c <HAL_UART_ErrorCallback>
}
 8002ff2:	bd08      	pop	{r3, pc}

08002ff4 <HAL_UARTEx_RxEventCallback>:
}
 8002ff4:	4770      	bx	lr

08002ff6 <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff6:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	2b22      	cmp	r3, #34	@ 0x22
 8002ffe:	d11d      	bne.n	800303c <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003000:	6883      	ldr	r3, [r0, #8]
 8003002:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003006:	d006      	beq.n	8003016 <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003008:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800300a:	b17b      	cbz	r3, 800302c <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800300c:	6803      	ldr	r3, [r0, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003014:	e01a      	b.n	800304c <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003016:	6903      	ldr	r3, [r0, #16]
 8003018:	b9a3      	cbnz	r3, 8003044 <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800301a:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800301c:	6803      	ldr	r3, [r0, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003024:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8003026:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003028:	3302      	adds	r3, #2
 800302a:	e012      	b.n	8003052 <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800302c:	6903      	ldr	r3, [r0, #16]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d1ec      	bne.n	800300c <UART_Receive_IT+0x16>
 8003032:	e008      	b.n	8003046 <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 8003034:	f002 f803 	bl	800503e <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003038:	2000      	movs	r0, #0
 800303a:	e048      	b.n	80030ce <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 800303c:	2002      	movs	r0, #2
 800303e:	4770      	bx	lr
    return HAL_OK;
 8003040:	2000      	movs	r0, #0
}
 8003042:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003044:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003046:	6803      	ldr	r3, [r0, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 800304e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003050:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 8003052:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 8003054:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 8003056:	3b01      	subs	r3, #1
 8003058:	b29b      	uxth	r3, r3
 800305a:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1ef      	bne.n	8003040 <UART_Receive_IT+0x4a>
{
 8003060:	b500      	push	{lr}
 8003062:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003064:	6802      	ldr	r2, [r0, #0]
 8003066:	68d3      	ldr	r3, [r2, #12]
 8003068:	f023 0320 	bic.w	r3, r3, #32
 800306c:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800306e:	6802      	ldr	r2, [r0, #0]
 8003070:	68d3      	ldr	r3, [r2, #12]
 8003072:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003076:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003078:	6802      	ldr	r2, [r0, #0]
 800307a:	6953      	ldr	r3, [r2, #20]
 800307c:	f023 0301 	bic.w	r3, r3, #1
 8003080:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8003082:	2320      	movs	r3, #32
 8003084:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	2300      	movs	r3, #0
 800308a:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800308c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800308e:	2b01      	cmp	r3, #1
 8003090:	d1d0      	bne.n	8003034 <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003092:	2300      	movs	r3, #0
 8003094:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003096:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003098:	f102 030c 	add.w	r3, r2, #12
 800309c:	e853 3f00 	ldrex	r3, [r3]
 80030a0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030a4:	320c      	adds	r2, #12
 80030a6:	e842 3100 	strex	r1, r3, [r2]
 80030aa:	2900      	cmp	r1, #0
 80030ac:	d1f3      	bne.n	8003096 <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80030ae:	6803      	ldr	r3, [r0, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	f012 0f10 	tst.w	r2, #16
 80030b6:	d006      	beq.n	80030c6 <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80030b8:	2200      	movs	r2, #0
 80030ba:	9201      	str	r2, [sp, #4]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	9201      	str	r2, [sp, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	9301      	str	r3, [sp, #4]
 80030c4:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80030c6:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80030c8:	f7ff ff94 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80030cc:	2000      	movs	r0, #0
}
 80030ce:	b003      	add	sp, #12
 80030d0:	f85d fb04 	ldr.w	pc, [sp], #4

080030d4 <HAL_UART_IRQHandler>:
{
 80030d4:	b510      	push	{r4, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030da:	6802      	ldr	r2, [r0, #0]
 80030dc:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030de:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030e0:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80030e2:	f013 0f0f 	tst.w	r3, #15
 80030e6:	d109      	bne.n	80030fc <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030e8:	f013 0f20 	tst.w	r3, #32
 80030ec:	d00d      	beq.n	800310a <HAL_UART_IRQHandler+0x36>
 80030ee:	f010 0f20 	tst.w	r0, #32
 80030f2:	d00a      	beq.n	800310a <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80030f4:	4620      	mov	r0, r4
 80030f6:	f7ff ff7e 	bl	8002ff6 <UART_Receive_IT>
      return;
 80030fa:	e018      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030fc:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003100:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 8003104:	ea5c 0c01 	orrs.w	ip, ip, r1
 8003108:	d113      	bne.n	8003132 <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800310a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800310c:	2901      	cmp	r1, #1
 800310e:	f000 8081 	beq.w	8003214 <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003112:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003116:	d003      	beq.n	8003120 <HAL_UART_IRQHandler+0x4c>
 8003118:	f010 0f80 	tst.w	r0, #128	@ 0x80
 800311c:	f040 811a 	bne.w	8003354 <HAL_UART_IRQHandler+0x280>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003120:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003124:	d003      	beq.n	800312e <HAL_UART_IRQHandler+0x5a>
 8003126:	f010 0f40 	tst.w	r0, #64	@ 0x40
 800312a:	f040 8140 	bne.w	80033ae <HAL_UART_IRQHandler+0x2da>
}
 800312e:	b002      	add	sp, #8
 8003130:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003132:	f013 0f01 	tst.w	r3, #1
 8003136:	d006      	beq.n	8003146 <HAL_UART_IRQHandler+0x72>
 8003138:	f410 7f80 	tst.w	r0, #256	@ 0x100
 800313c:	d003      	beq.n	8003146 <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800313e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003140:	f042 0201 	orr.w	r2, r2, #1
 8003144:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003146:	f013 0f04 	tst.w	r3, #4
 800314a:	d00b      	beq.n	8003164 <HAL_UART_IRQHandler+0x90>
 800314c:	b191      	cbz	r1, 8003174 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800314e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003150:	f042 0202 	orr.w	r2, r2, #2
 8003154:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003156:	f013 0f02 	tst.w	r3, #2
 800315a:	d107      	bne.n	800316c <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800315c:	f013 0f08 	tst.w	r3, #8
 8003160:	d10f      	bne.n	8003182 <HAL_UART_IRQHandler+0xae>
 8003162:	e012      	b.n	800318a <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003164:	f013 0f02 	tst.w	r3, #2
 8003168:	d004      	beq.n	8003174 <HAL_UART_IRQHandler+0xa0>
 800316a:	b119      	cbz	r1, 8003174 <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800316c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800316e:	f042 0204 	orr.w	r2, r2, #4
 8003172:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003174:	f013 0f08 	tst.w	r3, #8
 8003178:	d007      	beq.n	800318a <HAL_UART_IRQHandler+0xb6>
 800317a:	f000 0220 	and.w	r2, r0, #32
 800317e:	430a      	orrs	r2, r1
 8003180:	d003      	beq.n	800318a <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003182:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003184:	f042 0208 	orr.w	r2, r2, #8
 8003188:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800318a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800318c:	2a00      	cmp	r2, #0
 800318e:	d0ce      	beq.n	800312e <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003190:	f013 0f20 	tst.w	r3, #32
 8003194:	d002      	beq.n	800319c <HAL_UART_IRQHandler+0xc8>
 8003196:	f010 0f20 	tst.w	r0, #32
 800319a:	d10e      	bne.n	80031ba <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800319c:	6823      	ldr	r3, [r4, #0]
 800319e:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031a0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80031a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80031a6:	f002 0208 	and.w	r2, r2, #8
 80031aa:	4313      	orrs	r3, r2
 80031ac:	d109      	bne.n	80031c2 <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 80031ae:	4620      	mov	r0, r4
 80031b0:	f001 ff4c 	bl	800504c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031b4:	2300      	movs	r3, #0
 80031b6:	6463      	str	r3, [r4, #68]	@ 0x44
 80031b8:	e7b9      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 80031ba:	4620      	mov	r0, r4
 80031bc:	f7ff ff1b 	bl	8002ff6 <UART_Receive_IT>
 80031c0:	e7ec      	b.n	800319c <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 80031c2:	4620      	mov	r0, r4
 80031c4:	f7ff fcca 	bl	8002b5c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031c8:	6823      	ldr	r3, [r4, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80031d0:	d01c      	beq.n	800320c <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031d4:	f102 0314 	add.w	r3, r2, #20
 80031d8:	e853 3f00 	ldrex	r3, [r3]
 80031dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031e0:	3214      	adds	r2, #20
 80031e2:	e842 3100 	strex	r1, r3, [r2]
 80031e6:	2900      	cmp	r1, #0
 80031e8:	d1f3      	bne.n	80031d2 <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 80031ea:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80031ec:	b153      	cbz	r3, 8003204 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031ee:	4a75      	ldr	r2, [pc, #468]	@ (80033c4 <HAL_UART_IRQHandler+0x2f0>)
 80031f0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031f2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80031f4:	f7fe feb0 	bl	8001f58 <HAL_DMA_Abort_IT>
 80031f8:	2800      	cmp	r0, #0
 80031fa:	d098      	beq.n	800312e <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031fc:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80031fe:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8003200:	4798      	blx	r3
 8003202:	e794      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 8003204:	4620      	mov	r0, r4
 8003206:	f001 ff21 	bl	800504c <HAL_UART_ErrorCallback>
 800320a:	e790      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 800320c:	4620      	mov	r0, r4
 800320e:	f001 ff1d 	bl	800504c <HAL_UART_ErrorCallback>
 8003212:	e78c      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003214:	f013 0f10 	tst.w	r3, #16
 8003218:	f43f af7b 	beq.w	8003112 <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800321c:	f010 0f10 	tst.w	r0, #16
 8003220:	f43f af77 	beq.w	8003112 <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003224:	2300      	movs	r3, #0
 8003226:	9301      	str	r3, [sp, #4]
 8003228:	6813      	ldr	r3, [r2, #0]
 800322a:	9301      	str	r3, [sp, #4]
 800322c:	6853      	ldr	r3, [r2, #4]
 800322e:	9301      	str	r3, [sp, #4]
 8003230:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003232:	6953      	ldr	r3, [r2, #20]
 8003234:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003238:	d050      	beq.n	80032dc <HAL_UART_IRQHandler+0x208>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800323a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800323c:	6813      	ldr	r3, [r2, #0]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003242:	2b00      	cmp	r3, #0
 8003244:	f43f af73 	beq.w	800312e <HAL_UART_IRQHandler+0x5a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003248:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 800324a:	4299      	cmp	r1, r3
 800324c:	f67f af6f 	bls.w	800312e <HAL_UART_IRQHandler+0x5a>
        huart->RxXferCount = nb_remaining_rx_data;
 8003250:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003252:	6993      	ldr	r3, [r2, #24]
 8003254:	2b20      	cmp	r3, #32
 8003256:	d037      	beq.n	80032c8 <HAL_UART_IRQHandler+0x1f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003258:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325a:	f102 030c 	add.w	r3, r2, #12
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003266:	320c      	adds	r2, #12
 8003268:	e842 3100 	strex	r1, r3, [r2]
 800326c:	2900      	cmp	r1, #0
 800326e:	d1f3      	bne.n	8003258 <HAL_UART_IRQHandler+0x184>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003270:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003272:	f102 0314 	add.w	r3, r2, #20
 8003276:	e853 3f00 	ldrex	r3, [r3]
 800327a:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800327e:	3214      	adds	r2, #20
 8003280:	e842 3100 	strex	r1, r3, [r2]
 8003284:	2900      	cmp	r1, #0
 8003286:	d1f3      	bne.n	8003270 <HAL_UART_IRQHandler+0x19c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003288:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	f102 0314 	add.w	r3, r2, #20
 800328e:	e853 3f00 	ldrex	r3, [r3]
 8003292:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003296:	3214      	adds	r2, #20
 8003298:	e842 3100 	strex	r1, r3, [r2]
 800329c:	2900      	cmp	r1, #0
 800329e:	d1f3      	bne.n	8003288 <HAL_UART_IRQHandler+0x1b4>
          huart->RxState = HAL_UART_STATE_READY;
 80032a0:	2320      	movs	r3, #32
 80032a2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032a6:	2300      	movs	r3, #0
 80032a8:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80032aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ac:	f102 030c 	add.w	r3, r2, #12
 80032b0:	e853 3f00 	ldrex	r3, [r3]
 80032b4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b8:	320c      	adds	r2, #12
 80032ba:	e842 3100 	strex	r1, r3, [r2]
 80032be:	2900      	cmp	r1, #0
 80032c0:	d1f3      	bne.n	80032aa <HAL_UART_IRQHandler+0x1d6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032c2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80032c4:	f7fe fe27 	bl	8001f16 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c8:	2302      	movs	r3, #2
 80032ca:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032cc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80032ce:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80032d0:	1ac9      	subs	r1, r1, r3
 80032d2:	b289      	uxth	r1, r1
 80032d4:	4620      	mov	r0, r4
 80032d6:	f7ff fe8d 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
 80032da:	e728      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032dc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80032de:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80032e0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	f43f af22 	beq.w	800312e <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032ea:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80032ec:	1a89      	subs	r1, r1, r2
 80032ee:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80032f0:	2900      	cmp	r1, #0
 80032f2:	f43f af1c 	beq.w	800312e <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032f6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	f102 030c 	add.w	r3, r2, #12
 80032fc:	e853 3f00 	ldrex	r3, [r3]
 8003300:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003304:	320c      	adds	r2, #12
 8003306:	e842 3000 	strex	r0, r3, [r2]
 800330a:	2800      	cmp	r0, #0
 800330c:	d1f3      	bne.n	80032f6 <HAL_UART_IRQHandler+0x222>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800330e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003310:	f102 0314 	add.w	r3, r2, #20
 8003314:	e853 3f00 	ldrex	r3, [r3]
 8003318:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800331c:	3214      	adds	r2, #20
 800331e:	e842 3000 	strex	r0, r3, [r2]
 8003322:	2800      	cmp	r0, #0
 8003324:	d1f3      	bne.n	800330e <HAL_UART_IRQHandler+0x23a>
        huart->RxState = HAL_UART_STATE_READY;
 8003326:	2320      	movs	r3, #32
 8003328:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800332c:	2300      	movs	r3, #0
 800332e:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003330:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003332:	f102 030c 	add.w	r3, r2, #12
 8003336:	e853 3f00 	ldrex	r3, [r3]
 800333a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333e:	320c      	adds	r2, #12
 8003340:	e842 3000 	strex	r0, r3, [r2]
 8003344:	2800      	cmp	r0, #0
 8003346:	d1f3      	bne.n	8003330 <HAL_UART_IRQHandler+0x25c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003348:	2302      	movs	r3, #2
 800334a:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800334c:	4620      	mov	r0, r4
 800334e:	f7ff fe51 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
 8003352:	e6ec      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003354:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b21      	cmp	r3, #33	@ 0x21
 800335c:	f47f aee7 	bne.w	800312e <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003360:	68a3      	ldr	r3, [r4, #8]
 8003362:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003366:	d016      	beq.n	8003396 <HAL_UART_IRQHandler+0x2c2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003368:	6a23      	ldr	r3, [r4, #32]
 800336a:	1c59      	adds	r1, r3, #1
 800336c:	6221      	str	r1, [r4, #32]
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 8003372:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8003374:	3b01      	subs	r3, #1
 8003376:	b29b      	uxth	r3, r3
 8003378:	84e3      	strh	r3, [r4, #38]	@ 0x26
 800337a:	2b00      	cmp	r3, #0
 800337c:	f47f aed7 	bne.w	800312e <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003380:	6822      	ldr	r2, [r4, #0]
 8003382:	68d3      	ldr	r3, [r2, #12]
 8003384:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003388:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800338a:	6822      	ldr	r2, [r4, #0]
 800338c:	68d3      	ldr	r3, [r2, #12]
 800338e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003392:	60d3      	str	r3, [r2, #12]
 8003394:	e6cb      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003396:	6923      	ldr	r3, [r4, #16]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d1e5      	bne.n	8003368 <HAL_UART_IRQHandler+0x294>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800339c:	6a23      	ldr	r3, [r4, #32]
 800339e:	881b      	ldrh	r3, [r3, #0]
 80033a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033a4:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 80033a6:	6a23      	ldr	r3, [r4, #32]
 80033a8:	3302      	adds	r3, #2
 80033aa:	6223      	str	r3, [r4, #32]
 80033ac:	e7e1      	b.n	8003372 <HAL_UART_IRQHandler+0x29e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80033ae:	68d3      	ldr	r3, [r2, #12]
 80033b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80033b4:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 80033b6:	2320      	movs	r3, #32
 80033b8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 80033bc:	4620      	mov	r0, r4
 80033be:	f001 fe37 	bl	8005030 <HAL_UART_TxCpltCallback>
  return HAL_OK;
 80033c2:	e6b4      	b.n	800312e <HAL_UART_IRQHandler+0x5a>
 80033c4:	08002fe5 	.word	0x08002fe5

080033c8 <UART_DMARxHalfCplt>:
{
 80033c8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ca:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80033cc:	2301      	movs	r3, #1
 80033ce:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033d0:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d002      	beq.n	80033dc <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80033d6:	f7ff fdce 	bl	8002f76 <HAL_UART_RxHalfCpltCallback>
}
 80033da:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80033dc:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80033de:	0849      	lsrs	r1, r1, #1
 80033e0:	f7ff fe08 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
 80033e4:	e7f9      	b.n	80033da <UART_DMARxHalfCplt+0x12>

080033e6 <UART_DMAReceiveCplt>:
{
 80033e6:	b508      	push	{r3, lr}
 80033e8:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033ea:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f013 0f20 	tst.w	r3, #32
 80033f4:	d12b      	bne.n	800344e <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033fa:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033fc:	f102 030c 	add.w	r3, r2, #12
 8003400:	e853 3f00 	ldrex	r3, [r3]
 8003404:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003408:	320c      	adds	r2, #12
 800340a:	e842 3100 	strex	r1, r3, [r2]
 800340e:	2900      	cmp	r1, #0
 8003410:	d1f3      	bne.n	80033fa <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003412:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003414:	f102 0314 	add.w	r3, r2, #20
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003420:	3214      	adds	r2, #20
 8003422:	e842 3100 	strex	r1, r3, [r2]
 8003426:	2900      	cmp	r1, #0
 8003428:	d1f3      	bne.n	8003412 <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800342a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342c:	f102 0314 	add.w	r3, r2, #20
 8003430:	e853 3f00 	ldrex	r3, [r3]
 8003434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	3214      	adds	r2, #20
 800343a:	e842 3100 	strex	r1, r3, [r2]
 800343e:	2900      	cmp	r1, #0
 8003440:	d1f3      	bne.n	800342a <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 8003442:	2320      	movs	r3, #32
 8003444:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003448:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800344a:	2b01      	cmp	r3, #1
 800344c:	d007      	beq.n	800345e <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800344e:	2300      	movs	r3, #0
 8003450:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003452:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003454:	2b01      	cmp	r3, #1
 8003456:	d00f      	beq.n	8003478 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8003458:	f001 fdf1 	bl	800503e <HAL_UART_RxCpltCallback>
}
 800345c:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	f102 030c 	add.w	r3, r2, #12
 8003464:	e853 3f00 	ldrex	r3, [r3]
 8003468:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800346c:	320c      	adds	r2, #12
 800346e:	e842 3100 	strex	r1, r3, [r2]
 8003472:	2900      	cmp	r1, #0
 8003474:	d1f3      	bne.n	800345e <UART_DMAReceiveCplt+0x78>
 8003476:	e7ea      	b.n	800344e <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003478:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 800347a:	f7ff fdbb 	bl	8002ff4 <HAL_UARTEx_RxEventCallback>
 800347e:	e7ed      	b.n	800345c <UART_DMAReceiveCplt+0x76>

08003480 <UART_Start_Receive_DMA>:
{
 8003480:	b530      	push	{r4, r5, lr}
 8003482:	b083      	sub	sp, #12
 8003484:	4604      	mov	r4, r0
 8003486:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8003488:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 800348a:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800348c:	2500      	movs	r5, #0
 800348e:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003490:	2222      	movs	r2, #34	@ 0x22
 8003492:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003496:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003498:	481f      	ldr	r0, [pc, #124]	@ (8003518 <UART_Start_Receive_DMA+0x98>)
 800349a:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800349c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800349e:	481f      	ldr	r0, [pc, #124]	@ (800351c <UART_Start_Receive_DMA+0x9c>)
 80034a0:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80034a2:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80034a4:	481e      	ldr	r0, [pc, #120]	@ (8003520 <UART_Start_Receive_DMA+0xa0>)
 80034a6:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 80034a8:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 80034aa:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80034ac:	6820      	ldr	r0, [r4, #0]
 80034ae:	460a      	mov	r2, r1
 80034b0:	1d01      	adds	r1, r0, #4
 80034b2:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80034b4:	f7fe fce0 	bl	8001e78 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 80034b8:	9501      	str	r5, [sp, #4]
 80034ba:	6823      	ldr	r3, [r4, #0]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	9201      	str	r2, [sp, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	9301      	str	r3, [sp, #4]
 80034c4:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 80034c6:	6923      	ldr	r3, [r4, #16]
 80034c8:	b15b      	cbz	r3, 80034e2 <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	f102 030c 	add.w	r3, r2, #12
 80034d0:	e853 3f00 	ldrex	r3, [r3]
 80034d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034d8:	320c      	adds	r2, #12
 80034da:	e842 3100 	strex	r1, r3, [r2]
 80034de:	2900      	cmp	r1, #0
 80034e0:	d1f3      	bne.n	80034ca <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e4:	f102 0314 	add.w	r3, r2, #20
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	3214      	adds	r2, #20
 80034f2:	e842 3100 	strex	r1, r3, [r2]
 80034f6:	2900      	cmp	r1, #0
 80034f8:	d1f3      	bne.n	80034e2 <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034fa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	f102 0314 	add.w	r3, r2, #20
 8003500:	e853 3f00 	ldrex	r3, [r3]
 8003504:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003508:	3214      	adds	r2, #20
 800350a:	e842 3100 	strex	r1, r3, [r2]
 800350e:	2900      	cmp	r1, #0
 8003510:	d1f3      	bne.n	80034fa <UART_Start_Receive_DMA+0x7a>
}
 8003512:	2000      	movs	r0, #0
 8003514:	b003      	add	sp, #12
 8003516:	bd30      	pop	{r4, r5, pc}
 8003518:	080033e7 	.word	0x080033e7
 800351c:	080033c9 	.word	0x080033c9
 8003520:	08002f79 	.word	0x08002f79

08003524 <HAL_UART_Receive_DMA>:
{
 8003524:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003526:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800352a:	b2db      	uxtb	r3, r3
 800352c:	2b20      	cmp	r3, #32
 800352e:	d108      	bne.n	8003542 <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8003530:	b149      	cbz	r1, 8003546 <HAL_UART_Receive_DMA+0x22>
 8003532:	b90a      	cbnz	r2, 8003538 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 8003534:	2001      	movs	r0, #1
}
 8003536:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003538:	2300      	movs	r3, #0
 800353a:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 800353c:	f7ff ffa0 	bl	8003480 <UART_Start_Receive_DMA>
 8003540:	e7f9      	b.n	8003536 <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 8003542:	2002      	movs	r0, #2
 8003544:	e7f7      	b.n	8003536 <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 8003546:	2001      	movs	r0, #1
 8003548:	e7f5      	b.n	8003536 <HAL_UART_Receive_DMA+0x12>

0800354a <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 800354a:	2a01      	cmp	r2, #1
 800354c:	d102      	bne.n	8003554 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 800354e:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8003550:	2000      	movs	r0, #0
 8003552:	4770      	bx	lr
	  switch (__op)
 8003554:	2a02      	cmp	r2, #2
 8003556:	d8fb      	bhi.n	8003550 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
 8003558:	e8df f002 	tbb	[pc, r2]
 800355c:	0502      	.short	0x0502
 800355e:	07          	.byte	0x07
 800355f:	00          	.byte	0x00
	      __dest._M_access<const type_info*>() = nullptr;
 8003560:	2300      	movs	r3, #0
 8003562:	6003      	str	r3, [r0, #0]
	      break;
 8003564:	e7f4      	b.n	8003550 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8003566:	6001      	str	r1, [r0, #0]
	      break;
 8003568:	e7f2      	b.n	8003550 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800356a:	680b      	ldr	r3, [r1, #0]
 800356c:	6003      	str	r3, [r0, #0]
	  }
 800356e:	e7ef      	b.n	8003550 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6>

08003570 <_ZL10pingWorkerP11ring_bufferhP14ProtocolSender>:
//	stm32_uart_communicator_t* const self = (stm32_uart_communicator_t*)captured;
//}


static void pingWorker(ringbuf_t* const data, const u8 id, ProtocolSender* const ctx)
{
 8003570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003572:	4614      	mov	r4, r2
	RawParser_dynamic_t* const parser = ctx->getParserNew();
	pool_container_t* const pack_pool = ctx->getPool();

	if(!FIFO_IS_FULL(pack_pool)) {
 8003574:	6913      	ldr	r3, [r2, #16]
 8003576:	68d2      	ldr	r2, [r2, #12]
 8003578:	4053      	eors	r3, r2
 800357a:	68a2      	ldr	r2, [r4, #8]
 800357c:	4013      	ands	r3, r2
 800357e:	6822      	ldr	r2, [r4, #0]
 8003580:	4293      	cmp	r3, r2
 8003582:	d100      	bne.n	8003586 <_ZL10pingWorkerP11ring_bufferhP14ProtocolSender+0x16>

		ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(parser);
		buffer->size = ring->base.head;
		poolContainer_nextWritePos(pack_pool);
	}
}
 8003584:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003586:	460d      	mov	r5, r1
	status_t init(UART_HandleTypeDef* const huart);
	void proceed(const uint32_t current_time);

	// getters
	inline pool_container_t* const getPool() { return &pack_pool; }
	inline RawParser_dynamic_t* const getParserNew() { return &rawP_new; }
 8003588:	f104 061c 	add.w	r6, r4, #28
		ProtocolSender::pool_elem* const buffer = static_cast<ProtocolSender::pool_elem*>(poolContainer_getWriteBuffer(pack_pool));
 800358c:	4620      	mov	r0, r4
 800358e:	f000 fdcb 	bl	8004128 <poolContainer_getWriteBuffer>
 8003592:	4607      	mov	r7, r0
bool rawP_dynamic_startTransmittPacket(RawParser_dynamic_t* const self, reg len);
ringbuf_t* const rawP_dynamic_finishTransmittPacket(RawParser_dynamic_t* const self);

STATIC_FORCEINLINE bool rawP_dynamic_install_txbuf(RawParser_dynamic_t* const self, void* const buffer)
{
	return ringbuf_install_buf(&self->TX.frame_stream, buffer);
 8003594:	1c81      	adds	r1, r0, #2
 8003596:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 800359a:	f000 fe00 	bl	800419e <ringbuf_install_buf>
		rawP_dynamic_startTransmittPacket(parser, 3);
 800359e:	2103      	movs	r1, #3
 80035a0:	4630      	mov	r0, r6
 80035a2:	f001 f916 	bl	80047d2 <rawP_dynamic_startTransmittPacket>
		rawp_stream_add_u8(parser, id);
 80035a6:	4629      	mov	r1, r5
 80035a8:	4630      	mov	r0, r6
 80035aa:	f001 f9c6 	bl	800493a <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0xdd);
 80035ae:	21dd      	movs	r1, #221	@ 0xdd
 80035b0:	4630      	mov	r0, r6
 80035b2:	f001 f9c2 	bl	800493a <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0xee);
 80035b6:	21ee      	movs	r1, #238	@ 0xee
 80035b8:	4630      	mov	r0, r6
 80035ba:	f001 f9be 	bl	800493a <rawp_stream_add_u8>
		ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(parser);
 80035be:	4630      	mov	r0, r6
 80035c0:	f001 f975 	bl	80048ae <rawP_dynamic_finishTransmittPacket>
		buffer->size = ring->base.head;
 80035c4:	6903      	ldr	r3, [r0, #16]
 80035c6:	803b      	strh	r3, [r7, #0]
		poolContainer_nextWritePos(pack_pool);
 80035c8:	4620      	mov	r0, r4
 80035ca:	f000 fdb4 	bl	8004136 <poolContainer_nextWritePos>
}
 80035ce:	e7d9      	b.n	8003584 <_ZL10pingWorkerP11ring_bufferhP14ProtocolSender+0x14>

080035d0 <_ZL6setKeyP11ring_bufferhP14ProtocolSender>:

static void setKey(ringbuf_t* const data, const u8 id, ProtocolSender* const ctx)
{
 80035d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	4605      	mov	r5, r0
 80035d6:	460f      	mov	r7, r1
 80035d8:	4614      	mov	r4, r2
	inline stm32_DMA_uart_t* const getUart() { return &stm32_uart; }
	inline Key_tps1htc30Group* const getKeyClass() { return m_keyGroup; }
 80035da:	f8d2 90c4 	ldr.w	r9, [r2, #196]	@ 0xc4
	RawParser_dynamic_t* const parser = ctx->getParserNew();
	pool_container_t* const pack_pool = ctx->getPool();
	Key_tps1htc30Group* const key =  ctx->getKeyClass();

	const u8 group_id = ringbuf_getc(data);
 80035de:	f000 fe1e 	bl	800421e <ringbuf_getc>
 80035e2:	4606      	mov	r6, r0
	const u8 key_id = ringbuf_getc(data);
 80035e4:	4628      	mov	r0, r5
 80035e6:	f000 fe1a 	bl	800421e <ringbuf_getc>
 80035ea:	4680      	mov	r8, r0
	const u8 en = ringbuf_getc(data);
 80035ec:	4628      	mov	r0, r5
 80035ee:	f000 fe16 	bl	800421e <ringbuf_getc>

	key->set_out(en, group_id, key_id);
 80035f2:	4643      	mov	r3, r8
 80035f4:	4632      	mov	r2, r6
 80035f6:	1e01      	subs	r1, r0, #0
 80035f8:	bf18      	it	ne
 80035fa:	2101      	movne	r1, #1
 80035fc:	4648      	mov	r0, r9
 80035fe:	f000 fb7f 	bl	8003d00 <_ZN18Key_tps1htc30Group7set_outEbhh>

	if(!FIFO_IS_FULL(pack_pool)) {
 8003602:	6923      	ldr	r3, [r4, #16]
 8003604:	68e2      	ldr	r2, [r4, #12]
 8003606:	4053      	eors	r3, r2
 8003608:	68a2      	ldr	r2, [r4, #8]
 800360a:	4013      	ands	r3, r2
 800360c:	6822      	ldr	r2, [r4, #0]
 800360e:	4293      	cmp	r3, r2
 8003610:	d101      	bne.n	8003616 <_ZL6setKeyP11ring_bufferhP14ProtocolSender+0x46>
		rawp_stream_add_u8(parser, id);
		ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(parser);
		buffer->size = ring->base.head;
		poolContainer_nextWritePos(pack_pool);
	}
}
 8003612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	inline RawParser_dynamic_t* const getParserNew() { return &rawP_new; }
 8003616:	f104 061c 	add.w	r6, r4, #28
		ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(pack_pool);
 800361a:	4620      	mov	r0, r4
 800361c:	f000 fd84 	bl	8004128 <poolContainer_getWriteBuffer>
 8003620:	4605      	mov	r5, r0
 8003622:	1c81      	adds	r1, r0, #2
 8003624:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8003628:	f000 fdb9 	bl	800419e <ringbuf_install_buf>
		rawP_dynamic_startTransmittPacket(parser, 10);
 800362c:	210a      	movs	r1, #10
 800362e:	4630      	mov	r0, r6
 8003630:	f001 f8cf 	bl	80047d2 <rawP_dynamic_startTransmittPacket>
		rawp_stream_add_u8(parser, id);
 8003634:	4639      	mov	r1, r7
 8003636:	4630      	mov	r0, r6
 8003638:	f001 f97f 	bl	800493a <rawp_stream_add_u8>
		ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(parser);
 800363c:	4630      	mov	r0, r6
 800363e:	f001 f936 	bl	80048ae <rawP_dynamic_finishTransmittPacket>
		buffer->size = ring->base.head;
 8003642:	6903      	ldr	r3, [r0, #16]
 8003644:	802b      	strh	r3, [r5, #0]
		poolContainer_nextWritePos(pack_pool);
 8003646:	4620      	mov	r0, r4
 8003648:	f000 fd75 	bl	8004136 <poolContainer_nextWritePos>
}
 800364c:	e7e1      	b.n	8003612 <_ZL6setKeyP11ring_bufferhP14ProtocolSender+0x42>

0800364e <_ZL16uart_tx_callbackaP16pool_container_t>:
{
 800364e:	b508      	push	{r3, lr}
	poolContainer_nextReadPos(pack_pool);
 8003650:	4608      	mov	r0, r1
 8003652:	f000 fd7b 	bl	800414c <poolContainer_nextReadPos>
}
 8003656:	bd08      	pop	{r3, pc}

08003658 <_ZL16uart_rx_callbackPKhmP19RawParser_dynamic_t>:
{
 8003658:	b508      	push	{r3, lr}
 800365a:	4613      	mov	r3, r2
	ringbuf_put(&self->RX.input_ring, arr, size);
 800365c:	460a      	mov	r2, r1
 800365e:	4601      	mov	r1, r0
 8003660:	f103 0010 	add.w	r0, r3, #16
 8003664:	f000 fded 	bl	8004242 <ringbuf_put>
}
 8003668:	bd08      	pop	{r3, pc}

0800366a <_ZL11rx_callbackP11ring_bufferP14ProtocolSender>:


static void rx_callback(ringbuf_t* const rxStream, ProtocolSender* const self)
{
 800366a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800366e:	4606      	mov	r6, r0
 8003670:	460c      	mov	r4, r1
 8003672:	f101 051c 	add.w	r5, r1, #28
	RawParser_dynamic_t* const parser = self->getParserNew();
	pool_container_t* const pack_pool = self->getPool();
	CallbackManager_t* const callb = self->getCmdWorker();

	const u8 cmd = ringbuf_getc(rxStream);
 8003676:	f000 fdd2 	bl	800421e <ringbuf_getc>
 800367a:	4601      	mov	r1, r0
	CallbackManager_proceed(callb, cmd, rxStream);
 800367c:	4632      	mov	r2, r6
 800367e:	f104 00b8 	add.w	r0, r4, #184	@ 0xb8
 8003682:	f000 fe4c 	bl	800431e <CallbackManager_proceed>

	while(!FIFO_IS_FULL(pack_pool)) {
 8003686:	6923      	ldr	r3, [r4, #16]
 8003688:	68e2      	ldr	r2, [r4, #12]
 800368a:	4053      	eors	r3, r2
 800368c:	68a2      	ldr	r2, [r4, #8]
 800368e:	4013      	ands	r3, r2
 8003690:	6822      	ldr	r2, [r4, #0]
 8003692:	4293      	cmp	r3, r2
 8003694:	d035      	beq.n	8003702 <_ZL11rx_callbackP11ring_bufferP14ProtocolSender+0x98>
	return ringbuf_install_buf(&self->TX.frame_stream, buffer);
 8003696:	f104 086c 	add.w	r8, r4, #108	@ 0x6c
		ProtocolSender::pool_elem* const buffer = static_cast<ProtocolSender::pool_elem*>(poolContainer_getWriteBuffer(pack_pool));
		rawP_dynamic_install_txbuf(parser, buffer->data);

		rawP_dynamic_startTransmittPacket(parser, 10);
 800369a:	270a      	movs	r7, #10
		rawp_stream_add_u8(parser, 0x11);
 800369c:	2611      	movs	r6, #17
		ProtocolSender::pool_elem* const buffer = static_cast<ProtocolSender::pool_elem*>(poolContainer_getWriteBuffer(pack_pool));
 800369e:	4620      	mov	r0, r4
 80036a0:	f000 fd42 	bl	8004128 <poolContainer_getWriteBuffer>
 80036a4:	4681      	mov	r9, r0
 80036a6:	1c81      	adds	r1, r0, #2
 80036a8:	4640      	mov	r0, r8
 80036aa:	f000 fd78 	bl	800419e <ringbuf_install_buf>
		rawP_dynamic_startTransmittPacket(parser, 10);
 80036ae:	4639      	mov	r1, r7
 80036b0:	4628      	mov	r0, r5
 80036b2:	f001 f88e 	bl	80047d2 <rawP_dynamic_startTransmittPacket>
		rawp_stream_add_u8(parser, 0x11);
 80036b6:	4631      	mov	r1, r6
 80036b8:	4628      	mov	r0, r5
 80036ba:	f001 f93e 	bl	800493a <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0x22);
 80036be:	2122      	movs	r1, #34	@ 0x22
 80036c0:	4628      	mov	r0, r5
 80036c2:	f001 f93a 	bl	800493a <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0x33);
 80036c6:	2133      	movs	r1, #51	@ 0x33
 80036c8:	4628      	mov	r0, r5
 80036ca:	f001 f936 	bl	800493a <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0x1a);
 80036ce:	211a      	movs	r1, #26
 80036d0:	4628      	mov	r0, r5
 80036d2:	f001 f932 	bl	800493a <rawp_stream_add_u8>
		rawp_stream_add_u16(parser, 0xaabb);
 80036d6:	f64a 21bb 	movw	r1, #43707	@ 0xaabb
 80036da:	4628      	mov	r0, r5
 80036dc:	f001 f94d 	bl	800497a <rawp_stream_add_u16>
		ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(parser);
 80036e0:	4628      	mov	r0, r5
 80036e2:	f001 f8e4 	bl	80048ae <rawP_dynamic_finishTransmittPacket>
		buffer->size = ring->base.head;
 80036e6:	6903      	ldr	r3, [r0, #16]
 80036e8:	f8a9 3000 	strh.w	r3, [r9]
		poolContainer_nextWritePos(pack_pool);
 80036ec:	4620      	mov	r0, r4
 80036ee:	f000 fd22 	bl	8004136 <poolContainer_nextWritePos>
	while(!FIFO_IS_FULL(pack_pool)) {
 80036f2:	6923      	ldr	r3, [r4, #16]
 80036f4:	68e2      	ldr	r2, [r4, #12]
 80036f6:	4053      	eors	r3, r2
 80036f8:	68a2      	ldr	r2, [r4, #8]
 80036fa:	4013      	ands	r3, r2
 80036fc:	6822      	ldr	r2, [r4, #0]
 80036fe:	4293      	cmp	r3, r2
 8003700:	d1cd      	bne.n	800369e <_ZL11rx_callbackP11ring_bufferP14ProtocolSender+0x34>
	}
}
 8003702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08003706 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E9_M_invokeERKSt9_Any_dataOS2_OhSB_>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003706:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800370a:	4604      	mov	r4, r0
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 800370c:	680d      	ldr	r5, [r1, #0]
 800370e:	781e      	ldrb	r6, [r3, #0]
				rawp_stream_add_u8(&rawP_new, key_0);
				rawp_stream_add_u8(&rawP_new, key_1);


				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
					u8 err = (u8)key->err[key_id];
 8003710:	19ab      	adds	r3, r5, r6
 8003712:	f893 712c 	ldrb.w	r7, [r3, #300]	@ 0x12c
					u8 en = (u8)key->out_state[key_id];
 8003716:	f893 8066 	ldrb.w	r8, [r3, #102]	@ 0x66

					rawp_stream_add_u8(&rawP_new, group_id);
 800371a:	6800      	ldr	r0, [r0, #0]
 800371c:	7811      	ldrb	r1, [r2, #0]
 800371e:	301c      	adds	r0, #28
 8003720:	f001 f90b 	bl	800493a <rawp_stream_add_u8>
					rawp_stream_add_u8(&rawP_new, key_id);
 8003724:	6820      	ldr	r0, [r4, #0]
 8003726:	4631      	mov	r1, r6
 8003728:	301c      	adds	r0, #28
 800372a:	f001 f906 	bl	800493a <rawp_stream_add_u8>
					rawp_stream_add_u8(&rawP_new, en);
 800372e:	6820      	ldr	r0, [r4, #0]
 8003730:	4641      	mov	r1, r8
 8003732:	301c      	adds	r0, #28
 8003734:	f001 f901 	bl	800493a <rawp_stream_add_u8>
					rawp_stream_add_u8(&rawP_new, err);
 8003738:	6820      	ldr	r0, [r4, #0]
 800373a:	4639      	mov	r1, r7
 800373c:	301c      	adds	r0, #28
 800373e:	f001 f8fc 	bl	800493a <rawp_stream_add_u8>
					rawp_stream_add_f64(&rawP_new, key->current[key_id]);
 8003742:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8003746:	6ee8      	ldr	r0, [r5, #108]	@ 0x6c
 8003748:	f7fc fe6e 	bl	8000428 <__aeabi_f2d>
 800374c:	4602      	mov	r2, r0
 800374e:	460b      	mov	r3, r1
 8003750:	6820      	ldr	r0, [r4, #0]
 8003752:	301c      	adds	r0, #28
 8003754:	f001 f94c 	bl	80049f0 <rawp_stream_add_f64>
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 8003758:	2000      	movs	r0, #0
 800375a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08003760 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef>:
{
 8003760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003762:	b087      	sub	sp, #28
	M_Assert_BreakSaveCheck(huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 8003764:	2900      	cmp	r1, #0
 8003766:	d052      	beq.n	800380e <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xae>
 8003768:	4604      	mov	r4, r0
	M_Assert_BreakSaveCheck(UART_Init(&stm32_uart, huart, 128) != STATUS_OK,
 800376a:	f100 058c 	add.w	r5, r0, #140	@ 0x8c
 800376e:	2280      	movs	r2, #128	@ 0x80
 8003770:	4628      	mov	r0, r5
 8003772:	f001 fbec 	bl	8004f4e <UART_Init>
 8003776:	4607      	mov	r7, r0
 8003778:	2800      	cmp	r0, #0
 800377a:	d14b      	bne.n	8003814 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xb4>
	poolContainer_init(&pack_pool, 4, sizeof(pool_elem) + 128);
 800377c:	2282      	movs	r2, #130	@ 0x82
 800377e:	2104      	movs	r1, #4
 8003780:	4620      	mov	r0, r4
 8003782:	f000 fc86 	bl	8004092 <poolContainer_init>
	pool_elem* const buffer = static_cast<pool_elem*>(poolContainer_getWriteBuffer(&pack_pool));
 8003786:	4620      	mov	r0, r4
 8003788:	f000 fcce 	bl	8004128 <poolContainer_getWriteBuffer>
	RawP_dynamic_strategy_t rawP_init = {
 800378c:	2300      	movs	r3, #0
 800378e:	9300      	str	r3, [sp, #0]
 8003790:	9301      	str	r3, [sp, #4]
 8003792:	9302      	str	r3, [sp, #8]
 8003794:	9303      	str	r3, [sp, #12]
 8003796:	9305      	str	r3, [sp, #20]
 8003798:	231a      	movs	r3, #26
 800379a:	f88d 3000 	strb.w	r3, [sp]
 800379e:	2380      	movs	r3, #128	@ 0x80
 80037a0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80037a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80037a8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80037ac:	f8ad 300c 	strh.w	r3, [sp, #12]
			.txFrameBuff = buffer->data,
 80037b0:	3002      	adds	r0, #2
	};
 80037b2:	9004      	str	r0, [sp, #16]
	rawP_dynamic_init(&rawP_new, &rawP_init);
 80037b4:	f104 061c 	add.w	r6, r4, #28
 80037b8:	4669      	mov	r1, sp
 80037ba:	4630      	mov	r0, r6
 80037bc:	f000 ff8a 	bl	80046d4 <rawP_dynamic_init>
	rawP_dynamic_subscribe(&rawP_new, reinterpret_cast<RawPdynamicCallback>(rx_callback), this);
 80037c0:	4622      	mov	r2, r4
 80037c2:	4916      	ldr	r1, [pc, #88]	@ (800381c <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xbc>)
 80037c4:	4630      	mov	r0, r6
 80037c6:	f000 ffc4 	bl	8004752 <rawP_dynamic_subscribe>
	UART_SetRxCallback(&stm32_uart, reinterpret_cast<uart_rx_callback_t>(uart_rx_callback), &rawP_new);
 80037ca:	4632      	mov	r2, r6
 80037cc:	4914      	ldr	r1, [pc, #80]	@ (8003820 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xc0>)
 80037ce:	4628      	mov	r0, r5
 80037d0:	f001 fba0 	bl	8004f14 <UART_SetRxCallback>
	UART_SetTxcallback(&stm32_uart, reinterpret_cast<uart_tx_callback_t>(uart_tx_callback), &pack_pool);
 80037d4:	4622      	mov	r2, r4
 80037d6:	4913      	ldr	r1, [pc, #76]	@ (8003824 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xc4>)
 80037d8:	4628      	mov	r0, r5
 80037da:	f001 faf2 	bl	8004dc2 <UART_SetTxcallback>
	CallbackManager_init(&callb, 5, this);
 80037de:	f104 05b8 	add.w	r5, r4, #184	@ 0xb8
 80037e2:	4622      	mov	r2, r4
 80037e4:	2105      	movs	r1, #5
 80037e6:	4628      	mov	r0, r5
 80037e8:	f000 fd81 	bl	80042ee <CallbackManager_init>
	CallbackManager_subscribe(&callb, 0x01, reinterpret_cast<CallbackWorker>(pingWorker));
 80037ec:	4a0e      	ldr	r2, [pc, #56]	@ (8003828 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xc8>)
 80037ee:	2101      	movs	r1, #1
 80037f0:	4628      	mov	r0, r5
 80037f2:	f000 fd8f 	bl	8004314 <CallbackManager_subscribe>
	CallbackManager_subscribe(&callb, 0x02, reinterpret_cast<CallbackWorker>(setKey));
 80037f6:	4a0d      	ldr	r2, [pc, #52]	@ (800382c <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xcc>)
 80037f8:	2102      	movs	r1, #2
 80037fa:	4628      	mov	r0, r5
 80037fc:	f000 fd8a 	bl	8004314 <CallbackManager_subscribe>
	m_keyGroup = Key_tps1htc30Group::getInstance();
 8003800:	f000 f924 	bl	8003a4c <_ZN18Key_tps1htc30Group11getInstanceEv>
 8003804:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
}
 8003808:	4638      	mov	r0, r7
 800380a:	b007      	add	sp, #28
 800380c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	M_Assert_BreakSaveCheck(huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 800380e:	f04f 37ff 	mov.w	r7, #4294967295
 8003812:	e7f9      	b.n	8003808 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xa8>
	M_Assert_BreakSaveCheck(UART_Init(&stm32_uart, huart, 128) != STATUS_OK,
 8003814:	f04f 37ff 	mov.w	r7, #4294967295
 8003818:	e7f6      	b.n	8003808 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xa8>
 800381a:	bf00      	nop
 800381c:	0800366b 	.word	0x0800366b
 8003820:	08003659 	.word	0x08003659
 8003824:	0800364f 	.word	0x0800364f
 8003828:	08003571 	.word	0x08003571
 800382c:	080035d1 	.word	0x080035d1

08003830 <_ZN14ProtocolSender7proceedEm>:
{
 8003830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003834:	b084      	sub	sp, #16
 8003836:	4604      	mov	r4, r0
	rawP_dynamic_proceed(&rawP_new);
 8003838:	f100 051c 	add.w	r5, r0, #28
 800383c:	4628      	mov	r0, r5
 800383e:	f000 ff8c 	bl	800475a <rawP_dynamic_proceed>
 * @param   -
 * @return  Booleon value:
 *           - true: device is busy
 *           - false: device is idle
 *****************************************************************************/
static inline bool UART_IsTxBusy(stm32_DMA_uart_t* const self) { return self->isTxBusy_; }
 8003842:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
		if(!UART_IsTxBusy(&stm32_uart) && FIFO_NOT_EMPTY(&pack_pool)) {
 8003846:	b91b      	cbnz	r3, 8003850 <_ZN14ProtocolSender7proceedEm+0x20>
 8003848:	68e2      	ldr	r2, [r4, #12]
 800384a:	6923      	ldr	r3, [r4, #16]
 800384c:	429a      	cmp	r2, r3
 800384e:	d110      	bne.n	8003872 <_ZN14ProtocolSender7proceedEm+0x42>
            }
        }
    }

    inline bool isExpired() const {
        return m_counter == 0;
 8003850:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
		if(proto_timer.isExpired()) {
 8003854:	b953      	cbnz	r3, 800386c <_ZN14ProtocolSender7proceedEm+0x3c>
			if(FIFO_NOT_FULL(&pack_pool)) {
 8003856:	6923      	ldr	r3, [r4, #16]
 8003858:	68e2      	ldr	r2, [r4, #12]
 800385a:	4053      	eors	r3, r2
 800385c:	68a2      	ldr	r2, [r4, #8]
 800385e:	4013      	ands	r3, r2
 8003860:	6822      	ldr	r2, [r4, #0]
 8003862:	4293      	cmp	r3, r2
 8003864:	d110      	bne.n	8003888 <_ZN14ProtocolSender7proceedEm+0x58>
    }

    inline void start(const uint32_t delay) { m_counter = delay; }
 8003866:	2332      	movs	r3, #50	@ 0x32
 8003868:	f8c4 30c8 	str.w	r3, [r4, #200]	@ 0xc8
			proto_timer.start(50);
		}

	}

}
 800386c:	b004      	add	sp, #16
 800386e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			pool_elem* const buffer = static_cast<pool_elem*>(poolContainer_readBuffer(&pack_pool));
 8003872:	4620      	mov	r0, r4
 8003874:	f000 fc63 	bl	800413e <poolContainer_readBuffer>
			UART_SendBuffer(&stm32_uart, buffer->data, buffer->size);
 8003878:	4601      	mov	r1, r0
 800387a:	f831 2b02 	ldrh.w	r2, [r1], #2
 800387e:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8003882:	f001 fa7b 	bl	8004d7c <UART_SendBuffer>
 8003886:	e7e3      	b.n	8003850 <_ZN14ProtocolSender7proceedEm+0x20>
				ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(&pack_pool);
 8003888:	4620      	mov	r0, r4
 800388a:	f000 fc4d 	bl	8004128 <poolContainer_getWriteBuffer>
 800388e:	4606      	mov	r6, r0
 8003890:	1c81      	adds	r1, r0, #2
 8003892:	f104 006c 	add.w	r0, r4, #108	@ 0x6c
 8003896:	f000 fc82 	bl	800419e <ringbuf_install_buf>
				u8 groups = m_keyGroup->getGroups();
 800389a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
	float getCurrent(const uint8_t group_id, const uint8_t key_id);
	uint8_t getError(const uint8_t group_id, const uint8_t key_id);

	// --------------------
	inline uint8_t getGroups() {return Groups;}
	inline uint8_t getKeys(const uint8_t group_id) {return m_initPinCnt[group_id];}
 800389e:	f893 82b4 	ldrb.w	r8, [r3, #692]	@ 0x2b4
 80038a2:	f893 72b5 	ldrb.w	r7, [r3, #693]	@ 0x2b5
				reg len = 3 + (key_0 + key_1) * 8;
 80038a6:	eb08 0107 	add.w	r1, r8, r7
 80038aa:	00c9      	lsls	r1, r1, #3
				rawP_dynamic_startTransmittPacket(&rawP_new, len);
 80038ac:	3103      	adds	r1, #3
 80038ae:	4628      	mov	r0, r5
 80038b0:	f000 ff8f 	bl	80047d2 <rawP_dynamic_startTransmittPacket>
				rawp_stream_add_u8(&rawP_new, groups);
 80038b4:	2102      	movs	r1, #2
 80038b6:	4628      	mov	r0, r5
 80038b8:	f001 f83f 	bl	800493a <rawp_stream_add_u8>
				rawp_stream_add_u8(&rawP_new, key_0);
 80038bc:	4641      	mov	r1, r8
 80038be:	4628      	mov	r0, r5
 80038c0:	f001 f83b 	bl	800493a <rawp_stream_add_u8>
				rawp_stream_add_u8(&rawP_new, key_1);
 80038c4:	4639      	mov	r1, r7
 80038c6:	4628      	mov	r0, r5
 80038c8:	f001 f837 	bl	800493a <rawp_stream_add_u8>
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80038cc:	2300      	movs	r3, #0
 80038ce:	9301      	str	r3, [sp, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80038d0:	9400      	str	r4, [sp, #0]

	  if (_My_handler::_M_not_empty_function(__f))
	    {
	      _My_handler::_M_init_functor(_M_functor,
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 80038d2:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <_ZN14ProtocolSender7proceedEm+0xd4>)
 80038d4:	9303      	str	r3, [sp, #12]
	      _M_manager = &_My_handler::_M_manager;
 80038d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003908 <_ZN14ProtocolSender7proceedEm+0xd8>)
 80038d8:	9302      	str	r3, [sp, #8]
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 80038da:	4669      	mov	r1, sp
 80038dc:	f8d4 00c4 	ldr.w	r0, [r4, #196]	@ 0xc4
 80038e0:	f000 f93a 	bl	8003b58 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE>
      if (_M_manager)
 80038e4:	9b02      	ldr	r3, [sp, #8]
 80038e6:	b11b      	cbz	r3, 80038f0 <_ZN14ProtocolSender7proceedEm+0xc0>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80038e8:	2203      	movs	r2, #3
 80038ea:	4669      	mov	r1, sp
 80038ec:	4668      	mov	r0, sp
 80038ee:	4798      	blx	r3
				ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(&rawP_new);
 80038f0:	4628      	mov	r0, r5
 80038f2:	f000 ffdc 	bl	80048ae <rawP_dynamic_finishTransmittPacket>
				buffer->size = ring->base.head;
 80038f6:	6903      	ldr	r3, [r0, #16]
 80038f8:	8033      	strh	r3, [r6, #0]
				poolContainer_nextWritePos(&pack_pool);
 80038fa:	4620      	mov	r0, r4
 80038fc:	f000 fc1b 	bl	8004136 <poolContainer_nextWritePos>
 8003900:	e7b1      	b.n	8003866 <_ZN14ProtocolSender7proceedEm+0x36>
 8003902:	bf00      	nop
 8003904:	08003707 	.word	0x08003707
 8003908:	0800354b 	.word	0x0800354b

0800390c <_ZN15RelayController8init_allEv>:
	// TODO Auto-generated constructor stub
	init_all();
}

void RelayController::init_all()
{
 800390c:	b570      	push	{r4, r5, r6, lr}
 800390e:	b08c      	sub	sp, #48	@ 0x30
 8003910:	4605      	mov	r5, r0
	//init communicator --------------------------------------------------
	extern UART_HandleTypeDef huart1;
	m_comm.init(&huart1);
 8003912:	491c      	ldr	r1, [pc, #112]	@ (8003984 <_ZN15RelayController8init_allEv+0x78>)
 8003914:	3004      	adds	r0, #4
 8003916:	f7ff ff23 	bl	8003760 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef>

	// init adc ---------------------------------------------------------
	extern ADC_HandleTypeDef hadc1;

	Stm32ADC_dma::Stm32ADC_init adc_init =  {
 800391a:	4c1b      	ldr	r4, [pc, #108]	@ (8003988 <_ZN15RelayController8init_allEv+0x7c>)
 800391c:	ae0a      	add	r6, sp, #40	@ 0x28
 800391e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003922:	e886 0003 	stmia.w	r6, {r0, r1}
			.hadc = &hadc1,
			.filter = 1.0/512.0
	};

	m_relayGroup = Key_tps1htc30Group::getInstance();
 8003926:	f000 f891 	bl	8003a4c <_ZN18Key_tps1htc30Group11getInstanceEv>
 800392a:	f8c5 00d0 	str.w	r0, [r5, #208]	@ 0xd0
	inline uint8_t getKeys(const uint8_t group_id) {return m_initPinCnt[group_id];}


	//initialization functions
	static Key_tps1htc30Group* const getInstance();
	inline void initAdc(const Stm32ADC_dma::Stm32ADC_init& settings) { m_adc.init(settings); }
 800392e:	4631      	mov	r1, r6
 8003930:	f500 7022 	add.w	r0, r0, #648	@ 0x288
 8003934:	f001 f8aa 	bl	8004a8c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>
	m_relayGroup->initAdc(adc_init);


	Key_tps1htc30Group::KeyInit key =  {
 8003938:	f10d 0c14 	add.w	ip, sp, #20
 800393c:	f104 0e08 	add.w	lr, r4, #8
 8003940:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003944:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003948:	f8de 3000 	ldr.w	r3, [lr]
 800394c:	f8cc 3000 	str.w	r3, [ip]
					.GPIO_Pin = I_FAULT_Pin
			},
			.adc_ch = 0
	};

	Key_tps1htc30Group::GroupInit group = {
 8003950:	f10d 0c04 	add.w	ip, sp, #4
 8003954:	341c      	adds	r4, #28
 8003956:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800395a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
					.GPIOx = O_DIAG_EN_GPIO_Port,
					.GPIO_Pin = O_DIAG_EN_Pin
			}
	};

	m_relayGroup->initGroup(group, 0);
 800395e:	2200      	movs	r2, #0
 8003960:	4661      	mov	r1, ip
 8003962:	f8d5 00d0 	ldr.w	r0, [r5, #208]	@ 0xd0
 8003966:	f000 f968 	bl	8003c3a <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh>
	m_relayGroup->initKey(key, 0);
 800396a:	2200      	movs	r2, #0
 800396c:	a905      	add	r1, sp, #20
 800396e:	f8d5 00d0 	ldr.w	r0, [r5, #208]	@ 0xd0
 8003972:	f000 f921 	bl	8003bb8 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh>
	m_relayGroup->start();
 8003976:	f8d5 00d0 	ldr.w	r0, [r5, #208]	@ 0xd0
 800397a:	f000 f983 	bl	8003c84 <_ZN18Key_tps1htc30Group5startEv>
}
 800397e:	b00c      	add	sp, #48	@ 0x30
 8003980:	bd70      	pop	{r4, r5, r6, pc}
 8003982:	bf00      	nop
 8003984:	200002f0 	.word	0x200002f0
 8003988:	08007d38 	.word	0x08007d38

0800398c <_ZN15RelayControllerC1Ev>:
RelayController::RelayController()
 800398c:	b538      	push	{r3, r4, r5, lr}
 800398e:	4604      	mov	r4, r0
 8003990:	f001 f9d0 	bl	8004d34 <_ZN13TimingManagerC1Ev>
	struct pool_elem {
		u16 size;
		u8 data[];
	};

	ProtocolSender() = default;
 8003994:	2500      	movs	r5, #0
 8003996:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 800399a:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 800399e:	f001 f9c9 	bl	8004d34 <_ZN13TimingManagerC1Ev>
 80039a2:	f8c4 50d0 	str.w	r5, [r4, #208]	@ 0xd0
	init_all();
 80039a6:	4620      	mov	r0, r4
 80039a8:	f7ff ffb0 	bl	800390c <_ZN15RelayController8init_allEv>
}
 80039ac:	4620      	mov	r0, r4
 80039ae:	bd38      	pop	{r3, r4, r5, pc}

080039b0 <_ZN15RelayController12get_instanceEv>:

RelayController* const RelayController::get_instance()
{
	static RelayController* const inst = new RelayController();
 80039b0:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <_ZN15RelayController12get_instanceEv+0x3c>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f3bf 8f5b 	dmb	ish
 80039b8:	f013 0f01 	tst.w	r3, #1
 80039bc:	d002      	beq.n	80039c4 <_ZN15RelayController12get_instanceEv+0x14>
	return inst;
}
 80039be:	4b0c      	ldr	r3, [pc, #48]	@ (80039f0 <_ZN15RelayController12get_instanceEv+0x40>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	4770      	bx	lr
{
 80039c4:	b510      	push	{r4, lr}
	static RelayController* const inst = new RelayController();
 80039c6:	4809      	ldr	r0, [pc, #36]	@ (80039ec <_ZN15RelayController12get_instanceEv+0x3c>)
 80039c8:	f001 fb4b 	bl	8005062 <__cxa_guard_acquire>
 80039cc:	b910      	cbnz	r0, 80039d4 <_ZN15RelayController12get_instanceEv+0x24>
}
 80039ce:	4b08      	ldr	r3, [pc, #32]	@ (80039f0 <_ZN15RelayController12get_instanceEv+0x40>)
 80039d0:	6818      	ldr	r0, [r3, #0]
 80039d2:	bd10      	pop	{r4, pc}
	static RelayController* const inst = new RelayController();
 80039d4:	20e8      	movs	r0, #232	@ 0xe8
 80039d6:	f001 fb53 	bl	8005080 <_Znwj>
 80039da:	4604      	mov	r4, r0
 80039dc:	f7ff ffd6 	bl	800398c <_ZN15RelayControllerC1Ev>
 80039e0:	4b03      	ldr	r3, [pc, #12]	@ (80039f0 <_ZN15RelayController12get_instanceEv+0x40>)
 80039e2:	601c      	str	r4, [r3, #0]
 80039e4:	4801      	ldr	r0, [pc, #4]	@ (80039ec <_ZN15RelayController12get_instanceEv+0x3c>)
 80039e6:	f001 fb48 	bl	800507a <__cxa_guard_release>
 80039ea:	e7f0      	b.n	80039ce <_ZN15RelayController12get_instanceEv+0x1e>
 80039ec:	2000033c 	.word	0x2000033c
 80039f0:	20000340 	.word	0x20000340

080039f4 <_ZN15RelayController7proceedEv>:

void RelayController::proceed()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	4604      	mov	r4, r0

	while(true) {
		m_comm.proceed(HAL_GetTick());
 80039f8:	1d06      	adds	r6, r0, #4

		if(led_timer.isExpired()) {
			//UART_SendBuffer(&m_comm.stm32_uart, (uint8_t*)txBuff, sizeof(txBuff) - 1);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80039fa:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 8003a34 <_ZN15RelayController7proceedEv+0x40>
 80039fe:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 8003a02:	e00d      	b.n	8003a20 <_ZN15RelayController7proceedEv+0x2c>
 8003a04:	4639      	mov	r1, r7
 8003a06:	4640      	mov	r0, r8
 8003a08:	f7fe fce0 	bl	80023cc <HAL_GPIO_TogglePin>

    inline bool isExpired() const {
        return m_counter == 0;
    }

    inline void start(const uint32_t delay) { m_counter = delay; }
 8003a0c:	2364      	movs	r3, #100	@ 0x64
 8003a0e:	6023      	str	r3, [r4, #0]
//		if(adc->proceed(0)) {
//			for(int i = 0; i != 10; ++i) {
//				currents[i] = adc->getAdc(i);
//			}
//		}
		m_relayGroup->proceed(HAL_GetTick());
 8003a10:	f8d4 50d0 	ldr.w	r5, [r4, #208]	@ 0xd0
 8003a14:	f7fd ff12 	bl	800183c <HAL_GetTick>
 8003a18:	4601      	mov	r1, r0
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 f99c 	bl	8003d58 <_ZN18Key_tps1htc30Group7proceedEm>
		m_comm.proceed(HAL_GetTick());
 8003a20:	f7fd ff0c 	bl	800183c <HAL_GetTick>
 8003a24:	4601      	mov	r1, r0
 8003a26:	4630      	mov	r0, r6
 8003a28:	f7ff ff02 	bl	8003830 <_ZN14ProtocolSender7proceedEm>
        return m_counter == 0;
 8003a2c:	6823      	ldr	r3, [r4, #0]
		if(led_timer.isExpired()) {
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d0e8      	beq.n	8003a04 <_ZN15RelayController7proceedEv+0x10>
 8003a32:	e7ed      	b.n	8003a10 <_ZN15RelayController7proceedEv+0x1c>
 8003a34:	40011000 	.word	0x40011000

08003a38 <app_main>:
#include <RelayController.h>

RelayController* global;

void app_main(void)
{
 8003a38:	b508      	push	{r3, lr}
	RelayController* const inst = global = RelayController::get_instance();
 8003a3a:	f7ff ffb9 	bl	80039b0 <_ZN15RelayController12get_instanceEv>
 8003a3e:	4b02      	ldr	r3, [pc, #8]	@ (8003a48 <app_main+0x10>)
 8003a40:	6018      	str	r0, [r3, #0]
	inst->proceed();
 8003a42:	f7ff ffd7 	bl	80039f4 <_ZN15RelayController7proceedEv>
}
 8003a46:	bd08      	pop	{r3, pc}
 8003a48:	20000344 	.word	0x20000344

08003a4c <_ZN18Key_tps1htc30Group11getInstanceEv>:

#include "Keytps1htc30Group.h"
#include "tools/irq/stm32_irq_block.h"

Key_tps1htc30Group* const Key_tps1htc30Group::getInstance()
{
 8003a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static Key_tps1htc30Group* const inst = new Key_tps1htc30Group;
 8003a50:	4b3e      	ldr	r3, [pc, #248]	@ (8003b4c <_ZN18Key_tps1htc30Group11getInstanceEv+0x100>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f3bf 8f5b 	dmb	ish
 8003a58:	f013 0f01 	tst.w	r3, #1
 8003a5c:	d003      	beq.n	8003a66 <_ZN18Key_tps1htc30Group11getInstanceEv+0x1a>
	return inst;
}
 8003a5e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b50 <_ZN18Key_tps1htc30Group11getInstanceEv+0x104>)
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static Key_tps1htc30Group* const inst = new Key_tps1htc30Group;
 8003a66:	4839      	ldr	r0, [pc, #228]	@ (8003b4c <_ZN18Key_tps1htc30Group11getInstanceEv+0x100>)
 8003a68:	f001 fafb 	bl	8005062 <__cxa_guard_acquire>
 8003a6c:	2800      	cmp	r0, #0
 8003a6e:	d0f6      	beq.n	8003a5e <_ZN18Key_tps1htc30Group11getInstanceEv+0x12>
 8003a70:	f44f 7033 	mov.w	r0, #716	@ 0x2cc
 8003a74:	f001 fb04 	bl	8005080 <_Znwj>
 8003a78:	4605      	mov	r5, r0
	Key_tps1htc30Group() = default;
 8003a7a:	4604      	mov	r4, r0
 8003a7c:	f500 7922 	add.w	r9, r0, #648	@ 0x288
		const float current = ((voltage/*- m_v_rms*/) / Rsns) * Ksns;
		return (current > 0.0) ? current : 0.0;
	}

public:
	struct KeyGroup {
 8003a80:	2730      	movs	r7, #48	@ 0x30
 8003a82:	2600      	movs	r6, #0
 8003a84:	f04f 0890 	mov.w	r8, #144	@ 0x90
 8003a88:	463a      	mov	r2, r7
 8003a8a:	4631      	mov	r1, r6
 8003a8c:	4620      	mov	r0, r4
 8003a8e:	f002 fd99 	bl	80065c4 <memset>
 8003a92:	463a      	mov	r2, r7
 8003a94:	4631      	mov	r1, r6
 8003a96:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8003a9a:	f002 fd93 	bl	80065c4 <memset>
 8003a9e:	4642      	mov	r2, r8
 8003aa0:	4631      	mov	r1, r6
 8003aa2:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
 8003aa6:	f002 fd8d 	bl	80065c4 <memset>
 8003aaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aae:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 8003ab2:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8003ab6:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8003aba:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 8003abe:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 8003ac2:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
 8003ac6:	f8c4 612c 	str.w	r6, [r4, #300]	@ 0x12c
 8003aca:	f8a4 6130 	strh.w	r6, [r4, #304]	@ 0x130
	GPIO_TypeDef* GPIOx = nullptr;
	uint16_t GPIO_Pin = 0;
};

// IO -----------------------------------------------------------
struct Stm32Pin_O
 8003ace:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 8003ad2:	f8a4 6138 	strh.w	r6, [r4, #312]	@ 0x138
 8003ad6:	f8c4 613c 	str.w	r6, [r4, #316]	@ 0x13c
 8003ada:	f8a4 6140 	strh.w	r6, [r4, #320]	@ 0x140
	Key_tps1htc30Group() = default;
 8003ade:	f504 74a2 	add.w	r4, r4, #324	@ 0x144
 8003ae2:	45a1      	cmp	r9, r4
 8003ae4:	d1d0      	bne.n	8003a88 <_ZN18Key_tps1htc30Group11getInstanceEv+0x3c>
		ADC_HandleTypeDef* hadc;
		float filter;
	};

public:
	Stm32ADC_dma() = default;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	f8c5 3288 	str.w	r3, [r5, #648]	@ 0x288
 8003aec:	f885 328c 	strb.w	r3, [r5, #652]	@ 0x28c
 8003af0:	f8c5 3290 	str.w	r3, [r5, #656]	@ 0x290
 8003af4:	f885 3294 	strb.w	r3, [r5, #660]	@ 0x294
#include <cstdint>

class FP_MovingAverageBase
{
public:
	FP_MovingAverageBase() = default;
 8003af8:	f885 329c 	strb.w	r3, [r5, #668]	@ 0x29c
 8003afc:	f885 329d 	strb.w	r3, [r5, #669]	@ 0x29d
 8003b00:	f885 329e 	strb.w	r3, [r5, #670]	@ 0x29e
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c5 22a0 	str.w	r2, [r5, #672]	@ 0x2a0
 8003b0a:	f8c5 32a4 	str.w	r3, [r5, #676]	@ 0x2a4
#include "FPMovingAverageBase.h"

class FP_MovingAverageArray: public FP_MovingAverageBase
{
public:
	FP_MovingAverageArray() = default;
 8003b0e:	4a11      	ldr	r2, [pc, #68]	@ (8003b54 <_ZN18Key_tps1htc30Group11getInstanceEv+0x108>)
 8003b10:	f8c5 2298 	str.w	r2, [r5, #664]	@ 0x298
 8003b14:	f8c5 32a8 	str.w	r3, [r5, #680]	@ 0x2a8
 8003b18:	f8c5 32ac 	str.w	r3, [r5, #684]	@ 0x2ac
 8003b1c:	f885 32b0 	strb.w	r3, [r5, #688]	@ 0x2b0
 8003b20:	f8a5 32b4 	strh.w	r3, [r5, #692]	@ 0x2b4
 8003b24:	f885 32b6 	strb.w	r3, [r5, #694]	@ 0x2b6
 8003b28:	f885 32b7 	strb.w	r3, [r5, #695]	@ 0x2b7
 8003b2c:	f885 32b8 	strb.w	r3, [r5, #696]	@ 0x2b8
 8003b30:	f8c5 32bc 	str.w	r3, [r5, #700]	@ 0x2bc
 8003b34:	f8c5 32c0 	str.w	r3, [r5, #704]	@ 0x2c0
 8003b38:	f8c5 32c4 	str.w	r3, [r5, #708]	@ 0x2c4
 8003b3c:	f885 32c8 	strb.w	r3, [r5, #712]	@ 0x2c8
 8003b40:	4b03      	ldr	r3, [pc, #12]	@ (8003b50 <_ZN18Key_tps1htc30Group11getInstanceEv+0x104>)
 8003b42:	601d      	str	r5, [r3, #0]
 8003b44:	4801      	ldr	r0, [pc, #4]	@ (8003b4c <_ZN18Key_tps1htc30Group11getInstanceEv+0x100>)
 8003b46:	f001 fa98 	bl	800507a <__cxa_guard_release>
 8003b4a:	e788      	b.n	8003a5e <_ZN18Key_tps1htc30Group11getInstanceEv+0x12>
 8003b4c:	20000348 	.word	0x20000348
 8003b50:	2000034c 	.word	0x2000034c
 8003b54:	08008ce0 	.word	0x08008ce0

08003b58 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE>:

void Key_tps1htc30Group::iterateAll(std::function<bool(KeyGroup*, uint8_t, uint8_t)> foo)
{
	if(!foo) {
 8003b58:	688b      	ldr	r3, [r1, #8]
 8003b5a:	b363      	cbz	r3, 8003bb6 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x5e>
{
 8003b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003b60:	b082      	sub	sp, #8
 8003b62:	4681      	mov	r9, r0
 8003b64:	460d      	mov	r5, r1
 8003b66:	f200 2ab3 	addw	sl, r0, #691	@ 0x2b3
		return;
	}
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8003b6a:	2600      	movs	r6, #0
			const uint8_t cnt = m_initPinCnt[group_id];
 8003b6c:	f81a 7f01 	ldrb.w	r7, [sl, #1]!

			for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003b70:	b1b7      	cbz	r7, 8003ba0 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x48>

				if(foo(&m_keys[group_id], group_id, key_id)) {
 8003b72:	46c8      	mov	r8, r9
 8003b74:	2400      	movs	r4, #0
 8003b76:	f8cd 8004 	str.w	r8, [sp, #4]
 8003b7a:	f88d 6002 	strb.w	r6, [sp, #2]
 8003b7e:	f88d 4003 	strb.w	r4, [sp, #3]
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
 8003b82:	68ab      	ldr	r3, [r5, #8]
 8003b84:	b1ab      	cbz	r3, 8003bb2 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x5a>
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8003b86:	f10d 0303 	add.w	r3, sp, #3
 8003b8a:	f10d 0202 	add.w	r2, sp, #2
 8003b8e:	a901      	add	r1, sp, #4
 8003b90:	4628      	mov	r0, r5
 8003b92:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 8003b96:	47e0      	blx	ip
 8003b98:	b940      	cbnz	r0, 8003bac <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x54>
			for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003b9a:	3401      	adds	r4, #1
 8003b9c:	42a7      	cmp	r7, r4
 8003b9e:	d1ea      	bne.n	8003b76 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x1e>
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8003ba0:	3601      	adds	r6, #1
 8003ba2:	b2f6      	uxtb	r6, r6
 8003ba4:	f509 79a2 	add.w	r9, r9, #324	@ 0x144
 8003ba8:	2e02      	cmp	r6, #2
 8003baa:	d1df      	bne.n	8003b6c <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x14>
					return;
				}
			}
		}
}
 8003bac:	b002      	add	sp, #8
 8003bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	  __throw_bad_function_call();
 8003bb2:	f001 fa7b 	bl	80050ac <_ZSt25__throw_bad_function_callv>
 8003bb6:	4770      	bx	lr

08003bb8 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh>:

bool Key_tps1htc30Group::initKey(const KeyInit &setting, const uint8_t group_id)
{
	uint8_t cnt = m_initPinCnt[group_id];

	if(group_id < Groups && cnt != N_ch_div && setting.adc_ch < m_adc.getChannels() ) {
 8003bb8:	2a01      	cmp	r2, #1
 8003bba:	d901      	bls.n	8003bc0 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x8>
		m_initPinCnt[group_id] = cnt + 1;

		return true;
	}

	return false;
 8003bbc:	2000      	movs	r0, #0
}
 8003bbe:	4770      	bx	lr
{
 8003bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bc2:	4605      	mov	r5, r0
 8003bc4:	4614      	mov	r4, r2
	uint8_t cnt = m_initPinCnt[group_id];
 8003bc6:	1883      	adds	r3, r0, r2
 8003bc8:	f893 62b4 	ldrb.w	r6, [r3, #692]	@ 0x2b4
	if(group_id < Groups && cnt != N_ch_div && setting.adc_ch < m_adc.getChannels() ) {
 8003bcc:	2e06      	cmp	r6, #6
 8003bce:	d032      	beq.n	8003c36 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x7e>
 8003bd0:	7c0a      	ldrb	r2, [r1, #16]
 8003bd2:	f890 328c 	ldrb.w	r3, [r0, #652]	@ 0x28c
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d301      	bcc.n	8003bde <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x26>
	return false;
 8003bda:	2000      	movs	r0, #0
}
 8003bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m_keys[group_id].o_en[cnt] = setting.o_en;
 8003bde:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8003be2:	fb03 f004 	mul.w	r0, r3, r4
 8003be6:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
 8003bea:	183a      	adds	r2, r7, r0
 8003bec:	f8d1 c000 	ldr.w	ip, [r1]
 8003bf0:	f847 c000 	str.w	ip, [r7, r0]
 8003bf4:	8888      	ldrh	r0, [r1, #4]
 8003bf6:	8090      	strh	r0, [r2, #4]
		m_keys[group_id].i_fault[cnt] = setting.i_fault;
 8003bf8:	6888      	ldr	r0, [r1, #8]
 8003bfa:	6310      	str	r0, [r2, #48]	@ 0x30
 8003bfc:	8988      	ldrh	r0, [r1, #12]
 8003bfe:	8690      	strh	r0, [r2, #52]	@ 0x34
		m_keys[group_id].adc_ch[cnt] = setting.adc_ch;
 8003c00:	7c0a      	ldrb	r2, [r1, #16]
 8003c02:	fb04 f303 	mul.w	r3, r4, r3
 8003c06:	18ef      	adds	r7, r5, r3
 8003c08:	4437      	add	r7, r6
 8003c0a:	f887 2060 	strb.w	r2, [r7, #96]	@ 0x60
{

	inline void set_output(bool state) {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (state) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8003c0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8003c12:	18e9      	adds	r1, r5, r3
 8003c14:	2200      	movs	r2, #0
 8003c16:	8889      	ldrh	r1, [r1, #4]
 8003c18:	58e8      	ldr	r0, [r5, r3]
 8003c1a:	f7fe fbd1 	bl	80023c0 <HAL_GPIO_WritePin>
		m_keys[group_id].out_state[cnt] = false;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		m_keys[group_id].err[cnt] = error::PowerOff;
 8003c24:	2301      	movs	r3, #1
 8003c26:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
		m_initPinCnt[group_id] = cnt + 1;
 8003c2a:	1928      	adds	r0, r5, r4
 8003c2c:	441e      	add	r6, r3
 8003c2e:	f880 62b4 	strb.w	r6, [r0, #692]	@ 0x2b4
		return true;
 8003c32:	4618      	mov	r0, r3
 8003c34:	e7d2      	b.n	8003bdc <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x24>
	return false;
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7d0      	b.n	8003bdc <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x24>

08003c3a <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh>:

bool Key_tps1htc30Group::initGroup(const GroupInit &setting, const uint8_t group_id)
{
	if(group_id < Groups) {
 8003c3a:	2a01      	cmp	r2, #1
 8003c3c:	d901      	bls.n	8003c42 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh+0x8>
		m_keys[group_id].o_latch.set_output(false);

		return true;
	}

	return false;
 8003c3e:	2000      	movs	r0, #0
}
 8003c40:	4770      	bx	lr
{
 8003c42:	b510      	push	{r4, lr}
		m_keys[group_id].o_diag_en = setting.o_diag_en;
 8003c44:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8003c48:	fb03 0402 	mla	r4, r3, r2, r0
 8003c4c:	688b      	ldr	r3, [r1, #8]
 8003c4e:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 8003c52:	898b      	ldrh	r3, [r1, #12]
 8003c54:	f8a4 3140 	strh.w	r3, [r4, #320]	@ 0x140
		m_keys[group_id].o_latch = setting.o_latch;
 8003c58:	680b      	ldr	r3, [r1, #0]
 8003c5a:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
 8003c5e:	888b      	ldrh	r3, [r1, #4]
 8003c60:	f8a4 3138 	strh.w	r3, [r4, #312]	@ 0x138
 8003c64:	2200      	movs	r2, #0
 8003c66:	f8b4 1140 	ldrh.w	r1, [r4, #320]	@ 0x140
 8003c6a:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 8003c6e:	f7fe fba7 	bl	80023c0 <HAL_GPIO_WritePin>
 8003c72:	2200      	movs	r2, #0
 8003c74:	f8b4 1138 	ldrh.w	r1, [r4, #312]	@ 0x138
 8003c78:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
 8003c7c:	f7fe fba0 	bl	80023c0 <HAL_GPIO_WritePin>
		return true;
 8003c80:	2001      	movs	r0, #1
}
 8003c82:	bd10      	pop	{r4, pc}

08003c84 <_ZN18Key_tps1htc30Group5startEv>:

bool Key_tps1htc30Group::start()
{
 8003c84:	b508      	push	{r3, lr}
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
		const uint8_t cnt = m_initPinCnt[group_id];
 8003c86:	f890 22b4 	ldrb.w	r2, [r0, #692]	@ 0x2b4

		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003c8a:	b1ba      	cbz	r2, 8003cbc <_ZN18Key_tps1htc30Group5startEv+0x38>
			m_keys[group_id].m_range[cnt].init(/*min*/0.05, /*max*/4.0, K_delay);
 8003c8c:	2300      	movs	r3, #0
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003c8e:	3301      	adds	r3, #1
 8003c90:	429a      	cmp	r2, r3
 8003c92:	d1fc      	bne.n	8003c8e <_ZN18Key_tps1htc30Group5startEv+0xa>
 8003c94:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003c98:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003c9c:	4917      	ldr	r1, [pc, #92]	@ (8003cfc <_ZN18Key_tps1htc30Group5startEv+0x78>)
 8003c9e:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
 8003ca2:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003ca6:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 8003caa:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003cae:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
 8003cb2:	2100      	movs	r1, #0
 8003cb4:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
 8003cb8:	f883 10a8 	strb.w	r1, [r3, #168]	@ 0xa8
		const uint8_t cnt = m_initPinCnt[group_id];
 8003cbc:	f890 22b5 	ldrb.w	r2, [r0, #693]	@ 0x2b5
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003cc0:	b1ba      	cbz	r2, 8003cf2 <_ZN18Key_tps1htc30Group5startEv+0x6e>
			m_keys[group_id].m_range[cnt].init(/*min*/0.05, /*max*/4.0, K_delay);
 8003cc2:	2300      	movs	r3, #0
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003cc4:	3301      	adds	r3, #1
 8003cc6:	429a      	cmp	r2, r3
 8003cc8:	d1fc      	bne.n	8003cc4 <_ZN18Key_tps1htc30Group5startEv+0x40>
 8003cca:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003cce:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003cd2:	490a      	ldr	r1, [pc, #40]	@ (8003cfc <_ZN18Key_tps1htc30Group5startEv+0x78>)
 8003cd4:	f8c3 11f0 	str.w	r1, [r3, #496]	@ 0x1f0
 8003cd8:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003cdc:	f8c3 11f4 	str.w	r1, [r3, #500]	@ 0x1f4
 8003ce0:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003ce4:	f8c3 11e4 	str.w	r1, [r3, #484]	@ 0x1e4
 8003ce8:	2100      	movs	r1, #0
 8003cea:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
 8003cee:	f883 11ec 	strb.w	r1, [r3, #492]	@ 0x1ec
		}
	}

	return m_adc.start();
 8003cf2:	f500 7022 	add.w	r0, r0, #648	@ 0x288
 8003cf6:	f000 febd 	bl	8004a74 <_ZN12Stm32ADC_dma5startEv>
}
 8003cfa:	bd08      	pop	{r3, pc}
 8003cfc:	3d4ccccd 	.word	0x3d4ccccd

08003d00 <_ZN18Key_tps1htc30Group7set_outEbhh>:
		const uint8_t key_id)
{

	const uint8_t cnt = m_initPinCnt[group_id];

	if(group_id < Groups && key_id < cnt) {
 8003d00:	2a01      	cmp	r2, #1
 8003d02:	d900      	bls.n	8003d06 <_ZN18Key_tps1htc30Group7set_outEbhh+0x6>
 8003d04:	4770      	bx	lr
{
 8003d06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003d0a:	4607      	mov	r7, r0
 8003d0c:	460e      	mov	r6, r1
 8003d0e:	461d      	mov	r5, r3
	const uint8_t cnt = m_initPinCnt[group_id];
 8003d10:	1883      	adds	r3, r0, r2
	if(group_id < Groups && key_id < cnt) {
 8003d12:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8003d16:	42ab      	cmp	r3, r5
 8003d18:	d801      	bhi.n	8003d1e <_ZN18Key_tps1htc30Group7set_outEbhh+0x1e>
		m_keys[group_id].o_en[key_id].set_output(en);
		m_keys[group_id].o_diag_en.set_output(en);
		m_keys[group_id].err[key_id] = en ? error::Work : error::PowerOff;
	}
}
 8003d1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d1e:	f44f 78a2 	mov.w	r8, #324	@ 0x144
 8003d22:	fb08 f802 	mul.w	r8, r8, r2
 8003d26:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
 8003d2a:	18c1      	adds	r1, r0, r3
 8003d2c:	4632      	mov	r2, r6
 8003d2e:	8889      	ldrh	r1, [r1, #4]
 8003d30:	58c0      	ldr	r0, [r0, r3]
 8003d32:	f7fe fb45 	bl	80023c0 <HAL_GPIO_WritePin>
 8003d36:	44b8      	add	r8, r7
 8003d38:	4632      	mov	r2, r6
 8003d3a:	f8b8 1140 	ldrh.w	r1, [r8, #320]	@ 0x140
 8003d3e:	f8d8 013c 	ldr.w	r0, [r8, #316]	@ 0x13c
 8003d42:	f7fe fb3d 	bl	80023c0 <HAL_GPIO_WritePin>
		m_keys[group_id].err[key_id] = en ? error::Work : error::PowerOff;
 8003d46:	2e00      	cmp	r6, #0
 8003d48:	bf0c      	ite	eq
 8003d4a:	2101      	moveq	r1, #1
 8003d4c:	2104      	movne	r1, #4
 8003d4e:	4642      	mov	r2, r8
 8003d50:	1953      	adds	r3, r2, r5
 8003d52:	f883 112c 	strb.w	r1, [r3, #300]	@ 0x12c
}
 8003d56:	e7e0      	b.n	8003d1a <_ZN18Key_tps1htc30Group7set_outEbhh+0x1a>

08003d58 <_ZN18Key_tps1htc30Group7proceedEm>:
{
 8003d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5c:	b087      	sub	sp, #28
 8003d5e:	4683      	mov	fp, r0
 8003d60:	9101      	str	r1, [sp, #4]
	if(!m_adc.proceed(current_time)) {
 8003d62:	f500 7022 	add.w	r0, r0, #648	@ 0x288
 8003d66:	f000 fead 	bl	8004ac4 <_ZN12Stm32ADC_dma7proceedEm>
 8003d6a:	b370      	cbz	r0, 8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
	if(m_needCalibration) {
 8003d6c:	f89b 32b6 	ldrb.w	r3, [fp, #694]	@ 0x2b6
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d07a      	beq.n	8003e6a <_ZN18Key_tps1htc30Group7proceedEm+0x112>
		if(m_calib_counter == 0) {
 8003d74:	f8db 32bc 	ldr.w	r3, [fp, #700]	@ 0x2bc
 8003d78:	b353      	cbz	r3, 8003dd0 <_ZN18Key_tps1htc30Group7proceedEm+0x78>
		if((current_time - last_time) < K_delay) {
 8003d7a:	f8db 32c4 	ldr.w	r3, [fp, #708]	@ 0x2c4
 8003d7e:	9a01      	ldr	r2, [sp, #4]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003d86:	d320      	bcc.n	8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
		const uint8_t 	ch 	=  	m_keys[m_group_it].adc_ch[m_key_it];
 8003d88:	f89b 52b7 	ldrb.w	r5, [fp, #695]	@ 0x2b7
 8003d8c:	f89b 42b8 	ldrb.w	r4, [fp, #696]	@ 0x2b8
 8003d90:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8003d94:	fb03 b305 	mla	r3, r3, r5, fp
 8003d98:	4423      	add	r3, r4
 8003d9a:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
	void allocArrays(const uint8_t n);
	void proceed(uint16_t* const values);

	inline uint32_t getOut(const uint8_t n) const
	{
		if(n < m_n) {
 8003d9e:	f89b 22b0 	ldrb.w	r2, [fp, #688]	@ 0x2b0
 8003da2:	429a      	cmp	r2, r3
			return m_y[n];
 8003da4:	bf86      	itte	hi
 8003da6:	f8db 22ac 	ldrhi.w	r2, [fp, #684]	@ 0x2ac
 8003daa:	f852 0023 	ldrhi.w	r0, [r2, r3, lsl #2]
		}
		return 0;
 8003dae:	2000      	movls	r0, #0
		m_summ += val;
 8003db0:	f8db 32c0 	ldr.w	r3, [fp, #704]	@ 0x2c0
 8003db4:	4418      	add	r0, r3
 8003db6:	f8cb 02c0 	str.w	r0, [fp, #704]	@ 0x2c0
		++m_calib_counter;
 8003dba:	f8db 32bc 	ldr.w	r3, [fp, #700]	@ 0x2bc
 8003dbe:	3301      	adds	r3, #1
 8003dc0:	f8cb 32bc 	str.w	r3, [fp, #700]	@ 0x2bc
		if(m_calib_counter == K_Points) {
 8003dc4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003dc8:	d01e      	beq.n	8003e08 <_ZN18Key_tps1htc30Group7proceedEm+0xb0>
}
 8003dca:	b007      	add	sp, #28
 8003dcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m_summ = 0;
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	f8cb 12c0 	str.w	r1, [fp, #704]	@ 0x2c0
			m_keys[m_group_it].adc_offset[m_key_it] = 0;
 8003dd6:	f89b 22b7 	ldrb.w	r2, [fp, #695]	@ 0x2b7
 8003dda:	f89b 32b8 	ldrb.w	r3, [fp, #696]	@ 0x2b8
 8003dde:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8003de2:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003de6:	4418      	add	r0, r3
 8003de8:	3020      	adds	r0, #32
 8003dea:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 8003dee:	6041      	str	r1, [r0, #4]
			m_keys[m_group_it].err[m_key_it] = error::Calibration;
 8003df0:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8003df4:	fb00 b002 	mla	r0, r0, r2, fp
 8003df8:	4418      	add	r0, r3
 8003dfa:	2402      	movs	r4, #2
 8003dfc:	f880 412c 	strb.w	r4, [r0, #300]	@ 0x12c
			set_out(false, m_group_it, m_key_it);
 8003e00:	4658      	mov	r0, fp
 8003e02:	f7ff ff7d 	bl	8003d00 <_ZN18Key_tps1htc30Group7set_outEbhh>
 8003e06:	e7b8      	b.n	8003d7a <_ZN18Key_tps1htc30Group7proceedEm+0x22>
			m_keys[m_group_it].adc_offset[m_key_it] = m_summ / static_cast<float>(K_Points);
 8003e08:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003e0c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003e10:	191e      	adds	r6, r3, r4
 8003e12:	3620      	adds	r6, #32
 8003e14:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8003e18:	f7fc feec 	bl	8000bf4 <__aeabi_ui2f>
 8003e1c:	498b      	ldr	r1, [pc, #556]	@ (800404c <_ZN18Key_tps1htc30Group7proceedEm+0x2f4>)
 8003e1e:	f7fc fff5 	bl	8000e0c <__aeabi_fdiv>
 8003e22:	f7fd f941 	bl	80010a8 <__aeabi_f2uiz>
 8003e26:	6070      	str	r0, [r6, #4]
			m_keys[m_group_it].err[m_key_it] = error::PowerOff;
 8003e28:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8003e2c:	fb03 b305 	mla	r3, r3, r5, fp
 8003e30:	4423      	add	r3, r4
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
			m_calib_counter = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	f8cb 32bc 	str.w	r3, [fp, #700]	@ 0x2bc
			++m_key_it;
 8003e3e:	18a3      	adds	r3, r4, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	f88b 32b8 	strb.w	r3, [fp, #696]	@ 0x2b8
			if(m_key_it == m_initPinCnt[m_group_it]) {
 8003e46:	eb0b 0205 	add.w	r2, fp, r5
 8003e4a:	f892 22b4 	ldrb.w	r2, [r2, #692]	@ 0x2b4
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d1bb      	bne.n	8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
				++m_group_it;
 8003e52:	1c6b      	adds	r3, r5, #1
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	f88b 32b7 	strb.w	r3, [fp, #695]	@ 0x2b7
				m_key_it = 0;
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f88b 22b8 	strb.w	r2, [fp, #696]	@ 0x2b8
				if(m_group_it == Groups) {
 8003e60:	2b02      	cmp	r3, #2
 8003e62:	d1b2      	bne.n	8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
					m_needCalibration = false;
 8003e64:	f88b 22b6 	strb.w	r2, [fp, #694]	@ 0x2b6
 8003e68:	e7af      	b.n	8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
	} else if(m_openLoadChk) {
 8003e6a:	f89b 32c8 	ldrb.w	r3, [fp, #712]	@ 0x2c8
 8003e6e:	b95b      	cbnz	r3, 8003e88 <_ZN18Key_tps1htc30Group7proceedEm+0x130>
	last_time = current_time;
 8003e70:	9b01      	ldr	r3, [sp, #4]
 8003e72:	f8cb 32c4 	str.w	r3, [fp, #708]	@ 0x2c4
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8003e76:	f20b 28b3 	addw	r8, fp, #691	@ 0x2b3
 8003e7a:	f20b 2ab5 	addw	sl, fp, #693	@ 0x2b5
				err = error::Fault;
 8003e7e:	465d      	mov	r5, fp
 8003e80:	f8cd a014 	str.w	sl, [sp, #20]
 8003e84:	46c2      	mov	sl, r8
 8003e86:	e0cf      	b.n	8004028 <_ZN18Key_tps1htc30Group7proceedEm+0x2d0>
		set_out(false, m_group_it, m_key_it);
 8003e88:	f89b 32b8 	ldrb.w	r3, [fp, #696]	@ 0x2b8
 8003e8c:	f89b 22b7 	ldrb.w	r2, [fp, #695]	@ 0x2b7
 8003e90:	2100      	movs	r1, #0
 8003e92:	4658      	mov	r0, fp
 8003e94:	f7ff ff34 	bl	8003d00 <_ZN18Key_tps1htc30Group7set_outEbhh>
		m_keys[m_group_it].err[m_key_it] = error::OpenLoadCHK;
 8003e98:	f89b 32b7 	ldrb.w	r3, [fp, #695]	@ 0x2b7
 8003e9c:	f89b 22b8 	ldrb.w	r2, [fp, #696]	@ 0x2b8
 8003ea0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8003ea4:	fb01 b303 	mla	r3, r1, r3, fp
 8003ea8:	441a      	add	r2, r3
 8003eaa:	2103      	movs	r1, #3
 8003eac:	f882 112c 	strb.w	r1, [r2, #300]	@ 0x12c
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8003eb6:	f8d3 013c 	ldr.w	r0, [r3, #316]	@ 0x13c
 8003eba:	f7fe fa81 	bl	80023c0 <HAL_GPIO_WritePin>
		if((current_time - last_time) < K_delay) {
 8003ebe:	f8db 32c4 	ldr.w	r3, [fp, #708]	@ 0x2c4
 8003ec2:	9a01      	ldr	r2, [sp, #4]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003eca:	f4ff af7e 	bcc.w	8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
		const uint8_t 	ch 	=  	m_keys[m_group_it].adc_ch[m_key_it];
 8003ece:	f89b 32b7 	ldrb.w	r3, [fp, #695]	@ 0x2b7
 8003ed2:	f89b 12b8 	ldrb.w	r1, [fp, #696]	@ 0x2b8
 8003ed6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8003eda:	fb02 b203 	mla	r2, r2, r3, fp
 8003ede:	440a      	add	r2, r1
 8003ee0:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
		if(n < m_n) {
 8003ee4:	f89b 02b0 	ldrb.w	r0, [fp, #688]	@ 0x2b0
 8003ee8:	4290      	cmp	r0, r2
			return m_y[n];
 8003eea:	bf86      	itte	hi
 8003eec:	f8db 02ac 	ldrhi.w	r0, [fp, #684]	@ 0x2ac
 8003ef0:	f850 4022 	ldrhi.w	r4, [r0, r2, lsl #2]
		return 0;
 8003ef4:	2400      	movls	r4, #0
		return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET;
 8003ef6:	3106      	adds	r1, #6
 8003ef8:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8003efc:	fb02 f303 	mul.w	r3, r2, r3
 8003f00:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003f04:	eb0b 0203 	add.w	r2, fp, r3
 8003f08:	8891      	ldrh	r1, [r2, #4]
 8003f0a:	f85b 0003 	ldr.w	r0, [fp, r3]
 8003f0e:	f7fe fa51 	bl	80023b4 <HAL_GPIO_ReadPin>
		m_keys[m_group_it].err[m_key_it] = ( (!m_keys[m_group_it].i_fault[m_key_it].get_input()) || (val > 4000) ) ? error::OpenLoad : error::OK;
 8003f12:	2801      	cmp	r0, #1
 8003f14:	d00f      	beq.n	8003f36 <_ZN18Key_tps1htc30Group7proceedEm+0x1de>
 8003f16:	2206      	movs	r2, #6
 8003f18:	f89b 32b7 	ldrb.w	r3, [fp, #695]	@ 0x2b7
 8003f1c:	f89b 12b8 	ldrb.w	r1, [fp, #696]	@ 0x2b8
 8003f20:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8003f24:	fb00 b303 	mla	r3, r0, r3, fp
 8003f28:	440b      	add	r3, r1
 8003f2a:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
		m_openLoadChk = false;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f88b 32c8 	strb.w	r3, [fp, #712]	@ 0x2c8
 8003f34:	e79c      	b.n	8003e70 <_ZN18Key_tps1htc30Group7proceedEm+0x118>
		m_keys[m_group_it].err[m_key_it] = ( (!m_keys[m_group_it].i_fault[m_key_it].get_input()) || (val > 4000) ) ? error::OpenLoad : error::OK;
 8003f36:	f5b4 6f7a 	cmp.w	r4, #4000	@ 0xfa0
 8003f3a:	bf94      	ite	ls
 8003f3c:	2207      	movls	r2, #7
 8003f3e:	2206      	movhi	r2, #6
 8003f40:	e7ea      	b.n	8003f18 <_ZN18Key_tps1htc30Group7proceedEm+0x1c0>

template<class T>
typename InRangeDetector<T>::error InRangeDetector<T>::proceed(const uint32_t current_time, const T value)
{
	if(m_last_time == current_time) {
		return m_lastError;
 8003f42:	f899 50a8 	ldrb.w	r5, [r9, #168]	@ 0xa8
 8003f46:	e00e      	b.n	8003f66 <_ZN18Key_tps1htc30Group7proceedEm+0x20e>
	}

	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003f48:	2101      	movs	r1, #1

	if(reg_error != error::None) {
		const uint32_t next_counter = m_time_counter + 1;
 8003f4a:	f8da 309c 	ldr.w	r3, [sl, #156]	@ 0x9c
 8003f4e:	3301      	adds	r3, #1

		if(next_counter < m_dt) {
 8003f50:	f8da 20a0 	ldr.w	r2, [sl, #160]	@ 0xa0
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d24a      	bcs.n	8003fee <_ZN18Key_tps1htc30Group7proceedEm+0x296>
			m_time_counter = next_counter;
 8003f58:	f8ca 309c 	str.w	r3, [sl, #156]	@ 0x9c
			m_time_counter = 0;
			m_lastError = error::None;
		}
	}

	m_last_time = current_time;
 8003f5c:	9b01      	ldr	r3, [sp, #4]
 8003f5e:	f8ca 30a4 	str.w	r3, [sl, #164]	@ 0xa4

	return m_lastError;
 8003f62:	f89a 50a8 	ldrb.w	r5, [sl, #168]	@ 0xa8
 8003f66:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8003f68:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f6a:	f7fe fa23 	bl	80023b4 <HAL_GPIO_ReadPin>
			if(!m_keys[group_id].i_fault[key_id].get_input()) {
 8003f6e:	2801      	cmp	r0, #1
 8003f70:	d048      	beq.n	8004004 <_ZN18Key_tps1htc30Group7proceedEm+0x2ac>
				err = error::Fault;
 8003f72:	2305      	movs	r3, #5
			m_keys[group_id].err[key_id] = err;
 8003f74:	f888 30cc 	strb.w	r3, [r8, #204]	@ 0xcc
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003f78:	3708      	adds	r7, #8
 8003f7a:	f109 0918 	add.w	r9, r9, #24
 8003f7e:	9b02      	ldr	r3, [sp, #8]
 8003f80:	429f      	cmp	r7, r3
 8003f82:	d048      	beq.n	8004016 <_ZN18Key_tps1htc30Group7proceedEm+0x2be>
			const uint8_t ch =  m_keys[group_id].adc_ch[key_id];
 8003f84:	3601      	adds	r6, #1
 8003f86:	46b0      	mov	r8, r6
 8003f88:	7833      	ldrb	r3, [r6, #0]
		if(n < m_n) {
 8003f8a:	f89b 22b0 	ldrb.w	r2, [fp, #688]	@ 0x2b0
 8003f8e:	429a      	cmp	r2, r3
			return m_y[n];
 8003f90:	bf86      	itte	hi
 8003f92:	f8db 22ac 	ldrhi.w	r2, [fp, #684]	@ 0x2ac
 8003f96:	f852 0023 	ldrhi.w	r0, [r2, r3, lsl #2]
		return 0;
 8003f9a:	2000      	movls	r0, #0
			const float curr = m_keys[group_id].current[key_id] = val;//calculateCurrent(val);
 8003f9c:	f7fc fe2a 	bl	8000bf4 <__aeabi_ui2f>
 8003fa0:	4605      	mov	r5, r0
 8003fa2:	f844 0f04 	str.w	r0, [r4, #4]!
			error err = m_keys[group_id].err[key_id];
 8003fa6:	f896 30cc 	ldrb.w	r3, [r6, #204]	@ 0xcc
			if(err == error::PowerOff || err == error::OpenLoad || err == error::OK) {
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d0e4      	beq.n	8003f78 <_ZN18Key_tps1htc30Group7proceedEm+0x220>
 8003fae:	3b06      	subs	r3, #6
 8003fb0:	b2db      	uxtb	r3, r3
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d9e0      	bls.n	8003f78 <_ZN18Key_tps1htc30Group7proceedEm+0x220>
typename InRangeDetector<T>::error InRangeDetector<T>::proceed(const uint32_t current_time, const T value)
 8003fb6:	46ca      	mov	sl, r9
	if(m_last_time == current_time) {
 8003fb8:	f8d9 30a4 	ldr.w	r3, [r9, #164]	@ 0xa4
 8003fbc:	9a01      	ldr	r2, [sp, #4]
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d0bf      	beq.n	8003f42 <_ZN18Key_tps1htc30Group7proceedEm+0x1ea>
	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003fc2:	f8d9 10ac 	ldr.w	r1, [r9, #172]	@ 0xac
 8003fc6:	f7fd f80b 	bl	8000fe0 <__aeabi_fcmplt>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	d1bc      	bne.n	8003f48 <_ZN18Key_tps1htc30Group7proceedEm+0x1f0>
 8003fce:	f8d9 10b0 	ldr.w	r1, [r9, #176]	@ 0xb0
 8003fd2:	4628      	mov	r0, r5
 8003fd4:	f7fd f822 	bl	800101c <__aeabi_fcmpgt>
 8003fd8:	b938      	cbnz	r0, 8003fea <_ZN18Key_tps1htc30Group7proceedEm+0x292>
		const int next_counter = m_time_counter - 1;
 8003fda:	f8d9 309c 	ldr.w	r3, [r9, #156]	@ 0x9c
 8003fde:	3b01      	subs	r3, #1
		if(next_counter > 0) {
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	dd09      	ble.n	8003ff8 <_ZN18Key_tps1htc30Group7proceedEm+0x2a0>
			m_time_counter = next_counter;
 8003fe4:	f8c9 309c 	str.w	r3, [r9, #156]	@ 0x9c
 8003fe8:	e7b8      	b.n	8003f5c <_ZN18Key_tps1htc30Group7proceedEm+0x204>
	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003fea:	2102      	movs	r1, #2
 8003fec:	e7ad      	b.n	8003f4a <_ZN18Key_tps1htc30Group7proceedEm+0x1f2>
		} else if(next_counter == m_dt) {
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d1b4      	bne.n	8003f5c <_ZN18Key_tps1htc30Group7proceedEm+0x204>
			m_lastError = reg_error;
 8003ff2:	f88a 10a8 	strb.w	r1, [sl, #168]	@ 0xa8
 8003ff6:	e7b1      	b.n	8003f5c <_ZN18Key_tps1htc30Group7proceedEm+0x204>
			m_time_counter = 0;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	f8c9 309c 	str.w	r3, [r9, #156]	@ 0x9c
			m_lastError = error::None;
 8003ffe:	f889 30a8 	strb.w	r3, [r9, #168]	@ 0xa8
 8004002:	e7ab      	b.n	8003f5c <_ZN18Key_tps1htc30Group7proceedEm+0x204>
			} else if(rangeErr == InRangeDetector_f::error::OutOfMinimumBoarder) {
 8004004:	2d01      	cmp	r5, #1
 8004006:	d004      	beq.n	8004012 <_ZN18Key_tps1htc30Group7proceedEm+0x2ba>
				err = error::Fault;
 8004008:	2d02      	cmp	r5, #2
 800400a:	bf14      	ite	ne
 800400c:	2304      	movne	r3, #4
 800400e:	2305      	moveq	r3, #5
 8004010:	e7b0      	b.n	8003f74 <_ZN18Key_tps1htc30Group7proceedEm+0x21c>
				err = error::OpenLoad;
 8004012:	2306      	movs	r3, #6
 8004014:	e7ae      	b.n	8003f74 <_ZN18Key_tps1htc30Group7proceedEm+0x21c>
 8004016:	f8dd a00c 	ldr.w	sl, [sp, #12]
 800401a:	9d04      	ldr	r5, [sp, #16]
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 800401c:	f505 75a2 	add.w	r5, r5, #324	@ 0x144
 8004020:	9b05      	ldr	r3, [sp, #20]
 8004022:	459a      	cmp	sl, r3
 8004024:	f43f aed1 	beq.w	8003dca <_ZN18Key_tps1htc30Group7proceedEm+0x72>
		const uint8_t cnt = m_initPinCnt[group_id];
 8004028:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 800402c:	2a00      	cmp	r2, #0
 800402e:	d0f5      	beq.n	800401c <_ZN18Key_tps1htc30Group7proceedEm+0x2c4>
 8004030:	f105 065f 	add.w	r6, r5, #95	@ 0x5f
 8004034:	f105 0468 	add.w	r4, r5, #104	@ 0x68
 8004038:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 800403c:	9302      	str	r3, [sp, #8]
 800403e:	46a9      	mov	r9, r5
 8004040:	462f      	mov	r7, r5
	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8004042:	f8cd a00c 	str.w	sl, [sp, #12]
 8004046:	9504      	str	r5, [sp, #16]
 8004048:	e79c      	b.n	8003f84 <_ZN18Key_tps1htc30Group7proceedEm+0x22c>
 800404a:	bf00      	nop
 800404c:	447a0000 	.word	0x447a0000

08004050 <crc_from_ringbuf>:
// include assert engine
#include "assertsEngine/assert_engine.h"
#define _INT_SWITCH(...) __VA_ARGS__

void crc_from_ringbuf(crc_strategy_t* const crc_base, const ringbuf_t* const ring_buf)
{
 8004050:	b570      	push	{r4, r5, r6, lr}
	_INT_SWITCH(M_Assert_Break(ring_buf == NULL || crc_base == NULL, M_EMPTY, return,
			"not valid parameters"));

	const u8* const ring_ptr 	= ring_buf->buffer;
 8004052:	694e      	ldr	r6, [r1, #20]

	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return,
 8004054:	b1be      	cbz	r6, 8004086 <crc_from_ringbuf+0x36>
 8004056:	4605      	mov	r5, r0
					"no buffer internal");

	const reg tail_reg 			= ring_buf->base.tail;
 8004058:	68c8      	ldr	r0, [r1, #12]
	const reg head_reg 			= ring_buf->base.head;
 800405a:	690a      	ldr	r2, [r1, #16]
	const reg msk_reg			= ring_buf->base.msk;

	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return, "ring buffer is empty");
 800405c:	4290      	cmp	r0, r2
 800405e:	d012      	beq.n	8004086 <crc_from_ringbuf+0x36>

	const reg tail_pos 			= tail_reg & msk_reg;								// get tail position
 8004060:	684b      	ldr	r3, [r1, #4]
 8004062:	4003      	ands	r3, r0
	const reg n_elem 			= _FIFO_LEN_IMPL(tail_reg, head_reg); 				// get n elements
 8004064:	1a12      	subs	r2, r2, r0
	const reg remaining_to_end 	= ring_buf->base.cap - tail_pos;
 8004066:	6808      	ldr	r0, [r1, #0]
 8004068:	1ac1      	subs	r1, r0, r3

	if(n_elem > remaining_to_end) {
 800406a:	428a      	cmp	r2, r1
 800406c:	d90c      	bls.n	8004088 <crc_from_ringbuf+0x38>
		const reg remaining_n		= n_elem - remaining_to_end;
 800406e:	189c      	adds	r4, r3, r2
 8004070:	1a24      	subs	r4, r4, r0
		CRC_ARRAY(crc_base, ring_ptr + tail_pos, remaining_to_end);
 8004072:	460a      	mov	r2, r1
 8004074:	18f1      	adds	r1, r6, r3
 8004076:	6828      	ldr	r0, [r5, #0]
 8004078:	68eb      	ldr	r3, [r5, #12]
 800407a:	4798      	blx	r3
		CRC_ARRAY(crc_base, ring_ptr, remaining_n);
 800407c:	68eb      	ldr	r3, [r5, #12]
 800407e:	4622      	mov	r2, r4
 8004080:	4631      	mov	r1, r6
 8004082:	6828      	ldr	r0, [r5, #0]
 8004084:	4798      	blx	r3
	} else {
		CRC_ARRAY(crc_base, ring_buf->buffer, n_elem);
	}
}
 8004086:	bd70      	pop	{r4, r5, r6, pc}
		CRC_ARRAY(crc_base, ring_buf->buffer, n_elem);
 8004088:	68eb      	ldr	r3, [r5, #12]
 800408a:	4631      	mov	r1, r6
 800408c:	6828      	ldr	r0, [r5, #0]
 800408e:	4798      	blx	r3
 8004090:	e7f9      	b.n	8004086 <crc_from_ringbuf+0x36>

08004092 <poolContainer_init>:
	return self;
}

bool poolContainer_init(pool_container_t* const self, const u16 n_buffers, const u16 max_size)
{
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8004092:	1e4b      	subs	r3, r1, #1
 8004094:	b29b      	uxth	r3, r3
 8004096:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800409a:	d23c      	bcs.n	8004116 <poolContainer_init+0x84>
{
 800409c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040a0:	4604      	mov	r4, r0
 80040a2:	460d      	mov	r5, r1
 80040a4:	4616      	mov	r6, r2
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 80040a6:	1e53      	subs	r3, r2, #1
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ae:	d234      	bcs.n	800411a <poolContainer_init+0x88>
			return true,
					"Give me positive values for dimensions genius");

	M_Assert_BreakSaveCheck(!is_power_of_2(n_buffers), M_EMPTY,
 80040b0:	1e4b      	subs	r3, r1, #1
 80040b2:	420b      	tst	r3, r1
 80040b4:	d134      	bne.n	8004120 <poolContainer_init+0x8e>

	M_Assert_BreakSaveCheck((n_buffers  > 16384 || max_size > 16384), M_EMPTY,
			return true,
					"is too long, N_BUF: %d, SIZE: %d", n_buffers, max_size);

	self->pool = (void**)calloc(n_buffers, sizeof(void*));
 80040b6:	2104      	movs	r1, #4
 80040b8:	4628      	mov	r0, r5
 80040ba:	f001 f98f 	bl	80053dc <calloc>
 80040be:	6160      	str	r0, [r4, #20]
	M_Assert_BreakSaveCheck(self->pool == NULL, M_EMPTY,
 80040c0:	b380      	cbz	r0, 8004124 <poolContainer_init+0x92>
 80040c2:	ea4f 0885 	mov.w	r8, r5, lsl #2
 80040c6:	2700      	movs	r7, #0
			return true,
					"no memories for allocation data");

	for (u16 i = 0; i < n_buffers; ++i) {
		self->pool[i] = calloc(max_size, sizeof(u8));
 80040c8:	f04f 0901 	mov.w	r9, #1
 80040cc:	f8d4 a014 	ldr.w	sl, [r4, #20]
 80040d0:	4649      	mov	r1, r9
 80040d2:	4630      	mov	r0, r6
 80040d4:	f001 f982 	bl	80053dc <calloc>
 80040d8:	f84a 0007 	str.w	r0, [sl, r7]
		M_Assert_BreakSaveCheck(self->pool[i] == NULL, M_EMPTY, goto error, "no memories for allocation");
 80040dc:	6963      	ldr	r3, [r4, #20]
 80040de:	59db      	ldr	r3, [r3, r7]
 80040e0:	b163      	cbz	r3, 80040fc <poolContainer_init+0x6a>
	for (u16 i = 0; i < n_buffers; ++i) {
 80040e2:	3704      	adds	r7, #4
 80040e4:	4547      	cmp	r7, r8
 80040e6:	d1f1      	bne.n	80040cc <poolContainer_init+0x3a>
	}


	self->max_size = max_size;
 80040e8:	8326      	strh	r6, [r4, #24]

// Determine whether x is a power of 2
#define is_power_of_2(x) ((x) != 0 && (((x) & ((x) - 1)) == 0))
STATIC_FORCEINLINE void fifo_base_init(fifo_base_t * const fifo, const reg cap)
{
	const reg msk = (cap - 1U);
 80040ea:	1e6b      	subs	r3, r5, #1

	fifo->cap = cap;
 80040ec:	6025      	str	r5, [r4, #0]
	fifo->msk = msk;
 80040ee:	6063      	str	r3, [r4, #4]
	fifo->xor_msk = cap | msk;
 80040f0:	431d      	orrs	r5, r3
 80040f2:	60a5      	str	r5, [r4, #8]
	fifo->tail = 0;
 80040f4:	2000      	movs	r0, #0
 80040f6:	60e0      	str	r0, [r4, #12]
	fifo->head = 0;
 80040f8:	6120      	str	r0, [r4, #16]
	fifo_base_init(&self->base, n_buffers);
	return false;
 80040fa:	e00f      	b.n	800411c <poolContainer_init+0x8a>
 80040fc:	2500      	movs	r5, #0

	// error proceed mark --------------------------------------------
	error:
	for (u16 i = 0; i < n_buffers; ++i) {
		free(self->pool[i]);
 80040fe:	6963      	ldr	r3, [r4, #20]
 8004100:	5958      	ldr	r0, [r3, r5]
 8004102:	f001 f98f 	bl	8005424 <free>
	for (u16 i = 0; i < n_buffers; ++i) {
 8004106:	3504      	adds	r5, #4
 8004108:	45a8      	cmp	r8, r5
 800410a:	d1f8      	bne.n	80040fe <poolContainer_init+0x6c>
	}
	free(self->pool);
 800410c:	6960      	ldr	r0, [r4, #20]
 800410e:	f001 f989 	bl	8005424 <free>
	return true;
 8004112:	2001      	movs	r0, #1
 8004114:	e002      	b.n	800411c <poolContainer_init+0x8a>
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8004116:	2001      	movs	r0, #1
}
 8004118:	4770      	bx	lr
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 800411a:	2001      	movs	r0, #1
}
 800411c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	M_Assert_BreakSaveCheck(!is_power_of_2(n_buffers), M_EMPTY,
 8004120:	2001      	movs	r0, #1
 8004122:	e7fb      	b.n	800411c <poolContainer_init+0x8a>
	M_Assert_BreakSaveCheck(self->pool == NULL, M_EMPTY,
 8004124:	2001      	movs	r0, #1
 8004126:	e7f9      	b.n	800411c <poolContainer_init+0x8a>

08004128 <poolContainer_getWriteBuffer>:
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg head_reg = self->base.head;
	const reg msk_reg = self->base.msk;
	const reg wr_pos = head_reg & msk_reg;
 8004128:	6903      	ldr	r3, [r0, #16]
 800412a:	6842      	ldr	r2, [r0, #4]
 800412c:	4013      	ands	r3, r2

	return self->pool[wr_pos];
 800412e:	6942      	ldr	r2, [r0, #20]
}
 8004130:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8004134:	4770      	bx	lr

08004136 <poolContainer_nextWritePos>:
void poolContainer_nextWritePos(pool_container_t * const self)
{
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));

	const reg head_reg = self->base.head + 1U;
 8004136:	6903      	ldr	r3, [r0, #16]
 8004138:	3301      	adds	r3, #1

	// proceed signalls ---------------------------------------------
	self->base.head 	= (head_reg);
 800413a:	6103      	str	r3, [r0, #16]
}
 800413c:	4770      	bx	lr

0800413e <poolContainer_readBuffer>:
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg tail_reg = self->base.tail;
	const reg msk_reg = self->base.msk;
	const reg rd_pos = tail_reg & msk_reg;
 800413e:	68c3      	ldr	r3, [r0, #12]
 8004140:	6842      	ldr	r2, [r0, #4]
 8004142:	4013      	ands	r3, r2

	return self->pool[rd_pos];
 8004144:	6942      	ldr	r2, [r0, #20]
}
 8004146:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800414a:	4770      	bx	lr

0800414c <poolContainer_nextReadPos>:
void poolContainer_nextReadPos(pool_container_t * const self)
{
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));

	const reg tail_reg = self->base.tail + 1U;
 800414c:	68c3      	ldr	r3, [r0, #12]
 800414e:	3301      	adds	r3, #1

	// write data to memory ------------------------------------
	// proceed signalls
	self->base.tail 		= (tail_reg);
 8004150:	60c3      	str	r3, [r0, #12]
}
 8004152:	4770      	bx	lr

08004154 <ringbuf_init>:
	return buffer;
}

bool ringbuf_init(ringbuf_t* const ring_buf, void* const buffer, const reg size)
{
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8004154:	b1ea      	cbz	r2, 8004192 <ringbuf_init+0x3e>
{
 8004156:	b570      	push	{r4, r5, r6, lr}
 8004158:	4604      	mov	r4, r0
 800415a:	4615      	mov	r5, r2
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 800415c:	1e56      	subs	r6, r2, #1
 800415e:	4216      	tst	r6, r2
 8004160:	d119      	bne.n	8004196 <ringbuf_init+0x42>
 8004162:	b1d0      	cbz	r0, 800419a <ringbuf_init+0x46>
			"not valid parameter size: %d", size);

	memset(ring_buf, 0, sizeof(ringbuf_t));
 8004164:	2300      	movs	r3, #0
 8004166:	6003      	str	r3, [r0, #0]
 8004168:	6043      	str	r3, [r0, #4]
 800416a:	6083      	str	r3, [r0, #8]
 800416c:	60c3      	str	r3, [r0, #12]
 800416e:	6103      	str	r3, [r0, #16]
 8004170:	6143      	str	r3, [r0, #20]

	if(buffer != NULL) {
 8004172:	b131      	cbz	r1, 8004182 <ringbuf_init+0x2e>
		ring_buf->buffer = buffer;
 8004174:	6161      	str	r1, [r4, #20]
	fifo->cap = cap;
 8004176:	6025      	str	r5, [r4, #0]
	fifo->msk = msk;
 8004178:	6066      	str	r6, [r4, #4]
	fifo->xor_msk = cap | msk;
 800417a:	432e      	orrs	r6, r5
 800417c:	60a6      	str	r6, [r4, #8]

		ring_buf->buffer = tmp;
	}

	fifo_base_init(&ring_buf->base, size);
	return true;
 800417e:	2001      	movs	r0, #1
}
 8004180:	bd70      	pop	{r4, r5, r6, pc}
		void* const tmp = malloc(size);
 8004182:	4610      	mov	r0, r2
 8004184:	f001 f946 	bl	8005414 <malloc>
		M_Assert_BreakSaveCheck(tmp == NULL, M_EMPTY, return false,
 8004188:	4601      	mov	r1, r0
 800418a:	2800      	cmp	r0, #0
 800418c:	d1f2      	bne.n	8004174 <ringbuf_init+0x20>
 800418e:	2000      	movs	r0, #0
 8004190:	e7f6      	b.n	8004180 <ringbuf_init+0x2c>
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8004192:	2000      	movs	r0, #0
}
 8004194:	4770      	bx	lr
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8004196:	2000      	movs	r0, #0
 8004198:	e7f2      	b.n	8004180 <ringbuf_init+0x2c>
 800419a:	2000      	movs	r0, #0
 800419c:	e7f0      	b.n	8004180 <ringbuf_init+0x2c>

0800419e <ringbuf_install_buf>:

bool ringbuf_install_buf(ringbuf_t* const ring_buf, void* const buffer)
{
	M_Assert_BreakSaveCheck(buffer == NULL, M_EMPTY, return false,
 800419e:	b129      	cbz	r1, 80041ac <ringbuf_install_buf+0xe>
			"not valid parameter");

	ring_buf->buffer = buffer;
 80041a0:	6141      	str	r1, [r0, #20]
}

#define FIFO_CLEAN(chield) fifo_base_clear(&((chield)->base))
STATIC_FORCEINLINE void fifo_base_clear(fifo_base_t * const fifo)
{
	fifo->tail = 0;
 80041a2:	2300      	movs	r3, #0
 80041a4:	60c3      	str	r3, [r0, #12]
	fifo->head = 0;
 80041a6:	6103      	str	r3, [r0, #16]
	FIFO_CLEAN(ring_buf);
	return true;
 80041a8:	2001      	movs	r0, #1
 80041aa:	4770      	bx	lr
	M_Assert_BreakSaveCheck(buffer == NULL, M_EMPTY, return false,
 80041ac:	2000      	movs	r0, #0
}
 80041ae:	4770      	bx	lr

080041b0 <ringbuf_get>:


// Get data from buffer================================================================================================
reg ringbuf_get(ringbuf_t* const ring_buf, void* const buffer, const reg size)
{
 80041b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_INT_SWITCH(M_Assert_Break((ring_buf == NULL || buffer == NULL), M_EMPTY, return 0, "ring buffer NULL"));

	// move to registers------------------------------------------
	const u8* const ring_ptr 			= ring_buf->buffer;
 80041b4:	f8d0 9014 	ldr.w	r9, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 80041b8:	f1b9 0f00 	cmp.w	r9, #0
 80041bc:	d02b      	beq.n	8004216 <ringbuf_get+0x66>
 80041be:	4604      	mov	r4, r0
 80041c0:	4688      	mov	r8, r1

	reg tail_reg 				= ring_buf->base.tail;
 80041c2:	68c6      	ldr	r6, [r0, #12]
	const reg head_reg 			= ring_buf->base.head;
 80041c4:	6905      	ldr	r5, [r0, #16]
	const reg msk_reg			= ring_buf->base.msk;

	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return 0, "ring buffer is empty");
 80041c6:	42ae      	cmp	r6, r5
 80041c8:	d027      	beq.n	800421a <ringbuf_get+0x6a>

	const reg n_elem 			= _FIFO_LEN_IMPL(tail_reg, head_reg);	// get n elements
 80041ca:	1bad      	subs	r5, r5, r6
	const reg size_constr 		= (size < n_elem) ? size : n_elem;		// constrain input size
 80041cc:	4295      	cmp	r5, r2
 80041ce:	bf28      	it	cs
 80041d0:	4615      	movcs	r5, r2
	const reg tail_pos 			= tail_reg & msk_reg;					// get tail position
 80041d2:	6847      	ldr	r7, [r0, #4]
 80041d4:	4037      	ands	r7, r6
	const reg remaining_to_end 	= ring_buf->base.cap - tail_pos;		// get remaining from tail to end
 80041d6:	f8d0 b000 	ldr.w	fp, [r0]
 80041da:	ebab 0a07 	sub.w	sl, fp, r7

	// do logic --------------------------------------------------
	if(size_constr > remaining_to_end) {
 80041de:	4555      	cmp	r5, sl
 80041e0:	d912      	bls.n	8004208 <ringbuf_get+0x58>
		const reg remaining_n		= size_constr - remaining_to_end;
		/* first get the data from fifo->out until the end of the buffer */
		memcpy(buffer, ring_ptr + tail_pos, remaining_to_end);
 80041e2:	4652      	mov	r2, sl
 80041e4:	eb09 0107 	add.w	r1, r9, r7
 80041e8:	4640      	mov	r0, r8
 80041ea:	f002 facc 	bl	8006786 <memcpy>
		const reg remaining_n		= size_constr - remaining_to_end;
 80041ee:	eba7 020b 	sub.w	r2, r7, fp
		/* then get the rest (if any) from the beginning of the buffer */
		memcpy((u8* const)(buffer) + remaining_to_end, ring_ptr, remaining_n);
 80041f2:	442a      	add	r2, r5
 80041f4:	4649      	mov	r1, r9
 80041f6:	eb08 000a 	add.w	r0, r8, sl
 80041fa:	f002 fac4 	bl	8006786 <memcpy>
		/* get all the data */
		memcpy(buffer, ring_ptr + tail_pos, size_constr);
	}

	// write data to memory ------------------------------------
	tail_reg += size_constr;
 80041fe:	442e      	add	r6, r5

	// proceed signalls
	ring_buf->base.tail 		= (tail_reg);
 8004200:	60e6      	str	r6, [r4, #12]
	return size_constr;
}
 8004202:	4628      	mov	r0, r5
 8004204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(buffer, ring_ptr + tail_pos, size_constr);
 8004208:	462a      	mov	r2, r5
 800420a:	eb09 0107 	add.w	r1, r9, r7
 800420e:	4640      	mov	r0, r8
 8004210:	f002 fab9 	bl	8006786 <memcpy>
 8004214:	e7f3      	b.n	80041fe <ringbuf_get+0x4e>
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 8004216:	2500      	movs	r5, #0
 8004218:	e7f3      	b.n	8004202 <ringbuf_get+0x52>
	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return 0, "ring buffer is empty");
 800421a:	2500      	movs	r5, #0
 800421c:	e7f1      	b.n	8004202 <ringbuf_get+0x52>

0800421e <ringbuf_getc>:



u8 ringbuf_getc(ringbuf_t* const ring_buf)
{
 800421e:	4603      	mov	r3, r0
	_INT_SWITCH(M_Assert_Break(ring_buf == NULL || ring_buf->buffer == NULL, M_EMPTY, return 0, "ring buffer NULL"));

	// move to registers------------------------------------------
	const u8* const ring_ptr 	= ring_buf->buffer;
 8004220:	6940      	ldr	r0, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 8004222:	b150      	cbz	r0, 800423a <ringbuf_getc+0x1c>

	reg tail_reg 			= ring_buf->base.tail;
 8004224:	68da      	ldr	r2, [r3, #12]
	const reg head_reg 		= ring_buf->base.head;
	const reg msk_reg		= ring_buf->base.msk;
	const reg tail_pos 		= tail_reg & msk_reg;					// get tail position
 8004226:	6859      	ldr	r1, [r3, #4]
 8004228:	4011      	ands	r1, r2

	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return 0, "ring buffer is empty");
 800422a:	f8d3 c010 	ldr.w	ip, [r3, #16]
 800422e:	4562      	cmp	r2, ip
 8004230:	d005      	beq.n	800423e <ringbuf_getc+0x20>

	// do logic --------------------------------------------------
	const u8 value = *(ring_ptr + tail_pos);
 8004232:	5c40      	ldrb	r0, [r0, r1]

	// write data to memory ------------------------------------
	++tail_reg;
 8004234:	3201      	adds	r2, #1

	// proceed signalls
	ring_buf->base.tail 		= (tail_reg);
 8004236:	60da      	str	r2, [r3, #12]
	return value;
 8004238:	4770      	bx	lr
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 800423a:	2000      	movs	r0, #0
 800423c:	4770      	bx	lr
	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return 0, "ring buffer is empty");
 800423e:	2000      	movs	r0, #0
}
 8004240:	4770      	bx	lr

08004242 <ringbuf_put>:
RINGBUF_PEEK(f64)


// Store data into buffer===========================================================================================
reg ringbuf_put(ringbuf_t* const ring_buf, const void *buffer, const reg size)
{
 8004242:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_INT_SWITCH(M_Assert_Break((ring_buf == NULL || buffer == NULL || ring_buf->buffer == NULL), M_EMPTY, return 0, "ring buffer NULL"));

	// move to registers------------------------------------------------------
	u8* const ring_ptr 			= ring_buf->buffer;
 8004246:	f8d0 a014 	ldr.w	sl, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 800424a:	f1ba 0f00 	cmp.w	sl, #0
 800424e:	d031      	beq.n	80042b4 <ringbuf_put+0x72>
 8004250:	4605      	mov	r5, r0
 8004252:	460f      	mov	r7, r1

	const reg tail_reg 			= ring_buf->base.tail;
 8004254:	68c4      	ldr	r4, [r0, #12]
	reg head_reg 				= ring_buf->base.head;
 8004256:	6906      	ldr	r6, [r0, #16]
	const reg msk_reg			= ring_buf->base.msk;
	const reg xor_msk_reg		= ring_buf->base.xor_msk;
	const reg cap_reg			= ring_buf->base.cap;
 8004258:	f8d0 8000 	ldr.w	r8, [r0]

	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return 0, "ring buffer is full");
 800425c:	ea84 0306 	eor.w	r3, r4, r6
 8004260:	6881      	ldr	r1, [r0, #8]
 8004262:	400b      	ands	r3, r1
 8004264:	4543      	cmp	r3, r8
 8004266:	d027      	beq.n	80042b8 <ringbuf_put+0x76>

	const reg head_pos 			= head_reg & msk_reg;
 8004268:	6843      	ldr	r3, [r0, #4]
 800426a:	ea06 0903 	and.w	r9, r6, r3
	const reg remaining_to_end 	= cap_reg - head_pos;					// get remaining from head to end
 800426e:	eba8 0b09 	sub.w	fp, r8, r9
	const reg n_empty 			= (cap_reg - head_reg) + tail_reg;		// black magic for get empty cells
 8004272:	4444      	add	r4, r8
 8004274:	1ba4      	subs	r4, r4, r6
	const reg size_constr 		= (size < n_empty) ? size : n_empty;	// constrain input size
 8004276:	4294      	cmp	r4, r2
 8004278:	bf28      	it	cs
 800427a:	4614      	movcs	r4, r2


	// do logic ------------------------------------------------------------
	if(size_constr > remaining_to_end) {
 800427c:	45a3      	cmp	fp, r4
 800427e:	d212      	bcs.n	80042a6 <ringbuf_put+0x64>
		const reg remaining_n		= size_constr - remaining_to_end;
		/* first put the data starting from fifo->in to buffer end */
		memcpy(ring_ptr + head_pos, buffer, remaining_to_end);
 8004280:	465a      	mov	r2, fp
 8004282:	4639      	mov	r1, r7
 8004284:	eb0a 0009 	add.w	r0, sl, r9
 8004288:	f002 fa7d 	bl	8006786 <memcpy>
		const reg remaining_n		= size_constr - remaining_to_end;
 800428c:	eba9 0208 	sub.w	r2, r9, r8
		/* then put the rest (if any) at the beginning of the buffer */
		memcpy(ring_ptr, (u8* const)(buffer) + remaining_to_end, remaining_n);
 8004290:	4422      	add	r2, r4
 8004292:	eb07 010b 	add.w	r1, r7, fp
 8004296:	4650      	mov	r0, sl
 8004298:	f002 fa75 	bl	8006786 <memcpy>
		/* put all the data */
		memcpy(ring_ptr + head_pos, buffer, size_constr);
	}

	// write data to memory ------------------------------------------------
	head_reg += size_constr;
 800429c:	4426      	add	r6, r4

	// proceed signalls
	ring_buf->base.head 	= (head_reg);
 800429e:	612e      	str	r6, [r5, #16]
	return size_constr;
}
 80042a0:	4620      	mov	r0, r4
 80042a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(ring_ptr + head_pos, buffer, size_constr);
 80042a6:	4622      	mov	r2, r4
 80042a8:	4639      	mov	r1, r7
 80042aa:	eb0a 0009 	add.w	r0, sl, r9
 80042ae:	f002 fa6a 	bl	8006786 <memcpy>
 80042b2:	e7f3      	b.n	800429c <ringbuf_put+0x5a>
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 80042b4:	2400      	movs	r4, #0
 80042b6:	e7f3      	b.n	80042a0 <ringbuf_put+0x5e>
	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return 0, "ring buffer is full");
 80042b8:	2400      	movs	r4, #0
 80042ba:	e7f1      	b.n	80042a0 <ringbuf_put+0x5e>

080042bc <ringbuf_putc>:

// Store byte data in buffer
bool ringbuf_putc(ringbuf_t* const ring_buf, const u8 c)
{
 80042bc:	b430      	push	{r4, r5}
	_INT_SWITCH(M_Assert_Break(ring_buf == NULL || ring_buf->buffer == NULL, M_EMPTY, return false, "ring buffer NULL"));

	// move to registers------------------------------------
	u8* const ring_ptr 			= ring_buf->buffer;
 80042be:	6944      	ldr	r4, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return false, "buffer is null");
 80042c0:	b18c      	cbz	r4, 80042e6 <ringbuf_putc+0x2a>

	reg head_reg 				= ring_buf->base.head;
 80042c2:	6902      	ldr	r2, [r0, #16]
	const reg tail_reg 			= ring_buf->base.tail;
	const reg msk_reg			= ring_buf->base.msk;
	const reg xor_msk_reg		= ring_buf->base.xor_msk;
	const reg cap_reg			= ring_buf->base.cap;

	const reg head_pos 			= head_reg & msk_reg;
 80042c4:	6843      	ldr	r3, [r0, #4]
 80042c6:	ea02 0c03 	and.w	ip, r2, r3

	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return false, "ring buffer is full");
 80042ca:	68c3      	ldr	r3, [r0, #12]
 80042cc:	4053      	eors	r3, r2
 80042ce:	6885      	ldr	r5, [r0, #8]
 80042d0:	402b      	ands	r3, r5
 80042d2:	6805      	ldr	r5, [r0, #0]
 80042d4:	42ab      	cmp	r3, r5
 80042d6:	d008      	beq.n	80042ea <ringbuf_putc+0x2e>

	*(ring_ptr + head_pos) = c;
 80042d8:	f804 100c 	strb.w	r1, [r4, ip]

	++head_reg;
 80042dc:	3201      	adds	r2, #1

	// proceed signalls
	ring_buf->base.head 	= (head_reg);
 80042de:	6102      	str	r2, [r0, #16]

	return true;
 80042e0:	2001      	movs	r0, #1
}
 80042e2:	bc30      	pop	{r4, r5}
 80042e4:	4770      	bx	lr
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return false, "buffer is null");
 80042e6:	2000      	movs	r0, #0
 80042e8:	e7fb      	b.n	80042e2 <ringbuf_putc+0x26>
	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return false, "ring buffer is full");
 80042ea:	2000      	movs	r0, #0
 80042ec:	e7f9      	b.n	80042e2 <ringbuf_putc+0x26>

080042ee <CallbackManager_init>:
    return m_manager;
}

bool CallbackManager_init(CallbackManager_t* const self, const u8 n, void* const ctx)
{
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no valid input data", ENA, LIB);
 80042ee:	b168      	cbz	r0, 800430c <CallbackManager_init+0x1e>
{
 80042f0:	b570      	push	{r4, r5, r6, lr}
 80042f2:	460c      	mov	r4, r1
 80042f4:	4615      	mov	r5, r2
 80042f6:	4606      	mov	r6, r0

     void* const alloc = calloc(n, sizeof(CallbackWorker));
 80042f8:	2104      	movs	r1, #4
 80042fa:	4620      	mov	r0, r4
 80042fc:	f001 f86e 	bl	80053dc <calloc>
     M_Assert_BreakSaveCheck(alloc == NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no memory for allocation", ENA, LIB);
 8004300:	b130      	cbz	r0, 8004310 <CallbackManager_init+0x22>

    self->workers = alloc;
 8004302:	6030      	str	r0, [r6, #0]
    self->ctx = ctx;
 8004304:	6075      	str	r5, [r6, #4]
    self->n = n;
 8004306:	7234      	strb	r4, [r6, #8]
    return false;
 8004308:	2000      	movs	r0, #0
}
 800430a:	bd70      	pop	{r4, r5, r6, pc}
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no valid input data", ENA, LIB);
 800430c:	2001      	movs	r0, #1
}
 800430e:	4770      	bx	lr
     M_Assert_BreakSaveCheck(alloc == NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no memory for allocation", ENA, LIB);
 8004310:	2001      	movs	r0, #1
 8004312:	e7fa      	b.n	800430a <CallbackManager_init+0x1c>

08004314 <CallbackManager_subscribe>:
}

bool CallbackManager_subscribe(CallbackManager_t * const self, const u8 id, const CallbackWorker worker)
{
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
    self->workers[id] = worker;
 8004314:	6803      	ldr	r3, [r0, #0]
 8004316:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    return false;
}
 800431a:	2000      	movs	r0, #0
 800431c:	4770      	bx	lr

0800431e <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
bool CallbackManager_proceed(const CallbackManager_t* const self, const u8 id, void* const data)
{
 800431e:	4603      	mov	r3, r0
 8004320:	4610      	mov	r0, r2
    const u8 n = self->n;
    const CallbackWorker worker = self->workers[id];
    void* const ctx = self->ctx;

    // do logic
    M_Assert_SafeFunctionCall((id < n) && (worker != NULL), {
 8004322:	7a1a      	ldrb	r2, [r3, #8]
 8004324:	428a      	cmp	r2, r1
 8004326:	d908      	bls.n	800433a <CallbackManager_proceed+0x1c>
{
 8004328:	b510      	push	{r4, lr}
    const CallbackWorker worker = self->workers[id];
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
    M_Assert_SafeFunctionCall((id < n) && (worker != NULL), {
 8004330:	b12c      	cbz	r4, 800433e <CallbackManager_proceed+0x20>
 8004332:	685a      	ldr	r2, [r3, #4]
 8004334:	47a0      	blx	r4
 8004336:	2000      	movs	r0, #0
                                  worker(data, id, ctx);
                                  return false;
                              });
    return true;
}
 8004338:	bd10      	pop	{r4, pc}
    return true;
 800433a:	2001      	movs	r0, #1
}
 800433c:	4770      	bx	lr
    return true;
 800433e:	2001      	movs	r0, #1
 8004340:	e7fa      	b.n	8004338 <CallbackManager_proceed+0x1a>

08004342 <crc16_t10_dif_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc16_t10_dif_init_base(void* const crc)
{
	*UINT16_TYPE_DC(crc) = CRC16INIT;
 8004342:	2300      	movs	r3, #0
 8004344:	8003      	strh	r3, [r0, #0]
}
 8004346:	4770      	bx	lr

08004348 <fast_crc16_t10_dif_array_base>:

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc16_t10_dif_array_base(void* const crc, const u8* data, reg len)
{
	u16 crc16 = *UINT16_TYPE_DC(crc);
 8004348:	8803      	ldrh	r3, [r0, #0]
	CRC16_FAST_ARRAY_PROCEED(crc16, data, len);
 800434a:	b18a      	cbz	r2, 8004370 <fast_crc16_t10_dif_array_base+0x28>
{
 800434c:	b410      	push	{r4}
 800434e:	4694      	mov	ip, r2
 8004350:	448c      	add	ip, r1
	CRC16_FAST_ARRAY_PROCEED(crc16, data, len);
 8004352:	4c08      	ldr	r4, [pc, #32]	@ (8004374 <fast_crc16_t10_dif_array_base+0x2c>)
 8004354:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004358:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 800435c:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8004360:	021b      	lsls	r3, r3, #8
 8004362:	b29b      	uxth	r3, r3
 8004364:	4053      	eors	r3, r2
 8004366:	458c      	cmp	ip, r1
 8004368:	d1f4      	bne.n	8004354 <fast_crc16_t10_dif_array_base+0xc>
	*UINT16_TYPE_DC(crc) = crc16;
 800436a:	8003      	strh	r3, [r0, #0]
}
 800436c:	bc10      	pop	{r4}
 800436e:	4770      	bx	lr
	*UINT16_TYPE_DC(crc) = crc16;
 8004370:	8003      	strh	r3, [r0, #0]
 8004372:	4770      	bx	lr
 8004374:	08007d90 	.word	0x08007d90

08004378 <fast_crc16_t10_dif_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc16_t10_dif_byte_base(void* const crc, const u8 data)
{
	u16 crc16 = *UINT16_TYPE_DC(crc);
 8004378:	8802      	ldrh	r2, [r0, #0]
	crc16 = CRC16_FAST_BYTE_PROCEED(crc16, data);
 800437a:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 800437e:	4b03      	ldr	r3, [pc, #12]	@ (800438c <fast_crc16_t10_dif_byte_base+0x14>)
 8004380:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004384:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
	*UINT16_TYPE_DC(crc) = crc16;
 8004388:	8003      	strh	r3, [r0, #0]
}
 800438a:	4770      	bx	lr
 800438c:	08007d90 	.word	0x08007d90

08004390 <crc32b_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc32b_init_base(void* const crc)
{
	*UINT32_TYPE_DC(crc) = CRC32INIT;
 8004390:	f04f 33ff 	mov.w	r3, #4294967295
 8004394:	6003      	str	r3, [r0, #0]
}
 8004396:	4770      	bx	lr

08004398 <fast_crc32b_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc32b_array_base(void* const crc, const u8* data, reg len)
{
 8004398:	b430      	push	{r4, r5}
	u32 crc32 = *UINT32_TYPE_DC(crc);
 800439a:	6804      	ldr	r4, [r0, #0]
	CRC32_FAST_ARRAY_PROCEED(crc32, data, len);
 800439c:	b15a      	cbz	r2, 80043b6 <fast_crc32b_array_base+0x1e>
 800439e:	188a      	adds	r2, r1, r2
 80043a0:	4d06      	ldr	r5, [pc, #24]	@ (80043bc <fast_crc32b_array_base+0x24>)
 80043a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043a6:	4063      	eors	r3, r4
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80043ae:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
 80043b2:	428a      	cmp	r2, r1
 80043b4:	d1f5      	bne.n	80043a2 <fast_crc32b_array_base+0xa>
	*UINT32_TYPE_DC(crc) = crc32;
 80043b6:	6004      	str	r4, [r0, #0]
}
 80043b8:	bc30      	pop	{r4, r5}
 80043ba:	4770      	bx	lr
 80043bc:	08007f90 	.word	0x08007f90

080043c0 <fast_crc32b_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc32b_byte_base(void* const crc, const u8 data)
{
	u32 crc32 = *UINT32_TYPE_DC(crc);
 80043c0:	6802      	ldr	r2, [r0, #0]
	crc32 = CRC32_FAST_BYTE_PROCEED(crc32, data);
 80043c2:	4051      	eors	r1, r2
 80043c4:	b2c9      	uxtb	r1, r1
 80043c6:	4b03      	ldr	r3, [pc, #12]	@ (80043d4 <fast_crc32b_byte_base+0x14>)
 80043c8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80043cc:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
	*UINT32_TYPE_DC(crc) = crc32;
 80043d0:	6003      	str	r3, [r0, #0]
}
 80043d2:	4770      	bx	lr
 80043d4:	08007f90 	.word	0x08007f90

080043d8 <crc64jones_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc64jones_init_base(void* const crc)
{
	*UINT64_TYPE_DC(crc) = CRC64INIT;
 80043d8:	2200      	movs	r2, #0
 80043da:	2300      	movs	r3, #0
 80043dc:	e9c0 2300 	strd	r2, r3, [r0]
}
 80043e0:	4770      	bx	lr
	...

080043e4 <fast_crc64jones_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc64jones_array_base(void* const crc, const u8* data, reg len)
{
 80043e4:	b570      	push	{r4, r5, r6, lr}
	u64 crc64 = *UINT64_TYPE_DC(crc);
 80043e6:	6803      	ldr	r3, [r0, #0]
 80043e8:	6844      	ldr	r4, [r0, #4]
	CRC64_FAST_ARRAY_PROCEED(crc64, data, len);
 80043ea:	b1a2      	cbz	r2, 8004416 <fast_crc64jones_array_base+0x32>
 80043ec:	4696      	mov	lr, r2
 80043ee:	448e      	add	lr, r1
 80043f0:	4d0a      	ldr	r5, [pc, #40]	@ (800441c <fast_crc64jones_array_base+0x38>)
 80043f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80043f6:	405a      	eors	r2, r3
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	eb05 0cc2 	add.w	ip, r5, r2, lsl #3
 80043fe:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
 8004402:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004406:	0a1b      	lsrs	r3, r3, #8
 8004408:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800440c:	4073      	eors	r3, r6
 800440e:	ea82 2414 	eor.w	r4, r2, r4, lsr #8
 8004412:	458e      	cmp	lr, r1
 8004414:	d1ed      	bne.n	80043f2 <fast_crc64jones_array_base+0xe>
	*UINT64_TYPE_DC(crc) = crc64;
 8004416:	6003      	str	r3, [r0, #0]
 8004418:	6044      	str	r4, [r0, #4]
}
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	08008390 	.word	0x08008390

08004420 <fast_crc64jones_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc64jones_byte_base(void* const crc, const u8 data)
{
 8004420:	b410      	push	{r4}
	u64 crc64 = *UINT64_TYPE_DC(crc);
 8004422:	6803      	ldr	r3, [r0, #0]
 8004424:	6844      	ldr	r4, [r0, #4]
	crc64 = CRC64_FAST_BYTE_PROCEED(crc64, data);
 8004426:	4a09      	ldr	r2, [pc, #36]	@ (800444c <fast_crc64jones_byte_base+0x2c>)
 8004428:	4059      	eors	r1, r3
 800442a:	b2c9      	uxtb	r1, r1
 800442c:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 8004430:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
 8004434:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 800443e:	4059      	eors	r1, r3
 8004440:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
	*UINT64_TYPE_DC(crc) = crc64;
 8004444:	6001      	str	r1, [r0, #0]
 8004446:	6042      	str	r2, [r0, #4]
}
 8004448:	bc10      	pop	{r4}
 800444a:	4770      	bx	lr
 800444c:	08008390 	.word	0x08008390

08004450 <crc8_maxim_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc8_maxim_init_base(void* const crc)
{
	*UINT8_TYPE_DC(crc) = CRC8INIT;
 8004450:	23ff      	movs	r3, #255	@ 0xff
 8004452:	7003      	strb	r3, [r0, #0]
}
 8004454:	4770      	bx	lr
	...

08004458 <fast_crc8_maxim_array_base>:

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc8_maxim_array_base(void* const crc, const u8* data, reg len)
{
	u8 crc8 = *UINT8_TYPE_DC(crc);
 8004458:	7803      	ldrb	r3, [r0, #0]
	CRC8_FAST_ARRAY_PROCEED(crc8, data, len);
 800445a:	b162      	cbz	r2, 8004476 <fast_crc8_maxim_array_base+0x1e>
{
 800445c:	b410      	push	{r4}
 800445e:	4694      	mov	ip, r2
 8004460:	448c      	add	ip, r1
	CRC8_FAST_ARRAY_PROCEED(crc8, data, len);
 8004462:	4c06      	ldr	r4, [pc, #24]	@ (800447c <fast_crc8_maxim_array_base+0x24>)
 8004464:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004468:	4053      	eors	r3, r2
 800446a:	5ce3      	ldrb	r3, [r4, r3]
 800446c:	458c      	cmp	ip, r1
 800446e:	d1f9      	bne.n	8004464 <fast_crc8_maxim_array_base+0xc>
	*UINT8_TYPE_DC(crc) = crc8;
 8004470:	7003      	strb	r3, [r0, #0]
}
 8004472:	bc10      	pop	{r4}
 8004474:	4770      	bx	lr
	*UINT8_TYPE_DC(crc) = crc8;
 8004476:	7003      	strb	r3, [r0, #0]
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	08008b90 	.word	0x08008b90

08004480 <fast_crc8_maxim_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc8_maxim_byte_base(void* const crc, const u8 data)
{
	u8 crc8 = *UINT8_TYPE_DC(crc);
	crc8 = CRC8_FAST_BYTE_PROCEED(crc8, data);
 8004480:	7803      	ldrb	r3, [r0, #0]
 8004482:	4059      	eors	r1, r3
 8004484:	4b01      	ldr	r3, [pc, #4]	@ (800448c <fast_crc8_maxim_byte_base+0xc>)
	*UINT8_TYPE_DC(crc) = crc8;
 8004486:	5c5b      	ldrb	r3, [r3, r1]
 8004488:	7003      	strb	r3, [r0, #0]
}
 800448a:	4770      	bx	lr
 800448c:	08008b90 	.word	0x08008b90

08004490 <crc_base_init>:
#include "crc_base.h"
#include <string.h>
#include <stdlib.h>

void crc_base_init(crc_base_t* const self, const reg size)
{
 8004490:	b538      	push	{r3, r4, r5, lr}
 8004492:	4604      	mov	r4, r0
 8004494:	460d      	mov	r5, r1
	self->crc = malloc(size);
 8004496:	4608      	mov	r0, r1
 8004498:	f000 ffbc 	bl	8005414 <malloc>
 800449c:	6020      	str	r0, [r4, #0]
	self->crc_size = size;
 800449e:	7125      	strb	r5, [r4, #4]
}
 80044a0:	bd38      	pop	{r3, r4, r5, pc}

080044a2 <crc_base_duplicate>:

crc_base_t* const crc_base_duplicate(crc_base_t* const from)
{
 80044a2:	b538      	push	{r3, r4, r5, lr}
	if(from == NULL) {
 80044a4:	4605      	mov	r5, r0
 80044a6:	b158      	cbz	r0, 80044c0 <crc_base_duplicate+0x1e>
		return NULL;
	}

	crc_base_t* const to = (crc_base_t*)malloc(sizeof(crc_base_t));
 80044a8:	2008      	movs	r0, #8
 80044aa:	f000 ffb3 	bl	8005414 <malloc>
 80044ae:	4604      	mov	r4, r0
	to->crc = malloc(from->crc_size);
 80044b0:	792d      	ldrb	r5, [r5, #4]
 80044b2:	4628      	mov	r0, r5
 80044b4:	f000 ffae 	bl	8005414 <malloc>
 80044b8:	6020      	str	r0, [r4, #0]
	to->crc_size = from->crc_size;
 80044ba:	7125      	strb	r5, [r4, #4]

	return to;
}
 80044bc:	4620      	mov	r0, r4
 80044be:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 80044c0:	4604      	mov	r4, r0
 80044c2:	e7fb      	b.n	80044bc <crc_base_duplicate+0x1a>

080044c4 <crc_compleate>:


bool crc_compleate(crc_base_t* const self1, crc_base_t* const self2)
{
 80044c4:	b508      	push	{r3, lr}
	const reg size1 = self1->crc_size;
 80044c6:	7902      	ldrb	r2, [r0, #4]
	const reg size2 = self2->crc_size;
 80044c8:	790b      	ldrb	r3, [r1, #4]
	const void* const ptr1 = self1->crc;
	const void* const ptr2 = self2->crc;

	if(size1 != size2) {
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d107      	bne.n	80044de <crc_compleate+0x1a>
		return false;
	}

	return memcmp(ptr1, ptr2, size1) == 0;
 80044ce:	6809      	ldr	r1, [r1, #0]
 80044d0:	6800      	ldr	r0, [r0, #0]
 80044d2:	f002 f84d 	bl	8006570 <memcmp>
 80044d6:	fab0 f080 	clz	r0, r0
 80044da:	0940      	lsrs	r0, r0, #5
}
 80044dc:	bd08      	pop	{r3, pc}
		return false;
 80044de:	2000      	movs	r0, #0
 80044e0:	e7fc      	b.n	80044dc <crc_compleate+0x18>
	...

080044e4 <createCRC>:




crc_strategy_t* const createCRC(const crc_type type)
{
 80044e4:	b510      	push	{r4, lr}
	switch(type) {
 80044e6:	2803      	cmp	r0, #3
 80044e8:	d848      	bhi.n	800457c <createCRC+0x98>
 80044ea:	e8df f000 	tbb	[pc, r0]
 80044ee:	1402      	.short	0x1402
 80044f0:	3625      	.short	0x3625
	crc_strategy_t* const crc = malloc(sizeof(crc_strategy_t));
 80044f2:	2014      	movs	r0, #20
 80044f4:	f000 ff8e 	bl	8005414 <malloc>
 80044f8:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u8));
 80044fa:	2101      	movs	r1, #1
 80044fc:	f7ff ffc8 	bl	8004490 <crc_base_init>
    crc->crc_init = _MY_CRC8_INIT_BASE;
 8004500:	4b1f      	ldr	r3, [pc, #124]	@ (8004580 <createCRC+0x9c>)
 8004502:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC8_ARRAY_BASE;
 8004504:	4b1f      	ldr	r3, [pc, #124]	@ (8004584 <createCRC+0xa0>)
 8004506:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC8_BYTE_BASE;
 8004508:	4b1f      	ldr	r3, [pc, #124]	@ (8004588 <createCRC+0xa4>)
 800450a:	6123      	str	r3, [r4, #16]
    _MY_CRC8_INIT_BASE(&crc->base.crc);
 800450c:	4620      	mov	r0, r4
 800450e:	f7ff ff9f 	bl	8004450 <crc8_maxim_init_base>
	default: 	return NULL;

	}

	return NULL;
}
 8004512:	4620      	mov	r0, r4
 8004514:	bd10      	pop	{r4, pc}
	crc_strategy_t* const crc = malloc(sizeof(crc_strategy_t));
 8004516:	2014      	movs	r0, #20
 8004518:	f000 ff7c 	bl	8005414 <malloc>
 800451c:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u16));
 800451e:	2102      	movs	r1, #2
 8004520:	f7ff ffb6 	bl	8004490 <crc_base_init>
    crc->crc_init = _MY_CRC16_INIT_BASE;
 8004524:	4b19      	ldr	r3, [pc, #100]	@ (800458c <createCRC+0xa8>)
 8004526:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC16_ARRAY_BASE;
 8004528:	4b19      	ldr	r3, [pc, #100]	@ (8004590 <createCRC+0xac>)
 800452a:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC16_BYTE_BASE;
 800452c:	4b19      	ldr	r3, [pc, #100]	@ (8004594 <createCRC+0xb0>)
 800452e:	6123      	str	r3, [r4, #16]
    _MY_CRC16_INIT_BASE(&crc->base.crc);
 8004530:	4620      	mov	r0, r4
 8004532:	f7ff ff06 	bl	8004342 <crc16_t10_dif_init_base>
		return newCRC16();
 8004536:	e7ec      	b.n	8004512 <createCRC+0x2e>
	crc_strategy_t* const crc = malloc(sizeof(crc_strategy_t));
 8004538:	2014      	movs	r0, #20
 800453a:	f000 ff6b 	bl	8005414 <malloc>
 800453e:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u32));
 8004540:	2104      	movs	r1, #4
 8004542:	f7ff ffa5 	bl	8004490 <crc_base_init>
    crc->crc_init = _MY_CRC32_INIT_BASE;
 8004546:	4b14      	ldr	r3, [pc, #80]	@ (8004598 <createCRC+0xb4>)
 8004548:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC32_ARRAY_BASE;
 800454a:	4b14      	ldr	r3, [pc, #80]	@ (800459c <createCRC+0xb8>)
 800454c:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC32_BYTE_BASE;
 800454e:	4b14      	ldr	r3, [pc, #80]	@ (80045a0 <createCRC+0xbc>)
 8004550:	6123      	str	r3, [r4, #16]
    _MY_CRC32_INIT_BASE(&crc->base.crc);
 8004552:	4620      	mov	r0, r4
 8004554:	f7ff ff1c 	bl	8004390 <crc32b_init_base>
		return newCRC32();
 8004558:	e7db      	b.n	8004512 <createCRC+0x2e>
	crc_strategy_t* const crc = malloc(sizeof(crc_strategy_t));
 800455a:	2014      	movs	r0, #20
 800455c:	f000 ff5a 	bl	8005414 <malloc>
 8004560:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u64));
 8004562:	2108      	movs	r1, #8
 8004564:	f7ff ff94 	bl	8004490 <crc_base_init>
    crc->crc_init = _MY_CRC64_INIT_BASE;
 8004568:	4b0e      	ldr	r3, [pc, #56]	@ (80045a4 <createCRC+0xc0>)
 800456a:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC64_ARRAY_BASE;
 800456c:	4b0e      	ldr	r3, [pc, #56]	@ (80045a8 <createCRC+0xc4>)
 800456e:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC64_BYTE_BASE;
 8004570:	4b0e      	ldr	r3, [pc, #56]	@ (80045ac <createCRC+0xc8>)
 8004572:	6123      	str	r3, [r4, #16]
    _MY_CRC8_INIT_BASE(&crc->base.crc);
 8004574:	4620      	mov	r0, r4
 8004576:	f7ff ff6b 	bl	8004450 <crc8_maxim_init_base>
		return newCRC64();
 800457a:	e7ca      	b.n	8004512 <createCRC+0x2e>
	switch(type) {
 800457c:	2400      	movs	r4, #0
 800457e:	e7c8      	b.n	8004512 <createCRC+0x2e>
 8004580:	08004451 	.word	0x08004451
 8004584:	08004459 	.word	0x08004459
 8004588:	08004481 	.word	0x08004481
 800458c:	08004343 	.word	0x08004343
 8004590:	08004349 	.word	0x08004349
 8004594:	08004379 	.word	0x08004379
 8004598:	08004391 	.word	0x08004391
 800459c:	08004399 	.word	0x08004399
 80045a0:	080043c1 	.word	0x080043c1
 80045a4:	080043d9 	.word	0x080043d9
 80045a8:	080043e5 	.word	0x080043e5
 80045ac:	08004421 	.word	0x08004421

080045b0 <_proceedByte>:
/* PROCEED FUNCTIONS *************************************************************************************************
 *
 */

static void _proceedByte(RawParser_dynamic_t* const self, const u8 ch, const bool newFrame)
{
 80045b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80045b4:	4604      	mov	r4, r0
 80045b6:	460d      	mov	r5, r1
#define RECEIVE_DATA                   	0x03U
#define RECEIVE_CRC                   	0x04U
	//--------------------------------------------
#define RECEIVE_COMPLEATE              	0x0CU

	u8 _state = self->RX.receiveState;
 80045b8:	7b07      	ldrb	r7, [r0, #12]
	ringbuf_t* const rx_frame_ring = &self->RX.frame_stream;
	crc_strategy_t* const rx_crc_check = self->RX.crc;
 80045ba:	6c06      	ldr	r6, [r0, #64]	@ 0x40

	if (newFrame) {
 80045bc:	b31a      	cbz	r2, 8004606 <_proceedByte+0x56>
		M_Assert_SafeFunctionCall(rx_crc_check, {
 80045be:	b12e      	cbz	r6, 80045cc <_proceedByte+0x1c>
 80045c0:	68b3      	ldr	r3, [r6, #8]
 80045c2:	6830      	ldr	r0, [r6, #0]
 80045c4:	4798      	blx	r3
 80045c6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80045c8:	2200      	movs	r2, #0
 80045ca:	711a      	strb	r2, [r3, #4]
}

#define FIFO_CLEAN(chield) fifo_base_clear(&((chield)->base))
STATIC_FORCEINLINE void fifo_base_clear(fifo_base_t * const fifo)
{
	fifo->tail = 0;
 80045cc:	2300      	movs	r3, #0
 80045ce:	6363      	str	r3, [r4, #52]	@ 0x34
	fifo->head = 0;
 80045d0:	63a3      	str	r3, [r4, #56]	@ 0x38
	}

	switch(_state) {

	case RECEIVE_LEN_0: {
		M_Assert_SafeFunctionCall(rx_crc_check, CRC_BYTE(rx_crc_check, ch));
 80045d2:	b11e      	cbz	r6, 80045dc <_proceedByte+0x2c>
 80045d4:	6933      	ldr	r3, [r6, #16]
 80045d6:	4629      	mov	r1, r5
 80045d8:	6830      	ldr	r0, [r6, #0]
 80045da:	4798      	blx	r3

		if(RECEIVE_EXTENDED_LEN_CMD == ch) {
 80045dc:	2dff      	cmp	r5, #255	@ 0xff
 80045de:	d06c      	beq.n	80046ba <_proceedByte+0x10a>
			_state = RECEIVE_LEN_LOW;
		} else {
			const reg rx_len = self->RX.tmpReceiveLen = ((ch > self->startByte) ? (ch - 1U) : ch);
 80045e0:	7823      	ldrb	r3, [r4, #0]
 80045e2:	42ab      	cmp	r3, r5
 80045e4:	bf38      	it	cc
 80045e6:	f105 35ff 	addcc.w	r5, r5, #4294967295
 80045ea:	60a5      	str	r5, [r4, #8]
	fifo->tail = 0;
 80045ec:	2300      	movs	r3, #0
 80045ee:	6363      	str	r3, [r4, #52]	@ 0x34
	fifo->head = 0;
 80045f0:	63a3      	str	r3, [r4, #56]	@ 0x38
			FIFO_CLEAN(rx_frame_ring);

			M_Assert_WarningSaveCheck((rx_len > FIFO_CAPACITY(rx_frame_ring) || rx_len == 0), M_EMPTY, {
 80045f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80045f4:	42ab      	cmp	r3, r5
 80045f6:	d368      	bcc.n	80046ca <_proceedByte+0x11a>
					self->RX.receiveState = RECEIVE_COMPLEATE;
					return;
			}, "No valid receive length");

			_state = RECEIVE_DATA;
 80045f8:	2d00      	cmp	r5, #0
 80045fa:	bf0c      	ite	eq
 80045fc:	270c      	moveq	r7, #12
 80045fe:	2703      	movne	r7, #3
			M_Assert_WarningSaveCheck((rx_len > FIFO_CAPACITY(rx_frame_ring) || rx_len == 0), M_EMPTY, {
 8004600:	7327      	strb	r7, [r4, #12]
#undef RECEIVE_CRC
	//--------------------------------------------
#undef RECEIVE_COMPLEATE

#undef NEXT_STATE
}
 8004602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ringbuf_t* const rx_frame_ring = &self->RX.frame_stream;
 8004606:	f100 0828 	add.w	r8, r0, #40	@ 0x28
	switch(_state) {
 800460a:	2f04      	cmp	r7, #4
 800460c:	d8f8      	bhi.n	8004600 <_proceedByte+0x50>
 800460e:	a301      	add	r3, pc, #4	@ (adr r3, 8004614 <_proceedByte+0x64>)
 8004610:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 8004614:	080045d3 	.word	0x080045d3
 8004618:	08004629 	.word	0x08004629
 800461c:	08004637 	.word	0x08004637
 8004620:	0800465d 	.word	0x0800465d
 8004624:	0800467f 	.word	0x0800467f
		M_Assert_SafeFunctionCall(rx_crc_check, CRC_BYTE(rx_crc_check, ch));
 8004628:	b116      	cbz	r6, 8004630 <_proceedByte+0x80>
 800462a:	6933      	ldr	r3, [r6, #16]
 800462c:	6830      	ldr	r0, [r6, #0]
 800462e:	4798      	blx	r3
		self->RX.tmpReceiveLen = ch;    // read low byte
 8004630:	60a5      	str	r5, [r4, #8]
		_state = RECEIVE_LEN_HIGH;
 8004632:	2702      	movs	r7, #2
		break;}
 8004634:	e7e4      	b.n	8004600 <_proceedByte+0x50>
		M_Assert_SafeFunctionCall(rx_crc_check, CRC_BYTE(rx_crc_check, ch));
 8004636:	b116      	cbz	r6, 800463e <_proceedByte+0x8e>
 8004638:	6933      	ldr	r3, [r6, #16]
 800463a:	6830      	ldr	r0, [r6, #0]
 800463c:	4798      	blx	r3
		reg rx_len = ((reg)(ch << 8U) | self->RX.tmpReceiveLen) & 0x0000FFFFUL ; // read high byte
 800463e:	8923      	ldrh	r3, [r4, #8]
 8004640:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		self->RX.tmpReceiveLen = rx_len;
 8004644:	60a3      	str	r3, [r4, #8]
	fifo->tail = 0;
 8004646:	2200      	movs	r2, #0
 8004648:	6362      	str	r2, [r4, #52]	@ 0x34
	fifo->head = 0;
 800464a:	63a2      	str	r2, [r4, #56]	@ 0x38
		M_Assert_WarningSaveCheck((rx_len > FIFO_CAPACITY(rx_frame_ring) || rx_len == 0), M_EMPTY, {
 800464c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800464e:	429a      	cmp	r2, r3
 8004650:	d33d      	bcc.n	80046ce <_proceedByte+0x11e>
		_state = RECEIVE_DATA;
 8004652:	2b00      	cmp	r3, #0
 8004654:	bf0c      	ite	eq
 8004656:	270c      	moveq	r7, #12
 8004658:	2703      	movne	r7, #3
 800465a:	e7d1      	b.n	8004600 <_proceedByte+0x50>
		ringbuf_putc(rx_frame_ring, ch);
 800465c:	4640      	mov	r0, r8
 800465e:	f7ff fe2d 	bl	80042bc <ringbuf_putc>
		if (/*FIFO_LEN(rx_frame_ring)*/rx_frame_ring->base.head == self->RX.tmpReceiveLen) {
 8004662:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004664:	68a3      	ldr	r3, [r4, #8]
 8004666:	429a      	cmp	r2, r3
 8004668:	d1ca      	bne.n	8004600 <_proceedByte+0x50>
			if(rx_crc_check) {
 800466a:	b10e      	cbz	r6, 8004670 <_proceedByte+0xc0>
				_state = RECEIVE_CRC;
 800466c:	2704      	movs	r7, #4
 800466e:	e7c7      	b.n	8004600 <_proceedByte+0x50>
				const RawPdynamicCallback _callback = self->RX.rx_callback;
 8004670:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
				if(_callback) {
 8004672:	b323      	cbz	r3, 80046be <_proceedByte+0x10e>
					_callback(rx_frame_ring, _ctx);
 8004674:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004676:	4640      	mov	r0, r8
 8004678:	4798      	blx	r3
				_state = RECEIVE_COMPLEATE;
 800467a:	270c      	movs	r7, #12
 800467c:	e7c0      	b.n	8004600 <_proceedByte+0x50>
		crc_base_t* const rx_crc = self->RX.crc_received;
 800467e:	f8d0 9044 	ldr.w	r9, [r0, #68]	@ 0x44
		u8 crc_counter = rx_crc->crc_size;
 8004682:	f899 3004 	ldrb.w	r3, [r9, #4]
		*(crc_pointer + crc_counter) = ch;
 8004686:	f8d9 2000 	ldr.w	r2, [r9]
 800468a:	54d1      	strb	r1, [r2, r3]
		++crc_counter;
 800468c:	3301      	adds	r3, #1
 800468e:	b2db      	uxtb	r3, r3
		rx_crc->crc_size = crc_counter;
 8004690:	f889 3004 	strb.w	r3, [r9, #4]
		if(crc_counter == rx_crc_check->base.crc_size) {
 8004694:	7932      	ldrb	r2, [r6, #4]
 8004696:	429a      	cmp	r2, r3
 8004698:	d1b2      	bne.n	8004600 <_proceedByte+0x50>
			crc_from_ringbuf(rx_crc_check, rx_frame_ring);
 800469a:	4641      	mov	r1, r8
 800469c:	4630      	mov	r0, r6
 800469e:	f7ff fcd7 	bl	8004050 <crc_from_ringbuf>
			if(crc_compleate(&rx_crc_check->base, rx_crc)) {
 80046a2:	4649      	mov	r1, r9
 80046a4:	4630      	mov	r0, r6
 80046a6:	f7ff ff0d 	bl	80044c4 <crc_compleate>
 80046aa:	b150      	cbz	r0, 80046c2 <_proceedByte+0x112>
				const RawPdynamicCallback _callback = self->RX.rx_callback;
 80046ac:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
				if(_callback) {
 80046ae:	b153      	cbz	r3, 80046c6 <_proceedByte+0x116>
					_callback(rx_frame_ring, _ctx);
 80046b0:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 80046b2:	4640      	mov	r0, r8
 80046b4:	4798      	blx	r3
			_state = RECEIVE_COMPLEATE;
 80046b6:	270c      	movs	r7, #12
 80046b8:	e7a2      	b.n	8004600 <_proceedByte+0x50>
			_state = RECEIVE_LEN_LOW;
 80046ba:	2701      	movs	r7, #1
 80046bc:	e7a0      	b.n	8004600 <_proceedByte+0x50>
				_state = RECEIVE_COMPLEATE;
 80046be:	270c      	movs	r7, #12
 80046c0:	e79e      	b.n	8004600 <_proceedByte+0x50>
			_state = RECEIVE_COMPLEATE;
 80046c2:	270c      	movs	r7, #12
 80046c4:	e79c      	b.n	8004600 <_proceedByte+0x50>
 80046c6:	270c      	movs	r7, #12
	self->RX.receiveState = _state;
 80046c8:	e79a      	b.n	8004600 <_proceedByte+0x50>
 80046ca:	270c      	movs	r7, #12
 80046cc:	e798      	b.n	8004600 <_proceedByte+0x50>
 80046ce:	270c      	movs	r7, #12
 80046d0:	e796      	b.n	8004600 <_proceedByte+0x50>
 80046d2:	bf00      	nop

080046d4 <rawP_dynamic_init>:
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d038      	beq.n	800474a <rawP_dynamic_init+0x76>
{
 80046d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046dc:	460c      	mov	r4, r1
 80046de:	4605      	mov	r5, r0
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 80046e0:	2900      	cmp	r1, #0
 80046e2:	d034      	beq.n	800474e <rawP_dynamic_init+0x7a>
	if(!_rawp_start(self, settings->packStart)) {
 80046e4:	780e      	ldrb	r6, [r1, #0]
	M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD || packStart == 0x00, M_EMPTY,
 80046e6:	1e73      	subs	r3, r6, #1
 80046e8:	b2db      	uxtb	r3, r3
 80046ea:	2bfd      	cmp	r3, #253	@ 0xfd
 80046ec:	d902      	bls.n	80046f4 <rawP_dynamic_init+0x20>
		return false;
 80046ee:	2000      	movs	r0, #0
}
 80046f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(self, 0, sizeof(RawParser_dynamic_t));
 80046f4:	226f      	movs	r2, #111	@ 0x6f
 80046f6:	2100      	movs	r1, #0
 80046f8:	3001      	adds	r0, #1
 80046fa:	f001 ff63 	bl	80065c4 <memset>
	self->startByte = packStart;
 80046fe:	702e      	strb	r6, [r5, #0]
	_rx_new(self, settings->rxBufferSize, settings->rxFrameSize, settings->rxFrameBuff, settings->crc_strategy);
 8004700:	8862      	ldrh	r2, [r4, #2]
 8004702:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 8004706:	68a7      	ldr	r7, [r4, #8]
 8004708:	7d26      	ldrb	r6, [r4, #20]
	self->RX.receiveState = 0;
 800470a:	2100      	movs	r1, #0
 800470c:	7329      	strb	r1, [r5, #12]
	ringbuf_init(&self->RX.input_ring, NULL, rxBuffSize);
 800470e:	f105 0010 	add.w	r0, r5, #16
 8004712:	f7ff fd1f 	bl	8004154 <ringbuf_init>
	ringbuf_init(&self->RX.frame_stream, frameBuff, rxFrameSize);
 8004716:	4642      	mov	r2, r8
 8004718:	4639      	mov	r1, r7
 800471a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800471e:	f7ff fd19 	bl	8004154 <ringbuf_init>
	self->RX.crc = createCRC(crc_type);
 8004722:	4630      	mov	r0, r6
 8004724:	f7ff fede 	bl	80044e4 <createCRC>
 8004728:	6428      	str	r0, [r5, #64]	@ 0x40
	self->RX.crc_received = CRC_BASE_DUPLICATE(self->RX.crc);
 800472a:	f7ff feba 	bl	80044a2 <crc_base_duplicate>
 800472e:	6468      	str	r0, [r5, #68]	@ 0x44
	_tx_new(self, settings->txFrameSize, settings->txFrameBuff, settings->crc_strategy);
 8004730:	7d26      	ldrb	r6, [r4, #20]
	ringbuf_init(&self->TX.frame_stream, txBuff, txFrameSize);
 8004732:	89a2      	ldrh	r2, [r4, #12]
 8004734:	6921      	ldr	r1, [r4, #16]
 8004736:	f105 0050 	add.w	r0, r5, #80	@ 0x50
 800473a:	f7ff fd0b 	bl	8004154 <ringbuf_init>
	self->TX.crc = createCRC(crc_type);
 800473e:	4630      	mov	r0, r6
 8004740:	f7ff fed0 	bl	80044e4 <createCRC>
 8004744:	66e8      	str	r0, [r5, #108]	@ 0x6c
	return true;
 8004746:	2001      	movs	r0, #1
}
 8004748:	e7d2      	b.n	80046f0 <rawP_dynamic_init+0x1c>
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 800474a:	2000      	movs	r0, #0
}
 800474c:	4770      	bx	lr
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 800474e:	2000      	movs	r0, #0
 8004750:	e7ce      	b.n	80046f0 <rawP_dynamic_init+0x1c>

08004752 <rawP_dynamic_subscribe>:

void rawP_dynamic_subscribe(RawParser_dynamic_t* const self, const RawPdynamicCallback rx_callback, void* const rx_ctx)
{
	M_Assert_BreakSaveCheck(self == NULL, M_EMPTY, return, "No valid input");
 8004752:	b108      	cbz	r0, 8004758 <rawP_dynamic_subscribe+0x6>
	self->RX.rx_callback = rx_callback;
 8004754:	6481      	str	r1, [r0, #72]	@ 0x48
	self->RX.rx_ctx = rx_ctx;
 8004756:	64c2      	str	r2, [r0, #76]	@ 0x4c
}
 8004758:	4770      	bx	lr

0800475a <rawP_dynamic_proceed>:

void rawP_dynamic_proceed(RawParser_dynamic_t* const self)
{
 800475a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475e:	b085      	sub	sp, #20
 8004760:	4607      	mov	r7, r0
	_INT_SWITCH(M_Assert_Break((self == NULL), M_EMPTY, return NULL, "No valid input"));

	u8 buffer[10];
	const u8 SB = self->startByte;
 8004762:	f890 9000 	ldrb.w	r9, [r0]
	bool triggerSB = self->RX.triggerSB;
 8004766:	7905      	ldrb	r5, [r0, #4]
	ringbuf_t* const rx_ring = &self->RX.input_ring;

	while(FIFO_NOT_EMPTY(rx_ring)) {
 8004768:	69c2      	ldr	r2, [r0, #28]
 800476a:	6a03      	ldr	r3, [r0, #32]
 800476c:	429a      	cmp	r2, r3
 800476e:	d02c      	beq.n	80047ca <rawP_dynamic_proceed+0x70>
 8004770:	f100 0b10 	add.w	fp, r0, #16
				} else { 			//{SB}{!SB} -> {SB} and newframe
					_proceedByte(self, ch, true);
				}
				triggerSB = false;
			} else if (SB == ch) { 	//{!SB}{SB} -> set flag and skip step
				triggerSB = true;
 8004774:	f04f 0a01 	mov.w	sl, #1
 8004778:	e01a      	b.n	80047b0 <rawP_dynamic_proceed+0x56>
			} else if (SB == ch) { 	//{!SB}{SB} -> set flag and skip step
 800477a:	4589      	cmp	r9, r1
 800477c:	d10f      	bne.n	800479e <rawP_dynamic_proceed+0x44>
				triggerSB = true;
 800477e:	4655      	mov	r5, sl
		for(reg i = 0; i != len; ++i) {
 8004780:	42b4      	cmp	r4, r6
 8004782:	d011      	beq.n	80047a8 <rawP_dynamic_proceed+0x4e>
			const u8 ch = buffer[i];
 8004784:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (triggerSB) {
 8004788:	2d00      	cmp	r5, #0
 800478a:	d0f6      	beq.n	800477a <rawP_dynamic_proceed+0x20>
				if(SB == ch) { 		//{SB}{SB} -> {SB}
 800478c:	4589      	cmp	r9, r1
					_proceedByte(self, ch, false);
 800478e:	bf0c      	ite	eq
 8004790:	4642      	moveq	r2, r8
					_proceedByte(self, ch, true);
 8004792:	4652      	movne	r2, sl
 8004794:	4638      	mov	r0, r7
 8004796:	f7ff ff0b 	bl	80045b0 <_proceedByte>
				triggerSB = false;
 800479a:	4645      	mov	r5, r8
 800479c:	e7f0      	b.n	8004780 <rawP_dynamic_proceed+0x26>
			} else { 				//{!SB}{!SB} -> {!SB}
				_proceedByte(self, ch, false);
 800479e:	4642      	mov	r2, r8
 80047a0:	4638      	mov	r0, r7
 80047a2:	f7ff ff05 	bl	80045b0 <_proceedByte>
 80047a6:	e7eb      	b.n	8004780 <rawP_dynamic_proceed+0x26>
	while(FIFO_NOT_EMPTY(rx_ring)) {
 80047a8:	69fa      	ldr	r2, [r7, #28]
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d00c      	beq.n	80047ca <rawP_dynamic_proceed+0x70>
		const reg len = ringbuf_get(rx_ring, buffer, sizeof(buffer));
 80047b0:	220a      	movs	r2, #10
 80047b2:	a901      	add	r1, sp, #4
 80047b4:	4658      	mov	r0, fp
 80047b6:	f7ff fcfb 	bl	80041b0 <ringbuf_get>
		for(reg i = 0; i != len; ++i) {
 80047ba:	4606      	mov	r6, r0
 80047bc:	2800      	cmp	r0, #0
 80047be:	d0f3      	beq.n	80047a8 <rawP_dynamic_proceed+0x4e>
 80047c0:	ac01      	add	r4, sp, #4
 80047c2:	4426      	add	r6, r4
				_proceedByte(self, ch, false);
 80047c4:	f04f 0800 	mov.w	r8, #0
 80047c8:	e7dc      	b.n	8004784 <rawP_dynamic_proceed+0x2a>
			}
		}
	}

	self->RX.triggerSB = triggerSB;
 80047ca:	713d      	strb	r5, [r7, #4]
}
 80047cc:	b005      	add	sp, #20
 80047ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080047d2 <rawP_dynamic_startTransmittPacket>:
	crc_strategy_t* const tx_crc = self->TX.crc;
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
	const reg max_size = FIFO_CAPACITY(tx_ring) - 5U;

	// do logic ------------------------------------------------
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 80047d2:	2900      	cmp	r1, #0
 80047d4:	d061      	beq.n	800489a <rawP_dynamic_startTransmittPacket+0xc8>
{
 80047d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047da:	b082      	sub	sp, #8
 80047dc:	4604      	mov	r4, r0
 80047de:	460d      	mov	r5, r1
	const reg max_size = FIFO_CAPACITY(tx_ring) - 5U;
 80047e0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80047e2:	3b05      	subs	r3, #5
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 80047e4:	428b      	cmp	r3, r1
 80047e6:	d35a      	bcc.n	800489e <rawP_dynamic_startTransmittPacket+0xcc>
	const u8 SB = self->startByte;
 80047e8:	f890 8000 	ldrb.w	r8, [r0]
	crc_strategy_t* const tx_crc = self->TX.crc;
 80047ec:	6ec6      	ldr	r6, [r0, #108]	@ 0x6c
			M_EMPTY, return false, "No valid input length");

	M_Assert_Warning(len > (max_size >> 1),
			M_EMPTY, M_EMPTY, "UNDEFINED BEHAVIOR!!!");

	M_Assert_SafeFunctionCall(tx_crc, CRC_INIT(tx_crc));
 80047ee:	b116      	cbz	r6, 80047f6 <rawP_dynamic_startTransmittPacket+0x24>
 80047f0:	68b3      	ldr	r3, [r6, #8]
 80047f2:	6830      	ldr	r0, [r6, #0]
 80047f4:	4798      	blx	r3
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
 80047f6:	f104 0750 	add.w	r7, r4, #80	@ 0x50
	fifo->tail = 0;
 80047fa:	2300      	movs	r3, #0
 80047fc:	65e3      	str	r3, [r4, #92]	@ 0x5c
	fifo->head = 0;
 80047fe:	6623      	str	r3, [r4, #96]	@ 0x60

	FIFO_CLEAN(tx_ring);
	self->TX.length_write_control = len;
 8004800:	66a5      	str	r5, [r4, #104]	@ 0x68

	ringbuf_putc(tx_ring, SB);
 8004802:	4641      	mov	r1, r8
 8004804:	4638      	mov	r0, r7
 8004806:	f7ff fd59 	bl	80042bc <ringbuf_putc>

	if(len > D_RAW_P_LEN_SEPARATOR) {
 800480a:	2dfb      	cmp	r5, #251	@ 0xfb
 800480c:	d80f      	bhi.n	800482e <rawP_dynamic_startTransmittPacket+0x5c>
				const u8 arr[3] = {RECEIVE_EXTENDED_LEN_CMD, len_l, len_h};
				CRC_ARRAY(tx_crc, arr, sizeof(arr));
		});

	} else {
		const reg len_reg = (len >= SB) ? (len + 1U) : len;
 800480e:	45a8      	cmp	r8, r5
 8004810:	bf98      	it	ls
 8004812:	3501      	addls	r5, #1
		ringbuf_putc(tx_ring, len_reg);
 8004814:	b2ed      	uxtb	r5, r5
 8004816:	4629      	mov	r1, r5
 8004818:	4638      	mov	r0, r7
 800481a:	f7ff fd4f 	bl	80042bc <ringbuf_putc>

		M_Assert_SafeFunctionCall(tx_crc, CRC_BYTE(tx_crc, len_reg));
 800481e:	2e00      	cmp	r6, #0
 8004820:	d043      	beq.n	80048aa <rawP_dynamic_startTransmittPacket+0xd8>
 8004822:	6933      	ldr	r3, [r6, #16]
 8004824:	4629      	mov	r1, r5
 8004826:	6830      	ldr	r0, [r6, #0]
 8004828:	4798      	blx	r3
	}
	return true;
 800482a:	2001      	movs	r0, #1
 800482c:	e038      	b.n	80048a0 <rawP_dynamic_startTransmittPacket+0xce>
		const u8 len_l = (u8)(len & 0xFF);
 800482e:	b2ec      	uxtb	r4, r5
		const u8 len_h = (u8)((len >> 8) & 0xFF);
 8004830:	f3c5 2507 	ubfx	r5, r5, #8, #8
		ringbuf_putc(tx_ring, RECEIVE_EXTENDED_LEN_CMD);
 8004834:	21ff      	movs	r1, #255	@ 0xff
 8004836:	4638      	mov	r0, r7
 8004838:	f7ff fd40 	bl	80042bc <ringbuf_putc>


// elementary byte adding functions ----------------------------------------------------------------------------
STATIC_FORCEINLINE void rawp_stream_addByte(ringbuf_t* const ring, const u8 c, const u8 SB)
{
	if(c == SB) {
 800483c:	45a0      	cmp	r8, r4
 800483e:	d018      	beq.n	8004872 <rawP_dynamic_startTransmittPacket+0xa0>
		const u8 arr [2] = {c, c};
		ringbuf_put(ring, arr, sizeof(arr));
	} else {
		ringbuf_putc(ring, c);
 8004840:	4621      	mov	r1, r4
 8004842:	4638      	mov	r0, r7
 8004844:	f7ff fd3a 	bl	80042bc <ringbuf_putc>
	if(c == SB) {
 8004848:	45a8      	cmp	r8, r5
 800484a:	d01c      	beq.n	8004886 <rawP_dynamic_startTransmittPacket+0xb4>
		ringbuf_putc(ring, c);
 800484c:	4629      	mov	r1, r5
 800484e:	4638      	mov	r0, r7
 8004850:	f7ff fd34 	bl	80042bc <ringbuf_putc>
		M_Assert_SafeFunctionCall(tx_crc, {
 8004854:	b33e      	cbz	r6, 80048a6 <rawP_dynamic_startTransmittPacket+0xd4>
 8004856:	23ff      	movs	r3, #255	@ 0xff
 8004858:	f88d 3004 	strb.w	r3, [sp, #4]
 800485c:	f88d 4005 	strb.w	r4, [sp, #5]
 8004860:	f88d 5006 	strb.w	r5, [sp, #6]
 8004864:	68f3      	ldr	r3, [r6, #12]
 8004866:	2203      	movs	r2, #3
 8004868:	a901      	add	r1, sp, #4
 800486a:	6830      	ldr	r0, [r6, #0]
 800486c:	4798      	blx	r3
	return true;
 800486e:	2001      	movs	r0, #1
 8004870:	e016      	b.n	80048a0 <rawP_dynamic_startTransmittPacket+0xce>
		const u8 arr [2] = {c, c};
 8004872:	f88d 4004 	strb.w	r4, [sp, #4]
 8004876:	f88d 4005 	strb.w	r4, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 800487a:	2202      	movs	r2, #2
 800487c:	a901      	add	r1, sp, #4
 800487e:	4638      	mov	r0, r7
 8004880:	f7ff fcdf 	bl	8004242 <ringbuf_put>
 8004884:	e7e0      	b.n	8004848 <rawP_dynamic_startTransmittPacket+0x76>
		const u8 arr [2] = {c, c};
 8004886:	f88d 5004 	strb.w	r5, [sp, #4]
 800488a:	f88d 5005 	strb.w	r5, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 800488e:	2202      	movs	r2, #2
 8004890:	a901      	add	r1, sp, #4
 8004892:	4638      	mov	r0, r7
 8004894:	f7ff fcd5 	bl	8004242 <ringbuf_put>
 8004898:	e7dc      	b.n	8004854 <rawP_dynamic_startTransmittPacket+0x82>
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 800489a:	2000      	movs	r0, #0
}
 800489c:	4770      	bx	lr
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 800489e:	2000      	movs	r0, #0
}
 80048a0:	b002      	add	sp, #8
 80048a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
 80048a6:	2001      	movs	r0, #1
 80048a8:	e7fa      	b.n	80048a0 <rawP_dynamic_startTransmittPacket+0xce>
 80048aa:	2001      	movs	r0, #1
 80048ac:	e7f8      	b.n	80048a0 <rawP_dynamic_startTransmittPacket+0xce>

080048ae <rawP_dynamic_finishTransmittPacket>:


ringbuf_t* const rawP_dynamic_finishTransmittPacket(RawParser_dynamic_t* const self)
{
 80048ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048b2:	b082      	sub	sp, #8
	_INT_SWITCH(M_Assert_Break((self == NULL), M_EMPTY, return NULL, "No valid input"));

	crc_strategy_t* const tx_crc = self->TX.crc;
 80048b4:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
 80048b6:	f100 0550 	add.w	r5, r0, #80	@ 0x50
	reg ramained_len = self->TX.length_write_control;
 80048ba:	6e82      	ldr	r2, [r0, #104]	@ 0x68

	// fill remaining len
	if(tx_crc) {
 80048bc:	b1db      	cbz	r3, 80048f6 <rawP_dynamic_finishTransmittPacket+0x48>
		const u8 SB = self->startByte;
 80048be:	f890 8000 	ldrb.w	r8, [r0]

		u8* const crc_pointer = tx_crc->base.crc;
 80048c2:	681e      	ldr	r6, [r3, #0]
		const u8 crc_size = tx_crc->base.crc_size;
 80048c4:	f893 a004 	ldrb.w	sl, [r3, #4]
		const crc_byte_func _crc_calc = tx_crc->crc_byte;
 80048c8:	f8d3 9010 	ldr.w	r9, [r3, #16]

		while(ramained_len--) {
 80048cc:	1e54      	subs	r4, r2, #1
 80048ce:	b15a      	cbz	r2, 80048e8 <rawP_dynamic_finishTransmittPacket+0x3a>
			ringbuf_putc(tx_ring, 0x00);
 80048d0:	2700      	movs	r7, #0
 80048d2:	4639      	mov	r1, r7
 80048d4:	4628      	mov	r0, r5
 80048d6:	f7ff fcf1 	bl	80042bc <ringbuf_putc>
			_crc_calc(crc_pointer, 0x00);
 80048da:	4639      	mov	r1, r7
 80048dc:	4630      	mov	r0, r6
 80048de:	47c8      	blx	r9
		while(ramained_len--) {
 80048e0:	3c01      	subs	r4, #1
 80048e2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80048e6:	d1f4      	bne.n	80048d2 <rawP_dynamic_finishTransmittPacket+0x24>
		}

		LittleEndianGeneric(crc_pointer, crc_size);

		for(u8 i = 0; i != crc_size; ++i) {
 80048e8:	f1ba 0f00 	cmp.w	sl, #0
 80048ec:	d00e      	beq.n	800490c <rawP_dynamic_finishTransmittPacket+0x5e>
 80048ee:	4634      	mov	r4, r6
 80048f0:	4456      	add	r6, sl
 80048f2:	2702      	movs	r7, #2
 80048f4:	e019      	b.n	800492a <rawP_dynamic_finishTransmittPacket+0x7c>
			rawp_stream_addByte(tx_ring, *(crc_pointer + i), SB);
		}

	} else {
		while(ramained_len--) {
 80048f6:	1e54      	subs	r4, r2, #1
 80048f8:	b142      	cbz	r2, 800490c <rawP_dynamic_finishTransmittPacket+0x5e>
			ringbuf_putc(tx_ring, 0x00);
 80048fa:	2600      	movs	r6, #0
 80048fc:	4631      	mov	r1, r6
 80048fe:	4628      	mov	r0, r5
 8004900:	f7ff fcdc 	bl	80042bc <ringbuf_putc>
		while(ramained_len--) {
 8004904:	3c01      	subs	r4, #1
 8004906:	f1b4 3fff 	cmp.w	r4, #4294967295
 800490a:	d1f7      	bne.n	80048fc <rawP_dynamic_finishTransmittPacket+0x4e>
		}
	}

	return tx_ring;
}
 800490c:	4628      	mov	r0, r5
 800490e:	b002      	add	sp, #8
 8004910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const u8 arr [2] = {c, c};
 8004914:	f88d 1004 	strb.w	r1, [sp, #4]
 8004918:	f88d 1005 	strb.w	r1, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 800491c:	463a      	mov	r2, r7
 800491e:	a901      	add	r1, sp, #4
 8004920:	4628      	mov	r0, r5
 8004922:	f7ff fc8e 	bl	8004242 <ringbuf_put>
		for(u8 i = 0; i != crc_size; ++i) {
 8004926:	42a6      	cmp	r6, r4
 8004928:	d0f0      	beq.n	800490c <rawP_dynamic_finishTransmittPacket+0x5e>
			rawp_stream_addByte(tx_ring, *(crc_pointer + i), SB);
 800492a:	f814 1b01 	ldrb.w	r1, [r4], #1
	if(c == SB) {
 800492e:	4541      	cmp	r1, r8
 8004930:	d0f0      	beq.n	8004914 <rawP_dynamic_finishTransmittPacket+0x66>
		ringbuf_putc(ring, c);
 8004932:	4628      	mov	r0, r5
 8004934:	f7ff fcc2 	bl	80042bc <ringbuf_putc>
 8004938:	e7f5      	b.n	8004926 <rawP_dynamic_finishTransmittPacket+0x78>

0800493a <rawp_stream_add_u8>:

// include assert engine
#include "assertsEngine/assert_engine.h"

void rawp_stream_add_u8(RawParser_dynamic_t* const self, u8 c)
{
 800493a:	b570      	push	{r4, r5, r6, lr}
 800493c:	b082      	sub	sp, #8
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
	crc_strategy_t* const tx_crc = self->TX.crc;

	const reg remaining_len = self->TX.length_write_control;
 800493e:	6e86      	ldr	r6, [r0, #104]	@ 0x68
	M_Assert_BreakSaveCheck(remaining_len == 0, M_EMPTY, return, "Overflow!!!!!!");
 8004940:	b186      	cbz	r6, 8004964 <rawp_stream_add_u8+0x2a>
 8004942:	4604      	mov	r4, r0
 8004944:	460d      	mov	r5, r1
	crc_strategy_t* const tx_crc = self->TX.crc;
 8004946:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c

	M_Assert_SafeFunctionCall(tx_crc, CRC_BYTE(tx_crc, c));
 8004948:	b113      	cbz	r3, 8004950 <rawp_stream_add_u8+0x16>
 800494a:	691a      	ldr	r2, [r3, #16]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	4790      	blx	r2
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
 8004950:	4620      	mov	r0, r4
	if(c == SB) {
 8004952:	f810 3b50 	ldrb.w	r3, [r0], #80
 8004956:	42ab      	cmp	r3, r5
 8004958:	d006      	beq.n	8004968 <rawp_stream_add_u8+0x2e>
		ringbuf_putc(ring, c);
 800495a:	4629      	mov	r1, r5
 800495c:	f7ff fcae 	bl	80042bc <ringbuf_putc>
	rawp_stream_addByte(tx_ring, c, self->startByte);

	self->TX.length_write_control = remaining_len - 1;
 8004960:	3e01      	subs	r6, #1
 8004962:	66a6      	str	r6, [r4, #104]	@ 0x68
}
 8004964:	b002      	add	sp, #8
 8004966:	bd70      	pop	{r4, r5, r6, pc}
		const u8 arr [2] = {c, c};
 8004968:	f88d 5004 	strb.w	r5, [sp, #4]
 800496c:	f88d 5005 	strb.w	r5, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 8004970:	2202      	movs	r2, #2
 8004972:	a901      	add	r1, sp, #4
 8004974:	f7ff fc65 	bl	8004242 <ringbuf_put>
 8004978:	e7f2      	b.n	8004960 <rawp_stream_add_u8+0x26>

0800497a <rawp_stream_add_u16>:
		}																									\
																											\
		self->TX.length_write_control = remaining_len - sizeof(TYPE);										\
    }

RAW_P_STREAM_INST(u16)
 800497a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800497e:	b082      	sub	sp, #8
 8004980:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 8004982:	2d01      	cmp	r5, #1
 8004984:	d91d      	bls.n	80049c2 <rawp_stream_add_u16+0x48>
 8004986:	4604      	mov	r4, r0
 8004988:	4606      	mov	r6, r0
 800498a:	f816 7b50 	ldrb.w	r7, [r6], #80
 800498e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8004990:	f8ad 1004 	strh.w	r1, [sp, #4]
 8004994:	b12b      	cbz	r3, 80049a2 <rawp_stream_add_u16+0x28>
 8004996:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800499a:	2202      	movs	r2, #2
 800499c:	a901      	add	r1, sp, #4
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	47c0      	blx	r8
 80049a2:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if(c == SB) {
 80049a6:	42b9      	cmp	r1, r7
 80049a8:	d00e      	beq.n	80049c8 <rawp_stream_add_u16+0x4e>
		ringbuf_putc(ring, c);
 80049aa:	4630      	mov	r0, r6
 80049ac:	f7ff fc86 	bl	80042bc <ringbuf_putc>
 80049b0:	f89d 1005 	ldrb.w	r1, [sp, #5]
	if(c == SB) {
 80049b4:	42b9      	cmp	r1, r7
 80049b6:	d011      	beq.n	80049dc <rawp_stream_add_u16+0x62>
		ringbuf_putc(ring, c);
 80049b8:	4630      	mov	r0, r6
 80049ba:	f7ff fc7f 	bl	80042bc <ringbuf_putc>
 80049be:	3d02      	subs	r5, #2
 80049c0:	66a5      	str	r5, [r4, #104]	@ 0x68
 80049c2:	b002      	add	sp, #8
 80049c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		const u8 arr [2] = {c, c};
 80049c8:	f88d 1000 	strb.w	r1, [sp]
 80049cc:	f88d 1001 	strb.w	r1, [sp, #1]
		ringbuf_put(ring, arr, sizeof(arr));
 80049d0:	2202      	movs	r2, #2
 80049d2:	4669      	mov	r1, sp
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff fc34 	bl	8004242 <ringbuf_put>
 80049da:	e7e9      	b.n	80049b0 <rawp_stream_add_u16+0x36>
		const u8 arr [2] = {c, c};
 80049dc:	f88d 1000 	strb.w	r1, [sp]
 80049e0:	f88d 1001 	strb.w	r1, [sp, #1]
		ringbuf_put(ring, arr, sizeof(arr));
 80049e4:	2202      	movs	r2, #2
 80049e6:	4669      	mov	r1, sp
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff fc2a 	bl	8004242 <ringbuf_put>
 80049ee:	e7e6      	b.n	80049be <rawp_stream_add_u16+0x44>

080049f0 <rawp_stream_add_f64>:
RAW_P_STREAM_INST(u64)
RAW_P_STREAM_INST(i16)
RAW_P_STREAM_INST(i32)
RAW_P_STREAM_INST(i64)
RAW_P_STREAM_INST(f32)
RAW_P_STREAM_INST(f64)
 80049f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049f4:	b084      	sub	sp, #16
 80049f6:	f8d0 9068 	ldr.w	r9, [r0, #104]	@ 0x68
 80049fa:	f1b9 0f07 	cmp.w	r9, #7
 80049fe:	d92a      	bls.n	8004a56 <rawp_stream_add_f64+0x66>
 8004a00:	4606      	mov	r6, r0
 8004a02:	4605      	mov	r5, r0
 8004a04:	f815 8b50 	ldrb.w	r8, [r5], #80
 8004a08:	6ec0      	ldr	r0, [r0, #108]	@ 0x6c
 8004a0a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004a0e:	b128      	cbz	r0, 8004a1c <rawp_stream_add_f64+0x2c>
 8004a10:	68c3      	ldr	r3, [r0, #12]
 8004a12:	2208      	movs	r2, #8
 8004a14:	eb0d 0102 	add.w	r1, sp, r2
 8004a18:	6800      	ldr	r0, [r0, #0]
 8004a1a:	4798      	blx	r3
 8004a1c:	f10d 0407 	add.w	r4, sp, #7
 8004a20:	f10d 070f 	add.w	r7, sp, #15
 8004a24:	f04f 0a02 	mov.w	sl, #2
 8004a28:	e00a      	b.n	8004a40 <rawp_stream_add_f64+0x50>
		const u8 arr [2] = {c, c};
 8004a2a:	f88d 1004 	strb.w	r1, [sp, #4]
 8004a2e:	f88d 1005 	strb.w	r1, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 8004a32:	4652      	mov	r2, sl
 8004a34:	a901      	add	r1, sp, #4
 8004a36:	4628      	mov	r0, r5
 8004a38:	f7ff fc03 	bl	8004242 <ringbuf_put>
 8004a3c:	42bc      	cmp	r4, r7
 8004a3e:	d007      	beq.n	8004a50 <rawp_stream_add_f64+0x60>
 8004a40:	f814 1f01 	ldrb.w	r1, [r4, #1]!
	if(c == SB) {
 8004a44:	4541      	cmp	r1, r8
 8004a46:	d0f0      	beq.n	8004a2a <rawp_stream_add_f64+0x3a>
		ringbuf_putc(ring, c);
 8004a48:	4628      	mov	r0, r5
 8004a4a:	f7ff fc37 	bl	80042bc <ringbuf_putc>
 8004a4e:	e7f5      	b.n	8004a3c <rawp_stream_add_f64+0x4c>
 8004a50:	f1a9 0308 	sub.w	r3, r9, #8
 8004a54:	66b3      	str	r3, [r6, #104]	@ 0x68
 8004a56:	b004      	add	sp, #16
 8004a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a5c <_write>:

extern UART_HandleTypeDef huart1;
#define UART_PRINTF	huart1

int _write(int file, char *ptr, int len)
{
 8004a5c:	b510      	push	{r4, lr}
 8004a5e:	4614      	mov	r4, r2
	HAL_UART_Transmit(&UART_PRINTF, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8004a60:	f04f 33ff 	mov.w	r3, #4294967295
 8004a64:	b292      	uxth	r2, r2
 8004a66:	4802      	ldr	r0, [pc, #8]	@ (8004a70 <_write+0x14>)
 8004a68:	f7fe f95e 	bl	8002d28 <HAL_UART_Transmit>
	return len;
}
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	bd10      	pop	{r4, pc}
 8004a70:	200002f0 	.word	0x200002f0

08004a74 <_ZN12Stm32ADC_dma5startEv>:
	delete[] adc_values;
}

bool Stm32ADC_dma::start()
{
	if(n_channels) {
 8004a74:	7902      	ldrb	r2, [r0, #4]
 8004a76:	b90a      	cbnz	r2, 8004a7c <_ZN12Stm32ADC_dma5startEv+0x8>
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
		return true;
	}

	return false;
 8004a78:	2000      	movs	r0, #0
}
 8004a7a:	4770      	bx	lr
{
 8004a7c:	b508      	push	{r3, lr}
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
 8004a7e:	6881      	ldr	r1, [r0, #8]
 8004a80:	6800      	ldr	r0, [r0, #0]
 8004a82:	f7fd f80f 	bl	8001aa4 <HAL_ADC_Start_DMA>
		return true;
 8004a86:	2001      	movs	r0, #1
}
 8004a88:	bd08      	pop	{r3, pc}
	...

08004a8c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>:

void Stm32ADC_dma::init(const Stm32ADC_init& settings)
{
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	4604      	mov	r4, r0
 8004a90:	460d      	mov	r5, r1
	m_hadc = settings.hadc;
 8004a92:	680b      	ldr	r3, [r1, #0]
 8004a94:	6003      	str	r3, [r0, #0]
	n_channels = settings.hadc->Init.NbrOfConversion;
 8004a96:	6918      	ldr	r0, [r3, #16]
 8004a98:	7120      	strb	r0, [r4, #4]
	adc_values = new uint16_t[n_channels];
 8004a9a:	b2c0      	uxtb	r0, r0
 8004a9c:	0040      	lsls	r0, r0, #1
 8004a9e:	f000 fb00 	bl	80050a2 <_Znaj>
 8004aa2:	60a0      	str	r0, [r4, #8]

	Stm32ADC_dma::instance = this;
 8004aa4:	4b06      	ldr	r3, [pc, #24]	@ (8004ac0 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x34>)
 8004aa6:	601c      	str	r4, [r3, #0]

	ma.init(settings.filter, 16);
 8004aa8:	f104 0610 	add.w	r6, r4, #16
 8004aac:	2210      	movs	r2, #16
 8004aae:	6869      	ldr	r1, [r5, #4]
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	f000 f893 	bl	8004bdc <_ZN20FP_MovingAverageBase4initEfh>
	ma.allocArrays(n_channels);
 8004ab6:	7921      	ldrb	r1, [r4, #4]
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f000 f85f 	bl	8004b7c <_ZN21FP_MovingAverageArray11allocArraysEh>
}
 8004abe:	bd70      	pop	{r4, r5, r6, pc}
 8004ac0:	20000350 	.word	0x20000350

08004ac4 <_ZN12Stm32ADC_dma7proceedEm>:

bool Stm32ADC_dma::proceed(const uint32_t current_time)
{
 8004ac4:	b538      	push	{r3, r4, r5, lr}
	if(calculated) {
 8004ac6:	7b03      	ldrb	r3, [r0, #12]
 8004ac8:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8004acc:	b90b      	cbnz	r3, 8004ad2 <_ZN12Stm32ADC_dma7proceedEm+0xe>

		return true;
	}

	return false;
}
 8004ace:	4628      	mov	r0, r5
 8004ad0:	bd38      	pop	{r3, r4, r5, pc}
 8004ad2:	4604      	mov	r4, r0
		ma.proceed(adc_values);
 8004ad4:	6881      	ldr	r1, [r0, #8]
 8004ad6:	3010      	adds	r0, #16
 8004ad8:	f000 f85e 	bl	8004b98 <_ZN21FP_MovingAverageArray7proceedEPt>
		calculated = false;
 8004adc:	2300      	movs	r3, #0
 8004ade:	7323      	strb	r3, [r4, #12]
		return true;
 8004ae0:	e7f5      	b.n	8004ace <_ZN12Stm32ADC_dma7proceedEm+0xa>
	...

08004ae4 <HAL_ADC_ConvCpltCallback>:
	inline uint32_t getAdc(int i) const {return ma.getOut(i);}
	inline uint8_t getChannels() const { return n_channels; }

	bool proceed(const uint32_t current_time);
	static inline Stm32ADC_dma* const getObject(ADC_HandleTypeDef* const hadc) {
		if(instance->m_hadc == hadc) {
 8004ae4:	4b03      	ldr	r3, [pc, #12]	@ (8004af4 <HAL_ADC_ConvCpltCallback+0x10>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	4282      	cmp	r2, r0
	inline void calculateFinished() { calculated = true;}
 8004aec:	bf04      	itt	eq
 8004aee:	2201      	moveq	r2, #1
 8004af0:	731a      	strbeq	r2, [r3, #12]
{
	Stm32ADC_dma* const root = Stm32ADC_dma::getObject(hadc);
	if(root) {
		root->calculateFinished();
	}
}
 8004af2:	4770      	bx	lr
 8004af4:	20000350 	.word	0x20000350

08004af8 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8004af8:	b508      	push	{r3, lr}
    assert(g_irq_lock_ct > 0);
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <IRQ_UNLOCK+0x30>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	dd06      	ble.n	8004b10 <IRQ_UNLOCK+0x18>
    if (--g_irq_lock_ct <= 0)
 8004b02:	4a09      	ldr	r2, [pc, #36]	@ (8004b28 <IRQ_UNLOCK+0x30>)
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	dd06      	ble.n	8004b1c <IRQ_UNLOCK+0x24>
    {
        g_irq_lock_ct = 0;
        __enable_irq();
    }
}
 8004b0e:	bd08      	pop	{r3, pc}
    assert(g_irq_lock_ct > 0);
 8004b10:	4b06      	ldr	r3, [pc, #24]	@ (8004b2c <IRQ_UNLOCK+0x34>)
 8004b12:	4a07      	ldr	r2, [pc, #28]	@ (8004b30 <IRQ_UNLOCK+0x38>)
 8004b14:	2137      	movs	r1, #55	@ 0x37
 8004b16:	4807      	ldr	r0, [pc, #28]	@ (8004b34 <IRQ_UNLOCK+0x3c>)
 8004b18:	f000 fc42 	bl	80053a0 <__assert_func>
        g_irq_lock_ct = 0;
 8004b1c:	4613      	mov	r3, r2
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8004b22:	b662      	cpsie	i
}
 8004b24:	e7f3      	b.n	8004b0e <IRQ_UNLOCK+0x16>
 8004b26:	bf00      	nop
 8004b28:	20000354 	.word	0x20000354
 8004b2c:	08008c90 	.word	0x08008c90
 8004b30:	08008ccc 	.word	0x08008ccc
 8004b34:	08008ca4 	.word	0x08008ca4

08004b38 <IRQ_LOCK>:
  __ASM volatile ("cpsid i" : : : "memory");
 8004b38:	b672      	cpsid	i
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
    __disable_irq();
    ++g_irq_lock_ct;
 8004b3a:	4a02      	ldr	r2, [pc, #8]	@ (8004b44 <IRQ_LOCK+0xc>)
 8004b3c:	6813      	ldr	r3, [r2, #0]
 8004b3e:	3301      	adds	r3, #1
 8004b40:	6013      	str	r3, [r2, #0]
}
 8004b42:	4770      	bx	lr
 8004b44:	20000354 	.word	0x20000354

08004b48 <_ZN21FP_MovingAverageArrayD1Ev>:
 *      Author: admin
 */

#include "FPMovingAverageArray.h"

FP_MovingAverageArray::~FP_MovingAverageArray()
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	4604      	mov	r4, r0
 8004b4c:	4b05      	ldr	r3, [pc, #20]	@ (8004b64 <_ZN21FP_MovingAverageArrayD1Ev+0x1c>)
 8004b4e:	6003      	str	r3, [r0, #0]
{
	// TODO Auto-generated destructor stub
	delete[] m_y_states;
 8004b50:	6900      	ldr	r0, [r0, #16]
 8004b52:	b108      	cbz	r0, 8004b58 <_ZN21FP_MovingAverageArrayD1Ev+0x10>
 8004b54:	f000 fa83 	bl	800505e <_ZdaPv>
	delete[] m_y;
 8004b58:	6960      	ldr	r0, [r4, #20]
 8004b5a:	b108      	cbz	r0, 8004b60 <_ZN21FP_MovingAverageArrayD1Ev+0x18>
 8004b5c:	f000 fa7f 	bl	800505e <_ZdaPv>
}
 8004b60:	4620      	mov	r0, r4
 8004b62:	bd10      	pop	{r4, pc}
 8004b64:	08008ce0 	.word	0x08008ce0

08004b68 <_ZN21FP_MovingAverageArrayD0Ev>:
FP_MovingAverageArray::~FP_MovingAverageArray()
 8004b68:	b510      	push	{r4, lr}
 8004b6a:	4604      	mov	r4, r0
}
 8004b6c:	f7ff ffec 	bl	8004b48 <_ZN21FP_MovingAverageArrayD1Ev>
 8004b70:	211c      	movs	r1, #28
 8004b72:	4620      	mov	r0, r4
 8004b74:	f000 fa71 	bl	800505a <_ZdlPvj>
 8004b78:	4620      	mov	r0, r4
 8004b7a:	bd10      	pop	{r4, pc}

08004b7c <_ZN21FP_MovingAverageArray11allocArraysEh>:

void FP_MovingAverageArray::allocArrays(const uint8_t n)
{
 8004b7c:	b570      	push	{r4, r5, r6, lr}
 8004b7e:	4604      	mov	r4, r0
 8004b80:	460d      	mov	r5, r1
	m_y_states = new uint32_t[n];
 8004b82:	008e      	lsls	r6, r1, #2
 8004b84:	4630      	mov	r0, r6
 8004b86:	f000 fa8c 	bl	80050a2 <_Znaj>
 8004b8a:	6120      	str	r0, [r4, #16]
	m_y = new uint32_t[n];
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f000 fa88 	bl	80050a2 <_Znaj>
 8004b92:	6160      	str	r0, [r4, #20]
	m_n = n;
 8004b94:	7625      	strb	r5, [r4, #24]
}
 8004b96:	bd70      	pop	{r4, r5, r6, pc}

08004b98 <_ZN21FP_MovingAverageArray7proceedEPt>:

void FP_MovingAverageArray::proceed(uint16_t* const values)
{
 8004b98:	b530      	push	{r4, r5, lr}
	uint8_t n = m_n;
 8004b9a:	7e04      	ldrb	r4, [r0, #24]
	uint16_t* x_ptr = values;
	uint32_t* y_ptr = m_y;
 8004b9c:	6943      	ldr	r3, [r0, #20]
	uint32_t* y_state_ptr = m_y_states;
 8004b9e:	6902      	ldr	r2, [r0, #16]

	while(n) {
 8004ba0:	b1dc      	cbz	r4, 8004bda <_ZN21FP_MovingAverageArray7proceedEPt+0x42>
 8004ba2:	f1a1 0c02 	sub.w	ip, r1, #2
 8004ba6:	1f19      	subs	r1, r3, #4
 8004ba8:	eb02 0484 	add.w	r4, r2, r4, lsl #2
		baseProceed(*x_ptr, *y_ptr, *y_state_ptr);
 8004bac:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
	bool init(const float alpha, const uint8_t Q);
	bool inline setAlpha(const float alpha) {return init(alpha, m_Q);}

	void inline baseProceed(const uint32_t x, uint32_t& last, uint32_t& last_shifted)
	{
		const int32_t val = (x - last) * m_alpha_scaled;
 8004bb0:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8004bb4:	1b5b      	subs	r3, r3, r5
 8004bb6:	68c5      	ldr	r5, [r0, #12]
 8004bb8:	fb05 f303 	mul.w	r3, r5, r3
		last_shifted += val >> m_diff_b;
 8004bbc:	f890 e006 	ldrb.w	lr, [r0, #6]
 8004bc0:	fa43 f30e 	asr.w	r3, r3, lr
 8004bc4:	6815      	ldr	r5, [r2, #0]
 8004bc6:	442b      	add	r3, r5
 8004bc8:	f842 3b04 	str.w	r3, [r2], #4
		last = last_shifted >> m_N;
 8004bcc:	f890 e005 	ldrb.w	lr, [r0, #5]
 8004bd0:	fa23 f30e 	lsr.w	r3, r3, lr
 8004bd4:	600b      	str	r3, [r1, #0]
	while(n) {
 8004bd6:	42a2      	cmp	r2, r4
 8004bd8:	d1e8      	bne.n	8004bac <_ZN21FP_MovingAverageArray7proceedEPt+0x14>
		++x_ptr;
		++y_ptr;
		++y_state_ptr;
		--n;
	}
}
 8004bda:	bd30      	pop	{r4, r5, pc}

08004bdc <_ZN20FP_MovingAverageBase4initEfh>:
#include "FPMovingAverageBase.h"
#include <cmath>


bool FP_MovingAverageBase::init(const float alpha, const uint8_t Q)
{
 8004bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bde:	4605      	mov	r5, r0
 8004be0:	460e      	mov	r6, r1
 8004be2:	4614      	mov	r4, r2

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 8004be4:	4608      	mov	r0, r1
 8004be6:	f000 fa6f 	bl	80050c8 <log2f>
	const int N = -std::log2(alpha);
 8004bea:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 8004bee:	f7fc fa35 	bl	800105c <__aeabi_f2iz>

	if((Q + N) > 32 || N < 0) {
 8004bf2:	1823      	adds	r3, r4, r0
 8004bf4:	2b20      	cmp	r3, #32
 8004bf6:	dc14      	bgt.n	8004c22 <_ZN20FP_MovingAverageBase4initEfh+0x46>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	db14      	blt.n	8004c26 <_ZN20FP_MovingAverageBase4initEfh+0x4a>
		return false;
	}

	m_N = N;
 8004bfc:	b2c3      	uxtb	r3, r0
 8004bfe:	716b      	strb	r3, [r5, #5]
	m_Q = Q;
 8004c00:	712c      	strb	r4, [r5, #4]
	m_diff_b = (m_Q - m_N);
 8004c02:	1ae3      	subs	r3, r4, r3
 8004c04:	71ab      	strb	r3, [r5, #6]
	m_alpha = alpha;
 8004c06:	60ae      	str	r6, [r5, #8]
	m_alpha_scaled = static_cast<uint32_t>(static_cast<float>(1 << Q) * alpha);
 8004c08:	2701      	movs	r7, #1
 8004c0a:	fa07 f004 	lsl.w	r0, r7, r4
 8004c0e:	f7fb fff5 	bl	8000bfc <__aeabi_i2f>
 8004c12:	4631      	mov	r1, r6
 8004c14:	f7fc f846 	bl	8000ca4 <__aeabi_fmul>
 8004c18:	f7fc fa46 	bl	80010a8 <__aeabi_f2uiz>
 8004c1c:	60e8      	str	r0, [r5, #12]

	return true;
 8004c1e:	4638      	mov	r0, r7
}
 8004c20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 8004c22:	2000      	movs	r0, #0
 8004c24:	e7fc      	b.n	8004c20 <_ZN20FP_MovingAverageBase4initEfh+0x44>
 8004c26:	2000      	movs	r0, #0
 8004c28:	e7fa      	b.n	8004c20 <_ZN20FP_MovingAverageBase4initEfh+0x44>
	...

08004c2c <HAL_SYSTICK_Callback>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 8004c2c:	4a08      	ldr	r2, [pc, #32]	@ (8004c50 <HAL_SYSTICK_Callback+0x24>)
 8004c2e:	6813      	ldr	r3, [r2, #0]
 8004c30:	6850      	ldr	r0, [r2, #4]
        for (TimingManager* const timer : m_timers) {
 8004c32:	4283      	cmp	r3, r0
 8004c34:	d102      	bne.n	8004c3c <HAL_SYSTICK_Callback+0x10>
//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
	TimingManager::proceed();
}
 8004c36:	4770      	bx	lr
 8004c38:	4283      	cmp	r3, r0
 8004c3a:	d0fc      	beq.n	8004c36 <HAL_SYSTICK_Callback+0xa>
 8004c3c:	f853 2b04 	ldr.w	r2, [r3], #4
            if (timer->m_counter) {
 8004c40:	6811      	ldr	r1, [r2, #0]
 8004c42:	2900      	cmp	r1, #0
 8004c44:	d0f8      	beq.n	8004c38 <HAL_SYSTICK_Callback+0xc>
                --timer->m_counter;
 8004c46:	6811      	ldr	r1, [r2, #0]
 8004c48:	3901      	subs	r1, #1
 8004c4a:	6011      	str	r1, [r2, #0]
 8004c4c:	e7f4      	b.n	8004c38 <HAL_SYSTICK_Callback+0xc>
 8004c4e:	bf00      	nop
 8004c50:	20000358 	.word	0x20000358

08004c54 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8004c54:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c58:	4689      	mov	r9, r1
 8004c5a:	4692      	mov	sl, r2
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004c5c:	6847      	ldr	r7, [r0, #4]
 8004c5e:	f8d0 8000 	ldr.w	r8, [r0]
 8004c62:	eba7 0208 	sub.w	r2, r7, r8
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8004c66:	f06f 4160 	mvn.w	r1, #3758096384	@ 0xe0000000
 8004c6a:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 8004c6e:	d011      	beq.n	8004c94 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x40>
 8004c70:	4605      	mov	r5, r0
 8004c72:	1093      	asrs	r3, r2, #2
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
 8004c74:	4547      	cmp	r7, r8
 8004c76:	bf14      	ite	ne
 8004c78:	461a      	movne	r2, r3
 8004c7a:	2201      	moveq	r2, #1
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004c7c:	189b      	adds	r3, r3, r2
 8004c7e:	d21c      	bcs.n	8004cba <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
 8004c80:	f06f 4b60 	mvn.w	fp, #3758096384	@ 0xe0000000
 8004c84:	459b      	cmp	fp, r3
 8004c86:	bf28      	it	cs
 8004c88:	469b      	movcs	fp, r3
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8004c8a:	eba9 0408 	sub.w	r4, r9, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004c8e:	b9c3      	cbnz	r3, 8004cc2 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 8004c90:	2600      	movs	r6, #0
 8004c92:	e01b      	b.n	8004ccc <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __throw_length_error(__N(__s));
 8004c94:	481e      	ldr	r0, [pc, #120]	@ (8004d10 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
 8004c96:	f000 fa06 	bl	80050a6 <_ZSt20__throw_length_errorPKc>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004c9a:	4622      	mov	r2, r4
 8004c9c:	4641      	mov	r1, r8
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	f001 fc76 	bl	8006590 <memmove>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8004ca4:	3404      	adds	r4, #4
 8004ca6:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 8004ca8:	eba7 0709 	sub.w	r7, r7, r9
      if (__count > 0)
 8004cac:	2f00      	cmp	r7, #0
 8004cae:	dc18      	bgt.n	8004ce2 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
	}
      return __result + __count;
 8004cb0:	443c      	add	r4, r7
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8004cb2:	68a9      	ldr	r1, [r5, #8]
 8004cb4:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
 8004cb8:	e01f      	b.n	8004cfa <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
 8004cba:	eba9 0408 	sub.w	r4, r9, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004cbe:	f06f 4b60 	mvn.w	fp, #3758096384	@ 0xe0000000
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004cc2:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8004cc6:	f000 f9db 	bl	8005080 <_Znwj>
 8004cca:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004ccc:	f8da 3000 	ldr.w	r3, [sl]
 8004cd0:	5133      	str	r3, [r6, r4]
      if (__count > 0)
 8004cd2:	2c00      	cmp	r4, #0
 8004cd4:	dce1      	bgt.n	8004c9a <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	      ++__new_finish;
 8004cd6:	3404      	adds	r4, #4
 8004cd8:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 8004cda:	eba7 0709 	sub.w	r7, r7, r9
      if (__count > 0)
 8004cde:	2f00      	cmp	r7, #0
 8004ce0:	dd04      	ble.n	8004cec <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004ce2:	463a      	mov	r2, r7
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	4620      	mov	r0, r4
 8004ce8:	f001 fd4d 	bl	8006786 <memcpy>
      return __result + __count;
 8004cec:	443c      	add	r4, r7
	if (__p)
 8004cee:	f1b8 0f00 	cmp.w	r8, #0
 8004cf2:	d005      	beq.n	8004d00 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 8004cf4:	68a9      	ldr	r1, [r5, #8]
 8004cf6:	eba1 0108 	sub.w	r1, r1, r8
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f000 f9ad 	bl	800505a <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8004d00:	602e      	str	r6, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 8004d02:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004d04:	eb06 068b 	add.w	r6, r6, fp, lsl #2
 8004d08:	60ae      	str	r6, [r5, #8]
    }
 8004d0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d0e:	bf00      	nop
 8004d10:	08008ce8 	.word	0x08008ce8

08004d14 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8004d14:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004d16:	6843      	ldr	r3, [r0, #4]
 8004d18:	6882      	ldr	r2, [r0, #8]
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d005      	beq.n	8004d2a <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004d1e:	680a      	ldr	r2, [r1, #0]
 8004d20:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 8004d22:	6843      	ldr	r3, [r0, #4]
 8004d24:	3304      	adds	r3, #4
 8004d26:	6043      	str	r3, [r0, #4]
      }
 8004d28:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8004d2a:	460a      	mov	r2, r1
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f7ff ff91 	bl	8004c54 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8004d32:	e7f9      	b.n	8004d28 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>

08004d34 <_ZN13TimingManagerC1Ev>:
TimingManager::TimingManager()
 8004d34:	b510      	push	{r4, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	4604      	mov	r4, r0
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	6003      	str	r3, [r0, #0]
	m_counter = 0;
 8004d3e:	6003      	str	r3, [r0, #0]
	m_timers.push_back(this);
 8004d40:	9001      	str	r0, [sp, #4]
      { emplace_back(std::move(__x)); }
 8004d42:	a901      	add	r1, sp, #4
 8004d44:	4802      	ldr	r0, [pc, #8]	@ (8004d50 <_ZN13TimingManagerC1Ev+0x1c>)
 8004d46:	f7ff ffe5 	bl	8004d14 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
}
 8004d4a:	4620      	mov	r0, r4
 8004d4c:	b002      	add	sp, #8
 8004d4e:	bd10      	pop	{r4, pc}
 8004d50:	20000358 	.word	0x20000358

08004d54 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 8004d54:	4b02      	ldr	r3, [pc, #8]	@ (8004d60 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE+0xc>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	601a      	str	r2, [r3, #0]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	609a      	str	r2, [r3, #8]
}
 8004d5e:	4770      	bx	lr
 8004d60:	20000358 	.word	0x20000358

08004d64 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 8004d64:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 8004d66:	4b04      	ldr	r3, [pc, #16]	@ (8004d78 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE+0x14>)
 8004d68:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8004d6a:	b118      	cbz	r0, 8004d74 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8004d6c:	6899      	ldr	r1, [r3, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004d6e:	1a09      	subs	r1, r1, r0
 8004d70:	f000 f973 	bl	800505a <_ZdlPvj>
 8004d74:	bd08      	pop	{r3, pc}
 8004d76:	bf00      	nop
 8004d78:	20000358 	.word	0x20000358

08004d7c <UART_SendBuffer>:
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 8004d7c:	b1d9      	cbz	r1, 8004db6 <UART_SendBuffer+0x3a>
{
 8004d7e:	b570      	push	{r4, r5, r6, lr}
 8004d80:	4604      	mov	r4, r0
 8004d82:	4615      	mov	r5, r2
 8004d84:	460e      	mov	r6, r1
	if (!txBuff || txSize == 0) {
 8004d86:	b1ca      	cbz	r2, 8004dbc <UART_SendBuffer+0x40>
		return ERROR_INVALID_ARGUMENT;
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8004d88:	f7ff fed6 	bl	8004b38 <IRQ_LOCK>
	if (self->isTxBusy_) {
 8004d8c:	7923      	ldrb	r3, [r4, #4]
 8004d8e:	b973      	cbnz	r3, 8004dae <UART_SendBuffer+0x32>
		IRQ_UNLOCK();
		return STATUS_BUSY;
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 8004d90:	2301      	movs	r3, #1
 8004d92:	7123      	strb	r3, [r4, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 8004d94:	b2aa      	uxth	r2, r5
 8004d96:	4631      	mov	r1, r6
 8004d98:	6820      	ldr	r0, [r4, #0]
 8004d9a:	f7fe f82b 	bl	8002df4 <HAL_UART_Transmit_DMA>
 8004d9e:	4604      	mov	r4, r0
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8004da0:	f7ff feaa 	bl	8004af8 <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 8004da4:	1e20      	subs	r0, r4, #0
 8004da6:	bf18      	it	ne
 8004da8:	2001      	movne	r0, #1
 8004daa:	4240      	negs	r0, r0
		return ERROR_FAIL;
	}

	return STATUS_OK;
}
 8004dac:	bd70      	pop	{r4, r5, r6, pc}
		IRQ_UNLOCK();
 8004dae:	f7ff fea3 	bl	8004af8 <IRQ_UNLOCK>
		return STATUS_BUSY;
 8004db2:	2002      	movs	r0, #2
 8004db4:	e7fa      	b.n	8004dac <UART_SendBuffer+0x30>
		return ERROR_INVALID_ARGUMENT;
 8004db6:	f06f 0004 	mvn.w	r0, #4
}
 8004dba:	4770      	bx	lr
		return ERROR_INVALID_ARGUMENT;
 8004dbc:	f06f 0004 	mvn.w	r0, #4
 8004dc0:	e7f4      	b.n	8004dac <UART_SendBuffer+0x30>

08004dc2 <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
	if (self->isTxBusy_) {
 8004dc2:	7903      	ldrb	r3, [r0, #4]
 8004dc4:	b91b      	cbnz	r3, 8004dce <UART_SetTxcallback+0xc>
		return STATUS_BUSY;
	}

	self->TX.txCallback_ = f;
 8004dc6:	6081      	str	r1, [r0, #8]
	self->TX.txCallbackData_ = captured;
 8004dc8:	60c2      	str	r2, [r0, #12]

	return STATUS_OK;
 8004dca:	2000      	movs	r0, #0
 8004dcc:	4770      	bx	lr
		return STATUS_BUSY;
 8004dce:	2002      	movs	r0, #2
}
 8004dd0:	4770      	bx	lr

08004dd2 <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 8004dd2:	b508      	push	{r3, lr}
	void* const captured = self->TX.txCallbackData_;
 8004dd4:	68c1      	ldr	r1, [r0, #12]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 8004dd6:	6882      	ldr	r2, [r0, #8]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8004dd8:	6803      	ldr	r3, [r0, #0]
 8004dda:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
	self->isTxBusy_ = false;
 8004dde:	f04f 0c00 	mov.w	ip, #0
 8004de2:	f880 c004 	strb.w	ip, [r0, #4]

	if (callback) {
 8004de6:	b132      	cbz	r2, 8004df6 <UART_TXCallback+0x24>
 8004de8:	b2db      	uxtb	r3, r3
		callback(status, captured);
 8004dea:	2be0      	cmp	r3, #224	@ 0xe0
 8004dec:	f04f 30ff 	mov.w	r0, #4294967295
 8004df0:	bf18      	it	ne
 8004df2:	2000      	movne	r0, #0
 8004df4:	4790      	blx	r2
	}
}
 8004df6:	bd08      	pop	{r3, pc}

08004df8 <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 8004df8:	b508      	push	{r3, lr}
 8004dfa:	4603      	mov	r3, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004dfc:	6802      	ldr	r2, [r0, #0]
	status_t status = ERROR_FAIL;

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8004dfe:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e00:	f011 0f08 	tst.w	r1, #8
 8004e04:	d13b      	bne.n	8004e7e <UART_ErrorCallback+0x86>
		status = ERROR_UART_RX_OVERRUN;
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8004e06:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e08:	f011 0f04 	tst.w	r1, #4
 8004e0c:	d13e      	bne.n	8004e8c <UART_ErrorCallback+0x94>
		status = ERROR_UART_FRAMING_ERR;
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8004e0e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e10:	f011 0f02 	tst.w	r1, #2
 8004e14:	d13d      	bne.n	8004e92 <UART_ErrorCallback+0x9a>
		status = ERROR_UART_RX_NOISE;
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8004e16:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004e18:	f011 0f10 	tst.w	r1, #16
 8004e1c:	d004      	beq.n	8004e28 <UART_ErrorCallback+0x30>
		self->isTxBusy_ = false;
 8004e1e:	2200      	movs	r2, #0
 8004e20:	7102      	strb	r2, [r0, #4]
		status = ERROR_UART_TX_DMA_ERR;
 8004e22:	f06f 004a 	mvn.w	r0, #74	@ 0x4a
 8004e26:	e02c      	b.n	8004e82 <UART_ErrorCallback+0x8a>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 8004e28:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004e2c:	b2c9      	uxtb	r1, r1
 8004e2e:	2924      	cmp	r1, #36	@ 0x24
 8004e30:	d032      	beq.n	8004e98 <UART_ErrorCallback+0xa0>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 8004e32:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004e36:	b2c9      	uxtb	r1, r1
 8004e38:	2922      	cmp	r1, #34	@ 0x22
 8004e3a:	d02f      	beq.n	8004e9c <UART_ErrorCallback+0xa4>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8004e3c:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004e40:	b2c9      	uxtb	r1, r1
 8004e42:	2921      	cmp	r1, #33	@ 0x21
 8004e44:	d02c      	beq.n	8004ea0 <UART_ErrorCallback+0xa8>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 8004e46:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004e4a:	b2c9      	uxtb	r1, r1
 8004e4c:	2923      	cmp	r1, #35	@ 0x23
 8004e4e:	d029      	beq.n	8004ea4 <UART_ErrorCallback+0xac>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 8004e50:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004e54:	b2c9      	uxtb	r1, r1
 8004e56:	29e0      	cmp	r1, #224	@ 0xe0
 8004e58:	d007      	beq.n	8004e6a <UART_ErrorCallback+0x72>
		self->isTxBusy_ = false;
		status = ERROR_FAIL;
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 8004e5a:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	2aa0      	cmp	r2, #160	@ 0xa0
 8004e62:	d007      	beq.n	8004e74 <UART_ErrorCallback+0x7c>
	status_t status = ERROR_FAIL;
 8004e64:	f04f 30ff 	mov.w	r0, #4294967295
 8004e68:	e00b      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		self->isTxBusy_ = false;
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	7102      	strb	r2, [r0, #4]
		status = ERROR_FAIL;
 8004e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8004e72:	e006      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		self->isTxBusy_ = false;
 8004e74:	2200      	movs	r2, #0
 8004e76:	7102      	strb	r2, [r0, #4]
		status = ERROR_TIMEOUT;
 8004e78:	f06f 0005 	mvn.w	r0, #5
 8004e7c:	e001      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		status = ERROR_UART_RX_OVERRUN;
 8004e7e:	f06f 0047 	mvn.w	r0, #71	@ 0x47
	}

	void* const captured = self->Error.errorCallbackData_;
	const uart_error_callback_t callback = self->Error.errorCallback;
 8004e82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
	if (callback) {
 8004e84:	b10a      	cbz	r2, 8004e8a <UART_ErrorCallback+0x92>
		callback(status, captured);
 8004e86:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004e88:	4790      	blx	r2
	}
}
 8004e8a:	bd08      	pop	{r3, pc}
		status = ERROR_UART_FRAMING_ERR;
 8004e8c:	f06f 0049 	mvn.w	r0, #73	@ 0x49
 8004e90:	e7f7      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		status = ERROR_UART_RX_NOISE;
 8004e92:	f06f 0048 	mvn.w	r0, #72	@ 0x48
 8004e96:	e7f4      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004e98:	2002      	movs	r0, #2
 8004e9a:	e7f2      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004e9c:	2002      	movs	r0, #2
 8004e9e:	e7f0      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004ea0:	2002      	movs	r0, #2
 8004ea2:	e7ee      	b.n	8004e82 <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004ea4:	2002      	movs	r0, #2
 8004ea6:	e7ec      	b.n	8004e82 <UART_ErrorCallback+0x8a>

08004ea8 <UART_RXCallback>:
{
 8004ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eaa:	4604      	mov	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004eac:	6805      	ldr	r5, [r0, #0]
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 8004eae:	69c1      	ldr	r1, [r0, #28]
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 8004eb0:	6a03      	ldr	r3, [r0, #32]
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 8004eb2:	6982      	ldr	r2, [r0, #24]
	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8004eb4:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8004eb6:	428f      	cmp	r7, r1
 8004eb8:	d020      	beq.n	8004efc <UART_RXCallback+0x54>
 8004eba:	429f      	cmp	r7, r3
 8004ebc:	d117      	bne.n	8004eee <UART_RXCallback+0x46>
	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ebe:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685e      	ldr	r6, [r3, #4]
 8004ec4:	1b96      	subs	r6, r2, r6
	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8004ec6:	b292      	uxth	r2, r2
 8004ec8:	4628      	mov	r0, r5
 8004eca:	f7fe fb2b 	bl	8003524 <HAL_UART_Receive_DMA>
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 8004ece:	b920      	cbnz	r0, 8004eda <UART_RXCallback+0x32>
 8004ed0:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2be0      	cmp	r3, #224	@ 0xe0
 8004ed8:	d102      	bne.n	8004ee0 <UART_RXCallback+0x38>
		UART_ErrorCallback(self);
 8004eda:	4620      	mov	r0, r4
 8004edc:	f7ff ff8c 	bl	8004df8 <UART_ErrorCallback>
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 8004ee0:	6923      	ldr	r3, [r4, #16]
	if (callback) {
 8004ee2:	b11b      	cbz	r3, 8004eec <UART_RXCallback+0x44>
		callback(curr, size, captured);
 8004ee4:	6962      	ldr	r2, [r4, #20]
 8004ee6:	4631      	mov	r1, r6
 8004ee8:	4638      	mov	r0, r7
 8004eea:	4798      	blx	r3
}
 8004eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8004eee:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <UART_RXCallback+0x60>)
 8004ef0:	4a06      	ldr	r2, [pc, #24]	@ (8004f0c <UART_RXCallback+0x64>)
 8004ef2:	f44f 7195 	mov.w	r1, #298	@ 0x12a
 8004ef6:	4806      	ldr	r0, [pc, #24]	@ (8004f10 <UART_RXCallback+0x68>)
 8004ef8:	f000 fa52 	bl	80053a0 <__assert_func>
	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004efc:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8004efe:	6809      	ldr	r1, [r1, #0]
 8004f00:	684e      	ldr	r6, [r1, #4]
 8004f02:	1b96      	subs	r6, r2, r6
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8004f04:	4619      	mov	r1, r3
 8004f06:	e7de      	b.n	8004ec6 <UART_RXCallback+0x1e>
 8004f08:	08008d04 	.word	0x08008d04
 8004f0c:	08008d70 	.word	0x08008d70
 8004f10:	08008d4c 	.word	0x08008d4c

08004f14 <UART_SetRxCallback>:
{
 8004f14:	b538      	push	{r3, r4, r5, lr}
 8004f16:	4604      	mov	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004f18:	6805      	ldr	r5, [r0, #0]
	self->RX.rxCallback_ = f;
 8004f1a:	6101      	str	r1, [r0, #16]
	self->RX.rxCallbackData_ = captured;
 8004f1c:	6142      	str	r2, [r0, #20]
	if (f) {
 8004f1e:	b151      	cbz	r1, 8004f36 <UART_SetRxCallback+0x22>
		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 8004f20:	8b02      	ldrh	r2, [r0, #24]
 8004f22:	69c1      	ldr	r1, [r0, #28]
 8004f24:	4628      	mov	r0, r5
 8004f26:	f7fe fafd 	bl	8003524 <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 8004f2a:	682a      	ldr	r2, [r5, #0]
 8004f2c:	68d3      	ldr	r3, [r2, #12]
 8004f2e:	f043 0310 	orr.w	r3, r3, #16
 8004f32:	60d3      	str	r3, [r2, #12]
}
 8004f34:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_AbortReceive(huart);
 8004f36:	4628      	mov	r0, r5
 8004f38:	f7fd ff9e 	bl	8002e78 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8004f3c:	4620      	mov	r0, r4
 8004f3e:	f7ff ffb3 	bl	8004ea8 <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 8004f42:	682a      	ldr	r2, [r5, #0]
 8004f44:	68d3      	ldr	r3, [r2, #12]
 8004f46:	f023 0310 	bic.w	r3, r3, #16
 8004f4a:	60d3      	str	r3, [r2, #12]
}
 8004f4c:	e7f2      	b.n	8004f34 <UART_SetRxCallback+0x20>

08004f4e <UART_Init>:
{
 8004f4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 8004f52:	b3a8      	cbz	r0, 8004fc0 <UART_Init+0x72>
 8004f54:	460e      	mov	r6, r1
 8004f56:	4615      	mov	r5, r2
 8004f58:	4604      	mov	r4, r0
 8004f5a:	b3a1      	cbz	r1, 8004fc6 <UART_Init+0x78>
 8004f5c:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8004f60:	d834      	bhi.n	8004fcc <UART_Init+0x7e>
	memset(self, 0, sizeof(stm32_DMA_uart_t));
 8004f62:	2227      	movs	r2, #39	@ 0x27
 8004f64:	2100      	movs	r1, #0
 8004f66:	3005      	adds	r0, #5
 8004f68:	f001 fb2c 	bl	80065c4 <memset>
	self->huart = huart;
 8004f6c:	6026      	str	r6, [r4, #0]
	self->isTxBusy_ = false;
 8004f6e:	2300      	movs	r3, #0
 8004f70:	7123      	strb	r3, [r4, #4]
	if(pushContainerUartInstance(self) != STATUS_OK) {
 8004f72:	4620      	mov	r0, r4
 8004f74:	f000 f852 	bl	800501c <pushContainerUartInstance>
 8004f78:	4680      	mov	r8, r0
 8004f7a:	b9a0      	cbnz	r0, 8004fa6 <UART_Init+0x58>
	void* const buf1 = malloc(rxBufferSize);
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fa49 	bl	8005414 <malloc>
	if(buf1 == NULL) {
 8004f82:	4607      	mov	r7, r0
 8004f84:	b328      	cbz	r0, 8004fd2 <UART_Init+0x84>
	void* const buf2 = malloc(rxBufferSize);
 8004f86:	4628      	mov	r0, r5
 8004f88:	f000 fa44 	bl	8005414 <malloc>
	if(buf2 == NULL) {
 8004f8c:	b190      	cbz	r0, 8004fb4 <UART_Init+0x66>
	self->RX.rxBuffer1 = buf1;
 8004f8e:	61e7      	str	r7, [r4, #28]
	self->RX.rxBuffer2 = buf2;
 8004f90:	6220      	str	r0, [r4, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8004f92:	61a5      	str	r5, [r4, #24]
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8004f94:	62b7      	str	r7, [r6, #40]	@ 0x28
	UART_SetRxCallback(self, 0, 0);
 8004f96:	2200      	movs	r2, #0
 8004f98:	4611      	mov	r1, r2
 8004f9a:	4620      	mov	r0, r4
 8004f9c:	f7ff ffba 	bl	8004f14 <UART_SetRxCallback>
}
 8004fa0:	4640      	mov	r0, r8
 8004fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		self->isTxBusy_ = true;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	7123      	strb	r3, [r4, #4]
		self->RX.rxBufferSize = 0;
 8004faa:	2300      	movs	r3, #0
 8004fac:	61a3      	str	r3, [r4, #24]
		return ERROR_FAIL;
 8004fae:	f04f 38ff 	mov.w	r8, #4294967295
 8004fb2:	e7f5      	b.n	8004fa0 <UART_Init+0x52>
		free(buf1);
 8004fb4:	4638      	mov	r0, r7
 8004fb6:	f000 fa35 	bl	8005424 <free>
		return ERROR_FAIL;
 8004fba:	f04f 38ff 	mov.w	r8, #4294967295
 8004fbe:	e7ef      	b.n	8004fa0 <UART_Init+0x52>
		return ERROR_INVALID_ARGUMENT;
 8004fc0:	f06f 0804 	mvn.w	r8, #4
 8004fc4:	e7ec      	b.n	8004fa0 <UART_Init+0x52>
 8004fc6:	f06f 0804 	mvn.w	r8, #4
 8004fca:	e7e9      	b.n	8004fa0 <UART_Init+0x52>
 8004fcc:	f06f 0804 	mvn.w	r8, #4
 8004fd0:	e7e6      	b.n	8004fa0 <UART_Init+0x52>
		return ERROR_FAIL;
 8004fd2:	f04f 38ff 	mov.w	r8, #4294967295
 8004fd6:	e7e3      	b.n	8004fa0 <UART_Init+0x52>

08004fd8 <USER_UART_IRQHandler>:
{
 8004fd8:	b510      	push	{r4, lr}
 8004fda:	b082      	sub	sp, #8
 8004fdc:	4604      	mov	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004fde:	6800      	ldr	r0, [r0, #0]
	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8004fe0:	6803      	ldr	r3, [r0, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	f012 0f10 	tst.w	r2, #16
 8004fe8:	d101      	bne.n	8004fee <USER_UART_IRQHandler+0x16>
}
 8004fea:	b002      	add	sp, #8
 8004fec:	bd10      	pop	{r4, pc}
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8004fee:	2200      	movs	r2, #0
 8004ff0:	9201      	str	r2, [sp, #4]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	9201      	str	r2, [sp, #4]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	9301      	str	r3, [sp, #4]
 8004ffa:	9b01      	ldr	r3, [sp, #4]
		HAL_UART_AbortReceive(huart);
 8004ffc:	f7fd ff3c 	bl	8002e78 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8005000:	4620      	mov	r0, r4
 8005002:	f7ff ff51 	bl	8004ea8 <UART_RXCallback>
}
 8005006:	e7f0      	b.n	8004fea <USER_UART_IRQHandler+0x12>

08005008 <getContainerUartInstance>:

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
#if (UART_CONTAINER_COUNT == 1)

	stm32_DMA_uart_t* const r_inst = m_instances[0];
 8005008:	4b03      	ldr	r3, [pc, #12]	@ (8005018 <getContainerUartInstance+0x10>)
 800500a:	681b      	ldr	r3, [r3, #0]
	if(r_inst->huart == huart) {
 800500c:	681a      	ldr	r2, [r3, #0]
		}
	}
#endif /* (UART_CONTAINER_COUNT == 1) */

	return NULL;
}
 800500e:	4282      	cmp	r2, r0
 8005010:	bf0c      	ite	eq
 8005012:	4618      	moveq	r0, r3
 8005014:	2000      	movne	r0, #0
 8005016:	4770      	bx	lr
 8005018:	20000364 	.word	0x20000364

0800501c <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
#if (UART_CONTAINER_COUNT == 1)
	if(inst == NULL) {
 800501c:	b118      	cbz	r0, 8005026 <pushContainerUartInstance+0xa>
		return ERROR_FAIL;
	}

	m_instances[0] = inst;
 800501e:	4a03      	ldr	r2, [pc, #12]	@ (800502c <pushContainerUartInstance+0x10>)
 8005020:	6010      	str	r0, [r2, #0]
	}
	m_instances[m_instance_counter] = inst;
	++m_instance_counter;
#endif /* (UART_CONTAINER_COUNT == 1) */

	return STATUS_OK;
 8005022:	2000      	movs	r0, #0
 8005024:	4770      	bx	lr
		return ERROR_FAIL;
 8005026:	f04f 30ff 	mov.w	r0, #4294967295
}
 800502a:	4770      	bx	lr
 800502c:	20000364 	.word	0x20000364

08005030 <HAL_UART_TxCpltCallback>:



// callbacks IT --------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005030:	b508      	push	{r3, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8005032:	f7ff ffe9 	bl	8005008 <getContainerUartInstance>
	if(uart_instance) {
 8005036:	b108      	cbz	r0, 800503c <HAL_UART_TxCpltCallback+0xc>
		UART_TXCallback(uart_instance);
 8005038:	f7ff fecb 	bl	8004dd2 <UART_TXCallback>
	}
}
 800503c:	bd08      	pop	{r3, pc}

0800503e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800503e:	b508      	push	{r3, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8005040:	f7ff ffe2 	bl	8005008 <getContainerUartInstance>
	if(uart_instance) {
 8005044:	b108      	cbz	r0, 800504a <HAL_UART_RxCpltCallback+0xc>
		UART_RXCallback(uart_instance);
 8005046:	f7ff ff2f 	bl	8004ea8 <UART_RXCallback>
	}
}
 800504a:	bd08      	pop	{r3, pc}

0800504c <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800504c:	b508      	push	{r3, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 800504e:	f7ff ffdb 	bl	8005008 <getContainerUartInstance>
	if(uart_instance) {
 8005052:	b108      	cbz	r0, 8005058 <HAL_UART_ErrorCallback+0xc>
		UART_ErrorCallback(uart_instance);
 8005054:	f7ff fed0 	bl	8004df8 <UART_ErrorCallback>
	}
}
 8005058:	bd08      	pop	{r3, pc}

0800505a <_ZdlPvj>:
 800505a:	f000 b82a 	b.w	80050b2 <_ZdlPv>

0800505e <_ZdaPv>:
 800505e:	f000 b828 	b.w	80050b2 <_ZdlPv>

08005062 <__cxa_guard_acquire>:
 8005062:	6802      	ldr	r2, [r0, #0]
 8005064:	4603      	mov	r3, r0
 8005066:	07d2      	lsls	r2, r2, #31
 8005068:	d405      	bmi.n	8005076 <__cxa_guard_acquire+0x14>
 800506a:	7842      	ldrb	r2, [r0, #1]
 800506c:	b102      	cbz	r2, 8005070 <__cxa_guard_acquire+0xe>
 800506e:	deff      	udf	#255	@ 0xff
 8005070:	2001      	movs	r0, #1
 8005072:	7058      	strb	r0, [r3, #1]
 8005074:	4770      	bx	lr
 8005076:	2000      	movs	r0, #0
 8005078:	4770      	bx	lr

0800507a <__cxa_guard_release>:
 800507a:	2301      	movs	r3, #1
 800507c:	6003      	str	r3, [r0, #0]
 800507e:	4770      	bx	lr

08005080 <_Znwj>:
 8005080:	2801      	cmp	r0, #1
 8005082:	bf38      	it	cc
 8005084:	2001      	movcc	r0, #1
 8005086:	b510      	push	{r4, lr}
 8005088:	4604      	mov	r4, r0
 800508a:	4620      	mov	r0, r4
 800508c:	f000 f9c2 	bl	8005414 <malloc>
 8005090:	b100      	cbz	r0, 8005094 <_Znwj+0x14>
 8005092:	bd10      	pop	{r4, pc}
 8005094:	f000 f810 	bl	80050b8 <_ZSt15get_new_handlerv>
 8005098:	b908      	cbnz	r0, 800509e <_Znwj+0x1e>
 800509a:	f000 f979 	bl	8005390 <abort>
 800509e:	4780      	blx	r0
 80050a0:	e7f3      	b.n	800508a <_Znwj+0xa>

080050a2 <_Znaj>:
 80050a2:	f7ff bfed 	b.w	8005080 <_Znwj>

080050a6 <_ZSt20__throw_length_errorPKc>:
 80050a6:	b508      	push	{r3, lr}
 80050a8:	f000 f972 	bl	8005390 <abort>

080050ac <_ZSt25__throw_bad_function_callv>:
 80050ac:	b508      	push	{r3, lr}
 80050ae:	f000 f96f 	bl	8005390 <abort>

080050b2 <_ZdlPv>:
 80050b2:	f000 b9b7 	b.w	8005424 <free>
	...

080050b8 <_ZSt15get_new_handlerv>:
 80050b8:	4b02      	ldr	r3, [pc, #8]	@ (80050c4 <_ZSt15get_new_handlerv+0xc>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	f3bf 8f5b 	dmb	ish
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	20000368 	.word	0x20000368

080050c8 <log2f>:
 80050c8:	b508      	push	{r3, lr}
 80050ca:	f000 f807 	bl	80050dc <logf>
 80050ce:	4902      	ldr	r1, [pc, #8]	@ (80050d8 <log2f+0x10>)
 80050d0:	f7fb fe9c 	bl	8000e0c <__aeabi_fdiv>
 80050d4:	bd08      	pop	{r3, pc}
 80050d6:	bf00      	nop
 80050d8:	3f317218 	.word	0x3f317218

080050dc <logf>:
 80050dc:	b538      	push	{r3, r4, r5, lr}
 80050de:	4604      	mov	r4, r0
 80050e0:	f000 f828 	bl	8005134 <__ieee754_logf>
 80050e4:	4621      	mov	r1, r4
 80050e6:	4605      	mov	r5, r0
 80050e8:	4620      	mov	r0, r4
 80050ea:	f7fb ffa1 	bl	8001030 <__aeabi_fcmpun>
 80050ee:	b970      	cbnz	r0, 800510e <logf+0x32>
 80050f0:	2100      	movs	r1, #0
 80050f2:	4620      	mov	r0, r4
 80050f4:	f7fb ff92 	bl	800101c <__aeabi_fcmpgt>
 80050f8:	b948      	cbnz	r0, 800510e <logf+0x32>
 80050fa:	2100      	movs	r1, #0
 80050fc:	4620      	mov	r0, r4
 80050fe:	f7fb ff65 	bl	8000fcc <__aeabi_fcmpeq>
 8005102:	b130      	cbz	r0, 8005112 <logf+0x36>
 8005104:	f001 fb04 	bl	8006710 <__errno>
 8005108:	2322      	movs	r3, #34	@ 0x22
 800510a:	4d06      	ldr	r5, [pc, #24]	@ (8005124 <logf+0x48>)
 800510c:	6003      	str	r3, [r0, #0]
 800510e:	4628      	mov	r0, r5
 8005110:	bd38      	pop	{r3, r4, r5, pc}
 8005112:	f001 fafd 	bl	8006710 <__errno>
 8005116:	2321      	movs	r3, #33	@ 0x21
 8005118:	6003      	str	r3, [r0, #0]
 800511a:	4803      	ldr	r0, [pc, #12]	@ (8005128 <logf+0x4c>)
 800511c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005120:	f000 b804 	b.w	800512c <nanf>
 8005124:	ff800000 	.word	0xff800000
 8005128:	08008dbb 	.word	0x08008dbb

0800512c <nanf>:
 800512c:	4800      	ldr	r0, [pc, #0]	@ (8005130 <nanf+0x4>)
 800512e:	4770      	bx	lr
 8005130:	7fc00000 	.word	0x7fc00000

08005134 <__ieee754_logf>:
 8005134:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8005138:	4601      	mov	r1, r0
 800513a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800513e:	d106      	bne.n	800514e <__ieee754_logf+0x1a>
 8005140:	2100      	movs	r1, #0
 8005142:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 8005146:	f7fb fe61 	bl	8000e0c <__aeabi_fdiv>
 800514a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800514e:	2800      	cmp	r0, #0
 8005150:	4604      	mov	r4, r0
 8005152:	da03      	bge.n	800515c <__ieee754_logf+0x28>
 8005154:	f7fb fc9c 	bl	8000a90 <__aeabi_fsub>
 8005158:	2100      	movs	r1, #0
 800515a:	e7f4      	b.n	8005146 <__ieee754_logf+0x12>
 800515c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8005160:	db02      	blt.n	8005168 <__ieee754_logf+0x34>
 8005162:	f7fb fc97 	bl	8000a94 <__addsf3>
 8005166:	e7f0      	b.n	800514a <__ieee754_logf+0x16>
 8005168:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800516c:	da35      	bge.n	80051da <__ieee754_logf+0xa6>
 800516e:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8005172:	f7fb fd97 	bl	8000ca4 <__aeabi_fmul>
 8005176:	f06f 0318 	mvn.w	r3, #24
 800517a:	4604      	mov	r4, r0
 800517c:	15e7      	asrs	r7, r4, #23
 800517e:	3f7f      	subs	r7, #127	@ 0x7f
 8005180:	441f      	add	r7, r3
 8005182:	4b76      	ldr	r3, [pc, #472]	@ (800535c <__ieee754_logf+0x228>)
 8005184:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8005188:	4423      	add	r3, r4
 800518a:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 800518e:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 8005192:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8005196:	4320      	orrs	r0, r4
 8005198:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 800519c:	f7fb fc78 	bl	8000a90 <__aeabi_fsub>
 80051a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005360 <__ieee754_logf+0x22c>)
 80051a2:	f104 020f 	add.w	r2, r4, #15
 80051a6:	4013      	ands	r3, r2
 80051a8:	4606      	mov	r6, r0
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d143      	bne.n	8005236 <__ieee754_logf+0x102>
 80051ae:	2100      	movs	r1, #0
 80051b0:	f7fb ff0c 	bl	8000fcc <__aeabi_fcmpeq>
 80051b4:	b198      	cbz	r0, 80051de <__ieee754_logf+0xaa>
 80051b6:	2f00      	cmp	r7, #0
 80051b8:	f000 80cd 	beq.w	8005356 <__ieee754_logf+0x222>
 80051bc:	4638      	mov	r0, r7
 80051be:	f7fb fd1d 	bl	8000bfc <__aeabi_i2f>
 80051c2:	4968      	ldr	r1, [pc, #416]	@ (8005364 <__ieee754_logf+0x230>)
 80051c4:	4605      	mov	r5, r0
 80051c6:	f7fb fd6d 	bl	8000ca4 <__aeabi_fmul>
 80051ca:	4967      	ldr	r1, [pc, #412]	@ (8005368 <__ieee754_logf+0x234>)
 80051cc:	4604      	mov	r4, r0
 80051ce:	4628      	mov	r0, r5
 80051d0:	f7fb fd68 	bl	8000ca4 <__aeabi_fmul>
 80051d4:	4601      	mov	r1, r0
 80051d6:	4620      	mov	r0, r4
 80051d8:	e7c3      	b.n	8005162 <__ieee754_logf+0x2e>
 80051da:	2300      	movs	r3, #0
 80051dc:	e7ce      	b.n	800517c <__ieee754_logf+0x48>
 80051de:	4963      	ldr	r1, [pc, #396]	@ (800536c <__ieee754_logf+0x238>)
 80051e0:	4630      	mov	r0, r6
 80051e2:	f7fb fd5f 	bl	8000ca4 <__aeabi_fmul>
 80051e6:	4601      	mov	r1, r0
 80051e8:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80051ec:	f7fb fc50 	bl	8000a90 <__aeabi_fsub>
 80051f0:	4631      	mov	r1, r6
 80051f2:	4604      	mov	r4, r0
 80051f4:	4630      	mov	r0, r6
 80051f6:	f7fb fd55 	bl	8000ca4 <__aeabi_fmul>
 80051fa:	4601      	mov	r1, r0
 80051fc:	4620      	mov	r0, r4
 80051fe:	f7fb fd51 	bl	8000ca4 <__aeabi_fmul>
 8005202:	4604      	mov	r4, r0
 8005204:	b90f      	cbnz	r7, 800520a <__ieee754_logf+0xd6>
 8005206:	4621      	mov	r1, r4
 8005208:	e078      	b.n	80052fc <__ieee754_logf+0x1c8>
 800520a:	4638      	mov	r0, r7
 800520c:	f7fb fcf6 	bl	8000bfc <__aeabi_i2f>
 8005210:	4954      	ldr	r1, [pc, #336]	@ (8005364 <__ieee754_logf+0x230>)
 8005212:	4607      	mov	r7, r0
 8005214:	f7fb fd46 	bl	8000ca4 <__aeabi_fmul>
 8005218:	4605      	mov	r5, r0
 800521a:	4638      	mov	r0, r7
 800521c:	4952      	ldr	r1, [pc, #328]	@ (8005368 <__ieee754_logf+0x234>)
 800521e:	f7fb fd41 	bl	8000ca4 <__aeabi_fmul>
 8005222:	4601      	mov	r1, r0
 8005224:	4620      	mov	r0, r4
 8005226:	f7fb fc33 	bl	8000a90 <__aeabi_fsub>
 800522a:	4631      	mov	r1, r6
 800522c:	f7fb fc30 	bl	8000a90 <__aeabi_fsub>
 8005230:	4601      	mov	r1, r0
 8005232:	4628      	mov	r0, r5
 8005234:	e079      	b.n	800532a <__ieee754_logf+0x1f6>
 8005236:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800523a:	f7fb fc2b 	bl	8000a94 <__addsf3>
 800523e:	4601      	mov	r1, r0
 8005240:	4630      	mov	r0, r6
 8005242:	f7fb fde3 	bl	8000e0c <__aeabi_fdiv>
 8005246:	4681      	mov	r9, r0
 8005248:	4638      	mov	r0, r7
 800524a:	f7fb fcd7 	bl	8000bfc <__aeabi_i2f>
 800524e:	4649      	mov	r1, r9
 8005250:	4680      	mov	r8, r0
 8005252:	4648      	mov	r0, r9
 8005254:	f7fb fd26 	bl	8000ca4 <__aeabi_fmul>
 8005258:	4601      	mov	r1, r0
 800525a:	4682      	mov	sl, r0
 800525c:	f7fb fd22 	bl	8000ca4 <__aeabi_fmul>
 8005260:	4605      	mov	r5, r0
 8005262:	4943      	ldr	r1, [pc, #268]	@ (8005370 <__ieee754_logf+0x23c>)
 8005264:	f7fb fd1e 	bl	8000ca4 <__aeabi_fmul>
 8005268:	4942      	ldr	r1, [pc, #264]	@ (8005374 <__ieee754_logf+0x240>)
 800526a:	f7fb fc13 	bl	8000a94 <__addsf3>
 800526e:	4629      	mov	r1, r5
 8005270:	f7fb fd18 	bl	8000ca4 <__aeabi_fmul>
 8005274:	4940      	ldr	r1, [pc, #256]	@ (8005378 <__ieee754_logf+0x244>)
 8005276:	f7fb fc0d 	bl	8000a94 <__addsf3>
 800527a:	4629      	mov	r1, r5
 800527c:	f7fb fd12 	bl	8000ca4 <__aeabi_fmul>
 8005280:	493e      	ldr	r1, [pc, #248]	@ (800537c <__ieee754_logf+0x248>)
 8005282:	f7fb fc07 	bl	8000a94 <__addsf3>
 8005286:	4651      	mov	r1, sl
 8005288:	f7fb fd0c 	bl	8000ca4 <__aeabi_fmul>
 800528c:	493c      	ldr	r1, [pc, #240]	@ (8005380 <__ieee754_logf+0x24c>)
 800528e:	4682      	mov	sl, r0
 8005290:	4628      	mov	r0, r5
 8005292:	f7fb fd07 	bl	8000ca4 <__aeabi_fmul>
 8005296:	493b      	ldr	r1, [pc, #236]	@ (8005384 <__ieee754_logf+0x250>)
 8005298:	f7fb fbfc 	bl	8000a94 <__addsf3>
 800529c:	4629      	mov	r1, r5
 800529e:	f7fb fd01 	bl	8000ca4 <__aeabi_fmul>
 80052a2:	4939      	ldr	r1, [pc, #228]	@ (8005388 <__ieee754_logf+0x254>)
 80052a4:	f7fb fbf6 	bl	8000a94 <__addsf3>
 80052a8:	4629      	mov	r1, r5
 80052aa:	f7fb fcfb 	bl	8000ca4 <__aeabi_fmul>
 80052ae:	4601      	mov	r1, r0
 80052b0:	4650      	mov	r0, sl
 80052b2:	f7fb fbef 	bl	8000a94 <__addsf3>
 80052b6:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 800538c <__ieee754_logf+0x258>
 80052ba:	4605      	mov	r5, r0
 80052bc:	44a3      	add	fp, r4
 80052be:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 80052c2:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 80052c6:	ea44 040b 	orr.w	r4, r4, fp
 80052ca:	2c00      	cmp	r4, #0
 80052cc:	dd30      	ble.n	8005330 <__ieee754_logf+0x1fc>
 80052ce:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 80052d2:	4630      	mov	r0, r6
 80052d4:	f7fb fce6 	bl	8000ca4 <__aeabi_fmul>
 80052d8:	4631      	mov	r1, r6
 80052da:	f7fb fce3 	bl	8000ca4 <__aeabi_fmul>
 80052de:	4601      	mov	r1, r0
 80052e0:	4604      	mov	r4, r0
 80052e2:	4628      	mov	r0, r5
 80052e4:	f7fb fbd6 	bl	8000a94 <__addsf3>
 80052e8:	4649      	mov	r1, r9
 80052ea:	f7fb fcdb 	bl	8000ca4 <__aeabi_fmul>
 80052ee:	4605      	mov	r5, r0
 80052f0:	b937      	cbnz	r7, 8005300 <__ieee754_logf+0x1cc>
 80052f2:	4601      	mov	r1, r0
 80052f4:	4620      	mov	r0, r4
 80052f6:	f7fb fbcb 	bl	8000a90 <__aeabi_fsub>
 80052fa:	4601      	mov	r1, r0
 80052fc:	4630      	mov	r0, r6
 80052fe:	e014      	b.n	800532a <__ieee754_logf+0x1f6>
 8005300:	4918      	ldr	r1, [pc, #96]	@ (8005364 <__ieee754_logf+0x230>)
 8005302:	4640      	mov	r0, r8
 8005304:	f7fb fcce 	bl	8000ca4 <__aeabi_fmul>
 8005308:	4917      	ldr	r1, [pc, #92]	@ (8005368 <__ieee754_logf+0x234>)
 800530a:	4607      	mov	r7, r0
 800530c:	4640      	mov	r0, r8
 800530e:	f7fb fcc9 	bl	8000ca4 <__aeabi_fmul>
 8005312:	4629      	mov	r1, r5
 8005314:	f7fb fbbe 	bl	8000a94 <__addsf3>
 8005318:	4601      	mov	r1, r0
 800531a:	4620      	mov	r0, r4
 800531c:	f7fb fbb8 	bl	8000a90 <__aeabi_fsub>
 8005320:	4631      	mov	r1, r6
 8005322:	f7fb fbb5 	bl	8000a90 <__aeabi_fsub>
 8005326:	4601      	mov	r1, r0
 8005328:	4638      	mov	r0, r7
 800532a:	f7fb fbb1 	bl	8000a90 <__aeabi_fsub>
 800532e:	e70c      	b.n	800514a <__ieee754_logf+0x16>
 8005330:	4601      	mov	r1, r0
 8005332:	4630      	mov	r0, r6
 8005334:	f7fb fbac 	bl	8000a90 <__aeabi_fsub>
 8005338:	4649      	mov	r1, r9
 800533a:	f7fb fcb3 	bl	8000ca4 <__aeabi_fmul>
 800533e:	4604      	mov	r4, r0
 8005340:	2f00      	cmp	r7, #0
 8005342:	f43f af60 	beq.w	8005206 <__ieee754_logf+0xd2>
 8005346:	4907      	ldr	r1, [pc, #28]	@ (8005364 <__ieee754_logf+0x230>)
 8005348:	4640      	mov	r0, r8
 800534a:	f7fb fcab 	bl	8000ca4 <__aeabi_fmul>
 800534e:	4906      	ldr	r1, [pc, #24]	@ (8005368 <__ieee754_logf+0x234>)
 8005350:	4605      	mov	r5, r0
 8005352:	4640      	mov	r0, r8
 8005354:	e763      	b.n	800521e <__ieee754_logf+0xea>
 8005356:	2000      	movs	r0, #0
 8005358:	e6f7      	b.n	800514a <__ieee754_logf+0x16>
 800535a:	bf00      	nop
 800535c:	004afb20 	.word	0x004afb20
 8005360:	007ffff0 	.word	0x007ffff0
 8005364:	3f317180 	.word	0x3f317180
 8005368:	3717f7d1 	.word	0x3717f7d1
 800536c:	3eaaaaab 	.word	0x3eaaaaab
 8005370:	3e178897 	.word	0x3e178897
 8005374:	3e3a3325 	.word	0x3e3a3325
 8005378:	3e924925 	.word	0x3e924925
 800537c:	3f2aaaab 	.word	0x3f2aaaab
 8005380:	3e1cd04f 	.word	0x3e1cd04f
 8005384:	3e638e29 	.word	0x3e638e29
 8005388:	3ecccccd 	.word	0x3ecccccd
 800538c:	ffcf5c30 	.word	0xffcf5c30

08005390 <abort>:
 8005390:	2006      	movs	r0, #6
 8005392:	b508      	push	{r3, lr}
 8005394:	f001 f946 	bl	8006624 <raise>
 8005398:	2001      	movs	r0, #1
 800539a:	f7fc f90d 	bl	80015b8 <_exit>
	...

080053a0 <__assert_func>:
 80053a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80053a2:	4614      	mov	r4, r2
 80053a4:	461a      	mov	r2, r3
 80053a6:	4b09      	ldr	r3, [pc, #36]	@ (80053cc <__assert_func+0x2c>)
 80053a8:	4605      	mov	r5, r0
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68d8      	ldr	r0, [r3, #12]
 80053ae:	b954      	cbnz	r4, 80053c6 <__assert_func+0x26>
 80053b0:	4b07      	ldr	r3, [pc, #28]	@ (80053d0 <__assert_func+0x30>)
 80053b2:	461c      	mov	r4, r3
 80053b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80053b8:	9100      	str	r1, [sp, #0]
 80053ba:	462b      	mov	r3, r5
 80053bc:	4905      	ldr	r1, [pc, #20]	@ (80053d4 <__assert_func+0x34>)
 80053be:	f000 ffcf 	bl	8006360 <fiprintf>
 80053c2:	f7ff ffe5 	bl	8005390 <abort>
 80053c6:	4b04      	ldr	r3, [pc, #16]	@ (80053d8 <__assert_func+0x38>)
 80053c8:	e7f4      	b.n	80053b4 <__assert_func+0x14>
 80053ca:	bf00      	nop
 80053cc:	20000018 	.word	0x20000018
 80053d0:	08008dbb 	.word	0x08008dbb
 80053d4:	08008d8d 	.word	0x08008d8d
 80053d8:	08008d80 	.word	0x08008d80

080053dc <calloc>:
 80053dc:	4b02      	ldr	r3, [pc, #8]	@ (80053e8 <calloc+0xc>)
 80053de:	460a      	mov	r2, r1
 80053e0:	4601      	mov	r1, r0
 80053e2:	6818      	ldr	r0, [r3, #0]
 80053e4:	f000 b802 	b.w	80053ec <_calloc_r>
 80053e8:	20000018 	.word	0x20000018

080053ec <_calloc_r>:
 80053ec:	b570      	push	{r4, r5, r6, lr}
 80053ee:	fba1 5402 	umull	r5, r4, r1, r2
 80053f2:	b93c      	cbnz	r4, 8005404 <_calloc_r+0x18>
 80053f4:	4629      	mov	r1, r5
 80053f6:	f000 f83f 	bl	8005478 <_malloc_r>
 80053fa:	4606      	mov	r6, r0
 80053fc:	b928      	cbnz	r0, 800540a <_calloc_r+0x1e>
 80053fe:	2600      	movs	r6, #0
 8005400:	4630      	mov	r0, r6
 8005402:	bd70      	pop	{r4, r5, r6, pc}
 8005404:	220c      	movs	r2, #12
 8005406:	6002      	str	r2, [r0, #0]
 8005408:	e7f9      	b.n	80053fe <_calloc_r+0x12>
 800540a:	462a      	mov	r2, r5
 800540c:	4621      	mov	r1, r4
 800540e:	f001 f8d9 	bl	80065c4 <memset>
 8005412:	e7f5      	b.n	8005400 <_calloc_r+0x14>

08005414 <malloc>:
 8005414:	4b02      	ldr	r3, [pc, #8]	@ (8005420 <malloc+0xc>)
 8005416:	4601      	mov	r1, r0
 8005418:	6818      	ldr	r0, [r3, #0]
 800541a:	f000 b82d 	b.w	8005478 <_malloc_r>
 800541e:	bf00      	nop
 8005420:	20000018 	.word	0x20000018

08005424 <free>:
 8005424:	4b02      	ldr	r3, [pc, #8]	@ (8005430 <free+0xc>)
 8005426:	4601      	mov	r1, r0
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	f002 b80d 	b.w	8007448 <_free_r>
 800542e:	bf00      	nop
 8005430:	20000018 	.word	0x20000018

08005434 <sbrk_aligned>:
 8005434:	b570      	push	{r4, r5, r6, lr}
 8005436:	4e0f      	ldr	r6, [pc, #60]	@ (8005474 <sbrk_aligned+0x40>)
 8005438:	460c      	mov	r4, r1
 800543a:	6831      	ldr	r1, [r6, #0]
 800543c:	4605      	mov	r5, r0
 800543e:	b911      	cbnz	r1, 8005446 <sbrk_aligned+0x12>
 8005440:	f001 f944 	bl	80066cc <_sbrk_r>
 8005444:	6030      	str	r0, [r6, #0]
 8005446:	4621      	mov	r1, r4
 8005448:	4628      	mov	r0, r5
 800544a:	f001 f93f 	bl	80066cc <_sbrk_r>
 800544e:	1c43      	adds	r3, r0, #1
 8005450:	d103      	bne.n	800545a <sbrk_aligned+0x26>
 8005452:	f04f 34ff 	mov.w	r4, #4294967295
 8005456:	4620      	mov	r0, r4
 8005458:	bd70      	pop	{r4, r5, r6, pc}
 800545a:	1cc4      	adds	r4, r0, #3
 800545c:	f024 0403 	bic.w	r4, r4, #3
 8005460:	42a0      	cmp	r0, r4
 8005462:	d0f8      	beq.n	8005456 <sbrk_aligned+0x22>
 8005464:	1a21      	subs	r1, r4, r0
 8005466:	4628      	mov	r0, r5
 8005468:	f001 f930 	bl	80066cc <_sbrk_r>
 800546c:	3001      	adds	r0, #1
 800546e:	d1f2      	bne.n	8005456 <sbrk_aligned+0x22>
 8005470:	e7ef      	b.n	8005452 <sbrk_aligned+0x1e>
 8005472:	bf00      	nop
 8005474:	2000036c 	.word	0x2000036c

08005478 <_malloc_r>:
 8005478:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800547c:	1ccd      	adds	r5, r1, #3
 800547e:	f025 0503 	bic.w	r5, r5, #3
 8005482:	3508      	adds	r5, #8
 8005484:	2d0c      	cmp	r5, #12
 8005486:	bf38      	it	cc
 8005488:	250c      	movcc	r5, #12
 800548a:	2d00      	cmp	r5, #0
 800548c:	4606      	mov	r6, r0
 800548e:	db01      	blt.n	8005494 <_malloc_r+0x1c>
 8005490:	42a9      	cmp	r1, r5
 8005492:	d904      	bls.n	800549e <_malloc_r+0x26>
 8005494:	230c      	movs	r3, #12
 8005496:	6033      	str	r3, [r6, #0]
 8005498:	2000      	movs	r0, #0
 800549a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800549e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005574 <_malloc_r+0xfc>
 80054a2:	f000 f869 	bl	8005578 <__malloc_lock>
 80054a6:	f8d8 3000 	ldr.w	r3, [r8]
 80054aa:	461c      	mov	r4, r3
 80054ac:	bb44      	cbnz	r4, 8005500 <_malloc_r+0x88>
 80054ae:	4629      	mov	r1, r5
 80054b0:	4630      	mov	r0, r6
 80054b2:	f7ff ffbf 	bl	8005434 <sbrk_aligned>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	4604      	mov	r4, r0
 80054ba:	d158      	bne.n	800556e <_malloc_r+0xf6>
 80054bc:	f8d8 4000 	ldr.w	r4, [r8]
 80054c0:	4627      	mov	r7, r4
 80054c2:	2f00      	cmp	r7, #0
 80054c4:	d143      	bne.n	800554e <_malloc_r+0xd6>
 80054c6:	2c00      	cmp	r4, #0
 80054c8:	d04b      	beq.n	8005562 <_malloc_r+0xea>
 80054ca:	6823      	ldr	r3, [r4, #0]
 80054cc:	4639      	mov	r1, r7
 80054ce:	4630      	mov	r0, r6
 80054d0:	eb04 0903 	add.w	r9, r4, r3
 80054d4:	f001 f8fa 	bl	80066cc <_sbrk_r>
 80054d8:	4581      	cmp	r9, r0
 80054da:	d142      	bne.n	8005562 <_malloc_r+0xea>
 80054dc:	6821      	ldr	r1, [r4, #0]
 80054de:	4630      	mov	r0, r6
 80054e0:	1a6d      	subs	r5, r5, r1
 80054e2:	4629      	mov	r1, r5
 80054e4:	f7ff ffa6 	bl	8005434 <sbrk_aligned>
 80054e8:	3001      	adds	r0, #1
 80054ea:	d03a      	beq.n	8005562 <_malloc_r+0xea>
 80054ec:	6823      	ldr	r3, [r4, #0]
 80054ee:	442b      	add	r3, r5
 80054f0:	6023      	str	r3, [r4, #0]
 80054f2:	f8d8 3000 	ldr.w	r3, [r8]
 80054f6:	685a      	ldr	r2, [r3, #4]
 80054f8:	bb62      	cbnz	r2, 8005554 <_malloc_r+0xdc>
 80054fa:	f8c8 7000 	str.w	r7, [r8]
 80054fe:	e00f      	b.n	8005520 <_malloc_r+0xa8>
 8005500:	6822      	ldr	r2, [r4, #0]
 8005502:	1b52      	subs	r2, r2, r5
 8005504:	d420      	bmi.n	8005548 <_malloc_r+0xd0>
 8005506:	2a0b      	cmp	r2, #11
 8005508:	d917      	bls.n	800553a <_malloc_r+0xc2>
 800550a:	1961      	adds	r1, r4, r5
 800550c:	42a3      	cmp	r3, r4
 800550e:	6025      	str	r5, [r4, #0]
 8005510:	bf18      	it	ne
 8005512:	6059      	strne	r1, [r3, #4]
 8005514:	6863      	ldr	r3, [r4, #4]
 8005516:	bf08      	it	eq
 8005518:	f8c8 1000 	streq.w	r1, [r8]
 800551c:	5162      	str	r2, [r4, r5]
 800551e:	604b      	str	r3, [r1, #4]
 8005520:	4630      	mov	r0, r6
 8005522:	f000 f82f 	bl	8005584 <__malloc_unlock>
 8005526:	f104 000b 	add.w	r0, r4, #11
 800552a:	1d23      	adds	r3, r4, #4
 800552c:	f020 0007 	bic.w	r0, r0, #7
 8005530:	1ac2      	subs	r2, r0, r3
 8005532:	bf1c      	itt	ne
 8005534:	1a1b      	subne	r3, r3, r0
 8005536:	50a3      	strne	r3, [r4, r2]
 8005538:	e7af      	b.n	800549a <_malloc_r+0x22>
 800553a:	6862      	ldr	r2, [r4, #4]
 800553c:	42a3      	cmp	r3, r4
 800553e:	bf0c      	ite	eq
 8005540:	f8c8 2000 	streq.w	r2, [r8]
 8005544:	605a      	strne	r2, [r3, #4]
 8005546:	e7eb      	b.n	8005520 <_malloc_r+0xa8>
 8005548:	4623      	mov	r3, r4
 800554a:	6864      	ldr	r4, [r4, #4]
 800554c:	e7ae      	b.n	80054ac <_malloc_r+0x34>
 800554e:	463c      	mov	r4, r7
 8005550:	687f      	ldr	r7, [r7, #4]
 8005552:	e7b6      	b.n	80054c2 <_malloc_r+0x4a>
 8005554:	461a      	mov	r2, r3
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	42a3      	cmp	r3, r4
 800555a:	d1fb      	bne.n	8005554 <_malloc_r+0xdc>
 800555c:	2300      	movs	r3, #0
 800555e:	6053      	str	r3, [r2, #4]
 8005560:	e7de      	b.n	8005520 <_malloc_r+0xa8>
 8005562:	230c      	movs	r3, #12
 8005564:	4630      	mov	r0, r6
 8005566:	6033      	str	r3, [r6, #0]
 8005568:	f000 f80c 	bl	8005584 <__malloc_unlock>
 800556c:	e794      	b.n	8005498 <_malloc_r+0x20>
 800556e:	6005      	str	r5, [r0, #0]
 8005570:	e7d6      	b.n	8005520 <_malloc_r+0xa8>
 8005572:	bf00      	nop
 8005574:	20000370 	.word	0x20000370

08005578 <__malloc_lock>:
 8005578:	4801      	ldr	r0, [pc, #4]	@ (8005580 <__malloc_lock+0x8>)
 800557a:	f001 b8f4 	b.w	8006766 <__retarget_lock_acquire_recursive>
 800557e:	bf00      	nop
 8005580:	200004b4 	.word	0x200004b4

08005584 <__malloc_unlock>:
 8005584:	4801      	ldr	r0, [pc, #4]	@ (800558c <__malloc_unlock+0x8>)
 8005586:	f001 b8ef 	b.w	8006768 <__retarget_lock_release_recursive>
 800558a:	bf00      	nop
 800558c:	200004b4 	.word	0x200004b4

08005590 <__cvt>:
 8005590:	2b00      	cmp	r3, #0
 8005592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005596:	461d      	mov	r5, r3
 8005598:	bfbb      	ittet	lt
 800559a:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800559e:	461d      	movlt	r5, r3
 80055a0:	2300      	movge	r3, #0
 80055a2:	232d      	movlt	r3, #45	@ 0x2d
 80055a4:	b088      	sub	sp, #32
 80055a6:	4614      	mov	r4, r2
 80055a8:	bfb8      	it	lt
 80055aa:	4614      	movlt	r4, r2
 80055ac:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80055ae:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80055b0:	7013      	strb	r3, [r2, #0]
 80055b2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80055b4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80055b8:	f023 0820 	bic.w	r8, r3, #32
 80055bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80055c0:	d005      	beq.n	80055ce <__cvt+0x3e>
 80055c2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80055c6:	d100      	bne.n	80055ca <__cvt+0x3a>
 80055c8:	3601      	adds	r6, #1
 80055ca:	2302      	movs	r3, #2
 80055cc:	e000      	b.n	80055d0 <__cvt+0x40>
 80055ce:	2303      	movs	r3, #3
 80055d0:	aa07      	add	r2, sp, #28
 80055d2:	9204      	str	r2, [sp, #16]
 80055d4:	aa06      	add	r2, sp, #24
 80055d6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80055da:	e9cd 3600 	strd	r3, r6, [sp]
 80055de:	4622      	mov	r2, r4
 80055e0:	462b      	mov	r3, r5
 80055e2:	f001 f969 	bl	80068b8 <_dtoa_r>
 80055e6:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80055ea:	4607      	mov	r7, r0
 80055ec:	d119      	bne.n	8005622 <__cvt+0x92>
 80055ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055f0:	07db      	lsls	r3, r3, #31
 80055f2:	d50e      	bpl.n	8005612 <__cvt+0x82>
 80055f4:	eb00 0906 	add.w	r9, r0, r6
 80055f8:	2200      	movs	r2, #0
 80055fa:	2300      	movs	r3, #0
 80055fc:	4620      	mov	r0, r4
 80055fe:	4629      	mov	r1, r5
 8005600:	f7fb f9d2 	bl	80009a8 <__aeabi_dcmpeq>
 8005604:	b108      	cbz	r0, 800560a <__cvt+0x7a>
 8005606:	f8cd 901c 	str.w	r9, [sp, #28]
 800560a:	2230      	movs	r2, #48	@ 0x30
 800560c:	9b07      	ldr	r3, [sp, #28]
 800560e:	454b      	cmp	r3, r9
 8005610:	d31e      	bcc.n	8005650 <__cvt+0xc0>
 8005612:	4638      	mov	r0, r7
 8005614:	9b07      	ldr	r3, [sp, #28]
 8005616:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005618:	1bdb      	subs	r3, r3, r7
 800561a:	6013      	str	r3, [r2, #0]
 800561c:	b008      	add	sp, #32
 800561e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005622:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005626:	eb00 0906 	add.w	r9, r0, r6
 800562a:	d1e5      	bne.n	80055f8 <__cvt+0x68>
 800562c:	7803      	ldrb	r3, [r0, #0]
 800562e:	2b30      	cmp	r3, #48	@ 0x30
 8005630:	d10a      	bne.n	8005648 <__cvt+0xb8>
 8005632:	2200      	movs	r2, #0
 8005634:	2300      	movs	r3, #0
 8005636:	4620      	mov	r0, r4
 8005638:	4629      	mov	r1, r5
 800563a:	f7fb f9b5 	bl	80009a8 <__aeabi_dcmpeq>
 800563e:	b918      	cbnz	r0, 8005648 <__cvt+0xb8>
 8005640:	f1c6 0601 	rsb	r6, r6, #1
 8005644:	f8ca 6000 	str.w	r6, [sl]
 8005648:	f8da 3000 	ldr.w	r3, [sl]
 800564c:	4499      	add	r9, r3
 800564e:	e7d3      	b.n	80055f8 <__cvt+0x68>
 8005650:	1c59      	adds	r1, r3, #1
 8005652:	9107      	str	r1, [sp, #28]
 8005654:	701a      	strb	r2, [r3, #0]
 8005656:	e7d9      	b.n	800560c <__cvt+0x7c>

08005658 <__exponent>:
 8005658:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800565a:	2900      	cmp	r1, #0
 800565c:	bfb6      	itet	lt
 800565e:	232d      	movlt	r3, #45	@ 0x2d
 8005660:	232b      	movge	r3, #43	@ 0x2b
 8005662:	4249      	neglt	r1, r1
 8005664:	2909      	cmp	r1, #9
 8005666:	7002      	strb	r2, [r0, #0]
 8005668:	7043      	strb	r3, [r0, #1]
 800566a:	dd29      	ble.n	80056c0 <__exponent+0x68>
 800566c:	f10d 0307 	add.w	r3, sp, #7
 8005670:	461d      	mov	r5, r3
 8005672:	270a      	movs	r7, #10
 8005674:	fbb1 f6f7 	udiv	r6, r1, r7
 8005678:	461a      	mov	r2, r3
 800567a:	fb07 1416 	mls	r4, r7, r6, r1
 800567e:	3430      	adds	r4, #48	@ 0x30
 8005680:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005684:	460c      	mov	r4, r1
 8005686:	2c63      	cmp	r4, #99	@ 0x63
 8005688:	4631      	mov	r1, r6
 800568a:	f103 33ff 	add.w	r3, r3, #4294967295
 800568e:	dcf1      	bgt.n	8005674 <__exponent+0x1c>
 8005690:	3130      	adds	r1, #48	@ 0x30
 8005692:	1e94      	subs	r4, r2, #2
 8005694:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005698:	4623      	mov	r3, r4
 800569a:	1c41      	adds	r1, r0, #1
 800569c:	42ab      	cmp	r3, r5
 800569e:	d30a      	bcc.n	80056b6 <__exponent+0x5e>
 80056a0:	f10d 0309 	add.w	r3, sp, #9
 80056a4:	1a9b      	subs	r3, r3, r2
 80056a6:	42ac      	cmp	r4, r5
 80056a8:	bf88      	it	hi
 80056aa:	2300      	movhi	r3, #0
 80056ac:	3302      	adds	r3, #2
 80056ae:	4403      	add	r3, r0
 80056b0:	1a18      	subs	r0, r3, r0
 80056b2:	b003      	add	sp, #12
 80056b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80056b6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80056ba:	f801 6f01 	strb.w	r6, [r1, #1]!
 80056be:	e7ed      	b.n	800569c <__exponent+0x44>
 80056c0:	2330      	movs	r3, #48	@ 0x30
 80056c2:	3130      	adds	r1, #48	@ 0x30
 80056c4:	7083      	strb	r3, [r0, #2]
 80056c6:	70c1      	strb	r1, [r0, #3]
 80056c8:	1d03      	adds	r3, r0, #4
 80056ca:	e7f1      	b.n	80056b0 <__exponent+0x58>

080056cc <_printf_float>:
 80056cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056d0:	b091      	sub	sp, #68	@ 0x44
 80056d2:	460c      	mov	r4, r1
 80056d4:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80056d8:	4616      	mov	r6, r2
 80056da:	461f      	mov	r7, r3
 80056dc:	4605      	mov	r5, r0
 80056de:	f000 ffa9 	bl	8006634 <_localeconv_r>
 80056e2:	6803      	ldr	r3, [r0, #0]
 80056e4:	4618      	mov	r0, r3
 80056e6:	9308      	str	r3, [sp, #32]
 80056e8:	f7fa fd32 	bl	8000150 <strlen>
 80056ec:	2300      	movs	r3, #0
 80056ee:	930e      	str	r3, [sp, #56]	@ 0x38
 80056f0:	f8d8 3000 	ldr.w	r3, [r8]
 80056f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80056f6:	3307      	adds	r3, #7
 80056f8:	f023 0307 	bic.w	r3, r3, #7
 80056fc:	f103 0208 	add.w	r2, r3, #8
 8005700:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005704:	f8d4 b000 	ldr.w	fp, [r4]
 8005708:	f8c8 2000 	str.w	r2, [r8]
 800570c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005710:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005714:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005716:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800571a:	f04f 32ff 	mov.w	r2, #4294967295
 800571e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005722:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005726:	4b9c      	ldr	r3, [pc, #624]	@ (8005998 <_printf_float+0x2cc>)
 8005728:	f7fb f970 	bl	8000a0c <__aeabi_dcmpun>
 800572c:	bb70      	cbnz	r0, 800578c <_printf_float+0xc0>
 800572e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005732:	f04f 32ff 	mov.w	r2, #4294967295
 8005736:	4b98      	ldr	r3, [pc, #608]	@ (8005998 <_printf_float+0x2cc>)
 8005738:	f7fb f94a 	bl	80009d0 <__aeabi_dcmple>
 800573c:	bb30      	cbnz	r0, 800578c <_printf_float+0xc0>
 800573e:	2200      	movs	r2, #0
 8005740:	2300      	movs	r3, #0
 8005742:	4640      	mov	r0, r8
 8005744:	4649      	mov	r1, r9
 8005746:	f7fb f939 	bl	80009bc <__aeabi_dcmplt>
 800574a:	b110      	cbz	r0, 8005752 <_printf_float+0x86>
 800574c:	232d      	movs	r3, #45	@ 0x2d
 800574e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005752:	4a92      	ldr	r2, [pc, #584]	@ (800599c <_printf_float+0x2d0>)
 8005754:	4b92      	ldr	r3, [pc, #584]	@ (80059a0 <_printf_float+0x2d4>)
 8005756:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800575a:	bf94      	ite	ls
 800575c:	4690      	movls	r8, r2
 800575e:	4698      	movhi	r8, r3
 8005760:	2303      	movs	r3, #3
 8005762:	f04f 0900 	mov.w	r9, #0
 8005766:	6123      	str	r3, [r4, #16]
 8005768:	f02b 0304 	bic.w	r3, fp, #4
 800576c:	6023      	str	r3, [r4, #0]
 800576e:	4633      	mov	r3, r6
 8005770:	4621      	mov	r1, r4
 8005772:	4628      	mov	r0, r5
 8005774:	9700      	str	r7, [sp, #0]
 8005776:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005778:	f000 fb14 	bl	8005da4 <_printf_common>
 800577c:	3001      	adds	r0, #1
 800577e:	f040 8090 	bne.w	80058a2 <_printf_float+0x1d6>
 8005782:	f04f 30ff 	mov.w	r0, #4294967295
 8005786:	b011      	add	sp, #68	@ 0x44
 8005788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800578c:	4642      	mov	r2, r8
 800578e:	464b      	mov	r3, r9
 8005790:	4640      	mov	r0, r8
 8005792:	4649      	mov	r1, r9
 8005794:	f7fb f93a 	bl	8000a0c <__aeabi_dcmpun>
 8005798:	b148      	cbz	r0, 80057ae <_printf_float+0xe2>
 800579a:	464b      	mov	r3, r9
 800579c:	2b00      	cmp	r3, #0
 800579e:	bfb8      	it	lt
 80057a0:	232d      	movlt	r3, #45	@ 0x2d
 80057a2:	4a80      	ldr	r2, [pc, #512]	@ (80059a4 <_printf_float+0x2d8>)
 80057a4:	bfb8      	it	lt
 80057a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80057aa:	4b7f      	ldr	r3, [pc, #508]	@ (80059a8 <_printf_float+0x2dc>)
 80057ac:	e7d3      	b.n	8005756 <_printf_float+0x8a>
 80057ae:	6863      	ldr	r3, [r4, #4]
 80057b0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80057b4:	1c5a      	adds	r2, r3, #1
 80057b6:	d13f      	bne.n	8005838 <_printf_float+0x16c>
 80057b8:	2306      	movs	r3, #6
 80057ba:	6063      	str	r3, [r4, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80057c2:	6023      	str	r3, [r4, #0]
 80057c4:	9206      	str	r2, [sp, #24]
 80057c6:	aa0e      	add	r2, sp, #56	@ 0x38
 80057c8:	e9cd a204 	strd	sl, r2, [sp, #16]
 80057cc:	aa0d      	add	r2, sp, #52	@ 0x34
 80057ce:	9203      	str	r2, [sp, #12]
 80057d0:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80057d4:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80057d8:	6863      	ldr	r3, [r4, #4]
 80057da:	4642      	mov	r2, r8
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	4628      	mov	r0, r5
 80057e0:	464b      	mov	r3, r9
 80057e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80057e4:	f7ff fed4 	bl	8005590 <__cvt>
 80057e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80057ea:	4680      	mov	r8, r0
 80057ec:	2947      	cmp	r1, #71	@ 0x47
 80057ee:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80057f0:	d128      	bne.n	8005844 <_printf_float+0x178>
 80057f2:	1cc8      	adds	r0, r1, #3
 80057f4:	db02      	blt.n	80057fc <_printf_float+0x130>
 80057f6:	6863      	ldr	r3, [r4, #4]
 80057f8:	4299      	cmp	r1, r3
 80057fa:	dd40      	ble.n	800587e <_printf_float+0x1b2>
 80057fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8005800:	fa5f fa8a 	uxtb.w	sl, sl
 8005804:	4652      	mov	r2, sl
 8005806:	3901      	subs	r1, #1
 8005808:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800580c:	910d      	str	r1, [sp, #52]	@ 0x34
 800580e:	f7ff ff23 	bl	8005658 <__exponent>
 8005812:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005814:	4681      	mov	r9, r0
 8005816:	1813      	adds	r3, r2, r0
 8005818:	2a01      	cmp	r2, #1
 800581a:	6123      	str	r3, [r4, #16]
 800581c:	dc02      	bgt.n	8005824 <_printf_float+0x158>
 800581e:	6822      	ldr	r2, [r4, #0]
 8005820:	07d2      	lsls	r2, r2, #31
 8005822:	d501      	bpl.n	8005828 <_printf_float+0x15c>
 8005824:	3301      	adds	r3, #1
 8005826:	6123      	str	r3, [r4, #16]
 8005828:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800582c:	2b00      	cmp	r3, #0
 800582e:	d09e      	beq.n	800576e <_printf_float+0xa2>
 8005830:	232d      	movs	r3, #45	@ 0x2d
 8005832:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005836:	e79a      	b.n	800576e <_printf_float+0xa2>
 8005838:	2947      	cmp	r1, #71	@ 0x47
 800583a:	d1bf      	bne.n	80057bc <_printf_float+0xf0>
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1bd      	bne.n	80057bc <_printf_float+0xf0>
 8005840:	2301      	movs	r3, #1
 8005842:	e7ba      	b.n	80057ba <_printf_float+0xee>
 8005844:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005848:	d9dc      	bls.n	8005804 <_printf_float+0x138>
 800584a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800584e:	d118      	bne.n	8005882 <_printf_float+0x1b6>
 8005850:	2900      	cmp	r1, #0
 8005852:	6863      	ldr	r3, [r4, #4]
 8005854:	dd0b      	ble.n	800586e <_printf_float+0x1a2>
 8005856:	6121      	str	r1, [r4, #16]
 8005858:	b913      	cbnz	r3, 8005860 <_printf_float+0x194>
 800585a:	6822      	ldr	r2, [r4, #0]
 800585c:	07d0      	lsls	r0, r2, #31
 800585e:	d502      	bpl.n	8005866 <_printf_float+0x19a>
 8005860:	3301      	adds	r3, #1
 8005862:	440b      	add	r3, r1
 8005864:	6123      	str	r3, [r4, #16]
 8005866:	f04f 0900 	mov.w	r9, #0
 800586a:	65a1      	str	r1, [r4, #88]	@ 0x58
 800586c:	e7dc      	b.n	8005828 <_printf_float+0x15c>
 800586e:	b913      	cbnz	r3, 8005876 <_printf_float+0x1aa>
 8005870:	6822      	ldr	r2, [r4, #0]
 8005872:	07d2      	lsls	r2, r2, #31
 8005874:	d501      	bpl.n	800587a <_printf_float+0x1ae>
 8005876:	3302      	adds	r3, #2
 8005878:	e7f4      	b.n	8005864 <_printf_float+0x198>
 800587a:	2301      	movs	r3, #1
 800587c:	e7f2      	b.n	8005864 <_printf_float+0x198>
 800587e:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005882:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005884:	4299      	cmp	r1, r3
 8005886:	db05      	blt.n	8005894 <_printf_float+0x1c8>
 8005888:	6823      	ldr	r3, [r4, #0]
 800588a:	6121      	str	r1, [r4, #16]
 800588c:	07d8      	lsls	r0, r3, #31
 800588e:	d5ea      	bpl.n	8005866 <_printf_float+0x19a>
 8005890:	1c4b      	adds	r3, r1, #1
 8005892:	e7e7      	b.n	8005864 <_printf_float+0x198>
 8005894:	2900      	cmp	r1, #0
 8005896:	bfcc      	ite	gt
 8005898:	2201      	movgt	r2, #1
 800589a:	f1c1 0202 	rsble	r2, r1, #2
 800589e:	4413      	add	r3, r2
 80058a0:	e7e0      	b.n	8005864 <_printf_float+0x198>
 80058a2:	6823      	ldr	r3, [r4, #0]
 80058a4:	055a      	lsls	r2, r3, #21
 80058a6:	d407      	bmi.n	80058b8 <_printf_float+0x1ec>
 80058a8:	6923      	ldr	r3, [r4, #16]
 80058aa:	4642      	mov	r2, r8
 80058ac:	4631      	mov	r1, r6
 80058ae:	4628      	mov	r0, r5
 80058b0:	47b8      	blx	r7
 80058b2:	3001      	adds	r0, #1
 80058b4:	d12b      	bne.n	800590e <_printf_float+0x242>
 80058b6:	e764      	b.n	8005782 <_printf_float+0xb6>
 80058b8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058bc:	f240 80dc 	bls.w	8005a78 <_printf_float+0x3ac>
 80058c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058c4:	2200      	movs	r2, #0
 80058c6:	2300      	movs	r3, #0
 80058c8:	f7fb f86e 	bl	80009a8 <__aeabi_dcmpeq>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	d033      	beq.n	8005938 <_printf_float+0x26c>
 80058d0:	2301      	movs	r3, #1
 80058d2:	4631      	mov	r1, r6
 80058d4:	4628      	mov	r0, r5
 80058d6:	4a35      	ldr	r2, [pc, #212]	@ (80059ac <_printf_float+0x2e0>)
 80058d8:	47b8      	blx	r7
 80058da:	3001      	adds	r0, #1
 80058dc:	f43f af51 	beq.w	8005782 <_printf_float+0xb6>
 80058e0:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80058e4:	4543      	cmp	r3, r8
 80058e6:	db02      	blt.n	80058ee <_printf_float+0x222>
 80058e8:	6823      	ldr	r3, [r4, #0]
 80058ea:	07d8      	lsls	r0, r3, #31
 80058ec:	d50f      	bpl.n	800590e <_printf_float+0x242>
 80058ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058f2:	4631      	mov	r1, r6
 80058f4:	4628      	mov	r0, r5
 80058f6:	47b8      	blx	r7
 80058f8:	3001      	adds	r0, #1
 80058fa:	f43f af42 	beq.w	8005782 <_printf_float+0xb6>
 80058fe:	f04f 0900 	mov.w	r9, #0
 8005902:	f108 38ff 	add.w	r8, r8, #4294967295
 8005906:	f104 0a1a 	add.w	sl, r4, #26
 800590a:	45c8      	cmp	r8, r9
 800590c:	dc09      	bgt.n	8005922 <_printf_float+0x256>
 800590e:	6823      	ldr	r3, [r4, #0]
 8005910:	079b      	lsls	r3, r3, #30
 8005912:	f100 8102 	bmi.w	8005b1a <_printf_float+0x44e>
 8005916:	68e0      	ldr	r0, [r4, #12]
 8005918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800591a:	4298      	cmp	r0, r3
 800591c:	bfb8      	it	lt
 800591e:	4618      	movlt	r0, r3
 8005920:	e731      	b.n	8005786 <_printf_float+0xba>
 8005922:	2301      	movs	r3, #1
 8005924:	4652      	mov	r2, sl
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f af28 	beq.w	8005782 <_printf_float+0xb6>
 8005932:	f109 0901 	add.w	r9, r9, #1
 8005936:	e7e8      	b.n	800590a <_printf_float+0x23e>
 8005938:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800593a:	2b00      	cmp	r3, #0
 800593c:	dc38      	bgt.n	80059b0 <_printf_float+0x2e4>
 800593e:	2301      	movs	r3, #1
 8005940:	4631      	mov	r1, r6
 8005942:	4628      	mov	r0, r5
 8005944:	4a19      	ldr	r2, [pc, #100]	@ (80059ac <_printf_float+0x2e0>)
 8005946:	47b8      	blx	r7
 8005948:	3001      	adds	r0, #1
 800594a:	f43f af1a 	beq.w	8005782 <_printf_float+0xb6>
 800594e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8005952:	ea59 0303 	orrs.w	r3, r9, r3
 8005956:	d102      	bne.n	800595e <_printf_float+0x292>
 8005958:	6823      	ldr	r3, [r4, #0]
 800595a:	07d9      	lsls	r1, r3, #31
 800595c:	d5d7      	bpl.n	800590e <_printf_float+0x242>
 800595e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005962:	4631      	mov	r1, r6
 8005964:	4628      	mov	r0, r5
 8005966:	47b8      	blx	r7
 8005968:	3001      	adds	r0, #1
 800596a:	f43f af0a 	beq.w	8005782 <_printf_float+0xb6>
 800596e:	f04f 0a00 	mov.w	sl, #0
 8005972:	f104 0b1a 	add.w	fp, r4, #26
 8005976:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005978:	425b      	negs	r3, r3
 800597a:	4553      	cmp	r3, sl
 800597c:	dc01      	bgt.n	8005982 <_printf_float+0x2b6>
 800597e:	464b      	mov	r3, r9
 8005980:	e793      	b.n	80058aa <_printf_float+0x1de>
 8005982:	2301      	movs	r3, #1
 8005984:	465a      	mov	r2, fp
 8005986:	4631      	mov	r1, r6
 8005988:	4628      	mov	r0, r5
 800598a:	47b8      	blx	r7
 800598c:	3001      	adds	r0, #1
 800598e:	f43f aef8 	beq.w	8005782 <_printf_float+0xb6>
 8005992:	f10a 0a01 	add.w	sl, sl, #1
 8005996:	e7ee      	b.n	8005976 <_printf_float+0x2aa>
 8005998:	7fefffff 	.word	0x7fefffff
 800599c:	08008dbc 	.word	0x08008dbc
 80059a0:	08008dc0 	.word	0x08008dc0
 80059a4:	08008dc4 	.word	0x08008dc4
 80059a8:	08008dc8 	.word	0x08008dc8
 80059ac:	08008dcc 	.word	0x08008dcc
 80059b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059b2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80059b6:	4553      	cmp	r3, sl
 80059b8:	bfa8      	it	ge
 80059ba:	4653      	movge	r3, sl
 80059bc:	2b00      	cmp	r3, #0
 80059be:	4699      	mov	r9, r3
 80059c0:	dc36      	bgt.n	8005a30 <_printf_float+0x364>
 80059c2:	f04f 0b00 	mov.w	fp, #0
 80059c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80059ca:	f104 021a 	add.w	r2, r4, #26
 80059ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80059d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80059d2:	eba3 0309 	sub.w	r3, r3, r9
 80059d6:	455b      	cmp	r3, fp
 80059d8:	dc31      	bgt.n	8005a3e <_printf_float+0x372>
 80059da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059dc:	459a      	cmp	sl, r3
 80059de:	dc3a      	bgt.n	8005a56 <_printf_float+0x38a>
 80059e0:	6823      	ldr	r3, [r4, #0]
 80059e2:	07da      	lsls	r2, r3, #31
 80059e4:	d437      	bmi.n	8005a56 <_printf_float+0x38a>
 80059e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80059e8:	ebaa 0903 	sub.w	r9, sl, r3
 80059ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80059ee:	ebaa 0303 	sub.w	r3, sl, r3
 80059f2:	4599      	cmp	r9, r3
 80059f4:	bfa8      	it	ge
 80059f6:	4699      	movge	r9, r3
 80059f8:	f1b9 0f00 	cmp.w	r9, #0
 80059fc:	dc33      	bgt.n	8005a66 <_printf_float+0x39a>
 80059fe:	f04f 0800 	mov.w	r8, #0
 8005a02:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a06:	f104 0b1a 	add.w	fp, r4, #26
 8005a0a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a0c:	ebaa 0303 	sub.w	r3, sl, r3
 8005a10:	eba3 0309 	sub.w	r3, r3, r9
 8005a14:	4543      	cmp	r3, r8
 8005a16:	f77f af7a 	ble.w	800590e <_printf_float+0x242>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	465a      	mov	r2, fp
 8005a1e:	4631      	mov	r1, r6
 8005a20:	4628      	mov	r0, r5
 8005a22:	47b8      	blx	r7
 8005a24:	3001      	adds	r0, #1
 8005a26:	f43f aeac 	beq.w	8005782 <_printf_float+0xb6>
 8005a2a:	f108 0801 	add.w	r8, r8, #1
 8005a2e:	e7ec      	b.n	8005a0a <_printf_float+0x33e>
 8005a30:	4642      	mov	r2, r8
 8005a32:	4631      	mov	r1, r6
 8005a34:	4628      	mov	r0, r5
 8005a36:	47b8      	blx	r7
 8005a38:	3001      	adds	r0, #1
 8005a3a:	d1c2      	bne.n	80059c2 <_printf_float+0x2f6>
 8005a3c:	e6a1      	b.n	8005782 <_printf_float+0xb6>
 8005a3e:	2301      	movs	r3, #1
 8005a40:	4631      	mov	r1, r6
 8005a42:	4628      	mov	r0, r5
 8005a44:	920a      	str	r2, [sp, #40]	@ 0x28
 8005a46:	47b8      	blx	r7
 8005a48:	3001      	adds	r0, #1
 8005a4a:	f43f ae9a 	beq.w	8005782 <_printf_float+0xb6>
 8005a4e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a50:	f10b 0b01 	add.w	fp, fp, #1
 8005a54:	e7bb      	b.n	80059ce <_printf_float+0x302>
 8005a56:	4631      	mov	r1, r6
 8005a58:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a5c:	4628      	mov	r0, r5
 8005a5e:	47b8      	blx	r7
 8005a60:	3001      	adds	r0, #1
 8005a62:	d1c0      	bne.n	80059e6 <_printf_float+0x31a>
 8005a64:	e68d      	b.n	8005782 <_printf_float+0xb6>
 8005a66:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005a68:	464b      	mov	r3, r9
 8005a6a:	4631      	mov	r1, r6
 8005a6c:	4628      	mov	r0, r5
 8005a6e:	4442      	add	r2, r8
 8005a70:	47b8      	blx	r7
 8005a72:	3001      	adds	r0, #1
 8005a74:	d1c3      	bne.n	80059fe <_printf_float+0x332>
 8005a76:	e684      	b.n	8005782 <_printf_float+0xb6>
 8005a78:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005a7c:	f1ba 0f01 	cmp.w	sl, #1
 8005a80:	dc01      	bgt.n	8005a86 <_printf_float+0x3ba>
 8005a82:	07db      	lsls	r3, r3, #31
 8005a84:	d536      	bpl.n	8005af4 <_printf_float+0x428>
 8005a86:	2301      	movs	r3, #1
 8005a88:	4642      	mov	r2, r8
 8005a8a:	4631      	mov	r1, r6
 8005a8c:	4628      	mov	r0, r5
 8005a8e:	47b8      	blx	r7
 8005a90:	3001      	adds	r0, #1
 8005a92:	f43f ae76 	beq.w	8005782 <_printf_float+0xb6>
 8005a96:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005a9a:	4631      	mov	r1, r6
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	47b8      	blx	r7
 8005aa0:	3001      	adds	r0, #1
 8005aa2:	f43f ae6e 	beq.w	8005782 <_printf_float+0xb6>
 8005aa6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005aaa:	2200      	movs	r2, #0
 8005aac:	2300      	movs	r3, #0
 8005aae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005ab2:	f7fa ff79 	bl	80009a8 <__aeabi_dcmpeq>
 8005ab6:	b9c0      	cbnz	r0, 8005aea <_printf_float+0x41e>
 8005ab8:	4653      	mov	r3, sl
 8005aba:	f108 0201 	add.w	r2, r8, #1
 8005abe:	4631      	mov	r1, r6
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	47b8      	blx	r7
 8005ac4:	3001      	adds	r0, #1
 8005ac6:	d10c      	bne.n	8005ae2 <_printf_float+0x416>
 8005ac8:	e65b      	b.n	8005782 <_printf_float+0xb6>
 8005aca:	2301      	movs	r3, #1
 8005acc:	465a      	mov	r2, fp
 8005ace:	4631      	mov	r1, r6
 8005ad0:	4628      	mov	r0, r5
 8005ad2:	47b8      	blx	r7
 8005ad4:	3001      	adds	r0, #1
 8005ad6:	f43f ae54 	beq.w	8005782 <_printf_float+0xb6>
 8005ada:	f108 0801 	add.w	r8, r8, #1
 8005ade:	45d0      	cmp	r8, sl
 8005ae0:	dbf3      	blt.n	8005aca <_printf_float+0x3fe>
 8005ae2:	464b      	mov	r3, r9
 8005ae4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005ae8:	e6e0      	b.n	80058ac <_printf_float+0x1e0>
 8005aea:	f04f 0800 	mov.w	r8, #0
 8005aee:	f104 0b1a 	add.w	fp, r4, #26
 8005af2:	e7f4      	b.n	8005ade <_printf_float+0x412>
 8005af4:	2301      	movs	r3, #1
 8005af6:	4642      	mov	r2, r8
 8005af8:	e7e1      	b.n	8005abe <_printf_float+0x3f2>
 8005afa:	2301      	movs	r3, #1
 8005afc:	464a      	mov	r2, r9
 8005afe:	4631      	mov	r1, r6
 8005b00:	4628      	mov	r0, r5
 8005b02:	47b8      	blx	r7
 8005b04:	3001      	adds	r0, #1
 8005b06:	f43f ae3c 	beq.w	8005782 <_printf_float+0xb6>
 8005b0a:	f108 0801 	add.w	r8, r8, #1
 8005b0e:	68e3      	ldr	r3, [r4, #12]
 8005b10:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005b12:	1a5b      	subs	r3, r3, r1
 8005b14:	4543      	cmp	r3, r8
 8005b16:	dcf0      	bgt.n	8005afa <_printf_float+0x42e>
 8005b18:	e6fd      	b.n	8005916 <_printf_float+0x24a>
 8005b1a:	f04f 0800 	mov.w	r8, #0
 8005b1e:	f104 0919 	add.w	r9, r4, #25
 8005b22:	e7f4      	b.n	8005b0e <_printf_float+0x442>

08005b24 <__sfputc_r>:
 8005b24:	6893      	ldr	r3, [r2, #8]
 8005b26:	b410      	push	{r4}
 8005b28:	3b01      	subs	r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	6093      	str	r3, [r2, #8]
 8005b2e:	da07      	bge.n	8005b40 <__sfputc_r+0x1c>
 8005b30:	6994      	ldr	r4, [r2, #24]
 8005b32:	42a3      	cmp	r3, r4
 8005b34:	db01      	blt.n	8005b3a <__sfputc_r+0x16>
 8005b36:	290a      	cmp	r1, #10
 8005b38:	d102      	bne.n	8005b40 <__sfputc_r+0x1c>
 8005b3a:	bc10      	pop	{r4}
 8005b3c:	f000 bc83 	b.w	8006446 <__swbuf_r>
 8005b40:	6813      	ldr	r3, [r2, #0]
 8005b42:	1c58      	adds	r0, r3, #1
 8005b44:	6010      	str	r0, [r2, #0]
 8005b46:	7019      	strb	r1, [r3, #0]
 8005b48:	4608      	mov	r0, r1
 8005b4a:	bc10      	pop	{r4}
 8005b4c:	4770      	bx	lr

08005b4e <__sfputs_r>:
 8005b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b50:	4606      	mov	r6, r0
 8005b52:	460f      	mov	r7, r1
 8005b54:	4614      	mov	r4, r2
 8005b56:	18d5      	adds	r5, r2, r3
 8005b58:	42ac      	cmp	r4, r5
 8005b5a:	d101      	bne.n	8005b60 <__sfputs_r+0x12>
 8005b5c:	2000      	movs	r0, #0
 8005b5e:	e007      	b.n	8005b70 <__sfputs_r+0x22>
 8005b60:	463a      	mov	r2, r7
 8005b62:	4630      	mov	r0, r6
 8005b64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b68:	f7ff ffdc 	bl	8005b24 <__sfputc_r>
 8005b6c:	1c43      	adds	r3, r0, #1
 8005b6e:	d1f3      	bne.n	8005b58 <__sfputs_r+0xa>
 8005b70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b74 <_vfiprintf_r>:
 8005b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b78:	460d      	mov	r5, r1
 8005b7a:	4614      	mov	r4, r2
 8005b7c:	4698      	mov	r8, r3
 8005b7e:	4606      	mov	r6, r0
 8005b80:	b09d      	sub	sp, #116	@ 0x74
 8005b82:	b118      	cbz	r0, 8005b8c <_vfiprintf_r+0x18>
 8005b84:	6a03      	ldr	r3, [r0, #32]
 8005b86:	b90b      	cbnz	r3, 8005b8c <_vfiprintf_r+0x18>
 8005b88:	f000 fbd2 	bl	8006330 <__sinit>
 8005b8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b8e:	07d9      	lsls	r1, r3, #31
 8005b90:	d405      	bmi.n	8005b9e <_vfiprintf_r+0x2a>
 8005b92:	89ab      	ldrh	r3, [r5, #12]
 8005b94:	059a      	lsls	r2, r3, #22
 8005b96:	d402      	bmi.n	8005b9e <_vfiprintf_r+0x2a>
 8005b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b9a:	f000 fde4 	bl	8006766 <__retarget_lock_acquire_recursive>
 8005b9e:	89ab      	ldrh	r3, [r5, #12]
 8005ba0:	071b      	lsls	r3, r3, #28
 8005ba2:	d501      	bpl.n	8005ba8 <_vfiprintf_r+0x34>
 8005ba4:	692b      	ldr	r3, [r5, #16]
 8005ba6:	b99b      	cbnz	r3, 8005bd0 <_vfiprintf_r+0x5c>
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4630      	mov	r0, r6
 8005bac:	f000 fc8a 	bl	80064c4 <__swsetup_r>
 8005bb0:	b170      	cbz	r0, 8005bd0 <_vfiprintf_r+0x5c>
 8005bb2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bb4:	07dc      	lsls	r4, r3, #31
 8005bb6:	d504      	bpl.n	8005bc2 <_vfiprintf_r+0x4e>
 8005bb8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bbc:	b01d      	add	sp, #116	@ 0x74
 8005bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bc2:	89ab      	ldrh	r3, [r5, #12]
 8005bc4:	0598      	lsls	r0, r3, #22
 8005bc6:	d4f7      	bmi.n	8005bb8 <_vfiprintf_r+0x44>
 8005bc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bca:	f000 fdcd 	bl	8006768 <__retarget_lock_release_recursive>
 8005bce:	e7f3      	b.n	8005bb8 <_vfiprintf_r+0x44>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bd4:	2320      	movs	r3, #32
 8005bd6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bda:	2330      	movs	r3, #48	@ 0x30
 8005bdc:	f04f 0901 	mov.w	r9, #1
 8005be0:	f8cd 800c 	str.w	r8, [sp, #12]
 8005be4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005d90 <_vfiprintf_r+0x21c>
 8005be8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005bec:	4623      	mov	r3, r4
 8005bee:	469a      	mov	sl, r3
 8005bf0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bf4:	b10a      	cbz	r2, 8005bfa <_vfiprintf_r+0x86>
 8005bf6:	2a25      	cmp	r2, #37	@ 0x25
 8005bf8:	d1f9      	bne.n	8005bee <_vfiprintf_r+0x7a>
 8005bfa:	ebba 0b04 	subs.w	fp, sl, r4
 8005bfe:	d00b      	beq.n	8005c18 <_vfiprintf_r+0xa4>
 8005c00:	465b      	mov	r3, fp
 8005c02:	4622      	mov	r2, r4
 8005c04:	4629      	mov	r1, r5
 8005c06:	4630      	mov	r0, r6
 8005c08:	f7ff ffa1 	bl	8005b4e <__sfputs_r>
 8005c0c:	3001      	adds	r0, #1
 8005c0e:	f000 80a7 	beq.w	8005d60 <_vfiprintf_r+0x1ec>
 8005c12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c14:	445a      	add	r2, fp
 8005c16:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c18:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	f000 809f 	beq.w	8005d60 <_vfiprintf_r+0x1ec>
 8005c22:	2300      	movs	r3, #0
 8005c24:	f04f 32ff 	mov.w	r2, #4294967295
 8005c28:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c2c:	f10a 0a01 	add.w	sl, sl, #1
 8005c30:	9304      	str	r3, [sp, #16]
 8005c32:	9307      	str	r3, [sp, #28]
 8005c34:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c38:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c3a:	4654      	mov	r4, sl
 8005c3c:	2205      	movs	r2, #5
 8005c3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c42:	4853      	ldr	r0, [pc, #332]	@ (8005d90 <_vfiprintf_r+0x21c>)
 8005c44:	f000 fd91 	bl	800676a <memchr>
 8005c48:	9a04      	ldr	r2, [sp, #16]
 8005c4a:	b9d8      	cbnz	r0, 8005c84 <_vfiprintf_r+0x110>
 8005c4c:	06d1      	lsls	r1, r2, #27
 8005c4e:	bf44      	itt	mi
 8005c50:	2320      	movmi	r3, #32
 8005c52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c56:	0713      	lsls	r3, r2, #28
 8005c58:	bf44      	itt	mi
 8005c5a:	232b      	movmi	r3, #43	@ 0x2b
 8005c5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c60:	f89a 3000 	ldrb.w	r3, [sl]
 8005c64:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c66:	d015      	beq.n	8005c94 <_vfiprintf_r+0x120>
 8005c68:	4654      	mov	r4, sl
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	f04f 0c0a 	mov.w	ip, #10
 8005c70:	9a07      	ldr	r2, [sp, #28]
 8005c72:	4621      	mov	r1, r4
 8005c74:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c78:	3b30      	subs	r3, #48	@ 0x30
 8005c7a:	2b09      	cmp	r3, #9
 8005c7c:	d94b      	bls.n	8005d16 <_vfiprintf_r+0x1a2>
 8005c7e:	b1b0      	cbz	r0, 8005cae <_vfiprintf_r+0x13a>
 8005c80:	9207      	str	r2, [sp, #28]
 8005c82:	e014      	b.n	8005cae <_vfiprintf_r+0x13a>
 8005c84:	eba0 0308 	sub.w	r3, r0, r8
 8005c88:	fa09 f303 	lsl.w	r3, r9, r3
 8005c8c:	4313      	orrs	r3, r2
 8005c8e:	46a2      	mov	sl, r4
 8005c90:	9304      	str	r3, [sp, #16]
 8005c92:	e7d2      	b.n	8005c3a <_vfiprintf_r+0xc6>
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	1d19      	adds	r1, r3, #4
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	9103      	str	r1, [sp, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	bfbb      	ittet	lt
 8005ca0:	425b      	neglt	r3, r3
 8005ca2:	f042 0202 	orrlt.w	r2, r2, #2
 8005ca6:	9307      	strge	r3, [sp, #28]
 8005ca8:	9307      	strlt	r3, [sp, #28]
 8005caa:	bfb8      	it	lt
 8005cac:	9204      	strlt	r2, [sp, #16]
 8005cae:	7823      	ldrb	r3, [r4, #0]
 8005cb0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cb2:	d10a      	bne.n	8005cca <_vfiprintf_r+0x156>
 8005cb4:	7863      	ldrb	r3, [r4, #1]
 8005cb6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cb8:	d132      	bne.n	8005d20 <_vfiprintf_r+0x1ac>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	3402      	adds	r4, #2
 8005cbe:	1d1a      	adds	r2, r3, #4
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	9203      	str	r2, [sp, #12]
 8005cc4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005cc8:	9305      	str	r3, [sp, #20]
 8005cca:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005d94 <_vfiprintf_r+0x220>
 8005cce:	2203      	movs	r2, #3
 8005cd0:	4650      	mov	r0, sl
 8005cd2:	7821      	ldrb	r1, [r4, #0]
 8005cd4:	f000 fd49 	bl	800676a <memchr>
 8005cd8:	b138      	cbz	r0, 8005cea <_vfiprintf_r+0x176>
 8005cda:	2240      	movs	r2, #64	@ 0x40
 8005cdc:	9b04      	ldr	r3, [sp, #16]
 8005cde:	eba0 000a 	sub.w	r0, r0, sl
 8005ce2:	4082      	lsls	r2, r0
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	3401      	adds	r4, #1
 8005ce8:	9304      	str	r3, [sp, #16]
 8005cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cee:	2206      	movs	r2, #6
 8005cf0:	4829      	ldr	r0, [pc, #164]	@ (8005d98 <_vfiprintf_r+0x224>)
 8005cf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cf6:	f000 fd38 	bl	800676a <memchr>
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	d03f      	beq.n	8005d7e <_vfiprintf_r+0x20a>
 8005cfe:	4b27      	ldr	r3, [pc, #156]	@ (8005d9c <_vfiprintf_r+0x228>)
 8005d00:	bb1b      	cbnz	r3, 8005d4a <_vfiprintf_r+0x1d6>
 8005d02:	9b03      	ldr	r3, [sp, #12]
 8005d04:	3307      	adds	r3, #7
 8005d06:	f023 0307 	bic.w	r3, r3, #7
 8005d0a:	3308      	adds	r3, #8
 8005d0c:	9303      	str	r3, [sp, #12]
 8005d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d10:	443b      	add	r3, r7
 8005d12:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d14:	e76a      	b.n	8005bec <_vfiprintf_r+0x78>
 8005d16:	460c      	mov	r4, r1
 8005d18:	2001      	movs	r0, #1
 8005d1a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d1e:	e7a8      	b.n	8005c72 <_vfiprintf_r+0xfe>
 8005d20:	2300      	movs	r3, #0
 8005d22:	f04f 0c0a 	mov.w	ip, #10
 8005d26:	4619      	mov	r1, r3
 8005d28:	3401      	adds	r4, #1
 8005d2a:	9305      	str	r3, [sp, #20]
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d32:	3a30      	subs	r2, #48	@ 0x30
 8005d34:	2a09      	cmp	r2, #9
 8005d36:	d903      	bls.n	8005d40 <_vfiprintf_r+0x1cc>
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0c6      	beq.n	8005cca <_vfiprintf_r+0x156>
 8005d3c:	9105      	str	r1, [sp, #20]
 8005d3e:	e7c4      	b.n	8005cca <_vfiprintf_r+0x156>
 8005d40:	4604      	mov	r4, r0
 8005d42:	2301      	movs	r3, #1
 8005d44:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d48:	e7f0      	b.n	8005d2c <_vfiprintf_r+0x1b8>
 8005d4a:	ab03      	add	r3, sp, #12
 8005d4c:	9300      	str	r3, [sp, #0]
 8005d4e:	462a      	mov	r2, r5
 8005d50:	4630      	mov	r0, r6
 8005d52:	4b13      	ldr	r3, [pc, #76]	@ (8005da0 <_vfiprintf_r+0x22c>)
 8005d54:	a904      	add	r1, sp, #16
 8005d56:	f7ff fcb9 	bl	80056cc <_printf_float>
 8005d5a:	4607      	mov	r7, r0
 8005d5c:	1c78      	adds	r0, r7, #1
 8005d5e:	d1d6      	bne.n	8005d0e <_vfiprintf_r+0x19a>
 8005d60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d62:	07d9      	lsls	r1, r3, #31
 8005d64:	d405      	bmi.n	8005d72 <_vfiprintf_r+0x1fe>
 8005d66:	89ab      	ldrh	r3, [r5, #12]
 8005d68:	059a      	lsls	r2, r3, #22
 8005d6a:	d402      	bmi.n	8005d72 <_vfiprintf_r+0x1fe>
 8005d6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d6e:	f000 fcfb 	bl	8006768 <__retarget_lock_release_recursive>
 8005d72:	89ab      	ldrh	r3, [r5, #12]
 8005d74:	065b      	lsls	r3, r3, #25
 8005d76:	f53f af1f 	bmi.w	8005bb8 <_vfiprintf_r+0x44>
 8005d7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d7c:	e71e      	b.n	8005bbc <_vfiprintf_r+0x48>
 8005d7e:	ab03      	add	r3, sp, #12
 8005d80:	9300      	str	r3, [sp, #0]
 8005d82:	462a      	mov	r2, r5
 8005d84:	4630      	mov	r0, r6
 8005d86:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <_vfiprintf_r+0x22c>)
 8005d88:	a904      	add	r1, sp, #16
 8005d8a:	f000 f87d 	bl	8005e88 <_printf_i>
 8005d8e:	e7e4      	b.n	8005d5a <_vfiprintf_r+0x1e6>
 8005d90:	08008dce 	.word	0x08008dce
 8005d94:	08008dd4 	.word	0x08008dd4
 8005d98:	08008dd8 	.word	0x08008dd8
 8005d9c:	080056cd 	.word	0x080056cd
 8005da0:	08005b4f 	.word	0x08005b4f

08005da4 <_printf_common>:
 8005da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da8:	4616      	mov	r6, r2
 8005daa:	4698      	mov	r8, r3
 8005dac:	688a      	ldr	r2, [r1, #8]
 8005dae:	690b      	ldr	r3, [r1, #16]
 8005db0:	4607      	mov	r7, r0
 8005db2:	4293      	cmp	r3, r2
 8005db4:	bfb8      	it	lt
 8005db6:	4613      	movlt	r3, r2
 8005db8:	6033      	str	r3, [r6, #0]
 8005dba:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005dbe:	460c      	mov	r4, r1
 8005dc0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dc4:	b10a      	cbz	r2, 8005dca <_printf_common+0x26>
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	6033      	str	r3, [r6, #0]
 8005dca:	6823      	ldr	r3, [r4, #0]
 8005dcc:	0699      	lsls	r1, r3, #26
 8005dce:	bf42      	ittt	mi
 8005dd0:	6833      	ldrmi	r3, [r6, #0]
 8005dd2:	3302      	addmi	r3, #2
 8005dd4:	6033      	strmi	r3, [r6, #0]
 8005dd6:	6825      	ldr	r5, [r4, #0]
 8005dd8:	f015 0506 	ands.w	r5, r5, #6
 8005ddc:	d106      	bne.n	8005dec <_printf_common+0x48>
 8005dde:	f104 0a19 	add.w	sl, r4, #25
 8005de2:	68e3      	ldr	r3, [r4, #12]
 8005de4:	6832      	ldr	r2, [r6, #0]
 8005de6:	1a9b      	subs	r3, r3, r2
 8005de8:	42ab      	cmp	r3, r5
 8005dea:	dc2b      	bgt.n	8005e44 <_printf_common+0xa0>
 8005dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005df0:	6822      	ldr	r2, [r4, #0]
 8005df2:	3b00      	subs	r3, #0
 8005df4:	bf18      	it	ne
 8005df6:	2301      	movne	r3, #1
 8005df8:	0692      	lsls	r2, r2, #26
 8005dfa:	d430      	bmi.n	8005e5e <_printf_common+0xba>
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	4638      	mov	r0, r7
 8005e00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e04:	47c8      	blx	r9
 8005e06:	3001      	adds	r0, #1
 8005e08:	d023      	beq.n	8005e52 <_printf_common+0xae>
 8005e0a:	6823      	ldr	r3, [r4, #0]
 8005e0c:	6922      	ldr	r2, [r4, #16]
 8005e0e:	f003 0306 	and.w	r3, r3, #6
 8005e12:	2b04      	cmp	r3, #4
 8005e14:	bf14      	ite	ne
 8005e16:	2500      	movne	r5, #0
 8005e18:	6833      	ldreq	r3, [r6, #0]
 8005e1a:	f04f 0600 	mov.w	r6, #0
 8005e1e:	bf08      	it	eq
 8005e20:	68e5      	ldreq	r5, [r4, #12]
 8005e22:	f104 041a 	add.w	r4, r4, #26
 8005e26:	bf08      	it	eq
 8005e28:	1aed      	subeq	r5, r5, r3
 8005e2a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005e2e:	bf08      	it	eq
 8005e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e34:	4293      	cmp	r3, r2
 8005e36:	bfc4      	itt	gt
 8005e38:	1a9b      	subgt	r3, r3, r2
 8005e3a:	18ed      	addgt	r5, r5, r3
 8005e3c:	42b5      	cmp	r5, r6
 8005e3e:	d11a      	bne.n	8005e76 <_printf_common+0xd2>
 8005e40:	2000      	movs	r0, #0
 8005e42:	e008      	b.n	8005e56 <_printf_common+0xb2>
 8005e44:	2301      	movs	r3, #1
 8005e46:	4652      	mov	r2, sl
 8005e48:	4641      	mov	r1, r8
 8005e4a:	4638      	mov	r0, r7
 8005e4c:	47c8      	blx	r9
 8005e4e:	3001      	adds	r0, #1
 8005e50:	d103      	bne.n	8005e5a <_printf_common+0xb6>
 8005e52:	f04f 30ff 	mov.w	r0, #4294967295
 8005e56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e5a:	3501      	adds	r5, #1
 8005e5c:	e7c1      	b.n	8005de2 <_printf_common+0x3e>
 8005e5e:	2030      	movs	r0, #48	@ 0x30
 8005e60:	18e1      	adds	r1, r4, r3
 8005e62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e66:	1c5a      	adds	r2, r3, #1
 8005e68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e6c:	4422      	add	r2, r4
 8005e6e:	3302      	adds	r3, #2
 8005e70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e74:	e7c2      	b.n	8005dfc <_printf_common+0x58>
 8005e76:	2301      	movs	r3, #1
 8005e78:	4622      	mov	r2, r4
 8005e7a:	4641      	mov	r1, r8
 8005e7c:	4638      	mov	r0, r7
 8005e7e:	47c8      	blx	r9
 8005e80:	3001      	adds	r0, #1
 8005e82:	d0e6      	beq.n	8005e52 <_printf_common+0xae>
 8005e84:	3601      	adds	r6, #1
 8005e86:	e7d9      	b.n	8005e3c <_printf_common+0x98>

08005e88 <_printf_i>:
 8005e88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e8c:	7e0f      	ldrb	r7, [r1, #24]
 8005e8e:	4691      	mov	r9, r2
 8005e90:	2f78      	cmp	r7, #120	@ 0x78
 8005e92:	4680      	mov	r8, r0
 8005e94:	460c      	mov	r4, r1
 8005e96:	469a      	mov	sl, r3
 8005e98:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e9e:	d807      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ea0:	2f62      	cmp	r7, #98	@ 0x62
 8005ea2:	d80a      	bhi.n	8005eba <_printf_i+0x32>
 8005ea4:	2f00      	cmp	r7, #0
 8005ea6:	f000 80d3 	beq.w	8006050 <_printf_i+0x1c8>
 8005eaa:	2f58      	cmp	r7, #88	@ 0x58
 8005eac:	f000 80ba 	beq.w	8006024 <_printf_i+0x19c>
 8005eb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005eb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005eb8:	e03a      	b.n	8005f30 <_printf_i+0xa8>
 8005eba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ebe:	2b15      	cmp	r3, #21
 8005ec0:	d8f6      	bhi.n	8005eb0 <_printf_i+0x28>
 8005ec2:	a101      	add	r1, pc, #4	@ (adr r1, 8005ec8 <_printf_i+0x40>)
 8005ec4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f35 	.word	0x08005f35
 8005ed0:	08005eb1 	.word	0x08005eb1
 8005ed4:	08005eb1 	.word	0x08005eb1
 8005ed8:	08005eb1 	.word	0x08005eb1
 8005edc:	08005eb1 	.word	0x08005eb1
 8005ee0:	08005f35 	.word	0x08005f35
 8005ee4:	08005eb1 	.word	0x08005eb1
 8005ee8:	08005eb1 	.word	0x08005eb1
 8005eec:	08005eb1 	.word	0x08005eb1
 8005ef0:	08005eb1 	.word	0x08005eb1
 8005ef4:	08006037 	.word	0x08006037
 8005ef8:	08005f5f 	.word	0x08005f5f
 8005efc:	08005ff1 	.word	0x08005ff1
 8005f00:	08005eb1 	.word	0x08005eb1
 8005f04:	08005eb1 	.word	0x08005eb1
 8005f08:	08006059 	.word	0x08006059
 8005f0c:	08005eb1 	.word	0x08005eb1
 8005f10:	08005f5f 	.word	0x08005f5f
 8005f14:	08005eb1 	.word	0x08005eb1
 8005f18:	08005eb1 	.word	0x08005eb1
 8005f1c:	08005ff9 	.word	0x08005ff9
 8005f20:	6833      	ldr	r3, [r6, #0]
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	6032      	str	r2, [r6, #0]
 8005f28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f30:	2301      	movs	r3, #1
 8005f32:	e09e      	b.n	8006072 <_printf_i+0x1ea>
 8005f34:	6833      	ldr	r3, [r6, #0]
 8005f36:	6820      	ldr	r0, [r4, #0]
 8005f38:	1d19      	adds	r1, r3, #4
 8005f3a:	6031      	str	r1, [r6, #0]
 8005f3c:	0606      	lsls	r6, r0, #24
 8005f3e:	d501      	bpl.n	8005f44 <_printf_i+0xbc>
 8005f40:	681d      	ldr	r5, [r3, #0]
 8005f42:	e003      	b.n	8005f4c <_printf_i+0xc4>
 8005f44:	0645      	lsls	r5, r0, #25
 8005f46:	d5fb      	bpl.n	8005f40 <_printf_i+0xb8>
 8005f48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f4c:	2d00      	cmp	r5, #0
 8005f4e:	da03      	bge.n	8005f58 <_printf_i+0xd0>
 8005f50:	232d      	movs	r3, #45	@ 0x2d
 8005f52:	426d      	negs	r5, r5
 8005f54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f58:	230a      	movs	r3, #10
 8005f5a:	4859      	ldr	r0, [pc, #356]	@ (80060c0 <_printf_i+0x238>)
 8005f5c:	e011      	b.n	8005f82 <_printf_i+0xfa>
 8005f5e:	6821      	ldr	r1, [r4, #0]
 8005f60:	6833      	ldr	r3, [r6, #0]
 8005f62:	0608      	lsls	r0, r1, #24
 8005f64:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f68:	d402      	bmi.n	8005f70 <_printf_i+0xe8>
 8005f6a:	0649      	lsls	r1, r1, #25
 8005f6c:	bf48      	it	mi
 8005f6e:	b2ad      	uxthmi	r5, r5
 8005f70:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f72:	6033      	str	r3, [r6, #0]
 8005f74:	bf14      	ite	ne
 8005f76:	230a      	movne	r3, #10
 8005f78:	2308      	moveq	r3, #8
 8005f7a:	4851      	ldr	r0, [pc, #324]	@ (80060c0 <_printf_i+0x238>)
 8005f7c:	2100      	movs	r1, #0
 8005f7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f82:	6866      	ldr	r6, [r4, #4]
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	bfa8      	it	ge
 8005f88:	6821      	ldrge	r1, [r4, #0]
 8005f8a:	60a6      	str	r6, [r4, #8]
 8005f8c:	bfa4      	itt	ge
 8005f8e:	f021 0104 	bicge.w	r1, r1, #4
 8005f92:	6021      	strge	r1, [r4, #0]
 8005f94:	b90d      	cbnz	r5, 8005f9a <_printf_i+0x112>
 8005f96:	2e00      	cmp	r6, #0
 8005f98:	d04b      	beq.n	8006032 <_printf_i+0x1aa>
 8005f9a:	4616      	mov	r6, r2
 8005f9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fa0:	fb03 5711 	mls	r7, r3, r1, r5
 8005fa4:	5dc7      	ldrb	r7, [r0, r7]
 8005fa6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005faa:	462f      	mov	r7, r5
 8005fac:	42bb      	cmp	r3, r7
 8005fae:	460d      	mov	r5, r1
 8005fb0:	d9f4      	bls.n	8005f9c <_printf_i+0x114>
 8005fb2:	2b08      	cmp	r3, #8
 8005fb4:	d10b      	bne.n	8005fce <_printf_i+0x146>
 8005fb6:	6823      	ldr	r3, [r4, #0]
 8005fb8:	07df      	lsls	r7, r3, #31
 8005fba:	d508      	bpl.n	8005fce <_printf_i+0x146>
 8005fbc:	6923      	ldr	r3, [r4, #16]
 8005fbe:	6861      	ldr	r1, [r4, #4]
 8005fc0:	4299      	cmp	r1, r3
 8005fc2:	bfde      	ittt	le
 8005fc4:	2330      	movle	r3, #48	@ 0x30
 8005fc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fce:	1b92      	subs	r2, r2, r6
 8005fd0:	6122      	str	r2, [r4, #16]
 8005fd2:	464b      	mov	r3, r9
 8005fd4:	4621      	mov	r1, r4
 8005fd6:	4640      	mov	r0, r8
 8005fd8:	f8cd a000 	str.w	sl, [sp]
 8005fdc:	aa03      	add	r2, sp, #12
 8005fde:	f7ff fee1 	bl	8005da4 <_printf_common>
 8005fe2:	3001      	adds	r0, #1
 8005fe4:	d14a      	bne.n	800607c <_printf_i+0x1f4>
 8005fe6:	f04f 30ff 	mov.w	r0, #4294967295
 8005fea:	b004      	add	sp, #16
 8005fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	f043 0320 	orr.w	r3, r3, #32
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	2778      	movs	r7, #120	@ 0x78
 8005ffa:	4832      	ldr	r0, [pc, #200]	@ (80060c4 <_printf_i+0x23c>)
 8005ffc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006000:	6823      	ldr	r3, [r4, #0]
 8006002:	6831      	ldr	r1, [r6, #0]
 8006004:	061f      	lsls	r7, r3, #24
 8006006:	f851 5b04 	ldr.w	r5, [r1], #4
 800600a:	d402      	bmi.n	8006012 <_printf_i+0x18a>
 800600c:	065f      	lsls	r7, r3, #25
 800600e:	bf48      	it	mi
 8006010:	b2ad      	uxthmi	r5, r5
 8006012:	6031      	str	r1, [r6, #0]
 8006014:	07d9      	lsls	r1, r3, #31
 8006016:	bf44      	itt	mi
 8006018:	f043 0320 	orrmi.w	r3, r3, #32
 800601c:	6023      	strmi	r3, [r4, #0]
 800601e:	b11d      	cbz	r5, 8006028 <_printf_i+0x1a0>
 8006020:	2310      	movs	r3, #16
 8006022:	e7ab      	b.n	8005f7c <_printf_i+0xf4>
 8006024:	4826      	ldr	r0, [pc, #152]	@ (80060c0 <_printf_i+0x238>)
 8006026:	e7e9      	b.n	8005ffc <_printf_i+0x174>
 8006028:	6823      	ldr	r3, [r4, #0]
 800602a:	f023 0320 	bic.w	r3, r3, #32
 800602e:	6023      	str	r3, [r4, #0]
 8006030:	e7f6      	b.n	8006020 <_printf_i+0x198>
 8006032:	4616      	mov	r6, r2
 8006034:	e7bd      	b.n	8005fb2 <_printf_i+0x12a>
 8006036:	6833      	ldr	r3, [r6, #0]
 8006038:	6825      	ldr	r5, [r4, #0]
 800603a:	1d18      	adds	r0, r3, #4
 800603c:	6961      	ldr	r1, [r4, #20]
 800603e:	6030      	str	r0, [r6, #0]
 8006040:	062e      	lsls	r6, r5, #24
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	d501      	bpl.n	800604a <_printf_i+0x1c2>
 8006046:	6019      	str	r1, [r3, #0]
 8006048:	e002      	b.n	8006050 <_printf_i+0x1c8>
 800604a:	0668      	lsls	r0, r5, #25
 800604c:	d5fb      	bpl.n	8006046 <_printf_i+0x1be>
 800604e:	8019      	strh	r1, [r3, #0]
 8006050:	2300      	movs	r3, #0
 8006052:	4616      	mov	r6, r2
 8006054:	6123      	str	r3, [r4, #16]
 8006056:	e7bc      	b.n	8005fd2 <_printf_i+0x14a>
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	2100      	movs	r1, #0
 800605c:	1d1a      	adds	r2, r3, #4
 800605e:	6032      	str	r2, [r6, #0]
 8006060:	681e      	ldr	r6, [r3, #0]
 8006062:	6862      	ldr	r2, [r4, #4]
 8006064:	4630      	mov	r0, r6
 8006066:	f000 fb80 	bl	800676a <memchr>
 800606a:	b108      	cbz	r0, 8006070 <_printf_i+0x1e8>
 800606c:	1b80      	subs	r0, r0, r6
 800606e:	6060      	str	r0, [r4, #4]
 8006070:	6863      	ldr	r3, [r4, #4]
 8006072:	6123      	str	r3, [r4, #16]
 8006074:	2300      	movs	r3, #0
 8006076:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800607a:	e7aa      	b.n	8005fd2 <_printf_i+0x14a>
 800607c:	4632      	mov	r2, r6
 800607e:	4649      	mov	r1, r9
 8006080:	4640      	mov	r0, r8
 8006082:	6923      	ldr	r3, [r4, #16]
 8006084:	47d0      	blx	sl
 8006086:	3001      	adds	r0, #1
 8006088:	d0ad      	beq.n	8005fe6 <_printf_i+0x15e>
 800608a:	6823      	ldr	r3, [r4, #0]
 800608c:	079b      	lsls	r3, r3, #30
 800608e:	d413      	bmi.n	80060b8 <_printf_i+0x230>
 8006090:	68e0      	ldr	r0, [r4, #12]
 8006092:	9b03      	ldr	r3, [sp, #12]
 8006094:	4298      	cmp	r0, r3
 8006096:	bfb8      	it	lt
 8006098:	4618      	movlt	r0, r3
 800609a:	e7a6      	b.n	8005fea <_printf_i+0x162>
 800609c:	2301      	movs	r3, #1
 800609e:	4632      	mov	r2, r6
 80060a0:	4649      	mov	r1, r9
 80060a2:	4640      	mov	r0, r8
 80060a4:	47d0      	blx	sl
 80060a6:	3001      	adds	r0, #1
 80060a8:	d09d      	beq.n	8005fe6 <_printf_i+0x15e>
 80060aa:	3501      	adds	r5, #1
 80060ac:	68e3      	ldr	r3, [r4, #12]
 80060ae:	9903      	ldr	r1, [sp, #12]
 80060b0:	1a5b      	subs	r3, r3, r1
 80060b2:	42ab      	cmp	r3, r5
 80060b4:	dcf2      	bgt.n	800609c <_printf_i+0x214>
 80060b6:	e7eb      	b.n	8006090 <_printf_i+0x208>
 80060b8:	2500      	movs	r5, #0
 80060ba:	f104 0619 	add.w	r6, r4, #25
 80060be:	e7f5      	b.n	80060ac <_printf_i+0x224>
 80060c0:	08008ddf 	.word	0x08008ddf
 80060c4:	08008df0 	.word	0x08008df0

080060c8 <__sflush_r>:
 80060c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060ce:	0716      	lsls	r6, r2, #28
 80060d0:	4605      	mov	r5, r0
 80060d2:	460c      	mov	r4, r1
 80060d4:	d454      	bmi.n	8006180 <__sflush_r+0xb8>
 80060d6:	684b      	ldr	r3, [r1, #4]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	dc02      	bgt.n	80060e2 <__sflush_r+0x1a>
 80060dc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80060de:	2b00      	cmp	r3, #0
 80060e0:	dd48      	ble.n	8006174 <__sflush_r+0xac>
 80060e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060e4:	2e00      	cmp	r6, #0
 80060e6:	d045      	beq.n	8006174 <__sflush_r+0xac>
 80060e8:	2300      	movs	r3, #0
 80060ea:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80060ee:	682f      	ldr	r7, [r5, #0]
 80060f0:	6a21      	ldr	r1, [r4, #32]
 80060f2:	602b      	str	r3, [r5, #0]
 80060f4:	d030      	beq.n	8006158 <__sflush_r+0x90>
 80060f6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060f8:	89a3      	ldrh	r3, [r4, #12]
 80060fa:	0759      	lsls	r1, r3, #29
 80060fc:	d505      	bpl.n	800610a <__sflush_r+0x42>
 80060fe:	6863      	ldr	r3, [r4, #4]
 8006100:	1ad2      	subs	r2, r2, r3
 8006102:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006104:	b10b      	cbz	r3, 800610a <__sflush_r+0x42>
 8006106:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006108:	1ad2      	subs	r2, r2, r3
 800610a:	2300      	movs	r3, #0
 800610c:	4628      	mov	r0, r5
 800610e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006110:	6a21      	ldr	r1, [r4, #32]
 8006112:	47b0      	blx	r6
 8006114:	1c43      	adds	r3, r0, #1
 8006116:	89a3      	ldrh	r3, [r4, #12]
 8006118:	d106      	bne.n	8006128 <__sflush_r+0x60>
 800611a:	6829      	ldr	r1, [r5, #0]
 800611c:	291d      	cmp	r1, #29
 800611e:	d82b      	bhi.n	8006178 <__sflush_r+0xb0>
 8006120:	4a28      	ldr	r2, [pc, #160]	@ (80061c4 <__sflush_r+0xfc>)
 8006122:	410a      	asrs	r2, r1
 8006124:	07d6      	lsls	r6, r2, #31
 8006126:	d427      	bmi.n	8006178 <__sflush_r+0xb0>
 8006128:	2200      	movs	r2, #0
 800612a:	6062      	str	r2, [r4, #4]
 800612c:	6922      	ldr	r2, [r4, #16]
 800612e:	04d9      	lsls	r1, r3, #19
 8006130:	6022      	str	r2, [r4, #0]
 8006132:	d504      	bpl.n	800613e <__sflush_r+0x76>
 8006134:	1c42      	adds	r2, r0, #1
 8006136:	d101      	bne.n	800613c <__sflush_r+0x74>
 8006138:	682b      	ldr	r3, [r5, #0]
 800613a:	b903      	cbnz	r3, 800613e <__sflush_r+0x76>
 800613c:	6560      	str	r0, [r4, #84]	@ 0x54
 800613e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006140:	602f      	str	r7, [r5, #0]
 8006142:	b1b9      	cbz	r1, 8006174 <__sflush_r+0xac>
 8006144:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006148:	4299      	cmp	r1, r3
 800614a:	d002      	beq.n	8006152 <__sflush_r+0x8a>
 800614c:	4628      	mov	r0, r5
 800614e:	f001 f97b 	bl	8007448 <_free_r>
 8006152:	2300      	movs	r3, #0
 8006154:	6363      	str	r3, [r4, #52]	@ 0x34
 8006156:	e00d      	b.n	8006174 <__sflush_r+0xac>
 8006158:	2301      	movs	r3, #1
 800615a:	4628      	mov	r0, r5
 800615c:	47b0      	blx	r6
 800615e:	4602      	mov	r2, r0
 8006160:	1c50      	adds	r0, r2, #1
 8006162:	d1c9      	bne.n	80060f8 <__sflush_r+0x30>
 8006164:	682b      	ldr	r3, [r5, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d0c6      	beq.n	80060f8 <__sflush_r+0x30>
 800616a:	2b1d      	cmp	r3, #29
 800616c:	d001      	beq.n	8006172 <__sflush_r+0xaa>
 800616e:	2b16      	cmp	r3, #22
 8006170:	d11d      	bne.n	80061ae <__sflush_r+0xe6>
 8006172:	602f      	str	r7, [r5, #0]
 8006174:	2000      	movs	r0, #0
 8006176:	e021      	b.n	80061bc <__sflush_r+0xf4>
 8006178:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800617c:	b21b      	sxth	r3, r3
 800617e:	e01a      	b.n	80061b6 <__sflush_r+0xee>
 8006180:	690f      	ldr	r7, [r1, #16]
 8006182:	2f00      	cmp	r7, #0
 8006184:	d0f6      	beq.n	8006174 <__sflush_r+0xac>
 8006186:	0793      	lsls	r3, r2, #30
 8006188:	bf18      	it	ne
 800618a:	2300      	movne	r3, #0
 800618c:	680e      	ldr	r6, [r1, #0]
 800618e:	bf08      	it	eq
 8006190:	694b      	ldreq	r3, [r1, #20]
 8006192:	1bf6      	subs	r6, r6, r7
 8006194:	600f      	str	r7, [r1, #0]
 8006196:	608b      	str	r3, [r1, #8]
 8006198:	2e00      	cmp	r6, #0
 800619a:	ddeb      	ble.n	8006174 <__sflush_r+0xac>
 800619c:	4633      	mov	r3, r6
 800619e:	463a      	mov	r2, r7
 80061a0:	4628      	mov	r0, r5
 80061a2:	6a21      	ldr	r1, [r4, #32]
 80061a4:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80061a8:	47e0      	blx	ip
 80061aa:	2800      	cmp	r0, #0
 80061ac:	dc07      	bgt.n	80061be <__sflush_r+0xf6>
 80061ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061b6:	f04f 30ff 	mov.w	r0, #4294967295
 80061ba:	81a3      	strh	r3, [r4, #12]
 80061bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061be:	4407      	add	r7, r0
 80061c0:	1a36      	subs	r6, r6, r0
 80061c2:	e7e9      	b.n	8006198 <__sflush_r+0xd0>
 80061c4:	dfbffffe 	.word	0xdfbffffe

080061c8 <_fflush_r>:
 80061c8:	b538      	push	{r3, r4, r5, lr}
 80061ca:	690b      	ldr	r3, [r1, #16]
 80061cc:	4605      	mov	r5, r0
 80061ce:	460c      	mov	r4, r1
 80061d0:	b913      	cbnz	r3, 80061d8 <_fflush_r+0x10>
 80061d2:	2500      	movs	r5, #0
 80061d4:	4628      	mov	r0, r5
 80061d6:	bd38      	pop	{r3, r4, r5, pc}
 80061d8:	b118      	cbz	r0, 80061e2 <_fflush_r+0x1a>
 80061da:	6a03      	ldr	r3, [r0, #32]
 80061dc:	b90b      	cbnz	r3, 80061e2 <_fflush_r+0x1a>
 80061de:	f000 f8a7 	bl	8006330 <__sinit>
 80061e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0f3      	beq.n	80061d2 <_fflush_r+0xa>
 80061ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061ec:	07d0      	lsls	r0, r2, #31
 80061ee:	d404      	bmi.n	80061fa <_fflush_r+0x32>
 80061f0:	0599      	lsls	r1, r3, #22
 80061f2:	d402      	bmi.n	80061fa <_fflush_r+0x32>
 80061f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061f6:	f000 fab6 	bl	8006766 <__retarget_lock_acquire_recursive>
 80061fa:	4628      	mov	r0, r5
 80061fc:	4621      	mov	r1, r4
 80061fe:	f7ff ff63 	bl	80060c8 <__sflush_r>
 8006202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006204:	4605      	mov	r5, r0
 8006206:	07da      	lsls	r2, r3, #31
 8006208:	d4e4      	bmi.n	80061d4 <_fflush_r+0xc>
 800620a:	89a3      	ldrh	r3, [r4, #12]
 800620c:	059b      	lsls	r3, r3, #22
 800620e:	d4e1      	bmi.n	80061d4 <_fflush_r+0xc>
 8006210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006212:	f000 faa9 	bl	8006768 <__retarget_lock_release_recursive>
 8006216:	e7dd      	b.n	80061d4 <_fflush_r+0xc>

08006218 <std>:
 8006218:	2300      	movs	r3, #0
 800621a:	b510      	push	{r4, lr}
 800621c:	4604      	mov	r4, r0
 800621e:	e9c0 3300 	strd	r3, r3, [r0]
 8006222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006226:	6083      	str	r3, [r0, #8]
 8006228:	8181      	strh	r1, [r0, #12]
 800622a:	6643      	str	r3, [r0, #100]	@ 0x64
 800622c:	81c2      	strh	r2, [r0, #14]
 800622e:	6183      	str	r3, [r0, #24]
 8006230:	4619      	mov	r1, r3
 8006232:	2208      	movs	r2, #8
 8006234:	305c      	adds	r0, #92	@ 0x5c
 8006236:	f000 f9c5 	bl	80065c4 <memset>
 800623a:	4b0d      	ldr	r3, [pc, #52]	@ (8006270 <std+0x58>)
 800623c:	6224      	str	r4, [r4, #32]
 800623e:	6263      	str	r3, [r4, #36]	@ 0x24
 8006240:	4b0c      	ldr	r3, [pc, #48]	@ (8006274 <std+0x5c>)
 8006242:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006244:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <std+0x60>)
 8006246:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006248:	4b0c      	ldr	r3, [pc, #48]	@ (800627c <std+0x64>)
 800624a:	6323      	str	r3, [r4, #48]	@ 0x30
 800624c:	4b0c      	ldr	r3, [pc, #48]	@ (8006280 <std+0x68>)
 800624e:	429c      	cmp	r4, r3
 8006250:	d006      	beq.n	8006260 <std+0x48>
 8006252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006256:	4294      	cmp	r4, r2
 8006258:	d002      	beq.n	8006260 <std+0x48>
 800625a:	33d0      	adds	r3, #208	@ 0xd0
 800625c:	429c      	cmp	r4, r3
 800625e:	d105      	bne.n	800626c <std+0x54>
 8006260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006268:	f000 ba7c 	b.w	8006764 <__retarget_lock_init_recursive>
 800626c:	bd10      	pop	{r4, pc}
 800626e:	bf00      	nop
 8006270:	080063c1 	.word	0x080063c1
 8006274:	080063e3 	.word	0x080063e3
 8006278:	0800641b 	.word	0x0800641b
 800627c:	0800643f 	.word	0x0800643f
 8006280:	20000374 	.word	0x20000374

08006284 <stdio_exit_handler>:
 8006284:	4a02      	ldr	r2, [pc, #8]	@ (8006290 <stdio_exit_handler+0xc>)
 8006286:	4903      	ldr	r1, [pc, #12]	@ (8006294 <stdio_exit_handler+0x10>)
 8006288:	4803      	ldr	r0, [pc, #12]	@ (8006298 <stdio_exit_handler+0x14>)
 800628a:	f000 b87b 	b.w	8006384 <_fwalk_sglue>
 800628e:	bf00      	nop
 8006290:	2000000c 	.word	0x2000000c
 8006294:	080061c9 	.word	0x080061c9
 8006298:	2000001c 	.word	0x2000001c

0800629c <cleanup_stdio>:
 800629c:	6841      	ldr	r1, [r0, #4]
 800629e:	4b0c      	ldr	r3, [pc, #48]	@ (80062d0 <cleanup_stdio+0x34>)
 80062a0:	b510      	push	{r4, lr}
 80062a2:	4299      	cmp	r1, r3
 80062a4:	4604      	mov	r4, r0
 80062a6:	d001      	beq.n	80062ac <cleanup_stdio+0x10>
 80062a8:	f7ff ff8e 	bl	80061c8 <_fflush_r>
 80062ac:	68a1      	ldr	r1, [r4, #8]
 80062ae:	4b09      	ldr	r3, [pc, #36]	@ (80062d4 <cleanup_stdio+0x38>)
 80062b0:	4299      	cmp	r1, r3
 80062b2:	d002      	beq.n	80062ba <cleanup_stdio+0x1e>
 80062b4:	4620      	mov	r0, r4
 80062b6:	f7ff ff87 	bl	80061c8 <_fflush_r>
 80062ba:	68e1      	ldr	r1, [r4, #12]
 80062bc:	4b06      	ldr	r3, [pc, #24]	@ (80062d8 <cleanup_stdio+0x3c>)
 80062be:	4299      	cmp	r1, r3
 80062c0:	d004      	beq.n	80062cc <cleanup_stdio+0x30>
 80062c2:	4620      	mov	r0, r4
 80062c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062c8:	f7ff bf7e 	b.w	80061c8 <_fflush_r>
 80062cc:	bd10      	pop	{r4, pc}
 80062ce:	bf00      	nop
 80062d0:	20000374 	.word	0x20000374
 80062d4:	200003dc 	.word	0x200003dc
 80062d8:	20000444 	.word	0x20000444

080062dc <global_stdio_init.part.0>:
 80062dc:	b510      	push	{r4, lr}
 80062de:	4b0b      	ldr	r3, [pc, #44]	@ (800630c <global_stdio_init.part.0+0x30>)
 80062e0:	4c0b      	ldr	r4, [pc, #44]	@ (8006310 <global_stdio_init.part.0+0x34>)
 80062e2:	4a0c      	ldr	r2, [pc, #48]	@ (8006314 <global_stdio_init.part.0+0x38>)
 80062e4:	4620      	mov	r0, r4
 80062e6:	601a      	str	r2, [r3, #0]
 80062e8:	2104      	movs	r1, #4
 80062ea:	2200      	movs	r2, #0
 80062ec:	f7ff ff94 	bl	8006218 <std>
 80062f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80062f4:	2201      	movs	r2, #1
 80062f6:	2109      	movs	r1, #9
 80062f8:	f7ff ff8e 	bl	8006218 <std>
 80062fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006300:	2202      	movs	r2, #2
 8006302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006306:	2112      	movs	r1, #18
 8006308:	f7ff bf86 	b.w	8006218 <std>
 800630c:	200004ac 	.word	0x200004ac
 8006310:	20000374 	.word	0x20000374
 8006314:	08006285 	.word	0x08006285

08006318 <__sfp_lock_acquire>:
 8006318:	4801      	ldr	r0, [pc, #4]	@ (8006320 <__sfp_lock_acquire+0x8>)
 800631a:	f000 ba24 	b.w	8006766 <__retarget_lock_acquire_recursive>
 800631e:	bf00      	nop
 8006320:	200004b5 	.word	0x200004b5

08006324 <__sfp_lock_release>:
 8006324:	4801      	ldr	r0, [pc, #4]	@ (800632c <__sfp_lock_release+0x8>)
 8006326:	f000 ba1f 	b.w	8006768 <__retarget_lock_release_recursive>
 800632a:	bf00      	nop
 800632c:	200004b5 	.word	0x200004b5

08006330 <__sinit>:
 8006330:	b510      	push	{r4, lr}
 8006332:	4604      	mov	r4, r0
 8006334:	f7ff fff0 	bl	8006318 <__sfp_lock_acquire>
 8006338:	6a23      	ldr	r3, [r4, #32]
 800633a:	b11b      	cbz	r3, 8006344 <__sinit+0x14>
 800633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006340:	f7ff bff0 	b.w	8006324 <__sfp_lock_release>
 8006344:	4b04      	ldr	r3, [pc, #16]	@ (8006358 <__sinit+0x28>)
 8006346:	6223      	str	r3, [r4, #32]
 8006348:	4b04      	ldr	r3, [pc, #16]	@ (800635c <__sinit+0x2c>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d1f5      	bne.n	800633c <__sinit+0xc>
 8006350:	f7ff ffc4 	bl	80062dc <global_stdio_init.part.0>
 8006354:	e7f2      	b.n	800633c <__sinit+0xc>
 8006356:	bf00      	nop
 8006358:	0800629d 	.word	0x0800629d
 800635c:	200004ac 	.word	0x200004ac

08006360 <fiprintf>:
 8006360:	b40e      	push	{r1, r2, r3}
 8006362:	b503      	push	{r0, r1, lr}
 8006364:	4601      	mov	r1, r0
 8006366:	ab03      	add	r3, sp, #12
 8006368:	4805      	ldr	r0, [pc, #20]	@ (8006380 <fiprintf+0x20>)
 800636a:	f853 2b04 	ldr.w	r2, [r3], #4
 800636e:	6800      	ldr	r0, [r0, #0]
 8006370:	9301      	str	r3, [sp, #4]
 8006372:	f7ff fbff 	bl	8005b74 <_vfiprintf_r>
 8006376:	b002      	add	sp, #8
 8006378:	f85d eb04 	ldr.w	lr, [sp], #4
 800637c:	b003      	add	sp, #12
 800637e:	4770      	bx	lr
 8006380:	20000018 	.word	0x20000018

08006384 <_fwalk_sglue>:
 8006384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006388:	4607      	mov	r7, r0
 800638a:	4688      	mov	r8, r1
 800638c:	4614      	mov	r4, r2
 800638e:	2600      	movs	r6, #0
 8006390:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006394:	f1b9 0901 	subs.w	r9, r9, #1
 8006398:	d505      	bpl.n	80063a6 <_fwalk_sglue+0x22>
 800639a:	6824      	ldr	r4, [r4, #0]
 800639c:	2c00      	cmp	r4, #0
 800639e:	d1f7      	bne.n	8006390 <_fwalk_sglue+0xc>
 80063a0:	4630      	mov	r0, r6
 80063a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063a6:	89ab      	ldrh	r3, [r5, #12]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d907      	bls.n	80063bc <_fwalk_sglue+0x38>
 80063ac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80063b0:	3301      	adds	r3, #1
 80063b2:	d003      	beq.n	80063bc <_fwalk_sglue+0x38>
 80063b4:	4629      	mov	r1, r5
 80063b6:	4638      	mov	r0, r7
 80063b8:	47c0      	blx	r8
 80063ba:	4306      	orrs	r6, r0
 80063bc:	3568      	adds	r5, #104	@ 0x68
 80063be:	e7e9      	b.n	8006394 <_fwalk_sglue+0x10>

080063c0 <__sread>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c8:	f000 f95a 	bl	8006680 <_read_r>
 80063cc:	2800      	cmp	r0, #0
 80063ce:	bfab      	itete	ge
 80063d0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063d2:	89a3      	ldrhlt	r3, [r4, #12]
 80063d4:	181b      	addge	r3, r3, r0
 80063d6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063da:	bfac      	ite	ge
 80063dc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063de:	81a3      	strhlt	r3, [r4, #12]
 80063e0:	bd10      	pop	{r4, pc}

080063e2 <__swrite>:
 80063e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063e6:	461f      	mov	r7, r3
 80063e8:	898b      	ldrh	r3, [r1, #12]
 80063ea:	4605      	mov	r5, r0
 80063ec:	05db      	lsls	r3, r3, #23
 80063ee:	460c      	mov	r4, r1
 80063f0:	4616      	mov	r6, r2
 80063f2:	d505      	bpl.n	8006400 <__swrite+0x1e>
 80063f4:	2302      	movs	r3, #2
 80063f6:	2200      	movs	r2, #0
 80063f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063fc:	f000 f92e 	bl	800665c <_lseek_r>
 8006400:	89a3      	ldrh	r3, [r4, #12]
 8006402:	4632      	mov	r2, r6
 8006404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006408:	81a3      	strh	r3, [r4, #12]
 800640a:	4628      	mov	r0, r5
 800640c:	463b      	mov	r3, r7
 800640e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006416:	f000 b969 	b.w	80066ec <_write_r>

0800641a <__sseek>:
 800641a:	b510      	push	{r4, lr}
 800641c:	460c      	mov	r4, r1
 800641e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006422:	f000 f91b 	bl	800665c <_lseek_r>
 8006426:	1c43      	adds	r3, r0, #1
 8006428:	89a3      	ldrh	r3, [r4, #12]
 800642a:	bf15      	itete	ne
 800642c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800642e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006432:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006436:	81a3      	strheq	r3, [r4, #12]
 8006438:	bf18      	it	ne
 800643a:	81a3      	strhne	r3, [r4, #12]
 800643c:	bd10      	pop	{r4, pc}

0800643e <__sclose>:
 800643e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006442:	f000 b8fb 	b.w	800663c <_close_r>

08006446 <__swbuf_r>:
 8006446:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006448:	460e      	mov	r6, r1
 800644a:	4614      	mov	r4, r2
 800644c:	4605      	mov	r5, r0
 800644e:	b118      	cbz	r0, 8006458 <__swbuf_r+0x12>
 8006450:	6a03      	ldr	r3, [r0, #32]
 8006452:	b90b      	cbnz	r3, 8006458 <__swbuf_r+0x12>
 8006454:	f7ff ff6c 	bl	8006330 <__sinit>
 8006458:	69a3      	ldr	r3, [r4, #24]
 800645a:	60a3      	str	r3, [r4, #8]
 800645c:	89a3      	ldrh	r3, [r4, #12]
 800645e:	071a      	lsls	r2, r3, #28
 8006460:	d501      	bpl.n	8006466 <__swbuf_r+0x20>
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	b943      	cbnz	r3, 8006478 <__swbuf_r+0x32>
 8006466:	4621      	mov	r1, r4
 8006468:	4628      	mov	r0, r5
 800646a:	f000 f82b 	bl	80064c4 <__swsetup_r>
 800646e:	b118      	cbz	r0, 8006478 <__swbuf_r+0x32>
 8006470:	f04f 37ff 	mov.w	r7, #4294967295
 8006474:	4638      	mov	r0, r7
 8006476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006478:	6823      	ldr	r3, [r4, #0]
 800647a:	6922      	ldr	r2, [r4, #16]
 800647c:	b2f6      	uxtb	r6, r6
 800647e:	1a98      	subs	r0, r3, r2
 8006480:	6963      	ldr	r3, [r4, #20]
 8006482:	4637      	mov	r7, r6
 8006484:	4283      	cmp	r3, r0
 8006486:	dc05      	bgt.n	8006494 <__swbuf_r+0x4e>
 8006488:	4621      	mov	r1, r4
 800648a:	4628      	mov	r0, r5
 800648c:	f7ff fe9c 	bl	80061c8 <_fflush_r>
 8006490:	2800      	cmp	r0, #0
 8006492:	d1ed      	bne.n	8006470 <__swbuf_r+0x2a>
 8006494:	68a3      	ldr	r3, [r4, #8]
 8006496:	3b01      	subs	r3, #1
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	6022      	str	r2, [r4, #0]
 80064a0:	701e      	strb	r6, [r3, #0]
 80064a2:	6962      	ldr	r2, [r4, #20]
 80064a4:	1c43      	adds	r3, r0, #1
 80064a6:	429a      	cmp	r2, r3
 80064a8:	d004      	beq.n	80064b4 <__swbuf_r+0x6e>
 80064aa:	89a3      	ldrh	r3, [r4, #12]
 80064ac:	07db      	lsls	r3, r3, #31
 80064ae:	d5e1      	bpl.n	8006474 <__swbuf_r+0x2e>
 80064b0:	2e0a      	cmp	r6, #10
 80064b2:	d1df      	bne.n	8006474 <__swbuf_r+0x2e>
 80064b4:	4621      	mov	r1, r4
 80064b6:	4628      	mov	r0, r5
 80064b8:	f7ff fe86 	bl	80061c8 <_fflush_r>
 80064bc:	2800      	cmp	r0, #0
 80064be:	d0d9      	beq.n	8006474 <__swbuf_r+0x2e>
 80064c0:	e7d6      	b.n	8006470 <__swbuf_r+0x2a>
	...

080064c4 <__swsetup_r>:
 80064c4:	b538      	push	{r3, r4, r5, lr}
 80064c6:	4b29      	ldr	r3, [pc, #164]	@ (800656c <__swsetup_r+0xa8>)
 80064c8:	4605      	mov	r5, r0
 80064ca:	6818      	ldr	r0, [r3, #0]
 80064cc:	460c      	mov	r4, r1
 80064ce:	b118      	cbz	r0, 80064d8 <__swsetup_r+0x14>
 80064d0:	6a03      	ldr	r3, [r0, #32]
 80064d2:	b90b      	cbnz	r3, 80064d8 <__swsetup_r+0x14>
 80064d4:	f7ff ff2c 	bl	8006330 <__sinit>
 80064d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80064dc:	0719      	lsls	r1, r3, #28
 80064de:	d422      	bmi.n	8006526 <__swsetup_r+0x62>
 80064e0:	06da      	lsls	r2, r3, #27
 80064e2:	d407      	bmi.n	80064f4 <__swsetup_r+0x30>
 80064e4:	2209      	movs	r2, #9
 80064e6:	602a      	str	r2, [r5, #0]
 80064e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80064ec:	f04f 30ff 	mov.w	r0, #4294967295
 80064f0:	81a3      	strh	r3, [r4, #12]
 80064f2:	e033      	b.n	800655c <__swsetup_r+0x98>
 80064f4:	0758      	lsls	r0, r3, #29
 80064f6:	d512      	bpl.n	800651e <__swsetup_r+0x5a>
 80064f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80064fa:	b141      	cbz	r1, 800650e <__swsetup_r+0x4a>
 80064fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006500:	4299      	cmp	r1, r3
 8006502:	d002      	beq.n	800650a <__swsetup_r+0x46>
 8006504:	4628      	mov	r0, r5
 8006506:	f000 ff9f 	bl	8007448 <_free_r>
 800650a:	2300      	movs	r3, #0
 800650c:	6363      	str	r3, [r4, #52]	@ 0x34
 800650e:	89a3      	ldrh	r3, [r4, #12]
 8006510:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006514:	81a3      	strh	r3, [r4, #12]
 8006516:	2300      	movs	r3, #0
 8006518:	6063      	str	r3, [r4, #4]
 800651a:	6923      	ldr	r3, [r4, #16]
 800651c:	6023      	str	r3, [r4, #0]
 800651e:	89a3      	ldrh	r3, [r4, #12]
 8006520:	f043 0308 	orr.w	r3, r3, #8
 8006524:	81a3      	strh	r3, [r4, #12]
 8006526:	6923      	ldr	r3, [r4, #16]
 8006528:	b94b      	cbnz	r3, 800653e <__swsetup_r+0x7a>
 800652a:	89a3      	ldrh	r3, [r4, #12]
 800652c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006530:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006534:	d003      	beq.n	800653e <__swsetup_r+0x7a>
 8006536:	4621      	mov	r1, r4
 8006538:	4628      	mov	r0, r5
 800653a:	f001 fb72 	bl	8007c22 <__smakebuf_r>
 800653e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006542:	f013 0201 	ands.w	r2, r3, #1
 8006546:	d00a      	beq.n	800655e <__swsetup_r+0x9a>
 8006548:	2200      	movs	r2, #0
 800654a:	60a2      	str	r2, [r4, #8]
 800654c:	6962      	ldr	r2, [r4, #20]
 800654e:	4252      	negs	r2, r2
 8006550:	61a2      	str	r2, [r4, #24]
 8006552:	6922      	ldr	r2, [r4, #16]
 8006554:	b942      	cbnz	r2, 8006568 <__swsetup_r+0xa4>
 8006556:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800655a:	d1c5      	bne.n	80064e8 <__swsetup_r+0x24>
 800655c:	bd38      	pop	{r3, r4, r5, pc}
 800655e:	0799      	lsls	r1, r3, #30
 8006560:	bf58      	it	pl
 8006562:	6962      	ldrpl	r2, [r4, #20]
 8006564:	60a2      	str	r2, [r4, #8]
 8006566:	e7f4      	b.n	8006552 <__swsetup_r+0x8e>
 8006568:	2000      	movs	r0, #0
 800656a:	e7f7      	b.n	800655c <__swsetup_r+0x98>
 800656c:	20000018 	.word	0x20000018

08006570 <memcmp>:
 8006570:	b510      	push	{r4, lr}
 8006572:	3901      	subs	r1, #1
 8006574:	4402      	add	r2, r0
 8006576:	4290      	cmp	r0, r2
 8006578:	d101      	bne.n	800657e <memcmp+0xe>
 800657a:	2000      	movs	r0, #0
 800657c:	e005      	b.n	800658a <memcmp+0x1a>
 800657e:	7803      	ldrb	r3, [r0, #0]
 8006580:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006584:	42a3      	cmp	r3, r4
 8006586:	d001      	beq.n	800658c <memcmp+0x1c>
 8006588:	1b18      	subs	r0, r3, r4
 800658a:	bd10      	pop	{r4, pc}
 800658c:	3001      	adds	r0, #1
 800658e:	e7f2      	b.n	8006576 <memcmp+0x6>

08006590 <memmove>:
 8006590:	4288      	cmp	r0, r1
 8006592:	b510      	push	{r4, lr}
 8006594:	eb01 0402 	add.w	r4, r1, r2
 8006598:	d902      	bls.n	80065a0 <memmove+0x10>
 800659a:	4284      	cmp	r4, r0
 800659c:	4623      	mov	r3, r4
 800659e:	d807      	bhi.n	80065b0 <memmove+0x20>
 80065a0:	1e43      	subs	r3, r0, #1
 80065a2:	42a1      	cmp	r1, r4
 80065a4:	d008      	beq.n	80065b8 <memmove+0x28>
 80065a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065ae:	e7f8      	b.n	80065a2 <memmove+0x12>
 80065b0:	4601      	mov	r1, r0
 80065b2:	4402      	add	r2, r0
 80065b4:	428a      	cmp	r2, r1
 80065b6:	d100      	bne.n	80065ba <memmove+0x2a>
 80065b8:	bd10      	pop	{r4, pc}
 80065ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065c2:	e7f7      	b.n	80065b4 <memmove+0x24>

080065c4 <memset>:
 80065c4:	4603      	mov	r3, r0
 80065c6:	4402      	add	r2, r0
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d100      	bne.n	80065ce <memset+0xa>
 80065cc:	4770      	bx	lr
 80065ce:	f803 1b01 	strb.w	r1, [r3], #1
 80065d2:	e7f9      	b.n	80065c8 <memset+0x4>

080065d4 <_raise_r>:
 80065d4:	291f      	cmp	r1, #31
 80065d6:	b538      	push	{r3, r4, r5, lr}
 80065d8:	4605      	mov	r5, r0
 80065da:	460c      	mov	r4, r1
 80065dc:	d904      	bls.n	80065e8 <_raise_r+0x14>
 80065de:	2316      	movs	r3, #22
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	f04f 30ff 	mov.w	r0, #4294967295
 80065e6:	bd38      	pop	{r3, r4, r5, pc}
 80065e8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80065ea:	b112      	cbz	r2, 80065f2 <_raise_r+0x1e>
 80065ec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80065f0:	b94b      	cbnz	r3, 8006606 <_raise_r+0x32>
 80065f2:	4628      	mov	r0, r5
 80065f4:	f000 f868 	bl	80066c8 <_getpid_r>
 80065f8:	4622      	mov	r2, r4
 80065fa:	4601      	mov	r1, r0
 80065fc:	4628      	mov	r0, r5
 80065fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006602:	f000 b84f 	b.w	80066a4 <_kill_r>
 8006606:	2b01      	cmp	r3, #1
 8006608:	d00a      	beq.n	8006620 <_raise_r+0x4c>
 800660a:	1c59      	adds	r1, r3, #1
 800660c:	d103      	bne.n	8006616 <_raise_r+0x42>
 800660e:	2316      	movs	r3, #22
 8006610:	6003      	str	r3, [r0, #0]
 8006612:	2001      	movs	r0, #1
 8006614:	e7e7      	b.n	80065e6 <_raise_r+0x12>
 8006616:	2100      	movs	r1, #0
 8006618:	4620      	mov	r0, r4
 800661a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800661e:	4798      	blx	r3
 8006620:	2000      	movs	r0, #0
 8006622:	e7e0      	b.n	80065e6 <_raise_r+0x12>

08006624 <raise>:
 8006624:	4b02      	ldr	r3, [pc, #8]	@ (8006630 <raise+0xc>)
 8006626:	4601      	mov	r1, r0
 8006628:	6818      	ldr	r0, [r3, #0]
 800662a:	f7ff bfd3 	b.w	80065d4 <_raise_r>
 800662e:	bf00      	nop
 8006630:	20000018 	.word	0x20000018

08006634 <_localeconv_r>:
 8006634:	4800      	ldr	r0, [pc, #0]	@ (8006638 <_localeconv_r+0x4>)
 8006636:	4770      	bx	lr
 8006638:	20000158 	.word	0x20000158

0800663c <_close_r>:
 800663c:	b538      	push	{r3, r4, r5, lr}
 800663e:	2300      	movs	r3, #0
 8006640:	4d05      	ldr	r5, [pc, #20]	@ (8006658 <_close_r+0x1c>)
 8006642:	4604      	mov	r4, r0
 8006644:	4608      	mov	r0, r1
 8006646:	602b      	str	r3, [r5, #0]
 8006648:	f7fa ffc9 	bl	80015de <_close>
 800664c:	1c43      	adds	r3, r0, #1
 800664e:	d102      	bne.n	8006656 <_close_r+0x1a>
 8006650:	682b      	ldr	r3, [r5, #0]
 8006652:	b103      	cbz	r3, 8006656 <_close_r+0x1a>
 8006654:	6023      	str	r3, [r4, #0]
 8006656:	bd38      	pop	{r3, r4, r5, pc}
 8006658:	200004b0 	.word	0x200004b0

0800665c <_lseek_r>:
 800665c:	b538      	push	{r3, r4, r5, lr}
 800665e:	4604      	mov	r4, r0
 8006660:	4608      	mov	r0, r1
 8006662:	4611      	mov	r1, r2
 8006664:	2200      	movs	r2, #0
 8006666:	4d05      	ldr	r5, [pc, #20]	@ (800667c <_lseek_r+0x20>)
 8006668:	602a      	str	r2, [r5, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	f7fa ffc1 	bl	80015f2 <_lseek>
 8006670:	1c43      	adds	r3, r0, #1
 8006672:	d102      	bne.n	800667a <_lseek_r+0x1e>
 8006674:	682b      	ldr	r3, [r5, #0]
 8006676:	b103      	cbz	r3, 800667a <_lseek_r+0x1e>
 8006678:	6023      	str	r3, [r4, #0]
 800667a:	bd38      	pop	{r3, r4, r5, pc}
 800667c:	200004b0 	.word	0x200004b0

08006680 <_read_r>:
 8006680:	b538      	push	{r3, r4, r5, lr}
 8006682:	4604      	mov	r4, r0
 8006684:	4608      	mov	r0, r1
 8006686:	4611      	mov	r1, r2
 8006688:	2200      	movs	r2, #0
 800668a:	4d05      	ldr	r5, [pc, #20]	@ (80066a0 <_read_r+0x20>)
 800668c:	602a      	str	r2, [r5, #0]
 800668e:	461a      	mov	r2, r3
 8006690:	f7fa ff98 	bl	80015c4 <_read>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	d102      	bne.n	800669e <_read_r+0x1e>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b103      	cbz	r3, 800669e <_read_r+0x1e>
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	200004b0 	.word	0x200004b0

080066a4 <_kill_r>:
 80066a4:	b538      	push	{r3, r4, r5, lr}
 80066a6:	2300      	movs	r3, #0
 80066a8:	4d06      	ldr	r5, [pc, #24]	@ (80066c4 <_kill_r+0x20>)
 80066aa:	4604      	mov	r4, r0
 80066ac:	4608      	mov	r0, r1
 80066ae:	4611      	mov	r1, r2
 80066b0:	602b      	str	r3, [r5, #0]
 80066b2:	f7fa ff79 	bl	80015a8 <_kill>
 80066b6:	1c43      	adds	r3, r0, #1
 80066b8:	d102      	bne.n	80066c0 <_kill_r+0x1c>
 80066ba:	682b      	ldr	r3, [r5, #0]
 80066bc:	b103      	cbz	r3, 80066c0 <_kill_r+0x1c>
 80066be:	6023      	str	r3, [r4, #0]
 80066c0:	bd38      	pop	{r3, r4, r5, pc}
 80066c2:	bf00      	nop
 80066c4:	200004b0 	.word	0x200004b0

080066c8 <_getpid_r>:
 80066c8:	f7fa bf6c 	b.w	80015a4 <_getpid>

080066cc <_sbrk_r>:
 80066cc:	b538      	push	{r3, r4, r5, lr}
 80066ce:	2300      	movs	r3, #0
 80066d0:	4d05      	ldr	r5, [pc, #20]	@ (80066e8 <_sbrk_r+0x1c>)
 80066d2:	4604      	mov	r4, r0
 80066d4:	4608      	mov	r0, r1
 80066d6:	602b      	str	r3, [r5, #0]
 80066d8:	f7fa ff8e 	bl	80015f8 <_sbrk>
 80066dc:	1c43      	adds	r3, r0, #1
 80066de:	d102      	bne.n	80066e6 <_sbrk_r+0x1a>
 80066e0:	682b      	ldr	r3, [r5, #0]
 80066e2:	b103      	cbz	r3, 80066e6 <_sbrk_r+0x1a>
 80066e4:	6023      	str	r3, [r4, #0]
 80066e6:	bd38      	pop	{r3, r4, r5, pc}
 80066e8:	200004b0 	.word	0x200004b0

080066ec <_write_r>:
 80066ec:	b538      	push	{r3, r4, r5, lr}
 80066ee:	4604      	mov	r4, r0
 80066f0:	4608      	mov	r0, r1
 80066f2:	4611      	mov	r1, r2
 80066f4:	2200      	movs	r2, #0
 80066f6:	4d05      	ldr	r5, [pc, #20]	@ (800670c <_write_r+0x20>)
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	461a      	mov	r2, r3
 80066fc:	f7fe f9ae 	bl	8004a5c <_write>
 8006700:	1c43      	adds	r3, r0, #1
 8006702:	d102      	bne.n	800670a <_write_r+0x1e>
 8006704:	682b      	ldr	r3, [r5, #0]
 8006706:	b103      	cbz	r3, 800670a <_write_r+0x1e>
 8006708:	6023      	str	r3, [r4, #0]
 800670a:	bd38      	pop	{r3, r4, r5, pc}
 800670c:	200004b0 	.word	0x200004b0

08006710 <__errno>:
 8006710:	4b01      	ldr	r3, [pc, #4]	@ (8006718 <__errno+0x8>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000018 	.word	0x20000018

0800671c <__libc_init_array>:
 800671c:	b570      	push	{r4, r5, r6, lr}
 800671e:	2600      	movs	r6, #0
 8006720:	4d0c      	ldr	r5, [pc, #48]	@ (8006754 <__libc_init_array+0x38>)
 8006722:	4c0d      	ldr	r4, [pc, #52]	@ (8006758 <__libc_init_array+0x3c>)
 8006724:	1b64      	subs	r4, r4, r5
 8006726:	10a4      	asrs	r4, r4, #2
 8006728:	42a6      	cmp	r6, r4
 800672a:	d109      	bne.n	8006740 <__libc_init_array+0x24>
 800672c:	f001 faf8 	bl	8007d20 <_init>
 8006730:	2600      	movs	r6, #0
 8006732:	4d0a      	ldr	r5, [pc, #40]	@ (800675c <__libc_init_array+0x40>)
 8006734:	4c0a      	ldr	r4, [pc, #40]	@ (8006760 <__libc_init_array+0x44>)
 8006736:	1b64      	subs	r4, r4, r5
 8006738:	10a4      	asrs	r4, r4, #2
 800673a:	42a6      	cmp	r6, r4
 800673c:	d105      	bne.n	800674a <__libc_init_array+0x2e>
 800673e:	bd70      	pop	{r4, r5, r6, pc}
 8006740:	f855 3b04 	ldr.w	r3, [r5], #4
 8006744:	4798      	blx	r3
 8006746:	3601      	adds	r6, #1
 8006748:	e7ee      	b.n	8006728 <__libc_init_array+0xc>
 800674a:	f855 3b04 	ldr.w	r3, [r5], #4
 800674e:	4798      	blx	r3
 8006750:	3601      	adds	r6, #1
 8006752:	e7f2      	b.n	800673a <__libc_init_array+0x1e>
 8006754:	080090fc 	.word	0x080090fc
 8006758:	080090fc 	.word	0x080090fc
 800675c:	080090fc 	.word	0x080090fc
 8006760:	08009104 	.word	0x08009104

08006764 <__retarget_lock_init_recursive>:
 8006764:	4770      	bx	lr

08006766 <__retarget_lock_acquire_recursive>:
 8006766:	4770      	bx	lr

08006768 <__retarget_lock_release_recursive>:
 8006768:	4770      	bx	lr

0800676a <memchr>:
 800676a:	4603      	mov	r3, r0
 800676c:	b510      	push	{r4, lr}
 800676e:	b2c9      	uxtb	r1, r1
 8006770:	4402      	add	r2, r0
 8006772:	4293      	cmp	r3, r2
 8006774:	4618      	mov	r0, r3
 8006776:	d101      	bne.n	800677c <memchr+0x12>
 8006778:	2000      	movs	r0, #0
 800677a:	e003      	b.n	8006784 <memchr+0x1a>
 800677c:	7804      	ldrb	r4, [r0, #0]
 800677e:	3301      	adds	r3, #1
 8006780:	428c      	cmp	r4, r1
 8006782:	d1f6      	bne.n	8006772 <memchr+0x8>
 8006784:	bd10      	pop	{r4, pc}

08006786 <memcpy>:
 8006786:	440a      	add	r2, r1
 8006788:	4291      	cmp	r1, r2
 800678a:	f100 33ff 	add.w	r3, r0, #4294967295
 800678e:	d100      	bne.n	8006792 <memcpy+0xc>
 8006790:	4770      	bx	lr
 8006792:	b510      	push	{r4, lr}
 8006794:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006798:	4291      	cmp	r1, r2
 800679a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800679e:	d1f9      	bne.n	8006794 <memcpy+0xe>
 80067a0:	bd10      	pop	{r4, pc}

080067a2 <quorem>:
 80067a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a6:	6903      	ldr	r3, [r0, #16]
 80067a8:	690c      	ldr	r4, [r1, #16]
 80067aa:	4607      	mov	r7, r0
 80067ac:	42a3      	cmp	r3, r4
 80067ae:	db7e      	blt.n	80068ae <quorem+0x10c>
 80067b0:	3c01      	subs	r4, #1
 80067b2:	00a3      	lsls	r3, r4, #2
 80067b4:	f100 0514 	add.w	r5, r0, #20
 80067b8:	f101 0814 	add.w	r8, r1, #20
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80067c2:	9301      	str	r3, [sp, #4]
 80067c4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80067c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80067cc:	3301      	adds	r3, #1
 80067ce:	429a      	cmp	r2, r3
 80067d0:	fbb2 f6f3 	udiv	r6, r2, r3
 80067d4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80067d8:	d32e      	bcc.n	8006838 <quorem+0x96>
 80067da:	f04f 0a00 	mov.w	sl, #0
 80067de:	46c4      	mov	ip, r8
 80067e0:	46ae      	mov	lr, r5
 80067e2:	46d3      	mov	fp, sl
 80067e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80067e8:	b298      	uxth	r0, r3
 80067ea:	fb06 a000 	mla	r0, r6, r0, sl
 80067ee:	0c1b      	lsrs	r3, r3, #16
 80067f0:	0c02      	lsrs	r2, r0, #16
 80067f2:	fb06 2303 	mla	r3, r6, r3, r2
 80067f6:	f8de 2000 	ldr.w	r2, [lr]
 80067fa:	b280      	uxth	r0, r0
 80067fc:	b292      	uxth	r2, r2
 80067fe:	1a12      	subs	r2, r2, r0
 8006800:	445a      	add	r2, fp
 8006802:	f8de 0000 	ldr.w	r0, [lr]
 8006806:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800680a:	b29b      	uxth	r3, r3
 800680c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006810:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006814:	b292      	uxth	r2, r2
 8006816:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800681a:	45e1      	cmp	r9, ip
 800681c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006820:	f84e 2b04 	str.w	r2, [lr], #4
 8006824:	d2de      	bcs.n	80067e4 <quorem+0x42>
 8006826:	9b00      	ldr	r3, [sp, #0]
 8006828:	58eb      	ldr	r3, [r5, r3]
 800682a:	b92b      	cbnz	r3, 8006838 <quorem+0x96>
 800682c:	9b01      	ldr	r3, [sp, #4]
 800682e:	3b04      	subs	r3, #4
 8006830:	429d      	cmp	r5, r3
 8006832:	461a      	mov	r2, r3
 8006834:	d32f      	bcc.n	8006896 <quorem+0xf4>
 8006836:	613c      	str	r4, [r7, #16]
 8006838:	4638      	mov	r0, r7
 800683a:	f001 f8c5 	bl	80079c8 <__mcmp>
 800683e:	2800      	cmp	r0, #0
 8006840:	db25      	blt.n	800688e <quorem+0xec>
 8006842:	4629      	mov	r1, r5
 8006844:	2000      	movs	r0, #0
 8006846:	f858 2b04 	ldr.w	r2, [r8], #4
 800684a:	f8d1 c000 	ldr.w	ip, [r1]
 800684e:	fa1f fe82 	uxth.w	lr, r2
 8006852:	fa1f f38c 	uxth.w	r3, ip
 8006856:	eba3 030e 	sub.w	r3, r3, lr
 800685a:	4403      	add	r3, r0
 800685c:	0c12      	lsrs	r2, r2, #16
 800685e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006862:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006866:	b29b      	uxth	r3, r3
 8006868:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800686c:	45c1      	cmp	r9, r8
 800686e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006872:	f841 3b04 	str.w	r3, [r1], #4
 8006876:	d2e6      	bcs.n	8006846 <quorem+0xa4>
 8006878:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800687c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006880:	b922      	cbnz	r2, 800688c <quorem+0xea>
 8006882:	3b04      	subs	r3, #4
 8006884:	429d      	cmp	r5, r3
 8006886:	461a      	mov	r2, r3
 8006888:	d30b      	bcc.n	80068a2 <quorem+0x100>
 800688a:	613c      	str	r4, [r7, #16]
 800688c:	3601      	adds	r6, #1
 800688e:	4630      	mov	r0, r6
 8006890:	b003      	add	sp, #12
 8006892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006896:	6812      	ldr	r2, [r2, #0]
 8006898:	3b04      	subs	r3, #4
 800689a:	2a00      	cmp	r2, #0
 800689c:	d1cb      	bne.n	8006836 <quorem+0x94>
 800689e:	3c01      	subs	r4, #1
 80068a0:	e7c6      	b.n	8006830 <quorem+0x8e>
 80068a2:	6812      	ldr	r2, [r2, #0]
 80068a4:	3b04      	subs	r3, #4
 80068a6:	2a00      	cmp	r2, #0
 80068a8:	d1ef      	bne.n	800688a <quorem+0xe8>
 80068aa:	3c01      	subs	r4, #1
 80068ac:	e7ea      	b.n	8006884 <quorem+0xe2>
 80068ae:	2000      	movs	r0, #0
 80068b0:	e7ee      	b.n	8006890 <quorem+0xee>
 80068b2:	0000      	movs	r0, r0
 80068b4:	0000      	movs	r0, r0
	...

080068b8 <_dtoa_r>:
 80068b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068bc:	4614      	mov	r4, r2
 80068be:	461d      	mov	r5, r3
 80068c0:	69c7      	ldr	r7, [r0, #28]
 80068c2:	b097      	sub	sp, #92	@ 0x5c
 80068c4:	4683      	mov	fp, r0
 80068c6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80068ca:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 80068cc:	b97f      	cbnz	r7, 80068ee <_dtoa_r+0x36>
 80068ce:	2010      	movs	r0, #16
 80068d0:	f7fe fda0 	bl	8005414 <malloc>
 80068d4:	4602      	mov	r2, r0
 80068d6:	f8cb 001c 	str.w	r0, [fp, #28]
 80068da:	b920      	cbnz	r0, 80068e6 <_dtoa_r+0x2e>
 80068dc:	21ef      	movs	r1, #239	@ 0xef
 80068de:	4ba8      	ldr	r3, [pc, #672]	@ (8006b80 <_dtoa_r+0x2c8>)
 80068e0:	48a8      	ldr	r0, [pc, #672]	@ (8006b84 <_dtoa_r+0x2cc>)
 80068e2:	f7fe fd5d 	bl	80053a0 <__assert_func>
 80068e6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80068ea:	6007      	str	r7, [r0, #0]
 80068ec:	60c7      	str	r7, [r0, #12]
 80068ee:	f8db 301c 	ldr.w	r3, [fp, #28]
 80068f2:	6819      	ldr	r1, [r3, #0]
 80068f4:	b159      	cbz	r1, 800690e <_dtoa_r+0x56>
 80068f6:	685a      	ldr	r2, [r3, #4]
 80068f8:	2301      	movs	r3, #1
 80068fa:	4093      	lsls	r3, r2
 80068fc:	604a      	str	r2, [r1, #4]
 80068fe:	608b      	str	r3, [r1, #8]
 8006900:	4658      	mov	r0, fp
 8006902:	f000 fe29 	bl	8007558 <_Bfree>
 8006906:	2200      	movs	r2, #0
 8006908:	f8db 301c 	ldr.w	r3, [fp, #28]
 800690c:	601a      	str	r2, [r3, #0]
 800690e:	1e2b      	subs	r3, r5, #0
 8006910:	bfaf      	iteee	ge
 8006912:	2300      	movge	r3, #0
 8006914:	2201      	movlt	r2, #1
 8006916:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800691a:	9303      	strlt	r3, [sp, #12]
 800691c:	bfa8      	it	ge
 800691e:	6033      	strge	r3, [r6, #0]
 8006920:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006924:	4b98      	ldr	r3, [pc, #608]	@ (8006b88 <_dtoa_r+0x2d0>)
 8006926:	bfb8      	it	lt
 8006928:	6032      	strlt	r2, [r6, #0]
 800692a:	ea33 0308 	bics.w	r3, r3, r8
 800692e:	d112      	bne.n	8006956 <_dtoa_r+0x9e>
 8006930:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006934:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800693c:	4323      	orrs	r3, r4
 800693e:	f000 8550 	beq.w	80073e2 <_dtoa_r+0xb2a>
 8006942:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006944:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8006b8c <_dtoa_r+0x2d4>
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 8552 	beq.w	80073f2 <_dtoa_r+0xb3a>
 800694e:	f10a 0303 	add.w	r3, sl, #3
 8006952:	f000 bd4c 	b.w	80073ee <_dtoa_r+0xb36>
 8006956:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800695a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800695e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006962:	2200      	movs	r2, #0
 8006964:	2300      	movs	r3, #0
 8006966:	f7fa f81f 	bl	80009a8 <__aeabi_dcmpeq>
 800696a:	4607      	mov	r7, r0
 800696c:	b158      	cbz	r0, 8006986 <_dtoa_r+0xce>
 800696e:	2301      	movs	r3, #1
 8006970:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8006972:	6013      	str	r3, [r2, #0]
 8006974:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006976:	b113      	cbz	r3, 800697e <_dtoa_r+0xc6>
 8006978:	4b85      	ldr	r3, [pc, #532]	@ (8006b90 <_dtoa_r+0x2d8>)
 800697a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800697c:	6013      	str	r3, [r2, #0]
 800697e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8006b94 <_dtoa_r+0x2dc>
 8006982:	f000 bd36 	b.w	80073f2 <_dtoa_r+0xb3a>
 8006986:	ab14      	add	r3, sp, #80	@ 0x50
 8006988:	9301      	str	r3, [sp, #4]
 800698a:	ab15      	add	r3, sp, #84	@ 0x54
 800698c:	9300      	str	r3, [sp, #0]
 800698e:	4658      	mov	r0, fp
 8006990:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006994:	f001 f8c8 	bl	8007b28 <__d2b>
 8006998:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800699c:	4681      	mov	r9, r0
 800699e:	2e00      	cmp	r6, #0
 80069a0:	d077      	beq.n	8006a92 <_dtoa_r+0x1da>
 80069a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80069a8:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80069ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069b0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80069b4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80069b8:	9712      	str	r7, [sp, #72]	@ 0x48
 80069ba:	4619      	mov	r1, r3
 80069bc:	2200      	movs	r2, #0
 80069be:	4b76      	ldr	r3, [pc, #472]	@ (8006b98 <_dtoa_r+0x2e0>)
 80069c0:	f7f9 fbd2 	bl	8000168 <__aeabi_dsub>
 80069c4:	a368      	add	r3, pc, #416	@ (adr r3, 8006b68 <_dtoa_r+0x2b0>)
 80069c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069ca:	f7f9 fd85 	bl	80004d8 <__aeabi_dmul>
 80069ce:	a368      	add	r3, pc, #416	@ (adr r3, 8006b70 <_dtoa_r+0x2b8>)
 80069d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069d4:	f7f9 fbca 	bl	800016c <__adddf3>
 80069d8:	4604      	mov	r4, r0
 80069da:	4630      	mov	r0, r6
 80069dc:	460d      	mov	r5, r1
 80069de:	f7f9 fd11 	bl	8000404 <__aeabi_i2d>
 80069e2:	a365      	add	r3, pc, #404	@ (adr r3, 8006b78 <_dtoa_r+0x2c0>)
 80069e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069e8:	f7f9 fd76 	bl	80004d8 <__aeabi_dmul>
 80069ec:	4602      	mov	r2, r0
 80069ee:	460b      	mov	r3, r1
 80069f0:	4620      	mov	r0, r4
 80069f2:	4629      	mov	r1, r5
 80069f4:	f7f9 fbba 	bl	800016c <__adddf3>
 80069f8:	4604      	mov	r4, r0
 80069fa:	460d      	mov	r5, r1
 80069fc:	f7fa f81c 	bl	8000a38 <__aeabi_d2iz>
 8006a00:	2200      	movs	r2, #0
 8006a02:	4607      	mov	r7, r0
 8006a04:	2300      	movs	r3, #0
 8006a06:	4620      	mov	r0, r4
 8006a08:	4629      	mov	r1, r5
 8006a0a:	f7f9 ffd7 	bl	80009bc <__aeabi_dcmplt>
 8006a0e:	b140      	cbz	r0, 8006a22 <_dtoa_r+0x16a>
 8006a10:	4638      	mov	r0, r7
 8006a12:	f7f9 fcf7 	bl	8000404 <__aeabi_i2d>
 8006a16:	4622      	mov	r2, r4
 8006a18:	462b      	mov	r3, r5
 8006a1a:	f7f9 ffc5 	bl	80009a8 <__aeabi_dcmpeq>
 8006a1e:	b900      	cbnz	r0, 8006a22 <_dtoa_r+0x16a>
 8006a20:	3f01      	subs	r7, #1
 8006a22:	2f16      	cmp	r7, #22
 8006a24:	d853      	bhi.n	8006ace <_dtoa_r+0x216>
 8006a26:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006a2a:	4b5c      	ldr	r3, [pc, #368]	@ (8006b9c <_dtoa_r+0x2e4>)
 8006a2c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006a34:	f7f9 ffc2 	bl	80009bc <__aeabi_dcmplt>
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	d04a      	beq.n	8006ad2 <_dtoa_r+0x21a>
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	3f01      	subs	r7, #1
 8006a40:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006a42:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006a44:	1b9b      	subs	r3, r3, r6
 8006a46:	1e5a      	subs	r2, r3, #1
 8006a48:	bf46      	itte	mi
 8006a4a:	f1c3 0801 	rsbmi	r8, r3, #1
 8006a4e:	2300      	movmi	r3, #0
 8006a50:	f04f 0800 	movpl.w	r8, #0
 8006a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a56:	bf48      	it	mi
 8006a58:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8006a5a:	2f00      	cmp	r7, #0
 8006a5c:	db3b      	blt.n	8006ad6 <_dtoa_r+0x21e>
 8006a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a60:	970e      	str	r7, [sp, #56]	@ 0x38
 8006a62:	443b      	add	r3, r7
 8006a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8006a66:	2300      	movs	r3, #0
 8006a68:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a6a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a6c:	2b09      	cmp	r3, #9
 8006a6e:	d866      	bhi.n	8006b3e <_dtoa_r+0x286>
 8006a70:	2b05      	cmp	r3, #5
 8006a72:	bfc4      	itt	gt
 8006a74:	3b04      	subgt	r3, #4
 8006a76:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8006a78:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a7a:	bfc8      	it	gt
 8006a7c:	2400      	movgt	r4, #0
 8006a7e:	f1a3 0302 	sub.w	r3, r3, #2
 8006a82:	bfd8      	it	le
 8006a84:	2401      	movle	r4, #1
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d864      	bhi.n	8006b54 <_dtoa_r+0x29c>
 8006a8a:	e8df f003 	tbb	[pc, r3]
 8006a8e:	382b      	.short	0x382b
 8006a90:	5636      	.short	0x5636
 8006a92:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8006a96:	441e      	add	r6, r3
 8006a98:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	bfc1      	itttt	gt
 8006aa0:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006aa4:	fa08 f803 	lslgt.w	r8, r8, r3
 8006aa8:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006aac:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006ab0:	bfd6      	itet	le
 8006ab2:	f1c3 0320 	rsble	r3, r3, #32
 8006ab6:	ea48 0003 	orrgt.w	r0, r8, r3
 8006aba:	fa04 f003 	lslle.w	r0, r4, r3
 8006abe:	f7f9 fc91 	bl	80003e4 <__aeabi_ui2d>
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006ac8:	3e01      	subs	r6, #1
 8006aca:	9212      	str	r2, [sp, #72]	@ 0x48
 8006acc:	e775      	b.n	80069ba <_dtoa_r+0x102>
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e7b6      	b.n	8006a40 <_dtoa_r+0x188>
 8006ad2:	900f      	str	r0, [sp, #60]	@ 0x3c
 8006ad4:	e7b5      	b.n	8006a42 <_dtoa_r+0x18a>
 8006ad6:	427b      	negs	r3, r7
 8006ad8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ada:	2300      	movs	r3, #0
 8006adc:	eba8 0807 	sub.w	r8, r8, r7
 8006ae0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ae2:	e7c2      	b.n	8006a6a <_dtoa_r+0x1b2>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ae8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	dc35      	bgt.n	8006b5a <_dtoa_r+0x2a2>
 8006aee:	2301      	movs	r3, #1
 8006af0:	461a      	mov	r2, r3
 8006af2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006af6:	9221      	str	r2, [sp, #132]	@ 0x84
 8006af8:	e00b      	b.n	8006b12 <_dtoa_r+0x25a>
 8006afa:	2301      	movs	r3, #1
 8006afc:	e7f3      	b.n	8006ae6 <_dtoa_r+0x22e>
 8006afe:	2300      	movs	r3, #0
 8006b00:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b02:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	9308      	str	r3, [sp, #32]
 8006b08:	3301      	adds	r3, #1
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	9307      	str	r3, [sp, #28]
 8006b0e:	bfb8      	it	lt
 8006b10:	2301      	movlt	r3, #1
 8006b12:	2100      	movs	r1, #0
 8006b14:	2204      	movs	r2, #4
 8006b16:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006b1a:	f102 0514 	add.w	r5, r2, #20
 8006b1e:	429d      	cmp	r5, r3
 8006b20:	d91f      	bls.n	8006b62 <_dtoa_r+0x2aa>
 8006b22:	6041      	str	r1, [r0, #4]
 8006b24:	4658      	mov	r0, fp
 8006b26:	f000 fcd7 	bl	80074d8 <_Balloc>
 8006b2a:	4682      	mov	sl, r0
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d139      	bne.n	8006ba4 <_dtoa_r+0x2ec>
 8006b30:	4602      	mov	r2, r0
 8006b32:	f240 11af 	movw	r1, #431	@ 0x1af
 8006b36:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba0 <_dtoa_r+0x2e8>)
 8006b38:	e6d2      	b.n	80068e0 <_dtoa_r+0x28>
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e7e0      	b.n	8006b00 <_dtoa_r+0x248>
 8006b3e:	2401      	movs	r4, #1
 8006b40:	2300      	movs	r3, #0
 8006b42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006b44:	9320      	str	r3, [sp, #128]	@ 0x80
 8006b46:	f04f 33ff 	mov.w	r3, #4294967295
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b50:	2312      	movs	r3, #18
 8006b52:	e7d0      	b.n	8006af6 <_dtoa_r+0x23e>
 8006b54:	2301      	movs	r3, #1
 8006b56:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b58:	e7f5      	b.n	8006b46 <_dtoa_r+0x28e>
 8006b5a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b5c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006b60:	e7d7      	b.n	8006b12 <_dtoa_r+0x25a>
 8006b62:	3101      	adds	r1, #1
 8006b64:	0052      	lsls	r2, r2, #1
 8006b66:	e7d8      	b.n	8006b1a <_dtoa_r+0x262>
 8006b68:	636f4361 	.word	0x636f4361
 8006b6c:	3fd287a7 	.word	0x3fd287a7
 8006b70:	8b60c8b3 	.word	0x8b60c8b3
 8006b74:	3fc68a28 	.word	0x3fc68a28
 8006b78:	509f79fb 	.word	0x509f79fb
 8006b7c:	3fd34413 	.word	0x3fd34413
 8006b80:	08008e0e 	.word	0x08008e0e
 8006b84:	08008e25 	.word	0x08008e25
 8006b88:	7ff00000 	.word	0x7ff00000
 8006b8c:	08008e0a 	.word	0x08008e0a
 8006b90:	08008dcd 	.word	0x08008dcd
 8006b94:	08008dcc 	.word	0x08008dcc
 8006b98:	3ff80000 	.word	0x3ff80000
 8006b9c:	08008f20 	.word	0x08008f20
 8006ba0:	08008e7d 	.word	0x08008e7d
 8006ba4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006ba8:	6018      	str	r0, [r3, #0]
 8006baa:	9b07      	ldr	r3, [sp, #28]
 8006bac:	2b0e      	cmp	r3, #14
 8006bae:	f200 80a4 	bhi.w	8006cfa <_dtoa_r+0x442>
 8006bb2:	2c00      	cmp	r4, #0
 8006bb4:	f000 80a1 	beq.w	8006cfa <_dtoa_r+0x442>
 8006bb8:	2f00      	cmp	r7, #0
 8006bba:	dd33      	ble.n	8006c24 <_dtoa_r+0x36c>
 8006bbc:	4b86      	ldr	r3, [pc, #536]	@ (8006dd8 <_dtoa_r+0x520>)
 8006bbe:	f007 020f 	and.w	r2, r7, #15
 8006bc2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006bc6:	05f8      	lsls	r0, r7, #23
 8006bc8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006bcc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006bd0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006bd4:	d516      	bpl.n	8006c04 <_dtoa_r+0x34c>
 8006bd6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006bda:	4b80      	ldr	r3, [pc, #512]	@ (8006ddc <_dtoa_r+0x524>)
 8006bdc:	2603      	movs	r6, #3
 8006bde:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006be2:	f7f9 fda3 	bl	800072c <__aeabi_ddiv>
 8006be6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bea:	f004 040f 	and.w	r4, r4, #15
 8006bee:	4d7b      	ldr	r5, [pc, #492]	@ (8006ddc <_dtoa_r+0x524>)
 8006bf0:	b954      	cbnz	r4, 8006c08 <_dtoa_r+0x350>
 8006bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bfa:	f7f9 fd97 	bl	800072c <__aeabi_ddiv>
 8006bfe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c02:	e028      	b.n	8006c56 <_dtoa_r+0x39e>
 8006c04:	2602      	movs	r6, #2
 8006c06:	e7f2      	b.n	8006bee <_dtoa_r+0x336>
 8006c08:	07e1      	lsls	r1, r4, #31
 8006c0a:	d508      	bpl.n	8006c1e <_dtoa_r+0x366>
 8006c0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006c10:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006c14:	f7f9 fc60 	bl	80004d8 <__aeabi_dmul>
 8006c18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006c1c:	3601      	adds	r6, #1
 8006c1e:	1064      	asrs	r4, r4, #1
 8006c20:	3508      	adds	r5, #8
 8006c22:	e7e5      	b.n	8006bf0 <_dtoa_r+0x338>
 8006c24:	f000 80d2 	beq.w	8006dcc <_dtoa_r+0x514>
 8006c28:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006c2c:	427c      	negs	r4, r7
 8006c2e:	4b6a      	ldr	r3, [pc, #424]	@ (8006dd8 <_dtoa_r+0x520>)
 8006c30:	f004 020f 	and.w	r2, r4, #15
 8006c34:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c3c:	f7f9 fc4c 	bl	80004d8 <__aeabi_dmul>
 8006c40:	2602      	movs	r6, #2
 8006c42:	2300      	movs	r3, #0
 8006c44:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c48:	4d64      	ldr	r5, [pc, #400]	@ (8006ddc <_dtoa_r+0x524>)
 8006c4a:	1124      	asrs	r4, r4, #4
 8006c4c:	2c00      	cmp	r4, #0
 8006c4e:	f040 80b2 	bne.w	8006db6 <_dtoa_r+0x4fe>
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d1d3      	bne.n	8006bfe <_dtoa_r+0x346>
 8006c56:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006c5a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 80b7 	beq.w	8006dd0 <_dtoa_r+0x518>
 8006c62:	2200      	movs	r2, #0
 8006c64:	4620      	mov	r0, r4
 8006c66:	4629      	mov	r1, r5
 8006c68:	4b5d      	ldr	r3, [pc, #372]	@ (8006de0 <_dtoa_r+0x528>)
 8006c6a:	f7f9 fea7 	bl	80009bc <__aeabi_dcmplt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	f000 80ae 	beq.w	8006dd0 <_dtoa_r+0x518>
 8006c74:	9b07      	ldr	r3, [sp, #28]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	f000 80aa 	beq.w	8006dd0 <_dtoa_r+0x518>
 8006c7c:	9b08      	ldr	r3, [sp, #32]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	dd37      	ble.n	8006cf2 <_dtoa_r+0x43a>
 8006c82:	1e7b      	subs	r3, r7, #1
 8006c84:	4620      	mov	r0, r4
 8006c86:	9304      	str	r3, [sp, #16]
 8006c88:	2200      	movs	r2, #0
 8006c8a:	4629      	mov	r1, r5
 8006c8c:	4b55      	ldr	r3, [pc, #340]	@ (8006de4 <_dtoa_r+0x52c>)
 8006c8e:	f7f9 fc23 	bl	80004d8 <__aeabi_dmul>
 8006c92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006c96:	9c08      	ldr	r4, [sp, #32]
 8006c98:	3601      	adds	r6, #1
 8006c9a:	4630      	mov	r0, r6
 8006c9c:	f7f9 fbb2 	bl	8000404 <__aeabi_i2d>
 8006ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006ca4:	f7f9 fc18 	bl	80004d8 <__aeabi_dmul>
 8006ca8:	2200      	movs	r2, #0
 8006caa:	4b4f      	ldr	r3, [pc, #316]	@ (8006de8 <_dtoa_r+0x530>)
 8006cac:	f7f9 fa5e 	bl	800016c <__adddf3>
 8006cb0:	4605      	mov	r5, r0
 8006cb2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006cb6:	2c00      	cmp	r4, #0
 8006cb8:	f040 809a 	bne.w	8006df0 <_dtoa_r+0x538>
 8006cbc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8006dec <_dtoa_r+0x534>)
 8006cc4:	f7f9 fa50 	bl	8000168 <__aeabi_dsub>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	460b      	mov	r3, r1
 8006ccc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006cd0:	462a      	mov	r2, r5
 8006cd2:	4633      	mov	r3, r6
 8006cd4:	f7f9 fe90 	bl	80009f8 <__aeabi_dcmpgt>
 8006cd8:	2800      	cmp	r0, #0
 8006cda:	f040 828e 	bne.w	80071fa <_dtoa_r+0x942>
 8006cde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ce2:	462a      	mov	r2, r5
 8006ce4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006ce8:	f7f9 fe68 	bl	80009bc <__aeabi_dcmplt>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	f040 8127 	bne.w	8006f40 <_dtoa_r+0x688>
 8006cf2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006cf6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006cfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	f2c0 8163 	blt.w	8006fc8 <_dtoa_r+0x710>
 8006d02:	2f0e      	cmp	r7, #14
 8006d04:	f300 8160 	bgt.w	8006fc8 <_dtoa_r+0x710>
 8006d08:	4b33      	ldr	r3, [pc, #204]	@ (8006dd8 <_dtoa_r+0x520>)
 8006d0a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006d0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006d12:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006d16:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	da03      	bge.n	8006d24 <_dtoa_r+0x46c>
 8006d1c:	9b07      	ldr	r3, [sp, #28]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f340 8100 	ble.w	8006f24 <_dtoa_r+0x66c>
 8006d24:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006d28:	4656      	mov	r6, sl
 8006d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d2e:	4620      	mov	r0, r4
 8006d30:	4629      	mov	r1, r5
 8006d32:	f7f9 fcfb 	bl	800072c <__aeabi_ddiv>
 8006d36:	f7f9 fe7f 	bl	8000a38 <__aeabi_d2iz>
 8006d3a:	4680      	mov	r8, r0
 8006d3c:	f7f9 fb62 	bl	8000404 <__aeabi_i2d>
 8006d40:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d44:	f7f9 fbc8 	bl	80004d8 <__aeabi_dmul>
 8006d48:	4602      	mov	r2, r0
 8006d4a:	460b      	mov	r3, r1
 8006d4c:	4620      	mov	r0, r4
 8006d4e:	4629      	mov	r1, r5
 8006d50:	f7f9 fa0a 	bl	8000168 <__aeabi_dsub>
 8006d54:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006d58:	9d07      	ldr	r5, [sp, #28]
 8006d5a:	f806 4b01 	strb.w	r4, [r6], #1
 8006d5e:	eba6 040a 	sub.w	r4, r6, sl
 8006d62:	42a5      	cmp	r5, r4
 8006d64:	4602      	mov	r2, r0
 8006d66:	460b      	mov	r3, r1
 8006d68:	f040 8116 	bne.w	8006f98 <_dtoa_r+0x6e0>
 8006d6c:	f7f9 f9fe 	bl	800016c <__adddf3>
 8006d70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d74:	4604      	mov	r4, r0
 8006d76:	460d      	mov	r5, r1
 8006d78:	f7f9 fe3e 	bl	80009f8 <__aeabi_dcmpgt>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f040 80f8 	bne.w	8006f72 <_dtoa_r+0x6ba>
 8006d82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006d86:	4620      	mov	r0, r4
 8006d88:	4629      	mov	r1, r5
 8006d8a:	f7f9 fe0d 	bl	80009a8 <__aeabi_dcmpeq>
 8006d8e:	b118      	cbz	r0, 8006d98 <_dtoa_r+0x4e0>
 8006d90:	f018 0f01 	tst.w	r8, #1
 8006d94:	f040 80ed 	bne.w	8006f72 <_dtoa_r+0x6ba>
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4658      	mov	r0, fp
 8006d9c:	f000 fbdc 	bl	8007558 <_Bfree>
 8006da0:	2300      	movs	r3, #0
 8006da2:	7033      	strb	r3, [r6, #0]
 8006da4:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006da6:	3701      	adds	r7, #1
 8006da8:	601f      	str	r7, [r3, #0]
 8006daa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	f000 8320 	beq.w	80073f2 <_dtoa_r+0xb3a>
 8006db2:	601e      	str	r6, [r3, #0]
 8006db4:	e31d      	b.n	80073f2 <_dtoa_r+0xb3a>
 8006db6:	07e2      	lsls	r2, r4, #31
 8006db8:	d505      	bpl.n	8006dc6 <_dtoa_r+0x50e>
 8006dba:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006dbe:	f7f9 fb8b 	bl	80004d8 <__aeabi_dmul>
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	3601      	adds	r6, #1
 8006dc6:	1064      	asrs	r4, r4, #1
 8006dc8:	3508      	adds	r5, #8
 8006dca:	e73f      	b.n	8006c4c <_dtoa_r+0x394>
 8006dcc:	2602      	movs	r6, #2
 8006dce:	e742      	b.n	8006c56 <_dtoa_r+0x39e>
 8006dd0:	9c07      	ldr	r4, [sp, #28]
 8006dd2:	9704      	str	r7, [sp, #16]
 8006dd4:	e761      	b.n	8006c9a <_dtoa_r+0x3e2>
 8006dd6:	bf00      	nop
 8006dd8:	08008f20 	.word	0x08008f20
 8006ddc:	08008ef8 	.word	0x08008ef8
 8006de0:	3ff00000 	.word	0x3ff00000
 8006de4:	40240000 	.word	0x40240000
 8006de8:	401c0000 	.word	0x401c0000
 8006dec:	40140000 	.word	0x40140000
 8006df0:	4b70      	ldr	r3, [pc, #448]	@ (8006fb4 <_dtoa_r+0x6fc>)
 8006df2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006df4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006df8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006dfc:	4454      	add	r4, sl
 8006dfe:	2900      	cmp	r1, #0
 8006e00:	d045      	beq.n	8006e8e <_dtoa_r+0x5d6>
 8006e02:	2000      	movs	r0, #0
 8006e04:	496c      	ldr	r1, [pc, #432]	@ (8006fb8 <_dtoa_r+0x700>)
 8006e06:	f7f9 fc91 	bl	800072c <__aeabi_ddiv>
 8006e0a:	4633      	mov	r3, r6
 8006e0c:	462a      	mov	r2, r5
 8006e0e:	f7f9 f9ab 	bl	8000168 <__aeabi_dsub>
 8006e12:	4656      	mov	r6, sl
 8006e14:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e1c:	f7f9 fe0c 	bl	8000a38 <__aeabi_d2iz>
 8006e20:	4605      	mov	r5, r0
 8006e22:	f7f9 faef 	bl	8000404 <__aeabi_i2d>
 8006e26:	4602      	mov	r2, r0
 8006e28:	460b      	mov	r3, r1
 8006e2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e2e:	f7f9 f99b 	bl	8000168 <__aeabi_dsub>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	3530      	adds	r5, #48	@ 0x30
 8006e38:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006e3c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e40:	f806 5b01 	strb.w	r5, [r6], #1
 8006e44:	f7f9 fdba 	bl	80009bc <__aeabi_dcmplt>
 8006e48:	2800      	cmp	r0, #0
 8006e4a:	d163      	bne.n	8006f14 <_dtoa_r+0x65c>
 8006e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006e50:	2000      	movs	r0, #0
 8006e52:	495a      	ldr	r1, [pc, #360]	@ (8006fbc <_dtoa_r+0x704>)
 8006e54:	f7f9 f988 	bl	8000168 <__aeabi_dsub>
 8006e58:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006e5c:	f7f9 fdae 	bl	80009bc <__aeabi_dcmplt>
 8006e60:	2800      	cmp	r0, #0
 8006e62:	f040 8087 	bne.w	8006f74 <_dtoa_r+0x6bc>
 8006e66:	42a6      	cmp	r6, r4
 8006e68:	f43f af43 	beq.w	8006cf2 <_dtoa_r+0x43a>
 8006e6c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006e70:	2200      	movs	r2, #0
 8006e72:	4b53      	ldr	r3, [pc, #332]	@ (8006fc0 <_dtoa_r+0x708>)
 8006e74:	f7f9 fb30 	bl	80004d8 <__aeabi_dmul>
 8006e78:	2200      	movs	r2, #0
 8006e7a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e82:	4b4f      	ldr	r3, [pc, #316]	@ (8006fc0 <_dtoa_r+0x708>)
 8006e84:	f7f9 fb28 	bl	80004d8 <__aeabi_dmul>
 8006e88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e8c:	e7c4      	b.n	8006e18 <_dtoa_r+0x560>
 8006e8e:	4631      	mov	r1, r6
 8006e90:	4628      	mov	r0, r5
 8006e92:	f7f9 fb21 	bl	80004d8 <__aeabi_dmul>
 8006e96:	4656      	mov	r6, sl
 8006e98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006e9c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006e9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ea2:	f7f9 fdc9 	bl	8000a38 <__aeabi_d2iz>
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	f7f9 faac 	bl	8000404 <__aeabi_i2d>
 8006eac:	4602      	mov	r2, r0
 8006eae:	460b      	mov	r3, r1
 8006eb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006eb4:	f7f9 f958 	bl	8000168 <__aeabi_dsub>
 8006eb8:	4602      	mov	r2, r0
 8006eba:	460b      	mov	r3, r1
 8006ebc:	3530      	adds	r5, #48	@ 0x30
 8006ebe:	f806 5b01 	strb.w	r5, [r6], #1
 8006ec2:	42a6      	cmp	r6, r4
 8006ec4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006ec8:	f04f 0200 	mov.w	r2, #0
 8006ecc:	d124      	bne.n	8006f18 <_dtoa_r+0x660>
 8006ece:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ed2:	4b39      	ldr	r3, [pc, #228]	@ (8006fb8 <_dtoa_r+0x700>)
 8006ed4:	f7f9 f94a 	bl	800016c <__adddf3>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	460b      	mov	r3, r1
 8006edc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ee0:	f7f9 fd8a 	bl	80009f8 <__aeabi_dcmpgt>
 8006ee4:	2800      	cmp	r0, #0
 8006ee6:	d145      	bne.n	8006f74 <_dtoa_r+0x6bc>
 8006ee8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006eec:	2000      	movs	r0, #0
 8006eee:	4932      	ldr	r1, [pc, #200]	@ (8006fb8 <_dtoa_r+0x700>)
 8006ef0:	f7f9 f93a 	bl	8000168 <__aeabi_dsub>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	460b      	mov	r3, r1
 8006ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006efc:	f7f9 fd5e 	bl	80009bc <__aeabi_dcmplt>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	f43f aef6 	beq.w	8006cf2 <_dtoa_r+0x43a>
 8006f06:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006f08:	1e73      	subs	r3, r6, #1
 8006f0a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006f0c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006f10:	2b30      	cmp	r3, #48	@ 0x30
 8006f12:	d0f8      	beq.n	8006f06 <_dtoa_r+0x64e>
 8006f14:	9f04      	ldr	r7, [sp, #16]
 8006f16:	e73f      	b.n	8006d98 <_dtoa_r+0x4e0>
 8006f18:	4b29      	ldr	r3, [pc, #164]	@ (8006fc0 <_dtoa_r+0x708>)
 8006f1a:	f7f9 fadd 	bl	80004d8 <__aeabi_dmul>
 8006f1e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006f22:	e7bc      	b.n	8006e9e <_dtoa_r+0x5e6>
 8006f24:	d10c      	bne.n	8006f40 <_dtoa_r+0x688>
 8006f26:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	4b25      	ldr	r3, [pc, #148]	@ (8006fc4 <_dtoa_r+0x70c>)
 8006f2e:	f7f9 fad3 	bl	80004d8 <__aeabi_dmul>
 8006f32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006f36:	f7f9 fd55 	bl	80009e4 <__aeabi_dcmpge>
 8006f3a:	2800      	cmp	r0, #0
 8006f3c:	f000 815b 	beq.w	80071f6 <_dtoa_r+0x93e>
 8006f40:	2400      	movs	r4, #0
 8006f42:	4625      	mov	r5, r4
 8006f44:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006f46:	4656      	mov	r6, sl
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	9304      	str	r3, [sp, #16]
 8006f4c:	2700      	movs	r7, #0
 8006f4e:	4621      	mov	r1, r4
 8006f50:	4658      	mov	r0, fp
 8006f52:	f000 fb01 	bl	8007558 <_Bfree>
 8006f56:	2d00      	cmp	r5, #0
 8006f58:	d0dc      	beq.n	8006f14 <_dtoa_r+0x65c>
 8006f5a:	b12f      	cbz	r7, 8006f68 <_dtoa_r+0x6b0>
 8006f5c:	42af      	cmp	r7, r5
 8006f5e:	d003      	beq.n	8006f68 <_dtoa_r+0x6b0>
 8006f60:	4639      	mov	r1, r7
 8006f62:	4658      	mov	r0, fp
 8006f64:	f000 faf8 	bl	8007558 <_Bfree>
 8006f68:	4629      	mov	r1, r5
 8006f6a:	4658      	mov	r0, fp
 8006f6c:	f000 faf4 	bl	8007558 <_Bfree>
 8006f70:	e7d0      	b.n	8006f14 <_dtoa_r+0x65c>
 8006f72:	9704      	str	r7, [sp, #16]
 8006f74:	4633      	mov	r3, r6
 8006f76:	461e      	mov	r6, r3
 8006f78:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006f7c:	2a39      	cmp	r2, #57	@ 0x39
 8006f7e:	d107      	bne.n	8006f90 <_dtoa_r+0x6d8>
 8006f80:	459a      	cmp	sl, r3
 8006f82:	d1f8      	bne.n	8006f76 <_dtoa_r+0x6be>
 8006f84:	9a04      	ldr	r2, [sp, #16]
 8006f86:	3201      	adds	r2, #1
 8006f88:	9204      	str	r2, [sp, #16]
 8006f8a:	2230      	movs	r2, #48	@ 0x30
 8006f8c:	f88a 2000 	strb.w	r2, [sl]
 8006f90:	781a      	ldrb	r2, [r3, #0]
 8006f92:	3201      	adds	r2, #1
 8006f94:	701a      	strb	r2, [r3, #0]
 8006f96:	e7bd      	b.n	8006f14 <_dtoa_r+0x65c>
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b09      	ldr	r3, [pc, #36]	@ (8006fc0 <_dtoa_r+0x708>)
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	4604      	mov	r4, r0
 8006fa6:	460d      	mov	r5, r1
 8006fa8:	f7f9 fcfe 	bl	80009a8 <__aeabi_dcmpeq>
 8006fac:	2800      	cmp	r0, #0
 8006fae:	f43f aebc 	beq.w	8006d2a <_dtoa_r+0x472>
 8006fb2:	e6f1      	b.n	8006d98 <_dtoa_r+0x4e0>
 8006fb4:	08008f20 	.word	0x08008f20
 8006fb8:	3fe00000 	.word	0x3fe00000
 8006fbc:	3ff00000 	.word	0x3ff00000
 8006fc0:	40240000 	.word	0x40240000
 8006fc4:	40140000 	.word	0x40140000
 8006fc8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006fca:	2a00      	cmp	r2, #0
 8006fcc:	f000 80db 	beq.w	8007186 <_dtoa_r+0x8ce>
 8006fd0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006fd2:	2a01      	cmp	r2, #1
 8006fd4:	f300 80bf 	bgt.w	8007156 <_dtoa_r+0x89e>
 8006fd8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	f000 80b7 	beq.w	800714e <_dtoa_r+0x896>
 8006fe0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006fe4:	4646      	mov	r6, r8
 8006fe6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006fe8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fea:	2101      	movs	r1, #1
 8006fec:	441a      	add	r2, r3
 8006fee:	4658      	mov	r0, fp
 8006ff0:	4498      	add	r8, r3
 8006ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8006ff4:	f000 fb64 	bl	80076c0 <__i2b>
 8006ff8:	4605      	mov	r5, r0
 8006ffa:	b15e      	cbz	r6, 8007014 <_dtoa_r+0x75c>
 8006ffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	dd08      	ble.n	8007014 <_dtoa_r+0x75c>
 8007002:	42b3      	cmp	r3, r6
 8007004:	bfa8      	it	ge
 8007006:	4633      	movge	r3, r6
 8007008:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800700a:	eba8 0803 	sub.w	r8, r8, r3
 800700e:	1af6      	subs	r6, r6, r3
 8007010:	1ad3      	subs	r3, r2, r3
 8007012:	9309      	str	r3, [sp, #36]	@ 0x24
 8007014:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007016:	b1f3      	cbz	r3, 8007056 <_dtoa_r+0x79e>
 8007018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800701a:	2b00      	cmp	r3, #0
 800701c:	f000 80b7 	beq.w	800718e <_dtoa_r+0x8d6>
 8007020:	b18c      	cbz	r4, 8007046 <_dtoa_r+0x78e>
 8007022:	4629      	mov	r1, r5
 8007024:	4622      	mov	r2, r4
 8007026:	4658      	mov	r0, fp
 8007028:	f000 fc08 	bl	800783c <__pow5mult>
 800702c:	464a      	mov	r2, r9
 800702e:	4601      	mov	r1, r0
 8007030:	4605      	mov	r5, r0
 8007032:	4658      	mov	r0, fp
 8007034:	f000 fb5a 	bl	80076ec <__multiply>
 8007038:	4649      	mov	r1, r9
 800703a:	9004      	str	r0, [sp, #16]
 800703c:	4658      	mov	r0, fp
 800703e:	f000 fa8b 	bl	8007558 <_Bfree>
 8007042:	9b04      	ldr	r3, [sp, #16]
 8007044:	4699      	mov	r9, r3
 8007046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007048:	1b1a      	subs	r2, r3, r4
 800704a:	d004      	beq.n	8007056 <_dtoa_r+0x79e>
 800704c:	4649      	mov	r1, r9
 800704e:	4658      	mov	r0, fp
 8007050:	f000 fbf4 	bl	800783c <__pow5mult>
 8007054:	4681      	mov	r9, r0
 8007056:	2101      	movs	r1, #1
 8007058:	4658      	mov	r0, fp
 800705a:	f000 fb31 	bl	80076c0 <__i2b>
 800705e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007060:	4604      	mov	r4, r0
 8007062:	2b00      	cmp	r3, #0
 8007064:	f000 81c9 	beq.w	80073fa <_dtoa_r+0xb42>
 8007068:	461a      	mov	r2, r3
 800706a:	4601      	mov	r1, r0
 800706c:	4658      	mov	r0, fp
 800706e:	f000 fbe5 	bl	800783c <__pow5mult>
 8007072:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007074:	4604      	mov	r4, r0
 8007076:	2b01      	cmp	r3, #1
 8007078:	f300 808f 	bgt.w	800719a <_dtoa_r+0x8e2>
 800707c:	9b02      	ldr	r3, [sp, #8]
 800707e:	2b00      	cmp	r3, #0
 8007080:	f040 8087 	bne.w	8007192 <_dtoa_r+0x8da>
 8007084:	9b03      	ldr	r3, [sp, #12]
 8007086:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800708a:	2b00      	cmp	r3, #0
 800708c:	f040 8083 	bne.w	8007196 <_dtoa_r+0x8de>
 8007090:	9b03      	ldr	r3, [sp, #12]
 8007092:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007096:	0d1b      	lsrs	r3, r3, #20
 8007098:	051b      	lsls	r3, r3, #20
 800709a:	b12b      	cbz	r3, 80070a8 <_dtoa_r+0x7f0>
 800709c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800709e:	f108 0801 	add.w	r8, r8, #1
 80070a2:	3301      	adds	r3, #1
 80070a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80070a6:	2301      	movs	r3, #1
 80070a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80070aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	f000 81aa 	beq.w	8007406 <_dtoa_r+0xb4e>
 80070b2:	6923      	ldr	r3, [r4, #16]
 80070b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80070b8:	6918      	ldr	r0, [r3, #16]
 80070ba:	f000 fab5 	bl	8007628 <__hi0bits>
 80070be:	f1c0 0020 	rsb	r0, r0, #32
 80070c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070c4:	4418      	add	r0, r3
 80070c6:	f010 001f 	ands.w	r0, r0, #31
 80070ca:	d071      	beq.n	80071b0 <_dtoa_r+0x8f8>
 80070cc:	f1c0 0320 	rsb	r3, r0, #32
 80070d0:	2b04      	cmp	r3, #4
 80070d2:	dd65      	ble.n	80071a0 <_dtoa_r+0x8e8>
 80070d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070d6:	f1c0 001c 	rsb	r0, r0, #28
 80070da:	4403      	add	r3, r0
 80070dc:	4480      	add	r8, r0
 80070de:	4406      	add	r6, r0
 80070e0:	9309      	str	r3, [sp, #36]	@ 0x24
 80070e2:	f1b8 0f00 	cmp.w	r8, #0
 80070e6:	dd05      	ble.n	80070f4 <_dtoa_r+0x83c>
 80070e8:	4649      	mov	r1, r9
 80070ea:	4642      	mov	r2, r8
 80070ec:	4658      	mov	r0, fp
 80070ee:	f000 fbff 	bl	80078f0 <__lshift>
 80070f2:	4681      	mov	r9, r0
 80070f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	dd05      	ble.n	8007106 <_dtoa_r+0x84e>
 80070fa:	4621      	mov	r1, r4
 80070fc:	461a      	mov	r2, r3
 80070fe:	4658      	mov	r0, fp
 8007100:	f000 fbf6 	bl	80078f0 <__lshift>
 8007104:	4604      	mov	r4, r0
 8007106:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007108:	2b00      	cmp	r3, #0
 800710a:	d053      	beq.n	80071b4 <_dtoa_r+0x8fc>
 800710c:	4621      	mov	r1, r4
 800710e:	4648      	mov	r0, r9
 8007110:	f000 fc5a 	bl	80079c8 <__mcmp>
 8007114:	2800      	cmp	r0, #0
 8007116:	da4d      	bge.n	80071b4 <_dtoa_r+0x8fc>
 8007118:	1e7b      	subs	r3, r7, #1
 800711a:	4649      	mov	r1, r9
 800711c:	9304      	str	r3, [sp, #16]
 800711e:	220a      	movs	r2, #10
 8007120:	2300      	movs	r3, #0
 8007122:	4658      	mov	r0, fp
 8007124:	f000 fa3a 	bl	800759c <__multadd>
 8007128:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712a:	4681      	mov	r9, r0
 800712c:	2b00      	cmp	r3, #0
 800712e:	f000 816c 	beq.w	800740a <_dtoa_r+0xb52>
 8007132:	2300      	movs	r3, #0
 8007134:	4629      	mov	r1, r5
 8007136:	220a      	movs	r2, #10
 8007138:	4658      	mov	r0, fp
 800713a:	f000 fa2f 	bl	800759c <__multadd>
 800713e:	9b08      	ldr	r3, [sp, #32]
 8007140:	4605      	mov	r5, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	dc61      	bgt.n	800720a <_dtoa_r+0x952>
 8007146:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007148:	2b02      	cmp	r3, #2
 800714a:	dc3b      	bgt.n	80071c4 <_dtoa_r+0x90c>
 800714c:	e05d      	b.n	800720a <_dtoa_r+0x952>
 800714e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007150:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007154:	e746      	b.n	8006fe4 <_dtoa_r+0x72c>
 8007156:	9b07      	ldr	r3, [sp, #28]
 8007158:	1e5c      	subs	r4, r3, #1
 800715a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800715c:	42a3      	cmp	r3, r4
 800715e:	bfbf      	itttt	lt
 8007160:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007162:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8007164:	1ae3      	sublt	r3, r4, r3
 8007166:	18d2      	addlt	r2, r2, r3
 8007168:	bfa8      	it	ge
 800716a:	1b1c      	subge	r4, r3, r4
 800716c:	9b07      	ldr	r3, [sp, #28]
 800716e:	bfbe      	ittt	lt
 8007170:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007172:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8007174:	2400      	movlt	r4, #0
 8007176:	2b00      	cmp	r3, #0
 8007178:	bfb5      	itete	lt
 800717a:	eba8 0603 	sublt.w	r6, r8, r3
 800717e:	4646      	movge	r6, r8
 8007180:	2300      	movlt	r3, #0
 8007182:	9b07      	ldrge	r3, [sp, #28]
 8007184:	e730      	b.n	8006fe8 <_dtoa_r+0x730>
 8007186:	4646      	mov	r6, r8
 8007188:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800718a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800718c:	e735      	b.n	8006ffa <_dtoa_r+0x742>
 800718e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007190:	e75c      	b.n	800704c <_dtoa_r+0x794>
 8007192:	2300      	movs	r3, #0
 8007194:	e788      	b.n	80070a8 <_dtoa_r+0x7f0>
 8007196:	9b02      	ldr	r3, [sp, #8]
 8007198:	e786      	b.n	80070a8 <_dtoa_r+0x7f0>
 800719a:	2300      	movs	r3, #0
 800719c:	930a      	str	r3, [sp, #40]	@ 0x28
 800719e:	e788      	b.n	80070b2 <_dtoa_r+0x7fa>
 80071a0:	d09f      	beq.n	80070e2 <_dtoa_r+0x82a>
 80071a2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80071a4:	331c      	adds	r3, #28
 80071a6:	441a      	add	r2, r3
 80071a8:	4498      	add	r8, r3
 80071aa:	441e      	add	r6, r3
 80071ac:	9209      	str	r2, [sp, #36]	@ 0x24
 80071ae:	e798      	b.n	80070e2 <_dtoa_r+0x82a>
 80071b0:	4603      	mov	r3, r0
 80071b2:	e7f6      	b.n	80071a2 <_dtoa_r+0x8ea>
 80071b4:	9b07      	ldr	r3, [sp, #28]
 80071b6:	9704      	str	r7, [sp, #16]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	dc20      	bgt.n	80071fe <_dtoa_r+0x946>
 80071bc:	9308      	str	r3, [sp, #32]
 80071be:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	dd1e      	ble.n	8007202 <_dtoa_r+0x94a>
 80071c4:	9b08      	ldr	r3, [sp, #32]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	f47f aebc 	bne.w	8006f44 <_dtoa_r+0x68c>
 80071cc:	4621      	mov	r1, r4
 80071ce:	2205      	movs	r2, #5
 80071d0:	4658      	mov	r0, fp
 80071d2:	f000 f9e3 	bl	800759c <__multadd>
 80071d6:	4601      	mov	r1, r0
 80071d8:	4604      	mov	r4, r0
 80071da:	4648      	mov	r0, r9
 80071dc:	f000 fbf4 	bl	80079c8 <__mcmp>
 80071e0:	2800      	cmp	r0, #0
 80071e2:	f77f aeaf 	ble.w	8006f44 <_dtoa_r+0x68c>
 80071e6:	2331      	movs	r3, #49	@ 0x31
 80071e8:	4656      	mov	r6, sl
 80071ea:	f806 3b01 	strb.w	r3, [r6], #1
 80071ee:	9b04      	ldr	r3, [sp, #16]
 80071f0:	3301      	adds	r3, #1
 80071f2:	9304      	str	r3, [sp, #16]
 80071f4:	e6aa      	b.n	8006f4c <_dtoa_r+0x694>
 80071f6:	9c07      	ldr	r4, [sp, #28]
 80071f8:	9704      	str	r7, [sp, #16]
 80071fa:	4625      	mov	r5, r4
 80071fc:	e7f3      	b.n	80071e6 <_dtoa_r+0x92e>
 80071fe:	9b07      	ldr	r3, [sp, #28]
 8007200:	9308      	str	r3, [sp, #32]
 8007202:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007204:	2b00      	cmp	r3, #0
 8007206:	f000 8104 	beq.w	8007412 <_dtoa_r+0xb5a>
 800720a:	2e00      	cmp	r6, #0
 800720c:	dd05      	ble.n	800721a <_dtoa_r+0x962>
 800720e:	4629      	mov	r1, r5
 8007210:	4632      	mov	r2, r6
 8007212:	4658      	mov	r0, fp
 8007214:	f000 fb6c 	bl	80078f0 <__lshift>
 8007218:	4605      	mov	r5, r0
 800721a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d05a      	beq.n	80072d6 <_dtoa_r+0xa1e>
 8007220:	4658      	mov	r0, fp
 8007222:	6869      	ldr	r1, [r5, #4]
 8007224:	f000 f958 	bl	80074d8 <_Balloc>
 8007228:	4606      	mov	r6, r0
 800722a:	b928      	cbnz	r0, 8007238 <_dtoa_r+0x980>
 800722c:	4602      	mov	r2, r0
 800722e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007232:	4b83      	ldr	r3, [pc, #524]	@ (8007440 <_dtoa_r+0xb88>)
 8007234:	f7ff bb54 	b.w	80068e0 <_dtoa_r+0x28>
 8007238:	692a      	ldr	r2, [r5, #16]
 800723a:	f105 010c 	add.w	r1, r5, #12
 800723e:	3202      	adds	r2, #2
 8007240:	0092      	lsls	r2, r2, #2
 8007242:	300c      	adds	r0, #12
 8007244:	f7ff fa9f 	bl	8006786 <memcpy>
 8007248:	2201      	movs	r2, #1
 800724a:	4631      	mov	r1, r6
 800724c:	4658      	mov	r0, fp
 800724e:	f000 fb4f 	bl	80078f0 <__lshift>
 8007252:	462f      	mov	r7, r5
 8007254:	4605      	mov	r5, r0
 8007256:	f10a 0301 	add.w	r3, sl, #1
 800725a:	9307      	str	r3, [sp, #28]
 800725c:	9b08      	ldr	r3, [sp, #32]
 800725e:	4453      	add	r3, sl
 8007260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007262:	9b02      	ldr	r3, [sp, #8]
 8007264:	f003 0301 	and.w	r3, r3, #1
 8007268:	930a      	str	r3, [sp, #40]	@ 0x28
 800726a:	9b07      	ldr	r3, [sp, #28]
 800726c:	4621      	mov	r1, r4
 800726e:	3b01      	subs	r3, #1
 8007270:	4648      	mov	r0, r9
 8007272:	9302      	str	r3, [sp, #8]
 8007274:	f7ff fa95 	bl	80067a2 <quorem>
 8007278:	4639      	mov	r1, r7
 800727a:	9008      	str	r0, [sp, #32]
 800727c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007280:	4648      	mov	r0, r9
 8007282:	f000 fba1 	bl	80079c8 <__mcmp>
 8007286:	462a      	mov	r2, r5
 8007288:	9009      	str	r0, [sp, #36]	@ 0x24
 800728a:	4621      	mov	r1, r4
 800728c:	4658      	mov	r0, fp
 800728e:	f000 fbb7 	bl	8007a00 <__mdiff>
 8007292:	68c2      	ldr	r2, [r0, #12]
 8007294:	4606      	mov	r6, r0
 8007296:	bb02      	cbnz	r2, 80072da <_dtoa_r+0xa22>
 8007298:	4601      	mov	r1, r0
 800729a:	4648      	mov	r0, r9
 800729c:	f000 fb94 	bl	80079c8 <__mcmp>
 80072a0:	4602      	mov	r2, r0
 80072a2:	4631      	mov	r1, r6
 80072a4:	4658      	mov	r0, fp
 80072a6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072a8:	f000 f956 	bl	8007558 <_Bfree>
 80072ac:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80072ae:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80072b0:	9e07      	ldr	r6, [sp, #28]
 80072b2:	ea43 0102 	orr.w	r1, r3, r2
 80072b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80072b8:	4319      	orrs	r1, r3
 80072ba:	d110      	bne.n	80072de <_dtoa_r+0xa26>
 80072bc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80072c0:	d029      	beq.n	8007316 <_dtoa_r+0xa5e>
 80072c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	dd02      	ble.n	80072ce <_dtoa_r+0xa16>
 80072c8:	9b08      	ldr	r3, [sp, #32]
 80072ca:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80072ce:	9b02      	ldr	r3, [sp, #8]
 80072d0:	f883 8000 	strb.w	r8, [r3]
 80072d4:	e63b      	b.n	8006f4e <_dtoa_r+0x696>
 80072d6:	4628      	mov	r0, r5
 80072d8:	e7bb      	b.n	8007252 <_dtoa_r+0x99a>
 80072da:	2201      	movs	r2, #1
 80072dc:	e7e1      	b.n	80072a2 <_dtoa_r+0x9ea>
 80072de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	db04      	blt.n	80072ee <_dtoa_r+0xa36>
 80072e4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80072e6:	430b      	orrs	r3, r1
 80072e8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80072ea:	430b      	orrs	r3, r1
 80072ec:	d120      	bne.n	8007330 <_dtoa_r+0xa78>
 80072ee:	2a00      	cmp	r2, #0
 80072f0:	dded      	ble.n	80072ce <_dtoa_r+0xa16>
 80072f2:	4649      	mov	r1, r9
 80072f4:	2201      	movs	r2, #1
 80072f6:	4658      	mov	r0, fp
 80072f8:	f000 fafa 	bl	80078f0 <__lshift>
 80072fc:	4621      	mov	r1, r4
 80072fe:	4681      	mov	r9, r0
 8007300:	f000 fb62 	bl	80079c8 <__mcmp>
 8007304:	2800      	cmp	r0, #0
 8007306:	dc03      	bgt.n	8007310 <_dtoa_r+0xa58>
 8007308:	d1e1      	bne.n	80072ce <_dtoa_r+0xa16>
 800730a:	f018 0f01 	tst.w	r8, #1
 800730e:	d0de      	beq.n	80072ce <_dtoa_r+0xa16>
 8007310:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007314:	d1d8      	bne.n	80072c8 <_dtoa_r+0xa10>
 8007316:	2339      	movs	r3, #57	@ 0x39
 8007318:	9a02      	ldr	r2, [sp, #8]
 800731a:	7013      	strb	r3, [r2, #0]
 800731c:	4633      	mov	r3, r6
 800731e:	461e      	mov	r6, r3
 8007320:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007324:	3b01      	subs	r3, #1
 8007326:	2a39      	cmp	r2, #57	@ 0x39
 8007328:	d052      	beq.n	80073d0 <_dtoa_r+0xb18>
 800732a:	3201      	adds	r2, #1
 800732c:	701a      	strb	r2, [r3, #0]
 800732e:	e60e      	b.n	8006f4e <_dtoa_r+0x696>
 8007330:	2a00      	cmp	r2, #0
 8007332:	dd07      	ble.n	8007344 <_dtoa_r+0xa8c>
 8007334:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007338:	d0ed      	beq.n	8007316 <_dtoa_r+0xa5e>
 800733a:	9a02      	ldr	r2, [sp, #8]
 800733c:	f108 0301 	add.w	r3, r8, #1
 8007340:	7013      	strb	r3, [r2, #0]
 8007342:	e604      	b.n	8006f4e <_dtoa_r+0x696>
 8007344:	9b07      	ldr	r3, [sp, #28]
 8007346:	9a07      	ldr	r2, [sp, #28]
 8007348:	f803 8c01 	strb.w	r8, [r3, #-1]
 800734c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800734e:	4293      	cmp	r3, r2
 8007350:	d028      	beq.n	80073a4 <_dtoa_r+0xaec>
 8007352:	4649      	mov	r1, r9
 8007354:	2300      	movs	r3, #0
 8007356:	220a      	movs	r2, #10
 8007358:	4658      	mov	r0, fp
 800735a:	f000 f91f 	bl	800759c <__multadd>
 800735e:	42af      	cmp	r7, r5
 8007360:	4681      	mov	r9, r0
 8007362:	f04f 0300 	mov.w	r3, #0
 8007366:	f04f 020a 	mov.w	r2, #10
 800736a:	4639      	mov	r1, r7
 800736c:	4658      	mov	r0, fp
 800736e:	d107      	bne.n	8007380 <_dtoa_r+0xac8>
 8007370:	f000 f914 	bl	800759c <__multadd>
 8007374:	4607      	mov	r7, r0
 8007376:	4605      	mov	r5, r0
 8007378:	9b07      	ldr	r3, [sp, #28]
 800737a:	3301      	adds	r3, #1
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	e774      	b.n	800726a <_dtoa_r+0x9b2>
 8007380:	f000 f90c 	bl	800759c <__multadd>
 8007384:	4629      	mov	r1, r5
 8007386:	4607      	mov	r7, r0
 8007388:	2300      	movs	r3, #0
 800738a:	220a      	movs	r2, #10
 800738c:	4658      	mov	r0, fp
 800738e:	f000 f905 	bl	800759c <__multadd>
 8007392:	4605      	mov	r5, r0
 8007394:	e7f0      	b.n	8007378 <_dtoa_r+0xac0>
 8007396:	9b08      	ldr	r3, [sp, #32]
 8007398:	2700      	movs	r7, #0
 800739a:	2b00      	cmp	r3, #0
 800739c:	bfcc      	ite	gt
 800739e:	461e      	movgt	r6, r3
 80073a0:	2601      	movle	r6, #1
 80073a2:	4456      	add	r6, sl
 80073a4:	4649      	mov	r1, r9
 80073a6:	2201      	movs	r2, #1
 80073a8:	4658      	mov	r0, fp
 80073aa:	f000 faa1 	bl	80078f0 <__lshift>
 80073ae:	4621      	mov	r1, r4
 80073b0:	4681      	mov	r9, r0
 80073b2:	f000 fb09 	bl	80079c8 <__mcmp>
 80073b6:	2800      	cmp	r0, #0
 80073b8:	dcb0      	bgt.n	800731c <_dtoa_r+0xa64>
 80073ba:	d102      	bne.n	80073c2 <_dtoa_r+0xb0a>
 80073bc:	f018 0f01 	tst.w	r8, #1
 80073c0:	d1ac      	bne.n	800731c <_dtoa_r+0xa64>
 80073c2:	4633      	mov	r3, r6
 80073c4:	461e      	mov	r6, r3
 80073c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80073ca:	2a30      	cmp	r2, #48	@ 0x30
 80073cc:	d0fa      	beq.n	80073c4 <_dtoa_r+0xb0c>
 80073ce:	e5be      	b.n	8006f4e <_dtoa_r+0x696>
 80073d0:	459a      	cmp	sl, r3
 80073d2:	d1a4      	bne.n	800731e <_dtoa_r+0xa66>
 80073d4:	9b04      	ldr	r3, [sp, #16]
 80073d6:	3301      	adds	r3, #1
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	2331      	movs	r3, #49	@ 0x31
 80073dc:	f88a 3000 	strb.w	r3, [sl]
 80073e0:	e5b5      	b.n	8006f4e <_dtoa_r+0x696>
 80073e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80073e4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007444 <_dtoa_r+0xb8c>
 80073e8:	b11b      	cbz	r3, 80073f2 <_dtoa_r+0xb3a>
 80073ea:	f10a 0308 	add.w	r3, sl, #8
 80073ee:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80073f0:	6013      	str	r3, [r2, #0]
 80073f2:	4650      	mov	r0, sl
 80073f4:	b017      	add	sp, #92	@ 0x5c
 80073f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	f77f ae3d 	ble.w	800707c <_dtoa_r+0x7c4>
 8007402:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007404:	930a      	str	r3, [sp, #40]	@ 0x28
 8007406:	2001      	movs	r0, #1
 8007408:	e65b      	b.n	80070c2 <_dtoa_r+0x80a>
 800740a:	9b08      	ldr	r3, [sp, #32]
 800740c:	2b00      	cmp	r3, #0
 800740e:	f77f aed6 	ble.w	80071be <_dtoa_r+0x906>
 8007412:	4656      	mov	r6, sl
 8007414:	4621      	mov	r1, r4
 8007416:	4648      	mov	r0, r9
 8007418:	f7ff f9c3 	bl	80067a2 <quorem>
 800741c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	f806 8b01 	strb.w	r8, [r6], #1
 8007426:	eba6 020a 	sub.w	r2, r6, sl
 800742a:	4293      	cmp	r3, r2
 800742c:	ddb3      	ble.n	8007396 <_dtoa_r+0xade>
 800742e:	4649      	mov	r1, r9
 8007430:	2300      	movs	r3, #0
 8007432:	220a      	movs	r2, #10
 8007434:	4658      	mov	r0, fp
 8007436:	f000 f8b1 	bl	800759c <__multadd>
 800743a:	4681      	mov	r9, r0
 800743c:	e7ea      	b.n	8007414 <_dtoa_r+0xb5c>
 800743e:	bf00      	nop
 8007440:	08008e7d 	.word	0x08008e7d
 8007444:	08008e01 	.word	0x08008e01

08007448 <_free_r>:
 8007448:	b538      	push	{r3, r4, r5, lr}
 800744a:	4605      	mov	r5, r0
 800744c:	2900      	cmp	r1, #0
 800744e:	d040      	beq.n	80074d2 <_free_r+0x8a>
 8007450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007454:	1f0c      	subs	r4, r1, #4
 8007456:	2b00      	cmp	r3, #0
 8007458:	bfb8      	it	lt
 800745a:	18e4      	addlt	r4, r4, r3
 800745c:	f7fe f88c 	bl	8005578 <__malloc_lock>
 8007460:	4a1c      	ldr	r2, [pc, #112]	@ (80074d4 <_free_r+0x8c>)
 8007462:	6813      	ldr	r3, [r2, #0]
 8007464:	b933      	cbnz	r3, 8007474 <_free_r+0x2c>
 8007466:	6063      	str	r3, [r4, #4]
 8007468:	6014      	str	r4, [r2, #0]
 800746a:	4628      	mov	r0, r5
 800746c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007470:	f7fe b888 	b.w	8005584 <__malloc_unlock>
 8007474:	42a3      	cmp	r3, r4
 8007476:	d908      	bls.n	800748a <_free_r+0x42>
 8007478:	6820      	ldr	r0, [r4, #0]
 800747a:	1821      	adds	r1, r4, r0
 800747c:	428b      	cmp	r3, r1
 800747e:	bf01      	itttt	eq
 8007480:	6819      	ldreq	r1, [r3, #0]
 8007482:	685b      	ldreq	r3, [r3, #4]
 8007484:	1809      	addeq	r1, r1, r0
 8007486:	6021      	streq	r1, [r4, #0]
 8007488:	e7ed      	b.n	8007466 <_free_r+0x1e>
 800748a:	461a      	mov	r2, r3
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	b10b      	cbz	r3, 8007494 <_free_r+0x4c>
 8007490:	42a3      	cmp	r3, r4
 8007492:	d9fa      	bls.n	800748a <_free_r+0x42>
 8007494:	6811      	ldr	r1, [r2, #0]
 8007496:	1850      	adds	r0, r2, r1
 8007498:	42a0      	cmp	r0, r4
 800749a:	d10b      	bne.n	80074b4 <_free_r+0x6c>
 800749c:	6820      	ldr	r0, [r4, #0]
 800749e:	4401      	add	r1, r0
 80074a0:	1850      	adds	r0, r2, r1
 80074a2:	4283      	cmp	r3, r0
 80074a4:	6011      	str	r1, [r2, #0]
 80074a6:	d1e0      	bne.n	800746a <_free_r+0x22>
 80074a8:	6818      	ldr	r0, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	4408      	add	r0, r1
 80074ae:	6010      	str	r0, [r2, #0]
 80074b0:	6053      	str	r3, [r2, #4]
 80074b2:	e7da      	b.n	800746a <_free_r+0x22>
 80074b4:	d902      	bls.n	80074bc <_free_r+0x74>
 80074b6:	230c      	movs	r3, #12
 80074b8:	602b      	str	r3, [r5, #0]
 80074ba:	e7d6      	b.n	800746a <_free_r+0x22>
 80074bc:	6820      	ldr	r0, [r4, #0]
 80074be:	1821      	adds	r1, r4, r0
 80074c0:	428b      	cmp	r3, r1
 80074c2:	bf01      	itttt	eq
 80074c4:	6819      	ldreq	r1, [r3, #0]
 80074c6:	685b      	ldreq	r3, [r3, #4]
 80074c8:	1809      	addeq	r1, r1, r0
 80074ca:	6021      	streq	r1, [r4, #0]
 80074cc:	6063      	str	r3, [r4, #4]
 80074ce:	6054      	str	r4, [r2, #4]
 80074d0:	e7cb      	b.n	800746a <_free_r+0x22>
 80074d2:	bd38      	pop	{r3, r4, r5, pc}
 80074d4:	20000370 	.word	0x20000370

080074d8 <_Balloc>:
 80074d8:	b570      	push	{r4, r5, r6, lr}
 80074da:	69c6      	ldr	r6, [r0, #28]
 80074dc:	4604      	mov	r4, r0
 80074de:	460d      	mov	r5, r1
 80074e0:	b976      	cbnz	r6, 8007500 <_Balloc+0x28>
 80074e2:	2010      	movs	r0, #16
 80074e4:	f7fd ff96 	bl	8005414 <malloc>
 80074e8:	4602      	mov	r2, r0
 80074ea:	61e0      	str	r0, [r4, #28]
 80074ec:	b920      	cbnz	r0, 80074f8 <_Balloc+0x20>
 80074ee:	216b      	movs	r1, #107	@ 0x6b
 80074f0:	4b17      	ldr	r3, [pc, #92]	@ (8007550 <_Balloc+0x78>)
 80074f2:	4818      	ldr	r0, [pc, #96]	@ (8007554 <_Balloc+0x7c>)
 80074f4:	f7fd ff54 	bl	80053a0 <__assert_func>
 80074f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074fc:	6006      	str	r6, [r0, #0]
 80074fe:	60c6      	str	r6, [r0, #12]
 8007500:	69e6      	ldr	r6, [r4, #28]
 8007502:	68f3      	ldr	r3, [r6, #12]
 8007504:	b183      	cbz	r3, 8007528 <_Balloc+0x50>
 8007506:	69e3      	ldr	r3, [r4, #28]
 8007508:	68db      	ldr	r3, [r3, #12]
 800750a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800750e:	b9b8      	cbnz	r0, 8007540 <_Balloc+0x68>
 8007510:	2101      	movs	r1, #1
 8007512:	fa01 f605 	lsl.w	r6, r1, r5
 8007516:	1d72      	adds	r2, r6, #5
 8007518:	4620      	mov	r0, r4
 800751a:	0092      	lsls	r2, r2, #2
 800751c:	f7fd ff66 	bl	80053ec <_calloc_r>
 8007520:	b160      	cbz	r0, 800753c <_Balloc+0x64>
 8007522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007526:	e00e      	b.n	8007546 <_Balloc+0x6e>
 8007528:	2221      	movs	r2, #33	@ 0x21
 800752a:	2104      	movs	r1, #4
 800752c:	4620      	mov	r0, r4
 800752e:	f7fd ff5d 	bl	80053ec <_calloc_r>
 8007532:	69e3      	ldr	r3, [r4, #28]
 8007534:	60f0      	str	r0, [r6, #12]
 8007536:	68db      	ldr	r3, [r3, #12]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d1e4      	bne.n	8007506 <_Balloc+0x2e>
 800753c:	2000      	movs	r0, #0
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	6802      	ldr	r2, [r0, #0]
 8007542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007546:	2300      	movs	r3, #0
 8007548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800754c:	e7f7      	b.n	800753e <_Balloc+0x66>
 800754e:	bf00      	nop
 8007550:	08008e0e 	.word	0x08008e0e
 8007554:	08008e8e 	.word	0x08008e8e

08007558 <_Bfree>:
 8007558:	b570      	push	{r4, r5, r6, lr}
 800755a:	69c6      	ldr	r6, [r0, #28]
 800755c:	4605      	mov	r5, r0
 800755e:	460c      	mov	r4, r1
 8007560:	b976      	cbnz	r6, 8007580 <_Bfree+0x28>
 8007562:	2010      	movs	r0, #16
 8007564:	f7fd ff56 	bl	8005414 <malloc>
 8007568:	4602      	mov	r2, r0
 800756a:	61e8      	str	r0, [r5, #28]
 800756c:	b920      	cbnz	r0, 8007578 <_Bfree+0x20>
 800756e:	218f      	movs	r1, #143	@ 0x8f
 8007570:	4b08      	ldr	r3, [pc, #32]	@ (8007594 <_Bfree+0x3c>)
 8007572:	4809      	ldr	r0, [pc, #36]	@ (8007598 <_Bfree+0x40>)
 8007574:	f7fd ff14 	bl	80053a0 <__assert_func>
 8007578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800757c:	6006      	str	r6, [r0, #0]
 800757e:	60c6      	str	r6, [r0, #12]
 8007580:	b13c      	cbz	r4, 8007592 <_Bfree+0x3a>
 8007582:	69eb      	ldr	r3, [r5, #28]
 8007584:	6862      	ldr	r2, [r4, #4]
 8007586:	68db      	ldr	r3, [r3, #12]
 8007588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800758c:	6021      	str	r1, [r4, #0]
 800758e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	08008e0e 	.word	0x08008e0e
 8007598:	08008e8e 	.word	0x08008e8e

0800759c <__multadd>:
 800759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075a0:	4607      	mov	r7, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	461e      	mov	r6, r3
 80075a6:	2000      	movs	r0, #0
 80075a8:	690d      	ldr	r5, [r1, #16]
 80075aa:	f101 0c14 	add.w	ip, r1, #20
 80075ae:	f8dc 3000 	ldr.w	r3, [ip]
 80075b2:	3001      	adds	r0, #1
 80075b4:	b299      	uxth	r1, r3
 80075b6:	fb02 6101 	mla	r1, r2, r1, r6
 80075ba:	0c1e      	lsrs	r6, r3, #16
 80075bc:	0c0b      	lsrs	r3, r1, #16
 80075be:	fb02 3306 	mla	r3, r2, r6, r3
 80075c2:	b289      	uxth	r1, r1
 80075c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80075c8:	4285      	cmp	r5, r0
 80075ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80075ce:	f84c 1b04 	str.w	r1, [ip], #4
 80075d2:	dcec      	bgt.n	80075ae <__multadd+0x12>
 80075d4:	b30e      	cbz	r6, 800761a <__multadd+0x7e>
 80075d6:	68a3      	ldr	r3, [r4, #8]
 80075d8:	42ab      	cmp	r3, r5
 80075da:	dc19      	bgt.n	8007610 <__multadd+0x74>
 80075dc:	6861      	ldr	r1, [r4, #4]
 80075de:	4638      	mov	r0, r7
 80075e0:	3101      	adds	r1, #1
 80075e2:	f7ff ff79 	bl	80074d8 <_Balloc>
 80075e6:	4680      	mov	r8, r0
 80075e8:	b928      	cbnz	r0, 80075f6 <__multadd+0x5a>
 80075ea:	4602      	mov	r2, r0
 80075ec:	21ba      	movs	r1, #186	@ 0xba
 80075ee:	4b0c      	ldr	r3, [pc, #48]	@ (8007620 <__multadd+0x84>)
 80075f0:	480c      	ldr	r0, [pc, #48]	@ (8007624 <__multadd+0x88>)
 80075f2:	f7fd fed5 	bl	80053a0 <__assert_func>
 80075f6:	6922      	ldr	r2, [r4, #16]
 80075f8:	f104 010c 	add.w	r1, r4, #12
 80075fc:	3202      	adds	r2, #2
 80075fe:	0092      	lsls	r2, r2, #2
 8007600:	300c      	adds	r0, #12
 8007602:	f7ff f8c0 	bl	8006786 <memcpy>
 8007606:	4621      	mov	r1, r4
 8007608:	4638      	mov	r0, r7
 800760a:	f7ff ffa5 	bl	8007558 <_Bfree>
 800760e:	4644      	mov	r4, r8
 8007610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007614:	3501      	adds	r5, #1
 8007616:	615e      	str	r6, [r3, #20]
 8007618:	6125      	str	r5, [r4, #16]
 800761a:	4620      	mov	r0, r4
 800761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007620:	08008e7d 	.word	0x08008e7d
 8007624:	08008e8e 	.word	0x08008e8e

08007628 <__hi0bits>:
 8007628:	4603      	mov	r3, r0
 800762a:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800762e:	bf3a      	itte	cc
 8007630:	0403      	lslcc	r3, r0, #16
 8007632:	2010      	movcc	r0, #16
 8007634:	2000      	movcs	r0, #0
 8007636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800763a:	bf3c      	itt	cc
 800763c:	021b      	lslcc	r3, r3, #8
 800763e:	3008      	addcc	r0, #8
 8007640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007644:	bf3c      	itt	cc
 8007646:	011b      	lslcc	r3, r3, #4
 8007648:	3004      	addcc	r0, #4
 800764a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800764e:	bf3c      	itt	cc
 8007650:	009b      	lslcc	r3, r3, #2
 8007652:	3002      	addcc	r0, #2
 8007654:	2b00      	cmp	r3, #0
 8007656:	db05      	blt.n	8007664 <__hi0bits+0x3c>
 8007658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800765c:	f100 0001 	add.w	r0, r0, #1
 8007660:	bf08      	it	eq
 8007662:	2020      	moveq	r0, #32
 8007664:	4770      	bx	lr

08007666 <__lo0bits>:
 8007666:	6803      	ldr	r3, [r0, #0]
 8007668:	4602      	mov	r2, r0
 800766a:	f013 0007 	ands.w	r0, r3, #7
 800766e:	d00b      	beq.n	8007688 <__lo0bits+0x22>
 8007670:	07d9      	lsls	r1, r3, #31
 8007672:	d421      	bmi.n	80076b8 <__lo0bits+0x52>
 8007674:	0798      	lsls	r0, r3, #30
 8007676:	bf49      	itett	mi
 8007678:	085b      	lsrmi	r3, r3, #1
 800767a:	089b      	lsrpl	r3, r3, #2
 800767c:	2001      	movmi	r0, #1
 800767e:	6013      	strmi	r3, [r2, #0]
 8007680:	bf5c      	itt	pl
 8007682:	2002      	movpl	r0, #2
 8007684:	6013      	strpl	r3, [r2, #0]
 8007686:	4770      	bx	lr
 8007688:	b299      	uxth	r1, r3
 800768a:	b909      	cbnz	r1, 8007690 <__lo0bits+0x2a>
 800768c:	2010      	movs	r0, #16
 800768e:	0c1b      	lsrs	r3, r3, #16
 8007690:	b2d9      	uxtb	r1, r3
 8007692:	b909      	cbnz	r1, 8007698 <__lo0bits+0x32>
 8007694:	3008      	adds	r0, #8
 8007696:	0a1b      	lsrs	r3, r3, #8
 8007698:	0719      	lsls	r1, r3, #28
 800769a:	bf04      	itt	eq
 800769c:	091b      	lsreq	r3, r3, #4
 800769e:	3004      	addeq	r0, #4
 80076a0:	0799      	lsls	r1, r3, #30
 80076a2:	bf04      	itt	eq
 80076a4:	089b      	lsreq	r3, r3, #2
 80076a6:	3002      	addeq	r0, #2
 80076a8:	07d9      	lsls	r1, r3, #31
 80076aa:	d403      	bmi.n	80076b4 <__lo0bits+0x4e>
 80076ac:	085b      	lsrs	r3, r3, #1
 80076ae:	f100 0001 	add.w	r0, r0, #1
 80076b2:	d003      	beq.n	80076bc <__lo0bits+0x56>
 80076b4:	6013      	str	r3, [r2, #0]
 80076b6:	4770      	bx	lr
 80076b8:	2000      	movs	r0, #0
 80076ba:	4770      	bx	lr
 80076bc:	2020      	movs	r0, #32
 80076be:	4770      	bx	lr

080076c0 <__i2b>:
 80076c0:	b510      	push	{r4, lr}
 80076c2:	460c      	mov	r4, r1
 80076c4:	2101      	movs	r1, #1
 80076c6:	f7ff ff07 	bl	80074d8 <_Balloc>
 80076ca:	4602      	mov	r2, r0
 80076cc:	b928      	cbnz	r0, 80076da <__i2b+0x1a>
 80076ce:	f240 1145 	movw	r1, #325	@ 0x145
 80076d2:	4b04      	ldr	r3, [pc, #16]	@ (80076e4 <__i2b+0x24>)
 80076d4:	4804      	ldr	r0, [pc, #16]	@ (80076e8 <__i2b+0x28>)
 80076d6:	f7fd fe63 	bl	80053a0 <__assert_func>
 80076da:	2301      	movs	r3, #1
 80076dc:	6144      	str	r4, [r0, #20]
 80076de:	6103      	str	r3, [r0, #16]
 80076e0:	bd10      	pop	{r4, pc}
 80076e2:	bf00      	nop
 80076e4:	08008e7d 	.word	0x08008e7d
 80076e8:	08008e8e 	.word	0x08008e8e

080076ec <__multiply>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	4614      	mov	r4, r2
 80076f2:	690a      	ldr	r2, [r1, #16]
 80076f4:	6923      	ldr	r3, [r4, #16]
 80076f6:	460f      	mov	r7, r1
 80076f8:	429a      	cmp	r2, r3
 80076fa:	bfa2      	ittt	ge
 80076fc:	4623      	movge	r3, r4
 80076fe:	460c      	movge	r4, r1
 8007700:	461f      	movge	r7, r3
 8007702:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007706:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800770a:	68a3      	ldr	r3, [r4, #8]
 800770c:	6861      	ldr	r1, [r4, #4]
 800770e:	eb0a 0609 	add.w	r6, sl, r9
 8007712:	42b3      	cmp	r3, r6
 8007714:	b085      	sub	sp, #20
 8007716:	bfb8      	it	lt
 8007718:	3101      	addlt	r1, #1
 800771a:	f7ff fedd 	bl	80074d8 <_Balloc>
 800771e:	b930      	cbnz	r0, 800772e <__multiply+0x42>
 8007720:	4602      	mov	r2, r0
 8007722:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007726:	4b43      	ldr	r3, [pc, #268]	@ (8007834 <__multiply+0x148>)
 8007728:	4843      	ldr	r0, [pc, #268]	@ (8007838 <__multiply+0x14c>)
 800772a:	f7fd fe39 	bl	80053a0 <__assert_func>
 800772e:	f100 0514 	add.w	r5, r0, #20
 8007732:	462b      	mov	r3, r5
 8007734:	2200      	movs	r2, #0
 8007736:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800773a:	4543      	cmp	r3, r8
 800773c:	d321      	bcc.n	8007782 <__multiply+0x96>
 800773e:	f107 0114 	add.w	r1, r7, #20
 8007742:	f104 0214 	add.w	r2, r4, #20
 8007746:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800774a:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800774e:	9302      	str	r3, [sp, #8]
 8007750:	1b13      	subs	r3, r2, r4
 8007752:	3b15      	subs	r3, #21
 8007754:	f023 0303 	bic.w	r3, r3, #3
 8007758:	3304      	adds	r3, #4
 800775a:	f104 0715 	add.w	r7, r4, #21
 800775e:	42ba      	cmp	r2, r7
 8007760:	bf38      	it	cc
 8007762:	2304      	movcc	r3, #4
 8007764:	9301      	str	r3, [sp, #4]
 8007766:	9b02      	ldr	r3, [sp, #8]
 8007768:	9103      	str	r1, [sp, #12]
 800776a:	428b      	cmp	r3, r1
 800776c:	d80c      	bhi.n	8007788 <__multiply+0x9c>
 800776e:	2e00      	cmp	r6, #0
 8007770:	dd03      	ble.n	800777a <__multiply+0x8e>
 8007772:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007776:	2b00      	cmp	r3, #0
 8007778:	d05a      	beq.n	8007830 <__multiply+0x144>
 800777a:	6106      	str	r6, [r0, #16]
 800777c:	b005      	add	sp, #20
 800777e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007782:	f843 2b04 	str.w	r2, [r3], #4
 8007786:	e7d8      	b.n	800773a <__multiply+0x4e>
 8007788:	f8b1 a000 	ldrh.w	sl, [r1]
 800778c:	f1ba 0f00 	cmp.w	sl, #0
 8007790:	d023      	beq.n	80077da <__multiply+0xee>
 8007792:	46a9      	mov	r9, r5
 8007794:	f04f 0c00 	mov.w	ip, #0
 8007798:	f104 0e14 	add.w	lr, r4, #20
 800779c:	f85e 7b04 	ldr.w	r7, [lr], #4
 80077a0:	f8d9 3000 	ldr.w	r3, [r9]
 80077a4:	fa1f fb87 	uxth.w	fp, r7
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	fb0a 330b 	mla	r3, sl, fp, r3
 80077ae:	4463      	add	r3, ip
 80077b0:	f8d9 c000 	ldr.w	ip, [r9]
 80077b4:	0c3f      	lsrs	r7, r7, #16
 80077b6:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80077ba:	fb0a c707 	mla	r7, sl, r7, ip
 80077be:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80077c8:	4572      	cmp	r2, lr
 80077ca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80077ce:	f849 3b04 	str.w	r3, [r9], #4
 80077d2:	d8e3      	bhi.n	800779c <__multiply+0xb0>
 80077d4:	9b01      	ldr	r3, [sp, #4]
 80077d6:	f845 c003 	str.w	ip, [r5, r3]
 80077da:	9b03      	ldr	r3, [sp, #12]
 80077dc:	3104      	adds	r1, #4
 80077de:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80077e2:	f1b9 0f00 	cmp.w	r9, #0
 80077e6:	d021      	beq.n	800782c <__multiply+0x140>
 80077e8:	46ae      	mov	lr, r5
 80077ea:	f04f 0a00 	mov.w	sl, #0
 80077ee:	682b      	ldr	r3, [r5, #0]
 80077f0:	f104 0c14 	add.w	ip, r4, #20
 80077f4:	f8bc b000 	ldrh.w	fp, [ip]
 80077f8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	fb09 770b 	mla	r7, r9, fp, r7
 8007802:	4457      	add	r7, sl
 8007804:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007808:	f84e 3b04 	str.w	r3, [lr], #4
 800780c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007810:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007814:	f8be 3000 	ldrh.w	r3, [lr]
 8007818:	4562      	cmp	r2, ip
 800781a:	fb09 330a 	mla	r3, r9, sl, r3
 800781e:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007822:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007826:	d8e5      	bhi.n	80077f4 <__multiply+0x108>
 8007828:	9f01      	ldr	r7, [sp, #4]
 800782a:	51eb      	str	r3, [r5, r7]
 800782c:	3504      	adds	r5, #4
 800782e:	e79a      	b.n	8007766 <__multiply+0x7a>
 8007830:	3e01      	subs	r6, #1
 8007832:	e79c      	b.n	800776e <__multiply+0x82>
 8007834:	08008e7d 	.word	0x08008e7d
 8007838:	08008e8e 	.word	0x08008e8e

0800783c <__pow5mult>:
 800783c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007840:	4615      	mov	r5, r2
 8007842:	f012 0203 	ands.w	r2, r2, #3
 8007846:	4607      	mov	r7, r0
 8007848:	460e      	mov	r6, r1
 800784a:	d007      	beq.n	800785c <__pow5mult+0x20>
 800784c:	4c25      	ldr	r4, [pc, #148]	@ (80078e4 <__pow5mult+0xa8>)
 800784e:	3a01      	subs	r2, #1
 8007850:	2300      	movs	r3, #0
 8007852:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007856:	f7ff fea1 	bl	800759c <__multadd>
 800785a:	4606      	mov	r6, r0
 800785c:	10ad      	asrs	r5, r5, #2
 800785e:	d03d      	beq.n	80078dc <__pow5mult+0xa0>
 8007860:	69fc      	ldr	r4, [r7, #28]
 8007862:	b97c      	cbnz	r4, 8007884 <__pow5mult+0x48>
 8007864:	2010      	movs	r0, #16
 8007866:	f7fd fdd5 	bl	8005414 <malloc>
 800786a:	4602      	mov	r2, r0
 800786c:	61f8      	str	r0, [r7, #28]
 800786e:	b928      	cbnz	r0, 800787c <__pow5mult+0x40>
 8007870:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007874:	4b1c      	ldr	r3, [pc, #112]	@ (80078e8 <__pow5mult+0xac>)
 8007876:	481d      	ldr	r0, [pc, #116]	@ (80078ec <__pow5mult+0xb0>)
 8007878:	f7fd fd92 	bl	80053a0 <__assert_func>
 800787c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007880:	6004      	str	r4, [r0, #0]
 8007882:	60c4      	str	r4, [r0, #12]
 8007884:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007888:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800788c:	b94c      	cbnz	r4, 80078a2 <__pow5mult+0x66>
 800788e:	f240 2171 	movw	r1, #625	@ 0x271
 8007892:	4638      	mov	r0, r7
 8007894:	f7ff ff14 	bl	80076c0 <__i2b>
 8007898:	2300      	movs	r3, #0
 800789a:	4604      	mov	r4, r0
 800789c:	f8c8 0008 	str.w	r0, [r8, #8]
 80078a0:	6003      	str	r3, [r0, #0]
 80078a2:	f04f 0900 	mov.w	r9, #0
 80078a6:	07eb      	lsls	r3, r5, #31
 80078a8:	d50a      	bpl.n	80078c0 <__pow5mult+0x84>
 80078aa:	4631      	mov	r1, r6
 80078ac:	4622      	mov	r2, r4
 80078ae:	4638      	mov	r0, r7
 80078b0:	f7ff ff1c 	bl	80076ec <__multiply>
 80078b4:	4680      	mov	r8, r0
 80078b6:	4631      	mov	r1, r6
 80078b8:	4638      	mov	r0, r7
 80078ba:	f7ff fe4d 	bl	8007558 <_Bfree>
 80078be:	4646      	mov	r6, r8
 80078c0:	106d      	asrs	r5, r5, #1
 80078c2:	d00b      	beq.n	80078dc <__pow5mult+0xa0>
 80078c4:	6820      	ldr	r0, [r4, #0]
 80078c6:	b938      	cbnz	r0, 80078d8 <__pow5mult+0x9c>
 80078c8:	4622      	mov	r2, r4
 80078ca:	4621      	mov	r1, r4
 80078cc:	4638      	mov	r0, r7
 80078ce:	f7ff ff0d 	bl	80076ec <__multiply>
 80078d2:	6020      	str	r0, [r4, #0]
 80078d4:	f8c0 9000 	str.w	r9, [r0]
 80078d8:	4604      	mov	r4, r0
 80078da:	e7e4      	b.n	80078a6 <__pow5mult+0x6a>
 80078dc:	4630      	mov	r0, r6
 80078de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078e2:	bf00      	nop
 80078e4:	08008ee8 	.word	0x08008ee8
 80078e8:	08008e0e 	.word	0x08008e0e
 80078ec:	08008e8e 	.word	0x08008e8e

080078f0 <__lshift>:
 80078f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078f4:	460c      	mov	r4, r1
 80078f6:	4607      	mov	r7, r0
 80078f8:	4691      	mov	r9, r2
 80078fa:	6923      	ldr	r3, [r4, #16]
 80078fc:	6849      	ldr	r1, [r1, #4]
 80078fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007902:	68a3      	ldr	r3, [r4, #8]
 8007904:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007908:	f108 0601 	add.w	r6, r8, #1
 800790c:	42b3      	cmp	r3, r6
 800790e:	db0b      	blt.n	8007928 <__lshift+0x38>
 8007910:	4638      	mov	r0, r7
 8007912:	f7ff fde1 	bl	80074d8 <_Balloc>
 8007916:	4605      	mov	r5, r0
 8007918:	b948      	cbnz	r0, 800792e <__lshift+0x3e>
 800791a:	4602      	mov	r2, r0
 800791c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007920:	4b27      	ldr	r3, [pc, #156]	@ (80079c0 <__lshift+0xd0>)
 8007922:	4828      	ldr	r0, [pc, #160]	@ (80079c4 <__lshift+0xd4>)
 8007924:	f7fd fd3c 	bl	80053a0 <__assert_func>
 8007928:	3101      	adds	r1, #1
 800792a:	005b      	lsls	r3, r3, #1
 800792c:	e7ee      	b.n	800790c <__lshift+0x1c>
 800792e:	2300      	movs	r3, #0
 8007930:	f100 0114 	add.w	r1, r0, #20
 8007934:	f100 0210 	add.w	r2, r0, #16
 8007938:	4618      	mov	r0, r3
 800793a:	4553      	cmp	r3, sl
 800793c:	db33      	blt.n	80079a6 <__lshift+0xb6>
 800793e:	6920      	ldr	r0, [r4, #16]
 8007940:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007944:	f104 0314 	add.w	r3, r4, #20
 8007948:	f019 091f 	ands.w	r9, r9, #31
 800794c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007950:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007954:	d02b      	beq.n	80079ae <__lshift+0xbe>
 8007956:	468a      	mov	sl, r1
 8007958:	2200      	movs	r2, #0
 800795a:	f1c9 0e20 	rsb	lr, r9, #32
 800795e:	6818      	ldr	r0, [r3, #0]
 8007960:	fa00 f009 	lsl.w	r0, r0, r9
 8007964:	4310      	orrs	r0, r2
 8007966:	f84a 0b04 	str.w	r0, [sl], #4
 800796a:	f853 2b04 	ldr.w	r2, [r3], #4
 800796e:	459c      	cmp	ip, r3
 8007970:	fa22 f20e 	lsr.w	r2, r2, lr
 8007974:	d8f3      	bhi.n	800795e <__lshift+0x6e>
 8007976:	ebac 0304 	sub.w	r3, ip, r4
 800797a:	3b15      	subs	r3, #21
 800797c:	f023 0303 	bic.w	r3, r3, #3
 8007980:	3304      	adds	r3, #4
 8007982:	f104 0015 	add.w	r0, r4, #21
 8007986:	4584      	cmp	ip, r0
 8007988:	bf38      	it	cc
 800798a:	2304      	movcc	r3, #4
 800798c:	50ca      	str	r2, [r1, r3]
 800798e:	b10a      	cbz	r2, 8007994 <__lshift+0xa4>
 8007990:	f108 0602 	add.w	r6, r8, #2
 8007994:	3e01      	subs	r6, #1
 8007996:	4638      	mov	r0, r7
 8007998:	4621      	mov	r1, r4
 800799a:	612e      	str	r6, [r5, #16]
 800799c:	f7ff fddc 	bl	8007558 <_Bfree>
 80079a0:	4628      	mov	r0, r5
 80079a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079a6:	f842 0f04 	str.w	r0, [r2, #4]!
 80079aa:	3301      	adds	r3, #1
 80079ac:	e7c5      	b.n	800793a <__lshift+0x4a>
 80079ae:	3904      	subs	r1, #4
 80079b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80079b4:	459c      	cmp	ip, r3
 80079b6:	f841 2f04 	str.w	r2, [r1, #4]!
 80079ba:	d8f9      	bhi.n	80079b0 <__lshift+0xc0>
 80079bc:	e7ea      	b.n	8007994 <__lshift+0xa4>
 80079be:	bf00      	nop
 80079c0:	08008e7d 	.word	0x08008e7d
 80079c4:	08008e8e 	.word	0x08008e8e

080079c8 <__mcmp>:
 80079c8:	4603      	mov	r3, r0
 80079ca:	690a      	ldr	r2, [r1, #16]
 80079cc:	6900      	ldr	r0, [r0, #16]
 80079ce:	b530      	push	{r4, r5, lr}
 80079d0:	1a80      	subs	r0, r0, r2
 80079d2:	d10e      	bne.n	80079f2 <__mcmp+0x2a>
 80079d4:	3314      	adds	r3, #20
 80079d6:	3114      	adds	r1, #20
 80079d8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80079dc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80079e0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80079e4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80079e8:	4295      	cmp	r5, r2
 80079ea:	d003      	beq.n	80079f4 <__mcmp+0x2c>
 80079ec:	d205      	bcs.n	80079fa <__mcmp+0x32>
 80079ee:	f04f 30ff 	mov.w	r0, #4294967295
 80079f2:	bd30      	pop	{r4, r5, pc}
 80079f4:	42a3      	cmp	r3, r4
 80079f6:	d3f3      	bcc.n	80079e0 <__mcmp+0x18>
 80079f8:	e7fb      	b.n	80079f2 <__mcmp+0x2a>
 80079fa:	2001      	movs	r0, #1
 80079fc:	e7f9      	b.n	80079f2 <__mcmp+0x2a>
	...

08007a00 <__mdiff>:
 8007a00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4689      	mov	r9, r1
 8007a06:	4606      	mov	r6, r0
 8007a08:	4611      	mov	r1, r2
 8007a0a:	4648      	mov	r0, r9
 8007a0c:	4614      	mov	r4, r2
 8007a0e:	f7ff ffdb 	bl	80079c8 <__mcmp>
 8007a12:	1e05      	subs	r5, r0, #0
 8007a14:	d112      	bne.n	8007a3c <__mdiff+0x3c>
 8007a16:	4629      	mov	r1, r5
 8007a18:	4630      	mov	r0, r6
 8007a1a:	f7ff fd5d 	bl	80074d8 <_Balloc>
 8007a1e:	4602      	mov	r2, r0
 8007a20:	b928      	cbnz	r0, 8007a2e <__mdiff+0x2e>
 8007a22:	f240 2137 	movw	r1, #567	@ 0x237
 8007a26:	4b3e      	ldr	r3, [pc, #248]	@ (8007b20 <__mdiff+0x120>)
 8007a28:	483e      	ldr	r0, [pc, #248]	@ (8007b24 <__mdiff+0x124>)
 8007a2a:	f7fd fcb9 	bl	80053a0 <__assert_func>
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a34:	4610      	mov	r0, r2
 8007a36:	b003      	add	sp, #12
 8007a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a3c:	bfbc      	itt	lt
 8007a3e:	464b      	movlt	r3, r9
 8007a40:	46a1      	movlt	r9, r4
 8007a42:	4630      	mov	r0, r6
 8007a44:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007a48:	bfba      	itte	lt
 8007a4a:	461c      	movlt	r4, r3
 8007a4c:	2501      	movlt	r5, #1
 8007a4e:	2500      	movge	r5, #0
 8007a50:	f7ff fd42 	bl	80074d8 <_Balloc>
 8007a54:	4602      	mov	r2, r0
 8007a56:	b918      	cbnz	r0, 8007a60 <__mdiff+0x60>
 8007a58:	f240 2145 	movw	r1, #581	@ 0x245
 8007a5c:	4b30      	ldr	r3, [pc, #192]	@ (8007b20 <__mdiff+0x120>)
 8007a5e:	e7e3      	b.n	8007a28 <__mdiff+0x28>
 8007a60:	f100 0b14 	add.w	fp, r0, #20
 8007a64:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007a68:	f109 0310 	add.w	r3, r9, #16
 8007a6c:	60c5      	str	r5, [r0, #12]
 8007a6e:	f04f 0c00 	mov.w	ip, #0
 8007a72:	f109 0514 	add.w	r5, r9, #20
 8007a76:	46d9      	mov	r9, fp
 8007a78:	6926      	ldr	r6, [r4, #16]
 8007a7a:	f104 0e14 	add.w	lr, r4, #20
 8007a7e:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007a82:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007a86:	9301      	str	r3, [sp, #4]
 8007a88:	9b01      	ldr	r3, [sp, #4]
 8007a8a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007a8e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007a92:	b281      	uxth	r1, r0
 8007a94:	9301      	str	r3, [sp, #4]
 8007a96:	fa1f f38a 	uxth.w	r3, sl
 8007a9a:	1a5b      	subs	r3, r3, r1
 8007a9c:	0c00      	lsrs	r0, r0, #16
 8007a9e:	4463      	add	r3, ip
 8007aa0:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007aa4:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007aae:	4576      	cmp	r6, lr
 8007ab0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007ab4:	f849 3b04 	str.w	r3, [r9], #4
 8007ab8:	d8e6      	bhi.n	8007a88 <__mdiff+0x88>
 8007aba:	1b33      	subs	r3, r6, r4
 8007abc:	3b15      	subs	r3, #21
 8007abe:	f023 0303 	bic.w	r3, r3, #3
 8007ac2:	3415      	adds	r4, #21
 8007ac4:	3304      	adds	r3, #4
 8007ac6:	42a6      	cmp	r6, r4
 8007ac8:	bf38      	it	cc
 8007aca:	2304      	movcc	r3, #4
 8007acc:	441d      	add	r5, r3
 8007ace:	445b      	add	r3, fp
 8007ad0:	461e      	mov	r6, r3
 8007ad2:	462c      	mov	r4, r5
 8007ad4:	4544      	cmp	r4, r8
 8007ad6:	d30e      	bcc.n	8007af6 <__mdiff+0xf6>
 8007ad8:	f108 0103 	add.w	r1, r8, #3
 8007adc:	1b49      	subs	r1, r1, r5
 8007ade:	f021 0103 	bic.w	r1, r1, #3
 8007ae2:	3d03      	subs	r5, #3
 8007ae4:	45a8      	cmp	r8, r5
 8007ae6:	bf38      	it	cc
 8007ae8:	2100      	movcc	r1, #0
 8007aea:	440b      	add	r3, r1
 8007aec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007af0:	b199      	cbz	r1, 8007b1a <__mdiff+0x11a>
 8007af2:	6117      	str	r7, [r2, #16]
 8007af4:	e79e      	b.n	8007a34 <__mdiff+0x34>
 8007af6:	46e6      	mov	lr, ip
 8007af8:	f854 1b04 	ldr.w	r1, [r4], #4
 8007afc:	fa1f fc81 	uxth.w	ip, r1
 8007b00:	44f4      	add	ip, lr
 8007b02:	0c08      	lsrs	r0, r1, #16
 8007b04:	4471      	add	r1, lr
 8007b06:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007b0a:	b289      	uxth	r1, r1
 8007b0c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007b10:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007b14:	f846 1b04 	str.w	r1, [r6], #4
 8007b18:	e7dc      	b.n	8007ad4 <__mdiff+0xd4>
 8007b1a:	3f01      	subs	r7, #1
 8007b1c:	e7e6      	b.n	8007aec <__mdiff+0xec>
 8007b1e:	bf00      	nop
 8007b20:	08008e7d 	.word	0x08008e7d
 8007b24:	08008e8e 	.word	0x08008e8e

08007b28 <__d2b>:
 8007b28:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007b2c:	2101      	movs	r1, #1
 8007b2e:	4690      	mov	r8, r2
 8007b30:	4699      	mov	r9, r3
 8007b32:	9e08      	ldr	r6, [sp, #32]
 8007b34:	f7ff fcd0 	bl	80074d8 <_Balloc>
 8007b38:	4604      	mov	r4, r0
 8007b3a:	b930      	cbnz	r0, 8007b4a <__d2b+0x22>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	f240 310f 	movw	r1, #783	@ 0x30f
 8007b42:	4b23      	ldr	r3, [pc, #140]	@ (8007bd0 <__d2b+0xa8>)
 8007b44:	4823      	ldr	r0, [pc, #140]	@ (8007bd4 <__d2b+0xac>)
 8007b46:	f7fd fc2b 	bl	80053a0 <__assert_func>
 8007b4a:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007b4e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007b52:	b10d      	cbz	r5, 8007b58 <__d2b+0x30>
 8007b54:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007b58:	9301      	str	r3, [sp, #4]
 8007b5a:	f1b8 0300 	subs.w	r3, r8, #0
 8007b5e:	d024      	beq.n	8007baa <__d2b+0x82>
 8007b60:	4668      	mov	r0, sp
 8007b62:	9300      	str	r3, [sp, #0]
 8007b64:	f7ff fd7f 	bl	8007666 <__lo0bits>
 8007b68:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007b6c:	b1d8      	cbz	r0, 8007ba6 <__d2b+0x7e>
 8007b6e:	f1c0 0320 	rsb	r3, r0, #32
 8007b72:	fa02 f303 	lsl.w	r3, r2, r3
 8007b76:	430b      	orrs	r3, r1
 8007b78:	40c2      	lsrs	r2, r0
 8007b7a:	6163      	str	r3, [r4, #20]
 8007b7c:	9201      	str	r2, [sp, #4]
 8007b7e:	9b01      	ldr	r3, [sp, #4]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	bf0c      	ite	eq
 8007b84:	2201      	moveq	r2, #1
 8007b86:	2202      	movne	r2, #2
 8007b88:	61a3      	str	r3, [r4, #24]
 8007b8a:	6122      	str	r2, [r4, #16]
 8007b8c:	b1ad      	cbz	r5, 8007bba <__d2b+0x92>
 8007b8e:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007b92:	4405      	add	r5, r0
 8007b94:	6035      	str	r5, [r6, #0]
 8007b96:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b9c:	6018      	str	r0, [r3, #0]
 8007b9e:	4620      	mov	r0, r4
 8007ba0:	b002      	add	sp, #8
 8007ba2:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8007ba6:	6161      	str	r1, [r4, #20]
 8007ba8:	e7e9      	b.n	8007b7e <__d2b+0x56>
 8007baa:	a801      	add	r0, sp, #4
 8007bac:	f7ff fd5b 	bl	8007666 <__lo0bits>
 8007bb0:	9b01      	ldr	r3, [sp, #4]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	6163      	str	r3, [r4, #20]
 8007bb6:	3020      	adds	r0, #32
 8007bb8:	e7e7      	b.n	8007b8a <__d2b+0x62>
 8007bba:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007bbe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007bc2:	6030      	str	r0, [r6, #0]
 8007bc4:	6918      	ldr	r0, [r3, #16]
 8007bc6:	f7ff fd2f 	bl	8007628 <__hi0bits>
 8007bca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007bce:	e7e4      	b.n	8007b9a <__d2b+0x72>
 8007bd0:	08008e7d 	.word	0x08008e7d
 8007bd4:	08008e8e 	.word	0x08008e8e

08007bd8 <__swhatbuf_r>:
 8007bd8:	b570      	push	{r4, r5, r6, lr}
 8007bda:	460c      	mov	r4, r1
 8007bdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007be0:	4615      	mov	r5, r2
 8007be2:	2900      	cmp	r1, #0
 8007be4:	461e      	mov	r6, r3
 8007be6:	b096      	sub	sp, #88	@ 0x58
 8007be8:	da0c      	bge.n	8007c04 <__swhatbuf_r+0x2c>
 8007bea:	89a3      	ldrh	r3, [r4, #12]
 8007bec:	2100      	movs	r1, #0
 8007bee:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bf2:	bf14      	ite	ne
 8007bf4:	2340      	movne	r3, #64	@ 0x40
 8007bf6:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bfa:	2000      	movs	r0, #0
 8007bfc:	6031      	str	r1, [r6, #0]
 8007bfe:	602b      	str	r3, [r5, #0]
 8007c00:	b016      	add	sp, #88	@ 0x58
 8007c02:	bd70      	pop	{r4, r5, r6, pc}
 8007c04:	466a      	mov	r2, sp
 8007c06:	f000 f849 	bl	8007c9c <_fstat_r>
 8007c0a:	2800      	cmp	r0, #0
 8007c0c:	dbed      	blt.n	8007bea <__swhatbuf_r+0x12>
 8007c0e:	9901      	ldr	r1, [sp, #4]
 8007c10:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007c14:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007c18:	4259      	negs	r1, r3
 8007c1a:	4159      	adcs	r1, r3
 8007c1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007c20:	e7eb      	b.n	8007bfa <__swhatbuf_r+0x22>

08007c22 <__smakebuf_r>:
 8007c22:	898b      	ldrh	r3, [r1, #12]
 8007c24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007c26:	079d      	lsls	r5, r3, #30
 8007c28:	4606      	mov	r6, r0
 8007c2a:	460c      	mov	r4, r1
 8007c2c:	d507      	bpl.n	8007c3e <__smakebuf_r+0x1c>
 8007c2e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c32:	6023      	str	r3, [r4, #0]
 8007c34:	6123      	str	r3, [r4, #16]
 8007c36:	2301      	movs	r3, #1
 8007c38:	6163      	str	r3, [r4, #20]
 8007c3a:	b003      	add	sp, #12
 8007c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c3e:	466a      	mov	r2, sp
 8007c40:	ab01      	add	r3, sp, #4
 8007c42:	f7ff ffc9 	bl	8007bd8 <__swhatbuf_r>
 8007c46:	9f00      	ldr	r7, [sp, #0]
 8007c48:	4605      	mov	r5, r0
 8007c4a:	4639      	mov	r1, r7
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f7fd fc13 	bl	8005478 <_malloc_r>
 8007c52:	b948      	cbnz	r0, 8007c68 <__smakebuf_r+0x46>
 8007c54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c58:	059a      	lsls	r2, r3, #22
 8007c5a:	d4ee      	bmi.n	8007c3a <__smakebuf_r+0x18>
 8007c5c:	f023 0303 	bic.w	r3, r3, #3
 8007c60:	f043 0302 	orr.w	r3, r3, #2
 8007c64:	81a3      	strh	r3, [r4, #12]
 8007c66:	e7e2      	b.n	8007c2e <__smakebuf_r+0xc>
 8007c68:	89a3      	ldrh	r3, [r4, #12]
 8007c6a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c72:	81a3      	strh	r3, [r4, #12]
 8007c74:	9b01      	ldr	r3, [sp, #4]
 8007c76:	6020      	str	r0, [r4, #0]
 8007c78:	b15b      	cbz	r3, 8007c92 <__smakebuf_r+0x70>
 8007c7a:	4630      	mov	r0, r6
 8007c7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c80:	f000 f81e 	bl	8007cc0 <_isatty_r>
 8007c84:	b128      	cbz	r0, 8007c92 <__smakebuf_r+0x70>
 8007c86:	89a3      	ldrh	r3, [r4, #12]
 8007c88:	f023 0303 	bic.w	r3, r3, #3
 8007c8c:	f043 0301 	orr.w	r3, r3, #1
 8007c90:	81a3      	strh	r3, [r4, #12]
 8007c92:	89a3      	ldrh	r3, [r4, #12]
 8007c94:	431d      	orrs	r5, r3
 8007c96:	81a5      	strh	r5, [r4, #12]
 8007c98:	e7cf      	b.n	8007c3a <__smakebuf_r+0x18>
	...

08007c9c <_fstat_r>:
 8007c9c:	b538      	push	{r3, r4, r5, lr}
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	4d06      	ldr	r5, [pc, #24]	@ (8007cbc <_fstat_r+0x20>)
 8007ca2:	4604      	mov	r4, r0
 8007ca4:	4608      	mov	r0, r1
 8007ca6:	4611      	mov	r1, r2
 8007ca8:	602b      	str	r3, [r5, #0]
 8007caa:	f7f9 fc9b 	bl	80015e4 <_fstat>
 8007cae:	1c43      	adds	r3, r0, #1
 8007cb0:	d102      	bne.n	8007cb8 <_fstat_r+0x1c>
 8007cb2:	682b      	ldr	r3, [r5, #0]
 8007cb4:	b103      	cbz	r3, 8007cb8 <_fstat_r+0x1c>
 8007cb6:	6023      	str	r3, [r4, #0]
 8007cb8:	bd38      	pop	{r3, r4, r5, pc}
 8007cba:	bf00      	nop
 8007cbc:	200004b0 	.word	0x200004b0

08007cc0 <_isatty_r>:
 8007cc0:	b538      	push	{r3, r4, r5, lr}
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	4d05      	ldr	r5, [pc, #20]	@ (8007cdc <_isatty_r+0x1c>)
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	602b      	str	r3, [r5, #0]
 8007ccc:	f7f9 fc8f 	bl	80015ee <_isatty>
 8007cd0:	1c43      	adds	r3, r0, #1
 8007cd2:	d102      	bne.n	8007cda <_isatty_r+0x1a>
 8007cd4:	682b      	ldr	r3, [r5, #0]
 8007cd6:	b103      	cbz	r3, 8007cda <_isatty_r+0x1a>
 8007cd8:	6023      	str	r3, [r4, #0]
 8007cda:	bd38      	pop	{r3, r4, r5, pc}
 8007cdc:	200004b0 	.word	0x200004b0

08007ce0 <__ascii_mbtowc>:
 8007ce0:	b082      	sub	sp, #8
 8007ce2:	b901      	cbnz	r1, 8007ce6 <__ascii_mbtowc+0x6>
 8007ce4:	a901      	add	r1, sp, #4
 8007ce6:	b142      	cbz	r2, 8007cfa <__ascii_mbtowc+0x1a>
 8007ce8:	b14b      	cbz	r3, 8007cfe <__ascii_mbtowc+0x1e>
 8007cea:	7813      	ldrb	r3, [r2, #0]
 8007cec:	600b      	str	r3, [r1, #0]
 8007cee:	7812      	ldrb	r2, [r2, #0]
 8007cf0:	1e10      	subs	r0, r2, #0
 8007cf2:	bf18      	it	ne
 8007cf4:	2001      	movne	r0, #1
 8007cf6:	b002      	add	sp, #8
 8007cf8:	4770      	bx	lr
 8007cfa:	4610      	mov	r0, r2
 8007cfc:	e7fb      	b.n	8007cf6 <__ascii_mbtowc+0x16>
 8007cfe:	f06f 0001 	mvn.w	r0, #1
 8007d02:	e7f8      	b.n	8007cf6 <__ascii_mbtowc+0x16>

08007d04 <__ascii_wctomb>:
 8007d04:	4603      	mov	r3, r0
 8007d06:	4608      	mov	r0, r1
 8007d08:	b141      	cbz	r1, 8007d1c <__ascii_wctomb+0x18>
 8007d0a:	2aff      	cmp	r2, #255	@ 0xff
 8007d0c:	d904      	bls.n	8007d18 <__ascii_wctomb+0x14>
 8007d0e:	228a      	movs	r2, #138	@ 0x8a
 8007d10:	f04f 30ff 	mov.w	r0, #4294967295
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	4770      	bx	lr
 8007d18:	2001      	movs	r0, #1
 8007d1a:	700a      	strb	r2, [r1, #0]
 8007d1c:	4770      	bx	lr
	...

08007d20 <_init>:
 8007d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d22:	bf00      	nop
 8007d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d26:	bc08      	pop	{r3}
 8007d28:	469e      	mov	lr, r3
 8007d2a:	4770      	bx	lr

08007d2c <_fini>:
 8007d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d2e:	bf00      	nop
 8007d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d32:	bc08      	pop	{r3}
 8007d34:	469e      	mov	lr, r3
 8007d36:	4770      	bx	lr
