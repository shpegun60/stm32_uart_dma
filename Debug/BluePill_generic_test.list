
BluePill_generic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac70  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  0800ad80  0800ad80  0000bd80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b34c  0800b34c  0000d1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800b34c  0800b34c  0000c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b354  0800b354  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800b35c  0800b35c  0000c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b364  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  0800b538  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800b538  0000d4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e2df  00000000  00000000  0000d1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006097  00000000  00000000  0002b4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00031578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eda  00000000  00000000  000328f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f84d  00000000  00000000  000337ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dff0  00000000  00000000  00053017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000991e0  00000000  00000000  00071007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a1e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000620c  00000000  00000000  0010a22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00110438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad68 	.word	0x0800ad68

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	0800ad68 	.word	0x0800ad68

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <__aeabi_f2uiz>:
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	d20e      	bcs.n	80010ca <__aeabi_f2uiz+0x22>
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b0:	d30b      	bcc.n	80010ca <__aeabi_f2uiz+0x22>
 80010b2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d409      	bmi.n	80010d0 <__aeabi_f2uiz+0x28>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2uiz+0x32>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d102      	bne.n	80010e0 <__aeabi_f2uiz+0x38>
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	4770      	bx	lr
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <MX_ADC1_Init+0x174>)
 80010fa:	4a59      	ldr	r2, [pc, #356]	@ (8001260 <MX_ADC1_Init+0x178>)
 80010fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fe:	4b57      	ldr	r3, [pc, #348]	@ (800125c <MX_ADC1_Init+0x174>)
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001106:	4b55      	ldr	r3, [pc, #340]	@ (800125c <MX_ADC1_Init+0x174>)
 8001108:	2201      	movs	r2, #1
 800110a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b53      	ldr	r3, [pc, #332]	@ (800125c <MX_ADC1_Init+0x174>)
 800110e:	2200      	movs	r2, #0
 8001110:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b52      	ldr	r3, [pc, #328]	@ (800125c <MX_ADC1_Init+0x174>)
 8001114:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001118:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b50      	ldr	r3, [pc, #320]	@ (800125c <MX_ADC1_Init+0x174>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8001120:	4b4e      	ldr	r3, [pc, #312]	@ (800125c <MX_ADC1_Init+0x174>)
 8001122:	220a      	movs	r2, #10
 8001124:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001126:	484d      	ldr	r0, [pc, #308]	@ (800125c <MX_ADC1_Init+0x174>)
 8001128:	f000 fce8 	bl	8001afc <HAL_ADC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001132:	f000 fa3e 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113a:	2301      	movs	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4845      	ldr	r0, [pc, #276]	@ (800125c <MX_ADC1_Init+0x174>)
 8001148:	f000 fea0 	bl	8001e8c <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 fa2e 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001156:	2301      	movs	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800115a:	2302      	movs	r3, #2
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	483e      	ldr	r0, [pc, #248]	@ (800125c <MX_ADC1_Init+0x174>)
 8001164:	f000 fe92 	bl	8001e8c <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800116e:	f000 fa20 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4837      	ldr	r0, [pc, #220]	@ (800125c <MX_ADC1_Init+0x174>)
 8001180:	f000 fe84 	bl	8001e8c <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800118a:	f000 fa12 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001192:	2304      	movs	r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4830      	ldr	r0, [pc, #192]	@ (800125c <MX_ADC1_Init+0x174>)
 800119c:	f000 fe76 	bl	8001e8c <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80011a6:	f000 fa04 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011ae:	2305      	movs	r3, #5
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4829      	ldr	r0, [pc, #164]	@ (800125c <MX_ADC1_Init+0x174>)
 80011b8:	f000 fe68 	bl	8001e8c <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011c2:	f000 f9f6 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011c6:	2305      	movs	r3, #5
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011ca:	2306      	movs	r3, #6
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4822      	ldr	r0, [pc, #136]	@ (800125c <MX_ADC1_Init+0x174>)
 80011d4:	f000 fe5a 	bl	8001e8c <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80011de:	f000 f9e8 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011e2:	2306      	movs	r3, #6
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	481b      	ldr	r0, [pc, #108]	@ (800125c <MX_ADC1_Init+0x174>)
 80011f0:	f000 fe4c 	bl	8001e8c <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80011fa:	f000 f9da 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011fe:	2307      	movs	r3, #7
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001202:	2308      	movs	r3, #8
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <MX_ADC1_Init+0x174>)
 800120c:	f000 fe3e 	bl	8001e8c <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001216:	f000 f9cc 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800121a:	2308      	movs	r3, #8
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800121e:	2309      	movs	r3, #9
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_ADC1_Init+0x174>)
 8001228:	f000 fe30 	bl	8001e8c <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001232:	f000 f9be 	bl	80015b2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001236:	2309      	movs	r3, #9
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800123a:	230a      	movs	r3, #10
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_ADC1_Init+0x174>)
 8001244:	f000 fe22 	bl	8001e8c <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800124e:	f000 f9b0 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f0 	.word	0x200001f0
 8001260:	40012400 	.word	0x40012400

08001264 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a33      	ldr	r2, [pc, #204]	@ (800134c <HAL_ADC_MspInit+0xe8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d15f      	bne.n	8001344 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001284:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a31      	ldr	r2, [pc, #196]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a25      	ldr	r2, [pc, #148]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012cc:	23ff      	movs	r3, #255	@ 0xff
 80012ce:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4619      	mov	r1, r3
 80012da:	481e      	ldr	r0, [pc, #120]	@ (8001354 <HAL_ADC_MspInit+0xf0>)
 80012dc:	f001 fb8a 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4619      	mov	r1, r3
 80012ee:	481a      	ldr	r0, [pc, #104]	@ (8001358 <HAL_ADC_MspInit+0xf4>)
 80012f0:	f001 fb80 	bl	80029f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 80012f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001360 <HAL_ADC_MspInit+0xfc>)
 80012f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800130e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001312:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001316:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800131e:	2220      	movs	r2, #32
 8001320:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800132a:	f001 f8b7 	bl	800249c <HAL_DMA_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001334:	f000 f93d 	bl	80015b2 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40012400 	.word	0x40012400
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	20000220 	.word	0x20000220
 8001360:	40020008 	.word	0x40020008

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_DMA_Init+0x58>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_DMA_Init+0x58>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_DMA_Init+0x58>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	200b      	movs	r0, #11
 8001388:	f001 f851 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800138c:	200b      	movs	r0, #11
 800138e:	f001 f86a 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	200e      	movs	r0, #14
 8001398:	f001 f849 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800139c:	200e      	movs	r0, #14
 800139e:	f001 f862 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	200f      	movs	r0, #15
 80013a8:	f001 f841 	bl	800242e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013ac:	200f      	movs	r0, #15
 80013ae:	f001 f85a 	bl	8002466 <HAL_NVIC_EnableIRQ>

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	4b3b      	ldr	r3, [pc, #236]	@ (80014c4 <MX_GPIO_Init+0x104>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a3a      	ldr	r2, [pc, #232]	@ (80014c4 <MX_GPIO_Init+0x104>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b38      	ldr	r3, [pc, #224]	@ (80014c4 <MX_GPIO_Init+0x104>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ec:	4b35      	ldr	r3, [pc, #212]	@ (80014c4 <MX_GPIO_Init+0x104>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a34      	ldr	r2, [pc, #208]	@ (80014c4 <MX_GPIO_Init+0x104>)
 80013f2:	f043 0320 	orr.w	r3, r3, #32
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b32      	ldr	r3, [pc, #200]	@ (80014c4 <MX_GPIO_Init+0x104>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b2f      	ldr	r3, [pc, #188]	@ (80014c4 <MX_GPIO_Init+0x104>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a2e      	ldr	r2, [pc, #184]	@ (80014c4 <MX_GPIO_Init+0x104>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b2c      	ldr	r3, [pc, #176]	@ (80014c4 <MX_GPIO_Init+0x104>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b29      	ldr	r3, [pc, #164]	@ (80014c4 <MX_GPIO_Init+0x104>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a28      	ldr	r2, [pc, #160]	@ (80014c4 <MX_GPIO_Init+0x104>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b26      	ldr	r3, [pc, #152]	@ (80014c4 <MX_GPIO_Init+0x104>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800143a:	4823      	ldr	r0, [pc, #140]	@ (80014c8 <MX_GPIO_Init+0x108>)
 800143c:	f001 fc75 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O_DIAG_EN_Pin|O_LATCH_Pin|O_EN_Pin, GPIO_PIN_RESET);
 8001440:	2200      	movs	r2, #0
 8001442:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 8001446:	4821      	ldr	r0, [pc, #132]	@ (80014cc <MX_GPIO_Init+0x10c>)
 8001448:	f001 fc6f 	bl	8002d2a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 800144c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001450:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001452:	2301      	movs	r3, #1
 8001454:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145a:	2302      	movs	r3, #2
 800145c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800145e:	f107 0310 	add.w	r3, r7, #16
 8001462:	4619      	mov	r1, r3
 8001464:	4818      	ldr	r0, [pc, #96]	@ (80014c8 <MX_GPIO_Init+0x108>)
 8001466:	f001 fac5 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ggggggg_Pin|hhhhhhhh_Pin;
 800146a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800146e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001470:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <MX_GPIO_Init+0x110>)
 8001472:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001478:	f107 0310 	add.w	r3, r7, #16
 800147c:	4619      	mov	r1, r3
 800147e:	4813      	ldr	r0, [pc, #76]	@ (80014cc <MX_GPIO_Init+0x10c>)
 8001480:	f001 fab8 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O_DIAG_EN_Pin|O_LATCH_Pin|O_EN_Pin;
 8001484:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800148a:	2301      	movs	r3, #1
 800148c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001492:	2302      	movs	r3, #2
 8001494:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001496:	f107 0310 	add.w	r3, r7, #16
 800149a:	4619      	mov	r1, r3
 800149c:	480b      	ldr	r0, [pc, #44]	@ (80014cc <MX_GPIO_Init+0x10c>)
 800149e:	f001 faa9 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_FAULT_Pin;
 80014a2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80014a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ac:	2300      	movs	r3, #0
 80014ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(I_FAULT_GPIO_Port, &GPIO_InitStruct);
 80014b0:	f107 0310 	add.w	r3, r7, #16
 80014b4:	4619      	mov	r1, r3
 80014b6:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_GPIO_Init+0x10c>)
 80014b8:	f001 fa9c 	bl	80029f4 <HAL_GPIO_Init>

}
 80014bc:	bf00      	nop
 80014be:	3720      	adds	r7, #32
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40011000 	.word	0x40011000
 80014cc:	40010c00 	.word	0x40010c00
 80014d0:	10110000 	.word	0x10110000

080014d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d8:	f000 faae 	bl	8001a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014dc:	f000 f80c 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014e0:	f7ff ff6e 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014e4:	f7ff ff3e 	bl	8001364 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014e8:	f000 f9ac 	bl	8001844 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014ec:	f7ff fdfc 	bl	80010e8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80014f0:	f004 f946 	bl	8005780 <app_main>
  while (1)
 80014f4:	bf00      	nop
 80014f6:	e7fd      	b.n	80014f4 <main+0x20>

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	@ 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001502:	2228      	movs	r2, #40	@ 0x28
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f008 f880 	bl	800960c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 0314 	add.w	r3, r7, #20
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	605a      	str	r2, [r3, #4]
 8001524:	609a      	str	r2, [r3, #8]
 8001526:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001528:	2301      	movs	r3, #1
 800152a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800152c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001530:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001532:	2300      	movs	r3, #0
 8001534:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001536:	2301      	movs	r3, #1
 8001538:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800153a:	2302      	movs	r3, #2
 800153c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800153e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001542:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001544:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001548:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800154a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800154e:	4618      	mov	r0, r3
 8001550:	f001 fc1c 	bl	8002d8c <HAL_RCC_OscConfig>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800155a:	f000 f82a 	bl	80015b2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800155e:	230f      	movs	r3, #15
 8001560:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001562:	2302      	movs	r3, #2
 8001564:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001566:	2300      	movs	r3, #0
 8001568:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800156a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800156e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001574:	f107 0314 	add.w	r3, r7, #20
 8001578:	2102      	movs	r1, #2
 800157a:	4618      	mov	r0, r3
 800157c:	f001 fe88 	bl	8003290 <HAL_RCC_ClockConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001586:	f000 f814 	bl	80015b2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800158a:	2302      	movs	r3, #2
 800158c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800158e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001592:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	4618      	mov	r0, r3
 8001598:	f002 f82e 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80015a2:	f000 f806 	bl	80015b2 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80015a6:	f001 ff5d 	bl	8003464 <HAL_RCC_EnableCSS>
}
 80015aa:	bf00      	nop
 80015ac:	3750      	adds	r7, #80	@ 0x50
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}

080015b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b2:	b480      	push	{r7}
 80015b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b6:	b672      	cpsid	i
}
 80015b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ba:	bf00      	nop
 80015bc:	e7fd      	b.n	80015ba <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80015c6:	4b15      	ldr	r3, [pc, #84]	@ (800161c <HAL_MspInit+0x5c>)
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	4a14      	ldr	r2, [pc, #80]	@ (800161c <HAL_MspInit+0x5c>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6193      	str	r3, [r2, #24]
 80015d2:	4b12      	ldr	r3, [pc, #72]	@ (800161c <HAL_MspInit+0x5c>)
 80015d4:	699b      	ldr	r3, [r3, #24]
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015de:	4b0f      	ldr	r3, [pc, #60]	@ (800161c <HAL_MspInit+0x5c>)
 80015e0:	69db      	ldr	r3, [r3, #28]
 80015e2:	4a0e      	ldr	r2, [pc, #56]	@ (800161c <HAL_MspInit+0x5c>)
 80015e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015e8:	61d3      	str	r3, [r2, #28]
 80015ea:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <HAL_MspInit+0x5c>)
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015f6:	4b0a      	ldr	r3, [pc, #40]	@ (8001620 <HAL_MspInit+0x60>)
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800160a:	60fb      	str	r3, [r7, #12]
 800160c:	4a04      	ldr	r2, [pc, #16]	@ (8001620 <HAL_MspInit+0x60>)
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	3714      	adds	r7, #20
 8001616:	46bd      	mov	sp, r7
 8001618:	bc80      	pop	{r7}
 800161a:	4770      	bx	lr
 800161c:	40021000 	.word	0x40021000
 8001620:	40010000 	.word	0x40010000

08001624 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001628:	f001 ffae 	bl	8003588 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800162c:	bf00      	nop
 800162e:	e7fd      	b.n	800162c <NMI_Handler+0x8>

08001630 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001630:	b480      	push	{r7}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <HardFault_Handler+0x4>

08001638 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001638:	b480      	push	{r7}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800163c:	bf00      	nop
 800163e:	e7fd      	b.n	800163c <MemManage_Handler+0x4>

08001640 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <BusFault_Handler+0x4>

08001648 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <UsageFault_Handler+0x4>

08001650 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	bc80      	pop	{r7}
 800165a:	4770      	bx	lr

0800165c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	bc80      	pop	{r7}
 8001666:	4770      	bx	lr

08001668 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	bc80      	pop	{r7}
 8001672:	4770      	bx	lr

08001674 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001678:	f000 fa24 	bl	8001ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 800167c:	f005 fd4a 	bl	8007114 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	bf00      	nop
 8001682:	bd80      	pop	{r7, pc}

08001684 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001688:	4802      	ldr	r0, [pc, #8]	@ (8001694 <DMA1_Channel1_IRQHandler+0x10>)
 800168a:	f001 f875 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800168e:	bf00      	nop
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	20000220 	.word	0x20000220

08001698 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800169c:	4802      	ldr	r0, [pc, #8]	@ (80016a8 <DMA1_Channel4_IRQHandler+0x10>)
 800169e:	f001 f86b 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	200002f4 	.word	0x200002f4

080016ac <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80016b0:	4802      	ldr	r0, [pc, #8]	@ (80016bc <DMA1_Channel5_IRQHandler+0x10>)
 80016b2:	f001 f861 	bl	8002778 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	200002b0 	.word	0x200002b0

080016c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016c6:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <USART1_IRQHandler+0x28>)
 80016c8:	f002 fa58 	bl	8003b7c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(&huart1);
 80016cc:	4806      	ldr	r0, [pc, #24]	@ (80016e8 <USART1_IRQHandler+0x28>)
 80016ce:	f006 fcc7 	bl	8008060 <getContainerUartInstance>
 80016d2:	6078      	str	r0, [r7, #4]
  if(uart_instance) {
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d002      	beq.n	80016e0 <USART1_IRQHandler+0x20>
	  USER_UART_IRQHandler(uart_instance);
 80016da:	6878      	ldr	r0, [r7, #4]
 80016dc:	f006 fb97 	bl	8007e0e <USER_UART_IRQHandler>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 80016e0:	bf00      	nop
 80016e2:	3708      	adds	r7, #8
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20000268 	.word	0x20000268

080016ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return 1;
 80016f0:	2301      	movs	r3, #1
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr

080016fa <_kill>:

int _kill(int pid, int sig)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	b082      	sub	sp, #8
 80016fe:	af00      	add	r7, sp, #0
 8001700:	6078      	str	r0, [r7, #4]
 8001702:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001704:	f008 f828 	bl	8009758 <__errno>
 8001708:	4603      	mov	r3, r0
 800170a:	2216      	movs	r2, #22
 800170c:	601a      	str	r2, [r3, #0]
  return -1;
 800170e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001712:	4618      	mov	r0, r3
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <_exit>:

void _exit (int status)
{
 800171a:	b580      	push	{r7, lr}
 800171c:	b082      	sub	sp, #8
 800171e:	af00      	add	r7, sp, #0
 8001720:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001722:	f04f 31ff 	mov.w	r1, #4294967295
 8001726:	6878      	ldr	r0, [r7, #4]
 8001728:	f7ff ffe7 	bl	80016fa <_kill>
  while (1) {}    /* Make sure we hang here */
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <_exit+0x12>

08001730 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
 8001740:	e00a      	b.n	8001758 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001742:	f3af 8000 	nop.w
 8001746:	4601      	mov	r1, r0
 8001748:	68bb      	ldr	r3, [r7, #8]
 800174a:	1c5a      	adds	r2, r3, #1
 800174c:	60ba      	str	r2, [r7, #8]
 800174e:	b2ca      	uxtb	r2, r1
 8001750:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001752:	697b      	ldr	r3, [r7, #20]
 8001754:	3301      	adds	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	697a      	ldr	r2, [r7, #20]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	429a      	cmp	r2, r3
 800175e:	dbf0      	blt.n	8001742 <_read+0x12>
  }

  return len;
 8001760:	687b      	ldr	r3, [r7, #4]
}
 8001762:	4618      	mov	r0, r3
 8001764:	3718      	adds	r7, #24
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}

0800176a <_close>:
  }
  return len;
}

int _close(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001776:	4618      	mov	r0, r3
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001790:	605a      	str	r2, [r3, #4]
  return 0;
 8001792:	2300      	movs	r3, #0
}
 8001794:	4618      	mov	r0, r3
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	bc80      	pop	{r7}
 800179c:	4770      	bx	lr

0800179e <_isatty>:

int _isatty(int file)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bc80      	pop	{r7}
 80017b0:	4770      	bx	lr

080017b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b085      	sub	sp, #20
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr
	...

080017cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017d4:	4a14      	ldr	r2, [pc, #80]	@ (8001828 <_sbrk+0x5c>)
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <_sbrk+0x60>)
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017e0:	4b13      	ldr	r3, [pc, #76]	@ (8001830 <_sbrk+0x64>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d102      	bne.n	80017ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <_sbrk+0x64>)
 80017ea:	4a12      	ldr	r2, [pc, #72]	@ (8001834 <_sbrk+0x68>)
 80017ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ee:	4b10      	ldr	r3, [pc, #64]	@ (8001830 <_sbrk+0x64>)
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d207      	bcs.n	800180c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017fc:	f007 ffac 	bl	8009758 <__errno>
 8001800:	4603      	mov	r3, r0
 8001802:	220c      	movs	r2, #12
 8001804:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	e009      	b.n	8001820 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800180c:	4b08      	ldr	r3, [pc, #32]	@ (8001830 <_sbrk+0x64>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001812:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <_sbrk+0x64>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4413      	add	r3, r2
 800181a:	4a05      	ldr	r2, [pc, #20]	@ (8001830 <_sbrk+0x64>)
 800181c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800181e:	68fb      	ldr	r3, [r7, #12]
}
 8001820:	4618      	mov	r0, r3
 8001822:	3718      	adds	r7, #24
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	20005000 	.word	0x20005000
 800182c:	00000400 	.word	0x00000400
 8001830:	20000264 	.word	0x20000264
 8001834:	200004b8 	.word	0x200004b8

08001838 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800183c:	bf00      	nop
 800183e:	46bd      	mov	sp, r7
 8001840:	bc80      	pop	{r7}
 8001842:	4770      	bx	lr

08001844 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001848:	4b11      	ldr	r3, [pc, #68]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800184a:	4a12      	ldr	r2, [pc, #72]	@ (8001894 <MX_USART1_UART_Init+0x50>)
 800184c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800184e:	4b10      	ldr	r3, [pc, #64]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001850:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001854:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001856:	4b0e      	ldr	r3, [pc, #56]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001858:	2200      	movs	r2, #0
 800185a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800185c:	4b0c      	ldr	r3, [pc, #48]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800185e:	2200      	movs	r2, #0
 8001860:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001868:	4b09      	ldr	r3, [pc, #36]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800186a:	220c      	movs	r2, #12
 800186c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800186e:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001874:	4b06      	ldr	r3, [pc, #24]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 8001876:	2200      	movs	r2, #0
 8001878:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800187a:	4805      	ldr	r0, [pc, #20]	@ (8001890 <MX_USART1_UART_Init+0x4c>)
 800187c:	f001 ff72 	bl	8003764 <HAL_UART_Init>
 8001880:	4603      	mov	r3, r0
 8001882:	2b00      	cmp	r3, #0
 8001884:	d001      	beq.n	800188a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001886:	f7ff fe94 	bl	80015b2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000268 	.word	0x20000268
 8001894:	40013800 	.word	0x40013800

08001898 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b088      	sub	sp, #32
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a0:	f107 0310 	add.w	r3, r7, #16
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a47      	ldr	r2, [pc, #284]	@ (80019d0 <HAL_UART_MspInit+0x138>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	f040 8086 	bne.w	80019c6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018ba:	4b46      	ldr	r3, [pc, #280]	@ (80019d4 <HAL_UART_MspInit+0x13c>)
 80018bc:	699b      	ldr	r3, [r3, #24]
 80018be:	4a45      	ldr	r2, [pc, #276]	@ (80019d4 <HAL_UART_MspInit+0x13c>)
 80018c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018c4:	6193      	str	r3, [r2, #24]
 80018c6:	4b43      	ldr	r3, [pc, #268]	@ (80019d4 <HAL_UART_MspInit+0x13c>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d2:	4b40      	ldr	r3, [pc, #256]	@ (80019d4 <HAL_UART_MspInit+0x13c>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a3f      	ldr	r2, [pc, #252]	@ (80019d4 <HAL_UART_MspInit+0x13c>)
 80018d8:	f043 0304 	orr.w	r3, r3, #4
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	4b3d      	ldr	r3, [pc, #244]	@ (80019d4 <HAL_UART_MspInit+0x13c>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0304 	and.w	r3, r3, #4
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f0:	2302      	movs	r3, #2
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f4:	2303      	movs	r3, #3
 80018f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f8:	f107 0310 	add.w	r3, r7, #16
 80018fc:	4619      	mov	r1, r3
 80018fe:	4836      	ldr	r0, [pc, #216]	@ (80019d8 <HAL_UART_MspInit+0x140>)
 8001900:	f001 f878 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001904:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001908:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0310 	add.w	r3, r7, #16
 8001916:	4619      	mov	r1, r3
 8001918:	482f      	ldr	r0, [pc, #188]	@ (80019d8 <HAL_UART_MspInit+0x140>)
 800191a:	f001 f86b 	bl	80029f4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800191e:	4b2f      	ldr	r3, [pc, #188]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001920:	4a2f      	ldr	r2, [pc, #188]	@ (80019e0 <HAL_UART_MspInit+0x148>)
 8001922:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001924:	4b2d      	ldr	r3, [pc, #180]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001926:	2200      	movs	r2, #0
 8001928:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800192a:	4b2c      	ldr	r3, [pc, #176]	@ (80019dc <HAL_UART_MspInit+0x144>)
 800192c:	2200      	movs	r2, #0
 800192e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001932:	2280      	movs	r2, #128	@ 0x80
 8001934:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001936:	4b29      	ldr	r3, [pc, #164]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001938:	2200      	movs	r2, #0
 800193a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800193c:	4b27      	ldr	r3, [pc, #156]	@ (80019dc <HAL_UART_MspInit+0x144>)
 800193e:	2200      	movs	r2, #0
 8001940:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001942:	4b26      	ldr	r3, [pc, #152]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001944:	2200      	movs	r2, #0
 8001946:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001948:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_UART_MspInit+0x144>)
 800194a:	2200      	movs	r2, #0
 800194c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800194e:	4823      	ldr	r0, [pc, #140]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001950:	f000 fda4 	bl	800249c <HAL_DMA_Init>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800195a:	f7ff fe2a 	bl	80015b2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a1e      	ldr	r2, [pc, #120]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001962:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001964:	4a1d      	ldr	r2, [pc, #116]	@ (80019dc <HAL_UART_MspInit+0x144>)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800196a:	4b1e      	ldr	r3, [pc, #120]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 800196c:	4a1e      	ldr	r2, [pc, #120]	@ (80019e8 <HAL_UART_MspInit+0x150>)
 800196e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001970:	4b1c      	ldr	r3, [pc, #112]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 8001972:	2210      	movs	r2, #16
 8001974:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001976:	4b1b      	ldr	r3, [pc, #108]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800197c:	4b19      	ldr	r3, [pc, #100]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 800197e:	2280      	movs	r2, #128	@ 0x80
 8001980:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001982:	4b18      	ldr	r3, [pc, #96]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001988:	4b16      	ldr	r3, [pc, #88]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 800198a:	2200      	movs	r2, #0
 800198c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800198e:	4b15      	ldr	r3, [pc, #84]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 8001990:	2200      	movs	r2, #0
 8001992:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001994:	4b13      	ldr	r3, [pc, #76]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 8001996:	2200      	movs	r2, #0
 8001998:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800199a:	4812      	ldr	r0, [pc, #72]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 800199c:	f000 fd7e 	bl	800249c <HAL_DMA_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80019a6:	f7ff fe04 	bl	80015b2 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a0d      	ldr	r2, [pc, #52]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 80019ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80019b0:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <HAL_UART_MspInit+0x14c>)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	2025      	movs	r0, #37	@ 0x25
 80019bc:	f000 fd37 	bl	800242e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019c0:	2025      	movs	r0, #37	@ 0x25
 80019c2:	f000 fd50 	bl	8002466 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3720      	adds	r7, #32
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013800 	.word	0x40013800
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40010800 	.word	0x40010800
 80019dc:	200002b0 	.word	0x200002b0
 80019e0:	40020058 	.word	0x40020058
 80019e4:	200002f4 	.word	0x200002f4
 80019e8:	40020044 	.word	0x40020044

080019ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ec:	f7ff ff24 	bl	8001838 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019f0:	480b      	ldr	r0, [pc, #44]	@ (8001a20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019f2:	490c      	ldr	r1, [pc, #48]	@ (8001a24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f4:	4a0c      	ldr	r2, [pc, #48]	@ (8001a28 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f8:	e002      	b.n	8001a00 <LoopCopyDataInit>

080019fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fe:	3304      	adds	r3, #4

08001a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a04:	d3f9      	bcc.n	80019fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a06:	4a09      	ldr	r2, [pc, #36]	@ (8001a2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a08:	4c09      	ldr	r4, [pc, #36]	@ (8001a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a0c:	e001      	b.n	8001a12 <LoopFillZerobss>

08001a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a10:	3204      	adds	r2, #4

08001a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a14:	d3fb      	bcc.n	8001a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a16:	f007 fea5 	bl	8009764 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a1a:	f7ff fd5b 	bl	80014d4 <main>
  bx lr
 8001a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8001a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a24:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001a28:	0800b364 	.word	0x0800b364
  ldr r2, =_sbss
 8001a2c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001a30:	200004b8 	.word	0x200004b8

08001a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a34:	e7fe      	b.n	8001a34 <ADC1_2_IRQHandler>
	...

08001a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a3c:	4b08      	ldr	r3, [pc, #32]	@ (8001a60 <HAL_Init+0x28>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a07      	ldr	r2, [pc, #28]	@ (8001a60 <HAL_Init+0x28>)
 8001a42:	f043 0310 	orr.w	r3, r3, #16
 8001a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a48:	2003      	movs	r0, #3
 8001a4a:	f000 fce5 	bl	8002418 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4e:	200f      	movs	r0, #15
 8001a50:	f000 f808 	bl	8001a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a54:	f7ff fdb4 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	40022000 	.word	0x40022000

08001a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a6c:	4b12      	ldr	r3, [pc, #72]	@ (8001ab8 <HAL_InitTick+0x54>)
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b12      	ldr	r3, [pc, #72]	@ (8001abc <HAL_InitTick+0x58>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	4619      	mov	r1, r3
 8001a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a82:	4618      	mov	r0, r3
 8001a84:	f000 fcfd 	bl	8002482 <HAL_SYSTICK_Config>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	e00e      	b.n	8001ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2b0f      	cmp	r3, #15
 8001a96:	d80a      	bhi.n	8001aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a98:	2200      	movs	r2, #0
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	f04f 30ff 	mov.w	r0, #4294967295
 8001aa0:	f000 fcc5 	bl	800242e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa4:	4a06      	ldr	r2, [pc, #24]	@ (8001ac0 <HAL_InitTick+0x5c>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
 8001aac:	e000      	b.n	8001ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	20000008 	.word	0x20000008
 8001ac0:	20000004 	.word	0x20000004

08001ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac8:	4b05      	ldr	r3, [pc, #20]	@ (8001ae0 <HAL_IncTick+0x1c>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	461a      	mov	r2, r3
 8001ace:	4b05      	ldr	r3, [pc, #20]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4413      	add	r3, r2
 8001ad4:	4a03      	ldr	r2, [pc, #12]	@ (8001ae4 <HAL_IncTick+0x20>)
 8001ad6:	6013      	str	r3, [r2, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	20000008 	.word	0x20000008
 8001ae4:	20000338 	.word	0x20000338

08001ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	af00      	add	r7, sp, #0
  return uwTick;
 8001aec:	4b02      	ldr	r3, [pc, #8]	@ (8001af8 <HAL_GetTick+0x10>)
 8001aee:	681b      	ldr	r3, [r3, #0]
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bc80      	pop	{r7}
 8001af6:	4770      	bx	lr
 8001af8:	20000338 	.word	0x20000338

08001afc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001b04:	2300      	movs	r3, #0
 8001b06:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e0be      	b.n	8001c9c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d109      	bne.n	8001b40 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7ff fb92 	bl	8001264 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 faf5 	bl	8002130 <ADC_ConversionStop_Disable>
 8001b46:	4603      	mov	r3, r0
 8001b48:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f040 8099 	bne.w	8001c8a <HAL_ADC_Init+0x18e>
 8001b58:	7dfb      	ldrb	r3, [r7, #23]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f040 8095 	bne.w	8001c8a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b64:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b68:	f023 0302 	bic.w	r3, r3, #2
 8001b6c:	f043 0202 	orr.w	r2, r3, #2
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b7c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	7b1b      	ldrb	r3, [r3, #12]
 8001b82:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b84:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b86:	68ba      	ldr	r2, [r7, #8]
 8001b88:	4313      	orrs	r3, r2
 8001b8a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b94:	d003      	beq.n	8001b9e <HAL_ADC_Init+0xa2>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d102      	bne.n	8001ba4 <HAL_ADC_Init+0xa8>
 8001b9e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ba2:	e000      	b.n	8001ba6 <HAL_ADC_Init+0xaa>
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	7d1b      	ldrb	r3, [r3, #20]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d119      	bne.n	8001be8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	7b1b      	ldrb	r3, [r3, #12]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d109      	bne.n	8001bd0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	035a      	lsls	r2, r3, #13
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001bcc:	613b      	str	r3, [r7, #16]
 8001bce:	e00b      	b.n	8001be8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd4:	f043 0220 	orr.w	r2, r3, #32
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001be0:	f043 0201 	orr.w	r2, r3, #1
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b28      	ldr	r3, [pc, #160]	@ (8001ca4 <HAL_ADC_Init+0x1a8>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6812      	ldr	r2, [r2, #0]
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	430b      	orrs	r3, r1
 8001c0e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c18:	d003      	beq.n	8001c22 <HAL_ADC_Init+0x126>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d104      	bne.n	8001c2c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	3b01      	subs	r3, #1
 8001c28:	051b      	lsls	r3, r3, #20
 8001c2a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c32:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	68fa      	ldr	r2, [r7, #12]
 8001c3c:	430a      	orrs	r2, r1
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	689a      	ldr	r2, [r3, #8]
 8001c46:	4b18      	ldr	r3, [pc, #96]	@ (8001ca8 <HAL_ADC_Init+0x1ac>)
 8001c48:	4013      	ands	r3, r2
 8001c4a:	68ba      	ldr	r2, [r7, #8]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10b      	bne.n	8001c68 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2200      	movs	r2, #0
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5a:	f023 0303 	bic.w	r3, r3, #3
 8001c5e:	f043 0201 	orr.w	r2, r3, #1
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c66:	e018      	b.n	8001c9a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6c:	f023 0312 	bic.w	r3, r3, #18
 8001c70:	f043 0210 	orr.w	r2, r3, #16
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c7c:	f043 0201 	orr.w	r2, r3, #1
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c88:	e007      	b.n	8001c9a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c8e:	f043 0210 	orr.w	r2, r3, #16
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	3718      	adds	r7, #24
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	ffe1f7fd 	.word	0xffe1f7fd
 8001ca8:	ff1f0efe 	.word	0xff1f0efe

08001cac <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b086      	sub	sp, #24
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a64      	ldr	r2, [pc, #400]	@ (8001e54 <HAL_ADC_Start_DMA+0x1a8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d004      	beq.n	8001cd0 <HAL_ADC_Start_DMA+0x24>
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a63      	ldr	r2, [pc, #396]	@ (8001e58 <HAL_ADC_Start_DMA+0x1ac>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d106      	bne.n	8001cde <HAL_ADC_Start_DMA+0x32>
 8001cd0:	4b60      	ldr	r3, [pc, #384]	@ (8001e54 <HAL_ADC_Start_DMA+0x1a8>)
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	f040 80b3 	bne.w	8001e44 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ce4:	2b01      	cmp	r3, #1
 8001ce6:	d101      	bne.n	8001cec <HAL_ADC_Start_DMA+0x40>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0ae      	b.n	8001e4a <HAL_ADC_Start_DMA+0x19e>
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cf4:	68f8      	ldr	r0, [r7, #12]
 8001cf6:	f000 f9c1 	bl	800207c <ADC_Enable>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	f040 809a 	bne.w	8001e3a <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001d0e:	f023 0301 	bic.w	r3, r3, #1
 8001d12:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e58 <HAL_ADC_Start_DMA+0x1ac>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d105      	bne.n	8001d30 <HAL_ADC_Start_DMA+0x84>
 8001d24:	4b4b      	ldr	r3, [pc, #300]	@ (8001e54 <HAL_ADC_Start_DMA+0x1a8>)
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d115      	bne.n	8001d5c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d34:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d026      	beq.n	8001d98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d5a:	e01d      	b.n	8001d98 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d60:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a39      	ldr	r2, [pc, #228]	@ (8001e54 <HAL_ADC_Start_DMA+0x1a8>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d004      	beq.n	8001d7c <HAL_ADC_Start_DMA+0xd0>
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4a38      	ldr	r2, [pc, #224]	@ (8001e58 <HAL_ADC_Start_DMA+0x1ac>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d10d      	bne.n	8001d98 <HAL_ADC_Start_DMA+0xec>
 8001d7c:	4b35      	ldr	r3, [pc, #212]	@ (8001e54 <HAL_ADC_Start_DMA+0x1a8>)
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d007      	beq.n	8001d98 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d8c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d90:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d9c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d006      	beq.n	8001db2 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da8:	f023 0206 	bic.w	r2, r3, #6
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001db0:	e002      	b.n	8001db8 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2200      	movs	r2, #0
 8001db6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	6a1b      	ldr	r3, [r3, #32]
 8001dc4:	4a25      	ldr	r2, [pc, #148]	@ (8001e5c <HAL_ADC_Start_DMA+0x1b0>)
 8001dc6:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4a24      	ldr	r2, [pc, #144]	@ (8001e60 <HAL_ADC_Start_DMA+0x1b4>)
 8001dce:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a23      	ldr	r2, [pc, #140]	@ (8001e64 <HAL_ADC_Start_DMA+0x1b8>)
 8001dd6:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f06f 0202 	mvn.w	r2, #2
 8001de0:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001df0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	6a18      	ldr	r0, [r3, #32]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	334c      	adds	r3, #76	@ 0x4c
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	68ba      	ldr	r2, [r7, #8]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	f000 fba5 	bl	8002550 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001e10:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001e14:	d108      	bne.n	8001e28 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	689a      	ldr	r2, [r3, #8]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001e24:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e26:	e00f      	b.n	8001e48 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001e36:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001e38:	e006      	b.n	8001e48 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001e42:	e001      	b.n	8001e48 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40012400 	.word	0x40012400
 8001e58:	40012800 	.word	0x40012800
 8001e5c:	080021b3 	.word	0x080021b3
 8001e60:	0800222f 	.word	0x0800222f
 8001e64:	0800224b 	.word	0x0800224b

08001e68 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	b083      	sub	sp, #12
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e70:	bf00      	nop
 8001e72:	370c      	adds	r7, #12
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bc80      	pop	{r7}
 8001e78:	4770      	bx	lr

08001e7a <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e7a:	b480      	push	{r7}
 8001e7c:	b083      	sub	sp, #12
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e82:	bf00      	nop
 8001e84:	370c      	adds	r7, #12
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bc80      	pop	{r7}
 8001e8a:	4770      	bx	lr

08001e8c <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e8c:	b480      	push	{r7}
 8001e8e:	b085      	sub	sp, #20
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d101      	bne.n	8001eac <HAL_ADC_ConfigChannel+0x20>
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	e0dc      	b.n	8002066 <HAL_ADC_ConfigChannel+0x1da>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d81c      	bhi.n	8001ef6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	3b05      	subs	r3, #5
 8001ece:	221f      	movs	r2, #31
 8001ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed4:	43db      	mvns	r3, r3
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	683b      	ldr	r3, [r7, #0]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	4413      	add	r3, r2
 8001ee6:	3b05      	subs	r3, #5
 8001ee8:	fa00 f203 	lsl.w	r2, r0, r3
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ef4:	e03c      	b.n	8001f70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d81c      	bhi.n	8001f38 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685a      	ldr	r2, [r3, #4]
 8001f08:	4613      	mov	r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	3b23      	subs	r3, #35	@ 0x23
 8001f10:	221f      	movs	r2, #31
 8001f12:	fa02 f303 	lsl.w	r3, r2, r3
 8001f16:	43db      	mvns	r3, r3
 8001f18:	4019      	ands	r1, r3
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	6818      	ldr	r0, [r3, #0]
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	4613      	mov	r3, r2
 8001f24:	009b      	lsls	r3, r3, #2
 8001f26:	4413      	add	r3, r2
 8001f28:	3b23      	subs	r3, #35	@ 0x23
 8001f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	430a      	orrs	r2, r1
 8001f34:	631a      	str	r2, [r3, #48]	@ 0x30
 8001f36:	e01b      	b.n	8001f70 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685a      	ldr	r2, [r3, #4]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	3b41      	subs	r3, #65	@ 0x41
 8001f4a:	221f      	movs	r2, #31
 8001f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f50:	43db      	mvns	r3, r3
 8001f52:	4019      	ands	r1, r3
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685a      	ldr	r2, [r3, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	009b      	lsls	r3, r3, #2
 8001f60:	4413      	add	r3, r2
 8001f62:	3b41      	subs	r3, #65	@ 0x41
 8001f64:	fa00 f203 	lsl.w	r2, r0, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b09      	cmp	r3, #9
 8001f76:	d91c      	bls.n	8001fb2 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68d9      	ldr	r1, [r3, #12]
 8001f7e:	683b      	ldr	r3, [r7, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	4613      	mov	r3, r2
 8001f84:	005b      	lsls	r3, r3, #1
 8001f86:	4413      	add	r3, r2
 8001f88:	3b1e      	subs	r3, #30
 8001f8a:	2207      	movs	r2, #7
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	4019      	ands	r1, r3
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	6898      	ldr	r0, [r3, #8]
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4613      	mov	r3, r2
 8001f9e:	005b      	lsls	r3, r3, #1
 8001fa0:	4413      	add	r3, r2
 8001fa2:	3b1e      	subs	r3, #30
 8001fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	430a      	orrs	r2, r1
 8001fae:	60da      	str	r2, [r3, #12]
 8001fb0:	e019      	b.n	8001fe6 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6919      	ldr	r1, [r3, #16]
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	2207      	movs	r2, #7
 8001fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc8:	43db      	mvns	r3, r3
 8001fca:	4019      	ands	r1, r3
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6898      	ldr	r0, [r3, #8]
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4613      	mov	r3, r2
 8001fd6:	005b      	lsls	r3, r3, #1
 8001fd8:	4413      	add	r3, r2
 8001fda:	fa00 f203 	lsl.w	r2, r0, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	430a      	orrs	r2, r1
 8001fe4:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b10      	cmp	r3, #16
 8001fec:	d003      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001ff2:	2b11      	cmp	r3, #17
 8001ff4:	d132      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <HAL_ADC_ConfigChannel+0x1e4>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d125      	bne.n	800204c <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	689b      	ldr	r3, [r3, #8]
 8002006:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d126      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	689a      	ldr	r2, [r3, #8]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 800201c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	2b10      	cmp	r3, #16
 8002024:	d11a      	bne.n	800205c <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002026:	4b13      	ldr	r3, [pc, #76]	@ (8002074 <HAL_ADC_ConfigChannel+0x1e8>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a13      	ldr	r2, [pc, #76]	@ (8002078 <HAL_ADC_ConfigChannel+0x1ec>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	0c9a      	lsrs	r2, r3, #18
 8002032:	4613      	mov	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4413      	add	r3, r2
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800203c:	e002      	b.n	8002044 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	3b01      	subs	r3, #1
 8002042:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1f9      	bne.n	800203e <HAL_ADC_ConfigChannel+0x1b2>
 800204a:	e007      	b.n	800205c <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002050:	f043 0220 	orr.w	r2, r3, #32
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002064:	7bfb      	ldrb	r3, [r7, #15]
}
 8002066:	4618      	mov	r0, r3
 8002068:	3714      	adds	r7, #20
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr
 8002070:	40012400 	.word	0x40012400
 8002074:	20000000 	.word	0x20000000
 8002078:	431bde83 	.word	0x431bde83

0800207c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002088:	2300      	movs	r3, #0
 800208a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d040      	beq.n	800211c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f042 0201 	orr.w	r2, r2, #1
 80020a8:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002128 <ADC_Enable+0xac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	4a1f      	ldr	r2, [pc, #124]	@ (800212c <ADC_Enable+0xb0>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020b8:	e002      	b.n	80020c0 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	3b01      	subs	r3, #1
 80020be:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d1f9      	bne.n	80020ba <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 80020c6:	f7ff fd0f 	bl	8001ae8 <HAL_GetTick>
 80020ca:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020cc:	e01f      	b.n	800210e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020ce:	f7ff fd0b 	bl	8001ae8 <HAL_GetTick>
 80020d2:	4602      	mov	r2, r0
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d918      	bls.n	800210e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	f003 0301 	and.w	r3, r3, #1
 80020e6:	2b01      	cmp	r3, #1
 80020e8:	d011      	beq.n	800210e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	f043 0210 	orr.w	r2, r3, #16
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020fa:	f043 0201 	orr.w	r2, r3, #1
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e007      	b.n	800211e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	2b01      	cmp	r3, #1
 800211a:	d1d8      	bne.n	80020ce <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000000 	.word	0x20000000
 800212c:	431bde83 	.word	0x431bde83

08002130 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002138:	2300      	movs	r3, #0
 800213a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b01      	cmp	r3, #1
 8002148:	d12e      	bne.n	80021a8 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	689a      	ldr	r2, [r3, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f022 0201 	bic.w	r2, r2, #1
 8002158:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800215a:	f7ff fcc5 	bl	8001ae8 <HAL_GetTick>
 800215e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002160:	e01b      	b.n	800219a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002162:	f7ff fcc1 	bl	8001ae8 <HAL_GetTick>
 8002166:	4602      	mov	r2, r0
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	1ad3      	subs	r3, r2, r3
 800216c:	2b02      	cmp	r3, #2
 800216e:	d914      	bls.n	800219a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d10d      	bne.n	800219a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002182:	f043 0210 	orr.w	r2, r3, #16
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800218e:	f043 0201 	orr.w	r2, r3, #1
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e007      	b.n	80021aa <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d0dc      	beq.n	8002162 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021be:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d127      	bne.n	800221c <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021d0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80021e2:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021e6:	d115      	bne.n	8002214 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d111      	bne.n	8002214 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002200:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d105      	bne.n	8002214 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f004 fdc4 	bl	8006da2 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800221a:	e004      	b.n	8002226 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	6a1b      	ldr	r3, [r3, #32]
 8002220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002222:	6878      	ldr	r0, [r7, #4]
 8002224:	4798      	blx	r3
}
 8002226:	bf00      	nop
 8002228:	3710      	adds	r7, #16
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}

0800222e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800222e:	b580      	push	{r7, lr}
 8002230:	b084      	sub	sp, #16
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fe13 	bl	8001e68 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002242:	bf00      	nop
 8002244:	3710      	adds	r7, #16
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}

0800224a <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800224a:	b580      	push	{r7, lr}
 800224c:	b084      	sub	sp, #16
 800224e:	af00      	add	r7, sp, #0
 8002250:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800225c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002268:	f043 0204 	orr.w	r2, r3, #4
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002270:	68f8      	ldr	r0, [r7, #12]
 8002272:	f7ff fe02 	bl	8001e7a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
	...

08002280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002296:	68ba      	ldr	r2, [r7, #8]
 8002298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800229c:	4013      	ands	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80022a4:	68bb      	ldr	r3, [r7, #8]
 80022a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80022a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80022ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80022b2:	4a04      	ldr	r2, [pc, #16]	@ (80022c4 <__NVIC_SetPriorityGrouping+0x44>)
 80022b4:	68bb      	ldr	r3, [r7, #8]
 80022b6:	60d3      	str	r3, [r2, #12]
}
 80022b8:	bf00      	nop
 80022ba:	3714      	adds	r7, #20
 80022bc:	46bd      	mov	sp, r7
 80022be:	bc80      	pop	{r7}
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	e000ed00 	.word	0xe000ed00

080022c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022cc:	4b04      	ldr	r3, [pc, #16]	@ (80022e0 <__NVIC_GetPriorityGrouping+0x18>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	0a1b      	lsrs	r3, r3, #8
 80022d2:	f003 0307 	and.w	r3, r3, #7
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	bc80      	pop	{r7}
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	e000ed00 	.word	0xe000ed00

080022e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	4603      	mov	r3, r0
 80022ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	db0b      	blt.n	800230e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022f6:	79fb      	ldrb	r3, [r7, #7]
 80022f8:	f003 021f 	and.w	r2, r3, #31
 80022fc:	4906      	ldr	r1, [pc, #24]	@ (8002318 <__NVIC_EnableIRQ+0x34>)
 80022fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002302:	095b      	lsrs	r3, r3, #5
 8002304:	2001      	movs	r0, #1
 8002306:	fa00 f202 	lsl.w	r2, r0, r2
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800230e:	bf00      	nop
 8002310:	370c      	adds	r7, #12
 8002312:	46bd      	mov	sp, r7
 8002314:	bc80      	pop	{r7}
 8002316:	4770      	bx	lr
 8002318:	e000e100 	.word	0xe000e100

0800231c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	4603      	mov	r3, r0
 8002324:	6039      	str	r1, [r7, #0]
 8002326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	2b00      	cmp	r3, #0
 800232e:	db0a      	blt.n	8002346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	b2da      	uxtb	r2, r3
 8002334:	490c      	ldr	r1, [pc, #48]	@ (8002368 <__NVIC_SetPriority+0x4c>)
 8002336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800233a:	0112      	lsls	r2, r2, #4
 800233c:	b2d2      	uxtb	r2, r2
 800233e:	440b      	add	r3, r1
 8002340:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002344:	e00a      	b.n	800235c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	b2da      	uxtb	r2, r3
 800234a:	4908      	ldr	r1, [pc, #32]	@ (800236c <__NVIC_SetPriority+0x50>)
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	3b04      	subs	r3, #4
 8002354:	0112      	lsls	r2, r2, #4
 8002356:	b2d2      	uxtb	r2, r2
 8002358:	440b      	add	r3, r1
 800235a:	761a      	strb	r2, [r3, #24]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	e000e100 	.word	0xe000e100
 800236c:	e000ed00 	.word	0xe000ed00

08002370 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002370:	b480      	push	{r7}
 8002372:	b089      	sub	sp, #36	@ 0x24
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	f003 0307 	and.w	r3, r3, #7
 8002382:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	f1c3 0307 	rsb	r3, r3, #7
 800238a:	2b04      	cmp	r3, #4
 800238c:	bf28      	it	cs
 800238e:	2304      	movcs	r3, #4
 8002390:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	3304      	adds	r3, #4
 8002396:	2b06      	cmp	r3, #6
 8002398:	d902      	bls.n	80023a0 <NVIC_EncodePriority+0x30>
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	3b03      	subs	r3, #3
 800239e:	e000      	b.n	80023a2 <NVIC_EncodePriority+0x32>
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023a4:	f04f 32ff 	mov.w	r2, #4294967295
 80023a8:	69bb      	ldr	r3, [r7, #24]
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	43da      	mvns	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	401a      	ands	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023b8:	f04f 31ff 	mov.w	r1, #4294967295
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	fa01 f303 	lsl.w	r3, r1, r3
 80023c2:	43d9      	mvns	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023c8:	4313      	orrs	r3, r2
         );
}
 80023ca:	4618      	mov	r0, r3
 80023cc:	3724      	adds	r7, #36	@ 0x24
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bc80      	pop	{r7}
 80023d2:	4770      	bx	lr

080023d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023e4:	d301      	bcc.n	80023ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023e6:	2301      	movs	r3, #1
 80023e8:	e00f      	b.n	800240a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002414 <SysTick_Config+0x40>)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	3b01      	subs	r3, #1
 80023f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023f2:	210f      	movs	r1, #15
 80023f4:	f04f 30ff 	mov.w	r0, #4294967295
 80023f8:	f7ff ff90 	bl	800231c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023fc:	4b05      	ldr	r3, [pc, #20]	@ (8002414 <SysTick_Config+0x40>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002402:	4b04      	ldr	r3, [pc, #16]	@ (8002414 <SysTick_Config+0x40>)
 8002404:	2207      	movs	r2, #7
 8002406:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	e000e010 	.word	0xe000e010

08002418 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b082      	sub	sp, #8
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff2d 	bl	8002280 <__NVIC_SetPriorityGrouping>
}
 8002426:	bf00      	nop
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800242e:	b580      	push	{r7, lr}
 8002430:	b086      	sub	sp, #24
 8002432:	af00      	add	r7, sp, #0
 8002434:	4603      	mov	r3, r0
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
 800243a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002440:	f7ff ff42 	bl	80022c8 <__NVIC_GetPriorityGrouping>
 8002444:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002446:	687a      	ldr	r2, [r7, #4]
 8002448:	68b9      	ldr	r1, [r7, #8]
 800244a:	6978      	ldr	r0, [r7, #20]
 800244c:	f7ff ff90 	bl	8002370 <NVIC_EncodePriority>
 8002450:	4602      	mov	r2, r0
 8002452:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002456:	4611      	mov	r1, r2
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff ff5f 	bl	800231c <__NVIC_SetPriority>
}
 800245e:	bf00      	nop
 8002460:	3718      	adds	r7, #24
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}

08002466 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002466:	b580      	push	{r7, lr}
 8002468:	b082      	sub	sp, #8
 800246a:	af00      	add	r7, sp, #0
 800246c:	4603      	mov	r3, r0
 800246e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002470:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ff35 	bl	80022e4 <__NVIC_EnableIRQ>
}
 800247a:	bf00      	nop
 800247c:	3708      	adds	r7, #8
 800247e:	46bd      	mov	sp, r7
 8002480:	bd80      	pop	{r7, pc}

08002482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002482:	b580      	push	{r7, lr}
 8002484:	b082      	sub	sp, #8
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f7ff ffa2 	bl	80023d4 <SysTick_Config>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3708      	adds	r7, #8
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
	...

0800249c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80024a4:	2300      	movs	r3, #0
 80024a6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e043      	b.n	800253a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	461a      	mov	r2, r3
 80024b8:	4b22      	ldr	r3, [pc, #136]	@ (8002544 <HAL_DMA_Init+0xa8>)
 80024ba:	4413      	add	r3, r2
 80024bc:	4a22      	ldr	r2, [pc, #136]	@ (8002548 <HAL_DMA_Init+0xac>)
 80024be:	fba2 2303 	umull	r2, r3, r2, r3
 80024c2:	091b      	lsrs	r3, r3, #4
 80024c4:	009a      	lsls	r2, r3, #2
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a1f      	ldr	r2, [pc, #124]	@ (800254c <HAL_DMA_Init+0xb0>)
 80024ce:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2202      	movs	r2, #2
 80024d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024e6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80024ea:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002500:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	695b      	ldr	r3, [r3, #20]
 8002506:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800250c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	4313      	orrs	r3, r2
 8002518:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	68fa      	ldr	r2, [r7, #12]
 8002520:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3714      	adds	r7, #20
 800253e:	46bd      	mov	sp, r7
 8002540:	bc80      	pop	{r7}
 8002542:	4770      	bx	lr
 8002544:	bffdfff8 	.word	0xbffdfff8
 8002548:	cccccccd 	.word	0xcccccccd
 800254c:	40020000 	.word	0x40020000

08002550 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
 800255c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800255e:	2300      	movs	r3, #0
 8002560:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d101      	bne.n	8002570 <HAL_DMA_Start_IT+0x20>
 800256c:	2302      	movs	r3, #2
 800256e:	e04b      	b.n	8002608 <HAL_DMA_Start_IT+0xb8>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	2201      	movs	r2, #1
 8002574:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b01      	cmp	r3, #1
 8002582:	d13a      	bne.n	80025fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2200      	movs	r2, #0
 8002590:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f022 0201 	bic.w	r2, r2, #1
 80025a0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	68b9      	ldr	r1, [r7, #8]
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f000 f9f6 	bl	800299a <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d008      	beq.n	80025c8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f042 020e 	orr.w	r2, r2, #14
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e00f      	b.n	80025e8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0204 	bic.w	r2, r2, #4
 80025d6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 020a 	orr.w	r2, r2, #10
 80025e6:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	601a      	str	r2, [r3, #0]
 80025f8:	e005      	b.n	8002606 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8002602:	2302      	movs	r3, #2
 8002604:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8002606:	7dfb      	ldrb	r3, [r7, #23]
}
 8002608:	4618      	mov	r0, r3
 800260a:	3718      	adds	r7, #24
 800260c:	46bd      	mov	sp, r7
 800260e:	bd80      	pop	{r7, pc}

08002610 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002610:	b480      	push	{r7}
 8002612:	b085      	sub	sp, #20
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002618:	2300      	movs	r3, #0
 800261a:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002622:	b2db      	uxtb	r3, r3
 8002624:	2b02      	cmp	r3, #2
 8002626:	d008      	beq.n	800263a <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2204      	movs	r2, #4
 800262c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e020      	b.n	800267c <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 020e 	bic.w	r2, r2, #14
 8002648:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f022 0201 	bic.w	r2, r2, #1
 8002658:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002662:	2101      	movs	r1, #1
 8002664:	fa01 f202 	lsl.w	r2, r1, r2
 8002668:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800267a:	7bfb      	ldrb	r3, [r7, #15]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b02      	cmp	r3, #2
 800269e:	d005      	beq.n	80026ac <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2204      	movs	r2, #4
 80026a4:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	73fb      	strb	r3, [r7, #15]
 80026aa:	e051      	b.n	8002750 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	681a      	ldr	r2, [r3, #0]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f022 020e 	bic.w	r2, r2, #14
 80026ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f022 0201 	bic.w	r2, r2, #1
 80026ca:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a22      	ldr	r2, [pc, #136]	@ (800275c <HAL_DMA_Abort_IT+0xd4>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d029      	beq.n	800272a <HAL_DMA_Abort_IT+0xa2>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a21      	ldr	r2, [pc, #132]	@ (8002760 <HAL_DMA_Abort_IT+0xd8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d022      	beq.n	8002726 <HAL_DMA_Abort_IT+0x9e>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a1f      	ldr	r2, [pc, #124]	@ (8002764 <HAL_DMA_Abort_IT+0xdc>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d01a      	beq.n	8002720 <HAL_DMA_Abort_IT+0x98>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1e      	ldr	r2, [pc, #120]	@ (8002768 <HAL_DMA_Abort_IT+0xe0>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d012      	beq.n	800271a <HAL_DMA_Abort_IT+0x92>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1c      	ldr	r2, [pc, #112]	@ (800276c <HAL_DMA_Abort_IT+0xe4>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00a      	beq.n	8002714 <HAL_DMA_Abort_IT+0x8c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a1b      	ldr	r2, [pc, #108]	@ (8002770 <HAL_DMA_Abort_IT+0xe8>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d102      	bne.n	800270e <HAL_DMA_Abort_IT+0x86>
 8002708:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800270c:	e00e      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 800270e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002712:	e00b      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 8002714:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002718:	e008      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 800271a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800271e:	e005      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 8002720:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002724:	e002      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 8002726:	2310      	movs	r3, #16
 8002728:	e000      	b.n	800272c <HAL_DMA_Abort_IT+0xa4>
 800272a:	2301      	movs	r3, #1
 800272c:	4a11      	ldr	r2, [pc, #68]	@ (8002774 <HAL_DMA_Abort_IT+0xec>)
 800272e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002744:	2b00      	cmp	r3, #0
 8002746:	d003      	beq.n	8002750 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	4798      	blx	r3
    } 
  }
  return status;
 8002750:	7bfb      	ldrb	r3, [r7, #15]
}
 8002752:	4618      	mov	r0, r3
 8002754:	3710      	adds	r7, #16
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	40020008 	.word	0x40020008
 8002760:	4002001c 	.word	0x4002001c
 8002764:	40020030 	.word	0x40020030
 8002768:	40020044 	.word	0x40020044
 800276c:	40020058 	.word	0x40020058
 8002770:	4002006c 	.word	0x4002006c
 8002774:	40020000 	.word	0x40020000

08002778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002794:	2204      	movs	r2, #4
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d04f      	beq.n	8002840 <HAL_DMA_IRQHandler+0xc8>
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0304 	and.w	r3, r3, #4
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d04a      	beq.n	8002840 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0320 	and.w	r3, r3, #32
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d107      	bne.n	80027c8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f022 0204 	bic.w	r2, r2, #4
 80027c6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a66      	ldr	r2, [pc, #408]	@ (8002968 <HAL_DMA_IRQHandler+0x1f0>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d029      	beq.n	8002826 <HAL_DMA_IRQHandler+0xae>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a65      	ldr	r2, [pc, #404]	@ (800296c <HAL_DMA_IRQHandler+0x1f4>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d022      	beq.n	8002822 <HAL_DMA_IRQHandler+0xaa>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a63      	ldr	r2, [pc, #396]	@ (8002970 <HAL_DMA_IRQHandler+0x1f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d01a      	beq.n	800281c <HAL_DMA_IRQHandler+0xa4>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a62      	ldr	r2, [pc, #392]	@ (8002974 <HAL_DMA_IRQHandler+0x1fc>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d012      	beq.n	8002816 <HAL_DMA_IRQHandler+0x9e>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a60      	ldr	r2, [pc, #384]	@ (8002978 <HAL_DMA_IRQHandler+0x200>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00a      	beq.n	8002810 <HAL_DMA_IRQHandler+0x98>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a5f      	ldr	r2, [pc, #380]	@ (800297c <HAL_DMA_IRQHandler+0x204>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d102      	bne.n	800280a <HAL_DMA_IRQHandler+0x92>
 8002804:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002808:	e00e      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 800280a:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 800280e:	e00b      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002810:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002814:	e008      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002816:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800281a:	e005      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 800281c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002820:	e002      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002822:	2340      	movs	r3, #64	@ 0x40
 8002824:	e000      	b.n	8002828 <HAL_DMA_IRQHandler+0xb0>
 8002826:	2304      	movs	r3, #4
 8002828:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <HAL_DMA_IRQHandler+0x208>)
 800282a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002830:	2b00      	cmp	r3, #0
 8002832:	f000 8094 	beq.w	800295e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800283e:	e08e      	b.n	800295e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002844:	2202      	movs	r2, #2
 8002846:	409a      	lsls	r2, r3
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4013      	ands	r3, r2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d056      	beq.n	80028fe <HAL_DMA_IRQHandler+0x186>
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d051      	beq.n	80028fe <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 0320 	and.w	r3, r3, #32
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f022 020a 	bic.w	r2, r2, #10
 8002876:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a38      	ldr	r2, [pc, #224]	@ (8002968 <HAL_DMA_IRQHandler+0x1f0>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d029      	beq.n	80028de <HAL_DMA_IRQHandler+0x166>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a37      	ldr	r2, [pc, #220]	@ (800296c <HAL_DMA_IRQHandler+0x1f4>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d022      	beq.n	80028da <HAL_DMA_IRQHandler+0x162>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a35      	ldr	r2, [pc, #212]	@ (8002970 <HAL_DMA_IRQHandler+0x1f8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d01a      	beq.n	80028d4 <HAL_DMA_IRQHandler+0x15c>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a34      	ldr	r2, [pc, #208]	@ (8002974 <HAL_DMA_IRQHandler+0x1fc>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d012      	beq.n	80028ce <HAL_DMA_IRQHandler+0x156>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a32      	ldr	r2, [pc, #200]	@ (8002978 <HAL_DMA_IRQHandler+0x200>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d00a      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x150>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a31      	ldr	r2, [pc, #196]	@ (800297c <HAL_DMA_IRQHandler+0x204>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d102      	bne.n	80028c2 <HAL_DMA_IRQHandler+0x14a>
 80028bc:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 80028c0:	e00e      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80028c6:	e00b      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028cc:	e008      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028ce:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80028d2:	e005      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028d8:	e002      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028da:	2320      	movs	r3, #32
 80028dc:	e000      	b.n	80028e0 <HAL_DMA_IRQHandler+0x168>
 80028de:	2302      	movs	r3, #2
 80028e0:	4a27      	ldr	r2, [pc, #156]	@ (8002980 <HAL_DMA_IRQHandler+0x208>)
 80028e2:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d034      	beq.n	800295e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028fc:	e02f      	b.n	800295e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	2208      	movs	r2, #8
 8002904:	409a      	lsls	r2, r3
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d028      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1e8>
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	f003 0308 	and.w	r3, r3, #8
 8002914:	2b00      	cmp	r3, #0
 8002916:	d023      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f022 020e 	bic.w	r2, r2, #14
 8002926:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002930:	2101      	movs	r1, #1
 8002932:	fa01 f202 	lsl.w	r2, r1, r2
 8002936:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	2b00      	cmp	r3, #0
 8002954:	d004      	beq.n	8002960 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	4798      	blx	r3
    }
  }
  return;
 800295e:	bf00      	nop
 8002960:	bf00      	nop
}
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}
 8002968:	40020008 	.word	0x40020008
 800296c:	4002001c 	.word	0x4002001c
 8002970:	40020030 	.word	0x40020030
 8002974:	40020044 	.word	0x40020044
 8002978:	40020058 	.word	0x40020058
 800297c:	4002006c 	.word	0x4002006c
 8002980:	40020000 	.word	0x40020000

08002984 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8002990:	4618      	mov	r0, r3
 8002992:	370c      	adds	r7, #12
 8002994:	46bd      	mov	sp, r7
 8002996:	bc80      	pop	{r7}
 8002998:	4770      	bx	lr

0800299a <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800299a:	b480      	push	{r7}
 800299c:	b085      	sub	sp, #20
 800299e:	af00      	add	r7, sp, #0
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	607a      	str	r2, [r7, #4]
 80029a6:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029b0:	2101      	movs	r1, #1
 80029b2:	fa01 f202 	lsl.w	r2, r1, r2
 80029b6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	2b10      	cmp	r3, #16
 80029c6:	d108      	bne.n	80029da <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	68ba      	ldr	r2, [r7, #8]
 80029d6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80029d8:	e007      	b.n	80029ea <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	68ba      	ldr	r2, [r7, #8]
 80029e0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	60da      	str	r2, [r3, #12]
}
 80029ea:	bf00      	nop
 80029ec:	3714      	adds	r7, #20
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b08b      	sub	sp, #44	@ 0x2c
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029fe:	2300      	movs	r3, #0
 8002a00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002a02:	2300      	movs	r3, #0
 8002a04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a06:	e169      	b.n	8002cdc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002a08:	2201      	movs	r2, #1
 8002a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	69fa      	ldr	r2, [r7, #28]
 8002a18:	4013      	ands	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	69fb      	ldr	r3, [r7, #28]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f040 8158 	bne.w	8002cd6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	4a9a      	ldr	r2, [pc, #616]	@ (8002c94 <HAL_GPIO_Init+0x2a0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d05e      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a30:	4a98      	ldr	r2, [pc, #608]	@ (8002c94 <HAL_GPIO_Init+0x2a0>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d875      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a36:	4a98      	ldr	r2, [pc, #608]	@ (8002c98 <HAL_GPIO_Init+0x2a4>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	d058      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a3c:	4a96      	ldr	r2, [pc, #600]	@ (8002c98 <HAL_GPIO_Init+0x2a4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d86f      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a42:	4a96      	ldr	r2, [pc, #600]	@ (8002c9c <HAL_GPIO_Init+0x2a8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d052      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a48:	4a94      	ldr	r2, [pc, #592]	@ (8002c9c <HAL_GPIO_Init+0x2a8>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d869      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a4e:	4a94      	ldr	r2, [pc, #592]	@ (8002ca0 <HAL_GPIO_Init+0x2ac>)
 8002a50:	4293      	cmp	r3, r2
 8002a52:	d04c      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a54:	4a92      	ldr	r2, [pc, #584]	@ (8002ca0 <HAL_GPIO_Init+0x2ac>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d863      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a5a:	4a92      	ldr	r2, [pc, #584]	@ (8002ca4 <HAL_GPIO_Init+0x2b0>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d046      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
 8002a60:	4a90      	ldr	r2, [pc, #576]	@ (8002ca4 <HAL_GPIO_Init+0x2b0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d85d      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a66:	2b12      	cmp	r3, #18
 8002a68:	d82a      	bhi.n	8002ac0 <HAL_GPIO_Init+0xcc>
 8002a6a:	2b12      	cmp	r3, #18
 8002a6c:	d859      	bhi.n	8002b22 <HAL_GPIO_Init+0x12e>
 8002a6e:	a201      	add	r2, pc, #4	@ (adr r2, 8002a74 <HAL_GPIO_Init+0x80>)
 8002a70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a74:	08002aef 	.word	0x08002aef
 8002a78:	08002ac9 	.word	0x08002ac9
 8002a7c:	08002adb 	.word	0x08002adb
 8002a80:	08002b1d 	.word	0x08002b1d
 8002a84:	08002b23 	.word	0x08002b23
 8002a88:	08002b23 	.word	0x08002b23
 8002a8c:	08002b23 	.word	0x08002b23
 8002a90:	08002b23 	.word	0x08002b23
 8002a94:	08002b23 	.word	0x08002b23
 8002a98:	08002b23 	.word	0x08002b23
 8002a9c:	08002b23 	.word	0x08002b23
 8002aa0:	08002b23 	.word	0x08002b23
 8002aa4:	08002b23 	.word	0x08002b23
 8002aa8:	08002b23 	.word	0x08002b23
 8002aac:	08002b23 	.word	0x08002b23
 8002ab0:	08002b23 	.word	0x08002b23
 8002ab4:	08002b23 	.word	0x08002b23
 8002ab8:	08002ad1 	.word	0x08002ad1
 8002abc:	08002ae5 	.word	0x08002ae5
 8002ac0:	4a79      	ldr	r2, [pc, #484]	@ (8002ca8 <HAL_GPIO_Init+0x2b4>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d013      	beq.n	8002aee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002ac6:	e02c      	b.n	8002b22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	623b      	str	r3, [r7, #32]
          break;
 8002ace:	e029      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	3304      	adds	r3, #4
 8002ad6:	623b      	str	r3, [r7, #32]
          break;
 8002ad8:	e024      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	3308      	adds	r3, #8
 8002ae0:	623b      	str	r3, [r7, #32]
          break;
 8002ae2:	e01f      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	330c      	adds	r3, #12
 8002aea:	623b      	str	r3, [r7, #32]
          break;
 8002aec:	e01a      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	689b      	ldr	r3, [r3, #8]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d102      	bne.n	8002afc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002af6:	2304      	movs	r3, #4
 8002af8:	623b      	str	r3, [r7, #32]
          break;
 8002afa:	e013      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d105      	bne.n	8002b10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b04:	2308      	movs	r3, #8
 8002b06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	69fa      	ldr	r2, [r7, #28]
 8002b0c:	611a      	str	r2, [r3, #16]
          break;
 8002b0e:	e009      	b.n	8002b24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002b10:	2308      	movs	r3, #8
 8002b12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69fa      	ldr	r2, [r7, #28]
 8002b18:	615a      	str	r2, [r3, #20]
          break;
 8002b1a:	e003      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	623b      	str	r3, [r7, #32]
          break;
 8002b20:	e000      	b.n	8002b24 <HAL_GPIO_Init+0x130>
          break;
 8002b22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	2bff      	cmp	r3, #255	@ 0xff
 8002b28:	d801      	bhi.n	8002b2e <HAL_GPIO_Init+0x13a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	e001      	b.n	8002b32 <HAL_GPIO_Init+0x13e>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	3304      	adds	r3, #4
 8002b32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2bff      	cmp	r3, #255	@ 0xff
 8002b38:	d802      	bhi.n	8002b40 <HAL_GPIO_Init+0x14c>
 8002b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	e002      	b.n	8002b46 <HAL_GPIO_Init+0x152>
 8002b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b42:	3b08      	subs	r3, #8
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	210f      	movs	r1, #15
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	fa01 f303 	lsl.w	r3, r1, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	401a      	ands	r2, r3
 8002b58:	6a39      	ldr	r1, [r7, #32]
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b60:	431a      	orrs	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80b1 	beq.w	8002cd6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b74:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <HAL_GPIO_Init+0x2b8>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a4c      	ldr	r2, [pc, #304]	@ (8002cac <HAL_GPIO_Init+0x2b8>)
 8002b7a:	f043 0301 	orr.w	r3, r3, #1
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b4a      	ldr	r3, [pc, #296]	@ (8002cac <HAL_GPIO_Init+0x2b8>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	60bb      	str	r3, [r7, #8]
 8002b8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b8c:	4a48      	ldr	r2, [pc, #288]	@ (8002cb0 <HAL_GPIO_Init+0x2bc>)
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	089b      	lsrs	r3, r3, #2
 8002b92:	3302      	adds	r3, #2
 8002b94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b9c:	f003 0303 	and.w	r3, r3, #3
 8002ba0:	009b      	lsls	r3, r3, #2
 8002ba2:	220f      	movs	r2, #15
 8002ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba8:	43db      	mvns	r3, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	4013      	ands	r3, r2
 8002bae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	4a40      	ldr	r2, [pc, #256]	@ (8002cb4 <HAL_GPIO_Init+0x2c0>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d013      	beq.n	8002be0 <HAL_GPIO_Init+0x1ec>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	4a3f      	ldr	r2, [pc, #252]	@ (8002cb8 <HAL_GPIO_Init+0x2c4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d00d      	beq.n	8002bdc <HAL_GPIO_Init+0x1e8>
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8002cbc <HAL_GPIO_Init+0x2c8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d007      	beq.n	8002bd8 <HAL_GPIO_Init+0x1e4>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a3d      	ldr	r2, [pc, #244]	@ (8002cc0 <HAL_GPIO_Init+0x2cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d101      	bne.n	8002bd4 <HAL_GPIO_Init+0x1e0>
 8002bd0:	2303      	movs	r3, #3
 8002bd2:	e006      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	e004      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e002      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e000      	b.n	8002be2 <HAL_GPIO_Init+0x1ee>
 8002be0:	2300      	movs	r3, #0
 8002be2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002be4:	f002 0203 	and.w	r2, r2, #3
 8002be8:	0092      	lsls	r2, r2, #2
 8002bea:	4093      	lsls	r3, r2
 8002bec:	68fa      	ldr	r2, [r7, #12]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bf2:	492f      	ldr	r1, [pc, #188]	@ (8002cb0 <HAL_GPIO_Init+0x2bc>)
 8002bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf6:	089b      	lsrs	r3, r3, #2
 8002bf8:	3302      	adds	r3, #2
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d006      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002c0c:	4b2d      	ldr	r3, [pc, #180]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c0e:	689a      	ldr	r2, [r3, #8]
 8002c10:	492c      	ldr	r1, [pc, #176]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c12:	69bb      	ldr	r3, [r7, #24]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	608b      	str	r3, [r1, #8]
 8002c18:	e006      	b.n	8002c28 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002c1a:	4b2a      	ldr	r3, [pc, #168]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	43db      	mvns	r3, r3
 8002c22:	4928      	ldr	r1, [pc, #160]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d006      	beq.n	8002c42 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002c34:	4b23      	ldr	r3, [pc, #140]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c36:	68da      	ldr	r2, [r3, #12]
 8002c38:	4922      	ldr	r1, [pc, #136]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c3a:	69bb      	ldr	r3, [r7, #24]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	60cb      	str	r3, [r1, #12]
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002c42:	4b20      	ldr	r3, [pc, #128]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	491e      	ldr	r1, [pc, #120]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	685b      	ldr	r3, [r3, #4]
 8002c54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d006      	beq.n	8002c6a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c5c:	4b19      	ldr	r3, [pc, #100]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4918      	ldr	r1, [pc, #96]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	604b      	str	r3, [r1, #4]
 8002c68:	e006      	b.n	8002c78 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c6a:	4b16      	ldr	r3, [pc, #88]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c6c:	685a      	ldr	r2, [r3, #4]
 8002c6e:	69bb      	ldr	r3, [r7, #24]
 8002c70:	43db      	mvns	r3, r3
 8002c72:	4914      	ldr	r1, [pc, #80]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d021      	beq.n	8002cc8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c84:	4b0f      	ldr	r3, [pc, #60]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	490e      	ldr	r1, [pc, #56]	@ (8002cc4 <HAL_GPIO_Init+0x2d0>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	600b      	str	r3, [r1, #0]
 8002c90:	e021      	b.n	8002cd6 <HAL_GPIO_Init+0x2e2>
 8002c92:	bf00      	nop
 8002c94:	10320000 	.word	0x10320000
 8002c98:	10310000 	.word	0x10310000
 8002c9c:	10220000 	.word	0x10220000
 8002ca0:	10210000 	.word	0x10210000
 8002ca4:	10120000 	.word	0x10120000
 8002ca8:	10110000 	.word	0x10110000
 8002cac:	40021000 	.word	0x40021000
 8002cb0:	40010000 	.word	0x40010000
 8002cb4:	40010800 	.word	0x40010800
 8002cb8:	40010c00 	.word	0x40010c00
 8002cbc:	40011000 	.word	0x40011000
 8002cc0:	40011400 	.word	0x40011400
 8002cc4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	43db      	mvns	r3, r3
 8002cd0:	4909      	ldr	r1, [pc, #36]	@ (8002cf8 <HAL_GPIO_Init+0x304>)
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	3301      	adds	r3, #1
 8002cda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	f47f ae8e 	bne.w	8002a08 <HAL_GPIO_Init+0x14>
  }
}
 8002cec:	bf00      	nop
 8002cee:	bf00      	nop
 8002cf0:	372c      	adds	r7, #44	@ 0x2c
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bc80      	pop	{r7}
 8002cf6:	4770      	bx	lr
 8002cf8:	40010400 	.word	0x40010400

08002cfc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	460b      	mov	r3, r1
 8002d06:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	887b      	ldrh	r3, [r7, #2]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d002      	beq.n	8002d1a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d14:	2301      	movs	r3, #1
 8002d16:	73fb      	strb	r3, [r7, #15]
 8002d18:	e001      	b.n	8002d1e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	3714      	adds	r7, #20
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bc80      	pop	{r7}
 8002d28:	4770      	bx	lr

08002d2a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
 8002d32:	460b      	mov	r3, r1
 8002d34:	807b      	strh	r3, [r7, #2]
 8002d36:	4613      	mov	r3, r2
 8002d38:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d3a:	787b      	ldrb	r3, [r7, #1]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d003      	beq.n	8002d48 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d40:	887a      	ldrh	r2, [r7, #2]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002d46:	e003      	b.n	8002d50 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002d48:	887b      	ldrh	r3, [r7, #2]
 8002d4a:	041a      	lsls	r2, r3, #16
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	611a      	str	r2, [r3, #16]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	b085      	sub	sp, #20
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
 8002d62:	460b      	mov	r3, r1
 8002d64:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	68db      	ldr	r3, [r3, #12]
 8002d6a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d6c:	887a      	ldrh	r2, [r7, #2]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	4013      	ands	r3, r2
 8002d72:	041a      	lsls	r2, r3, #16
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	43d9      	mvns	r1, r3
 8002d78:	887b      	ldrh	r3, [r7, #2]
 8002d7a:	400b      	ands	r3, r1
 8002d7c:	431a      	orrs	r2, r3
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	611a      	str	r2, [r3, #16]
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bc80      	pop	{r7}
 8002d8a:	4770      	bx	lr

08002d8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e272      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f000 8087 	beq.w	8002eba <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dac:	4b92      	ldr	r3, [pc, #584]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 030c 	and.w	r3, r3, #12
 8002db4:	2b04      	cmp	r3, #4
 8002db6:	d00c      	beq.n	8002dd2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002db8:	4b8f      	ldr	r3, [pc, #572]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f003 030c 	and.w	r3, r3, #12
 8002dc0:	2b08      	cmp	r3, #8
 8002dc2:	d112      	bne.n	8002dea <HAL_RCC_OscConfig+0x5e>
 8002dc4:	4b8c      	ldr	r3, [pc, #560]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002dd0:	d10b      	bne.n	8002dea <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dd2:	4b89      	ldr	r3, [pc, #548]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d06c      	beq.n	8002eb8 <HAL_RCC_OscConfig+0x12c>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d168      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	e24c      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002df2:	d106      	bne.n	8002e02 <HAL_RCC_OscConfig+0x76>
 8002df4:	4b80      	ldr	r3, [pc, #512]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a7f      	ldr	r2, [pc, #508]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002dfa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	e02e      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_RCC_OscConfig+0x98>
 8002e0a:	4b7b      	ldr	r3, [pc, #492]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a7a      	ldr	r2, [pc, #488]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e10:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e14:	6013      	str	r3, [r2, #0]
 8002e16:	4b78      	ldr	r3, [pc, #480]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a77      	ldr	r2, [pc, #476]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e1c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	e01d      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e2c:	d10c      	bne.n	8002e48 <HAL_RCC_OscConfig+0xbc>
 8002e2e:	4b72      	ldr	r3, [pc, #456]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a71      	ldr	r2, [pc, #452]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e38:	6013      	str	r3, [r2, #0]
 8002e3a:	4b6f      	ldr	r3, [pc, #444]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a6e      	ldr	r2, [pc, #440]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e44:	6013      	str	r3, [r2, #0]
 8002e46:	e00b      	b.n	8002e60 <HAL_RCC_OscConfig+0xd4>
 8002e48:	4b6b      	ldr	r3, [pc, #428]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a6a      	ldr	r2, [pc, #424]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e4e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	4b68      	ldr	r3, [pc, #416]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a67      	ldr	r2, [pc, #412]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e68:	f7fe fe3e 	bl	8001ae8 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e70:	f7fe fe3a 	bl	8001ae8 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b64      	cmp	r3, #100	@ 0x64
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e200      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e82:	4b5d      	ldr	r3, [pc, #372]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d0f0      	beq.n	8002e70 <HAL_RCC_OscConfig+0xe4>
 8002e8e:	e014      	b.n	8002eba <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e90:	f7fe fe2a 	bl	8001ae8 <HAL_GetTick>
 8002e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e96:	e008      	b.n	8002eaa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e98:	f7fe fe26 	bl	8001ae8 <HAL_GetTick>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	1ad3      	subs	r3, r2, r3
 8002ea2:	2b64      	cmp	r3, #100	@ 0x64
 8002ea4:	d901      	bls.n	8002eaa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ea6:	2303      	movs	r3, #3
 8002ea8:	e1ec      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eaa:	4b53      	ldr	r3, [pc, #332]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d1f0      	bne.n	8002e98 <HAL_RCC_OscConfig+0x10c>
 8002eb6:	e000      	b.n	8002eba <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d063      	beq.n	8002f8e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002ec6:	4b4c      	ldr	r3, [pc, #304]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 030c 	and.w	r3, r3, #12
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00b      	beq.n	8002eea <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002ed2:	4b49      	ldr	r3, [pc, #292]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	f003 030c 	and.w	r3, r3, #12
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d11c      	bne.n	8002f18 <HAL_RCC_OscConfig+0x18c>
 8002ede:	4b46      	ldr	r3, [pc, #280]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d116      	bne.n	8002f18 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	4b43      	ldr	r3, [pc, #268]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0302 	and.w	r3, r3, #2
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d005      	beq.n	8002f02 <HAL_RCC_OscConfig+0x176>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	2b01      	cmp	r3, #1
 8002efc:	d001      	beq.n	8002f02 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e1c0      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f02:	4b3d      	ldr	r3, [pc, #244]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	4939      	ldr	r1, [pc, #228]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	e03a      	b.n	8002f8e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d020      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f20:	4b36      	ldr	r3, [pc, #216]	@ (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f26:	f7fe fddf 	bl	8001ae8 <HAL_GetTick>
 8002f2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2c:	e008      	b.n	8002f40 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f2e:	f7fe fddb 	bl	8001ae8 <HAL_GetTick>
 8002f32:	4602      	mov	r2, r0
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	1ad3      	subs	r3, r2, r3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d901      	bls.n	8002f40 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002f3c:	2303      	movs	r3, #3
 8002f3e:	e1a1      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f40:	4b2d      	ldr	r3, [pc, #180]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d0f0      	beq.n	8002f2e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4c:	4b2a      	ldr	r3, [pc, #168]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	695b      	ldr	r3, [r3, #20]
 8002f58:	00db      	lsls	r3, r3, #3
 8002f5a:	4927      	ldr	r1, [pc, #156]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	600b      	str	r3, [r1, #0]
 8002f60:	e015      	b.n	8002f8e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f62:	4b26      	ldr	r3, [pc, #152]	@ (8002ffc <HAL_RCC_OscConfig+0x270>)
 8002f64:	2200      	movs	r2, #0
 8002f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f68:	f7fe fdbe 	bl	8001ae8 <HAL_GetTick>
 8002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f6e:	e008      	b.n	8002f82 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f70:	f7fe fdba 	bl	8001ae8 <HAL_GetTick>
 8002f74:	4602      	mov	r2, r0
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	2b02      	cmp	r3, #2
 8002f7c:	d901      	bls.n	8002f82 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f7e:	2303      	movs	r3, #3
 8002f80:	e180      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f82:	4b1d      	ldr	r3, [pc, #116]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0302 	and.w	r3, r3, #2
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d1f0      	bne.n	8002f70 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 0308 	and.w	r3, r3, #8
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d03a      	beq.n	8003010 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d019      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fa2:	4b17      	ldr	r3, [pc, #92]	@ (8003000 <HAL_RCC_OscConfig+0x274>)
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa8:	f7fe fd9e 	bl	8001ae8 <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb0:	f7fe fd9a 	bl	8001ae8 <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b02      	cmp	r3, #2
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e160      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8002ff8 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0f0      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002fce:	2001      	movs	r0, #1
 8002fd0:	f000 faee 	bl	80035b0 <RCC_Delay>
 8002fd4:	e01c      	b.n	8003010 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8003000 <HAL_RCC_OscConfig+0x274>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fdc:	f7fe fd84 	bl	8001ae8 <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fe2:	e00f      	b.n	8003004 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fd80 	bl	8001ae8 <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d908      	bls.n	8003004 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e146      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
 8002ff6:	bf00      	nop
 8002ff8:	40021000 	.word	0x40021000
 8002ffc:	42420000 	.word	0x42420000
 8003000:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003004:	4b92      	ldr	r3, [pc, #584]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003006:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1e9      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	f000 80a6 	beq.w	800316a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800301e:	2300      	movs	r3, #0
 8003020:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003022:	4b8b      	ldr	r3, [pc, #556]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	69db      	ldr	r3, [r3, #28]
 8003026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d10d      	bne.n	800304a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800302e:	4b88      	ldr	r3, [pc, #544]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003030:	69db      	ldr	r3, [r3, #28]
 8003032:	4a87      	ldr	r2, [pc, #540]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003038:	61d3      	str	r3, [r2, #28]
 800303a:	4b85      	ldr	r3, [pc, #532]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	69db      	ldr	r3, [r3, #28]
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003046:	2301      	movs	r3, #1
 8003048:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304a:	4b82      	ldr	r3, [pc, #520]	@ (8003254 <HAL_RCC_OscConfig+0x4c8>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003052:	2b00      	cmp	r3, #0
 8003054:	d118      	bne.n	8003088 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003056:	4b7f      	ldr	r3, [pc, #508]	@ (8003254 <HAL_RCC_OscConfig+0x4c8>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a7e      	ldr	r2, [pc, #504]	@ (8003254 <HAL_RCC_OscConfig+0x4c8>)
 800305c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003062:	f7fe fd41 	bl	8001ae8 <HAL_GetTick>
 8003066:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003068:	e008      	b.n	800307c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800306a:	f7fe fd3d 	bl	8001ae8 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	2b64      	cmp	r3, #100	@ 0x64
 8003076:	d901      	bls.n	800307c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003078:	2303      	movs	r3, #3
 800307a:	e103      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800307c:	4b75      	ldr	r3, [pc, #468]	@ (8003254 <HAL_RCC_OscConfig+0x4c8>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003084:	2b00      	cmp	r3, #0
 8003086:	d0f0      	beq.n	800306a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	2b01      	cmp	r3, #1
 800308e:	d106      	bne.n	800309e <HAL_RCC_OscConfig+0x312>
 8003090:	4b6f      	ldr	r3, [pc, #444]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	4a6e      	ldr	r2, [pc, #440]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003096:	f043 0301 	orr.w	r3, r3, #1
 800309a:	6213      	str	r3, [r2, #32]
 800309c:	e02d      	b.n	80030fa <HAL_RCC_OscConfig+0x36e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	68db      	ldr	r3, [r3, #12]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10c      	bne.n	80030c0 <HAL_RCC_OscConfig+0x334>
 80030a6:	4b6a      	ldr	r3, [pc, #424]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	4a69      	ldr	r2, [pc, #420]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030ac:	f023 0301 	bic.w	r3, r3, #1
 80030b0:	6213      	str	r3, [r2, #32]
 80030b2:	4b67      	ldr	r3, [pc, #412]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030b4:	6a1b      	ldr	r3, [r3, #32]
 80030b6:	4a66      	ldr	r2, [pc, #408]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030b8:	f023 0304 	bic.w	r3, r3, #4
 80030bc:	6213      	str	r3, [r2, #32]
 80030be:	e01c      	b.n	80030fa <HAL_RCC_OscConfig+0x36e>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d10c      	bne.n	80030e2 <HAL_RCC_OscConfig+0x356>
 80030c8:	4b61      	ldr	r3, [pc, #388]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030ca:	6a1b      	ldr	r3, [r3, #32]
 80030cc:	4a60      	ldr	r2, [pc, #384]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	f043 0304 	orr.w	r3, r3, #4
 80030d2:	6213      	str	r3, [r2, #32]
 80030d4:	4b5e      	ldr	r3, [pc, #376]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	4a5d      	ldr	r2, [pc, #372]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6213      	str	r3, [r2, #32]
 80030e0:	e00b      	b.n	80030fa <HAL_RCC_OscConfig+0x36e>
 80030e2:	4b5b      	ldr	r3, [pc, #364]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	4a5a      	ldr	r2, [pc, #360]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030e8:	f023 0301 	bic.w	r3, r3, #1
 80030ec:	6213      	str	r3, [r2, #32]
 80030ee:	4b58      	ldr	r3, [pc, #352]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	6a1b      	ldr	r3, [r3, #32]
 80030f2:	4a57      	ldr	r2, [pc, #348]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 0304 	bic.w	r3, r3, #4
 80030f8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	68db      	ldr	r3, [r3, #12]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d015      	beq.n	800312e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003102:	f7fe fcf1 	bl	8001ae8 <HAL_GetTick>
 8003106:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003108:	e00a      	b.n	8003120 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800310a:	f7fe fced 	bl	8001ae8 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0b1      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003120:	4b4b      	ldr	r3, [pc, #300]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f003 0302 	and.w	r3, r3, #2
 8003128:	2b00      	cmp	r3, #0
 800312a:	d0ee      	beq.n	800310a <HAL_RCC_OscConfig+0x37e>
 800312c:	e014      	b.n	8003158 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800312e:	f7fe fcdb 	bl	8001ae8 <HAL_GetTick>
 8003132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003134:	e00a      	b.n	800314c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003136:	f7fe fcd7 	bl	8001ae8 <HAL_GetTick>
 800313a:	4602      	mov	r2, r0
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003144:	4293      	cmp	r3, r2
 8003146:	d901      	bls.n	800314c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e09b      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800314c:	4b40      	ldr	r3, [pc, #256]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	f003 0302 	and.w	r3, r3, #2
 8003154:	2b00      	cmp	r3, #0
 8003156:	d1ee      	bne.n	8003136 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003158:	7dfb      	ldrb	r3, [r7, #23]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d105      	bne.n	800316a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800315e:	4b3c      	ldr	r3, [pc, #240]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003160:	69db      	ldr	r3, [r3, #28]
 8003162:	4a3b      	ldr	r2, [pc, #236]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003164:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003168:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	69db      	ldr	r3, [r3, #28]
 800316e:	2b00      	cmp	r3, #0
 8003170:	f000 8087 	beq.w	8003282 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003174:	4b36      	ldr	r3, [pc, #216]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 030c 	and.w	r3, r3, #12
 800317c:	2b08      	cmp	r3, #8
 800317e:	d061      	beq.n	8003244 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
 8003184:	2b02      	cmp	r3, #2
 8003186:	d146      	bne.n	8003216 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003188:	4b33      	ldr	r3, [pc, #204]	@ (8003258 <HAL_RCC_OscConfig+0x4cc>)
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800318e:	f7fe fcab 	bl	8001ae8 <HAL_GetTick>
 8003192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003194:	e008      	b.n	80031a8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003196:	f7fe fca7 	bl	8001ae8 <HAL_GetTick>
 800319a:	4602      	mov	r2, r0
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	1ad3      	subs	r3, r2, r3
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d901      	bls.n	80031a8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80031a4:	2303      	movs	r3, #3
 80031a6:	e06d      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031a8:	4b29      	ldr	r3, [pc, #164]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d1f0      	bne.n	8003196 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031bc:	d108      	bne.n	80031d0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80031be:	4b24      	ldr	r3, [pc, #144]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	4921      	ldr	r1, [pc, #132]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80031d0:	4b1f      	ldr	r3, [pc, #124]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a19      	ldr	r1, [r3, #32]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e0:	430b      	orrs	r3, r1
 80031e2:	491b      	ldr	r1, [pc, #108]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003258 <HAL_RCC_OscConfig+0x4cc>)
 80031ea:	2201      	movs	r2, #1
 80031ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ee:	f7fe fc7b 	bl	8001ae8 <HAL_GetTick>
 80031f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80031f4:	e008      	b.n	8003208 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031f6:	f7fe fc77 	bl	8001ae8 <HAL_GetTick>
 80031fa:	4602      	mov	r2, r0
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	1ad3      	subs	r3, r2, r3
 8003200:	2b02      	cmp	r3, #2
 8003202:	d901      	bls.n	8003208 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003204:	2303      	movs	r3, #3
 8003206:	e03d      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003208:	4b11      	ldr	r3, [pc, #68]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003210:	2b00      	cmp	r3, #0
 8003212:	d0f0      	beq.n	80031f6 <HAL_RCC_OscConfig+0x46a>
 8003214:	e035      	b.n	8003282 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4b10      	ldr	r3, [pc, #64]	@ (8003258 <HAL_RCC_OscConfig+0x4cc>)
 8003218:	2200      	movs	r2, #0
 800321a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800321c:	f7fe fc64 	bl	8001ae8 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003224:	f7fe fc60 	bl	8001ae8 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e026      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003236:	4b06      	ldr	r3, [pc, #24]	@ (8003250 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1f0      	bne.n	8003224 <HAL_RCC_OscConfig+0x498>
 8003242:	e01e      	b.n	8003282 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	69db      	ldr	r3, [r3, #28]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d107      	bne.n	800325c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e019      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
 8003250:	40021000 	.word	0x40021000
 8003254:	40007000 	.word	0x40007000
 8003258:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800325c:	4b0b      	ldr	r3, [pc, #44]	@ (800328c <HAL_RCC_OscConfig+0x500>)
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	429a      	cmp	r2, r3
 800326e:	d106      	bne.n	800327e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327a:	429a      	cmp	r2, r3
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	40021000 	.word	0x40021000

08003290 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
 8003298:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	e0d0      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032a4:	4b6a      	ldr	r3, [pc, #424]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0307 	and.w	r3, r3, #7
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d910      	bls.n	80032d4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032b2:	4b67      	ldr	r3, [pc, #412]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f023 0207 	bic.w	r2, r3, #7
 80032ba:	4965      	ldr	r1, [pc, #404]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	4313      	orrs	r3, r2
 80032c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032c2:	4b63      	ldr	r3, [pc, #396]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0307 	and.w	r3, r3, #7
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	429a      	cmp	r2, r3
 80032ce:	d001      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0b8      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0302 	and.w	r3, r3, #2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d020      	beq.n	8003322 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0304 	and.w	r3, r3, #4
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d005      	beq.n	80032f8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032ec:	4b59      	ldr	r3, [pc, #356]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	4a58      	ldr	r2, [pc, #352]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80032f2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80032f6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d005      	beq.n	8003310 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003304:	4b53      	ldr	r3, [pc, #332]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	4a52      	ldr	r2, [pc, #328]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800330a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800330e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003310:	4b50      	ldr	r3, [pc, #320]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	689b      	ldr	r3, [r3, #8]
 800331c:	494d      	ldr	r1, [pc, #308]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	d040      	beq.n	80033b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	2b01      	cmp	r3, #1
 8003334:	d107      	bne.n	8003346 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003336:	4b47      	ldr	r3, [pc, #284]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800333e:	2b00      	cmp	r3, #0
 8003340:	d115      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07f      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d107      	bne.n	800335e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800334e:	4b41      	ldr	r3, [pc, #260]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d109      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e073      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800335e:	4b3d      	ldr	r3, [pc, #244]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e06b      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800336e:	4b39      	ldr	r3, [pc, #228]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f023 0203 	bic.w	r2, r3, #3
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	4936      	ldr	r1, [pc, #216]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	4313      	orrs	r3, r2
 800337e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003380:	f7fe fbb2 	bl	8001ae8 <HAL_GetTick>
 8003384:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003386:	e00a      	b.n	800339e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003388:	f7fe fbae 	bl	8001ae8 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003396:	4293      	cmp	r3, r2
 8003398:	d901      	bls.n	800339e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e053      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800339e:	4b2d      	ldr	r3, [pc, #180]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f003 020c 	and.w	r2, r3, #12
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d1eb      	bne.n	8003388 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033b0:	4b27      	ldr	r3, [pc, #156]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d210      	bcs.n	80033e0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033be:	4b24      	ldr	r3, [pc, #144]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f023 0207 	bic.w	r2, r3, #7
 80033c6:	4922      	ldr	r1, [pc, #136]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033ce:	4b20      	ldr	r3, [pc, #128]	@ (8003450 <HAL_RCC_ClockConfig+0x1c0>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 0307 	and.w	r3, r3, #7
 80033d6:	683a      	ldr	r2, [r7, #0]
 80033d8:	429a      	cmp	r2, r3
 80033da:	d001      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e032      	b.n	8003446 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0304 	and.w	r3, r3, #4
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d008      	beq.n	80033fe <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033ec:	4b19      	ldr	r3, [pc, #100]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4916      	ldr	r1, [pc, #88]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d009      	beq.n	800341e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800340a:	4b12      	ldr	r3, [pc, #72]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	00db      	lsls	r3, r3, #3
 8003418:	490e      	ldr	r1, [pc, #56]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 800341a:	4313      	orrs	r3, r2
 800341c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800341e:	f000 f82d 	bl	800347c <HAL_RCC_GetSysClockFreq>
 8003422:	4602      	mov	r2, r0
 8003424:	4b0b      	ldr	r3, [pc, #44]	@ (8003454 <HAL_RCC_ClockConfig+0x1c4>)
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	091b      	lsrs	r3, r3, #4
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	490a      	ldr	r1, [pc, #40]	@ (8003458 <HAL_RCC_ClockConfig+0x1c8>)
 8003430:	5ccb      	ldrb	r3, [r1, r3]
 8003432:	fa22 f303 	lsr.w	r3, r2, r3
 8003436:	4a09      	ldr	r2, [pc, #36]	@ (800345c <HAL_RCC_ClockConfig+0x1cc>)
 8003438:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800343a:	4b09      	ldr	r3, [pc, #36]	@ (8003460 <HAL_RCC_ClockConfig+0x1d0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4618      	mov	r0, r3
 8003440:	f7fe fb10 	bl	8001a64 <HAL_InitTick>

  return HAL_OK;
 8003444:	2300      	movs	r3, #0
}
 8003446:	4618      	mov	r0, r3
 8003448:	3710      	adds	r7, #16
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40022000 	.word	0x40022000
 8003454:	40021000 	.word	0x40021000
 8003458:	0800ae70 	.word	0x0800ae70
 800345c:	20000000 	.word	0x20000000
 8003460:	20000004 	.word	0x20000004

08003464 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003464:	b480      	push	{r7}
 8003466:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003468:	4b03      	ldr	r3, [pc, #12]	@ (8003478 <HAL_RCC_EnableCSS+0x14>)
 800346a:	2201      	movs	r2, #1
 800346c:	601a      	str	r2, [r3, #0]
}
 800346e:	bf00      	nop
 8003470:	46bd      	mov	sp, r7
 8003472:	bc80      	pop	{r7}
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	4242004c 	.word	0x4242004c

0800347c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800347c:	b480      	push	{r7}
 800347e:	b087      	sub	sp, #28
 8003480:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003482:	2300      	movs	r3, #0
 8003484:	60fb      	str	r3, [r7, #12]
 8003486:	2300      	movs	r3, #0
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	2300      	movs	r3, #0
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	2300      	movs	r3, #0
 8003490:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003492:	2300      	movs	r3, #0
 8003494:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003496:	4b1e      	ldr	r3, [pc, #120]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x94>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	f003 030c 	and.w	r3, r3, #12
 80034a2:	2b04      	cmp	r3, #4
 80034a4:	d002      	beq.n	80034ac <HAL_RCC_GetSysClockFreq+0x30>
 80034a6:	2b08      	cmp	r3, #8
 80034a8:	d003      	beq.n	80034b2 <HAL_RCC_GetSysClockFreq+0x36>
 80034aa:	e027      	b.n	80034fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80034ac:	4b19      	ldr	r3, [pc, #100]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x98>)
 80034ae:	613b      	str	r3, [r7, #16]
      break;
 80034b0:	e027      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	0c9b      	lsrs	r3, r3, #18
 80034b6:	f003 030f 	and.w	r3, r3, #15
 80034ba:	4a17      	ldr	r2, [pc, #92]	@ (8003518 <HAL_RCC_GetSysClockFreq+0x9c>)
 80034bc:	5cd3      	ldrb	r3, [r2, r3]
 80034be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d010      	beq.n	80034ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80034ca:	4b11      	ldr	r3, [pc, #68]	@ (8003510 <HAL_RCC_GetSysClockFreq+0x94>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	0c5b      	lsrs	r3, r3, #17
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	4a11      	ldr	r2, [pc, #68]	@ (800351c <HAL_RCC_GetSysClockFreq+0xa0>)
 80034d6:	5cd3      	ldrb	r3, [r2, r3]
 80034d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x98>)
 80034de:	fb03 f202 	mul.w	r2, r3, r2
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e004      	b.n	80034f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003520 <HAL_RCC_GetSysClockFreq+0xa4>)
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	613b      	str	r3, [r7, #16]
      break;
 80034fa:	e002      	b.n	8003502 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80034fc:	4b05      	ldr	r3, [pc, #20]	@ (8003514 <HAL_RCC_GetSysClockFreq+0x98>)
 80034fe:	613b      	str	r3, [r7, #16]
      break;
 8003500:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003502:	693b      	ldr	r3, [r7, #16]
}
 8003504:	4618      	mov	r0, r3
 8003506:	371c      	adds	r7, #28
 8003508:	46bd      	mov	sp, r7
 800350a:	bc80      	pop	{r7}
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40021000 	.word	0x40021000
 8003514:	007a1200 	.word	0x007a1200
 8003518:	0800ae88 	.word	0x0800ae88
 800351c:	0800ae98 	.word	0x0800ae98
 8003520:	003d0900 	.word	0x003d0900

08003524 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003524:	b480      	push	{r7}
 8003526:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003528:	4b02      	ldr	r3, [pc, #8]	@ (8003534 <HAL_RCC_GetHCLKFreq+0x10>)
 800352a:	681b      	ldr	r3, [r3, #0]
}
 800352c:	4618      	mov	r0, r3
 800352e:	46bd      	mov	sp, r7
 8003530:	bc80      	pop	{r7}
 8003532:	4770      	bx	lr
 8003534:	20000000 	.word	0x20000000

08003538 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800353c:	f7ff fff2 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003540:	4602      	mov	r2, r0
 8003542:	4b05      	ldr	r3, [pc, #20]	@ (8003558 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	0a1b      	lsrs	r3, r3, #8
 8003548:	f003 0307 	and.w	r3, r3, #7
 800354c:	4903      	ldr	r1, [pc, #12]	@ (800355c <HAL_RCC_GetPCLK1Freq+0x24>)
 800354e:	5ccb      	ldrb	r3, [r1, r3]
 8003550:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003554:	4618      	mov	r0, r3
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	0800ae80 	.word	0x0800ae80

08003560 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003564:	f7ff ffde 	bl	8003524 <HAL_RCC_GetHCLKFreq>
 8003568:	4602      	mov	r2, r0
 800356a:	4b05      	ldr	r3, [pc, #20]	@ (8003580 <HAL_RCC_GetPCLK2Freq+0x20>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	0adb      	lsrs	r3, r3, #11
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	4903      	ldr	r1, [pc, #12]	@ (8003584 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003576:	5ccb      	ldrb	r3, [r1, r3]
 8003578:	fa22 f303 	lsr.w	r3, r2, r3
}
 800357c:	4618      	mov	r0, r3
 800357e:	bd80      	pop	{r7, pc}
 8003580:	40021000 	.word	0x40021000
 8003584:	0800ae80 	.word	0x0800ae80

08003588 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800358c:	4b06      	ldr	r3, [pc, #24]	@ (80035a8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003594:	2b80      	cmp	r3, #128	@ 0x80
 8003596:	d104      	bne.n	80035a2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003598:	f000 f828 	bl	80035ec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800359c:	4b03      	ldr	r3, [pc, #12]	@ (80035ac <HAL_RCC_NMI_IRQHandler+0x24>)
 800359e:	2280      	movs	r2, #128	@ 0x80
 80035a0:	701a      	strb	r2, [r3, #0]
  }
}
 80035a2:	bf00      	nop
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	40021000 	.word	0x40021000
 80035ac:	4002100a 	.word	0x4002100a

080035b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b085      	sub	sp, #20
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80035b8:	4b0a      	ldr	r3, [pc, #40]	@ (80035e4 <RCC_Delay+0x34>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a0a      	ldr	r2, [pc, #40]	@ (80035e8 <RCC_Delay+0x38>)
 80035be:	fba2 2303 	umull	r2, r3, r2, r3
 80035c2:	0a5b      	lsrs	r3, r3, #9
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	fb02 f303 	mul.w	r3, r2, r3
 80035ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80035cc:	bf00      	nop
  }
  while (Delay --);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1e5a      	subs	r2, r3, #1
 80035d2:	60fa      	str	r2, [r7, #12]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d1f9      	bne.n	80035cc <RCC_Delay+0x1c>
}
 80035d8:	bf00      	nop
 80035da:	bf00      	nop
 80035dc:	3714      	adds	r7, #20
 80035de:	46bd      	mov	sp, r7
 80035e0:	bc80      	pop	{r7}
 80035e2:	4770      	bx	lr
 80035e4:	20000000 	.word	0x20000000
 80035e8:	10624dd3 	.word	0x10624dd3

080035ec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80035f0:	bf00      	nop
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	613b      	str	r3, [r7, #16]
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d07d      	beq.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003618:	4b4f      	ldr	r3, [pc, #316]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800361a:	69db      	ldr	r3, [r3, #28]
 800361c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d10d      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003624:	4b4c      	ldr	r3, [pc, #304]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003626:	69db      	ldr	r3, [r3, #28]
 8003628:	4a4b      	ldr	r2, [pc, #300]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800362e:	61d3      	str	r3, [r2, #28]
 8003630:	4b49      	ldr	r3, [pc, #292]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003632:	69db      	ldr	r3, [r3, #28]
 8003634:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003638:	60bb      	str	r3, [r7, #8]
 800363a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800363c:	2301      	movs	r3, #1
 800363e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003640:	4b46      	ldr	r3, [pc, #280]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003648:	2b00      	cmp	r3, #0
 800364a:	d118      	bne.n	800367e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800364c:	4b43      	ldr	r3, [pc, #268]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a42      	ldr	r2, [pc, #264]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003656:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003658:	f7fe fa46 	bl	8001ae8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800365e:	e008      	b.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003660:	f7fe fa42 	bl	8001ae8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e06d      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003672:	4b3a      	ldr	r3, [pc, #232]	@ (800375c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800367e:	4b36      	ldr	r3, [pc, #216]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003680:	6a1b      	ldr	r3, [r3, #32]
 8003682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003686:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d02e      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	429a      	cmp	r2, r3
 800369a:	d027      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800369c:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369e:	6a1b      	ldr	r3, [r3, #32]
 80036a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036a4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80036a6:	4b2e      	ldr	r3, [pc, #184]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80036ac:	4b2c      	ldr	r3, [pc, #176]	@ (8003760 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80036b2:	4a29      	ldr	r2, [pc, #164]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d014      	beq.n	80036ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c2:	f7fe fa11 	bl	8001ae8 <HAL_GetTick>
 80036c6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c8:	e00a      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ca:	f7fe fa0d 	bl	8001ae8 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d8:	4293      	cmp	r3, r2
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e036      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ee      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80036ec:	4b1a      	ldr	r3, [pc, #104]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	4917      	ldr	r1, [pc, #92]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036fa:	4313      	orrs	r3, r2
 80036fc:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fe:	7dfb      	ldrb	r3, [r7, #23]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d105      	bne.n	8003710 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003704:	4b14      	ldr	r3, [pc, #80]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	4a13      	ldr	r2, [pc, #76]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800370a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0302 	and.w	r3, r3, #2
 8003718:	2b00      	cmp	r3, #0
 800371a:	d008      	beq.n	800372e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800371c:	4b0e      	ldr	r3, [pc, #56]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	490b      	ldr	r1, [pc, #44]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800372a:	4313      	orrs	r3, r2
 800372c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0310 	and.w	r3, r3, #16
 8003736:	2b00      	cmp	r3, #0
 8003738:	d008      	beq.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800373a:	4b07      	ldr	r3, [pc, #28]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	68db      	ldr	r3, [r3, #12]
 8003746:	4904      	ldr	r1, [pc, #16]	@ (8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003748:	4313      	orrs	r3, r2
 800374a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3718      	adds	r7, #24
 8003752:	46bd      	mov	sp, r7
 8003754:	bd80      	pop	{r7, pc}
 8003756:	bf00      	nop
 8003758:	40021000 	.word	0x40021000
 800375c:	40007000 	.word	0x40007000
 8003760:	42420440 	.word	0x42420440

08003764 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d101      	bne.n	8003776 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003772:	2301      	movs	r3, #1
 8003774:	e042      	b.n	80037fc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d106      	bne.n	8003790 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7fe f884 	bl	8001898 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2224      	movs	r2, #36	@ 0x24
 8003794:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80037a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f001 f8b9 	bl	8004920 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691a      	ldr	r2, [r3, #16]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80037bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	695a      	ldr	r2, [r3, #20]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80037cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	68da      	ldr	r2, [r3, #12]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80037dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2220      	movs	r2, #32
 80037e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2220      	movs	r2, #32
 80037f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3708      	adds	r7, #8
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b08a      	sub	sp, #40	@ 0x28
 8003808:	af02      	add	r7, sp, #8
 800380a:	60f8      	str	r0, [r7, #12]
 800380c:	60b9      	str	r1, [r7, #8]
 800380e:	603b      	str	r3, [r7, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003814:	2300      	movs	r3, #0
 8003816:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b20      	cmp	r3, #32
 8003822:	d16d      	bne.n	8003900 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_UART_Transmit+0x2c>
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e066      	b.n	8003902 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2221      	movs	r2, #33	@ 0x21
 800383e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003842:	f7fe f951 	bl	8001ae8 <HAL_GetTick>
 8003846:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	88fa      	ldrh	r2, [r7, #6]
 800384c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	88fa      	ldrh	r2, [r7, #6]
 8003852:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800385c:	d108      	bne.n	8003870 <HAL_UART_Transmit+0x6c>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	691b      	ldr	r3, [r3, #16]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d104      	bne.n	8003870 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800386a:	68bb      	ldr	r3, [r7, #8]
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e003      	b.n	8003878 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003874:	2300      	movs	r3, #0
 8003876:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003878:	e02a      	b.n	80038d0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	2200      	movs	r2, #0
 8003882:	2180      	movs	r1, #128	@ 0x80
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 fd81 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e036      	b.n	8003902 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d10b      	bne.n	80038b2 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389a:	69bb      	ldr	r3, [r7, #24]
 800389c:	881b      	ldrh	r3, [r3, #0]
 800389e:	461a      	mov	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80038aa:	69bb      	ldr	r3, [r7, #24]
 80038ac:	3302      	adds	r3, #2
 80038ae:	61bb      	str	r3, [r7, #24]
 80038b0:	e007      	b.n	80038c2 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	781a      	ldrb	r2, [r3, #0]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	3301      	adds	r3, #1
 80038c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3b01      	subs	r3, #1
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1cf      	bne.n	800387a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	9300      	str	r3, [sp, #0]
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	2200      	movs	r2, #0
 80038e2:	2140      	movs	r1, #64	@ 0x40
 80038e4:	68f8      	ldr	r0, [r7, #12]
 80038e6:	f000 fd51 	bl	800438c <UART_WaitOnFlagUntilTimeout>
 80038ea:	4603      	mov	r3, r0
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d001      	beq.n	80038f4 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 80038f0:	2303      	movs	r3, #3
 80038f2:	e006      	b.n	8003902 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2220      	movs	r2, #32
 80038f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80038fc:	2300      	movs	r3, #0
 80038fe:	e000      	b.n	8003902 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003900:	2302      	movs	r3, #2
  }
}
 8003902:	4618      	mov	r0, r3
 8003904:	3720      	adds	r7, #32
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08c      	sub	sp, #48	@ 0x30
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	4613      	mov	r3, r2
 8003918:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b20      	cmp	r3, #32
 8003924:	d156      	bne.n	80039d4 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8003926:	68bb      	ldr	r3, [r7, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d002      	beq.n	8003932 <HAL_UART_Transmit_DMA+0x26>
 800392c:	88fb      	ldrh	r3, [r7, #6]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e04f      	b.n	80039d6 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	88fa      	ldrh	r2, [r7, #6]
 8003940:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	88fa      	ldrh	r2, [r7, #6]
 8003946:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2200      	movs	r2, #0
 800394c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2221      	movs	r2, #33	@ 0x21
 8003952:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800395a:	4a21      	ldr	r2, [pc, #132]	@ (80039e0 <HAL_UART_Transmit_DMA+0xd4>)
 800395c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003962:	4a20      	ldr	r2, [pc, #128]	@ (80039e4 <HAL_UART_Transmit_DMA+0xd8>)
 8003964:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800396a:	4a1f      	ldr	r2, [pc, #124]	@ (80039e8 <HAL_UART_Transmit_DMA+0xdc>)
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003972:	2200      	movs	r2, #0
 8003974:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003976:	f107 0308 	add.w	r3, r7, #8
 800397a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003980:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003982:	6819      	ldr	r1, [r3, #0]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	3304      	adds	r3, #4
 800398a:	461a      	mov	r2, r3
 800398c:	88fb      	ldrh	r3, [r7, #6]
 800398e:	f7fe fddf 	bl	8002550 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800399a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	3314      	adds	r3, #20
 80039a2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a4:	69bb      	ldr	r3, [r7, #24]
 80039a6:	e853 3f00 	ldrex	r3, [r3]
 80039aa:	617b      	str	r3, [r7, #20]
   return(result);
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80039b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	3314      	adds	r3, #20
 80039ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80039bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80039be:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6a39      	ldr	r1, [r7, #32]
 80039c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e5      	bne.n	800399c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80039d0:	2300      	movs	r3, #0
 80039d2:	e000      	b.n	80039d6 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80039d4:	2302      	movs	r3, #2
  }
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3730      	adds	r7, #48	@ 0x30
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	080040db 	.word	0x080040db
 80039e4:	08004175 	.word	0x08004175
 80039e8:	080042f9 	.word	0x080042f9

080039ec <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b20      	cmp	r3, #32
 8003a04:	d112      	bne.n	8003a2c <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d002      	beq.n	8003a12 <HAL_UART_Receive_DMA+0x26>
 8003a0c:	88fb      	ldrh	r3, [r7, #6]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d101      	bne.n	8003a16 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8003a12:	2301      	movs	r3, #1
 8003a14:	e00b      	b.n	8003a2e <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	461a      	mov	r2, r3
 8003a20:	68b9      	ldr	r1, [r7, #8]
 8003a22:	68f8      	ldr	r0, [r7, #12]
 8003a24:	f000 fd20 	bl	8004468 <UART_Start_Receive_DMA>
 8003a28:	4603      	mov	r3, r0
 8003a2a:	e000      	b.n	8003a2e <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a2c:	2302      	movs	r3, #2
  }
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b09a      	sub	sp, #104	@ 0x68
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003a4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003a50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a54:	667b      	str	r3, [r7, #100]	@ 0x64
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003a5e:	657a      	str	r2, [r7, #84]	@ 0x54
 8003a60:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003a64:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003a6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	3314      	adds	r3, #20
 8003a78:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a7c:	e853 3f00 	ldrex	r3, [r3]
 8003a80:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a84:	f023 0301 	bic.w	r3, r3, #1
 8003a88:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3314      	adds	r3, #20
 8003a90:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a92:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a96:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a98:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a9a:	e841 2300 	strex	r3, r2, [r1]
 8003a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003aa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d1e5      	bne.n	8003a72 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d119      	bne.n	8003ae2 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ab6:	6a3b      	ldr	r3, [r7, #32]
 8003ab8:	e853 3f00 	ldrex	r3, [r3]
 8003abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	f023 0310 	bic.w	r3, r3, #16
 8003ac4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	330c      	adds	r3, #12
 8003acc:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ad6:	e841 2300 	strex	r3, r2, [r1]
 8003ada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1e5      	bne.n	8003aae <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d036      	beq.n	8003b5e <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	3314      	adds	r3, #20
 8003af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	e853 3f00 	ldrex	r3, [r3]
 8003afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3314      	adds	r3, #20
 8003b0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b10:	61ba      	str	r2, [r7, #24]
 8003b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b14:	6979      	ldr	r1, [r7, #20]
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	e841 2300 	strex	r3, r2, [r1]
 8003b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1e5      	bne.n	8003af0 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d018      	beq.n	8003b5e <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b30:	2200      	movs	r2, #0
 8003b32:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b38:	4618      	mov	r0, r3
 8003b3a:	f7fe fd69 	bl	8002610 <HAL_DMA_Abort>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b48:	4618      	mov	r0, r3
 8003b4a:	f7fe ff1b 	bl	8002984 <HAL_DMA_GetError>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d104      	bne.n	8003b5e <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2210      	movs	r2, #16
 8003b58:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003b5a:	2303      	movs	r3, #3
 8003b5c:	e00a      	b.n	8003b74 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3768      	adds	r7, #104	@ 0x68
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bb2:	f003 030f 	and.w	r3, r3, #15
 8003bb6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003bba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10f      	bne.n	8003be2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bc6:	f003 0320 	and.w	r3, r3, #32
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_UART_IRQHandler+0x66>
 8003bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bd2:	f003 0320 	and.w	r3, r3, #32
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fde2 	bl	80047a4 <UART_Receive_IT>
      return;
 8003be0:	e25b      	b.n	800409a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003be2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 80de 	beq.w	8003da8 <HAL_UART_IRQHandler+0x22c>
 8003bec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d106      	bne.n	8003c06 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bfc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	f000 80d1 	beq.w	8003da8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c0a:	f003 0301 	and.w	r3, r3, #1
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00b      	beq.n	8003c2a <HAL_UART_IRQHandler+0xae>
 8003c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d005      	beq.n	8003c2a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c22:	f043 0201 	orr.w	r2, r3, #1
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c2e:	f003 0304 	and.w	r3, r3, #4
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00b      	beq.n	8003c4e <HAL_UART_IRQHandler+0xd2>
 8003c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d005      	beq.n	8003c4e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c46:	f043 0202 	orr.w	r2, r3, #2
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c52:	f003 0302 	and.w	r3, r3, #2
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_UART_IRQHandler+0xf6>
 8003c5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6a:	f043 0204 	orr.w	r2, r3, #4
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d011      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x126>
 8003c7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d105      	bne.n	8003c96 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c8a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d005      	beq.n	8003ca2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c9a:	f043 0208 	orr.w	r2, r3, #8
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	f000 81f2 	beq.w	8004090 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003cac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cb0:	f003 0320 	and.w	r3, r3, #32
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d008      	beq.n	8003cca <HAL_UART_IRQHandler+0x14e>
 8003cb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003cbc:	f003 0320 	and.w	r3, r3, #32
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d002      	beq.n	8003cca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fd6d 	bl	80047a4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	bf14      	ite	ne
 8003cd8:	2301      	movne	r3, #1
 8003cda:	2300      	moveq	r3, #0
 8003cdc:	b2db      	uxtb	r3, r3
 8003cde:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d103      	bne.n	8003cf6 <HAL_UART_IRQHandler+0x17a>
 8003cee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d04f      	beq.n	8003d96 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f000 fc77 	bl	80045ea <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d041      	beq.n	8003d8e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d14:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003d18:	e853 3f00 	ldrex	r3, [r3]
 8003d1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003d20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003d24:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d28:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3314      	adds	r3, #20
 8003d32:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003d36:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003d3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003d42:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003d46:	e841 2300 	strex	r3, r2, [r1]
 8003d4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003d4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1d9      	bne.n	8003d0a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d013      	beq.n	8003d86 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d62:	4a7e      	ldr	r2, [pc, #504]	@ (8003f5c <HAL_UART_IRQHandler+0x3e0>)
 8003d64:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe fc8c 	bl	8002688 <HAL_DMA_Abort_IT>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d016      	beq.n	8003da4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d80:	4610      	mov	r0, r2
 8003d82:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d84:	e00e      	b.n	8003da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f001 fa0d 	bl	80051a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d8c:	e00a      	b.n	8003da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f001 fa09 	bl	80051a6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d94:	e006      	b.n	8003da4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f001 fa05 	bl	80051a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003da2:	e175      	b.n	8004090 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003da4:	bf00      	nop
    return;
 8003da6:	e173      	b.n	8004090 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f040 814f 	bne.w	8004050 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003db2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003db6:	f003 0310 	and.w	r3, r3, #16
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	f000 8148 	beq.w	8004050 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003dc4:	f003 0310 	and.w	r3, r3, #16
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 8141 	beq.w	8004050 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003dce:	2300      	movs	r3, #0
 8003dd0:	60bb      	str	r3, [r7, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	60bb      	str	r3, [r7, #8]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	60bb      	str	r3, [r7, #8]
 8003de2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	695b      	ldr	r3, [r3, #20]
 8003dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80b6 	beq.w	8003f60 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003e00:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	f000 8145 	beq.w	8004094 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003e0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e12:	429a      	cmp	r2, r3
 8003e14:	f080 813e 	bcs.w	8004094 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003e1e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b20      	cmp	r3, #32
 8003e28:	f000 8088 	beq.w	8003f3c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e36:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003e3a:	e853 3f00 	ldrex	r3, [r3]
 8003e3e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003e46:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e4a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	330c      	adds	r3, #12
 8003e54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003e58:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003e5c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e60:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e64:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e68:	e841 2300 	strex	r3, r2, [r1]
 8003e6c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e70:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d1d9      	bne.n	8003e2c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	3314      	adds	r3, #20
 8003e7e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e8a:	f023 0301 	bic.w	r3, r3, #1
 8003e8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e9c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003ea0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ea2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003ea4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003ea8:	e841 2300 	strex	r3, r2, [r1]
 8003eac:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003eae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1e1      	bne.n	8003e78 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	3314      	adds	r3, #20
 8003eba:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ebc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003ebe:	e853 3f00 	ldrex	r3, [r3]
 8003ec2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003ec4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003ec6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003eca:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3314      	adds	r3, #20
 8003ed4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003ed8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003eda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003edc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003ede:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003ee0:	e841 2300 	strex	r3, r2, [r1]
 8003ee4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003ee6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1e3      	bne.n	8003eb4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2220      	movs	r2, #32
 8003ef0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	330c      	adds	r3, #12
 8003f00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003f04:	e853 3f00 	ldrex	r3, [r3]
 8003f08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003f0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003f0c:	f023 0310 	bic.w	r3, r3, #16
 8003f10:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	330c      	adds	r3, #12
 8003f1a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003f1e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003f20:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f22:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003f24:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003f26:	e841 2300 	strex	r3, r2, [r1]
 8003f2a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003f2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1e3      	bne.n	8003efa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fb6a 	bl	8002610 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	4619      	mov	r1, r3
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f8b6 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f58:	e09c      	b.n	8004094 <HAL_UART_IRQHandler+0x518>
 8003f5a:	bf00      	nop
 8003f5c:	080046af 	.word	0x080046af
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f74:	b29b      	uxth	r3, r3
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 808e 	beq.w	8004098 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f7c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	f000 8089 	beq.w	8004098 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	330c      	adds	r3, #12
 8003f8c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f98:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f9c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	330c      	adds	r3, #12
 8003fa6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003faa:	647a      	str	r2, [r7, #68]	@ 0x44
 8003fac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003fb0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d1e3      	bne.n	8003f86 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	3314      	adds	r3, #20
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	f023 0301 	bic.w	r3, r3, #1
 8003fd4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3314      	adds	r3, #20
 8003fde:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003fe2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003fe8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e3      	bne.n	8003fbe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2220      	movs	r2, #32
 8003ffa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	330c      	adds	r3, #12
 800400a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	e853 3f00 	ldrex	r3, [r3]
 8004012:	60fb      	str	r3, [r7, #12]
   return(result);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0310 	bic.w	r3, r3, #16
 800401a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	330c      	adds	r3, #12
 8004024:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004028:	61fa      	str	r2, [r7, #28]
 800402a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800402c:	69b9      	ldr	r1, [r7, #24]
 800402e:	69fa      	ldr	r2, [r7, #28]
 8004030:	e841 2300 	strex	r3, r2, [r1]
 8004034:	617b      	str	r3, [r7, #20]
   return(result);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d1e3      	bne.n	8004004 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2202      	movs	r2, #2
 8004040:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004042:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f83b 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800404e:	e023      	b.n	8004098 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004050:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004054:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <HAL_UART_IRQHandler+0x4f4>
 800405c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004064:	2b00      	cmp	r3, #0
 8004066:	d003      	beq.n	8004070 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004068:	6878      	ldr	r0, [r7, #4]
 800406a:	f000 fb34 	bl	80046d6 <UART_Transmit_IT>
    return;
 800406e:	e014      	b.n	800409a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004074:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00e      	beq.n	800409a <HAL_UART_IRQHandler+0x51e>
 800407c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004080:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004084:	2b00      	cmp	r3, #0
 8004086:	d008      	beq.n	800409a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 fb73 	bl	8004774 <UART_EndTransmit_IT>
    return;
 800408e:	e004      	b.n	800409a <HAL_UART_IRQHandler+0x51e>
    return;
 8004090:	bf00      	nop
 8004092:	e002      	b.n	800409a <HAL_UART_IRQHandler+0x51e>
      return;
 8004094:	bf00      	nop
 8004096:	e000      	b.n	800409a <HAL_UART_IRQHandler+0x51e>
      return;
 8004098:	bf00      	nop
  }
}
 800409a:	37e8      	adds	r7, #232	@ 0xe8
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bc80      	pop	{r7}
 80040b0:	4770      	bx	lr

080040b2 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80040b2:	b480      	push	{r7}
 80040b4:	b083      	sub	sp, #12
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80040ba:	bf00      	nop
 80040bc:	370c      	adds	r7, #12
 80040be:	46bd      	mov	sp, r7
 80040c0:	bc80      	pop	{r7}
 80040c2:	4770      	bx	lr

080040c4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b083      	sub	sp, #12
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	460b      	mov	r3, r1
 80040ce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040d0:	bf00      	nop
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	4770      	bx	lr

080040da <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80040da:	b580      	push	{r7, lr}
 80040dc:	b090      	sub	sp, #64	@ 0x40
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0320 	and.w	r3, r3, #32
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d137      	bne.n	8004166 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80040f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040f8:	2200      	movs	r2, #0
 80040fa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80040fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	623b      	str	r3, [r7, #32]
   return(result);
 800410c:	6a3b      	ldr	r3, [r7, #32]
 800410e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004112:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800411c:	633a      	str	r2, [r7, #48]	@ 0x30
 800411e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004122:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800412a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004130:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	330c      	adds	r3, #12
 8004136:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	e853 3f00 	ldrex	r3, [r3]
 800413e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004146:	637b      	str	r3, [r7, #52]	@ 0x34
 8004148:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	330c      	adds	r3, #12
 800414e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004150:	61fa      	str	r2, [r7, #28]
 8004152:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004154:	69b9      	ldr	r1, [r7, #24]
 8004156:	69fa      	ldr	r2, [r7, #28]
 8004158:	e841 2300 	strex	r3, r2, [r1]
 800415c:	617b      	str	r3, [r7, #20]
   return(result);
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d1e5      	bne.n	8004130 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004164:	e002      	b.n	800416c <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004166:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004168:	f000 fff9 	bl	800515e <HAL_UART_TxCpltCallback>
}
 800416c:	bf00      	nop
 800416e:	3740      	adds	r7, #64	@ 0x40
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004180:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004182:	68f8      	ldr	r0, [r7, #12]
 8004184:	f7ff ff8c 	bl	80040a0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004188:	bf00      	nop
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b09c      	sub	sp, #112	@ 0x70
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0320 	and.w	r3, r3, #32
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d172      	bne.n	8004292 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80041ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ae:	2200      	movs	r2, #0
 80041b0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	330c      	adds	r3, #12
 80041b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041bc:	e853 3f00 	ldrex	r3, [r3]
 80041c0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80041c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80041c4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041ca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	330c      	adds	r3, #12
 80041d0:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80041d2:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041d4:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041d8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041da:	e841 2300 	strex	r3, r2, [r1]
 80041de:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d1e5      	bne.n	80041b2 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	3314      	adds	r3, #20
 80041ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f0:	e853 3f00 	ldrex	r3, [r3]
 80041f4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80041f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041f8:	f023 0301 	bic.w	r3, r3, #1
 80041fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80041fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	3314      	adds	r3, #20
 8004204:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004206:	647a      	str	r2, [r7, #68]	@ 0x44
 8004208:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800420c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800420e:	e841 2300 	strex	r3, r2, [r1]
 8004212:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004216:	2b00      	cmp	r3, #0
 8004218:	d1e5      	bne.n	80041e6 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800421a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	3314      	adds	r3, #20
 8004220:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	623b      	str	r3, [r7, #32]
   return(result);
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004230:	663b      	str	r3, [r7, #96]	@ 0x60
 8004232:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	3314      	adds	r3, #20
 8004238:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800423a:	633a      	str	r2, [r7, #48]	@ 0x30
 800423c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004240:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e5      	bne.n	800421a <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800424e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004250:	2220      	movs	r2, #32
 8004252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004256:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800425a:	2b01      	cmp	r3, #1
 800425c:	d119      	bne.n	8004292 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	330c      	adds	r3, #12
 8004264:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	e853 3f00 	ldrex	r3, [r3]
 800426c:	60fb      	str	r3, [r7, #12]
   return(result);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f023 0310 	bic.w	r3, r3, #16
 8004274:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004276:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	330c      	adds	r3, #12
 800427c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800427e:	61fa      	str	r2, [r7, #28]
 8004280:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004282:	69b9      	ldr	r1, [r7, #24]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	e841 2300 	strex	r3, r2, [r1]
 800428a:	617b      	str	r3, [r7, #20]
   return(result);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d1e5      	bne.n	800425e <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004294:	2200      	movs	r2, #0
 8004296:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004298:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	2b01      	cmp	r3, #1
 800429e:	d106      	bne.n	80042ae <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80042a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80042a2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042a4:	4619      	mov	r1, r3
 80042a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80042a8:	f7ff ff0c 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042ac:	e002      	b.n	80042b4 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80042ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80042b0:	f000 ff67 	bl	8005182 <HAL_UART_RxCpltCallback>
}
 80042b4:	bf00      	nop
 80042b6:	3770      	adds	r7, #112	@ 0x70
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}

080042bc <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b084      	sub	sp, #16
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c8:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	2201      	movs	r2, #1
 80042ce:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d108      	bne.n	80042ea <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	b29b      	uxth	r3, r3
 80042e0:	4619      	mov	r1, r3
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f7ff feee 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80042e8:	e002      	b.n	80042f0 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f7ff fee1 	bl	80040b2 <HAL_UART_RxHalfCpltCallback>
}
 80042f0:	bf00      	nop
 80042f2:	3710      	adds	r7, #16
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}

080042f8 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b084      	sub	sp, #16
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004300:	2300      	movs	r3, #0
 8004302:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004308:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	695b      	ldr	r3, [r3, #20]
 8004310:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004314:	2b00      	cmp	r3, #0
 8004316:	bf14      	ite	ne
 8004318:	2301      	movne	r3, #1
 800431a:	2300      	moveq	r3, #0
 800431c:	b2db      	uxtb	r3, r3
 800431e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004326:	b2db      	uxtb	r3, r3
 8004328:	2b21      	cmp	r3, #33	@ 0x21
 800432a:	d108      	bne.n	800433e <UART_DMAError+0x46>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	2200      	movs	r2, #0
 8004336:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8004338:	68b8      	ldr	r0, [r7, #8]
 800433a:	f000 f92f 	bl	800459c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004348:	2b00      	cmp	r3, #0
 800434a:	bf14      	ite	ne
 800434c:	2301      	movne	r3, #1
 800434e:	2300      	moveq	r3, #0
 8004350:	b2db      	uxtb	r3, r3
 8004352:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800435a:	b2db      	uxtb	r3, r3
 800435c:	2b22      	cmp	r3, #34	@ 0x22
 800435e:	d108      	bne.n	8004372 <UART_DMAError+0x7a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d005      	beq.n	8004372 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	2200      	movs	r2, #0
 800436a:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800436c:	68b8      	ldr	r0, [r7, #8]
 800436e:	f000 f93c 	bl	80045ea <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800437e:	68b8      	ldr	r0, [r7, #8]
 8004380:	f000 ff11 	bl	80051a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004384:	bf00      	nop
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}

0800438c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b090      	sub	sp, #64	@ 0x40
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	4613      	mov	r3, r2
 800439a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800439c:	e050      	b.n	8004440 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800439e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043a4:	d04c      	beq.n	8004440 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80043a6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d007      	beq.n	80043bc <UART_WaitOnFlagUntilTimeout+0x30>
 80043ac:	f7fd fb9c 	bl	8001ae8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d241      	bcs.n	8004440 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	330c      	adds	r3, #12
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	e853 3f00 	ldrex	r3, [r3]
 80043ca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ce:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80043d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	330c      	adds	r3, #12
 80043da:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80043dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80043de:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043e2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80043e4:	e841 2300 	strex	r3, r2, [r1]
 80043e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80043ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d1e5      	bne.n	80043bc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	3314      	adds	r3, #20
 80043f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	e853 3f00 	ldrex	r3, [r3]
 80043fe:	613b      	str	r3, [r7, #16]
   return(result);
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	3314      	adds	r3, #20
 800440e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004410:	623a      	str	r2, [r7, #32]
 8004412:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004414:	69f9      	ldr	r1, [r7, #28]
 8004416:	6a3a      	ldr	r2, [r7, #32]
 8004418:	e841 2300 	strex	r3, r2, [r1]
 800441c:	61bb      	str	r3, [r7, #24]
   return(result);
 800441e:	69bb      	ldr	r3, [r7, #24]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d1e5      	bne.n	80043f0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2220      	movs	r2, #32
 8004428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2220      	movs	r2, #32
 8004430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	2200      	movs	r2, #0
 8004438:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 800443c:	2303      	movs	r3, #3
 800443e:	e00f      	b.n	8004460 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	4013      	ands	r3, r2
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	429a      	cmp	r2, r3
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	461a      	mov	r2, r3
 8004458:	79fb      	ldrb	r3, [r7, #7]
 800445a:	429a      	cmp	r2, r3
 800445c:	d09f      	beq.n	800439e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3740      	adds	r7, #64	@ 0x40
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b098      	sub	sp, #96	@ 0x60
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	4613      	mov	r3, r2
 8004474:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	88fa      	ldrh	r2, [r7, #6]
 8004480:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	2222      	movs	r2, #34	@ 0x22
 800448c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004494:	4a3e      	ldr	r2, [pc, #248]	@ (8004590 <UART_Start_Receive_DMA+0x128>)
 8004496:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	4a3d      	ldr	r2, [pc, #244]	@ (8004594 <UART_Start_Receive_DMA+0x12c>)
 800449e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	4a3c      	ldr	r2, [pc, #240]	@ (8004598 <UART_Start_Receive_DMA+0x130>)
 80044a6:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044ac:	2200      	movs	r2, #0
 80044ae:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80044b0:	f107 0308 	add.w	r3, r7, #8
 80044b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	3304      	adds	r3, #4
 80044c0:	4619      	mov	r1, r3
 80044c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	88fb      	ldrh	r3, [r7, #6]
 80044c8:	f7fe f842 	bl	8002550 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	613b      	str	r3, [r7, #16]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	613b      	str	r3, [r7, #16]
 80044e0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d019      	beq.n	800451e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80044f4:	e853 3f00 	ldrex	r3, [r3]
 80044f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80044fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80044fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004500:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	330c      	adds	r3, #12
 8004508:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800450a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800450c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800450e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8004510:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004512:	e841 2300 	strex	r3, r2, [r1]
 8004516:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8004518:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1e5      	bne.n	80044ea <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800452e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004530:	f043 0301 	orr.w	r3, r3, #1
 8004534:	657b      	str	r3, [r7, #84]	@ 0x54
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	3314      	adds	r3, #20
 800453c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800453e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004540:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004542:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004544:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004546:	e841 2300 	strex	r3, r2, [r1]
 800454a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800454c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1e5      	bne.n	800451e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	3314      	adds	r3, #20
 8004558:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800455a:	69bb      	ldr	r3, [r7, #24]
 800455c:	e853 3f00 	ldrex	r3, [r3]
 8004560:	617b      	str	r3, [r7, #20]
   return(result);
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004568:	653b      	str	r3, [r7, #80]	@ 0x50
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004572:	627a      	str	r2, [r7, #36]	@ 0x24
 8004574:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004576:	6a39      	ldr	r1, [r7, #32]
 8004578:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800457a:	e841 2300 	strex	r3, r2, [r1]
 800457e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1e5      	bne.n	8004552 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004586:	2300      	movs	r3, #0
}
 8004588:	4618      	mov	r0, r3
 800458a:	3760      	adds	r7, #96	@ 0x60
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	08004191 	.word	0x08004191
 8004594:	080042bd 	.word	0x080042bd
 8004598:	080042f9 	.word	0x080042f9

0800459c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800459c:	b480      	push	{r7}
 800459e:	b089      	sub	sp, #36	@ 0x24
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	330c      	adds	r3, #12
 80045aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	e853 3f00 	ldrex	r3, [r3]
 80045b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80045ba:	61fb      	str	r3, [r7, #28]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	330c      	adds	r3, #12
 80045c2:	69fa      	ldr	r2, [r7, #28]
 80045c4:	61ba      	str	r2, [r7, #24]
 80045c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6979      	ldr	r1, [r7, #20]
 80045ca:	69ba      	ldr	r2, [r7, #24]
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	613b      	str	r3, [r7, #16]
   return(result);
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e5      	bne.n	80045a4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2220      	movs	r2, #32
 80045dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80045e0:	bf00      	nop
 80045e2:	3724      	adds	r7, #36	@ 0x24
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bc80      	pop	{r7}
 80045e8:	4770      	bx	lr

080045ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045ea:	b480      	push	{r7}
 80045ec:	b095      	sub	sp, #84	@ 0x54
 80045ee:	af00      	add	r7, sp, #0
 80045f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004608:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004612:	643a      	str	r2, [r7, #64]	@ 0x40
 8004614:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004618:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	3314      	adds	r3, #20
 800462c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800462e:	6a3b      	ldr	r3, [r7, #32]
 8004630:	e853 3f00 	ldrex	r3, [r3]
 8004634:	61fb      	str	r3, [r7, #28]
   return(result);
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f023 0301 	bic.w	r3, r3, #1
 800463c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	3314      	adds	r3, #20
 8004644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004646:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004648:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800464a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800464c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800464e:	e841 2300 	strex	r3, r2, [r1]
 8004652:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004656:	2b00      	cmp	r3, #0
 8004658:	d1e5      	bne.n	8004626 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	2b01      	cmp	r3, #1
 8004660:	d119      	bne.n	8004696 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	330c      	adds	r3, #12
 8004668:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	60bb      	str	r3, [r7, #8]
   return(result);
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	f023 0310 	bic.w	r3, r3, #16
 8004678:	647b      	str	r3, [r7, #68]	@ 0x44
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	330c      	adds	r3, #12
 8004680:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004682:	61ba      	str	r2, [r7, #24]
 8004684:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6979      	ldr	r1, [r7, #20]
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	613b      	str	r3, [r7, #16]
   return(result);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e5      	bne.n	8004662 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2220      	movs	r2, #32
 800469a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80046a4:	bf00      	nop
 80046a6:	3754      	adds	r7, #84	@ 0x54
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bc80      	pop	{r7}
 80046ac:	4770      	bx	lr

080046ae <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ba:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2200      	movs	r2, #0
 80046c0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f000 fd6c 	bl	80051a6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046ce:	bf00      	nop
 80046d0:	3710      	adds	r7, #16
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}

080046d6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046d6:	b480      	push	{r7}
 80046d8:	b085      	sub	sp, #20
 80046da:	af00      	add	r7, sp, #0
 80046dc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b21      	cmp	r3, #33	@ 0x21
 80046e8:	d13e      	bne.n	8004768 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046f2:	d114      	bne.n	800471e <UART_Transmit_IT+0x48>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d110      	bne.n	800471e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6a1b      	ldr	r3, [r3, #32]
 8004700:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	881b      	ldrh	r3, [r3, #0]
 8004706:	461a      	mov	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004710:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	1c9a      	adds	r2, r3, #2
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	621a      	str	r2, [r3, #32]
 800471c:	e008      	b.n	8004730 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6a1b      	ldr	r3, [r3, #32]
 8004722:	1c59      	adds	r1, r3, #1
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6211      	str	r1, [r2, #32]
 8004728:	781a      	ldrb	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004734:	b29b      	uxth	r3, r3
 8004736:	3b01      	subs	r3, #1
 8004738:	b29b      	uxth	r3, r3
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	4619      	mov	r1, r3
 800473e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004740:	2b00      	cmp	r3, #0
 8004742:	d10f      	bne.n	8004764 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004752:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68da      	ldr	r2, [r3, #12]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004762:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004764:	2300      	movs	r3, #0
 8004766:	e000      	b.n	800476a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004768:	2302      	movs	r3, #2
  }
}
 800476a:	4618      	mov	r0, r3
 800476c:	3714      	adds	r7, #20
 800476e:	46bd      	mov	sp, r7
 8004770:	bc80      	pop	{r7}
 8004772:	4770      	bx	lr

08004774 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68da      	ldr	r2, [r3, #12]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800478a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2220      	movs	r2, #32
 8004790:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004794:	6878      	ldr	r0, [r7, #4]
 8004796:	f000 fce2 	bl	800515e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800479a:	2300      	movs	r3, #0
}
 800479c:	4618      	mov	r0, r3
 800479e:	3708      	adds	r7, #8
 80047a0:	46bd      	mov	sp, r7
 80047a2:	bd80      	pop	{r7, pc}

080047a4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b08c      	sub	sp, #48	@ 0x30
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b2:	b2db      	uxtb	r3, r3
 80047b4:	2b22      	cmp	r3, #34	@ 0x22
 80047b6:	f040 80ae 	bne.w	8004916 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047c2:	d117      	bne.n	80047f4 <UART_Receive_IT+0x50>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d113      	bne.n	80047f4 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047cc:	2300      	movs	r3, #0
 80047ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	b29b      	uxth	r3, r3
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	b29a      	uxth	r2, r3
 80047e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047e6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ec:	1c9a      	adds	r2, r3, #2
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	629a      	str	r2, [r3, #40]	@ 0x28
 80047f2:	e026      	b.n	8004842 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004806:	d007      	beq.n	8004818 <UART_Receive_IT+0x74>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	689b      	ldr	r3, [r3, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d10a      	bne.n	8004826 <UART_Receive_IT+0x82>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e008      	b.n	8004838 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004832:	b2da      	uxtb	r2, r3
 8004834:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004836:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800483c:	1c5a      	adds	r2, r3, #1
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004846:	b29b      	uxth	r3, r3
 8004848:	3b01      	subs	r3, #1
 800484a:	b29b      	uxth	r3, r3
 800484c:	687a      	ldr	r2, [r7, #4]
 800484e:	4619      	mov	r1, r3
 8004850:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004852:	2b00      	cmp	r3, #0
 8004854:	d15d      	bne.n	8004912 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	68da      	ldr	r2, [r3, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f022 0220 	bic.w	r2, r2, #32
 8004864:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68da      	ldr	r2, [r3, #12]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004874:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 0201 	bic.w	r2, r2, #1
 8004884:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2220      	movs	r2, #32
 800488a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	2b01      	cmp	r3, #1
 800489a:	d135      	bne.n	8004908 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2200      	movs	r2, #0
 80048a0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	330c      	adds	r3, #12
 80048a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	e853 3f00 	ldrex	r3, [r3]
 80048b0:	613b      	str	r3, [r7, #16]
   return(result);
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	f023 0310 	bic.w	r3, r3, #16
 80048b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048c2:	623a      	str	r2, [r7, #32]
 80048c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c6:	69f9      	ldr	r1, [r7, #28]
 80048c8:	6a3a      	ldr	r2, [r7, #32]
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80048d0:	69bb      	ldr	r3, [r7, #24]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e5      	bne.n	80048a2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0310 	and.w	r3, r3, #16
 80048e0:	2b10      	cmp	r3, #16
 80048e2:	d10a      	bne.n	80048fa <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048e4:	2300      	movs	r3, #0
 80048e6:	60fb      	str	r3, [r7, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	60fb      	str	r3, [r7, #12]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80048fe:	4619      	mov	r1, r3
 8004900:	6878      	ldr	r0, [r7, #4]
 8004902:	f7ff fbdf 	bl	80040c4 <HAL_UARTEx_RxEventCallback>
 8004906:	e002      	b.n	800490e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f000 fc3a 	bl	8005182 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800490e:	2300      	movs	r3, #0
 8004910:	e002      	b.n	8004918 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004912:	2300      	movs	r3, #0
 8004914:	e000      	b.n	8004918 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
  }
}
 8004918:	4618      	mov	r0, r3
 800491a:	3730      	adds	r7, #48	@ 0x30
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68da      	ldr	r2, [r3, #12]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	689a      	ldr	r2, [r3, #8]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	695b      	ldr	r3, [r3, #20]
 800494c:	4313      	orrs	r3, r2
 800494e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800495a:	f023 030c 	bic.w	r3, r3, #12
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6812      	ldr	r2, [r2, #0]
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	430b      	orrs	r3, r1
 8004966:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	695b      	ldr	r3, [r3, #20]
 800496e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699a      	ldr	r2, [r3, #24]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	430a      	orrs	r2, r1
 800497c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a2c      	ldr	r2, [pc, #176]	@ (8004a34 <UART_SetConfig+0x114>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d103      	bne.n	8004990 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004988:	f7fe fdea 	bl	8003560 <HAL_RCC_GetPCLK2Freq>
 800498c:	60f8      	str	r0, [r7, #12]
 800498e:	e002      	b.n	8004996 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004990:	f7fe fdd2 	bl	8003538 <HAL_RCC_GetPCLK1Freq>
 8004994:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	4613      	mov	r3, r2
 800499a:	009b      	lsls	r3, r3, #2
 800499c:	4413      	add	r3, r2
 800499e:	009a      	lsls	r2, r3, #2
 80049a0:	441a      	add	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ac:	4a22      	ldr	r2, [pc, #136]	@ (8004a38 <UART_SetConfig+0x118>)
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	0119      	lsls	r1, r3, #4
 80049b6:	68fa      	ldr	r2, [r7, #12]
 80049b8:	4613      	mov	r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	009a      	lsls	r2, r3, #2
 80049c0:	441a      	add	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	009b      	lsls	r3, r3, #2
 80049c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80049cc:	4b1a      	ldr	r3, [pc, #104]	@ (8004a38 <UART_SetConfig+0x118>)
 80049ce:	fba3 0302 	umull	r0, r3, r3, r2
 80049d2:	095b      	lsrs	r3, r3, #5
 80049d4:	2064      	movs	r0, #100	@ 0x64
 80049d6:	fb00 f303 	mul.w	r3, r0, r3
 80049da:	1ad3      	subs	r3, r2, r3
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	3332      	adds	r3, #50	@ 0x32
 80049e0:	4a15      	ldr	r2, [pc, #84]	@ (8004a38 <UART_SetConfig+0x118>)
 80049e2:	fba2 2303 	umull	r2, r3, r2, r3
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ec:	4419      	add	r1, r3
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	4613      	mov	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4413      	add	r3, r2
 80049f6:	009a      	lsls	r2, r3, #2
 80049f8:	441a      	add	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a04:	4b0c      	ldr	r3, [pc, #48]	@ (8004a38 <UART_SetConfig+0x118>)
 8004a06:	fba3 0302 	umull	r0, r3, r3, r2
 8004a0a:	095b      	lsrs	r3, r3, #5
 8004a0c:	2064      	movs	r0, #100	@ 0x64
 8004a0e:	fb00 f303 	mul.w	r3, r0, r3
 8004a12:	1ad3      	subs	r3, r2, r3
 8004a14:	011b      	lsls	r3, r3, #4
 8004a16:	3332      	adds	r3, #50	@ 0x32
 8004a18:	4a07      	ldr	r2, [pc, #28]	@ (8004a38 <UART_SetConfig+0x118>)
 8004a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1e:	095b      	lsrs	r3, r3, #5
 8004a20:	f003 020f 	and.w	r2, r3, #15
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	440a      	add	r2, r1
 8004a2a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004a2c:	bf00      	nop
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40013800 	.word	0x40013800
 8004a38:	51eb851f 	.word	0x51eb851f

08004a3c <UART_IsTxBusy>:
 * @param   -
 * @return  Booleon value:
 *           - true: device is busy
 *           - false: device is idle
 *****************************************************************************/
static inline bool UART_IsTxBusy(stm32_DMA_uart_t* const self) { return self->isTxBusy_; }
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	791b      	ldrb	r3, [r3, #4]
 8004a48:	b2db      	uxtb	r3, r3
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	370c      	adds	r7, #12
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bc80      	pop	{r7}
 8004a52:	4770      	bx	lr

08004a54 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8004a54:	b480      	push	{r7}
 8004a56:	b083      	sub	sp, #12
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	4618      	mov	r0, r3
 8004a62:	370c      	adds	r7, #12
 8004a64:	46bd      	mov	sp, r7
 8004a66:	bc80      	pop	{r7}
 8004a68:	4770      	bx	lr

08004a6a <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       noexcept { return &_M_pod_data[0]; }
 8004a6a:	b480      	push	{r7}
 8004a6c:	b083      	sub	sp, #12
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	4618      	mov	r0, r3
 8004a76:	370c      	adds	r7, #12
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bc80      	pop	{r7}
 8004a7c:	4770      	bx	lr

08004a7e <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const noexcept { return &_M_pod_data[0]; }
 8004a7e:	b480      	push	{r7}
 8004a80:	b083      	sub	sp, #12
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <_ZNSt14_Function_baseD1Ev>:
	  { return true; }
      };

    _Function_base() = default;

    ~_Function_base()
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d005      	beq.n	8004aae <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	2203      	movs	r2, #3
 8004aac:	4798      	blx	r3
    }
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <_ZN18Key_tps1htc30Group9getGroupsEv>:
	void setOpenLoadMeasure(const uint8_t group_id, const uint8_t key_id);
	float getCurrent(const uint8_t group_id, const uint8_t key_id);
	uint8_t getError(const uint8_t group_id, const uint8_t key_id);

	// --------------------
	inline uint8_t getGroups() {return Groups;}
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <_ZN18Key_tps1htc30Group7getKeysEh>:
	inline uint8_t getKeys(const uint8_t group_id) {return m_initPinCnt[group_id];}
 8004acc:	b480      	push	{r7}
 8004ace:	b083      	sub	sp, #12
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	460b      	mov	r3, r1
 8004ad6:	70fb      	strb	r3, [r7, #3]
 8004ad8:	78fb      	ldrb	r3, [r7, #3]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	4413      	add	r3, r2
 8004ade:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	370c      	adds	r7, #12
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bc80      	pop	{r7}
 8004aea:	4770      	bx	lr

08004aec <_ZNK13TimingManager9isExpiredEv>:
                --timer->m_counter;
            }
        }
    }

    inline bool isExpired() const {
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
        return m_counter == 0;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	bf0c      	ite	eq
 8004afc:	2301      	moveq	r3, #1
 8004afe:	2300      	movne	r3, #0
 8004b00:	b2db      	uxtb	r3, r3
    }
 8004b02:	4618      	mov	r0, r3
 8004b04:	370c      	adds	r7, #12
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bc80      	pop	{r7}
 8004b0a:	4770      	bx	lr

08004b0c <_ZN13TimingManager5startEm>:

    inline void start(const uint32_t delay) { m_counter = delay; }
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	683a      	ldr	r2, [r7, #0]
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	bf00      	nop
 8004b1e:	370c      	adds	r7, #12
 8004b20:	46bd      	mov	sp, r7
 8004b22:	bc80      	pop	{r7}
 8004b24:	4770      	bx	lr

08004b26 <_ZN14ProtocolSender7getPoolEv>:

	status_t init(UART_HandleTypeDef* const huart);
	void proceed(const uint32_t current_time);

	// getters
	inline pool_container_t* const getPool() { return &pack_pool; }
 8004b26:	b480      	push	{r7}
 8004b28:	b083      	sub	sp, #12
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4618      	mov	r0, r3
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	bc80      	pop	{r7}
 8004b38:	4770      	bx	lr

08004b3a <_ZN14ProtocolSender9getParserEv>:
	inline RawParser_dma_t* const getParser() { return &raw_p; }
 8004b3a:	b480      	push	{r7}
 8004b3c:	b083      	sub	sp, #12
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	331c      	adds	r3, #28
 8004b46:	4618      	mov	r0, r3
 8004b48:	370c      	adds	r7, #12
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr

08004b50 <_ZN14ProtocolSender11getKeyClassEv>:
	inline Key_tps1htc30Group* const getKeyClass() { return m_keyGroup; }
 8004b50:	b480      	push	{r7}
 8004b52:	b083      	sub	sp, #12
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8004b5e:	4618      	mov	r0, r3
 8004b60:	370c      	adds	r7, #12
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bc80      	pop	{r7}
 8004b66:	4770      	bx	lr

08004b68 <_ZL16uart_rx_callbackPKhmPv>:
#include "ProtocolSender.h"
#include "tools/uart/stm32_uart_container.h"
#include "assertsEngine/assert_engine.h"

static void uart_rx_callback(uint8_t const * data, uint32_t const size, void* const captured)
{
 8004b68:	b580      	push	{r7, lr}
 8004b6a:	b08e      	sub	sp, #56	@ 0x38
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	60f8      	str	r0, [r7, #12]
 8004b70:	60b9      	str	r1, [r7, #8]
 8004b72:	607a      	str	r2, [r7, #4]
	RawParser_dma_t* const raw_p = (RawParser_dma_t*)captured;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	62bb      	str	r3, [r7, #40]	@ 0x28
    self->m_receivePos = m_receivePos + 1U;
}

STATIC_FORCEINLINE void RawParser_dma_receiveArray(RawParser_dma_t* const self, const u8* const arr, const reg size)
{
    if(size > D_RAW_P_RX_BUF_SIZE) {
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b8a:	d835      	bhi.n	8004bf8 <_ZL16uart_rx_callbackPKhmPv+0x90>
    	return;
    }

    // save to register ------------------------------------------------------------------------------
    u8* const m_receiveBuffer		= self->m_receiveBuffer;						// store pointer to register
 8004b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b8e:	3308      	adds	r3, #8
 8004b90:	627b      	str	r3, [r7, #36]	@ 0x24

    const reg m_receivePosReg		= self->m_receivePos;							// store head
 8004b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b94:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004b98:	623b      	str	r3, [r7, #32]
    const reg m_receivePosReg_msk	= m_receivePosReg & (D_RAW_P_RX_BUF_SIZE - 1U); // get head position
 8004b9a:	6a3b      	ldr	r3, [r7, #32]
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	61fb      	str	r3, [r7, #28]
    const reg remaining_to_end 		= D_RAW_P_RX_BUF_SIZE - m_receivePosReg_msk; 	// get remaining from head to end
 8004ba0:	69fb      	ldr	r3, [r7, #28]
 8004ba2:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004ba6:	61bb      	str	r3, [r7, #24]

    // do logic --------------------------------------------------------------------------------------
    if(size > remaining_to_end) {
 8004ba8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	429a      	cmp	r2, r3
 8004bae:	d914      	bls.n	8004bda <_ZL16uart_rx_callbackPKhmPv+0x72>
    	const reg remaining_n		= size - remaining_to_end;
 8004bb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	617b      	str	r3, [r7, #20]
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, remaining_to_end);
 8004bb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bba:	69fb      	ldr	r3, [r7, #28]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	69ba      	ldr	r2, [r7, #24]
 8004bc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f004 fe03 	bl	80097ce <memcpy>
    	memcpy(m_receiveBuffer, arr + remaining_to_end, remaining_n);
 8004bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	4413      	add	r3, r2
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4619      	mov	r1, r3
 8004bd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004bd4:	f004 fdfb 	bl	80097ce <memcpy>
 8004bd8:	e007      	b.n	8004bea <_ZL16uart_rx_callbackPKhmPv+0x82>
    } else {
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, size);
 8004bda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	4413      	add	r3, r2
 8004be0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004be2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004be4:	4618      	mov	r0, r3
 8004be6:	f004 fdf2 	bl	80097ce <memcpy>
    }

    // save position to memory ------------------------------------------------------------------------
    self->m_receivePos = (m_receivePosReg + size);
 8004bea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004bec:	6a3b      	ldr	r3, [r7, #32]
 8004bee:	441a      	add	r2, r3
 8004bf0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bf2:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	RawParser_dma_receiveArray(raw_p, data, size);
}
 8004bf6:	e000      	b.n	8004bfa <_ZL16uart_rx_callbackPKhmPv+0x92>
    	return;
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	3738      	adds	r7, #56	@ 0x38
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <_ZL16uart_tx_callbackaPv>:

static void uart_tx_callback(const status_t status, void* const captured)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b084      	sub	sp, #16
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	4603      	mov	r3, r0
 8004c0a:	6039      	str	r1, [r7, #0]
 8004c0c:	71fb      	strb	r3, [r7, #7]
	pool_container_t* const pack_pool = (pool_container_t*)captured;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	60fb      	str	r3, [r7, #12]
	poolContainer_nextReadPos(pack_pool);
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f001 fcf3 	bl	80065fe <poolContainer_nextReadPos>
}
 8004c18:	bf00      	nop
 8004c1a:	3710      	adds	r7, #16
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}

08004c20 <_ZL10pingWorkerPhjhPv>:
//	stm32_uart_communicator_t* const self = (stm32_uart_communicator_t*)captured;
//}


static void pingWorker(u8* const data, const reg size, const u8 id, void* const ctx)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b08c      	sub	sp, #48	@ 0x30
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	603b      	str	r3, [r7, #0]
 8004c2c:	4613      	mov	r3, r2
 8004c2e:	71fb      	strb	r3, [r7, #7]
	ProtocolSender* const parrent = (ProtocolSender*)ctx;
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pool_container_t* const pack_pool = parrent->getPool();
 8004c34:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c36:	f7ff ff76 	bl	8004b26 <_ZN14ProtocolSender7getPoolEv>
 8004c3a:	62b8      	str	r0, [r7, #40]	@ 0x28
	RawParser_dma_t* const parser = parrent->getParser();
 8004c3c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004c3e:	f7ff ff7c 	bl	8004b3a <_ZN14ProtocolSender9getParserEv>
 8004c42:	6278      	str	r0, [r7, #36]	@ 0x24

	u8 t1 = 0x01;
 8004c44:	2301      	movs	r3, #1
 8004c46:	76fb      	strb	r3, [r7, #27]
	u8 t2 = 0x11;
 8004c48:	2311      	movs	r3, #17
 8004c4a:	76bb      	strb	r3, [r7, #26]
	u8 t3 = 0x22;
 8004c4c:	2322      	movs	r3, #34	@ 0x22
 8004c4e:	767b      	strb	r3, [r7, #25]
	u8 t4 = 0x33;
 8004c50:	2333      	movs	r3, #51	@ 0x33
 8004c52:	763b      	strb	r3, [r7, #24]
	u16 t5 = 0xAA55;
 8004c54:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004c58:	82fb      	strh	r3, [r7, #22]
	//	u16 read16_2 = 0;
	//	RawParser_dma_universalRead(parser, sizeof(u8), sizeof(u8), &read);
	//	RawParser_dma_universalRead(parser, sizeof(u16), sizeof(u16), (u8*)&read16);
	//	RawParser_dma_universalRead(parser, sizeof(u16), sizeof(u16), (u8*)&read16_2);

	if(!FIFO_IS_FULL(pack_pool)) {
 8004c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c5c:	691a      	ldr	r2, [r3, #16]
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	405a      	eors	r2, r3
 8004c64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	401a      	ands	r2, r3
 8004c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d042      	beq.n	8004cf8 <_ZL10pingWorkerPhjhPv+0xd8>
		ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(pack_pool);
 8004c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c74:	f001 fc81 	bl	800657a <poolContainer_getWriteBuffer>
 8004c78:	6238      	str	r0, [r7, #32]
		rawParser_dma_setUserBufferTX(parser, buffer->data);
 8004c7a:	6a3b      	ldr	r3, [r7, #32]
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	4619      	mov	r1, r3
 8004c80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c82:	f001 fd92 	bl	80067aa <rawParser_dma_setUserBufferTX>

		RawParser_dma_startTransmittPacket(parser, 10);
 8004c86:	210a      	movs	r1, #10
 8004c88:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c8a:	f001 fee9 	bl	8006a60 <RawParser_dma_startTransmittPacket>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &id);
 8004c8e:	1dfb      	adds	r3, r7, #7
 8004c90:	2201      	movs	r2, #1
 8004c92:	2101      	movs	r1, #1
 8004c94:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c96:	f001 ff6e 	bl	8006b76 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t1);
 8004c9a:	f107 031b 	add.w	r3, r7, #27
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	2101      	movs	r1, #1
 8004ca2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ca4:	f001 ff67 	bl	8006b76 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t2);
 8004ca8:	f107 031a 	add.w	r3, r7, #26
 8004cac:	2201      	movs	r2, #1
 8004cae:	2101      	movs	r1, #1
 8004cb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb2:	f001 ff60 	bl	8006b76 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t3);
 8004cb6:	f107 0319 	add.w	r3, r7, #25
 8004cba:	2201      	movs	r2, #1
 8004cbc:	2101      	movs	r1, #1
 8004cbe:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cc0:	f001 ff59 	bl	8006b76 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t4);
 8004cc4:	f107 0318 	add.w	r3, r7, #24
 8004cc8:	2201      	movs	r2, #1
 8004cca:	2101      	movs	r1, #1
 8004ccc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cce:	f001 ff52 	bl	8006b76 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u16), sizeof(u16), (u8*)&t5);
 8004cd2:	f107 0316 	add.w	r3, r7, #22
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	2102      	movs	r1, #2
 8004cda:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cdc:	f001 ff4b 	bl	8006b76 <RawParser_dma_universalWrite>

		RawParser_Frame_t*const frame = RawParser_dma_finishTransmittPacket(parser);
 8004ce0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004ce2:	f001 ff0c 	bl	8006afe <RawParser_dma_finishTransmittPacket>
 8004ce6:	61f8      	str	r0, [r7, #28]
		buffer->size = frame->size;
 8004ce8:	69fb      	ldr	r3, [r7, #28]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	b29a      	uxth	r2, r3
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	801a      	strh	r2, [r3, #0]
		poolContainer_nextWritePos(pack_pool);
 8004cf2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004cf4:	f001 fc5a 	bl	80065ac <poolContainer_nextWritePos>
	}
}
 8004cf8:	bf00      	nop
 8004cfa:	3730      	adds	r7, #48	@ 0x30
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}

08004d00 <_ZL6setKeyPhjhPv>:

static void setKey(u8* const data, const reg size, const u8 id, void* const ctx)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b08c      	sub	sp, #48	@ 0x30
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	60f8      	str	r0, [r7, #12]
 8004d08:	60b9      	str	r1, [r7, #8]
 8004d0a:	603b      	str	r3, [r7, #0]
 8004d0c:	4613      	mov	r3, r2
 8004d0e:	71fb      	strb	r3, [r7, #7]
	ProtocolSender* const parrent = (ProtocolSender*)ctx;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pool_container_t* const pack_pool = parrent->getPool();
 8004d14:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d16:	f7ff ff06 	bl	8004b26 <_ZN14ProtocolSender7getPoolEv>
 8004d1a:	62b8      	str	r0, [r7, #40]	@ 0x28
	RawParser_dma_t* const parser = parrent->getParser();
 8004d1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d1e:	f7ff ff0c 	bl	8004b3a <_ZN14ProtocolSender9getParserEv>
 8004d22:	6278      	str	r0, [r7, #36]	@ 0x24
	Key_tps1htc30Group* const key =  parrent->getKeyClass();
 8004d24:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004d26:	f7ff ff13 	bl	8004b50 <_ZN14ProtocolSender11getKeyClassEv>
 8004d2a:	6238      	str	r0, [r7, #32]

	u8 group_id;
	u8 key_id;
	u8 en;

	RawParser_dma_universalRead(parser, sizeof(u8), sizeof(u8), &group_id);
 8004d2c:	f107 0317 	add.w	r3, r7, #23
 8004d30:	2201      	movs	r2, #1
 8004d32:	2101      	movs	r1, #1
 8004d34:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d36:	f001 ff5f 	bl	8006bf8 <RawParser_dma_universalRead>
	RawParser_dma_universalRead(parser, sizeof(u8), sizeof(u8), &key_id);
 8004d3a:	f107 0316 	add.w	r3, r7, #22
 8004d3e:	2201      	movs	r2, #1
 8004d40:	2101      	movs	r1, #1
 8004d42:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d44:	f001 ff58 	bl	8006bf8 <RawParser_dma_universalRead>
	RawParser_dma_universalRead(parser, sizeof(u8), sizeof(u8), &en);
 8004d48:	f107 0315 	add.w	r3, r7, #21
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	2101      	movs	r1, #1
 8004d50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d52:	f001 ff51 	bl	8006bf8 <RawParser_dma_universalRead>

	key->set_out(en, group_id, key_id);
 8004d56:	7d7b      	ldrb	r3, [r7, #21]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	bf14      	ite	ne
 8004d5c:	2301      	movne	r3, #1
 8004d5e:	2300      	moveq	r3, #0
 8004d60:	b2d9      	uxtb	r1, r3
 8004d62:	7dfa      	ldrb	r2, [r7, #23]
 8004d64:	7dbb      	ldrb	r3, [r7, #22]
 8004d66:	6a38      	ldr	r0, [r7, #32]
 8004d68:	f001 faea 	bl	8006340 <_ZN18Key_tps1htc30Group7set_outEbhh>

	if(!FIFO_IS_FULL(pack_pool)) {
 8004d6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	68db      	ldr	r3, [r3, #12]
 8004d74:	405a      	eors	r2, r3
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	689b      	ldr	r3, [r3, #8]
 8004d7a:	401a      	ands	r2, r3
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d01f      	beq.n	8004dc4 <_ZL6setKeyPhjhPv+0xc4>
		ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(pack_pool);
 8004d84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d86:	f001 fbf8 	bl	800657a <poolContainer_getWriteBuffer>
 8004d8a:	61f8      	str	r0, [r7, #28]
		rawParser_dma_setUserBufferTX(parser, buffer->data);
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	3302      	adds	r3, #2
 8004d90:	4619      	mov	r1, r3
 8004d92:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d94:	f001 fd09 	bl	80067aa <rawParser_dma_setUserBufferTX>

		RawParser_dma_startTransmittPacket(parser, 1);
 8004d98:	2101      	movs	r1, #1
 8004d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d9c:	f001 fe60 	bl	8006a60 <RawParser_dma_startTransmittPacket>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &id);
 8004da0:	1dfb      	adds	r3, r7, #7
 8004da2:	2201      	movs	r2, #1
 8004da4:	2101      	movs	r1, #1
 8004da6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004da8:	f001 fee5 	bl	8006b76 <RawParser_dma_universalWrite>
		RawParser_Frame_t*const frame = RawParser_dma_finishTransmittPacket(parser);
 8004dac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dae:	f001 fea6 	bl	8006afe <RawParser_dma_finishTransmittPacket>
 8004db2:	61b8      	str	r0, [r7, #24]
		buffer->size = frame->size;
 8004db4:	69bb      	ldr	r3, [r7, #24]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	b29a      	uxth	r2, r3
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	801a      	strh	r2, [r3, #0]
		poolContainer_nextWritePos(pack_pool);
 8004dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dc0:	f001 fbf4 	bl	80065ac <poolContainer_nextWritePos>
	}
}
 8004dc4:	bf00      	nop
 8004dc6:	3730      	adds	r7, #48	@ 0x30
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef>:



status_t ProtocolSender::init(UART_HandleTypeDef *const huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
	M_Assert_BreakSaveCheck(huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d102      	bne.n	8004de2 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x16>
 8004ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8004de0:	e06e      	b.n	8004ec0 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xf4>

	poolContainer_init(&pack_pool, 4, sizeof(pool_elem) + D_RAW_P_TX_BUF_SIZE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004de8:	2104      	movs	r1, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 fb39 	bl	8006462 <poolContainer_init>

	M_Assert_BreakSaveCheck(UART_Init(&stm32_uart, huart, 128) != STATUS_OK,
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004df6:	2280      	movs	r2, #128	@ 0x80
 8004df8:	6839      	ldr	r1, [r7, #0]
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f002 ff23 	bl	8007c46 <UART_Init>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	bf14      	ite	ne
 8004e06:	2301      	movne	r3, #1
 8004e08:	2300      	moveq	r3, #0
 8004e0a:	b2db      	uxtb	r3, r3
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d002      	beq.n	8004e16 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x4a>
 8004e10:	f04f 33ff 	mov.w	r3, #4294967295
 8004e14:	e054      	b.n	8004ec0 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xf4>
			M_EMPTY, return ERROR_FAIL,
					"uart init fail");

	UART_SetRxCallback(&stm32_uart, uart_rx_callback, &raw_p);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f503 7014 	add.w	r0, r3, #592	@ 0x250
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	331c      	adds	r3, #28
 8004e20:	461a      	mov	r2, r3
 8004e22:	4929      	ldr	r1, [pc, #164]	@ (8004ec8 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xfc>)
 8004e24:	f002 ffb9 	bl	8007d9a <UART_SetRxCallback>
	UART_SetTxcallback(&stm32_uart, uart_tx_callback, &pack_pool);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4926      	ldr	r1, [pc, #152]	@ (8004ecc <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x100>)
 8004e32:	4618      	mov	r0, r3
 8004e34:	f002 ff98 	bl	8007d68 <UART_SetTxcallback>
	//	UART_SetErrorCallback(&self->stm32_uart, uart_error_callback, self);

	M_Assert_BreakSaveCheck(rawParser_dma_init(&raw_p, 0x1a) != D_RAW_P_OK,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	331c      	adds	r3, #28
 8004e3c:	211a      	movs	r1, #26
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f001 fc66 	bl	8006710 <rawParser_dma_init>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	bf14      	ite	ne
 8004e4a:	2301      	movne	r3, #1
 8004e4c:	2300      	moveq	r3, #0
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d002      	beq.n	8004e5a <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x8e>
 8004e54:	f04f 33ff 	mov.w	r3, #4294967295
 8004e58:	e032      	b.n	8004ec0 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xf4>
			M_EMPTY, return ERROR_FAIL,
					"kbus init fail");

	pool_elem* const buffer = (pool_elem*) poolContainer_getWriteBuffer(&pack_pool);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f001 fb8c 	bl	800657a <poolContainer_getWriteBuffer>
 8004e62:	60f8      	str	r0, [r7, #12]
	rawParser_dma_setUserBufferTX(&raw_p, buffer->data);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f103 021c 	add.w	r2, r3, #28
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	3302      	adds	r3, #2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	4610      	mov	r0, r2
 8004e72:	f001 fc9a 	bl	80067aa <rawParser_dma_setUserBufferTX>

	M_Assert_BreakSaveCheck(CallbackManager_init(&callb, 5, this),
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	2105      	movs	r1, #5
 8004e80:	4618      	mov	r0, r3
 8004e82:	f001 fbcc 	bl	800661e <CallbackManager_init>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xc6>
 8004e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8004e90:	e016      	b.n	8004ec0 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xf4>
			M_EMPTY, return ERROR_FAIL,
					"callback manager init fail");
	CallbackManager_subscribe(&callb, 0x01, pingWorker);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004e98:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed0 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x104>)
 8004e9a:	2101      	movs	r1, #1
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f001 fbe4 	bl	800666a <CallbackManager_subscribe>
	CallbackManager_subscribe(&callb, 0x02, setKey);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8004ea8:	4a0a      	ldr	r2, [pc, #40]	@ (8004ed4 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x108>)
 8004eaa:	2102      	movs	r1, #2
 8004eac:	4618      	mov	r0, r3
 8004eae:	f001 fbdc 	bl	800666a <CallbackManager_subscribe>


	m_keyGroup = Key_tps1htc30Group::getInstance();
 8004eb2:	f000 fe61 	bl	8005b78 <_ZN18Key_tps1htc30Group11getInstanceEv>
 8004eb6:	4602      	mov	r2, r0
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	return STATUS_OK;
 8004ebe:	2300      	movs	r3, #0
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	08004b69 	.word	0x08004b69
 8004ecc:	08004c03 	.word	0x08004c03
 8004ed0:	08004c21 	.word	0x08004c21
 8004ed4:	08004d01 	.word	0x08004d01

08004ed8 <_ZZN14ProtocolSender7proceedEmENKUlPN18Key_tps1htc30Group8KeyGroupEhhE_clES2_hh>:
				RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &groups);
				RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &key_0);
				RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &key_1);


				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	460b      	mov	r3, r1
 8004ee8:	71fb      	strb	r3, [r7, #7]
 8004eea:	4613      	mov	r3, r2
 8004eec:	71bb      	strb	r3, [r7, #6]
					u8 err = (u8)key->err[key_id];
 8004eee:	79bb      	ldrb	r3, [r7, #6]
 8004ef0:	461a      	mov	r2, r3
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f893 312c 	ldrb.w	r3, [r3, #300]	@ 0x12c
 8004efa:	75fb      	strb	r3, [r7, #23]
					u8 en = (u8)key->out_state[key_id];
 8004efc:	79bb      	ldrb	r3, [r7, #6]
 8004efe:	461a      	mov	r2, r3
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	4413      	add	r3, r2
 8004f04:	f893 3066 	ldrb.w	r3, [r3, #102]	@ 0x66
 8004f08:	75bb      	strb	r3, [r7, #22]
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]

					RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &group_id);
 8004f0e:	f103 001c 	add.w	r0, r3, #28
 8004f12:	1dfb      	adds	r3, r7, #7
 8004f14:	2201      	movs	r2, #1
 8004f16:	2101      	movs	r1, #1
 8004f18:	f001 fe2d 	bl	8006b76 <RawParser_dma_universalWrite>
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
					RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &key_id);
 8004f20:	f103 001c 	add.w	r0, r3, #28
 8004f24:	1dbb      	adds	r3, r7, #6
 8004f26:	2201      	movs	r2, #1
 8004f28:	2101      	movs	r1, #1
 8004f2a:	f001 fe24 	bl	8006b76 <RawParser_dma_universalWrite>
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
					RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &en);
 8004f32:	f103 001c 	add.w	r0, r3, #28
 8004f36:	f107 0316 	add.w	r3, r7, #22
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	2101      	movs	r1, #1
 8004f3e:	f001 fe1a 	bl	8006b76 <RawParser_dma_universalWrite>
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
					RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &err);
 8004f46:	f103 001c 	add.w	r0, r3, #28
 8004f4a:	f107 0317 	add.w	r3, r7, #23
 8004f4e:	2201      	movs	r2, #1
 8004f50:	2101      	movs	r1, #1
 8004f52:	f001 fe10 	bl	8006b76 <RawParser_dma_universalWrite>
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
					RawParser_dma_universalWrite(&raw_p, sizeof(float), sizeof(float), (u8*)&key->current);
 8004f5a:	f103 001c 	add.w	r0, r3, #28
 8004f5e:	68bb      	ldr	r3, [r7, #8]
 8004f60:	336c      	adds	r3, #108	@ 0x6c
 8004f62:	2204      	movs	r2, #4
 8004f64:	2104      	movs	r1, #4
 8004f66:	f001 fe06 	bl	8006b76 <RawParser_dma_universalWrite>
					return false;
 8004f6a:	2300      	movs	r3, #0
				});
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	3718      	adds	r7, #24
 8004f70:	46bd      	mov	sp, r7
 8004f72:	bd80      	pop	{r7, pc}

08004f74 <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEED1Ev>:
   *  @brief Polymorphic function wrapper.
   *  @ingroup functors
   *  @since C++11
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b082      	sub	sp, #8
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fd87 	bl	8004a92 <_ZNSt14_Function_baseD1Ev>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4618      	mov	r0, r3
 8004f88:	3708      	adds	r7, #8
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <_ZN14ProtocolSender7proceedEm>:
{
 8004f8e:	b590      	push	{r4, r7, lr}
 8004f90:	b091      	sub	sp, #68	@ 0x44
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
 8004f96:	6039      	str	r1, [r7, #0]
		if(!UART_IsTxBusy(&stm32_uart) && FIFO_NOT_EMPTY(&pack_pool)) {
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f7ff fd4c 	bl	8004a3c <UART_IsTxBusy>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f083 0301 	eor.w	r3, r3, #1
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <_ZN14ProtocolSender7proceedEm+0x32>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68da      	ldr	r2, [r3, #12]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	691b      	ldr	r3, [r3, #16]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d001      	beq.n	8004fc0 <_ZN14ProtocolSender7proceedEm+0x32>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e000      	b.n	8004fc2 <_ZN14ProtocolSender7proceedEm+0x34>
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00e      	beq.n	8004fe4 <_ZN14ProtocolSender7proceedEm+0x56>
			pool_elem* const buffer = (pool_elem*) poolContainer_readBuffer(&pack_pool);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4618      	mov	r0, r3
 8004fca:	f001 faff 	bl	80065cc <poolContainer_readBuffer>
 8004fce:	63f8      	str	r0, [r7, #60]	@ 0x3c
			UART_SendBuffer(&stm32_uart, buffer->data, buffer->size);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f503 7014 	add.w	r0, r3, #592	@ 0x250
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd8:	1c99      	adds	r1, r3, #2
 8004fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	f002 fe8e 	bl	8007d00 <UART_SendBuffer>
		RawParser_Frame_t* const frame = RawParser_dma_proceed(&raw_p);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	331c      	adds	r3, #28
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f001 fca1 	bl	8006930 <RawParser_dma_proceed>
 8004fee:	63b8      	str	r0, [r7, #56]	@ 0x38
		u8* const data = frame->data;
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
		reg size = frame->size;
 8004ff6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	633b      	str	r3, [r7, #48]	@ 0x30
		if(size == 0 || frame == NULL) {
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d012      	beq.n	8005028 <_ZN14ProtocolSender7proceedEm+0x9a>
 8005002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00f      	beq.n	8005028 <_ZN14ProtocolSender7proceedEm+0x9a>
		const u8 cmd = data[0];
 8005008:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800500a:	781b      	ldrb	r3, [r3, #0]
 800500c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		CallbackManager_proceed(&callb, cmd, (data + 1), (size - 1));
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f503 701f 	add.w	r0, r3, #636	@ 0x27c
 8005016:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800501c:	3b01      	subs	r3, #1
 800501e:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 8005022:	f001 fb36 	bl	8006692 <CallbackManager_proceed>
 8005026:	e000      	b.n	800502a <_ZN14ProtocolSender7proceedEm+0x9c>
			goto periodicSend;//return;
 8005028:	bf00      	nop
		if(proto_timer.isExpired()) {
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8005030:	4618      	mov	r0, r3
 8005032:	f7ff fd5b 	bl	8004aec <_ZNK13TimingManager9isExpiredEv>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 808c 	beq.w	8005156 <_ZN14ProtocolSender7proceedEm+0x1c8>
			while(FIFO_NOT_FULL(&pack_pool)) {
 800503e:	e076      	b.n	800512e <_ZN14ProtocolSender7proceedEm+0x1a0>
				ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(&pack_pool);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	f001 fa99 	bl	800657a <poolContainer_getWriteBuffer>
 8005048:	62b8      	str	r0, [r7, #40]	@ 0x28
				rawParser_dma_setUserBufferTX(&raw_p, buffer->data);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f103 021c 	add.w	r2, r3, #28
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	3302      	adds	r3, #2
 8005054:	4619      	mov	r1, r3
 8005056:	4610      	mov	r0, r2
 8005058:	f001 fba7 	bl	80067aa <rawParser_dma_setUserBufferTX>
				u8 groups = m_keyGroup->getGroups();
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8005062:	4618      	mov	r0, r3
 8005064:	f7ff fd28 	bl	8004ab8 <_ZN18Key_tps1htc30Group9getGroupsEv>
 8005068:	4603      	mov	r3, r0
 800506a:	72fb      	strb	r3, [r7, #11]
				u8 key_0 = m_keyGroup->getKeys(0);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fd29 	bl	8004acc <_ZN18Key_tps1htc30Group7getKeysEh>
 800507a:	4603      	mov	r3, r0
 800507c:	72bb      	strb	r3, [r7, #10]
				u8 key_1 = m_keyGroup->getKeys(1);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8005084:	2101      	movs	r1, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f7ff fd20 	bl	8004acc <_ZN18Key_tps1htc30Group7getKeysEh>
 800508c:	4603      	mov	r3, r0
 800508e:	727b      	strb	r3, [r7, #9]
				reg len = 3 + (key_0 + key_1) * 8;
 8005090:	7abb      	ldrb	r3, [r7, #10]
 8005092:	461a      	mov	r2, r3
 8005094:	7a7b      	ldrb	r3, [r7, #9]
 8005096:	4413      	add	r3, r2
 8005098:	00db      	lsls	r3, r3, #3
 800509a:	3303      	adds	r3, #3
 800509c:	627b      	str	r3, [r7, #36]	@ 0x24
				RawParser_dma_startTransmittPacket(&raw_p, len);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	331c      	adds	r3, #28
 80050a2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80050a4:	4618      	mov	r0, r3
 80050a6:	f001 fcdb 	bl	8006a60 <RawParser_dma_startTransmittPacket>
				RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &groups);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f103 001c 	add.w	r0, r3, #28
 80050b0:	f107 030b 	add.w	r3, r7, #11
 80050b4:	2201      	movs	r2, #1
 80050b6:	2101      	movs	r1, #1
 80050b8:	f001 fd5d 	bl	8006b76 <RawParser_dma_universalWrite>
				RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &key_0);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f103 001c 	add.w	r0, r3, #28
 80050c2:	f107 030a 	add.w	r3, r7, #10
 80050c6:	2201      	movs	r2, #1
 80050c8:	2101      	movs	r1, #1
 80050ca:	f001 fd54 	bl	8006b76 <RawParser_dma_universalWrite>
				RawParser_dma_universalWrite(&raw_p, sizeof(u8), sizeof(u8), &key_1);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f103 001c 	add.w	r0, r3, #28
 80050d4:	f107 0309 	add.w	r3, r7, #9
 80050d8:	2201      	movs	r2, #1
 80050da:	2101      	movs	r1, #1
 80050dc:	f001 fd4b 	bl	8006b76 <RawParser_dma_universalWrite>
				m_keyGroup->iterateAll([this](Key_tps1htc30Group::KeyGroup* key, uint8_t group_id, uint8_t key_id) -> bool {
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f8d3 4288 	ldr.w	r4, [r3, #648]	@ 0x288
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	61fb      	str	r3, [r7, #28]
 80050ea:	f107 021c 	add.w	r2, r7, #28
 80050ee:	f107 030c 	add.w	r3, r7, #12
 80050f2:	4611      	mov	r1, r2
 80050f4:	4618      	mov	r0, r3
 80050f6:	f000 f87b 	bl	80051f0 <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEC1IZN14ProtocolSender7proceedEmEUlS2_hhE_vEEOT_>
 80050fa:	f107 030c 	add.w	r3, r7, #12
 80050fe:	4619      	mov	r1, r3
 8005100:	4620      	mov	r0, r4
 8005102:	f000 fd69 	bl	8005bd8 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE>
 8005106:	f107 030c 	add.w	r3, r7, #12
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff ff32 	bl	8004f74 <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEED1Ev>

				RawParser_Frame_t*const frame = RawParser_dma_finishTransmittPacket(&raw_p);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	331c      	adds	r3, #28
 8005114:	4618      	mov	r0, r3
 8005116:	f001 fcf2 	bl	8006afe <RawParser_dma_finishTransmittPacket>
 800511a:	6238      	str	r0, [r7, #32]
				buffer->size = frame->size;
 800511c:	6a3b      	ldr	r3, [r7, #32]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	b29a      	uxth	r2, r3
 8005122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005124:	801a      	strh	r2, [r3, #0]
				poolContainer_nextWritePos(&pack_pool);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	f001 fa3f 	bl	80065ac <poolContainer_nextWritePos>
			while(FIFO_NOT_FULL(&pack_pool)) {
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	691a      	ldr	r2, [r3, #16]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	405a      	eors	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	401a      	ands	r2, r3
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	429a      	cmp	r2, r3
 8005144:	f47f af7c 	bne.w	8005040 <_ZN14ProtocolSender7proceedEm+0xb2>
			}


			proto_timer.start(50);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800514e:	2132      	movs	r1, #50	@ 0x32
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff fcdb 	bl	8004b0c <_ZN13TimingManager5startEm>
		}

	}

}
 8005156:	bf00      	nop
 8005158:	3744      	adds	r7, #68	@ 0x44
 800515a:	46bd      	mov	sp, r7
 800515c:	bd90      	pop	{r4, r7, pc}

0800515e <HAL_UART_TxCpltCallback>:



// callbacks IT --------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800515e:	b580      	push	{r7, lr}
 8005160:	b084      	sub	sp, #16
 8005162:	af00      	add	r7, sp, #0
 8005164:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f002 ff7a 	bl	8008060 <getContainerUartInstance>
 800516c:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d002      	beq.n	800517a <HAL_UART_TxCpltCallback+0x1c>
		UART_TXCallback(uart_instance);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f002 fecf 	bl	8007f18 <UART_TXCallback>
	}
}
 800517a:	bf00      	nop
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}

08005182 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f002 ff68 	bl	8008060 <getContainerUartInstance>
 8005190:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d002      	beq.n	800519e <HAL_UART_RxCpltCallback+0x1c>
		UART_RXCallback(uart_instance);
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f002 fe5b 	bl	8007e54 <UART_RXCallback>
	}
}
 800519e:	bf00      	nop
 80051a0:	3710      	adds	r7, #16
 80051a2:	46bd      	mov	sp, r7
 80051a4:	bd80      	pop	{r7, pc}

080051a6 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051a6:	b580      	push	{r7, lr}
 80051a8:	b084      	sub	sp, #16
 80051aa:	af00      	add	r7, sp, #0
 80051ac:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 80051ae:	6878      	ldr	r0, [r7, #4]
 80051b0:	f002 ff56 	bl	8008060 <getContainerUartInstance>
 80051b4:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d002      	beq.n	80051c2 <HAL_UART_ErrorCallback+0x1c>
		UART_ErrorCallback(uart_instance);
 80051bc:	68f8      	ldr	r0, [r7, #12]
 80051be:	f002 fed1 	bl	8007f64 <UART_ErrorCallback>
	}
}
 80051c2:	bf00      	nop
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}

080051ca <_ZNSt14_Function_baseC1Ev>:
    _Function_base() = default;
 80051ca:	b480      	push	{r7}
 80051cc:	b083      	sub	sp, #12
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	461a      	mov	r2, r3
 80051d6:	2300      	movs	r3, #0
 80051d8:	6013      	str	r3, [r2, #0]
 80051da:	6053      	str	r3, [r2, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	609a      	str	r2, [r3, #8]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	4618      	mov	r0, r3
 80051e6:	370c      	adds	r7, #12
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bc80      	pop	{r7}
 80051ec:	4770      	bx	lr
	...

080051f0 <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEC1IZN14ProtocolSender7proceedEmEUlS2_hhE_vEEOT_>:
       */
      // _GLIBCXX_RESOLVE_LIB_DEFECTS
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
 80051f0:	b590      	push	{r4, r7, lr}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
 80051f8:	6039      	str	r1, [r7, #0]
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	461a      	mov	r2, r3
 80051fe:	2300      	movs	r3, #0
 8005200:	6013      	str	r3, [r2, #0]
 8005202:	6053      	str	r3, [r2, #4]
 8005204:	6093      	str	r3, [r2, #8]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff ffde 	bl	80051ca <_ZNSt14_Function_baseC1Ev>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	60da      	str	r2, [r3, #12]
	      "std::function target must be constructible from the "
	      "constructor argument");

	  using _My_handler = _Handler<_Functor>;

	  if (_My_handler::_M_not_empty_function(__f))
 8005214:	6838      	ldr	r0, [r7, #0]
 8005216:	f000 f81b 	bl	8005250 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E21_M_not_empty_functionIS5_EEbRKT_>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00e      	beq.n	800523e <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEC1IZN14ProtocolSender7proceedEmEUlS2_hhE_vEEOT_+0x4e>
	    {
	      _My_handler::_M_init_functor(_M_functor,
 8005220:	687c      	ldr	r4, [r7, #4]
 8005222:	6838      	ldr	r0, [r7, #0]
 8005224:	f000 f81e 	bl	8005264 <_ZSt7forwardIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8005228:	4603      	mov	r3, r0
 800522a:	4619      	mov	r1, r3
 800522c:	4620      	mov	r0, r4
 800522e:	f000 f823 	bl	8005278 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a04      	ldr	r2, [pc, #16]	@ (8005248 <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEC1IZN14ProtocolSender7proceedEmEUlS2_hhE_vEEOT_+0x58>)
 8005236:	60da      	str	r2, [r3, #12]
	      _M_manager = &_My_handler::_M_manager;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	4a04      	ldr	r2, [pc, #16]	@ (800524c <_ZNSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEC1IZN14ProtocolSender7proceedEmEUlS2_hhE_vEEOT_+0x5c>)
 800523c:	609a      	str	r2, [r3, #8]
	    }
	}
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4618      	mov	r0, r3
 8005242:	370c      	adds	r7, #12
 8005244:	46bd      	mov	sp, r7
 8005246:	bd90      	pop	{r4, r7, pc}
 8005248:	0800529d 	.word	0x0800529d
 800524c:	080052df 	.word	0x080052df

08005250 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E21_M_not_empty_functionIS5_EEbRKT_>:
	  _M_not_empty_function(const _Tp&) noexcept
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
	  { return true; }
 8005258:	2301      	movs	r3, #1
 800525a:	4618      	mov	r0, r3
 800525c:	370c      	adds	r7, #12
 800525e:	46bd      	mov	sp, r7
 8005260:	bc80      	pop	{r7}
 8005262:	4770      	bx	lr

08005264 <_ZSt7forwardIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS5_E4typeE>:
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	4618      	mov	r0, r3
 8005270:	370c      	adds	r7, #12
 8005272:	46bd      	mov	sp, r7
 8005274:	bc80      	pop	{r7}
 8005276:	4770      	bx	lr

08005278 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E15_M_init_functorIS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8005278:	b590      	push	{r4, r7, lr}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
 8005280:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 8005282:	6838      	ldr	r0, [r7, #0]
 8005284:	f7ff ffee 	bl	8005264 <_ZSt7forwardIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8005288:	4603      	mov	r3, r0
 800528a:	4622      	mov	r2, r4
 800528c:	4619      	mov	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f844 	bl	800531c <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 8005294:	bf00      	nop
 8005296:	370c      	adds	r7, #12
 8005298:	46bd      	mov	sp, r7
 800529a:	bd90      	pop	{r4, r7, pc}

0800529c <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E9_M_invokeERKSt9_Any_dataOS2_OhSB_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 800529c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800529e:	b085      	sub	sp, #20
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	60f8      	str	r0, [r7, #12]
 80052a4:	60b9      	str	r1, [r7, #8]
 80052a6:	607a      	str	r2, [r7, #4]
 80052a8:	603b      	str	r3, [r7, #0]
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f84f 	bl	800534e <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E14_M_get_pointerERKSt9_Any_data>
 80052b0:	4604      	mov	r4, r0
 80052b2:	68b8      	ldr	r0, [r7, #8]
 80052b4:	f000 f85c 	bl	8005370 <_ZSt7forwardIPN18Key_tps1htc30Group8KeyGroupEEOT_RNSt16remove_referenceIS3_E4typeE>
 80052b8:	4605      	mov	r5, r0
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 f862 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80052c0:	4606      	mov	r6, r0
 80052c2:	6838      	ldr	r0, [r7, #0]
 80052c4:	f000 f85e 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80052c8:	4603      	mov	r3, r0
 80052ca:	4632      	mov	r2, r6
 80052cc:	4629      	mov	r1, r5
 80052ce:	4620      	mov	r0, r4
 80052d0:	f000 f862 	bl	8005398 <_ZSt10__invoke_rIbRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_JS3_hhEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESA_EEE5valueESA_E4typeEOSF_DpOSG_>
 80052d4:	4603      	mov	r3, r0
      }
 80052d6:	4618      	mov	r0, r3
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080052de <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
      _M_manager(_Any_data& __dest, const _Any_data& __source,
 80052de:	b590      	push	{r4, r7, lr}
 80052e0:	b085      	sub	sp, #20
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	4613      	mov	r3, r2
 80052ea:	71fb      	strb	r3, [r7, #7]
	switch (__op)
 80052ec:	79fb      	ldrb	r3, [r7, #7]
 80052ee:	2b01      	cmp	r3, #1
 80052f0:	d109      	bne.n	8005306 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x28>
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 80052f2:	68f8      	ldr	r0, [r7, #12]
 80052f4:	f000 f875 	bl	80053e2 <_ZNSt9_Any_data9_M_accessIPZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERT_v>
 80052f8:	4604      	mov	r4, r0
 80052fa:	68b8      	ldr	r0, [r7, #8]
 80052fc:	f000 f827 	bl	800534e <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E14_M_get_pointerERKSt9_Any_data>
 8005300:	4603      	mov	r3, r0
 8005302:	6023      	str	r3, [r4, #0]
	    break;
 8005304:	e005      	b.n	8005312 <_ZNSt17_Function_handlerIFbPN18Key_tps1htc30Group8KeyGroupEhhEZN14ProtocolSender7proceedEmEUlS2_hhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x34>
	    _Base::_M_manager(__dest, __source, __op);
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	461a      	mov	r2, r3
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	68f8      	ldr	r0, [r7, #12]
 800530e:	f000 f875 	bl	80053fc <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>
	return false;
 8005312:	2300      	movs	r3, #0
      }
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	bd90      	pop	{r4, r7, pc}

0800531c <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E9_M_createIS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 800531c:	b590      	push	{r4, r7, lr}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f7ff fb9e 	bl	8004a6a <_ZNSt9_Any_data9_M_accessEv>
 800532e:	4603      	mov	r3, r0
 8005330:	4619      	mov	r1, r3
 8005332:	2004      	movs	r0, #4
 8005334:	f7ff fb8e 	bl	8004a54 <_ZnwjPv>
 8005338:	4604      	mov	r4, r0
 800533a:	68b8      	ldr	r0, [r7, #8]
 800533c:	f7ff ff92 	bl	8005264 <_ZSt7forwardIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS5_E4typeE>
 8005340:	4603      	mov	r3, r0
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	6023      	str	r3, [r4, #0]
	  }
 8005346:	bf00      	nop
 8005348:	3714      	adds	r7, #20
 800534a:	46bd      	mov	sp, r7
 800534c:	bd90      	pop	{r4, r7, pc}

0800534e <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source) noexcept
 800534e:	b580      	push	{r7, lr}
 8005350:	b084      	sub	sp, #16
 8005352:	af00      	add	r7, sp, #0
 8005354:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 f88a 	bl	8005470 <_ZNKSt9_Any_data9_M_accessIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERKT_v>
 800535c:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800535e:	68f8      	ldr	r0, [r7, #12]
 8005360:	f000 f892 	bl	8005488 <_ZSt11__addressofIKZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EPT_RS6_>
 8005364:	4603      	mov	r3, r0
 8005366:	bf00      	nop
	}
 8005368:	4618      	mov	r0, r3
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ZSt7forwardIPN18Key_tps1htc30Group8KeyGroupEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	4618      	mov	r0, r3
 800537c:	370c      	adds	r7, #12
 800537e:	46bd      	mov	sp, r7
 8005380:	bc80      	pop	{r7}
 8005382:	4770      	bx	lr

08005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	bc80      	pop	{r7}
 8005396:	4770      	bx	lr

08005398 <_ZSt10__invoke_rIbRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_JS3_hhEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt7is_voidIT_EESt14is_convertibleINSt15__invoke_resultIT0_JDpT1_EE4typeESA_EEE5valueESA_E4typeEOSF_DpOSG_>:
    >;

  // INVOKE<R>: Invoke a callable object and convert the result to R.
  template<typename _Res, typename _Callable, typename... _Args>
    constexpr __can_invoke_as_nonvoid<_Res, _Callable, _Args...>
    __invoke_r(_Callable&& __fn, _Args&&... __args)
 8005398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af02      	add	r7, sp, #8
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
 80053a6:	603b      	str	r3, [r7, #0]
    {
      using __result = __invoke_result<_Callable, _Args...>;
      using __type = typename __result::type;
      using __tag = typename __result::__invoke_type;
      return std::__invoke_impl<__type>(__tag{}, std::forward<_Callable>(__fn),
 80053a8:	68f8      	ldr	r0, [r7, #12]
 80053aa:	f000 f877 	bl	800549c <_ZSt7forwardIRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80053ae:	4604      	mov	r4, r0
 80053b0:	68b8      	ldr	r0, [r7, #8]
 80053b2:	f7ff ffdd 	bl	8005370 <_ZSt7forwardIPN18Key_tps1htc30Group8KeyGroupEEOT_RNSt16remove_referenceIS3_E4typeE>
 80053b6:	4605      	mov	r5, r0
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f7ff ffe3 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80053be:	4606      	mov	r6, r0
 80053c0:	6838      	ldr	r0, [r7, #0]
 80053c2:	f7ff ffdf 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80053c6:	4603      	mov	r3, r0
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	4633      	mov	r3, r6
 80053cc:	462a      	mov	r2, r5
 80053ce:	4621      	mov	r1, r4
 80053d0:	4640      	mov	r0, r8
 80053d2:	f000 f86d 	bl	80054b0 <_ZSt13__invoke_implIbRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_JS3_hhEET_St14__invoke_otherOT0_DpOT1_>
 80053d6:	4603      	mov	r3, r0
					std::forward<_Args>(__args)...);
    }
 80053d8:	4618      	mov	r0, r3
 80053da:	3710      	adds	r7, #16
 80053dc:	46bd      	mov	sp, r7
 80053de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080053e2 <_ZNSt9_Any_data9_M_accessIPZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERT_v>:
      _M_access() noexcept
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b082      	sub	sp, #8
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7ff fb3d 	bl	8004a6a <_ZNSt9_Any_data9_M_accessEv>
 80053f0:	4603      	mov	r3, r0
 80053f2:	4618      	mov	r0, r3
 80053f4:	3708      	adds	r7, #8
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}
	...

080053fc <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80053fc:	b590      	push	{r4, r7, lr}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	4613      	mov	r3, r2
 8005408:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 800540a:	79fb      	ldrb	r3, [r7, #7]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d82a      	bhi.n	8005466 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
 8005410:	a201      	add	r2, pc, #4	@ (adr r2, 8005418 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x1c>)
 8005412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005416:	bf00      	nop
 8005418:	08005429 	.word	0x08005429
 800541c:	08005437 	.word	0x08005437
 8005420:	0800544b 	.word	0x0800544b
 8005424:	0800545d 	.word	0x0800545d
	      __dest._M_access<const type_info*>() = nullptr;
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 f865 	bl	80054f8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>
 800542e:	4603      	mov	r3, r0
 8005430:	2200      	movs	r2, #0
 8005432:	601a      	str	r2, [r3, #0]
	      break;
 8005434:	e017      	b.n	8005466 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8005436:	68f8      	ldr	r0, [r7, #12]
 8005438:	f7ff ffd3 	bl	80053e2 <_ZNSt9_Any_data9_M_accessIPZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERT_v>
 800543c:	4604      	mov	r4, r0
 800543e:	68b8      	ldr	r0, [r7, #8]
 8005440:	f7ff ff85 	bl	800534e <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E14_M_get_pointerERKSt9_Any_data>
 8005444:	4603      	mov	r3, r0
 8005446:	6023      	str	r3, [r4, #0]
	      break;
 8005448:	e00d      	b.n	8005466 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
		  *const_cast<const _Functor*>(_M_get_pointer(__source)));
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f7ff ff7f 	bl	800534e <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E14_M_get_pointerERKSt9_Any_data>
 8005450:	4603      	mov	r3, r0
	      _M_init_functor(__dest,
 8005452:	4619      	mov	r1, r3
 8005454:	68f8      	ldr	r0, [r7, #12]
 8005456:	f000 f85b 	bl	8005510 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>
	      break;
 800545a:	e004      	b.n	8005466 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_managerERSt9_Any_dataRKS7_St18_Manager_operation+0x6a>
	      _M_destroy(__dest, _Local_storage());
 800545c:	4621      	mov	r1, r4
 800545e:	68f8      	ldr	r0, [r7, #12]
 8005460:	f000 f868 	bl	8005534 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005464:	bf00      	nop
	  return false;
 8005466:	2300      	movs	r3, #0
	}
 8005468:	4618      	mov	r0, r3
 800546a:	3714      	adds	r7, #20
 800546c:	46bd      	mov	sp, r7
 800546e:	bd90      	pop	{r4, r7, pc}

08005470 <_ZNKSt9_Any_data9_M_accessIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERKT_v>:
      _M_access() const noexcept
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8005478:	6878      	ldr	r0, [r7, #4]
 800547a:	f7ff fb00 	bl	8004a7e <_ZNKSt9_Any_data9_M_accessEv>
 800547e:	4603      	mov	r3, r0
 8005480:	4618      	mov	r0, r3
 8005482:	3708      	adds	r7, #8
 8005484:	46bd      	mov	sp, r7
 8005486:	bd80      	pop	{r7, pc}

08005488 <_ZSt11__addressofIKZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EPT_RS6_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4618      	mov	r0, r3
 8005494:	370c      	adds	r7, #12
 8005496:	46bd      	mov	sp, r7
 8005498:	bc80      	pop	{r7}
 800549a:	4770      	bx	lr

0800549c <_ZSt7forwardIRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS6_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4618      	mov	r0, r3
 80054a8:	370c      	adds	r7, #12
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bc80      	pop	{r7}
 80054ae:	4770      	bx	lr

080054b0 <_ZSt13__invoke_implIbRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_JS3_hhEET_St14__invoke_otherOT0_DpOT1_>:
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
 80054b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054b2:	b085      	sub	sp, #20
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	7338      	strb	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 80054be:	68b8      	ldr	r0, [r7, #8]
 80054c0:	f7ff ffec 	bl	800549c <_ZSt7forwardIRZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS6_E4typeE>
 80054c4:	4606      	mov	r6, r0
 80054c6:	6878      	ldr	r0, [r7, #4]
 80054c8:	f7ff ff52 	bl	8005370 <_ZSt7forwardIPN18Key_tps1htc30Group8KeyGroupEEOT_RNSt16remove_referenceIS3_E4typeE>
 80054cc:	4603      	mov	r3, r0
 80054ce:	681c      	ldr	r4, [r3, #0]
 80054d0:	6838      	ldr	r0, [r7, #0]
 80054d2:	f7ff ff57 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80054d6:	4603      	mov	r3, r0
 80054d8:	781d      	ldrb	r5, [r3, #0]
 80054da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80054dc:	f7ff ff52 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 80054e0:	4603      	mov	r3, r0
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	462a      	mov	r2, r5
 80054e6:	4621      	mov	r1, r4
 80054e8:	4630      	mov	r0, r6
 80054ea:	f7ff fcf5 	bl	8004ed8 <_ZZN14ProtocolSender7proceedEmENKUlPN18Key_tps1htc30Group8KeyGroupEhhE_clES2_hh>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4618      	mov	r0, r3
 80054f2:	3714      	adds	r7, #20
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080054f8 <_ZNSt9_Any_data9_M_accessIPKSt9type_infoEERT_v>:
      _M_access() noexcept
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f7ff fab2 	bl	8004a6a <_ZNSt9_Any_data9_M_accessEv>
 8005506:	4603      	mov	r3, r0
 8005508:	4618      	mov	r0, r3
 800550a:	3708      	adds	r7, #8
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}

08005510 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E15_M_init_functorIRKS5_EEvRSt9_Any_dataOT_>:
	  _M_init_functor(_Any_data& __functor, _Fn&& __f)
 8005510:	b590      	push	{r4, r7, lr}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
 8005518:	6039      	str	r1, [r7, #0]
	    _M_create(__functor, std::forward<_Fn>(__f), _Local_storage());
 800551a:	6838      	ldr	r0, [r7, #0]
 800551c:	f000 f816 	bl	800554c <_ZSt7forwardIRKZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8005520:	4603      	mov	r3, r0
 8005522:	4622      	mov	r2, r4
 8005524:	4619      	mov	r1, r3
 8005526:	6878      	ldr	r0, [r7, #4]
 8005528:	f000 f81a 	bl	8005560 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>
	  }
 800552c:	bf00      	nop
 800552e:	370c      	adds	r7, #12
 8005530:	46bd      	mov	sp, r7
 8005532:	bd90      	pop	{r4, r7, pc}

08005534 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 8005534:	b580      	push	{r7, lr}
 8005536:	b082      	sub	sp, #8
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f000 f827 	bl	8005592 <_ZNSt9_Any_data9_M_accessIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERT_v>
	}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <_ZSt7forwardIRKZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS7_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4618      	mov	r0, r3
 8005558:	370c      	adds	r7, #12
 800555a:	46bd      	mov	sp, r7
 800555c:	bc80      	pop	{r7}
 800555e:	4770      	bx	lr

08005560 <_ZNSt14_Function_base13_Base_managerIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_E9_M_createIRKS5_EEvRSt9_Any_dataOT_St17integral_constantIbLb1EE>:
	  _M_create(_Any_data& __dest, _Fn&& __f, true_type)
 8005560:	b590      	push	{r4, r7, lr}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	713a      	strb	r2, [r7, #4]
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 800556c:	68f8      	ldr	r0, [r7, #12]
 800556e:	f7ff fa7c 	bl	8004a6a <_ZNSt9_Any_data9_M_accessEv>
 8005572:	4603      	mov	r3, r0
 8005574:	4619      	mov	r1, r3
 8005576:	2004      	movs	r0, #4
 8005578:	f7ff fa6c 	bl	8004a54 <_ZnwjPv>
 800557c:	4604      	mov	r4, r0
 800557e:	68b8      	ldr	r0, [r7, #8]
 8005580:	f7ff ffe4 	bl	800554c <_ZSt7forwardIRKZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EOT_RNSt16remove_referenceIS7_E4typeE>
 8005584:	4603      	mov	r3, r0
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	6023      	str	r3, [r4, #0]
	  }
 800558a:	bf00      	nop
 800558c:	3714      	adds	r7, #20
 800558e:	46bd      	mov	sp, r7
 8005590:	bd90      	pop	{r4, r7, pc}

08005592 <_ZNSt9_Any_data9_M_accessIZN14ProtocolSender7proceedEmEUlPN18Key_tps1htc30Group8KeyGroupEhhE_EERT_v>:
      _M_access() noexcept
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff fa65 	bl	8004a6a <_ZNSt9_Any_data9_M_accessEv>
 80055a0:	4603      	mov	r3, r0
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}

080055aa <_ZN18Key_tps1htc30Group7initAdcERKN12Stm32ADC_dma13Stm32ADC_initE>:
	inline uint8_t getKeys(const uint8_t group_id) {return m_initPinCnt[group_id];}


	//initialization functions
	static Key_tps1htc30Group* const getInstance();
	inline void initAdc(const Stm32ADC_dma::Stm32ADC_init& settings) { m_adc.init(settings); }
 80055aa:	b580      	push	{r7, lr}
 80055ac:	b082      	sub	sp, #8
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
 80055b2:	6039      	str	r1, [r7, #0]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80055ba:	6839      	ldr	r1, [r7, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f001 fb97 	bl	8006cf0 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}

080055ca <_ZN14ProtocolSenderC1Ev>:
	struct pool_elem {
		u16 size;
		u8 data[];
	};

	ProtocolSender() = default;
 80055ca:	b580      	push	{r7, lr}
 80055cc:	b082      	sub	sp, #8
 80055ce:	af00      	add	r7, sp, #0
 80055d0:	6078      	str	r0, [r7, #4]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 80055e0:	4618      	mov	r0, r3
 80055e2:	f001 fd7d 	bl	80070e0 <_ZN13TimingManagerC1Ev>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	4618      	mov	r0, r3
 80055ea:	3708      	adds	r7, #8
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <_ZN15RelayControllerC1Ev>:
 */

#include <RelayController.h>


RelayController::RelayController()
 80055f0:	b580      	push	{r7, lr}
 80055f2:	b082      	sub	sp, #8
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 fd70 	bl	80070e0 <_ZN13TimingManagerC1Ev>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	3304      	adds	r3, #4
 8005604:	4618      	mov	r0, r3
 8005606:	f7ff ffe0 	bl	80055ca <_ZN14ProtocolSenderC1Ev>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
{
	// TODO Auto-generated constructor stub
	init_all();
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f806 	bl	8005624 <_ZN15RelayController8init_allEv>
}
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	4618      	mov	r0, r3
 800561c:	3708      	adds	r7, #8
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
	...

08005624 <_ZN15RelayController8init_allEv>:

void RelayController::init_all()
{
 8005624:	b5b0      	push	{r4, r5, r7, lr}
 8005626:	b08e      	sub	sp, #56	@ 0x38
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
	//init communicator --------------------------------------------------
	extern UART_HandleTypeDef huart1;
	m_comm.init(&huart1);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	3304      	adds	r3, #4
 8005630:	4921      	ldr	r1, [pc, #132]	@ (80056b8 <_ZN15RelayController8init_allEv+0x94>)
 8005632:	4618      	mov	r0, r3
 8005634:	f7ff fbca 	bl	8004dcc <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef>

	// init adc ---------------------------------------------------------
	extern ADC_HandleTypeDef hadc1;

	Stm32ADC_dma::Stm32ADC_init adc_init =  {
 8005638:	4a20      	ldr	r2, [pc, #128]	@ (80056bc <_ZN15RelayController8init_allEv+0x98>)
 800563a:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 800563e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005642:	e883 0003 	stmia.w	r3, {r0, r1}
			.hadc = &hadc1,
			.filter = 1.0/512.0
	};

	m_relayGroup = Key_tps1htc30Group::getInstance();
 8005646:	f000 fa97 	bl	8005b78 <_ZN18Key_tps1htc30Group11getInstanceEv>
 800564a:	4602      	mov	r2, r0
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
	m_relayGroup->initAdc(adc_init);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005658:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff ffa3 	bl	80055aa <_ZN18Key_tps1htc30Group7initAdcERKN12Stm32ADC_dma13Stm32ADC_initE>


	Key_tps1htc30Group::KeyInit key =  {
 8005664:	4b16      	ldr	r3, [pc, #88]	@ (80056c0 <_ZN15RelayController8init_allEv+0x9c>)
 8005666:	f107 041c 	add.w	r4, r7, #28
 800566a:	461d      	mov	r5, r3
 800566c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800566e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	6023      	str	r3, [r4, #0]
					.GPIO_Pin = I_FAULT_Pin
			},
			.adc_ch = 0
	};

	Key_tps1htc30Group::GroupInit group = {
 8005674:	4b13      	ldr	r3, [pc, #76]	@ (80056c4 <_ZN15RelayController8init_allEv+0xa0>)
 8005676:	f107 040c 	add.w	r4, r7, #12
 800567a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800567c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					.GPIOx = O_DIAG_EN_GPIO_Port,
					.GPIO_Pin = O_DIAG_EN_Pin
			}
	};

	m_relayGroup->initGroup(group, 0);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005686:	f107 010c 	add.w	r1, r7, #12
 800568a:	2200      	movs	r2, #0
 800568c:	4618      	mov	r0, r3
 800568e:	f000 fb68 	bl	8005d62 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh>
	m_relayGroup->initKey(key, 0);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005698:	f107 011c 	add.w	r1, r7, #28
 800569c:	2200      	movs	r2, #0
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 fad7 	bl	8005c52 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh>
	m_relayGroup->start();
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80056aa:	4618      	mov	r0, r3
 80056ac:	f000 fba6 	bl	8005dfc <_ZN18Key_tps1htc30Group5startEv>
}
 80056b0:	bf00      	nop
 80056b2:	3738      	adds	r7, #56	@ 0x38
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bdb0      	pop	{r4, r5, r7, pc}
 80056b8:	20000268 	.word	0x20000268
 80056bc:	0800ad80 	.word	0x0800ad80
 80056c0:	0800ad88 	.word	0x0800ad88
 80056c4:	0800ad9c 	.word	0x0800ad9c

080056c8 <_ZN15RelayController12get_instanceEv>:

RelayController* const RelayController::get_instance()
{
 80056c8:	b598      	push	{r3, r4, r7, lr}
 80056ca:	af00      	add	r7, sp, #0
	static RelayController* const inst = new RelayController();
 80056cc:	4b14      	ldr	r3, [pc, #80]	@ (8005720 <_ZN15RelayController12get_instanceEv+0x58>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f3bf 8f5b 	dmb	ish
 80056d4:	f003 0301 	and.w	r3, r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	bf0c      	ite	eq
 80056dc:	2301      	moveq	r3, #1
 80056de:	2300      	movne	r3, #0
 80056e0:	b2db      	uxtb	r3, r3
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d018      	beq.n	8005718 <_ZN15RelayController12get_instanceEv+0x50>
 80056e6:	480e      	ldr	r0, [pc, #56]	@ (8005720 <_ZN15RelayController12get_instanceEv+0x58>)
 80056e8:	f002 fcea 	bl	80080c0 <__cxa_guard_acquire>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	bf14      	ite	ne
 80056f2:	2301      	movne	r3, #1
 80056f4:	2300      	moveq	r3, #0
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00d      	beq.n	8005718 <_ZN15RelayController12get_instanceEv+0x50>
 80056fc:	f44f 702b 	mov.w	r0, #684	@ 0x2ac
 8005700:	f002 fced 	bl	80080de <_Znwj>
 8005704:	4603      	mov	r3, r0
 8005706:	461c      	mov	r4, r3
 8005708:	4620      	mov	r0, r4
 800570a:	f7ff ff71 	bl	80055f0 <_ZN15RelayControllerC1Ev>
 800570e:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <_ZN15RelayController12get_instanceEv+0x5c>)
 8005710:	601c      	str	r4, [r3, #0]
 8005712:	4803      	ldr	r0, [pc, #12]	@ (8005720 <_ZN15RelayController12get_instanceEv+0x58>)
 8005714:	f002 fce0 	bl	80080d8 <__cxa_guard_release>
	return inst;
 8005718:	4b02      	ldr	r3, [pc, #8]	@ (8005724 <_ZN15RelayController12get_instanceEv+0x5c>)
 800571a:	681b      	ldr	r3, [r3, #0]
}
 800571c:	4618      	mov	r0, r3
 800571e:	bd98      	pop	{r3, r4, r7, pc}
 8005720:	20000340 	.word	0x20000340
 8005724:	2000033c 	.word	0x2000033c

08005728 <_ZN15RelayController7proceedEv>:

void RelayController::proceed()
{
 8005728:	b590      	push	{r4, r7, lr}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]

	while(true) {
		m_comm.proceed(HAL_GetTick());
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	1d1c      	adds	r4, r3, #4
 8005734:	f7fc f9d8 	bl	8001ae8 <HAL_GetTick>
 8005738:	4603      	mov	r3, r0
 800573a:	4619      	mov	r1, r3
 800573c:	4620      	mov	r0, r4
 800573e:	f7ff fc26 	bl	8004f8e <_ZN14ProtocolSender7proceedEm>

		if(led_timer.isExpired()) {
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4618      	mov	r0, r3
 8005746:	f7ff f9d1 	bl	8004aec <_ZNK13TimingManager9isExpiredEv>
 800574a:	4603      	mov	r3, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	d009      	beq.n	8005764 <_ZN15RelayController7proceedEv+0x3c>
			//UART_SendBuffer(&m_comm.stm32_uart, (uint8_t*)txBuff, sizeof(txBuff) - 1);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8005750:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005754:	4809      	ldr	r0, [pc, #36]	@ (800577c <_ZN15RelayController7proceedEv+0x54>)
 8005756:	f7fd fb00 	bl	8002d5a <HAL_GPIO_TogglePin>

			led_timer.start(100);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2164      	movs	r1, #100	@ 0x64
 800575e:	4618      	mov	r0, r3
 8005760:	f7ff f9d4 	bl	8004b0c <_ZN13TimingManager5startEm>
//		if(adc->proceed(0)) {
//			for(int i = 0; i != 10; ++i) {
//				currents[i] = adc->getAdc(i);
//			}
//		}
		m_relayGroup->proceed(HAL_GetTick());
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 4294 	ldr.w	r4, [r3, #660]	@ 0x294
 800576a:	f7fc f9bd 	bl	8001ae8 <HAL_GetTick>
 800576e:	4603      	mov	r3, r0
 8005770:	4619      	mov	r1, r3
 8005772:	4620      	mov	r0, r4
 8005774:	f000 fb82 	bl	8005e7c <_ZN18Key_tps1htc30Group7proceedEm>
		m_comm.proceed(HAL_GetTick());
 8005778:	e7da      	b.n	8005730 <_ZN15RelayController7proceedEv+0x8>
 800577a:	bf00      	nop
 800577c:	40011000 	.word	0x40011000

08005780 <app_main>:
#include <RelayController.h>

RelayController* global;

void app_main(void)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
	RelayController* const inst = global = RelayController::get_instance();
 8005786:	f7ff ff9f 	bl	80056c8 <_ZN15RelayController12get_instanceEv>
 800578a:	4603      	mov	r3, r0
 800578c:	4a05      	ldr	r2, [pc, #20]	@ (80057a4 <app_main+0x24>)
 800578e:	6013      	str	r3, [r2, #0]
 8005790:	4b04      	ldr	r3, [pc, #16]	@ (80057a4 <app_main+0x24>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	607b      	str	r3, [r7, #4]
	inst->proceed();
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7ff ffc6 	bl	8005728 <_ZN15RelayController7proceedEv>
}
 800579c:	bf00      	nop
 800579e:	3708      	adds	r7, #8
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	20000344 	.word	0x20000344

080057a8 <_ZNK10Stm32Pin_I9get_inputEv>:

#ifdef HAL_GPIO_MODULE_ENABLED
// IO -----------------------------------------------------------
struct Stm32Pin_I
{
	inline bool get_input() const {
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
		return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	889b      	ldrh	r3, [r3, #4]
 80057b8:	4619      	mov	r1, r3
 80057ba:	4610      	mov	r0, r2
 80057bc:	f7fd fa9e 	bl	8002cfc <HAL_GPIO_ReadPin>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b01      	cmp	r3, #1
 80057c4:	bf0c      	ite	eq
 80057c6:	2301      	moveq	r3, #1
 80057c8:	2300      	movne	r3, #0
 80057ca:	b2db      	uxtb	r3, r3
	}
 80057cc:	4618      	mov	r0, r3
 80057ce:	3708      	adds	r7, #8
 80057d0:	46bd      	mov	sp, r7
 80057d2:	bd80      	pop	{r7, pc}

080057d4 <_ZN10Stm32Pin_O10set_outputEb>:

// IO -----------------------------------------------------------
struct Stm32Pin_O
{

	inline void set_output(bool state) {
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b082      	sub	sp, #8
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	460b      	mov	r3, r1
 80057de:	70fb      	strb	r3, [r7, #3]
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (state) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	8899      	ldrh	r1, [r3, #4]
 80057e8:	78fb      	ldrb	r3, [r7, #3]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d001      	beq.n	80057f2 <_ZN10Stm32Pin_O10set_outputEb+0x1e>
 80057ee:	2301      	movs	r3, #1
 80057f0:	e000      	b.n	80057f4 <_ZN10Stm32Pin_O10set_outputEb+0x20>
 80057f2:	2300      	movs	r3, #0
 80057f4:	461a      	mov	r2, r3
 80057f6:	f7fd fa98 	bl	8002d2a <HAL_GPIO_WritePin>
	}
 80057fa:	bf00      	nop
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}

08005802 <_ZN15InRangeDetectorIfE4initEffm>:
		OutOfMinimumBoarder,
		OutOfMaximumBoarder,
	};

	error proceed(const uint32_t current_time, const T value);
	void init(const T min, const T max, const uint32_t dt) { m_minimum = min; m_maximum = max; m_dt = dt; m_time_counter = 0; m_lastError = error::None; }
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	603b      	str	r3, [r7, #0]
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	68ba      	ldr	r2, [r7, #8]
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	615a      	str	r2, [r3, #20]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	683a      	ldr	r2, [r7, #0]
 8005820:	605a      	str	r2, [r3, #4]
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	731a      	strb	r2, [r3, #12]
 800582e:	bf00      	nop
 8005830:	3714      	adds	r7, #20
 8005832:	46bd      	mov	sp, r7
 8005834:	bc80      	pop	{r7}
 8005836:	4770      	bx	lr

08005838 <_ZN15InRangeDetectorIfE7proceedEmf>:
};



template<class T>
typename InRangeDetector<T>::error InRangeDetector<T>::proceed(const uint32_t current_time, const T value)
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
{
	if(m_last_time == current_time) {
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	68ba      	ldr	r2, [r7, #8]
 800584a:	429a      	cmp	r2, r3
 800584c:	d102      	bne.n	8005854 <_ZN15InRangeDetectorIfE7proceedEmf+0x1c>
		return m_lastError;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	7b1b      	ldrb	r3, [r3, #12]
 8005852:	e046      	b.n	80058e2 <_ZN15InRangeDetectorIfE7proceedEmf+0xaa>
	}

	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	4619      	mov	r1, r3
 800585a:	6878      	ldr	r0, [r7, #4]
 800585c:	f7fb fbc0 	bl	8000fe0 <__aeabi_fcmplt>
 8005860:	4603      	mov	r3, r0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d001      	beq.n	800586a <_ZN15InRangeDetectorIfE7proceedEmf+0x32>
 8005866:	2301      	movs	r3, #1
 8005868:	e00b      	b.n	8005882 <_ZN15InRangeDetectorIfE7proceedEmf+0x4a>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	695b      	ldr	r3, [r3, #20]
 800586e:	4619      	mov	r1, r3
 8005870:	6878      	ldr	r0, [r7, #4]
 8005872:	f7fb fbd3 	bl	800101c <__aeabi_fcmpgt>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <_ZN15InRangeDetectorIfE7proceedEmf+0x48>
 800587c:	2302      	movs	r3, #2
 800587e:	e000      	b.n	8005882 <_ZN15InRangeDetectorIfE7proceedEmf+0x4a>
 8005880:	2300      	movs	r3, #0
 8005882:	77fb      	strb	r3, [r7, #31]

	if(reg_error != error::None) {
 8005884:	7ffb      	ldrb	r3, [r7, #31]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d015      	beq.n	80058b6 <_ZN15InRangeDetectorIfE7proceedEmf+0x7e>
		const uint32_t next_counter = m_time_counter + 1;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	3301      	adds	r3, #1
 8005890:	617b      	str	r3, [r7, #20]

		if(next_counter < m_dt) {
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	685b      	ldr	r3, [r3, #4]
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	429a      	cmp	r2, r3
 800589a:	d203      	bcs.n	80058a4 <_ZN15InRangeDetectorIfE7proceedEmf+0x6c>
			m_time_counter = next_counter;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	697a      	ldr	r2, [r7, #20]
 80058a0:	601a      	str	r2, [r3, #0]
 80058a2:	e019      	b.n	80058d8 <_ZN15InRangeDetectorIfE7proceedEmf+0xa0>
		} else if(next_counter == m_dt) {
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	697a      	ldr	r2, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d114      	bne.n	80058d8 <_ZN15InRangeDetectorIfE7proceedEmf+0xa0>
			m_lastError = reg_error;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	7ffa      	ldrb	r2, [r7, #31]
 80058b2:	731a      	strb	r2, [r3, #12]
 80058b4:	e010      	b.n	80058d8 <_ZN15InRangeDetectorIfE7proceedEmf+0xa0>
		}
	} else {
		const int next_counter = m_time_counter - 1;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3b01      	subs	r3, #1
 80058bc:	61bb      	str	r3, [r7, #24]

		if(next_counter > 0) {
 80058be:	69bb      	ldr	r3, [r7, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	dd03      	ble.n	80058cc <_ZN15InRangeDetectorIfE7proceedEmf+0x94>
			m_time_counter = next_counter;
 80058c4:	69ba      	ldr	r2, [r7, #24]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	601a      	str	r2, [r3, #0]
 80058ca:	e005      	b.n	80058d8 <_ZN15InRangeDetectorIfE7proceedEmf+0xa0>
		} else {
			m_time_counter = 0;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	601a      	str	r2, [r3, #0]
			m_lastError = error::None;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	731a      	strb	r2, [r3, #12]
		}
	}

	m_last_time = current_time;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	609a      	str	r2, [r3, #8]

	return m_lastError;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	7b1b      	ldrb	r3, [r3, #12]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3720      	adds	r7, #32
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}

080058ea <_ZNK21FP_MovingAverageArray6getOutEh>:
	~FP_MovingAverageArray();

	void allocArrays(const uint8_t n);
	void proceed(uint16_t* const values);

	inline uint32_t getOut(const uint8_t n) const
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
 80058f2:	460b      	mov	r3, r1
 80058f4:	70fb      	strb	r3, [r7, #3]
	{
		if(n < m_n) {
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	7e1b      	ldrb	r3, [r3, #24]
 80058fa:	78fa      	ldrb	r2, [r7, #3]
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d206      	bcs.n	800590e <_ZNK21FP_MovingAverageArray6getOutEh+0x24>
			return m_y[n];
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	78fb      	ldrb	r3, [r7, #3]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	e000      	b.n	8005910 <_ZNK21FP_MovingAverageArray6getOutEh+0x26>
		}
		return 0;
 800590e:	2300      	movs	r3, #0
	}
 8005910:	4618      	mov	r0, r3
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	bc80      	pop	{r7}
 8005918:	4770      	bx	lr

0800591a <_ZNK12Stm32ADC_dma6getAdcEi>:

	bool start();
	void init(const Stm32ADC_init&);
	inline void setFilter(const float filter) {ma.setAlpha(filter);}

	inline uint32_t getAdc(int i) const {return ma.getOut(i);}
 800591a:	b580      	push	{r7, lr}
 800591c:	b082      	sub	sp, #8
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	3310      	adds	r3, #16
 8005928:	683a      	ldr	r2, [r7, #0]
 800592a:	b2d2      	uxtb	r2, r2
 800592c:	4611      	mov	r1, r2
 800592e:	4618      	mov	r0, r3
 8005930:	f7ff ffdb 	bl	80058ea <_ZNK21FP_MovingAverageArray6getOutEh>
 8005934:	4603      	mov	r3, r0
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}

0800593e <_ZNK12Stm32ADC_dma11getChannelsEv>:
	inline uint8_t getChannels() const { return n_channels; }
 800593e:	b480      	push	{r7}
 8005940:	b083      	sub	sp, #12
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	791b      	ldrb	r3, [r3, #4]
 800594a:	4618      	mov	r0, r3
 800594c:	370c      	adds	r7, #12
 800594e:	46bd      	mov	sp, r7
 8005950:	bc80      	pop	{r7}
 8005952:	4770      	bx	lr

08005954 <_ZNKSt14_Function_base8_M_emptyEv>:
    bool _M_empty() const { return !_M_manager; }
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	2b00      	cmp	r3, #0
 8005962:	bf0c      	ite	eq
 8005964:	2301      	moveq	r3, #1
 8005966:	2300      	movne	r3, #0
 8005968:	b2db      	uxtb	r3, r3
 800596a:	4618      	mov	r0, r3
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <_ZN10Stm32Pin_OC1Ev>:
struct Stm32Pin_O
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2200      	movs	r2, #0
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2200      	movs	r2, #0
 8005986:	809a      	strh	r2, [r3, #4]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	4618      	mov	r0, r3
 800598c:	370c      	adds	r7, #12
 800598e:	46bd      	mov	sp, r7
 8005990:	bc80      	pop	{r7}
 8005992:	4770      	bx	lr

08005994 <_ZN18Key_tps1htc30Group8KeyGroupC1Ev>:
		const float current = ((voltage/*- m_v_rms*/) / Rsns) * Ksns;
		return (current > 0.0) ? current : 0.0;
	}

public:
	struct KeyGroup {
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	4618      	mov	r0, r3
 80059a0:	2330      	movs	r3, #48	@ 0x30
 80059a2:	461a      	mov	r2, r3
 80059a4:	2100      	movs	r1, #0
 80059a6:	f003 fe31 	bl	800960c <memset>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	3330      	adds	r3, #48	@ 0x30
 80059ae:	2230      	movs	r2, #48	@ 0x30
 80059b0:	2100      	movs	r1, #0
 80059b2:	4618      	mov	r0, r3
 80059b4:	f003 fe2a 	bl	800960c <memset>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	339c      	adds	r3, #156	@ 0x9c
 80059bc:	2290      	movs	r2, #144	@ 0x90
 80059be:	2100      	movs	r1, #0
 80059c0:	4618      	mov	r0, r3
 80059c2:	f003 fe23 	bl	800960c <memset>
 80059c6:	2200      	movs	r2, #0
 80059c8:	6879      	ldr	r1, [r7, #4]
 80059ca:	4613      	mov	r3, r2
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	4413      	add	r3, r2
 80059d0:	00db      	lsls	r3, r3, #3
 80059d2:	440b      	add	r3, r1
 80059d4:	33a0      	adds	r3, #160	@ 0xa0
 80059d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80059da:	6019      	str	r1, [r3, #0]
 80059dc:	2a05      	cmp	r2, #5
 80059de:	d001      	beq.n	80059e4 <_ZN18Key_tps1htc30Group8KeyGroupC1Ev+0x50>
 80059e0:	3201      	adds	r2, #1
 80059e2:	e7f1      	b.n	80059c8 <_ZN18Key_tps1htc30Group8KeyGroupC1Ev+0x34>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80059ea:	2200      	movs	r2, #0
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	809a      	strh	r2, [r3, #4]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80059f6:	4618      	mov	r0, r3
 80059f8:	f7ff ffbc 	bl	8005974 <_ZN10Stm32Pin_OC1Ev>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 8005a02:	4618      	mov	r0, r3
 8005a04:	f7ff ffb6 	bl	8005974 <_ZN10Stm32Pin_OC1Ev>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3708      	adds	r7, #8
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	bd80      	pop	{r7, pc}
	...

08005a14 <_ZN20FP_MovingAverageBaseC1Ev>:
#include <cstdint>

class FP_MovingAverageBase
{
public:
	FP_MovingAverageBase() = default;
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
 8005a1c:	4a0c      	ldr	r2, [pc, #48]	@ (8005a50 <_ZN20FP_MovingAverageBaseC1Ev+0x3c>)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	601a      	str	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	711a      	strb	r2, [r3, #4]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	715a      	strb	r2, [r3, #5]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	719a      	strb	r2, [r3, #6]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	f04f 0200 	mov.w	r2, #0
 8005a3a:	609a      	str	r2, [r3, #8]
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	60da      	str	r2, [r3, #12]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4618      	mov	r0, r3
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bc80      	pop	{r7}
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	0800aea4 	.word	0x0800aea4

08005a54 <_ZN20FP_MovingAverageBaseD1Ev>:
	virtual ~FP_MovingAverageBase() = default;
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	4a04      	ldr	r2, [pc, #16]	@ (8005a70 <_ZN20FP_MovingAverageBaseD1Ev+0x1c>)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	4618      	mov	r0, r3
 8005a66:	370c      	adds	r7, #12
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bc80      	pop	{r7}
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	0800aea4 	.word	0x0800aea4

08005a74 <_ZN20FP_MovingAverageBaseD0Ev>:
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b082      	sub	sp, #8
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f7ff ffe9 	bl	8005a54 <_ZN20FP_MovingAverageBaseD1Ev>
 8005a82:	2110      	movs	r1, #16
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f002 fb17 	bl	80080b8 <_ZdlPvj>
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <_ZN21FP_MovingAverageArrayC1Ev>:
	FP_MovingAverageArray() = default;
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b082      	sub	sp, #8
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7ff ffb8 	bl	8005a14 <_ZN20FP_MovingAverageBaseC1Ev>
 8005aa4:	4a08      	ldr	r2, [pc, #32]	@ (8005ac8 <_ZN21FP_MovingAverageArrayC1Ev+0x34>)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	611a      	str	r2, [r3, #16]
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	615a      	str	r2, [r3, #20]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	761a      	strb	r2, [r3, #24]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3708      	adds	r7, #8
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	bd80      	pop	{r7, pc}
 8005ac6:	bf00      	nop
 8005ac8:	0800afc0 	.word	0x0800afc0

08005acc <_ZN12Stm32ADC_dmaC1Ev>:
	Stm32ADC_dma() = default;
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	601a      	str	r2, [r3, #0]
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	711a      	strb	r2, [r3, #4]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	609a      	str	r2, [r3, #8]
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	731a      	strb	r2, [r3, #12]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3310      	adds	r3, #16
 8005af0:	4618      	mov	r0, r3
 8005af2:	f7ff ffcf 	bl	8005a94 <_ZN21FP_MovingAverageArrayC1Ev>
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	4618      	mov	r0, r3
 8005afa:	3708      	adds	r7, #8
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <_ZN18Key_tps1htc30GroupC1Ev>:
	Key_tps1htc30Group() = default;
 8005b00:	b5b0      	push	{r4, r5, r7, lr}
 8005b02:	b082      	sub	sp, #8
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2401      	movs	r4, #1
 8005b0c:	461d      	mov	r5, r3
 8005b0e:	e005      	b.n	8005b1c <_ZN18Key_tps1htc30GroupC1Ev+0x1c>
 8005b10:	4628      	mov	r0, r5
 8005b12:	f7ff ff3f 	bl	8005994 <_ZN18Key_tps1htc30Group8KeyGroupC1Ev>
 8005b16:	3c01      	subs	r4, #1
 8005b18:	f505 75a2 	add.w	r5, r5, #324	@ 0x144
 8005b1c:	2c00      	cmp	r4, #0
 8005b1e:	daf7      	bge.n	8005b10 <_ZN18Key_tps1htc30GroupC1Ev+0x10>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7ff ffd0 	bl	8005acc <_ZN12Stm32ADC_dmaC1Ev>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f8a3 22b4 	strh.w	r2, [r3, #692]	@ 0x2b4
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2200      	movs	r2, #0
 8005b38:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005b78 <_ZN18Key_tps1htc30Group11getInstanceEv>:

#include "Keytps1htc30Group.h"
#include "tools/irq/stm32_irq_block.h"

Key_tps1htc30Group* const Key_tps1htc30Group::getInstance()
{
 8005b78:	b598      	push	{r3, r4, r7, lr}
 8005b7a:	af00      	add	r7, sp, #0
	static Key_tps1htc30Group* const inst = new Key_tps1htc30Group;
 8005b7c:	4b14      	ldr	r3, [pc, #80]	@ (8005bd0 <_ZN18Key_tps1htc30Group11getInstanceEv+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f3bf 8f5b 	dmb	ish
 8005b84:	f003 0301 	and.w	r3, r3, #1
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bf0c      	ite	eq
 8005b8c:	2301      	moveq	r3, #1
 8005b8e:	2300      	movne	r3, #0
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d018      	beq.n	8005bc8 <_ZN18Key_tps1htc30Group11getInstanceEv+0x50>
 8005b96:	480e      	ldr	r0, [pc, #56]	@ (8005bd0 <_ZN18Key_tps1htc30Group11getInstanceEv+0x58>)
 8005b98:	f002 fa92 	bl	80080c0 <__cxa_guard_acquire>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	bf14      	ite	ne
 8005ba2:	2301      	movne	r3, #1
 8005ba4:	2300      	moveq	r3, #0
 8005ba6:	b2db      	uxtb	r3, r3
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d00d      	beq.n	8005bc8 <_ZN18Key_tps1htc30Group11getInstanceEv+0x50>
 8005bac:	f44f 7033 	mov.w	r0, #716	@ 0x2cc
 8005bb0:	f002 fa95 	bl	80080de <_Znwj>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	461c      	mov	r4, r3
 8005bb8:	4620      	mov	r0, r4
 8005bba:	f7ff ffa1 	bl	8005b00 <_ZN18Key_tps1htc30GroupC1Ev>
 8005bbe:	4b05      	ldr	r3, [pc, #20]	@ (8005bd4 <_ZN18Key_tps1htc30Group11getInstanceEv+0x5c>)
 8005bc0:	601c      	str	r4, [r3, #0]
 8005bc2:	4803      	ldr	r0, [pc, #12]	@ (8005bd0 <_ZN18Key_tps1htc30Group11getInstanceEv+0x58>)
 8005bc4:	f002 fa88 	bl	80080d8 <__cxa_guard_release>
	return inst;
 8005bc8:	4b02      	ldr	r3, [pc, #8]	@ (8005bd4 <_ZN18Key_tps1htc30Group11getInstanceEv+0x5c>)
 8005bca:	681b      	ldr	r3, [r3, #0]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	bd98      	pop	{r3, r4, r7, pc}
 8005bd0:	2000034c 	.word	0x2000034c
 8005bd4:	20000348 	.word	0x20000348

08005bd8 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE>:

void Key_tps1htc30Group::iterateAll(std::function<bool(KeyGroup*, uint8_t, uint8_t)> foo)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b084      	sub	sp, #16
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	6039      	str	r1, [r7, #0]
	if(!foo) {
 8005be2:	6838      	ldr	r0, [r7, #0]
 8005be4:	f000 fbfb 	bl	80063de <_ZNKSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEcvbEv>
 8005be8:	4603      	mov	r3, r0
 8005bea:	f083 0301 	eor.w	r3, r3, #1
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d128      	bne.n	8005c46 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x6e>
		return;
	}
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	73fb      	strb	r3, [r7, #15]
 8005bf8:	e021      	b.n	8005c3e <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x66>
			const uint8_t cnt = m_initPinCnt[group_id];
 8005bfa:	7bfb      	ldrb	r3, [r7, #15]
 8005bfc:	687a      	ldr	r2, [r7, #4]
 8005bfe:	4413      	add	r3, r2
 8005c00:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8005c04:	737b      	strb	r3, [r7, #13]

			for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8005c06:	2300      	movs	r3, #0
 8005c08:	73bb      	strb	r3, [r7, #14]
 8005c0a:	e011      	b.n	8005c30 <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x58>

				if(foo(&m_keys[group_id], group_id, key_id)) {
 8005c0c:	7bfb      	ldrb	r3, [r7, #15]
 8005c0e:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005c12:	fb02 f303 	mul.w	r3, r2, r3
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	18d1      	adds	r1, r2, r3
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	7bfa      	ldrb	r2, [r7, #15]
 8005c1e:	6838      	ldr	r0, [r7, #0]
 8005c20:	f000 fbed 	bl	80063fe <_ZNKSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEclES2_hh>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10f      	bne.n	8005c4a <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x72>
			for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8005c2a:	7bbb      	ldrb	r3, [r7, #14]
 8005c2c:	3301      	adds	r3, #1
 8005c2e:	73bb      	strb	r3, [r7, #14]
 8005c30:	7bba      	ldrb	r2, [r7, #14]
 8005c32:	7b7b      	ldrb	r3, [r7, #13]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d1e9      	bne.n	8005c0c <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x34>
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d1da      	bne.n	8005bfa <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x22>
 8005c44:	e002      	b.n	8005c4c <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x74>
		return;
 8005c46:	bf00      	nop
 8005c48:	e000      	b.n	8005c4c <_ZN18Key_tps1htc30Group10iterateAllESt8functionIFbPNS_8KeyGroupEhhEE+0x74>
					return;
 8005c4a:	bf00      	nop
				}
			}
		}
}
 8005c4c:	3710      	adds	r7, #16
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}

08005c52 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh>:
	return false;
}


bool Key_tps1htc30Group::initKey(const KeyInit &setting, const uint8_t group_id)
{
 8005c52:	b590      	push	{r4, r7, lr}
 8005c54:	b087      	sub	sp, #28
 8005c56:	af00      	add	r7, sp, #0
 8005c58:	60f8      	str	r0, [r7, #12]
 8005c5a:	60b9      	str	r1, [r7, #8]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	71fb      	strb	r3, [r7, #7]
	uint8_t cnt = m_initPinCnt[group_id];
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	68fa      	ldr	r2, [r7, #12]
 8005c64:	4413      	add	r3, r2
 8005c66:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8005c6a:	75fb      	strb	r3, [r7, #23]

	if(group_id < Groups && cnt != N_ch_div && setting.adc_ch < m_adc.getChannels() ) {
 8005c6c:	79fb      	ldrb	r3, [r7, #7]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d80f      	bhi.n	8005c92 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x40>
 8005c72:	7dfb      	ldrb	r3, [r7, #23]
 8005c74:	2b06      	cmp	r3, #6
 8005c76:	d00c      	beq.n	8005c92 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x40>
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	7c1c      	ldrb	r4, [r3, #16]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff fe5b 	bl	800593e <_ZNK12Stm32ADC_dma11getChannelsEv>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	429c      	cmp	r4, r3
 8005c8c:	d201      	bcs.n	8005c92 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x40>
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x42>
 8005c92:	2300      	movs	r3, #0
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d05f      	beq.n	8005d58 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x106>

		m_keys[group_id].o_en[cnt] = setting.o_en;
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	7dfa      	ldrb	r2, [r7, #23]
 8005c9c:	00d2      	lsls	r2, r2, #3
 8005c9e:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005ca2:	fb01 f303 	mul.w	r3, r1, r3
 8005ca6:	4413      	add	r3, r2
 8005ca8:	68fa      	ldr	r2, [r7, #12]
 8005caa:	4413      	add	r3, r2
 8005cac:	68ba      	ldr	r2, [r7, #8]
 8005cae:	6811      	ldr	r1, [r2, #0]
 8005cb0:	6019      	str	r1, [r3, #0]
 8005cb2:	8892      	ldrh	r2, [r2, #4]
 8005cb4:	809a      	strh	r2, [r3, #4]
		m_keys[group_id].i_fault[cnt] = setting.i_fault;
 8005cb6:	79fb      	ldrb	r3, [r7, #7]
 8005cb8:	7dfa      	ldrb	r2, [r7, #23]
 8005cba:	3206      	adds	r2, #6
 8005cbc:	00d2      	lsls	r2, r2, #3
 8005cbe:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005cc2:	fb01 f303 	mul.w	r3, r1, r3
 8005cc6:	4413      	add	r3, r2
 8005cc8:	68fa      	ldr	r2, [r7, #12]
 8005cca:	441a      	add	r2, r3
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	3308      	adds	r3, #8
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	6011      	str	r1, [r2, #0]
 8005cd4:	889b      	ldrh	r3, [r3, #4]
 8005cd6:	8093      	strh	r3, [r2, #4]
		m_keys[group_id].adc_ch[cnt] = setting.adc_ch;
 8005cd8:	79fa      	ldrb	r2, [r7, #7]
 8005cda:	7dfb      	ldrb	r3, [r7, #23]
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	7c0c      	ldrb	r4, [r1, #16]
 8005ce0:	68f9      	ldr	r1, [r7, #12]
 8005ce2:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8005ce6:	fb00 f202 	mul.w	r2, r0, r2
 8005cea:	440a      	add	r2, r1
 8005cec:	4413      	add	r3, r2
 8005cee:	3360      	adds	r3, #96	@ 0x60
 8005cf0:	4622      	mov	r2, r4
 8005cf2:	701a      	strb	r2, [r3, #0]

		m_keys[group_id].o_en[cnt].set_output(false);
 8005cf4:	79fb      	ldrb	r3, [r7, #7]
 8005cf6:	7dfa      	ldrb	r2, [r7, #23]
 8005cf8:	00d2      	lsls	r2, r2, #3
 8005cfa:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	4413      	add	r3, r2
 8005d08:	2100      	movs	r1, #0
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7ff fd62 	bl	80057d4 <_ZN10Stm32Pin_O10set_outputEb>
		m_keys[group_id].out_state[cnt] = false;
 8005d10:	79fa      	ldrb	r2, [r7, #7]
 8005d12:	7dfb      	ldrb	r3, [r7, #23]
 8005d14:	68f9      	ldr	r1, [r7, #12]
 8005d16:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8005d1a:	fb00 f202 	mul.w	r2, r0, r2
 8005d1e:	440a      	add	r2, r1
 8005d20:	4413      	add	r3, r2
 8005d22:	3366      	adds	r3, #102	@ 0x66
 8005d24:	2200      	movs	r2, #0
 8005d26:	701a      	strb	r2, [r3, #0]
		m_keys[group_id].err[cnt] = error::PowerOff;
 8005d28:	79fa      	ldrb	r2, [r7, #7]
 8005d2a:	7dfb      	ldrb	r3, [r7, #23]
 8005d2c:	68f9      	ldr	r1, [r7, #12]
 8005d2e:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8005d32:	fb00 f202 	mul.w	r2, r0, r2
 8005d36:	440a      	add	r2, r1
 8005d38:	4413      	add	r3, r2
 8005d3a:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8005d3e:	2201      	movs	r2, #1
 8005d40:	701a      	strb	r2, [r3, #0]

		m_initPinCnt[group_id] = cnt + 1;
 8005d42:	79fb      	ldrb	r3, [r7, #7]
 8005d44:	7dfa      	ldrb	r2, [r7, #23]
 8005d46:	3201      	adds	r2, #1
 8005d48:	b2d1      	uxtb	r1, r2
 8005d4a:	68fa      	ldr	r2, [r7, #12]
 8005d4c:	4413      	add	r3, r2
 8005d4e:	460a      	mov	r2, r1
 8005d50:	f883 22b4 	strb.w	r2, [r3, #692]	@ 0x2b4

		return true;
 8005d54:	2301      	movs	r3, #1
 8005d56:	e000      	b.n	8005d5a <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x108>
	}

	return false;
 8005d58:	2300      	movs	r3, #0
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	371c      	adds	r7, #28
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd90      	pop	{r4, r7, pc}

08005d62 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh>:

bool Key_tps1htc30Group::initGroup(const GroupInit &setting, const uint8_t group_id)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	60f8      	str	r0, [r7, #12]
 8005d6a:	60b9      	str	r1, [r7, #8]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	71fb      	strb	r3, [r7, #7]
	if(group_id < Groups) {
 8005d70:	79fb      	ldrb	r3, [r7, #7]
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d83c      	bhi.n	8005df0 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh+0x8e>
		m_keys[group_id].o_diag_en = setting.o_diag_en;
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005d7c:	fb02 f303 	mul.w	r3, r2, r3
 8005d80:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005d84:	68fa      	ldr	r2, [r7, #12]
 8005d86:	4413      	add	r3, r2
 8005d88:	1d1a      	adds	r2, r3, #4
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	6819      	ldr	r1, [r3, #0]
 8005d90:	6011      	str	r1, [r2, #0]
 8005d92:	889b      	ldrh	r3, [r3, #4]
 8005d94:	8093      	strh	r3, [r2, #4]
		m_keys[group_id].o_latch = setting.o_latch;
 8005d96:	79fb      	ldrb	r3, [r7, #7]
 8005d98:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005d9c:	fb02 f303 	mul.w	r3, r2, r3
 8005da0:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	4413      	add	r3, r2
 8005da8:	3304      	adds	r3, #4
 8005daa:	68ba      	ldr	r2, [r7, #8]
 8005dac:	6811      	ldr	r1, [r2, #0]
 8005dae:	6019      	str	r1, [r3, #0]
 8005db0:	8892      	ldrh	r2, [r2, #4]
 8005db2:	809a      	strh	r2, [r3, #4]

		m_keys[group_id].o_diag_en.set_output(false);
 8005db4:	79fb      	ldrb	r3, [r7, #7]
 8005db6:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005dba:	fb02 f303 	mul.w	r3, r2, r3
 8005dbe:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	2100      	movs	r1, #0
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fd02 	bl	80057d4 <_ZN10Stm32Pin_O10set_outputEb>
		m_keys[group_id].o_latch.set_output(false);
 8005dd0:	79fb      	ldrb	r3, [r7, #7]
 8005dd2:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005dd6:	fb02 f303 	mul.w	r3, r2, r3
 8005dda:	f503 7398 	add.w	r3, r3, #304	@ 0x130
 8005dde:	68fa      	ldr	r2, [r7, #12]
 8005de0:	4413      	add	r3, r2
 8005de2:	3304      	adds	r3, #4
 8005de4:	2100      	movs	r1, #0
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7ff fcf4 	bl	80057d4 <_ZN10Stm32Pin_O10set_outputEb>

		return true;
 8005dec:	2301      	movs	r3, #1
 8005dee:	e000      	b.n	8005df2 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh+0x90>
	}

	return false;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
	...

08005dfc <_ZN18Key_tps1htc30Group5startEv>:

bool Key_tps1htc30Group::start()
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8005e04:	2300      	movs	r3, #0
 8005e06:	73fb      	strb	r3, [r7, #15]
 8005e08:	e028      	b.n	8005e5c <_ZN18Key_tps1htc30Group5startEv+0x60>
		const uint8_t cnt = m_initPinCnt[group_id];
 8005e0a:	7bfb      	ldrb	r3, [r7, #15]
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	4413      	add	r3, r2
 8005e10:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8005e14:	737b      	strb	r3, [r7, #13]

		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8005e16:	2300      	movs	r3, #0
 8005e18:	73bb      	strb	r3, [r7, #14]
 8005e1a:	e018      	b.n	8005e4e <_ZN18Key_tps1htc30Group5startEv+0x52>
			m_keys[group_id].m_range[cnt].init(/*min*/0.05, /*max*/4.0, K_delay);
 8005e1c:	7bf9      	ldrb	r1, [r7, #15]
 8005e1e:	7b7a      	ldrb	r2, [r7, #13]
 8005e20:	4613      	mov	r3, r2
 8005e22:	005b      	lsls	r3, r3, #1
 8005e24:	4413      	add	r3, r2
 8005e26:	00db      	lsls	r3, r3, #3
 8005e28:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8005e2c:	fb01 f202 	mul.w	r2, r1, r2
 8005e30:	4413      	add	r3, r2
 8005e32:	3398      	adds	r3, #152	@ 0x98
 8005e34:	687a      	ldr	r2, [r7, #4]
 8005e36:	4413      	add	r3, r2
 8005e38:	1d18      	adds	r0, r3, #4
 8005e3a:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8005e3e:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 8005e42:	490d      	ldr	r1, [pc, #52]	@ (8005e78 <_ZN18Key_tps1htc30Group5startEv+0x7c>)
 8005e44:	f7ff fcdd 	bl	8005802 <_ZN15InRangeDetectorIfE4initEffm>
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8005e48:	7bbb      	ldrb	r3, [r7, #14]
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	73bb      	strb	r3, [r7, #14]
 8005e4e:	7bba      	ldrb	r2, [r7, #14]
 8005e50:	7b7b      	ldrb	r3, [r7, #13]
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d1e2      	bne.n	8005e1c <_ZN18Key_tps1htc30Group5startEv+0x20>
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8005e56:	7bfb      	ldrb	r3, [r7, #15]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	73fb      	strb	r3, [r7, #15]
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d1d3      	bne.n	8005e0a <_ZN18Key_tps1htc30Group5startEv+0xe>
		}
	}

	return m_adc.start();
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005e68:	4618      	mov	r0, r3
 8005e6a:	f000 ff29 	bl	8006cc0 <_ZN12Stm32ADC_dma5startEv>
 8005e6e:	4603      	mov	r3, r0
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	3d4ccccd 	.word	0x3d4ccccd

08005e7c <_ZN18Key_tps1htc30Group7proceedEm>:

void Key_tps1htc30Group::proceed(const uint32_t current_time)
{
 8005e7c:	b5b0      	push	{r4, r5, r7, lr}
 8005e7e:	b08a      	sub	sp, #40	@ 0x28
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
 8005e84:	6039      	str	r1, [r7, #0]
	if(!m_adc.proceed(current_time)) {
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005e8c:	6839      	ldr	r1, [r7, #0]
 8005e8e:	4618      	mov	r0, r3
 8005e90:	f000 ff6a 	bl	8006d68 <_ZN12Stm32ADC_dma7proceedEm>
 8005e94:	4603      	mov	r3, r0
 8005e96:	f083 0301 	eor.w	r3, r3, #1
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	f040 8244 	bne.w	800632a <_ZN18Key_tps1htc30Group7proceedEm+0x4ae>
		return;
	}

	if(m_needCalibration) {
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f893 32b6 	ldrb.w	r3, [r3, #694]	@ 0x2b6
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	f000 80db 	beq.w	8006064 <_ZN18Key_tps1htc30Group7proceedEm+0x1e8>

		if(m_calib_counter == 0) {
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d134      	bne.n	8005f22 <_ZN18Key_tps1htc30Group7proceedEm+0xa6>
			m_summ = 0;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
			m_keys[m_group_it].adc_offset[m_key_it] = 0;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8005ece:	4618      	mov	r0, r3
 8005ed0:	687a      	ldr	r2, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	00db      	lsls	r3, r3, #3
 8005ed6:	440b      	add	r3, r1
 8005ed8:	00d9      	lsls	r1, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	4403      	add	r3, r0
 8005ede:	3320      	adds	r3, #32
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	605a      	str	r2, [r3, #4]
			m_keys[m_group_it].err[m_key_it] = error::Calibration;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8005eee:	4618      	mov	r0, r3
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8005efe:	fb00 f303 	mul.w	r3, r0, r3
 8005f02:	4413      	add	r3, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8005f0a:	2202      	movs	r2, #2
 8005f0c:	701a      	strb	r2, [r3, #0]
			set_out(false, m_group_it, m_key_it);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 22b7 	ldrb.w	r2, [r3, #695]	@ 0x2b7
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8005f1a:	2100      	movs	r1, #0
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 fa0f 	bl	8006340 <_ZN18Key_tps1htc30Group7set_outEbhh>
		}


		if((current_time - last_time) < K_delay) {
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 8005f28:	683a      	ldr	r2, [r7, #0]
 8005f2a:	1ad3      	subs	r3, r2, r3
 8005f2c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8005f30:	f0c0 81fd 	bcc.w	800632e <_ZN18Key_tps1htc30Group7proceedEm+0x4b2>
			return;
		}

		const uint8_t 	ch 	=  	m_keys[m_group_it].adc_ch[m_key_it];
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8005f42:	4619      	mov	r1, r3
 8005f44:	687a      	ldr	r2, [r7, #4]
 8005f46:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8005f4a:	fb00 f303 	mul.w	r3, r0, r3
 8005f4e:	4413      	add	r3, r2
 8005f50:	440b      	add	r3, r1
 8005f52:	3360      	adds	r3, #96	@ 0x60
 8005f54:	781b      	ldrb	r3, [r3, #0]
 8005f56:	74bb      	strb	r3, [r7, #18]
		const uint32_t 	val = 	m_adc.getAdc(ch);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8005f5e:	7cba      	ldrb	r2, [r7, #18]
 8005f60:	4611      	mov	r1, r2
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fcd9 	bl	800591a <_ZNK12Stm32ADC_dma6getAdcEi>
 8005f68:	60f8      	str	r0, [r7, #12]

		m_summ += val;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f8d3 22c0 	ldr.w	r2, [r3, #704]	@ 0x2c0
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	441a      	add	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
		++m_calib_counter;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f80:	1c5a      	adds	r2, r3, #1
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

		if(m_calib_counter == K_Points) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 8005f8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005f92:	f040 81ce 	bne.w	8006332 <_ZN18Key_tps1htc30Group7proceedEm+0x4b6>
			m_keys[m_group_it].adc_offset[m_key_it] = m_summ / static_cast<float>(K_Points);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f8d3 32c0 	ldr.w	r3, [r3, #704]	@ 0x2c0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f7fa fe29 	bl	8000bf4 <__aeabi_ui2f>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	49ca      	ldr	r1, [pc, #808]	@ (80062d0 <_ZN18Key_tps1htc30Group7proceedEm+0x454>)
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	f7fa ff30 	bl	8000e0c <__aeabi_fdiv>
 8005fac:	4603      	mov	r3, r0
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8005fb6:	461c      	mov	r4, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8005fbe:	461d      	mov	r5, r3
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	f7fb f871 	bl	80010a8 <__aeabi_f2uiz>
 8005fc6:	687a      	ldr	r2, [r7, #4]
 8005fc8:	4623      	mov	r3, r4
 8005fca:	00db      	lsls	r3, r3, #3
 8005fcc:	4423      	add	r3, r4
 8005fce:	00d9      	lsls	r1, r3, #3
 8005fd0:	440b      	add	r3, r1
 8005fd2:	442b      	add	r3, r5
 8005fd4:	3320      	adds	r3, #32
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	6058      	str	r0, [r3, #4]
			m_keys[m_group_it].err[m_key_it] = error::PowerOff;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8005fea:	4619      	mov	r1, r3
 8005fec:	687a      	ldr	r2, [r7, #4]
 8005fee:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8005ff2:	fb00 f303 	mul.w	r3, r0, r3
 8005ff6:	4413      	add	r3, r2
 8005ff8:	440b      	add	r3, r1
 8005ffa:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8005ffe:	2201      	movs	r2, #1
 8006000:	701a      	strb	r2, [r3, #0]
			m_calib_counter = 0;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc

			++m_key_it;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8006010:	3301      	adds	r3, #1
 8006012:	b2da      	uxtb	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

			if(m_key_it == m_initPinCnt[m_group_it]) {
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 22b8 	ldrb.w	r2, [r3, #696]	@ 0x2b8
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8006026:	4619      	mov	r1, r3
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	440b      	add	r3, r1
 800602c:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8006030:	429a      	cmp	r2, r3
 8006032:	f040 817e 	bne.w	8006332 <_ZN18Key_tps1htc30Group7proceedEm+0x4b6>
				++m_group_it;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 800603c:	3301      	adds	r3, #1
 800603e:	b2da      	uxtb	r2, r3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
				m_key_it = 0;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8

				if(m_group_it == Groups) {
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 8006054:	2b02      	cmp	r3, #2
 8006056:	f040 816c 	bne.w	8006332 <_ZN18Key_tps1htc30Group7proceedEm+0x4b6>
					m_needCalibration = false;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
				}
			}
		}

		return;
 8006062:	e166      	b.n	8006332 <_ZN18Key_tps1htc30Group7proceedEm+0x4b6>
	} else if(m_openLoadChk) {
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 32c8 	ldrb.w	r3, [r3, #712]	@ 0x2c8
 800606a:	2b00      	cmp	r3, #0
 800606c:	f000 808b 	beq.w	8006186 <_ZN18Key_tps1htc30Group7proceedEm+0x30a>
		set_out(false, m_group_it, m_key_it);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f893 22b7 	ldrb.w	r2, [r3, #695]	@ 0x2b7
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 800607c:	2100      	movs	r1, #0
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f95e 	bl	8006340 <_ZN18Key_tps1htc30Group7set_outEbhh>
		m_keys[m_group_it].err[m_key_it] = error::OpenLoadCHK;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 800608a:	4618      	mov	r0, r3
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8006092:	4619      	mov	r1, r3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800609a:	fb00 f303 	mul.w	r3, r0, r3
 800609e:	4413      	add	r3, r2
 80060a0:	440b      	add	r3, r1
 80060a2:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80060a6:	2203      	movs	r2, #3
 80060a8:	701a      	strb	r2, [r3, #0]
		m_keys[m_group_it].o_diag_en.set_output(true);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 80060b0:	461a      	mov	r2, r3
 80060b2:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	3304      	adds	r3, #4
 80060c4:	2101      	movs	r1, #1
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7ff fb84 	bl	80057d4 <_ZN10Stm32Pin_O10set_outputEb>

		if((current_time - last_time) < K_delay) {
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	@ 0x2c4
 80060d2:	683a      	ldr	r2, [r7, #0]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80060da:	f0c0 812c 	bcc.w	8006336 <_ZN18Key_tps1htc30Group7proceedEm+0x4ba>
			return;
		}

		const uint8_t 	ch 	=  	m_keys[m_group_it].adc_ch[m_key_it];
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 80060e4:	4618      	mov	r0, r3
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 80060ec:	4619      	mov	r1, r3
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80060f4:	fb00 f303 	mul.w	r3, r0, r3
 80060f8:	4413      	add	r3, r2
 80060fa:	440b      	add	r3, r1
 80060fc:	3360      	adds	r3, #96	@ 0x60
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
		const uint32_t 	val = 	m_adc.getAdc(ch);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 800610a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800610e:	4611      	mov	r1, r2
 8006110:	4618      	mov	r0, r3
 8006112:	f7ff fc02 	bl	800591a <_ZNK12Stm32ADC_dma6getAdcEi>
 8006116:	6238      	str	r0, [r7, #32]

		m_keys[m_group_it].err[m_key_it] = ( (!m_keys[m_group_it].i_fault[m_key_it].get_input()) || (val > 4000) ) ? error::OpenLoad : error::OK;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 800611e:	4619      	mov	r1, r3
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8006126:	3306      	adds	r3, #6
 8006128:	00da      	lsls	r2, r3, #3
 800612a:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800612e:	fb01 f303 	mul.w	r3, r1, r3
 8006132:	4413      	add	r3, r2
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fb35 	bl	80057a8 <_ZNK10Stm32Pin_I9get_inputEv>
 800613e:	4603      	mov	r3, r0
 8006140:	f083 0301 	eor.w	r3, r3, #1
 8006144:	b2db      	uxtb	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d103      	bne.n	8006152 <_ZN18Key_tps1htc30Group7proceedEm+0x2d6>
 800614a:	6a3b      	ldr	r3, [r7, #32]
 800614c:	f5b3 6f7a 	cmp.w	r3, #4000	@ 0xfa0
 8006150:	d901      	bls.n	8006156 <_ZN18Key_tps1htc30Group7proceedEm+0x2da>
 8006152:	2106      	movs	r1, #6
 8006154:	e000      	b.n	8006158 <_ZN18Key_tps1htc30Group7proceedEm+0x2dc>
 8006156:	2107      	movs	r1, #7
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 32b7 	ldrb.w	r3, [r3, #695]	@ 0x2b7
 800615e:	461c      	mov	r4, r3
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 32b8 	ldrb.w	r3, [r3, #696]	@ 0x2b8
 8006166:	4618      	mov	r0, r3
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800616e:	fb04 f303 	mul.w	r3, r4, r3
 8006172:	4413      	add	r3, r2
 8006174:	4403      	add	r3, r0
 8006176:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 800617a:	460a      	mov	r2, r1
 800617c:	701a      	strb	r2, [r3, #0]
		m_openLoadChk = false;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
	}

	last_time = current_time;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4

	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 800618e:	2300      	movs	r3, #0
 8006190:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8006194:	e0c3      	b.n	800631e <_ZN18Key_tps1htc30Group7proceedEm+0x4a2>
		const uint8_t cnt = m_initPinCnt[group_id];
 8006196:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	4413      	add	r3, r2
 800619e:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 80061a2:	77fb      	strb	r3, [r7, #31]

		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 80061a4:	2300      	movs	r3, #0
 80061a6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80061aa:	e0ad      	b.n	8006308 <_ZN18Key_tps1htc30Group7proceedEm+0x48c>

			const uint8_t ch =  m_keys[group_id].adc_ch[key_id];
 80061ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80061b0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061b4:	6879      	ldr	r1, [r7, #4]
 80061b6:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 80061ba:	fb00 f202 	mul.w	r2, r0, r2
 80061be:	440a      	add	r2, r1
 80061c0:	4413      	add	r3, r2
 80061c2:	3360      	adds	r3, #96	@ 0x60
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	77bb      	strb	r3, [r7, #30]
			const uint32_t val = m_adc.getAdc(ch);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80061ce:	7fba      	ldrb	r2, [r7, #30]
 80061d0:	4611      	mov	r1, r2
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7ff fba1 	bl	800591a <_ZNK12Stm32ADC_dma6getAdcEi>
 80061d8:	61b8      	str	r0, [r7, #24]
			const float curr = m_keys[group_id].current[key_id] = val;//calculateCurrent(val);
 80061da:	f897 4027 	ldrb.w	r4, [r7, #39]	@ 0x27
 80061de:	f897 5026 	ldrb.w	r5, [r7, #38]	@ 0x26
 80061e2:	69b8      	ldr	r0, [r7, #24]
 80061e4:	f7fa fd06 	bl	8000bf4 <__aeabi_ui2f>
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	4623      	mov	r3, r4
 80061ec:	00db      	lsls	r3, r3, #3
 80061ee:	4423      	add	r3, r4
 80061f0:	00d9      	lsls	r1, r3, #3
 80061f2:	440b      	add	r3, r1
 80061f4:	442b      	add	r3, r5
 80061f6:	331a      	adds	r3, #26
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	6058      	str	r0, [r3, #4]
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4623      	mov	r3, r4
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	4423      	add	r3, r4
 8006206:	00d9      	lsls	r1, r3, #3
 8006208:	440b      	add	r3, r1
 800620a:	442b      	add	r3, r5
 800620c:	331a      	adds	r3, #26
 800620e:	009b      	lsls	r3, r3, #2
 8006210:	4413      	add	r3, r2
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	617b      	str	r3, [r7, #20]
			error err = m_keys[group_id].err[key_id];
 8006216:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800621a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800621e:	6879      	ldr	r1, [r7, #4]
 8006220:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8006224:	fb00 f202 	mul.w	r2, r0, r2
 8006228:	440a      	add	r2, r1
 800622a:	4413      	add	r3, r2
 800622c:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25


			if(err == error::PowerOff || err == error::OpenLoad || err == error::OK) {
 8006236:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800623a:	2b01      	cmp	r3, #1
 800623c:	d05e      	beq.n	80062fc <_ZN18Key_tps1htc30Group7proceedEm+0x480>
 800623e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006242:	2b06      	cmp	r3, #6
 8006244:	d05a      	beq.n	80062fc <_ZN18Key_tps1htc30Group7proceedEm+0x480>
 8006246:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800624a:	2b07      	cmp	r3, #7
 800624c:	d056      	beq.n	80062fc <_ZN18Key_tps1htc30Group7proceedEm+0x480>
				continue;
			}


			const InRangeDetector_f::error rangeErr = m_keys[group_id].m_range[key_id].proceed(current_time, curr);
 800624e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8006252:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006256:	4613      	mov	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4413      	add	r3, r2
 800625c:	00db      	lsls	r3, r3, #3
 800625e:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8006262:	fb01 f202 	mul.w	r2, r1, r2
 8006266:	4413      	add	r3, r2
 8006268:	3398      	adds	r3, #152	@ 0x98
 800626a:	687a      	ldr	r2, [r7, #4]
 800626c:	4413      	add	r3, r2
 800626e:	3304      	adds	r3, #4
 8006270:	697a      	ldr	r2, [r7, #20]
 8006272:	6839      	ldr	r1, [r7, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f7ff fadf 	bl	8005838 <_ZN15InRangeDetectorIfE7proceedEmf>
 800627a:	4603      	mov	r3, r0
 800627c:	74fb      	strb	r3, [r7, #19]

			if(!m_keys[group_id].i_fault[key_id].get_input()) {
 800627e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006282:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8006286:	3206      	adds	r2, #6
 8006288:	00d2      	lsls	r2, r2, #3
 800628a:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800628e:	fb01 f303 	mul.w	r3, r1, r3
 8006292:	4413      	add	r3, r2
 8006294:	687a      	ldr	r2, [r7, #4]
 8006296:	4413      	add	r3, r2
 8006298:	4618      	mov	r0, r3
 800629a:	f7ff fa85 	bl	80057a8 <_ZNK10Stm32Pin_I9get_inputEv>
 800629e:	4603      	mov	r3, r0
 80062a0:	f083 0301 	eor.w	r3, r3, #1
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <_ZN18Key_tps1htc30Group7proceedEm+0x436>
				err = error::Fault;
 80062aa:	2305      	movs	r3, #5
 80062ac:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80062b0:	e013      	b.n	80062da <_ZN18Key_tps1htc30Group7proceedEm+0x45e>
			} else if(rangeErr == InRangeDetector_f::error::OutOfMinimumBoarder) {
 80062b2:	7cfb      	ldrb	r3, [r7, #19]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d103      	bne.n	80062c0 <_ZN18Key_tps1htc30Group7proceedEm+0x444>
				err = error::OpenLoad;
 80062b8:	2306      	movs	r3, #6
 80062ba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80062be:	e00c      	b.n	80062da <_ZN18Key_tps1htc30Group7proceedEm+0x45e>
			} else if(rangeErr == InRangeDetector_f::error::OutOfMaximumBoarder) {
 80062c0:	7cfb      	ldrb	r3, [r7, #19]
 80062c2:	2b02      	cmp	r3, #2
 80062c4:	d106      	bne.n	80062d4 <_ZN18Key_tps1htc30Group7proceedEm+0x458>
				err = error::Fault;
 80062c6:	2305      	movs	r3, #5
 80062c8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
 80062cc:	e005      	b.n	80062da <_ZN18Key_tps1htc30Group7proceedEm+0x45e>
 80062ce:	bf00      	nop
 80062d0:	447a0000 	.word	0x447a0000
			} else {
				err = error::Work;
 80062d4:	2304      	movs	r3, #4
 80062d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			}

			//IRQ_LOCK();
			m_keys[group_id].err[key_id] = err;
 80062da:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80062de:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 80062e8:	fb00 f202 	mul.w	r2, r0, r2
 80062ec:	440a      	add	r2, r1
 80062ee:	4413      	add	r3, r2
 80062f0:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80062f4:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 80062f8:	701a      	strb	r2, [r3, #0]
 80062fa:	e000      	b.n	80062fe <_ZN18Key_tps1htc30Group7proceedEm+0x482>
				continue;
 80062fc:	bf00      	nop
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 80062fe:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8006302:	3301      	adds	r3, #1
 8006304:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8006308:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800630c:	7ffb      	ldrb	r3, [r7, #31]
 800630e:	429a      	cmp	r2, r3
 8006310:	f47f af4c 	bne.w	80061ac <_ZN18Key_tps1htc30Group7proceedEm+0x330>
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8006314:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006318:	3301      	adds	r3, #1
 800631a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800631e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006322:	2b02      	cmp	r3, #2
 8006324:	f47f af37 	bne.w	8006196 <_ZN18Key_tps1htc30Group7proceedEm+0x31a>
 8006328:	e006      	b.n	8006338 <_ZN18Key_tps1htc30Group7proceedEm+0x4bc>
		return;
 800632a:	bf00      	nop
 800632c:	e004      	b.n	8006338 <_ZN18Key_tps1htc30Group7proceedEm+0x4bc>
			return;
 800632e:	bf00      	nop
 8006330:	e002      	b.n	8006338 <_ZN18Key_tps1htc30Group7proceedEm+0x4bc>
		return;
 8006332:	bf00      	nop
 8006334:	e000      	b.n	8006338 <_ZN18Key_tps1htc30Group7proceedEm+0x4bc>
			return;
 8006336:	bf00      	nop
			//IRQ_UNLOCK();
		}
	}
}
 8006338:	3728      	adds	r7, #40	@ 0x28
 800633a:	46bd      	mov	sp, r7
 800633c:	bdb0      	pop	{r4, r5, r7, pc}
 800633e:	bf00      	nop

08006340 <_ZN18Key_tps1htc30Group7set_outEbhh>:


// IKey interface --------------------------------------------------------------------------------------
void Key_tps1htc30Group::set_out(const bool en, const uint8_t group_id,
		const uint8_t key_id)
{
 8006340:	b590      	push	{r4, r7, lr}
 8006342:	b085      	sub	sp, #20
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
 8006348:	4608      	mov	r0, r1
 800634a:	4611      	mov	r1, r2
 800634c:	461a      	mov	r2, r3
 800634e:	4603      	mov	r3, r0
 8006350:	70fb      	strb	r3, [r7, #3]
 8006352:	460b      	mov	r3, r1
 8006354:	70bb      	strb	r3, [r7, #2]
 8006356:	4613      	mov	r3, r2
 8006358:	707b      	strb	r3, [r7, #1]

	const uint8_t cnt = m_initPinCnt[group_id];
 800635a:	78bb      	ldrb	r3, [r7, #2]
 800635c:	687a      	ldr	r2, [r7, #4]
 800635e:	4413      	add	r3, r2
 8006360:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8006364:	73fb      	strb	r3, [r7, #15]

	if(group_id < Groups && key_id < cnt) {
 8006366:	78bb      	ldrb	r3, [r7, #2]
 8006368:	2b01      	cmp	r3, #1
 800636a:	d834      	bhi.n	80063d6 <_ZN18Key_tps1htc30Group7set_outEbhh+0x96>
 800636c:	787a      	ldrb	r2, [r7, #1]
 800636e:	7bfb      	ldrb	r3, [r7, #15]
 8006370:	429a      	cmp	r2, r3
 8006372:	d230      	bcs.n	80063d6 <_ZN18Key_tps1htc30Group7set_outEbhh+0x96>
		m_keys[group_id].o_en[key_id].set_output(en);
 8006374:	78bb      	ldrb	r3, [r7, #2]
 8006376:	787a      	ldrb	r2, [r7, #1]
 8006378:	00d2      	lsls	r2, r2, #3
 800637a:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 800637e:	fb01 f303 	mul.w	r3, r1, r3
 8006382:	4413      	add	r3, r2
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	4413      	add	r3, r2
 8006388:	78fa      	ldrb	r2, [r7, #3]
 800638a:	4611      	mov	r1, r2
 800638c:	4618      	mov	r0, r3
 800638e:	f7ff fa21 	bl	80057d4 <_ZN10Stm32Pin_O10set_outputEb>
		m_keys[group_id].o_diag_en.set_output(en);
 8006392:	78bb      	ldrb	r3, [r7, #2]
 8006394:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8006398:	fb02 f303 	mul.w	r3, r2, r3
 800639c:	f503 739c 	add.w	r3, r3, #312	@ 0x138
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	3304      	adds	r3, #4
 80063a6:	78fa      	ldrb	r2, [r7, #3]
 80063a8:	4611      	mov	r1, r2
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7ff fa12 	bl	80057d4 <_ZN10Stm32Pin_O10set_outputEb>
		m_keys[group_id].err[key_id] = en ? error::Work : error::PowerOff;
 80063b0:	78fb      	ldrb	r3, [r7, #3]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d001      	beq.n	80063ba <_ZN18Key_tps1htc30Group7set_outEbhh+0x7a>
 80063b6:	2404      	movs	r4, #4
 80063b8:	e000      	b.n	80063bc <_ZN18Key_tps1htc30Group7set_outEbhh+0x7c>
 80063ba:	2401      	movs	r4, #1
 80063bc:	78ba      	ldrb	r2, [r7, #2]
 80063be:	787b      	ldrb	r3, [r7, #1]
 80063c0:	6879      	ldr	r1, [r7, #4]
 80063c2:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 80063c6:	fb00 f202 	mul.w	r2, r0, r2
 80063ca:	440a      	add	r2, r1
 80063cc:	4413      	add	r3, r2
 80063ce:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80063d2:	4622      	mov	r2, r4
 80063d4:	701a      	strb	r2, [r3, #0]
	}
}
 80063d6:	bf00      	nop
 80063d8:	3714      	adds	r7, #20
 80063da:	46bd      	mov	sp, r7
 80063dc:	bd90      	pop	{r4, r7, pc}

080063de <_ZNKSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEcvbEv>:
       *  @return `true` when this function object contains a target,
       *  or `false` when it is empty.
       *
       *  This function will not throw exceptions.
       */
      explicit operator bool() const noexcept
 80063de:	b580      	push	{r7, lr}
 80063e0:	b082      	sub	sp, #8
 80063e2:	af00      	add	r7, sp, #0
 80063e4:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7ff fab3 	bl	8005954 <_ZNKSt14_Function_base8_M_emptyEv>
 80063ee:	4603      	mov	r3, r0
 80063f0:	f083 0301 	eor.w	r3, r3, #1
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	4618      	mov	r0, r3
 80063f8:	3708      	adds	r7, #8
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <_ZNKSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEclES2_hh>:
       *
       *  The function call operator invokes the target function object
       *  stored by `this`.
       */
      _Res
      operator()(_ArgTypes... __args) const
 80063fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	4611      	mov	r1, r2
 800640c:	461a      	mov	r2, r3
 800640e:	460b      	mov	r3, r1
 8006410:	71fb      	strb	r3, [r7, #7]
 8006412:	4613      	mov	r3, r2
 8006414:	71bb      	strb	r3, [r7, #6]
      {
	if (_M_empty())
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	4618      	mov	r0, r3
 800641a:	f7ff fa9b 	bl	8005954 <_ZNKSt14_Function_base8_M_emptyEv>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <_ZNKSt8functionIFbPN18Key_tps1htc30Group8KeyGroupEhhEEclES2_hh+0x2a>
	  __throw_bad_function_call();
 8006424:	f001 fe77 	bl	8008116 <_ZSt25__throw_bad_function_callv>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	68dc      	ldr	r4, [r3, #12]
 800642c:	68fd      	ldr	r5, [r7, #12]
 800642e:	f107 0308 	add.w	r3, r7, #8
 8006432:	4618      	mov	r0, r3
 8006434:	f7fe ff9c 	bl	8005370 <_ZSt7forwardIPN18Key_tps1htc30Group8KeyGroupEEOT_RNSt16remove_referenceIS3_E4typeE>
 8006438:	4606      	mov	r6, r0
 800643a:	1dfb      	adds	r3, r7, #7
 800643c:	4618      	mov	r0, r3
 800643e:	f7fe ffa1 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 8006442:	4680      	mov	r8, r0
 8006444:	1dbb      	adds	r3, r7, #6
 8006446:	4618      	mov	r0, r3
 8006448:	f7fe ff9c 	bl	8005384 <_ZSt7forwardIhEOT_RNSt16remove_referenceIS0_E4typeE>
 800644c:	4603      	mov	r3, r0
 800644e:	4642      	mov	r2, r8
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	47a0      	blx	r4
 8006456:	4603      	mov	r3, r0
      }
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08006462 <poolContainer_init>:

	return self;
}

bool poolContainer_init(pool_container_t* const self, const u16 n_buffers, const u16 max_size)
{
 8006462:	b590      	push	{r4, r7, lr}
 8006464:	b087      	sub	sp, #28
 8006466:	af00      	add	r7, sp, #0
 8006468:	6078      	str	r0, [r7, #4]
 800646a:	460b      	mov	r3, r1
 800646c:	807b      	strh	r3, [r7, #2]
 800646e:	4613      	mov	r3, r2
 8006470:	803b      	strh	r3, [r7, #0]
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8006472:	887b      	ldrh	r3, [r7, #2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d002      	beq.n	800647e <poolContainer_init+0x1c>
 8006478:	883b      	ldrh	r3, [r7, #0]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <poolContainer_init+0x20>
 800647e:	2301      	movs	r3, #1
 8006480:	e077      	b.n	8006572 <poolContainer_init+0x110>
			return true,
					"Give me positive values for dimensions genius");

	M_Assert_BreakSaveCheck(!is_power_of_2(n_buffers), M_EMPTY,
 8006482:	887b      	ldrh	r3, [r7, #2]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d005      	beq.n	8006494 <poolContainer_init+0x32>
 8006488:	887a      	ldrh	r2, [r7, #2]
 800648a:	887b      	ldrh	r3, [r7, #2]
 800648c:	3b01      	subs	r3, #1
 800648e:	4013      	ands	r3, r2
 8006490:	2b00      	cmp	r3, #0
 8006492:	d001      	beq.n	8006498 <poolContainer_init+0x36>
 8006494:	2301      	movs	r3, #1
 8006496:	e06c      	b.n	8006572 <poolContainer_init+0x110>
			return true,
					"n_buffers is not power of 2, val: %d", n_buffers);

	M_Assert_BreakSaveCheck((n_buffers  > 16384 || max_size > 16384), M_EMPTY,
 8006498:	887b      	ldrh	r3, [r7, #2]
 800649a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800649e:	d803      	bhi.n	80064a8 <poolContainer_init+0x46>
 80064a0:	883b      	ldrh	r3, [r7, #0]
 80064a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064a6:	d901      	bls.n	80064ac <poolContainer_init+0x4a>
 80064a8:	2301      	movs	r3, #1
 80064aa:	e062      	b.n	8006572 <poolContainer_init+0x110>
			return true,
					"is too long, N_BUF: %d, SIZE: %d", n_buffers, max_size);

	self->pool = (void**)calloc(n_buffers, sizeof(void*));
 80064ac:	887b      	ldrh	r3, [r7, #2]
 80064ae:	2104      	movs	r1, #4
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 ffc7 	bl	8008444 <calloc>
 80064b6:	4603      	mov	r3, r0
 80064b8:	461a      	mov	r2, r3
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	615a      	str	r2, [r3, #20]
	M_Assert_BreakSaveCheck(self->pool == NULL, M_EMPTY,
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	695b      	ldr	r3, [r3, #20]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d101      	bne.n	80064ca <poolContainer_init+0x68>
 80064c6:	2301      	movs	r3, #1
 80064c8:	e053      	b.n	8006572 <poolContainer_init+0x110>
			return true,
					"no memories for allocation data");

	for (u16 i = 0; i < n_buffers; ++i) {
 80064ca:	2300      	movs	r3, #0
 80064cc:	82fb      	strh	r3, [r7, #22]
 80064ce:	e015      	b.n	80064fc <poolContainer_init+0x9a>
		self->pool[i] = calloc(max_size, sizeof(u8));
 80064d0:	8838      	ldrh	r0, [r7, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695a      	ldr	r2, [r3, #20]
 80064d6:	8afb      	ldrh	r3, [r7, #22]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	18d4      	adds	r4, r2, r3
 80064dc:	2101      	movs	r1, #1
 80064de:	f001 ffb1 	bl	8008444 <calloc>
 80064e2:	4603      	mov	r3, r0
 80064e4:	6023      	str	r3, [r4, #0]
		M_Assert_BreakSaveCheck(self->pool[i] == NULL, M_EMPTY, goto error, "no memories for allocation");
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695a      	ldr	r2, [r3, #20]
 80064ea:	8afb      	ldrh	r3, [r7, #22]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	4413      	add	r3, r2
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d024      	beq.n	8006540 <poolContainer_init+0xde>
	for (u16 i = 0; i < n_buffers; ++i) {
 80064f6:	8afb      	ldrh	r3, [r7, #22]
 80064f8:	3301      	adds	r3, #1
 80064fa:	82fb      	strh	r3, [r7, #22]
 80064fc:	8afa      	ldrh	r2, [r7, #22]
 80064fe:	887b      	ldrh	r3, [r7, #2]
 8006500:	429a      	cmp	r2, r3
 8006502:	d3e5      	bcc.n	80064d0 <poolContainer_init+0x6e>
	}


	self->max_size = max_size;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	883a      	ldrh	r2, [r7, #0]
 8006508:	831a      	strh	r2, [r3, #24]
	fifo_base_init(&self->base, n_buffers);
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	613a      	str	r2, [r7, #16]
 8006510:	60fb      	str	r3, [r7, #12]

// Determine whether x is a power of 2
#define is_power_of_2(x) ((x) != 0 && (((x) & ((x) - 1)) == 0))
STATIC_FORCEINLINE void fifo_base_init(fifo_base_t * const fifo, const reg cap)
{
	const reg msk = (cap - 1U);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	3b01      	subs	r3, #1
 8006516:	60bb      	str	r3, [r7, #8]

	fifo->cap = cap;
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	68fa      	ldr	r2, [r7, #12]
 800651c:	601a      	str	r2, [r3, #0]
	fifo->msk = msk;
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	68ba      	ldr	r2, [r7, #8]
 8006522:	605a      	str	r2, [r3, #4]
	fifo->xor_msk = cap | msk;
 8006524:	68fa      	ldr	r2, [r7, #12]
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	431a      	orrs	r2, r3
 800652a:	693b      	ldr	r3, [r7, #16]
 800652c:	609a      	str	r2, [r3, #8]
	fifo->tail = 0;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	2200      	movs	r2, #0
 8006532:	60da      	str	r2, [r3, #12]
	fifo->head = 0;
 8006534:	693b      	ldr	r3, [r7, #16]
 8006536:	2200      	movs	r2, #0
 8006538:	611a      	str	r2, [r3, #16]
}
 800653a:	bf00      	nop
	return false;
 800653c:	2300      	movs	r3, #0
 800653e:	e018      	b.n	8006572 <poolContainer_init+0x110>

	// error proceed mark --------------------------------------------
	error:
	for (u16 i = 0; i < n_buffers; ++i) {
 8006540:	2300      	movs	r3, #0
 8006542:	82bb      	strh	r3, [r7, #20]
 8006544:	e00b      	b.n	800655e <poolContainer_init+0xfc>
		free(self->pool[i]);
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	695a      	ldr	r2, [r3, #20]
 800654a:	8abb      	ldrh	r3, [r7, #20]
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4413      	add	r3, r2
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	4618      	mov	r0, r3
 8006554:	f001 ff9a 	bl	800848c <free>
	for (u16 i = 0; i < n_buffers; ++i) {
 8006558:	8abb      	ldrh	r3, [r7, #20]
 800655a:	3301      	adds	r3, #1
 800655c:	82bb      	strh	r3, [r7, #20]
 800655e:	8aba      	ldrh	r2, [r7, #20]
 8006560:	887b      	ldrh	r3, [r7, #2]
 8006562:	429a      	cmp	r2, r3
 8006564:	d3ef      	bcc.n	8006546 <poolContainer_init+0xe4>
	}
	free(self->pool);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	695b      	ldr	r3, [r3, #20]
 800656a:	4618      	mov	r0, r3
 800656c:	f001 ff8e 	bl	800848c <free>
	return true;
 8006570:	2301      	movs	r3, #1
}
 8006572:	4618      	mov	r0, r3
 8006574:	371c      	adds	r7, #28
 8006576:	46bd      	mov	sp, r7
 8006578:	bd90      	pop	{r4, r7, pc}

0800657a <poolContainer_getWriteBuffer>:
	return len;
}


void* const poolContainer_getWriteBuffer(pool_container_t * const self)
{
 800657a:	b480      	push	{r7}
 800657c:	b087      	sub	sp, #28
 800657e:	af00      	add	r7, sp, #0
 8006580:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg head_reg = self->base.head;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	617b      	str	r3, [r7, #20]
	const reg msk_reg = self->base.msk;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]
	const reg wr_pos = head_reg & msk_reg;
 800658e:	697a      	ldr	r2, [r7, #20]
 8006590:	693b      	ldr	r3, [r7, #16]
 8006592:	4013      	ands	r3, r2
 8006594:	60fb      	str	r3, [r7, #12]

	return self->pool[wr_pos];
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	695a      	ldr	r2, [r3, #20]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	009b      	lsls	r3, r3, #2
 800659e:	4413      	add	r3, r2
 80065a0:	681b      	ldr	r3, [r3, #0]
}
 80065a2:	4618      	mov	r0, r3
 80065a4:	371c      	adds	r7, #28
 80065a6:	46bd      	mov	sp, r7
 80065a8:	bc80      	pop	{r7}
 80065aa:	4770      	bx	lr

080065ac <poolContainer_nextWritePos>:

void poolContainer_nextWritePos(pool_container_t * const self)
{
 80065ac:	b480      	push	{r7}
 80065ae:	b085      	sub	sp, #20
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));

	const reg head_reg = self->base.head + 1U;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	3301      	adds	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]

	// proceed signalls ---------------------------------------------
	self->base.head 	= (head_reg);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	611a      	str	r2, [r3, #16]
}
 80065c2:	bf00      	nop
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bc80      	pop	{r7}
 80065ca:	4770      	bx	lr

080065cc <poolContainer_readBuffer>:

//------------------------------------ READ FUNCTIONS-------------------------------------------------------------------------------------------------------------------------
void* const poolContainer_readBuffer(pool_container_t * const self)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg tail_reg = self->base.tail;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	617b      	str	r3, [r7, #20]
	const reg msk_reg = self->base.msk;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	613b      	str	r3, [r7, #16]
	const reg rd_pos = tail_reg & msk_reg;
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4013      	ands	r3, r2
 80065e6:	60fb      	str	r3, [r7, #12]

	return self->pool[rd_pos];
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	695a      	ldr	r2, [r3, #20]
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	681b      	ldr	r3, [r3, #0]
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	371c      	adds	r7, #28
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bc80      	pop	{r7}
 80065fc:	4770      	bx	lr

080065fe <poolContainer_nextReadPos>:

void poolContainer_nextReadPos(pool_container_t * const self)
{
 80065fe:	b480      	push	{r7}
 8006600:	b085      	sub	sp, #20
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));

	const reg tail_reg = self->base.tail + 1U;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	68db      	ldr	r3, [r3, #12]
 800660a:	3301      	adds	r3, #1
 800660c:	60fb      	str	r3, [r7, #12]

	// write data to memory ------------------------------------
	// proceed signalls
	self->base.tail 		= (tail_reg);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	60da      	str	r2, [r3, #12]
}
 8006614:	bf00      	nop
 8006616:	3714      	adds	r7, #20
 8006618:	46bd      	mov	sp, r7
 800661a:	bc80      	pop	{r7}
 800661c:	4770      	bx	lr

0800661e <CallbackManager_init>:
    }
    return m_manager;
}

bool CallbackManager_init(CallbackManager_t* const self, const u8 n, void* const ctx)
{
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	460b      	mov	r3, r1
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	72fb      	strb	r3, [r7, #11]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no valid input data", ENA, LIB);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d101      	bne.n	8006636 <CallbackManager_init+0x18>
 8006632:	2301      	movs	r3, #1
 8006634:	e015      	b.n	8006662 <CallbackManager_init+0x44>

     void* const alloc = calloc(n, sizeof(CallbackWorker));
 8006636:	7afb      	ldrb	r3, [r7, #11]
 8006638:	2104      	movs	r1, #4
 800663a:	4618      	mov	r0, r3
 800663c:	f001 ff02 	bl	8008444 <calloc>
 8006640:	4603      	mov	r3, r0
 8006642:	617b      	str	r3, [r7, #20]
     M_Assert_BreakSaveCheck(alloc == NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no memory for allocation", ENA, LIB);
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d101      	bne.n	800664e <CallbackManager_init+0x30>
 800664a:	2301      	movs	r3, #1
 800664c:	e009      	b.n	8006662 <CallbackManager_init+0x44>

    self->workers = alloc;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	601a      	str	r2, [r3, #0]
    self->ctx = ctx;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	687a      	ldr	r2, [r7, #4]
 8006658:	605a      	str	r2, [r3, #4]
    self->n = n;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	7afa      	ldrb	r2, [r7, #11]
 800665e:	721a      	strb	r2, [r3, #8]
    return false;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3718      	adds	r7, #24
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}

0800666a <CallbackManager_subscribe>:
    *self = NULL;
    return false;
}

bool CallbackManager_subscribe(CallbackManager_t * const self, const u8 id, const CallbackWorker worker)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	460b      	mov	r3, r1
 8006674:	607a      	str	r2, [r7, #4]
 8006676:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
    self->workers[id] = worker;
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	7afb      	ldrb	r3, [r7, #11]
 800667e:	009b      	lsls	r3, r3, #2
 8006680:	4413      	add	r3, r2
 8006682:	687a      	ldr	r2, [r7, #4]
 8006684:	601a      	str	r2, [r3, #0]
    return false;
 8006686:	2300      	movs	r3, #0
}
 8006688:	4618      	mov	r0, r3
 800668a:	3714      	adds	r7, #20
 800668c:	46bd      	mov	sp, r7
 800668e:	bc80      	pop	{r7}
 8006690:	4770      	bx	lr

08006692 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
bool CallbackManager_proceed(const CallbackManager_t* const self, const u8 id, u8* const data, const reg size)
{
 8006692:	b590      	push	{r4, r7, lr}
 8006694:	b089      	sub	sp, #36	@ 0x24
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	460b      	mov	r3, r1
 80066a0:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no valid input data", ENA, LIB);

    // move to cash
    const u8 n = self->n;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	7a1b      	ldrb	r3, [r3, #8]
 80066a6:	77fb      	strb	r3, [r7, #31]
    const CallbackWorker worker = self->workers[id];
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	7afb      	ldrb	r3, [r7, #11]
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4413      	add	r3, r2
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	61bb      	str	r3, [r7, #24]
    void* const ctx = self->ctx;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	617b      	str	r3, [r7, #20]

    // do logic
    M_Assert_SafeFunctionCall((id < n) && (worker != NULL), {
 80066bc:	7afa      	ldrb	r2, [r7, #11]
 80066be:	7ffb      	ldrb	r3, [r7, #31]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d20a      	bcs.n	80066da <CallbackManager_proceed+0x48>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d007      	beq.n	80066da <CallbackManager_proceed+0x48>
 80066ca:	7afa      	ldrb	r2, [r7, #11]
 80066cc:	69bc      	ldr	r4, [r7, #24]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	6839      	ldr	r1, [r7, #0]
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	47a0      	blx	r4
 80066d6:	2300      	movs	r3, #0
 80066d8:	e000      	b.n	80066dc <CallbackManager_proceed+0x4a>
                                  worker(data, size, id, ctx);
                                  return false;
                              });
    return true;
 80066da:	2301      	movs	r3, #1
}
 80066dc:	4618      	mov	r0, r3
 80066de:	3724      	adds	r7, #36	@ 0x24
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bd90      	pop	{r4, r7, pc}

080066e4 <fast_crc8_maxim_byte>:
	CRC8_FAST_ARRAY_PROCEED(crc, data, len);
	return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b083      	sub	sp, #12
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	4603      	mov	r3, r0
 80066ec:	460a      	mov	r2, r1
 80066ee:	71fb      	strb	r3, [r7, #7]
 80066f0:	4613      	mov	r3, r2
 80066f2:	71bb      	strb	r3, [r7, #6]
	return CRC8_FAST_BYTE_PROCEED(crc, data);
 80066f4:	79fa      	ldrb	r2, [r7, #7]
 80066f6:	79bb      	ldrb	r3, [r7, #6]
 80066f8:	4053      	eors	r3, r2
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	461a      	mov	r2, r3
 80066fe:	4b03      	ldr	r3, [pc, #12]	@ (800670c <fast_crc8_maxim_byte+0x28>)
 8006700:	5c9b      	ldrb	r3, [r3, r2]
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr
 800670c:	0800aeac 	.word	0x0800aeac

08006710 <rawParser_dma_init>:
	}
	return self;
}

u8 rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8006710:	b480      	push	{r7}
 8006712:	b083      	sub	sp, #12
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
 8006718:	460b      	mov	r3, r1
 800671a:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "No input data valid ");
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d101      	bne.n	8006726 <rawParser_dma_init+0x16>
 8006722:	2300      	movs	r3, #0
 8006724:	e03c      	b.n	80067a0 <rawParser_dma_init+0x90>

	self->m_startByte = packStart;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	701a      	strb	r2, [r3, #0]
	self->m_receivePackLen = 0;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	22ff      	movs	r2, #255	@ 0xff
 8006736:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
	self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	22ff      	movs	r2, #255	@ 0xff
 800673e:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
	self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

	self->m_triggerSB = 0;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	self->m_receivePos = 0;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	self->m_receiveReadPos = 0;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	self->m_receiveHandlePos = 0;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	self->TX.data = self->m_sendBuffer;
#else
	self->TX.data = NULL;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	self->TX.size = 0;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
	self->RX.data = self->m_receiveFrameBuffer;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#else
	self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

	self->RX.size = 0;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2200      	movs	r2, #0
 800678a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228

	self->uniRXPosition = 0;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	self->length_write_control = 0;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2200      	movs	r2, #0
 800679a:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
	rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

	return D_RAW_P_OK;
 800679e:	2301      	movs	r3, #1
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	370c      	adds	r7, #12
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bc80      	pop	{r7}
 80067a8:	4770      	bx	lr

080067aa <rawParser_dma_setUserBufferTX>:


#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
void rawParser_dma_setUserBufferTX(RawParser_dma_t * const self, u8 * const txBuffer)
{
 80067aa:	b480      	push	{r7}
 80067ac:	b083      	sub	sp, #12
 80067ae:	af00      	add	r7, sp, #0
 80067b0:	6078      	str	r0, [r7, #4]
 80067b2:	6039      	str	r1, [r7, #0]
	M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "No valid input object");
	M_Assert_Break((txBuffer == NULL), M_EMPTY, return, "No valid input TX buffer");

	self->TX.data = txBuffer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	683a      	ldr	r2, [r7, #0]
 80067b8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	self->TX.size = 0;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
}
 80067c4:	bf00      	nop
 80067c6:	370c      	adds	r7, #12
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bc80      	pop	{r7}
 80067cc:	4770      	bx	lr
	...

080067d0 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	460b      	mov	r3, r1
 80067da:	70fb      	strb	r3, [r7, #3]
 80067dc:	4613      	mov	r3, r2
 80067de:	70bb      	strb	r3, [r7, #2]
	if (newFrame) {
 80067e0:	78bb      	ldrb	r3, [r7, #2]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
		//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "last packet error!!!");

		self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	22ff      	movs	r2, #255	@ 0xff
 80067ea:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

		self->m_receiveHandlePos = 0;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2200      	movs	r2, #0
 80067f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
	}

	switch(self->receiveState) {
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8006804:	2b0d      	cmp	r3, #13
 8006806:	f200 808c 	bhi.w	8006922 <RawParser_dma_proceedByte+0x152>
 800680a:	a201      	add	r2, pc, #4	@ (adr r2, 8006810 <RawParser_dma_proceedByte+0x40>)
 800680c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006810:	08006849 	.word	0x08006849
 8006814:	08006923 	.word	0x08006923
 8006818:	08006923 	.word	0x08006923
 800681c:	080068a7 	.word	0x080068a7
 8006820:	080068f9 	.word	0x080068f9
 8006824:	08006923 	.word	0x08006923
 8006828:	08006923 	.word	0x08006923
 800682c:	08006923 	.word	0x08006923
 8006830:	08006923 	.word	0x08006923
 8006834:	08006923 	.word	0x08006923
 8006838:	08006923 	.word	0x08006923
 800683c:	08006923 	.word	0x08006923
 8006840:	08006923 	.word	0x08006923
 8006844:	08006923 	.word	0x08006923

	case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
		self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800684e:	78fa      	ldrb	r2, [r7, #3]
 8006850:	4611      	mov	r1, r2
 8006852:	4618      	mov	r0, r3
 8006854:	f7ff ff46 	bl	80066e4 <fast_crc8_maxim_byte>
 8006858:	4603      	mov	r3, r0
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		if(RECEIVE_EXTENDED_LEN_CMD == ch) {
			self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
		} else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

			const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	78fa      	ldrb	r2, [r7, #3]
 8006868:	429a      	cmp	r2, r3
 800686a:	d902      	bls.n	8006872 <RawParser_dma_proceedByte+0xa2>
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	3b01      	subs	r3, #1
 8006870:	e000      	b.n	8006874 <RawParser_dma_proceedByte+0xa4>
 8006872:	78fb      	ldrb	r3, [r7, #3]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	6053      	str	r3, [r2, #4]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	60bb      	str	r3, [r7, #8]
			self->m_receiveHandlePos = 0;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2203      	movs	r2, #3
 800688a:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

			M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006894:	d802      	bhi.n	800689c <RawParser_dma_proceedByte+0xcc>
 8006896:	68bb      	ldr	r3, [r7, #8]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d144      	bne.n	8006926 <RawParser_dma_proceedByte+0x156>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	220c      	movs	r2, #12
 80068a0:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
		}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

		break;}
 80068a4:	e03f      	b.n	8006926 <RawParser_dma_proceedByte+0x156>

		break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	case RAW_P_DMA_RECEIVE_DATA: {
		reg rx_pos = self->m_receiveHandlePos;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80068ac:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
		self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80068b4:	78fa      	ldrb	r2, [r7, #3]
 80068b6:	4611      	mov	r1, r2
 80068b8:	4618      	mov	r0, r3
 80068ba:	f7ff ff13 	bl	80066e4 <fast_crc8_maxim_byte>
 80068be:	4603      	mov	r3, r0
 80068c0:	461a      	mov	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
#endif /* D_RAW_P_CRC_ENA */

		self->RX.data[rx_pos] = ch;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	4413      	add	r3, r2
 80068d2:	78fa      	ldrb	r2, [r7, #3]
 80068d4:	701a      	strb	r2, [r3, #0]
		++rx_pos;
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	3301      	adds	r3, #1
 80068da:	60fb      	str	r3, [r7, #12]

		if (rx_pos == self->m_receivePackLen) {
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	68fa      	ldr	r2, [r7, #12]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d103      	bne.n	80068ee <RawParser_dma_proceedByte+0x11e>

#ifdef D_RAW_P_CRC_ENA
			D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
			self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2204      	movs	r2, #4
 80068ea:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
			self->RX.size = self->m_receivePackLen;
			self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
		}

		self->m_receiveHandlePos = rx_pos;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		break;}
 80068f6:	e017      	b.n	8006928 <RawParser_dma_proceedByte+0x158>

	case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

		if(self->m_receiveCalcCRC == ch) {
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80068fe:	78fa      	ldrb	r2, [r7, #3]
 8006900:	429a      	cmp	r2, r3
 8006902:	d109      	bne.n	8006918 <RawParser_dma_proceedByte+0x148>
			self->RX.size = self->m_receivePackLen;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	685a      	ldr	r2, [r3, #4]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			self->receiveState = RAW_P_DMA_RECEIVE_OK;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	220d      	movs	r2, #13
 8006912:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
		self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

		break;}
 8006916:	e007      	b.n	8006928 <RawParser_dma_proceedByte+0x158>
			self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	220c      	movs	r2, #12
 800691c:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		break;}
 8006920:	e002      	b.n	8006928 <RawParser_dma_proceedByte+0x158>
	case RAW_P_DMA_RECEIVE_OK:
		M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "LAST Received OK, byte: %d is not received because no SB", ch);
		break;

	default:
		break;
 8006922:	bf00      	nop
 8006924:	e000      	b.n	8006928 <RawParser_dma_proceedByte+0x158>
		break;}
 8006926:	bf00      	nop
	}
}
 8006928:	bf00      	nop
 800692a:	3710      	adds	r7, #16
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}

08006930 <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	b086      	sub	sp, #24
 8006934:	af00      	add	r7, sp, #0
 8006936:	6078      	str	r0, [r7, #4]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800693e:	b2db      	uxtb	r3, r3
 8006940:	613b      	str	r3, [r7, #16]
	reg   receiveReadPos      = self->m_receiveReadPos;//    & (D_RAW_P_RX_BUF_SIZE - 1U);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006948:	617b      	str	r3, [r7, #20]
	self->RX.size = 0;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2200      	movs	r2, #0
 800694e:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228

	//    if(receivePos_saved == receiveReadPos) { // may be needed
	//        return &self->RX;
	//    }

	while (receivePos_saved != receiveReadPos) {
 8006952:	e03f      	b.n	80069d4 <RawParser_dma_proceed+0xa4>

		const u8 ch = self->m_receiveBuffer[receiveReadPos];
 8006954:	687a      	ldr	r2, [r7, #4]
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	4413      	add	r3, r2
 800695a:	3308      	adds	r3, #8
 800695c:	781b      	ldrb	r3, [r3, #0]
 800695e:	73fb      	strb	r3, [r7, #15]

		if (self->m_triggerSB) {
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 8006966:	2b00      	cmp	r3, #0
 8006968:	d016      	beq.n	8006998 <RawParser_dma_proceed+0x68>
			if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	7bfa      	ldrb	r2, [r7, #15]
 8006970:	429a      	cmp	r2, r3
 8006972:	d106      	bne.n	8006982 <RawParser_dma_proceed+0x52>
				RawParser_dma_proceedByte(self, ch, 0);
 8006974:	7bfb      	ldrb	r3, [r7, #15]
 8006976:	2200      	movs	r2, #0
 8006978:	4619      	mov	r1, r3
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f7ff ff28 	bl	80067d0 <RawParser_dma_proceedByte>
 8006980:	e005      	b.n	800698e <RawParser_dma_proceed+0x5e>
			} else { //{SB}{!SB} -> {SB} and newframe
				RawParser_dma_proceedByte(self, ch, 1);
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2201      	movs	r2, #1
 8006986:	4619      	mov	r1, r3
 8006988:	6878      	ldr	r0, [r7, #4]
 800698a:	f7ff ff21 	bl	80067d0 <RawParser_dma_proceedByte>
			}
			self->m_triggerSB = 0;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
 8006996:	e00f      	b.n	80069b8 <RawParser_dma_proceed+0x88>
		} else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	781b      	ldrb	r3, [r3, #0]
 800699c:	7bfa      	ldrb	r2, [r7, #15]
 800699e:	429a      	cmp	r2, r3
 80069a0:	d104      	bne.n	80069ac <RawParser_dma_proceed+0x7c>
			self->m_triggerSB = 1;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
 80069aa:	e005      	b.n	80069b8 <RawParser_dma_proceed+0x88>
		} else { //{!SB}{!SB} -> {!SB}
			RawParser_dma_proceedByte(self, ch, 0);
 80069ac:	7bfb      	ldrb	r3, [r7, #15]
 80069ae:	2200      	movs	r2, #0
 80069b0:	4619      	mov	r1, r3
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f7ff ff0c 	bl	80067d0 <RawParser_dma_proceedByte>
		}

		receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	3301      	adds	r3, #1
 80069bc:	b2db      	uxtb	r3, r3
 80069be:	617b      	str	r3, [r7, #20]

		if(self->RX.size != 0) {
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d004      	beq.n	80069d4 <RawParser_dma_proceed+0xa4>
			self->uniRXPosition = 0;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			break;
 80069d2:	e003      	b.n	80069dc <RawParser_dma_proceed+0xac>
	while (receivePos_saved != receiveReadPos) {
 80069d4:	693a      	ldr	r2, [r7, #16]
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	429a      	cmp	r2, r3
 80069da:	d1bb      	bne.n	8006954 <RawParser_dma_proceed+0x24>
		}
	}

	self->m_receiveReadPos = receiveReadPos;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	697a      	ldr	r2, [r7, #20]
 80069e0:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	return &self->RX;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f503 7309 	add.w	r3, r3, #548	@ 0x224
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3718      	adds	r7, #24
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <RawParser_dma_addTxByte>:


// elementary byte adding functions ----------------------------------------------------------------------------
static inline int RawParser_dma_addTxByte(RawParser_dma_t* const self, const u8 byte)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	6078      	str	r0, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	// move to cash
	u8* const   TX_data   	= self->TX.data;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8006a04:	613b      	str	r3, [r7, #16]
	reg         TX_size   	= self->TX.size;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006a0c:	617b      	str	r3, [r7, #20]
	const u8 startByte_reg 	= self->m_startByte;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	781b      	ldrb	r3, [r3, #0]
 8006a12:	73fb      	strb	r3, [r7, #15]

	M_Assert_BreakSaveCheck(TX_size == (D_RAW_P_CHECK_LEN - 1), M_EMPTY, return D_RAW_P_ERROR, "LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_CHECK_LEN - 1);
 8006a14:	697b      	ldr	r3, [r7, #20]
 8006a16:	2bfd      	cmp	r3, #253	@ 0xfd
 8006a18:	d101      	bne.n	8006a1e <RawParser_dma_addTxByte+0x2c>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e01b      	b.n	8006a56 <RawParser_dma_addTxByte+0x64>

	TX_data[TX_size++] = byte;
 8006a1e:	697b      	ldr	r3, [r7, #20]
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	617a      	str	r2, [r7, #20]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4413      	add	r3, r2
 8006a28:	78fa      	ldrb	r2, [r7, #3]
 8006a2a:	701a      	strb	r2, [r3, #0]

	if(byte == startByte_reg) {
 8006a2c:	78fa      	ldrb	r2, [r7, #3]
 8006a2e:	7bfb      	ldrb	r3, [r7, #15]
 8006a30:	429a      	cmp	r2, r3
 8006a32:	d10b      	bne.n	8006a4c <RawParser_dma_addTxByte+0x5a>
		M_Assert_BreakSaveCheck((TX_size == (D_RAW_P_CHECK_LEN - 1)), M_EMPTY, return D_RAW_P_ERROR, "LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_CHECK_LEN - 1);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2bfd      	cmp	r3, #253	@ 0xfd
 8006a38:	d101      	bne.n	8006a3e <RawParser_dma_addTxByte+0x4c>
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e00b      	b.n	8006a56 <RawParser_dma_addTxByte+0x64>
		TX_data[TX_size++] = byte;
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	1c5a      	adds	r2, r3, #1
 8006a42:	617a      	str	r2, [r7, #20]
 8006a44:	693a      	ldr	r2, [r7, #16]
 8006a46:	4413      	add	r3, r2
 8006a48:	78fa      	ldrb	r2, [r7, #3]
 8006a4a:	701a      	strb	r2, [r3, #0]
	}

	self->TX.size = TX_size;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	return D_RAW_P_OK;
 8006a54:	2301      	movs	r3, #1
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bc80      	pop	{r7}
 8006a5e:	4770      	bx	lr

08006a60 <RawParser_dma_startTransmittPacket>:
	return &self->TX;
}

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
u8 RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break(self->TX.data == NULL, M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	M_Assert_WarningSaveCheck(predictedLen == 0, M_EMPTY, return D_RAW_P_ERROR, "No valid input length");
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <RawParser_dma_startTransmittPacket+0x14>
 8006a70:	2300      	movs	r3, #0
 8006a72:	e040      	b.n	8006af6 <RawParser_dma_startTransmittPacket+0x96>

	// control undefined behavior
	M_Assert_BreakSaveCheck( predictedLen > (D_RAW_P_CHECK_LEN - 5), M_EMPTY, return D_RAW_P_ERROR, "No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_CHECK_LEN);
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	2bf9      	cmp	r3, #249	@ 0xf9
 8006a78:	d901      	bls.n	8006a7e <RawParser_dma_startTransmittPacket+0x1e>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	e03b      	b.n	8006af6 <RawParser_dma_startTransmittPacket+0x96>
	M_Assert_Warning(predictedLen > (D_RAW_P_CHECK_LEN >> 1), M_EMPTY, M_EMPTY, "UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_CHECK_LEN >> 1));


#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = D_RAW_P_CRC_INIT;
 8006a7e:	23ff      	movs	r3, #255	@ 0xff
 8006a80:	73fb      	strb	r3, [r7, #15]
	D_RAW_P_CRC_START(r_crc);
#endif /* D_RAW_P_CRC_ENA */

	const u8 startByte = self->m_startByte;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	73bb      	strb	r3, [r7, #14]
	self->length_write_control = predictedLen;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	683a      	ldr	r2, [r7, #0]
 8006a8c:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230

	self->TX.size = 0;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	self->TX.data[self->TX.size++] = startByte;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8006aa4:	1c58      	adds	r0, r3, #1
 8006aa6:	6879      	ldr	r1, [r7, #4]
 8006aa8:	f8c1 0220 	str.w	r0, [r1, #544]	@ 0x220
 8006aac:	4413      	add	r3, r2
 8006aae:	7bba      	ldrb	r2, [r7, #14]
 8006ab0:	701a      	strb	r2, [r3, #0]
#	endif /* D_RAW_P_CRC_ENA */

	} else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

		const reg r_len = (predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen;
 8006ab2:	7bbb      	ldrb	r3, [r7, #14]
 8006ab4:	683a      	ldr	r2, [r7, #0]
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	d302      	bcc.n	8006ac0 <RawParser_dma_startTransmittPacket+0x60>
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	3301      	adds	r3, #1
 8006abe:	e000      	b.n	8006ac2 <RawParser_dma_startTransmittPacket+0x62>
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	60bb      	str	r3, [r7, #8]

		if(RawParser_dma_addTxByte(self, r_len) != D_RAW_P_OK) {
 8006ac4:	68bb      	ldr	r3, [r7, #8]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff ff91 	bl	80069f2 <RawParser_dma_addTxByte>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d001      	beq.n	8006ada <RawParser_dma_startTransmittPacket+0x7a>
			return D_RAW_P_ERROR;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e00d      	b.n	8006af6 <RawParser_dma_startTransmittPacket+0x96>
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, r_len);
 8006ada:	68bb      	ldr	r3, [r7, #8]
 8006adc:	b2da      	uxtb	r2, r3
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	4611      	mov	r1, r2
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f7ff fdfe 	bl	80066e4 <fast_crc8_maxim_byte>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	73fb      	strb	r3, [r7, #15]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7bfa      	ldrb	r2, [r7, #15]
 8006af0:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
#endif /* D_RAW_P_CRC_ENA */

	return D_RAW_P_OK;
 8006af4:	2301      	movs	r3, #1
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3710      	adds	r7, #16
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* const RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b084      	sub	sp, #16
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
		if(RawParser_dma_addTxByte(self, byte) != D_RAW_P_OK) {		\
			goto error;												\
		}

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8006b0c:	73fb      	strb	r3, [r7, #15]
#endif /* D_RAW_P_CRC_ENA */

	reg ramained_len = self->length_write_control;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8006b14:	60bb      	str	r3, [r7, #8]
	while(ramained_len) { 							// fill remaining len
 8006b16:	e010      	b.n	8006b3a <RawParser_dma_finishTransmittPacket+0x3c>
		WRITE_CHECK_BYTE(0x00);
 8006b18:	2100      	movs	r1, #0
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f7ff ff69 	bl	80069f2 <RawParser_dma_addTxByte>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d11c      	bne.n	8006b60 <RawParser_dma_finishTransmittPacket+0x62>

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, 0x00);
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	f7ff fdda 	bl	80066e4 <fast_crc8_maxim_byte>
 8006b30:	4603      	mov	r3, r0
 8006b32:	73fb      	strb	r3, [r7, #15]
#endif /* D_RAW_P_CRC_ENA */

		--ramained_len;
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	60bb      	str	r3, [r7, #8]
	while(ramained_len) { 							// fill remaining len
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d1eb      	bne.n	8006b18 <RawParser_dma_finishTransmittPacket+0x1a>
	D_RAW_P_CRC_FINAL(r_crc);


#   ifdef D_RAW_P_USE_CRC8

	WRITE_CHECK_BYTE(r_crc);
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	4619      	mov	r1, r3
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f7ff ff54 	bl	80069f2 <RawParser_dma_addTxByte>
 8006b4a:	4603      	mov	r3, r0
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d107      	bne.n	8006b60 <RawParser_dma_finishTransmittPacket+0x62>
	WRITE_CHECK_BYTE((u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

	self->length_write_control = 0;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	return &self->TX;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8006b5e:	e006      	b.n	8006b6e <RawParser_dma_finishTransmittPacket+0x70>

	error:
	self->TX.size = 0;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	return &self->TX;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	f503 7307 	add.w	r3, r3, #540	@ 0x21c

#undef WRITE_CHECK_BYTE
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}

08006b76 <RawParser_dma_universalWrite>:


// function for use universal macro ---------------------------------------------------------------------------------------------------------
u8 RawParser_dma_universalWrite(RawParser_dma_t* const self, reg totalLenInByte, const reg typelenInByte, const u8 *data)
{
 8006b76:	b580      	push	{r7, lr}
 8006b78:	b086      	sub	sp, #24
 8006b7a:	af00      	add	r7, sp, #0
 8006b7c:	60f8      	str	r0, [r7, #12]
 8006b7e:	60b9      	str	r1, [r7, #8]
 8006b80:	607a      	str	r2, [r7, #4]
 8006b82:	603b      	str	r3, [r7, #0]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	reg r_remaining_len = self->length_write_control;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8006b8a:	617b      	str	r3, [r7, #20]

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8006b92:	74fb      	strb	r3, [r7, #19]
#endif /* D_RAW_P_CRC_ENA */

#if defined(__LITTLE_ENDIAN__)

	while(totalLenInByte && r_remaining_len) {
 8006b94:	e01d      	b.n	8006bd2 <RawParser_dma_universalWrite+0x5c>
		const u8 b = *data;
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	781b      	ldrb	r3, [r3, #0]
 8006b9a:	74bb      	strb	r3, [r7, #18]

		if(RawParser_dma_addTxByte(self, b) != D_RAW_P_OK) {
 8006b9c:	7cbb      	ldrb	r3, [r7, #18]
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff ff26 	bl	80069f2 <RawParser_dma_addTxByte>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d001      	beq.n	8006bb0 <RawParser_dma_universalWrite+0x3a>
			return D_RAW_P_ERROR;
 8006bac:	2300      	movs	r3, #0
 8006bae:	e01f      	b.n	8006bf0 <RawParser_dma_universalWrite+0x7a>
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, b);
 8006bb0:	7cba      	ldrb	r2, [r7, #18]
 8006bb2:	7cfb      	ldrb	r3, [r7, #19]
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fd94 	bl	80066e4 <fast_crc8_maxim_byte>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	74fb      	strb	r3, [r7, #19]
#endif /* D_RAW_P_CRC_ENA */

		--totalLenInByte;
 8006bc0:	68bb      	ldr	r3, [r7, #8]
 8006bc2:	3b01      	subs	r3, #1
 8006bc4:	60bb      	str	r3, [r7, #8]
		--r_remaining_len;
 8006bc6:	697b      	ldr	r3, [r7, #20]
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	617b      	str	r3, [r7, #20]
		++data;
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	3301      	adds	r3, #1
 8006bd0:	603b      	str	r3, [r7, #0]
	while(totalLenInByte && r_remaining_len) {
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d002      	beq.n	8006bde <RawParser_dma_universalWrite+0x68>
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1db      	bne.n	8006b96 <RawParser_dma_universalWrite+0x20>
			}
		}
	}
#endif /* ORDER SELECTION */

	self->length_write_control = r_remaining_len;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	7cfa      	ldrb	r2, [r7, #19]
 8006bea:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
#endif /* D_RAW_P_CRC_ENA */

	return D_RAW_P_OK;
 8006bee:	2301      	movs	r3, #1
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3718      	adds	r7, #24
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	bd80      	pop	{r7, pc}

08006bf8 <RawParser_dma_universalRead>:

u8 RawParser_dma_universalRead(RawParser_dma_t* const self, reg totalLenInByte, const reg typelenInByte, u8 *data)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b086      	sub	sp, #24
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	60f8      	str	r0, [r7, #12]
 8006c00:	60b9      	str	r1, [r7, #8]
 8006c02:	607a      	str	r2, [r7, #4]
 8006c04:	603b      	str	r3, [r7, #0]
#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	// move to cash
	const u8* const RX_data = self->RX.data;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006c0c:	617b      	str	r3, [r7, #20]
	reg uniRXPosition = self->uniRXPosition;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8006c14:	613b      	str	r3, [r7, #16]

	M_Assert_BreakSaveCheck(((uniRXPosition + totalLenInByte) > self->RX.size), M_EMPTY, return D_RAW_P_ERROR, "no length for reading");
 8006c16:	693a      	ldr	r2, [r7, #16]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	441a      	add	r2, r3
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8006c22:	429a      	cmp	r2, r3
 8006c24:	d901      	bls.n	8006c2a <RawParser_dma_universalRead+0x32>
 8006c26:	2300      	movs	r3, #0
 8006c28:	e00e      	b.n	8006c48 <RawParser_dma_universalRead+0x50>

#if defined(__LITTLE_ENDIAN__)

	// do logic
	memcpy(data, &RX_data[uniRXPosition], totalLenInByte);
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	4413      	add	r3, r2
 8006c30:	68ba      	ldr	r2, [r7, #8]
 8006c32:	4619      	mov	r1, r3
 8006c34:	6838      	ldr	r0, [r7, #0]
 8006c36:	f002 fdca 	bl	80097ce <memcpy>
	self->uniRXPosition = uniRXPosition + totalLenInByte;
 8006c3a:	693a      	ldr	r2, [r7, #16]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	441a      	add	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		uniRXPosition += n;
	}
	self->uniRXPosition = uniRXPosition;
#endif /* ORDER SELECTION */

	return D_RAW_P_OK;
 8006c46:	2301      	movs	r3, #1
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3718      	adds	r7, #24
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <_write>:

extern UART_HandleTypeDef huart1;
#define UART_PRINTF	huart1

int _write(int file, char *ptr, int len)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&UART_PRINTF, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	b29a      	uxth	r2, r3
 8006c60:	f04f 33ff 	mov.w	r3, #4294967295
 8006c64:	68b9      	ldr	r1, [r7, #8]
 8006c66:	4804      	ldr	r0, [pc, #16]	@ (8006c78 <_write+0x28>)
 8006c68:	f7fc fdcc 	bl	8003804 <HAL_UART_Transmit>
	return len;
 8006c6c:	687b      	ldr	r3, [r7, #4]
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}
 8006c76:	bf00      	nop
 8006c78:	20000268 	.word	0x20000268

08006c7c <_ZN12Stm32ADC_dma17calculateFinishedEv>:
	};

public:
	Stm32ADC_dma() = default;
	~Stm32ADC_dma();
	inline void calculateFinished() { calculated = true;}
 8006c7c:	b480      	push	{r7}
 8006c7e:	b083      	sub	sp, #12
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2201      	movs	r2, #1
 8006c88:	731a      	strb	r2, [r3, #12]
 8006c8a:	bf00      	nop
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bc80      	pop	{r7}
 8006c92:	4770      	bx	lr

08006c94 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef>:

	inline uint32_t getAdc(int i) const {return ma.getOut(i);}
	inline uint8_t getChannels() const { return n_channels; }

	bool proceed(const uint32_t current_time);
	static inline Stm32ADC_dma* const getObject(ADC_HandleTypeDef* const hadc) {
 8006c94:	b480      	push	{r7}
 8006c96:	b083      	sub	sp, #12
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
		if(instance->m_hadc == hadc) {
 8006c9c:	4b07      	ldr	r3, [pc, #28]	@ (8006cbc <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x28>)
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	687a      	ldr	r2, [r7, #4]
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d102      	bne.n	8006cae <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x1a>
			return instance;
 8006ca8:	4b04      	ldr	r3, [pc, #16]	@ (8006cbc <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x28>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	e000      	b.n	8006cb0 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x1c>
		}

		return nullptr;
 8006cae:	2300      	movs	r3, #0
	}
 8006cb0:	4618      	mov	r0, r3
 8006cb2:	370c      	adds	r7, #12
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bc80      	pop	{r7}
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	20000350 	.word	0x20000350

08006cc0 <_ZN12Stm32ADC_dma5startEv>:
	// TODO Auto-generated destructor stub
	delete[] adc_values;
}

bool Stm32ADC_dma::start()
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
	if(n_channels) {
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d00a      	beq.n	8006ce6 <_ZN12Stm32ADC_dma5startEv+0x26>
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6818      	ldr	r0, [r3, #0]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	6899      	ldr	r1, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	791b      	ldrb	r3, [r3, #4]
 8006cdc:	461a      	mov	r2, r3
 8006cde:	f7fa ffe5 	bl	8001cac <HAL_ADC_Start_DMA>
		return true;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e000      	b.n	8006ce8 <_ZN12Stm32ADC_dma5startEv+0x28>
	}

	return false;
 8006ce6:	2300      	movs	r3, #0
}
 8006ce8:	4618      	mov	r0, r3
 8006cea:	3708      	adds	r7, #8
 8006cec:	46bd      	mov	sp, r7
 8006cee:	bd80      	pop	{r7, pc}

08006cf0 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>:

void Stm32ADC_dma::init(const Stm32ADC_init& settings)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b082      	sub	sp, #8
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
 8006cf8:	6039      	str	r1, [r7, #0]
	m_hadc = settings.hadc;
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	681a      	ldr	r2, [r3, #0]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	601a      	str	r2, [r3, #0]
	n_channels = settings.hadc->Init.NbrOfConversion;
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691b      	ldr	r3, [r3, #16]
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	711a      	strb	r2, [r3, #4]
	adc_values = new uint16_t[n_channels];
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	791b      	ldrb	r3, [r3, #4]
 8006d12:	4a13      	ldr	r2, [pc, #76]	@ (8006d60 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x70>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d801      	bhi.n	8006d1c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x2c>
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	e001      	b.n	8006d20 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x30>
 8006d1c:	f04f 33ff 	mov.w	r3, #4294967295
 8006d20:	4618      	mov	r0, r3
 8006d22:	f001 f9ed 	bl	8008100 <_Znaj>
 8006d26:	4603      	mov	r3, r0
 8006d28:	461a      	mov	r2, r3
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	609a      	str	r2, [r3, #8]

	Stm32ADC_dma::instance = this;
 8006d2e:	4a0d      	ldr	r2, [pc, #52]	@ (8006d64 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x74>)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6013      	str	r3, [r2, #0]

	ma.init(settings.filter, 16);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	f103 0010 	add.w	r0, r3, #16
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	2210      	movs	r2, #16
 8006d40:	4619      	mov	r1, r3
 8006d42:	f000 f927 	bl	8006f94 <_ZN20FP_MovingAverageBase4initEfh>
	ma.allocArrays(n_channels);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f103 0210 	add.w	r2, r3, #16
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	791b      	ldrb	r3, [r3, #4]
 8006d50:	4619      	mov	r1, r3
 8006d52:	4610      	mov	r0, r2
 8006d54:	f000 f8c6 	bl	8006ee4 <_ZN21FP_MovingAverageArray11allocArraysEh>
}
 8006d58:	bf00      	nop
 8006d5a:	3708      	adds	r7, #8
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	bd80      	pop	{r7, pc}
 8006d60:	3ffffffc 	.word	0x3ffffffc
 8006d64:	20000350 	.word	0x20000350

08006d68 <_ZN12Stm32ADC_dma7proceedEm>:

bool Stm32ADC_dma::proceed(const uint32_t current_time)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
 8006d70:	6039      	str	r1, [r7, #0]
	if(calculated) {
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	7b1b      	ldrb	r3, [r3, #12]
 8006d76:	b2db      	uxtb	r3, r3
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00d      	beq.n	8006d98 <_ZN12Stm32ADC_dma7proceedEm+0x30>
		ma.proceed(adc_values);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f103 0210 	add.w	r2, r3, #16
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	4619      	mov	r1, r3
 8006d88:	4610      	mov	r0, r2
 8006d8a:	f000 f8ca 	bl	8006f22 <_ZN21FP_MovingAverageArray7proceedEPt>

//		HAL_ADC_Stop_DMA(m_hadc);
//		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
		calculated = false;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2200      	movs	r2, #0
 8006d92:	731a      	strb	r2, [r3, #12]

		return true;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e000      	b.n	8006d9a <_ZN12Stm32ADC_dma7proceedEm+0x32>
	}

	return false;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	6078      	str	r0, [r7, #4]
	Stm32ADC_dma* const root = Stm32ADC_dma::getObject(hadc);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff ff72 	bl	8006c94 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef>
 8006db0:	60f8      	str	r0, [r7, #12]
	if(root) {
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d002      	beq.n	8006dbe <HAL_ADC_ConvCpltCallback+0x1c>
		root->calculateFinished();
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	f7ff ff5f 	bl	8006c7c <_ZN12Stm32ADC_dma17calculateFinishedEv>
	}
}
 8006dbe:	bf00      	nop
 8006dc0:	3710      	adds	r7, #16
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
	...

08006dc8 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 8006dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dfc <IRQ_UNLOCK+0x34>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	dc05      	bgt.n	8006de0 <IRQ_UNLOCK+0x18>
 8006dd4:	4b0a      	ldr	r3, [pc, #40]	@ (8006e00 <IRQ_UNLOCK+0x38>)
 8006dd6:	4a0b      	ldr	r2, [pc, #44]	@ (8006e04 <IRQ_UNLOCK+0x3c>)
 8006dd8:	2137      	movs	r1, #55	@ 0x37
 8006dda:	480b      	ldr	r0, [pc, #44]	@ (8006e08 <IRQ_UNLOCK+0x40>)
 8006ddc:	f001 fb14 	bl	8008408 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 8006de0:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <IRQ_UNLOCK+0x34>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	4a05      	ldr	r2, [pc, #20]	@ (8006dfc <IRQ_UNLOCK+0x34>)
 8006de8:	6013      	str	r3, [r2, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	dc04      	bgt.n	8006df8 <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 8006dee:	4b03      	ldr	r3, [pc, #12]	@ (8006dfc <IRQ_UNLOCK+0x34>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8006df4:	b662      	cpsie	i
}
 8006df6:	bf00      	nop
        __enable_irq();
    }
}
 8006df8:	bf00      	nop
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000354 	.word	0x20000354
 8006e00:	0800adac 	.word	0x0800adac
 8006e04:	0800afac 	.word	0x0800afac
 8006e08:	0800adc0 	.word	0x0800adc0

08006e0c <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006e10:	b672      	cpsid	i
}
 8006e12:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 8006e14:	4b04      	ldr	r3, [pc, #16]	@ (8006e28 <IRQ_LOCK+0x1c>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	4a03      	ldr	r2, [pc, #12]	@ (8006e28 <IRQ_LOCK+0x1c>)
 8006e1c:	6013      	str	r3, [r2, #0]
}
 8006e1e:	bf00      	nop
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bc80      	pop	{r7}
 8006e24:	4770      	bx	lr
 8006e26:	bf00      	nop
 8006e28:	20000354 	.word	0x20000354

08006e2c <_ZN20FP_MovingAverageBase11baseProceedEmRmS0_>:
	virtual ~FP_MovingAverageBase() = default;

	bool init(const float alpha, const uint8_t Q);
	bool inline setAlpha(const float alpha) {return init(alpha, m_Q);}

	void inline baseProceed(const uint32_t x, uint32_t& last, uint32_t& last_shifted)
 8006e2c:	b480      	push	{r7}
 8006e2e:	b087      	sub	sp, #28
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	60f8      	str	r0, [r7, #12]
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
	{
		const int32_t val = (x - last) * m_alpha_scaled;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	68d2      	ldr	r2, [r2, #12]
 8006e46:	fb02 f303 	mul.w	r3, r2, r3
 8006e4a:	617b      	str	r3, [r7, #20]
		last_shifted += val >> m_diff_b;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	7992      	ldrb	r2, [r2, #6]
 8006e54:	4611      	mov	r1, r2
 8006e56:	697a      	ldr	r2, [r7, #20]
 8006e58:	410a      	asrs	r2, r1
 8006e5a:	441a      	add	r2, r3
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	601a      	str	r2, [r3, #0]
		last = last_shifted >> m_N;
 8006e60:	683b      	ldr	r3, [r7, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	68fa      	ldr	r2, [r7, #12]
 8006e66:	7952      	ldrb	r2, [r2, #5]
 8006e68:	fa23 f202 	lsr.w	r2, r3, r2
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	601a      	str	r2, [r3, #0]
	}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bc80      	pop	{r7}
 8006e78:	4770      	bx	lr
	...

08006e7c <_ZN21FP_MovingAverageArrayD1Ev>:
 *      Author: admin
 */

#include "FPMovingAverageArray.h"

FP_MovingAverageArray::~FP_MovingAverageArray()
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b082      	sub	sp, #8
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
 8006e84:	4a0e      	ldr	r2, [pc, #56]	@ (8006ec0 <_ZN21FP_MovingAverageArrayD1Ev+0x44>)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
	delete[] m_y_states;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d004      	beq.n	8006e9c <_ZN21FP_MovingAverageArrayD1Ev+0x20>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	4618      	mov	r0, r3
 8006e98:	f001 f910 	bl	80080bc <_ZdaPv>
	delete[] m_y;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	695b      	ldr	r3, [r3, #20]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d004      	beq.n	8006eae <_ZN21FP_MovingAverageArrayD1Ev+0x32>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	695b      	ldr	r3, [r3, #20]
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f001 f907 	bl	80080bc <_ZdaPv>
}
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f7fe fdcf 	bl	8005a54 <_ZN20FP_MovingAverageBaseD1Ev>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3708      	adds	r7, #8
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}
 8006ec0:	0800afc0 	.word	0x0800afc0

08006ec4 <_ZN21FP_MovingAverageArrayD0Ev>:
FP_MovingAverageArray::~FP_MovingAverageArray()
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
}
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f7ff ffd5 	bl	8006e7c <_ZN21FP_MovingAverageArrayD1Ev>
 8006ed2:	211c      	movs	r1, #28
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f001 f8ef 	bl	80080b8 <_ZdlPvj>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4618      	mov	r0, r3
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <_ZN21FP_MovingAverageArray11allocArraysEh>:

void FP_MovingAverageArray::allocArrays(const uint8_t n)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b082      	sub	sp, #8
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
	m_y_states = new uint32_t[n];
 8006ef0:	78fb      	ldrb	r3, [r7, #3]
 8006ef2:	009b      	lsls	r3, r3, #2
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	f001 f903 	bl	8008100 <_Znaj>
 8006efa:	4603      	mov	r3, r0
 8006efc:	461a      	mov	r2, r3
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	611a      	str	r2, [r3, #16]
	m_y = new uint32_t[n];
 8006f02:	78fb      	ldrb	r3, [r7, #3]
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	4618      	mov	r0, r3
 8006f08:	f001 f8fa 	bl	8008100 <_Znaj>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	461a      	mov	r2, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	615a      	str	r2, [r3, #20]
	m_n = n;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	78fa      	ldrb	r2, [r7, #3]
 8006f18:	761a      	strb	r2, [r3, #24]
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <_ZN21FP_MovingAverageArray7proceedEPt>:

void FP_MovingAverageArray::proceed(uint16_t* const values)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b086      	sub	sp, #24
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
	uint8_t n = m_n;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	7e1b      	ldrb	r3, [r3, #24]
 8006f30:	75fb      	strb	r3, [r7, #23]
	uint16_t* x_ptr = values;
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	613b      	str	r3, [r7, #16]
	uint32_t* y_ptr = m_y;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	695b      	ldr	r3, [r3, #20]
 8006f3a:	60fb      	str	r3, [r7, #12]
	uint32_t* y_state_ptr = m_y_states;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	691b      	ldr	r3, [r3, #16]
 8006f40:	60bb      	str	r3, [r7, #8]

	while(n) {
 8006f42:	e013      	b.n	8006f6c <_ZN21FP_MovingAverageArray7proceedEPt+0x4a>
		baseProceed(*x_ptr, *y_ptr, *y_state_ptr);
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	881b      	ldrh	r3, [r3, #0]
 8006f4a:	4619      	mov	r1, r3
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	f7ff ff6c 	bl	8006e2c <_ZN20FP_MovingAverageBase11baseProceedEmRmS0_>

		++x_ptr;
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	3302      	adds	r3, #2
 8006f58:	613b      	str	r3, [r7, #16]
		++y_ptr;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	3304      	adds	r3, #4
 8006f5e:	60fb      	str	r3, [r7, #12]
		++y_state_ptr;
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	3304      	adds	r3, #4
 8006f64:	60bb      	str	r3, [r7, #8]
		--n;
 8006f66:	7dfb      	ldrb	r3, [r7, #23]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	75fb      	strb	r3, [r7, #23]
	while(n) {
 8006f6c:	7dfb      	ldrb	r3, [r7, #23]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d1e8      	bne.n	8006f44 <_ZN21FP_MovingAverageArray7proceedEPt+0x22>
	}
}
 8006f72:	bf00      	nop
 8006f74:	bf00      	nop
 8006f76:	3718      	adds	r7, #24
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <_ZSt4log2f>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f001 f8d3 	bl	8008130 <log2f>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	3708      	adds	r7, #8
 8006f90:	46bd      	mov	sp, r7
 8006f92:	bd80      	pop	{r7, pc}

08006f94 <_ZN20FP_MovingAverageBase4initEfh>:
#include "FPMovingAverageBase.h"
#include <cmath>


bool FP_MovingAverageBase::init(const float alpha, const uint8_t Q)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b086      	sub	sp, #24
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	4613      	mov	r3, r2
 8006fa0:	71fb      	strb	r3, [r7, #7]
	const int N = -std::log2(alpha);
 8006fa2:	68b8      	ldr	r0, [r7, #8]
 8006fa4:	f7ff ffea 	bl	8006f7c <_ZSt4log2f>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fa f854 	bl	800105c <__aeabi_f2iz>
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	617b      	str	r3, [r7, #20]

	if((Q + N) > 32 || N < 0) {
 8006fb8:	79fa      	ldrb	r2, [r7, #7]
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	2b20      	cmp	r3, #32
 8006fc0:	dc02      	bgt.n	8006fc8 <_ZN20FP_MovingAverageBase4initEfh+0x34>
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	da01      	bge.n	8006fcc <_ZN20FP_MovingAverageBase4initEfh+0x38>
		return false;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	e025      	b.n	8007018 <_ZN20FP_MovingAverageBase4initEfh+0x84>
	}

	m_N = N;
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	b2da      	uxtb	r2, r3
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	715a      	strb	r2, [r3, #5]
	m_Q = Q;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	79fa      	ldrb	r2, [r7, #7]
 8006fd8:	711a      	strb	r2, [r3, #4]
	m_diff_b = (m_Q - m_N);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	791a      	ldrb	r2, [r3, #4]
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	795b      	ldrb	r3, [r3, #5]
 8006fe2:	1ad3      	subs	r3, r2, r3
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	719a      	strb	r2, [r3, #6]
	m_alpha = alpha;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	609a      	str	r2, [r3, #8]
	m_alpha_scaled = static_cast<uint32_t>(static_cast<float>(1 << Q) * alpha);
 8006ff0:	79fb      	ldrb	r3, [r7, #7]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f7f9 fdff 	bl	8000bfc <__aeabi_i2f>
 8006ffe:	4603      	mov	r3, r0
 8007000:	68b9      	ldr	r1, [r7, #8]
 8007002:	4618      	mov	r0, r3
 8007004:	f7f9 fe4e 	bl	8000ca4 <__aeabi_fmul>
 8007008:	4603      	mov	r3, r0
 800700a:	4618      	mov	r0, r3
 800700c:	f7fa f84c 	bl	80010a8 <__aeabi_f2uiz>
 8007010:	4602      	mov	r2, r0
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	60da      	str	r2, [r3, #12]

	return true;
 8007016:	2301      	movs	r3, #1
}
 8007018:	4618      	mov	r0, r3
 800701a:	3718      	adds	r7, #24
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <_ZN13TimingManager7proceedEv>:
    static inline void proceed() {
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 8007026:	4b1a      	ldr	r3, [pc, #104]	@ (8007090 <_ZN13TimingManager7proceedEv+0x70>)
 8007028:	60fb      	str	r3, [r7, #12]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 f878 	bl	8007120 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8007030:	4603      	mov	r3, r0
 8007032:	607b      	str	r3, [r7, #4]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f000 f883 	bl	8007140 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 800703a:	4603      	mov	r3, r0
 800703c:	603b      	str	r3, [r7, #0]
 800703e:	e018      	b.n	8007072 <_ZN13TimingManager7proceedEv+0x52>
 8007040:	1d3b      	adds	r3, r7, #4
 8007042:	4618      	mov	r0, r3
 8007044:	f000 f8b4 	bl	80071b0 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 8007048:	4603      	mov	r3, r0
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 800704e:	68bb      	ldr	r3, [r7, #8]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b00      	cmp	r3, #0
 8007054:	bf14      	ite	ne
 8007056:	2301      	movne	r3, #1
 8007058:	2300      	moveq	r3, #0
 800705a:	b2db      	uxtb	r3, r3
 800705c:	2b00      	cmp	r3, #0
 800705e:	d004      	beq.n	800706a <_ZN13TimingManager7proceedEv+0x4a>
                --timer->m_counter;
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	1e5a      	subs	r2, r3, #1
 8007066:	68bb      	ldr	r3, [r7, #8]
 8007068:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 800706a:	1d3b      	adds	r3, r7, #4
 800706c:	4618      	mov	r0, r3
 800706e:	f000 f890 	bl	8007192 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 8007072:	463a      	mov	r2, r7
 8007074:	1d3b      	adds	r3, r7, #4
 8007076:	4611      	mov	r1, r2
 8007078:	4618      	mov	r0, r3
 800707a:	f000 f872 	bl	8007162 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1dd      	bne.n	8007040 <_ZN13TimingManager7proceedEv+0x20>
    }
 8007084:	bf00      	nop
 8007086:	bf00      	nop
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop
 8007090:	20000358 	.word	0x20000358

08007094 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8007094:	b580      	push	{r7, lr}
 8007096:	b082      	sub	sp, #8
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f8a2 	bl	80071e6 <_ZNSaIP13TimingManagerED1Ev>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	4618      	mov	r0, r3
 80070a6:	3708      	adds	r7, #8
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f000 f885 	bl	80071c6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	4618      	mov	r0, r3
 80070c0:	3708      	adds	r7, #8
 80070c2:	46bd      	mov	sp, r7
 80070c4:	bd80      	pop	{r7, pc}

080070c6 <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 80070c6:	b580      	push	{r7, lr}
 80070c8:	b082      	sub	sp, #8
 80070ca:	af00      	add	r7, sp, #0
 80070cc:	6078      	str	r0, [r7, #4]
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	4618      	mov	r0, r3
 80070d2:	f7ff ffeb 	bl	80070ac <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	4618      	mov	r0, r3
 80070da:	3708      	adds	r7, #8
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <_ZN13TimingManagerC1Ev>:
	if (it != m_timers.end()) {
		m_timers.erase(it);
	}
}

TimingManager::TimingManager()
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	601a      	str	r2, [r3, #0]
{
	m_counter = 0;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2200      	movs	r2, #0
 80070f2:	601a      	str	r2, [r3, #0]
	m_timers.push_back(this);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	60fb      	str	r3, [r7, #12]
 80070f8:	f107 030c 	add.w	r3, r7, #12
 80070fc:	4619      	mov	r1, r3
 80070fe:	4804      	ldr	r0, [pc, #16]	@ (8007110 <_ZN13TimingManagerC1Ev+0x30>)
 8007100:	f000 f896 	bl	8007230 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>
}
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4618      	mov	r0, r3
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	20000358 	.word	0x20000358

08007114 <HAL_SYSTICK_Callback>:


//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 8007118:	f7ff ff82 	bl	8007020 <_ZN13TimingManager7proceedEv>
}
 800711c:	bf00      	nop
 800711e:	bd80      	pop	{r7, pc}

08007120 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	f107 030c 	add.w	r3, r7, #12
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f000 f88e 	bl	8007252 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	1d1a      	adds	r2, r3, #4
 800714c:	f107 030c 	add.w	r3, r7, #12
 8007150:	4611      	mov	r1, r2
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f87d 	bl	8007252 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	4618      	mov	r0, r3
 800715c:	3710      	adds	r7, #16
 800715e:	46bd      	mov	sp, r7
 8007160:	bd80      	pop	{r7, pc}

08007162 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8007162:	b590      	push	{r4, r7, lr}
 8007164:	b083      	sub	sp, #12
 8007166:	af00      	add	r7, sp, #0
 8007168:	6078      	str	r0, [r7, #4]
 800716a:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 f87f 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8007172:	4603      	mov	r3, r0
 8007174:	681c      	ldr	r4, [r3, #0]
 8007176:	6838      	ldr	r0, [r7, #0]
 8007178:	f000 f87a 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800717c:	4603      	mov	r3, r0
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	429c      	cmp	r4, r3
 8007182:	bf14      	ite	ne
 8007184:	2301      	movne	r3, #1
 8007186:	2300      	moveq	r3, #0
 8007188:	b2db      	uxtb	r3, r3
 800718a:	4618      	mov	r0, r3
 800718c:	370c      	adds	r7, #12
 800718e:	46bd      	mov	sp, r7
 8007190:	bd90      	pop	{r4, r7, pc}

08007192 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8007192:	b480      	push	{r7}
 8007194:	b083      	sub	sp, #12
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
	++_M_current;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	1d1a      	adds	r2, r3, #4
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	601a      	str	r2, [r3, #0]
	return *this;
 80071a4:	687b      	ldr	r3, [r7, #4]
      }
 80071a6:	4618      	mov	r0, r3
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bc80      	pop	{r7}
 80071ae:	4770      	bx	lr

080071b0 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 80071b0:	b480      	push	{r7}
 80071b2:	b083      	sub	sp, #12
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	4618      	mov	r0, r3
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	bc80      	pop	{r7}
 80071c4:	4770      	bx	lr

080071c6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80071c6:	b580      	push	{r7, lr}
 80071c8:	b082      	sub	sp, #8
 80071ca:	af00      	add	r7, sp, #0
 80071cc:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f858 	bl	8007284 <_ZNSaIP13TimingManagerEC1Ev>
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f860 	bl	800729c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	4618      	mov	r0, r3
 80071e0:	3708      	adds	r7, #8
 80071e2:	46bd      	mov	sp, r7
 80071e4:	bd80      	pop	{r7, pc}

080071e6 <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80071e6:	b580      	push	{r7, lr}
 80071e8:	b082      	sub	sp, #8
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 f867 	bl	80072c2 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	4618      	mov	r0, r3
 80071f8:	3708      	adds	r7, #8
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80071fe:	b580      	push	{r7, lr}
 8007200:	b082      	sub	sp, #8
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	689a      	ldr	r2, [r3, #8]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	1ad3      	subs	r3, r2, r3
 8007214:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8007216:	461a      	mov	r2, r3
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f85c 	bl	80072d6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4618      	mov	r0, r3
 8007222:	f7ff ff37 	bl	8007094 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4618      	mov	r0, r3
 800722a:	3708      	adds	r7, #8
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 8007230:	b580      	push	{r7, lr}
 8007232:	b082      	sub	sp, #8
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
 8007238:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800723a:	6838      	ldr	r0, [r7, #0]
 800723c:	f000 f85e 	bl	80072fc <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>
 8007240:	4603      	mov	r3, r0
 8007242:	4619      	mov	r1, r3
 8007244:	6878      	ldr	r0, [r7, #4]
 8007246:	f000 f863 	bl	8007310 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800724a:	bf00      	nop
 800724c:	3708      	adds	r7, #8
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007252:	b480      	push	{r7}
 8007254:	b083      	sub	sp, #12
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	bc80      	pop	{r7}
 800726e:	4770      	bx	lr

08007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4618      	mov	r0, r3
 800727c:	370c      	adds	r7, #12
 800727e:	46bd      	mov	sp, r7
 8007280:	bc80      	pop	{r7}
 8007282:	4770      	bx	lr

08007284 <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f86d 	bl	800736c <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	4618      	mov	r0, r3
 8007296:	3708      	adds	r7, #8
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	605a      	str	r2, [r3, #4]
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2200      	movs	r2, #0
 80072b4:	609a      	str	r2, [r3, #8]
	{ }
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4618      	mov	r0, r3
 80072ba:	370c      	adds	r7, #12
 80072bc:	46bd      	mov	sp, r7
 80072be:	bc80      	pop	{r7}
 80072c0:	4770      	bx	lr

080072c2 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80072c2:	b480      	push	{r7}
 80072c4:	b083      	sub	sp, #12
 80072c6:	af00      	add	r7, sp, #0
 80072c8:	6078      	str	r0, [r7, #4]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	4618      	mov	r0, r3
 80072ce:	370c      	adds	r7, #12
 80072d0:	46bd      	mov	sp, r7
 80072d2:	bc80      	pop	{r7}
 80072d4:	4770      	bx	lr

080072d6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 80072d6:	b580      	push	{r7, lr}
 80072d8:	b084      	sub	sp, #16
 80072da:	af00      	add	r7, sp, #0
 80072dc:	60f8      	str	r0, [r7, #12]
 80072de:	60b9      	str	r1, [r7, #8]
 80072e0:	607a      	str	r2, [r7, #4]
	if (__p)
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d005      	beq.n	80072f4 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	68b9      	ldr	r1, [r7, #8]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f000 f846 	bl	8007380 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 80072f4:	bf00      	nop
 80072f6:	3710      	adds	r7, #16
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	4618      	mov	r0, r3
 8007308:	370c      	adds	r7, #12
 800730a:	46bd      	mov	sp, r7
 800730c:	bc80      	pop	{r7}
 800730e:	4770      	bx	lr

08007310 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8007310:	b5b0      	push	{r4, r5, r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	685a      	ldr	r2, [r3, #4]
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	429a      	cmp	r2, r3
 8007324:	d011      	beq.n	800734a <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8007326:	687c      	ldr	r4, [r7, #4]
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685d      	ldr	r5, [r3, #4]
 800732c:	6838      	ldr	r0, [r7, #0]
 800732e:	f000 f836 	bl	800739e <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8007332:	4603      	mov	r3, r0
 8007334:	461a      	mov	r2, r3
 8007336:	4629      	mov	r1, r5
 8007338:	4620      	mov	r0, r4
 800733a:	f000 f83a 	bl	80073b2 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	1d1a      	adds	r2, r3, #4
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8007348:	e00c      	b.n	8007364 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f7ff fef8 	bl	8007140 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8007350:	4604      	mov	r4, r0
 8007352:	6838      	ldr	r0, [r7, #0]
 8007354:	f000 f823 	bl	800739e <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8007358:	4603      	mov	r3, r0
 800735a:	461a      	mov	r2, r3
 800735c:	4621      	mov	r1, r4
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f000 f850 	bl	8007404 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8007364:	bf00      	nop
 8007366:	3708      	adds	r7, #8
 8007368:	46bd      	mov	sp, r7
 800736a:	bdb0      	pop	{r4, r5, r7, pc}

0800736c <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800736c:	b480      	push	{r7}
 800736e:	b083      	sub	sp, #12
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4618      	mov	r0, r3
 8007378:	370c      	adds	r7, #12
 800737a:	46bd      	mov	sp, r7
 800737c:	bc80      	pop	{r7}
 800737e:	4770      	bx	lr

08007380 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800738c:	687a      	ldr	r2, [r7, #4]
 800738e:	68b9      	ldr	r1, [r7, #8]
 8007390:	68f8      	ldr	r0, [r7, #12]
 8007392:	f000 f8f3 	bl	800757c <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 8007396:	bf00      	nop
 8007398:	3710      	adds	r7, #16
 800739a:	46bd      	mov	sp, r7
 800739c:	bd80      	pop	{r7, pc}

0800739e <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800739e:	b480      	push	{r7}
 80073a0:	b083      	sub	sp, #12
 80073a2:	af00      	add	r7, sp, #0
 80073a4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4618      	mov	r0, r3
 80073aa:	370c      	adds	r7, #12
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr

080073b2 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80073b2:	b580      	push	{r7, lr}
 80073b4:	b084      	sub	sp, #16
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	60f8      	str	r0, [r7, #12]
 80073ba:	60b9      	str	r1, [r7, #8]
 80073bc:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff ffed 	bl	800739e <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 80073c4:	4603      	mov	r3, r0
 80073c6:	461a      	mov	r2, r3
 80073c8:	68b9      	ldr	r1, [r7, #8]
 80073ca:	68f8      	ldr	r0, [r7, #12]
 80073cc:	f000 f8fb 	bl	80075c6 <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80073d8:	b580      	push	{r7, lr}
 80073da:	b082      	sub	sp, #8
 80073dc:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80073de:	4618      	mov	r0, r3
 80073e0:	f000 f805 	bl	80073ee <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80073e4:	4603      	mov	r3, r0
      }
 80073e6:	4618      	mov	r0, r3
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80073f6:	2301      	movs	r3, #1
      }
 80073f8:	4618      	mov	r0, r3
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bc80      	pop	{r7}
 8007400:	4770      	bx	lr
	...

08007404 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8007404:	b5b0      	push	{r4, r5, r7, lr}
 8007406:	b08c      	sub	sp, #48	@ 0x30
 8007408:	af00      	add	r7, sp, #0
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8007410:	4a59      	ldr	r2, [pc, #356]	@ (8007578 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8007412:	2101      	movs	r1, #1
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f000 f8ec 	bl	80075f2 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>
 800741a:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	685b      	ldr	r3, [r3, #4]
 8007426:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8007428:	68f8      	ldr	r0, [r7, #12]
 800742a:	f7ff fe79 	bl	8007120 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 800742e:	4603      	mov	r3, r0
 8007430:	617b      	str	r3, [r7, #20]
 8007432:	f107 0214 	add.w	r2, r7, #20
 8007436:	f107 0308 	add.w	r3, r7, #8
 800743a:	4611      	mov	r1, r2
 800743c:	4618      	mov	r0, r3
 800743e:	f000 f8ad 	bl	800759c <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8007442:	4603      	mov	r3, r0
 8007444:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800744a:	4618      	mov	r0, r3
 800744c:	f000 f918 	bl	8007680 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>
 8007450:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8007452:	69bb      	ldr	r3, [r7, #24]
 8007454:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8007456:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	18d5      	adds	r5, r2, r3
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f7ff ff9c 	bl	800739e <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8007466:	4603      	mov	r3, r0
 8007468:	461a      	mov	r2, r3
 800746a:	4629      	mov	r1, r5
 800746c:	4620      	mov	r0, r4
 800746e:	f7ff ffa0 	bl	80073b2 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8007472:	2300      	movs	r3, #0
 8007474:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8007476:	f7ff ffaf 	bl	80073d8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 800747a:	4603      	mov	r3, r0
 800747c:	2b00      	cmp	r3, #0
 800747e:	d027      	beq.n	80074d0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007480:	f107 0308 	add.w	r3, r7, #8
 8007484:	4618      	mov	r0, r3
 8007486:	f7ff fef3 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800748a:	4603      	mov	r3, r0
 800748c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f91d 	bl	80076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8007496:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8007498:	69ba      	ldr	r2, [r7, #24]
 800749a:	4621      	mov	r1, r4
 800749c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800749e:	f000 f903 	bl	80076a8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80074a2:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	3304      	adds	r3, #4
 80074a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80074aa:	f107 0308 	add.w	r3, r7, #8
 80074ae:	4618      	mov	r0, r3
 80074b0:	f7ff fede 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80074b4:	4603      	mov	r3, r0
 80074b6:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f908 	bl	80076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80074c0:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80074c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074c4:	6a39      	ldr	r1, [r7, #32]
 80074c6:	4620      	mov	r0, r4
 80074c8:	f000 f8ee 	bl	80076a8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80074cc:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80074ce:	e026      	b.n	800751e <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 80074d0:	f107 0308 	add.w	r3, r7, #8
 80074d4:	4618      	mov	r0, r3
 80074d6:	f7ff fecb 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80074da:	4603      	mov	r3, r0
 80074dc:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	4618      	mov	r0, r3
 80074e2:	f000 f8f5 	bl	80076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80074e6:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80074e8:	69ba      	ldr	r2, [r7, #24]
 80074ea:	4621      	mov	r1, r4
 80074ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80074ee:	f000 f8f9 	bl	80076e4 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80074f2:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80074f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074f6:	3304      	adds	r3, #4
 80074f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80074fa:	f107 0308 	add.w	r3, r7, #8
 80074fe:	4618      	mov	r0, r3
 8007500:	f7ff feb6 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8007504:	4603      	mov	r3, r0
 8007506:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	4618      	mov	r0, r3
 800750c:	f000 f8e0 	bl	80076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8007510:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8007512:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007514:	6a39      	ldr	r1, [r7, #32]
 8007516:	4620      	mov	r0, r4
 8007518:	f000 f8e4 	bl	80076e4 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 800751c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800751e:	f7ff ff5b 	bl	80073d8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 8007522:	4603      	mov	r3, r0
 8007524:	f083 0301 	eor.w	r3, r3, #1
 8007528:	b2db      	uxtb	r3, r3
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	4618      	mov	r0, r3
 8007532:	f000 f8cd 	bl	80076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8007536:	4603      	mov	r3, r0
 8007538:	461a      	mov	r2, r3
 800753a:	6a39      	ldr	r1, [r7, #32]
 800753c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800753e:	f000 f8ea 	bl	8007716 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8007542:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	689a      	ldr	r2, [r3, #8]
 8007548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800754a:	1ad3      	subs	r3, r2, r3
 800754c:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800754e:	461a      	mov	r2, r3
 8007550:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007552:	f7ff fec0 	bl	80072d6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	69ba      	ldr	r2, [r7, #24]
 800755a:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007560:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	009b      	lsls	r3, r3, #2
 8007566:	69ba      	ldr	r2, [r7, #24]
 8007568:	441a      	add	r2, r3
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	609a      	str	r2, [r3, #8]
    }
 800756e:	bf00      	nop
 8007570:	3730      	adds	r7, #48	@ 0x30
 8007572:	46bd      	mov	sp, r7
 8007574:	bdb0      	pop	{r4, r5, r7, pc}
 8007576:	bf00      	nop
 8007578:	0800ade8 	.word	0x0800ade8

0800757c <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	009b      	lsls	r3, r3, #2
 800758c:	4619      	mov	r1, r3
 800758e:	68b8      	ldr	r0, [r7, #8]
 8007590:	f000 fd92 	bl	80080b8 <_ZdlPvj>
      }
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800759c:	b590      	push	{r4, r7, lr}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7ff fe62 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80075ac:	4603      	mov	r3, r0
 80075ae:	681c      	ldr	r4, [r3, #0]
 80075b0:	6838      	ldr	r0, [r7, #0]
 80075b2:	f7ff fe5d 	bl	8007270 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80075b6:	4603      	mov	r3, r0
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	1ae3      	subs	r3, r4, r3
 80075bc:	109b      	asrs	r3, r3, #2
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd90      	pop	{r4, r7, pc}

080075c6 <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80075c6:	b590      	push	{r4, r7, lr}
 80075c8:	b085      	sub	sp, #20
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80075d2:	68bb      	ldr	r3, [r7, #8]
 80075d4:	4619      	mov	r1, r3
 80075d6:	2004      	movs	r0, #4
 80075d8:	f7fd fa3c 	bl	8004a54 <_ZnwjPv>
 80075dc:	4604      	mov	r4, r0
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fedd 	bl	800739e <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 80075e4:	4603      	mov	r3, r0
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	6023      	str	r3, [r4, #0]
 80075ea:	bf00      	nop
 80075ec:	3714      	adds	r7, #20
 80075ee:	46bd      	mov	sp, r7
 80075f0:	bd90      	pop	{r4, r7, pc}

080075f2 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80075f2:	b590      	push	{r4, r7, lr}
 80075f4:	b087      	sub	sp, #28
 80075f6:	af00      	add	r7, sp, #0
 80075f8:	60f8      	str	r0, [r7, #12]
 80075fa:	60b9      	str	r1, [r7, #8]
 80075fc:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80075fe:	68f8      	ldr	r0, [r7, #12]
 8007600:	f000 f8a7 	bl	8007752 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 8007604:	4604      	mov	r4, r0
 8007606:	68f8      	ldr	r0, [r7, #12]
 8007608:	f000 f8b4 	bl	8007774 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 800760c:	4603      	mov	r3, r0
 800760e:	1ae2      	subs	r2, r4, r3
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	429a      	cmp	r2, r3
 8007614:	bf34      	ite	cc
 8007616:	2301      	movcc	r3, #1
 8007618:	2300      	movcs	r3, #0
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d002      	beq.n	8007626 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fd75 	bl	8008110 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 f8a4 	bl	8007774 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 800762c:	4604      	mov	r4, r0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f000 f8a0 	bl	8007774 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 8007634:	4603      	mov	r3, r0
 8007636:	613b      	str	r3, [r7, #16]
 8007638:	f107 0208 	add.w	r2, r7, #8
 800763c:	f107 0310 	add.w	r3, r7, #16
 8007640:	4611      	mov	r1, r2
 8007642:	4618      	mov	r0, r3
 8007644:	f000 f8a5 	bl	8007792 <_ZSt3maxIjERKT_S2_S2_>
 8007648:	4603      	mov	r3, r0
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4423      	add	r3, r4
 800764e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f000 f88f 	bl	8007774 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 8007656:	4602      	mov	r2, r0
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	4293      	cmp	r3, r2
 800765c:	d306      	bcc.n	800766c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 800765e:	68f8      	ldr	r0, [r7, #12]
 8007660:	f000 f877 	bl	8007752 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 8007664:	4602      	mov	r2, r0
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	4293      	cmp	r3, r2
 800766a:	d904      	bls.n	8007676 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x84>
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f870 	bl	8007752 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 8007672:	4603      	mov	r3, r0
 8007674:	e000      	b.n	8007678 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x86>
 8007676:	697b      	ldr	r3, [r7, #20]
      }
 8007678:	4618      	mov	r0, r3
 800767a:	371c      	adds	r7, #28
 800767c:	46bd      	mov	sp, r7
 800767e:	bd90      	pop	{r4, r7, pc}

08007680 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d006      	beq.n	800769e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x1e>
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6839      	ldr	r1, [r7, #0]
 8007694:	4618      	mov	r0, r3
 8007696:	f000 f88f 	bl	80077b8 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>
 800769a:	4603      	mov	r3, r0
 800769c:	e000      	b.n	80076a0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x20>
 800769e:	2300      	movs	r3, #0
      }
 80076a0:	4618      	mov	r0, r3
 80076a2:	3708      	adds	r7, #8
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}

080076a8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80076a8:	b590      	push	{r4, r7, lr}
 80076aa:	b087      	sub	sp, #28
 80076ac:	af02      	add	r7, sp, #8
 80076ae:	60f8      	str	r0, [r7, #12]
 80076b0:	60b9      	str	r1, [r7, #8]
 80076b2:	607a      	str	r2, [r7, #4]
 80076b4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80076b6:	f88d 4000 	strb.w	r4, [sp]
 80076ba:	683b      	ldr	r3, [r7, #0]
 80076bc:	687a      	ldr	r2, [r7, #4]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f888 	bl	80077d6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80076c6:	4603      	mov	r3, r0
      }
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd90      	pop	{r4, r7, pc}

080076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4618      	mov	r0, r3
 80076dc:	370c      	adds	r7, #12
 80076de:	46bd      	mov	sp, r7
 80076e0:	bc80      	pop	{r7}
 80076e2:	4770      	bx	lr

080076e4 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80076e4:	b590      	push	{r4, r7, lr}
 80076e6:	b085      	sub	sp, #20
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80076f2:	68f8      	ldr	r0, [r7, #12]
 80076f4:	f000 f881 	bl	80077fa <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 80076f8:	4604      	mov	r4, r0
 80076fa:	68b8      	ldr	r0, [r7, #8]
 80076fc:	f000 f87d 	bl	80077fa <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 8007700:	4601      	mov	r1, r0
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	687a      	ldr	r2, [r7, #4]
 8007706:	4620      	mov	r0, r4
 8007708:	f000 f886 	bl	8007818 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 800770c:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800770e:	4618      	mov	r0, r3
 8007710:	3714      	adds	r7, #20
 8007712:	46bd      	mov	sp, r7
 8007714:	bd90      	pop	{r4, r7, pc}

08007716 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8007716:	b580      	push	{r7, lr}
 8007718:	b084      	sub	sp, #16
 800771a:	af00      	add	r7, sp, #0
 800771c:	60f8      	str	r0, [r7, #12]
 800771e:	60b9      	str	r1, [r7, #8]
 8007720:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8007722:	68b9      	ldr	r1, [r7, #8]
 8007724:	68f8      	ldr	r0, [r7, #12]
 8007726:	f000 f888 	bl	800783a <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 800772a:	bf00      	nop
 800772c:	3710      	adds	r7, #16
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800773e:	687a      	ldr	r2, [r7, #4]
 8007740:	68b9      	ldr	r1, [r7, #8]
 8007742:	68f8      	ldr	r0, [r7, #12]
 8007744:	f000 f886 	bl	8007854 <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8007748:	4603      	mov	r3, r0
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8007752:	b580      	push	{r7, lr}
 8007754:	b082      	sub	sp, #8
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4618      	mov	r0, r3
 800775e:	f000 f8a3 	bl	80078a8 <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8007762:	4603      	mov	r3, r0
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f885 	bl	8007874 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>
 800776a:	4603      	mov	r3, r0
 800776c:	4618      	mov	r0, r3
 800776e:	3708      	adds	r7, #8
 8007770:	46bd      	mov	sp, r7
 8007772:	bd80      	pop	{r7, pc}

08007774 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	109b      	asrs	r3, r3, #2
 8007788:	4618      	mov	r0, r3
 800778a:	370c      	adds	r7, #12
 800778c:	46bd      	mov	sp, r7
 800778e:	bc80      	pop	{r7}
 8007790:	4770      	bx	lr

08007792 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8007792:	b480      	push	{r7}
 8007794:	b083      	sub	sp, #12
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
 800779a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	683b      	ldr	r3, [r7, #0]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	429a      	cmp	r2, r3
 80077a6:	d201      	bcs.n	80077ac <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80077a8:	683b      	ldr	r3, [r7, #0]
 80077aa:	e000      	b.n	80077ae <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 80077ac:	687b      	ldr	r3, [r7, #4]
    }
 80077ae:	4618      	mov	r0, r3
 80077b0:	370c      	adds	r7, #12
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bc80      	pop	{r7}
 80077b6:	4770      	bx	lr

080077b8 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
 80077c0:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80077c2:	2200      	movs	r2, #0
 80077c4:	6839      	ldr	r1, [r7, #0]
 80077c6:	6878      	ldr	r0, [r7, #4]
 80077c8:	f000 f878 	bl	80078bc <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>
 80077cc:	4603      	mov	r3, r0
 80077ce:	4618      	mov	r0, r3
 80077d0:	3708      	adds	r7, #8
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b084      	sub	sp, #16
 80077da:	af00      	add	r7, sp, #0
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
 80077e2:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 f88f 	bl	800790e <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80077f0:	4603      	mov	r3, r0
      }
 80077f2:	4618      	mov	r0, r3
 80077f4:	3710      	adds	r7, #16
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8007802:	f107 030c 	add.w	r3, r7, #12
 8007806:	6879      	ldr	r1, [r7, #4]
 8007808:	4618      	mov	r0, r3
 800780a:	f000 f89d 	bl	8007948 <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	4618      	mov	r0, r3
 8007812:	3710      	adds	r7, #16
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007818:	b580      	push	{r7, lr}
 800781a:	b084      	sub	sp, #16
 800781c:	af00      	add	r7, sp, #0
 800781e:	60f8      	str	r0, [r7, #12]
 8007820:	60b9      	str	r1, [r7, #8]
 8007822:	607a      	str	r2, [r7, #4]
 8007824:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 8007826:	687a      	ldr	r2, [r7, #4]
 8007828:	68b9      	ldr	r1, [r7, #8]
 800782a:	68f8      	ldr	r0, [r7, #12]
 800782c:	f000 f89e 	bl	800796c <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 8007830:	4603      	mov	r3, r0
    }
 8007832:	4618      	mov	r0, r3
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
 8007842:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8007844:	6839      	ldr	r1, [r7, #0]
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f8a4 	bl	8007994 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 800784c:	bf00      	nop
 800784e:	3708      	adds	r7, #8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8007854:	b580      	push	{r7, lr}
 8007856:	b084      	sub	sp, #16
 8007858:	af00      	add	r7, sp, #0
 800785a:	60f8      	str	r0, [r7, #12]
 800785c:	60b9      	str	r1, [r7, #8]
 800785e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8007860:	687a      	ldr	r2, [r7, #4]
 8007862:	68b9      	ldr	r1, [r7, #8]
 8007864:	68f8      	ldr	r0, [r7, #12]
 8007866:	f000 f89f 	bl	80079a8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>
 800786a:	4603      	mov	r3, r0
    }
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 800787c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8007880:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8007882:	6878      	ldr	r0, [r7, #4]
 8007884:	f000 f8ad 	bl	80079e2 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>
 8007888:	4603      	mov	r3, r0
 800788a:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800788c:	f107 0208 	add.w	r2, r7, #8
 8007890:	f107 030c 	add.w	r3, r7, #12
 8007894:	4611      	mov	r1, r2
 8007896:	4618      	mov	r0, r3
 8007898:	f000 f8af 	bl	80079fa <_ZSt3minIjERKT_S2_S2_>
 800789c:	4603      	mov	r3, r0
 800789e:	681b      	ldr	r3, [r3, #0]
      }
 80078a0:	4618      	mov	r0, r3
 80078a2:	3710      	adds	r7, #16
 80078a4:	46bd      	mov	sp, r7
 80078a6:	bd80      	pop	{r7, pc}

080078a8 <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	4618      	mov	r0, r3
 80078b4:	370c      	adds	r7, #12
 80078b6:	46bd      	mov	sp, r7
 80078b8:	bc80      	pop	{r7}
 80078ba:	4770      	bx	lr

080078bc <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80078bc:	b580      	push	{r7, lr}
 80078be:	b084      	sub	sp, #16
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	60f8      	str	r0, [r7, #12]
 80078c4:	60b9      	str	r1, [r7, #8]
 80078c6:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 80078c8:	68f8      	ldr	r0, [r7, #12]
 80078ca:	f000 f8a9 	bl	8007a20 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 80078ce:	4602      	mov	r2, r0
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	4293      	cmp	r3, r2
 80078d4:	bf8c      	ite	hi
 80078d6:	2301      	movhi	r3, #1
 80078d8:	2300      	movls	r3, #0
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b00      	cmp	r3, #0
 80078de:	bf14      	ite	ne
 80078e0:	2301      	movne	r3, #1
 80078e2:	2300      	moveq	r3, #0
 80078e4:	b2db      	uxtb	r3, r3
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d007      	beq.n	80078fa <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80078f0:	d301      	bcc.n	80078f6 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80078f2:	f000 fc0a 	bl	800810a <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80078f6:	f000 fc05 	bl	8008104 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	009b      	lsls	r3, r3, #2
 80078fe:	4618      	mov	r0, r3
 8007900:	f000 fbed 	bl	80080de <_Znwj>
 8007904:	4603      	mov	r3, r0
      }
 8007906:	4618      	mov	r0, r3
 8007908:	3710      	adds	r7, #16
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}

0800790e <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800790e:	b5b0      	push	{r4, r5, r7, lr}
 8007910:	b084      	sub	sp, #16
 8007912:	af00      	add	r7, sp, #0
 8007914:	60f8      	str	r0, [r7, #12]
 8007916:	60b9      	str	r1, [r7, #8]
 8007918:	607a      	str	r2, [r7, #4]
 800791a:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 800791c:	68f8      	ldr	r0, [r7, #12]
 800791e:	f000 f88a 	bl	8007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8007922:	4604      	mov	r4, r0
 8007924:	68b8      	ldr	r0, [r7, #8]
 8007926:	f000 f886 	bl	8007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 800792a:	4605      	mov	r5, r0
 800792c:	6878      	ldr	r0, [r7, #4]
 800792e:	f000 f882 	bl	8007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8007932:	4602      	mov	r2, r0
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	4629      	mov	r1, r5
 8007938:	4620      	mov	r0, r4
 800793a:	f000 f886 	bl	8007a4a <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 800793e:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8007940:	4618      	mov	r0, r3
 8007942:	3710      	adds	r7, #16
 8007944:	46bd      	mov	sp, r7
 8007946:	bdb0      	pop	{r4, r5, r7, pc}

08007948 <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>:
      move_iterator(iterator_type __i)
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8007952:	463b      	mov	r3, r7
 8007954:	4618      	mov	r0, r3
 8007956:	f000 f896 	bl	8007a86 <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>
 800795a:	4603      	mov	r3, r0
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	601a      	str	r2, [r3, #0]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	4618      	mov	r0, r3
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8007978:	2301      	movs	r3, #1
 800797a:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 800797c:	2301      	movs	r3, #1
 800797e:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8007980:	687a      	ldr	r2, [r7, #4]
 8007982:	68b9      	ldr	r1, [r7, #8]
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 f888 	bl	8007a9a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>
 800798a:	4603      	mov	r3, r0
    }
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8007994:	b480      	push	{r7}
 8007996:	b083      	sub	sp, #12
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	bf00      	nop
 80079a0:	370c      	adds	r7, #12
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bc80      	pop	{r7}
 80079a6:	4770      	bx	lr

080079a8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80079b4:	68ba      	ldr	r2, [r7, #8]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	1ad3      	subs	r3, r2, r3
 80079ba:	109b      	asrs	r3, r3, #2
 80079bc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d006      	beq.n	80079d2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	009b      	lsls	r3, r3, #2
 80079c8:	461a      	mov	r2, r3
 80079ca:	68f9      	ldr	r1, [r7, #12]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f001 fe03 	bl	80095d8 <memmove>
	  return __result + _Num;
 80079d2:	697b      	ldr	r3, [r7, #20]
 80079d4:	009b      	lsls	r3, r3, #2
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	4413      	add	r3, r2
	}
 80079da:	4618      	mov	r0, r3
 80079dc:	3718      	adds	r7, #24
 80079de:	46bd      	mov	sp, r7
 80079e0:	bd80      	pop	{r7, pc}

080079e2 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80079e2:	b580      	push	{r7, lr}
 80079e4:	b082      	sub	sp, #8
 80079e6:	af00      	add	r7, sp, #0
 80079e8:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f865 	bl	8007aba <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>
 80079f0:	4603      	mov	r3, r0
      }
 80079f2:	4618      	mov	r0, r3
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}

080079fa <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80079fa:	b480      	push	{r7}
 80079fc:	b083      	sub	sp, #12
 80079fe:	af00      	add	r7, sp, #0
 8007a00:	6078      	str	r0, [r7, #4]
 8007a02:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	681a      	ldr	r2, [r3, #0]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d201      	bcs.n	8007a14 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8007a10:	683b      	ldr	r3, [r7, #0]
 8007a12:	e000      	b.n	8007a16 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8007a14:	687b      	ldr	r3, [r7, #4]
    }
 8007a16:	4618      	mov	r0, r3
 8007a18:	370c      	adds	r7, #12
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr

08007a20 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8007a20:	b480      	push	{r7}
 8007a22:	b083      	sub	sp, #12
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8007a28:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	370c      	adds	r7, #12
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bc80      	pop	{r7}
 8007a34:	4770      	bx	lr

08007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>:
    __niter_base(_Iterator __it)
 8007a36:	b480      	push	{r7}
 8007a38:	b083      	sub	sp, #12
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	4618      	mov	r0, r3
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bc80      	pop	{r7}
 8007a48:	4770      	bx	lr

08007a4a <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8007a4a:	b580      	push	{r7, lr}
 8007a4c:	b086      	sub	sp, #24
 8007a4e:	af00      	add	r7, sp, #0
 8007a50:	60f8      	str	r0, [r7, #12]
 8007a52:	60b9      	str	r1, [r7, #8]
 8007a54:	607a      	str	r2, [r7, #4]
 8007a56:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	109b      	asrs	r3, r3, #2
 8007a60:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	dd06      	ble.n	8007a76 <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8007a68:	697b      	ldr	r3, [r7, #20]
 8007a6a:	009b      	lsls	r3, r3, #2
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	68f9      	ldr	r1, [r7, #12]
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f001 fdb1 	bl	80095d8 <memmove>
      return __result + __count;
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	009b      	lsls	r3, r3, #2
 8007a7a:	687a      	ldr	r2, [r7, #4]
 8007a7c:	4413      	add	r3, r2
    }
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}

08007a86 <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8007a86:	b480      	push	{r7}
 8007a88:	b083      	sub	sp, #12
 8007a8a:	af00      	add	r7, sp, #0
 8007a8c:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	4618      	mov	r0, r3
 8007a92:	370c      	adds	r7, #12
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bc80      	pop	{r7}
 8007a98:	4770      	bx	lr

08007a9a <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b084      	sub	sp, #16
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8007aa6:	687a      	ldr	r2, [r7, #4]
 8007aa8:	68b9      	ldr	r1, [r7, #8]
 8007aaa:	68f8      	ldr	r0, [r7, #12]
 8007aac:	f000 f811 	bl	8007ad2 <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}

08007aba <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8007aba:	b580      	push	{r7, lr}
 8007abc:	b082      	sub	sp, #8
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f7ff ffac 	bl	8007a20 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	4618      	mov	r0, r3
 8007acc:	3708      	adds	r7, #8
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8007ad2:	b590      	push	{r4, r7, lr}
 8007ad4:	b085      	sub	sp, #20
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	f000 f80f 	bl	8007b02 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007ae4:	4604      	mov	r4, r0
 8007ae6:	68b8      	ldr	r0, [r7, #8]
 8007ae8:	f000 f80b 	bl	8007b02 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8007aec:	4603      	mov	r3, r0
 8007aee:	687a      	ldr	r2, [r7, #4]
 8007af0:	4619      	mov	r1, r3
 8007af2:	4620      	mov	r0, r4
 8007af4:	f000 f816 	bl	8007b24 <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8007af8:	4603      	mov	r3, r0
    }
 8007afa:	4618      	mov	r0, r3
 8007afc:	3714      	adds	r7, #20
 8007afe:	46bd      	mov	sp, r7
 8007b00:	bd90      	pop	{r4, r7, pc}

08007b02 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8007b02:	b580      	push	{r7, lr}
 8007b04:	b082      	sub	sp, #8
 8007b06:	af00      	add	r7, sp, #0
 8007b08:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8007b0a:	1d3b      	adds	r3, r7, #4
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	f000 f82c 	bl	8007b6a <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>
 8007b12:	4603      	mov	r3, r0
 8007b14:	4618      	mov	r0, r3
 8007b16:	f000 f833 	bl	8007b80 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	3708      	adds	r7, #8
 8007b20:	46bd      	mov	sp, r7
 8007b22:	bd80      	pop	{r7, pc}

08007b24 <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007b24:	b5b0      	push	{r4, r5, r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	60f8      	str	r0, [r7, #12]
 8007b2c:	60b9      	str	r1, [r7, #8]
 8007b2e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8007b30:	68f8      	ldr	r0, [r7, #12]
 8007b32:	f7ff ff80 	bl	8007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8007b36:	4604      	mov	r4, r0
 8007b38:	68b8      	ldr	r0, [r7, #8]
 8007b3a:	f7ff ff7c 	bl	8007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8007b3e:	4605      	mov	r5, r0
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f7ff ff77 	bl	8007a36 <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	461a      	mov	r2, r3
 8007b4c:	4629      	mov	r1, r5
 8007b4e:	4620      	mov	r0, r4
 8007b50:	f7ff fdef 	bl	8007732 <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8007b54:	4602      	mov	r2, r0
 8007b56:	1d3b      	adds	r3, r7, #4
 8007b58:	4611      	mov	r1, r2
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 f81a 	bl	8007b94 <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>
 8007b60:	4603      	mov	r3, r0
    }
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bdb0      	pop	{r4, r5, r7, pc}

08007b6a <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>:
      base() const
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4618      	mov	r0, r3
 8007b78:	370c      	adds	r7, #12
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bc80      	pop	{r7}
 8007b7e:	4770      	bx	lr

08007b80 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8007b80:	b480      	push	{r7}
 8007b82:	b083      	sub	sp, #12
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	370c      	adds	r7, #12
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	bc80      	pop	{r7}
 8007b92:	4770      	bx	lr

08007b94 <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8007b94:	b480      	push	{r7}
 8007b96:	b083      	sub	sp, #12
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	6039      	str	r1, [r7, #0]
    { return __res; }
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bc80      	pop	{r7}
 8007ba8:	4770      	bx	lr
	...

08007bac <_Z41__static_initialization_and_destruction_0ii>:
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b082      	sub	sp, #8
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b01      	cmp	r3, #1
 8007bba:	d107      	bne.n	8007bcc <_Z41__static_initialization_and_destruction_0ii+0x20>
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d102      	bne.n	8007bcc <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 8007bc6:	4809      	ldr	r0, [pc, #36]	@ (8007bec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007bc8:	f7ff fa7d 	bl	80070c6 <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d107      	bne.n	8007be2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8007bd8:	4293      	cmp	r3, r2
 8007bda:	d102      	bne.n	8007be2 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8007bdc:	4803      	ldr	r0, [pc, #12]	@ (8007bec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8007bde:	f000 f807 	bl	8007bf0 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 8007be2:	bf00      	nop
 8007be4:	3708      	adds	r7, #8
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	20000358 	.word	0x20000358

08007bf0 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8007bf0:	b5b0      	push	{r4, r5, r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681c      	ldr	r4, [r3, #0]
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	4618      	mov	r0, r3
 8007c04:	f7ff fd64 	bl	80076d0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8007c08:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8007c0a:	461a      	mov	r2, r3
 8007c0c:	4629      	mov	r1, r5
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f7ff fd81 	bl	8007716 <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f7ff faf1 	bl	80071fe <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	4618      	mov	r0, r3
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bdb0      	pop	{r4, r5, r7, pc}

08007c26 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 8007c26:	b580      	push	{r7, lr}
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007c2e:	2001      	movs	r0, #1
 8007c30:	f7ff ffbc 	bl	8007bac <_Z41__static_initialization_and_destruction_0ii>
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 8007c36:	b580      	push	{r7, lr}
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8007c3e:	2000      	movs	r0, #0
 8007c40:	f7ff ffb4 	bl	8007bac <_Z41__static_initialization_and_destruction_0ii>
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <UART_Init>:
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/

status_t UART_Init(stm32_DMA_uart_t* const self, UART_HandleTypeDef * const huart, const uint32_t rxBufferSize)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b086      	sub	sp, #24
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	60f8      	str	r0, [r7, #12]
 8007c4e:	60b9      	str	r1, [r7, #8]
 8007c50:	607a      	str	r2, [r7, #4]
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d006      	beq.n	8007c66 <UART_Init+0x20>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d003      	beq.n	8007c66 <UART_Init+0x20>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007c64:	d902      	bls.n	8007c6c <UART_Init+0x26>
		return ERROR_INVALID_ARGUMENT;
 8007c66:	f06f 0304 	mvn.w	r3, #4
 8007c6a:	e045      	b.n	8007cf8 <UART_Init+0xb2>
	}

	memset(self, 0, sizeof(stm32_DMA_uart_t));
 8007c6c:	222c      	movs	r2, #44	@ 0x2c
 8007c6e:	2100      	movs	r1, #0
 8007c70:	68f8      	ldr	r0, [r7, #12]
 8007c72:	f001 fccb 	bl	800960c <memset>
	self->huart = huart;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	601a      	str	r2, [r3, #0]
	self->isTxBusy_ = false;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	711a      	strb	r2, [r3, #4]

#ifdef UART_CONTAINER_ENA

	if(pushContainerUartInstance(self) != STATUS_OK) {
 8007c82:	68f8      	ldr	r0, [r7, #12]
 8007c84:	f000 fa02 	bl	800808c <pushContainerUartInstance>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d008      	beq.n	8007ca0 <UART_Init+0x5a>
		self->isTxBusy_ = true;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2201      	movs	r2, #1
 8007c92:	711a      	strb	r2, [r3, #4]
		self->RX.rxBufferSize = 0;
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	2200      	movs	r2, #0
 8007c98:	619a      	str	r2, [r3, #24]
		return ERROR_FAIL;
 8007c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8007c9e:	e02b      	b.n	8007cf8 <UART_Init+0xb2>
	}

#endif /* UART_CONTAINER_ENA */

	void* const buf1 = malloc(rxBufferSize);
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fbeb 	bl	800847c <malloc>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	617b      	str	r3, [r7, #20]
	if(buf1 == NULL) {
 8007caa:	697b      	ldr	r3, [r7, #20]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d102      	bne.n	8007cb6 <UART_Init+0x70>
		return ERROR_FAIL;
 8007cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb4:	e020      	b.n	8007cf8 <UART_Init+0xb2>
	}
	void* const buf2 = malloc(rxBufferSize);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f000 fbe0 	bl	800847c <malloc>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	613b      	str	r3, [r7, #16]
	if(buf2 == NULL) {
 8007cc0:	693b      	ldr	r3, [r7, #16]
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d105      	bne.n	8007cd2 <UART_Init+0x8c>
		free(buf1);
 8007cc6:	6978      	ldr	r0, [r7, #20]
 8007cc8:	f000 fbe0 	bl	800848c <free>
		return ERROR_FAIL;
 8007ccc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cd0:	e012      	b.n	8007cf8 <UART_Init+0xb2>
	}

	self->RX.rxBuffer1 = buf1;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	697a      	ldr	r2, [r7, #20]
 8007cd6:	61da      	str	r2, [r3, #28]
	self->RX.rxBuffer2 = buf2;
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	693a      	ldr	r2, [r7, #16]
 8007cdc:	621a      	str	r2, [r3, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	619a      	str	r2, [r3, #24]

	//HAL_UART_Receive_DMA(huart, self->RX.rxBuffer1, rxBufferSize);
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	69da      	ldr	r2, [r3, #28]
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	629a      	str	r2, [r3, #40]	@ 0x28
	UART_SetRxCallback(self, 0, 0);
 8007cec:	2200      	movs	r2, #0
 8007cee:	2100      	movs	r1, #0
 8007cf0:	68f8      	ldr	r0, [r7, #12]
 8007cf2:	f000 f852 	bl	8007d9a <UART_SetRxCallback>

	return STATUS_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3718      	adds	r7, #24
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <UART_SendBuffer>:

	return STATUS_OK;
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b086      	sub	sp, #24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	607a      	str	r2, [r7, #4]
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 8007d0c:	68bb      	ldr	r3, [r7, #8]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d002      	beq.n	8007d18 <UART_SendBuffer+0x18>
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d102      	bne.n	8007d1e <UART_SendBuffer+0x1e>
		return ERROR_INVALID_ARGUMENT;
 8007d18:	f06f 0304 	mvn.w	r3, #4
 8007d1c:	e020      	b.n	8007d60 <UART_SendBuffer+0x60>
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8007d1e:	f7ff f875 	bl	8006e0c <IRQ_LOCK>
	if (self->isTxBusy_) {
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	791b      	ldrb	r3, [r3, #4]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d003      	beq.n	8007d34 <UART_SendBuffer+0x34>
		IRQ_UNLOCK();
 8007d2c:	f7ff f84c 	bl	8006dc8 <IRQ_UNLOCK>
		return STATUS_BUSY;
 8007d30:	2302      	movs	r3, #2
 8007d32:	e015      	b.n	8007d60 <UART_SendBuffer+0x60>
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2201      	movs	r2, #1
 8007d38:	711a      	strb	r2, [r3, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	b292      	uxth	r2, r2
 8007d42:	68b9      	ldr	r1, [r7, #8]
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7fb fde1 	bl	800390c <HAL_UART_Transmit_DMA>
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	75fb      	strb	r3, [r7, #23]
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8007d4e:	f7ff f83b 	bl	8006dc8 <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 8007d52:	7dfb      	ldrb	r3, [r7, #23]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d002      	beq.n	8007d5e <UART_SendBuffer+0x5e>
		return ERROR_FAIL;
 8007d58:	f04f 33ff 	mov.w	r3, #4294967295
 8007d5c:	e000      	b.n	8007d60 <UART_SendBuffer+0x60>
	}

	return STATUS_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3718      	adds	r7, #24
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bd80      	pop	{r7, pc}

08007d68 <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b085      	sub	sp, #20
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	60f8      	str	r0, [r7, #12]
 8007d70:	60b9      	str	r1, [r7, #8]
 8007d72:	607a      	str	r2, [r7, #4]
	if (self->isTxBusy_) {
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	791b      	ldrb	r3, [r3, #4]
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d001      	beq.n	8007d82 <UART_SetTxcallback+0x1a>
		return STATUS_BUSY;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	e006      	b.n	8007d90 <UART_SetTxcallback+0x28>
	}

	self->TX.txCallback_ = f;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	609a      	str	r2, [r3, #8]
	self->TX.txCallbackData_ = captured;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	687a      	ldr	r2, [r7, #4]
 8007d8c:	60da      	str	r2, [r3, #12]

	return STATUS_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bc80      	pop	{r7}
 8007d98:	4770      	bx	lr

08007d9a <UART_SetRxCallback>:


void UART_SetRxCallback(stm32_DMA_uart_t* const self, const uart_rx_callback_t f, void* const captured)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b088      	sub	sp, #32
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	60f8      	str	r0, [r7, #12]
 8007da2:	60b9      	str	r1, [r7, #8]
 8007da4:	607a      	str	r2, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	61fb      	str	r3, [r7, #28]

	self->RX.rxCallback_ = f;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	68ba      	ldr	r2, [r7, #8]
 8007db0:	611a      	str	r2, [r3, #16]
	self->RX.rxCallbackData_ = captured;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	687a      	ldr	r2, [r7, #4]
 8007db6:	615a      	str	r2, [r3, #20]

	/* Start receiving */
	if (f) {
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d015      	beq.n	8007dea <UART_SetRxCallback+0x50>
		uint8_t* const r_rxBuffer = self->RX.rxBuffer1;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	61bb      	str	r3, [r7, #24]
		const uint32_t r_buff_size = self->RX.rxBufferSize;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	699b      	ldr	r3, [r3, #24]
 8007dc8:	617b      	str	r3, [r7, #20]

		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	461a      	mov	r2, r3
 8007dd0:	69b9      	ldr	r1, [r7, #24]
 8007dd2:	69f8      	ldr	r0, [r7, #28]
 8007dd4:	f7fb fe0a 	bl	80039ec <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	68da      	ldr	r2, [r3, #12]
 8007dde:	69fb      	ldr	r3, [r7, #28]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f042 0210 	orr.w	r2, r2, #16
 8007de6:	60da      	str	r2, [r3, #12]
	} else {
		HAL_UART_AbortReceive(huart);
		UART_RXCallback(self);
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
	}
}
 8007de8:	e00d      	b.n	8007e06 <UART_SetRxCallback+0x6c>
		HAL_UART_AbortReceive(huart);
 8007dea:	69f8      	ldr	r0, [r7, #28]
 8007dec:	f7fb fe23 	bl	8003a36 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8007df0:	68f8      	ldr	r0, [r7, #12]
 8007df2:	f000 f82f 	bl	8007e54 <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 8007df6:	69fb      	ldr	r3, [r7, #28]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	69fb      	ldr	r3, [r7, #28]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0210 	bic.w	r2, r2, #16
 8007e04:	60da      	str	r2, [r3, #12]
}
 8007e06:	bf00      	nop
 8007e08:	3720      	adds	r7, #32
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}

08007e0e <USER_UART_IRQHandler>:
* IT Callbacks
 *****************************************************************************/

//general in stm32f1xx_it.c
void USER_UART_IRQHandler(stm32_DMA_uart_t* const self)
{
 8007e0e:	b580      	push	{r7, lr}
 8007e10:	b084      	sub	sp, #16
 8007e12:	af00      	add	r7, sp, #0
 8007e14:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	60fb      	str	r3, [r7, #12]

	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b10      	cmp	r3, #16
 8007e28:	d110      	bne.n	8007e4c <USER_UART_IRQHandler+0x3e>
		// On idle interruption
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60bb      	str	r3, [r7, #8]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60bb      	str	r3, [r7, #8]
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	685b      	ldr	r3, [r3, #4]
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_AbortReceive(huart);
 8007e40:	68f8      	ldr	r0, [r7, #12]
 8007e42:	f7fb fdf8 	bl	8003a36 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f804 	bl	8007e54 <UART_RXCallback>
	}
}
 8007e4c:	bf00      	nop
 8007e4e:	3710      	adds	r7, #16
 8007e50:	46bd      	mov	sp, r7
 8007e52:	bd80      	pop	{r7, pc}

08007e54 <UART_RXCallback>:

// rx callback in void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void UART_RXCallback(stm32_DMA_uart_t* const self)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b08c      	sub	sp, #48	@ 0x30
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6a1b      	ldr	r3, [r3, #32]
 8007e6c:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	699b      	ldr	r3, [r3, #24]
 8007e72:	623b      	str	r3, [r7, #32]

	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8007e74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	d00b      	beq.n	8007e96 <UART_RXCallback+0x42>
 8007e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d006      	beq.n	8007e96 <UART_RXCallback+0x42>
 8007e88:	4b20      	ldr	r3, [pc, #128]	@ (8007f0c <UART_RXCallback+0xb8>)
 8007e8a:	4a21      	ldr	r2, [pc, #132]	@ (8007f10 <UART_RXCallback+0xbc>)
 8007e8c:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8007e90:	4820      	ldr	r0, [pc, #128]	@ (8007f14 <UART_RXCallback+0xc0>)
 8007e92:	f000 fab9 	bl	8008408 <__assert_func>

	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	6a3a      	ldr	r2, [r7, #32]
 8007ea0:	1ad3      	subs	r3, r2, r3
 8007ea2:	61fb      	str	r3, [r7, #28]
	uint8_t* const curr = huart->pRxBuffPtr;
 8007ea4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ea8:	61bb      	str	r3, [r7, #24]
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8007eaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007eae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d101      	bne.n	8007eb8 <UART_RXCallback+0x64>
 8007eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb6:	e000      	b.n	8007eba <UART_RXCallback+0x66>
 8007eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eba:	617b      	str	r3, [r7, #20]

	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8007ebc:	6a3b      	ldr	r3, [r7, #32]
 8007ebe:	b29b      	uxth	r3, r3
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	6979      	ldr	r1, [r7, #20]
 8007ec4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007ec6:	f7fb fd91 	bl	80039ec <HAL_UART_Receive_DMA>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	74fb      	strb	r3, [r7, #19]
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 8007ece:	7cfb      	ldrb	r3, [r7, #19]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d105      	bne.n	8007ee0 <UART_RXCallback+0x8c>
 8007ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ed6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eda:	b2db      	uxtb	r3, r3
 8007edc:	2be0      	cmp	r3, #224	@ 0xe0
 8007ede:	d102      	bne.n	8007ee6 <UART_RXCallback+0x92>
		UART_ErrorCallback(self);
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 f83f 	bl	8007f64 <UART_ErrorCallback>
	}


	void* const captured = self->RX.rxCallbackData_;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	60fb      	str	r3, [r7, #12]
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8007ef2:	68bb      	ldr	r3, [r7, #8]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d004      	beq.n	8007f02 <UART_RXCallback+0xae>
		callback(curr, size, captured);
 8007ef8:	68bb      	ldr	r3, [r7, #8]
 8007efa:	68fa      	ldr	r2, [r7, #12]
 8007efc:	69f9      	ldr	r1, [r7, #28]
 8007efe:	69b8      	ldr	r0, [r7, #24]
 8007f00:	4798      	blx	r3
	}
}
 8007f02:	bf00      	nop
 8007f04:	3730      	adds	r7, #48	@ 0x30
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
 8007f0a:	bf00      	nop
 8007f0c:	0800ae04 	.word	0x0800ae04
 8007f10:	0800afc8 	.word	0x0800afc8
 8007f14:	0800ae4c 	.word	0x0800ae4c

08007f18 <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b086      	sub	sp, #24
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
	void* const captured = self->TX.txCallbackData_;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	617b      	str	r3, [r7, #20]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	689b      	ldr	r3, [r3, #8]
 8007f2a:	613b      	str	r3, [r7, #16]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f34:	b2db      	uxtb	r3, r3
 8007f36:	2be0      	cmp	r3, #224	@ 0xe0
 8007f38:	d102      	bne.n	8007f40 <UART_TXCallback+0x28>
 8007f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8007f3e:	e000      	b.n	8007f42 <UART_TXCallback+0x2a>
 8007f40:	2300      	movs	r3, #0
 8007f42:	73fb      	strb	r3, [r7, #15]
	self->isTxBusy_ = false;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	711a      	strb	r2, [r3, #4]

	if (callback) {
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d005      	beq.n	8007f5c <UART_TXCallback+0x44>
		callback(status, captured);
 8007f50:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8007f54:	693b      	ldr	r3, [r7, #16]
 8007f56:	6979      	ldr	r1, [r7, #20]
 8007f58:	4610      	mov	r0, r2
 8007f5a:	4798      	blx	r3
	}
}
 8007f5c:	bf00      	nop
 8007f5e:	3718      	adds	r7, #24
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b086      	sub	sp, #24
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	613b      	str	r3, [r7, #16]
	status_t status = ERROR_FAIL;
 8007f72:	23ff      	movs	r3, #255	@ 0xff
 8007f74:	75fb      	strb	r3, [r7, #23]

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7a:	f003 0308 	and.w	r3, r3, #8
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <UART_ErrorCallback+0x24>
		status = ERROR_UART_RX_OVERRUN;
 8007f82:	23b8      	movs	r3, #184	@ 0xb8
 8007f84:	75fb      	strb	r3, [r7, #23]
 8007f86:	e058      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8007f88:	693b      	ldr	r3, [r7, #16]
 8007f8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f8c:	f003 0304 	and.w	r3, r3, #4
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d002      	beq.n	8007f9a <UART_ErrorCallback+0x36>
		status = ERROR_UART_FRAMING_ERR;
 8007f94:	23b6      	movs	r3, #182	@ 0xb6
 8007f96:	75fb      	strb	r3, [r7, #23]
 8007f98:	e04f      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d002      	beq.n	8007fac <UART_ErrorCallback+0x48>
		status = ERROR_UART_RX_NOISE;
 8007fa6:	23b7      	movs	r3, #183	@ 0xb7
 8007fa8:	75fb      	strb	r3, [r7, #23]
 8007faa:	e046      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007fb0:	f003 0310 	and.w	r3, r3, #16
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d005      	beq.n	8007fc4 <UART_ErrorCallback+0x60>
		self->isTxBusy_ = false;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	711a      	strb	r2, [r3, #4]
		status = ERROR_UART_TX_DMA_ERR;
 8007fbe:	23b5      	movs	r3, #181	@ 0xb5
 8007fc0:	75fb      	strb	r3, [r7, #23]
 8007fc2:	e03a      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fca:	b2db      	uxtb	r3, r3
 8007fcc:	2b24      	cmp	r3, #36	@ 0x24
 8007fce:	d102      	bne.n	8007fd6 <UART_ErrorCallback+0x72>
		status = STATUS_BUSY;
 8007fd0:	2302      	movs	r3, #2
 8007fd2:	75fb      	strb	r3, [r7, #23]
 8007fd4:	e031      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 8007fd6:	693b      	ldr	r3, [r7, #16]
 8007fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b22      	cmp	r3, #34	@ 0x22
 8007fe0:	d102      	bne.n	8007fe8 <UART_ErrorCallback+0x84>
		status = STATUS_BUSY;
 8007fe2:	2302      	movs	r3, #2
 8007fe4:	75fb      	strb	r3, [r7, #23]
 8007fe6:	e028      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007fee:	b2db      	uxtb	r3, r3
 8007ff0:	2b21      	cmp	r3, #33	@ 0x21
 8007ff2:	d102      	bne.n	8007ffa <UART_ErrorCallback+0x96>
		status = STATUS_BUSY;
 8007ff4:	2302      	movs	r3, #2
 8007ff6:	75fb      	strb	r3, [r7, #23]
 8007ff8:	e01f      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008000:	b2db      	uxtb	r3, r3
 8008002:	2b23      	cmp	r3, #35	@ 0x23
 8008004:	d102      	bne.n	800800c <UART_ErrorCallback+0xa8>
		status = STATUS_BUSY;
 8008006:	2302      	movs	r3, #2
 8008008:	75fb      	strb	r3, [r7, #23]
 800800a:	e016      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2be0      	cmp	r3, #224	@ 0xe0
 8008016:	d105      	bne.n	8008024 <UART_ErrorCallback+0xc0>
		self->isTxBusy_ = false;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2200      	movs	r2, #0
 800801c:	711a      	strb	r2, [r3, #4]
		status = ERROR_FAIL;
 800801e:	23ff      	movs	r3, #255	@ 0xff
 8008020:	75fb      	strb	r3, [r7, #23]
 8008022:	e00a      	b.n	800803a <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2ba0      	cmp	r3, #160	@ 0xa0
 800802e:	d104      	bne.n	800803a <UART_ErrorCallback+0xd6>
		self->isTxBusy_ = false;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2200      	movs	r2, #0
 8008034:	711a      	strb	r2, [r3, #4]
		status = ERROR_TIMEOUT;
 8008036:	23fa      	movs	r3, #250	@ 0xfa
 8008038:	75fb      	strb	r3, [r7, #23]
	}

	void* const captured = self->Error.errorCallbackData_;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800803e:	60fb      	str	r3, [r7, #12]
	const uart_error_callback_t callback = self->Error.errorCallback;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008044:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d005      	beq.n	8008058 <UART_ErrorCallback+0xf4>
		callback(status, captured);
 800804c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	68f9      	ldr	r1, [r7, #12]
 8008054:	4610      	mov	r0, r2
 8008056:	4798      	blx	r3
	}
}
 8008058:	bf00      	nop
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}

08008060 <getContainerUartInstance>:
	m_instance_counter = 0;
#endif /* (UART_CONTAINER_COUNT > 1) */
}

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
 8008060:	b480      	push	{r7}
 8008062:	b085      	sub	sp, #20
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
#if (UART_CONTAINER_COUNT == 1)

	stm32_DMA_uart_t* const r_inst = m_instances[0];
 8008068:	4b07      	ldr	r3, [pc, #28]	@ (8008088 <getContainerUartInstance+0x28>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	60fb      	str	r3, [r7, #12]
	if(r_inst->huart == huart) {
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	687a      	ldr	r2, [r7, #4]
 8008074:	429a      	cmp	r2, r3
 8008076:	d101      	bne.n	800807c <getContainerUartInstance+0x1c>
		return r_inst;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	e000      	b.n	800807e <getContainerUartInstance+0x1e>
			return r_inst;
		}
	}
#endif /* (UART_CONTAINER_COUNT == 1) */

	return NULL;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	bc80      	pop	{r7}
 8008086:	4770      	bx	lr
 8008088:	20000364 	.word	0x20000364

0800808c <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
 800808c:	b480      	push	{r7}
 800808e:	b083      	sub	sp, #12
 8008090:	af00      	add	r7, sp, #0
 8008092:	6078      	str	r0, [r7, #4]
#if (UART_CONTAINER_COUNT == 1)
	if(inst == NULL) {
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d102      	bne.n	80080a0 <pushContainerUartInstance+0x14>
		return ERROR_FAIL;
 800809a:	f04f 33ff 	mov.w	r3, #4294967295
 800809e:	e003      	b.n	80080a8 <pushContainerUartInstance+0x1c>
	}

	m_instances[0] = inst;
 80080a0:	4a04      	ldr	r2, [pc, #16]	@ (80080b4 <pushContainerUartInstance+0x28>)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6013      	str	r3, [r2, #0]
	}
	m_instances[m_instance_counter] = inst;
	++m_instance_counter;
#endif /* (UART_CONTAINER_COUNT == 1) */

	return STATUS_OK;
 80080a6:	2300      	movs	r3, #0
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	370c      	adds	r7, #12
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	20000364 	.word	0x20000364

080080b8 <_ZdlPvj>:
 80080b8:	f000 b830 	b.w	800811c <_ZdlPv>

080080bc <_ZdaPv>:
 80080bc:	f000 b82e 	b.w	800811c <_ZdlPv>

080080c0 <__cxa_guard_acquire>:
 80080c0:	6802      	ldr	r2, [r0, #0]
 80080c2:	4603      	mov	r3, r0
 80080c4:	07d2      	lsls	r2, r2, #31
 80080c6:	d405      	bmi.n	80080d4 <__cxa_guard_acquire+0x14>
 80080c8:	7842      	ldrb	r2, [r0, #1]
 80080ca:	b102      	cbz	r2, 80080ce <__cxa_guard_acquire+0xe>
 80080cc:	deff      	udf	#255	@ 0xff
 80080ce:	2001      	movs	r0, #1
 80080d0:	7058      	strb	r0, [r3, #1]
 80080d2:	4770      	bx	lr
 80080d4:	2000      	movs	r0, #0
 80080d6:	4770      	bx	lr

080080d8 <__cxa_guard_release>:
 80080d8:	2301      	movs	r3, #1
 80080da:	6003      	str	r3, [r0, #0]
 80080dc:	4770      	bx	lr

080080de <_Znwj>:
 80080de:	2801      	cmp	r0, #1
 80080e0:	bf38      	it	cc
 80080e2:	2001      	movcc	r0, #1
 80080e4:	b510      	push	{r4, lr}
 80080e6:	4604      	mov	r4, r0
 80080e8:	4620      	mov	r0, r4
 80080ea:	f000 f9c7 	bl	800847c <malloc>
 80080ee:	b100      	cbz	r0, 80080f2 <_Znwj+0x14>
 80080f0:	bd10      	pop	{r4, pc}
 80080f2:	f000 f815 	bl	8008120 <_ZSt15get_new_handlerv>
 80080f6:	b908      	cbnz	r0, 80080fc <_Znwj+0x1e>
 80080f8:	f000 f97e 	bl	80083f8 <abort>
 80080fc:	4780      	blx	r0
 80080fe:	e7f3      	b.n	80080e8 <_Znwj+0xa>

08008100 <_Znaj>:
 8008100:	f7ff bfed 	b.w	80080de <_Znwj>

08008104 <_ZSt17__throw_bad_allocv>:
 8008104:	b508      	push	{r3, lr}
 8008106:	f000 f977 	bl	80083f8 <abort>

0800810a <_ZSt28__throw_bad_array_new_lengthv>:
 800810a:	b508      	push	{r3, lr}
 800810c:	f000 f974 	bl	80083f8 <abort>

08008110 <_ZSt20__throw_length_errorPKc>:
 8008110:	b508      	push	{r3, lr}
 8008112:	f000 f971 	bl	80083f8 <abort>

08008116 <_ZSt25__throw_bad_function_callv>:
 8008116:	b508      	push	{r3, lr}
 8008118:	f000 f96e 	bl	80083f8 <abort>

0800811c <_ZdlPv>:
 800811c:	f000 b9b6 	b.w	800848c <free>

08008120 <_ZSt15get_new_handlerv>:
 8008120:	4b02      	ldr	r3, [pc, #8]	@ (800812c <_ZSt15get_new_handlerv+0xc>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	f3bf 8f5b 	dmb	ish
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000368 	.word	0x20000368

08008130 <log2f>:
 8008130:	b508      	push	{r3, lr}
 8008132:	f000 f807 	bl	8008144 <logf>
 8008136:	4902      	ldr	r1, [pc, #8]	@ (8008140 <log2f+0x10>)
 8008138:	f7f8 fe68 	bl	8000e0c <__aeabi_fdiv>
 800813c:	bd08      	pop	{r3, pc}
 800813e:	bf00      	nop
 8008140:	3f317218 	.word	0x3f317218

08008144 <logf>:
 8008144:	b538      	push	{r3, r4, r5, lr}
 8008146:	4604      	mov	r4, r0
 8008148:	f000 f828 	bl	800819c <__ieee754_logf>
 800814c:	4621      	mov	r1, r4
 800814e:	4605      	mov	r5, r0
 8008150:	4620      	mov	r0, r4
 8008152:	f7f8 ff6d 	bl	8001030 <__aeabi_fcmpun>
 8008156:	b970      	cbnz	r0, 8008176 <logf+0x32>
 8008158:	2100      	movs	r1, #0
 800815a:	4620      	mov	r0, r4
 800815c:	f7f8 ff5e 	bl	800101c <__aeabi_fcmpgt>
 8008160:	b948      	cbnz	r0, 8008176 <logf+0x32>
 8008162:	2100      	movs	r1, #0
 8008164:	4620      	mov	r0, r4
 8008166:	f7f8 ff31 	bl	8000fcc <__aeabi_fcmpeq>
 800816a:	b130      	cbz	r0, 800817a <logf+0x36>
 800816c:	f001 faf4 	bl	8009758 <__errno>
 8008170:	2322      	movs	r3, #34	@ 0x22
 8008172:	4d06      	ldr	r5, [pc, #24]	@ (800818c <logf+0x48>)
 8008174:	6003      	str	r3, [r0, #0]
 8008176:	4628      	mov	r0, r5
 8008178:	bd38      	pop	{r3, r4, r5, pc}
 800817a:	f001 faed 	bl	8009758 <__errno>
 800817e:	2321      	movs	r3, #33	@ 0x21
 8008180:	6003      	str	r3, [r0, #0]
 8008182:	4803      	ldr	r0, [pc, #12]	@ (8008190 <logf+0x4c>)
 8008184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008188:	f000 b804 	b.w	8008194 <nanf>
 800818c:	ff800000 	.word	0xff800000
 8008190:	0800b013 	.word	0x0800b013

08008194 <nanf>:
 8008194:	4800      	ldr	r0, [pc, #0]	@ (8008198 <nanf+0x4>)
 8008196:	4770      	bx	lr
 8008198:	7fc00000 	.word	0x7fc00000

0800819c <__ieee754_logf>:
 800819c:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80081a0:	4601      	mov	r1, r0
 80081a2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a6:	d106      	bne.n	80081b6 <__ieee754_logf+0x1a>
 80081a8:	2100      	movs	r1, #0
 80081aa:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 80081ae:	f7f8 fe2d 	bl	8000e0c <__aeabi_fdiv>
 80081b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081b6:	2800      	cmp	r0, #0
 80081b8:	4604      	mov	r4, r0
 80081ba:	da03      	bge.n	80081c4 <__ieee754_logf+0x28>
 80081bc:	f7f8 fc68 	bl	8000a90 <__aeabi_fsub>
 80081c0:	2100      	movs	r1, #0
 80081c2:	e7f4      	b.n	80081ae <__ieee754_logf+0x12>
 80081c4:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 80081c8:	db02      	blt.n	80081d0 <__ieee754_logf+0x34>
 80081ca:	f7f8 fc63 	bl	8000a94 <__addsf3>
 80081ce:	e7f0      	b.n	80081b2 <__ieee754_logf+0x16>
 80081d0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80081d4:	da35      	bge.n	8008242 <__ieee754_logf+0xa6>
 80081d6:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 80081da:	f7f8 fd63 	bl	8000ca4 <__aeabi_fmul>
 80081de:	f06f 0318 	mvn.w	r3, #24
 80081e2:	4604      	mov	r4, r0
 80081e4:	15e7      	asrs	r7, r4, #23
 80081e6:	3f7f      	subs	r7, #127	@ 0x7f
 80081e8:	441f      	add	r7, r3
 80081ea:	4b76      	ldr	r3, [pc, #472]	@ (80083c4 <__ieee754_logf+0x228>)
 80081ec:	f3c4 0416 	ubfx	r4, r4, #0, #23
 80081f0:	4423      	add	r3, r4
 80081f2:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 80081f6:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 80081fa:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 80081fe:	4320      	orrs	r0, r4
 8008200:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 8008204:	f7f8 fc44 	bl	8000a90 <__aeabi_fsub>
 8008208:	4b6f      	ldr	r3, [pc, #444]	@ (80083c8 <__ieee754_logf+0x22c>)
 800820a:	f104 020f 	add.w	r2, r4, #15
 800820e:	4013      	ands	r3, r2
 8008210:	4606      	mov	r6, r0
 8008212:	2b00      	cmp	r3, #0
 8008214:	d143      	bne.n	800829e <__ieee754_logf+0x102>
 8008216:	2100      	movs	r1, #0
 8008218:	f7f8 fed8 	bl	8000fcc <__aeabi_fcmpeq>
 800821c:	b198      	cbz	r0, 8008246 <__ieee754_logf+0xaa>
 800821e:	2f00      	cmp	r7, #0
 8008220:	f000 80cd 	beq.w	80083be <__ieee754_logf+0x222>
 8008224:	4638      	mov	r0, r7
 8008226:	f7f8 fce9 	bl	8000bfc <__aeabi_i2f>
 800822a:	4968      	ldr	r1, [pc, #416]	@ (80083cc <__ieee754_logf+0x230>)
 800822c:	4605      	mov	r5, r0
 800822e:	f7f8 fd39 	bl	8000ca4 <__aeabi_fmul>
 8008232:	4967      	ldr	r1, [pc, #412]	@ (80083d0 <__ieee754_logf+0x234>)
 8008234:	4604      	mov	r4, r0
 8008236:	4628      	mov	r0, r5
 8008238:	f7f8 fd34 	bl	8000ca4 <__aeabi_fmul>
 800823c:	4601      	mov	r1, r0
 800823e:	4620      	mov	r0, r4
 8008240:	e7c3      	b.n	80081ca <__ieee754_logf+0x2e>
 8008242:	2300      	movs	r3, #0
 8008244:	e7ce      	b.n	80081e4 <__ieee754_logf+0x48>
 8008246:	4963      	ldr	r1, [pc, #396]	@ (80083d4 <__ieee754_logf+0x238>)
 8008248:	4630      	mov	r0, r6
 800824a:	f7f8 fd2b 	bl	8000ca4 <__aeabi_fmul>
 800824e:	4601      	mov	r1, r0
 8008250:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8008254:	f7f8 fc1c 	bl	8000a90 <__aeabi_fsub>
 8008258:	4631      	mov	r1, r6
 800825a:	4604      	mov	r4, r0
 800825c:	4630      	mov	r0, r6
 800825e:	f7f8 fd21 	bl	8000ca4 <__aeabi_fmul>
 8008262:	4601      	mov	r1, r0
 8008264:	4620      	mov	r0, r4
 8008266:	f7f8 fd1d 	bl	8000ca4 <__aeabi_fmul>
 800826a:	4604      	mov	r4, r0
 800826c:	b90f      	cbnz	r7, 8008272 <__ieee754_logf+0xd6>
 800826e:	4621      	mov	r1, r4
 8008270:	e078      	b.n	8008364 <__ieee754_logf+0x1c8>
 8008272:	4638      	mov	r0, r7
 8008274:	f7f8 fcc2 	bl	8000bfc <__aeabi_i2f>
 8008278:	4954      	ldr	r1, [pc, #336]	@ (80083cc <__ieee754_logf+0x230>)
 800827a:	4607      	mov	r7, r0
 800827c:	f7f8 fd12 	bl	8000ca4 <__aeabi_fmul>
 8008280:	4605      	mov	r5, r0
 8008282:	4638      	mov	r0, r7
 8008284:	4952      	ldr	r1, [pc, #328]	@ (80083d0 <__ieee754_logf+0x234>)
 8008286:	f7f8 fd0d 	bl	8000ca4 <__aeabi_fmul>
 800828a:	4601      	mov	r1, r0
 800828c:	4620      	mov	r0, r4
 800828e:	f7f8 fbff 	bl	8000a90 <__aeabi_fsub>
 8008292:	4631      	mov	r1, r6
 8008294:	f7f8 fbfc 	bl	8000a90 <__aeabi_fsub>
 8008298:	4601      	mov	r1, r0
 800829a:	4628      	mov	r0, r5
 800829c:	e079      	b.n	8008392 <__ieee754_logf+0x1f6>
 800829e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80082a2:	f7f8 fbf7 	bl	8000a94 <__addsf3>
 80082a6:	4601      	mov	r1, r0
 80082a8:	4630      	mov	r0, r6
 80082aa:	f7f8 fdaf 	bl	8000e0c <__aeabi_fdiv>
 80082ae:	4681      	mov	r9, r0
 80082b0:	4638      	mov	r0, r7
 80082b2:	f7f8 fca3 	bl	8000bfc <__aeabi_i2f>
 80082b6:	4649      	mov	r1, r9
 80082b8:	4680      	mov	r8, r0
 80082ba:	4648      	mov	r0, r9
 80082bc:	f7f8 fcf2 	bl	8000ca4 <__aeabi_fmul>
 80082c0:	4601      	mov	r1, r0
 80082c2:	4682      	mov	sl, r0
 80082c4:	f7f8 fcee 	bl	8000ca4 <__aeabi_fmul>
 80082c8:	4605      	mov	r5, r0
 80082ca:	4943      	ldr	r1, [pc, #268]	@ (80083d8 <__ieee754_logf+0x23c>)
 80082cc:	f7f8 fcea 	bl	8000ca4 <__aeabi_fmul>
 80082d0:	4942      	ldr	r1, [pc, #264]	@ (80083dc <__ieee754_logf+0x240>)
 80082d2:	f7f8 fbdf 	bl	8000a94 <__addsf3>
 80082d6:	4629      	mov	r1, r5
 80082d8:	f7f8 fce4 	bl	8000ca4 <__aeabi_fmul>
 80082dc:	4940      	ldr	r1, [pc, #256]	@ (80083e0 <__ieee754_logf+0x244>)
 80082de:	f7f8 fbd9 	bl	8000a94 <__addsf3>
 80082e2:	4629      	mov	r1, r5
 80082e4:	f7f8 fcde 	bl	8000ca4 <__aeabi_fmul>
 80082e8:	493e      	ldr	r1, [pc, #248]	@ (80083e4 <__ieee754_logf+0x248>)
 80082ea:	f7f8 fbd3 	bl	8000a94 <__addsf3>
 80082ee:	4651      	mov	r1, sl
 80082f0:	f7f8 fcd8 	bl	8000ca4 <__aeabi_fmul>
 80082f4:	493c      	ldr	r1, [pc, #240]	@ (80083e8 <__ieee754_logf+0x24c>)
 80082f6:	4682      	mov	sl, r0
 80082f8:	4628      	mov	r0, r5
 80082fa:	f7f8 fcd3 	bl	8000ca4 <__aeabi_fmul>
 80082fe:	493b      	ldr	r1, [pc, #236]	@ (80083ec <__ieee754_logf+0x250>)
 8008300:	f7f8 fbc8 	bl	8000a94 <__addsf3>
 8008304:	4629      	mov	r1, r5
 8008306:	f7f8 fccd 	bl	8000ca4 <__aeabi_fmul>
 800830a:	4939      	ldr	r1, [pc, #228]	@ (80083f0 <__ieee754_logf+0x254>)
 800830c:	f7f8 fbc2 	bl	8000a94 <__addsf3>
 8008310:	4629      	mov	r1, r5
 8008312:	f7f8 fcc7 	bl	8000ca4 <__aeabi_fmul>
 8008316:	4601      	mov	r1, r0
 8008318:	4650      	mov	r0, sl
 800831a:	f7f8 fbbb 	bl	8000a94 <__addsf3>
 800831e:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 80083f4 <__ieee754_logf+0x258>
 8008322:	4605      	mov	r5, r0
 8008324:	44a3      	add	fp, r4
 8008326:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 800832a:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 800832e:	ea44 040b 	orr.w	r4, r4, fp
 8008332:	2c00      	cmp	r4, #0
 8008334:	dd30      	ble.n	8008398 <__ieee754_logf+0x1fc>
 8008336:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800833a:	4630      	mov	r0, r6
 800833c:	f7f8 fcb2 	bl	8000ca4 <__aeabi_fmul>
 8008340:	4631      	mov	r1, r6
 8008342:	f7f8 fcaf 	bl	8000ca4 <__aeabi_fmul>
 8008346:	4601      	mov	r1, r0
 8008348:	4604      	mov	r4, r0
 800834a:	4628      	mov	r0, r5
 800834c:	f7f8 fba2 	bl	8000a94 <__addsf3>
 8008350:	4649      	mov	r1, r9
 8008352:	f7f8 fca7 	bl	8000ca4 <__aeabi_fmul>
 8008356:	4605      	mov	r5, r0
 8008358:	b937      	cbnz	r7, 8008368 <__ieee754_logf+0x1cc>
 800835a:	4601      	mov	r1, r0
 800835c:	4620      	mov	r0, r4
 800835e:	f7f8 fb97 	bl	8000a90 <__aeabi_fsub>
 8008362:	4601      	mov	r1, r0
 8008364:	4630      	mov	r0, r6
 8008366:	e014      	b.n	8008392 <__ieee754_logf+0x1f6>
 8008368:	4918      	ldr	r1, [pc, #96]	@ (80083cc <__ieee754_logf+0x230>)
 800836a:	4640      	mov	r0, r8
 800836c:	f7f8 fc9a 	bl	8000ca4 <__aeabi_fmul>
 8008370:	4917      	ldr	r1, [pc, #92]	@ (80083d0 <__ieee754_logf+0x234>)
 8008372:	4607      	mov	r7, r0
 8008374:	4640      	mov	r0, r8
 8008376:	f7f8 fc95 	bl	8000ca4 <__aeabi_fmul>
 800837a:	4629      	mov	r1, r5
 800837c:	f7f8 fb8a 	bl	8000a94 <__addsf3>
 8008380:	4601      	mov	r1, r0
 8008382:	4620      	mov	r0, r4
 8008384:	f7f8 fb84 	bl	8000a90 <__aeabi_fsub>
 8008388:	4631      	mov	r1, r6
 800838a:	f7f8 fb81 	bl	8000a90 <__aeabi_fsub>
 800838e:	4601      	mov	r1, r0
 8008390:	4638      	mov	r0, r7
 8008392:	f7f8 fb7d 	bl	8000a90 <__aeabi_fsub>
 8008396:	e70c      	b.n	80081b2 <__ieee754_logf+0x16>
 8008398:	4601      	mov	r1, r0
 800839a:	4630      	mov	r0, r6
 800839c:	f7f8 fb78 	bl	8000a90 <__aeabi_fsub>
 80083a0:	4649      	mov	r1, r9
 80083a2:	f7f8 fc7f 	bl	8000ca4 <__aeabi_fmul>
 80083a6:	4604      	mov	r4, r0
 80083a8:	2f00      	cmp	r7, #0
 80083aa:	f43f af60 	beq.w	800826e <__ieee754_logf+0xd2>
 80083ae:	4907      	ldr	r1, [pc, #28]	@ (80083cc <__ieee754_logf+0x230>)
 80083b0:	4640      	mov	r0, r8
 80083b2:	f7f8 fc77 	bl	8000ca4 <__aeabi_fmul>
 80083b6:	4906      	ldr	r1, [pc, #24]	@ (80083d0 <__ieee754_logf+0x234>)
 80083b8:	4605      	mov	r5, r0
 80083ba:	4640      	mov	r0, r8
 80083bc:	e763      	b.n	8008286 <__ieee754_logf+0xea>
 80083be:	2000      	movs	r0, #0
 80083c0:	e6f7      	b.n	80081b2 <__ieee754_logf+0x16>
 80083c2:	bf00      	nop
 80083c4:	004afb20 	.word	0x004afb20
 80083c8:	007ffff0 	.word	0x007ffff0
 80083cc:	3f317180 	.word	0x3f317180
 80083d0:	3717f7d1 	.word	0x3717f7d1
 80083d4:	3eaaaaab 	.word	0x3eaaaaab
 80083d8:	3e178897 	.word	0x3e178897
 80083dc:	3e3a3325 	.word	0x3e3a3325
 80083e0:	3e924925 	.word	0x3e924925
 80083e4:	3f2aaaab 	.word	0x3f2aaaab
 80083e8:	3e1cd04f 	.word	0x3e1cd04f
 80083ec:	3e638e29 	.word	0x3e638e29
 80083f0:	3ecccccd 	.word	0x3ecccccd
 80083f4:	ffcf5c30 	.word	0xffcf5c30

080083f8 <abort>:
 80083f8:	2006      	movs	r0, #6
 80083fa:	b508      	push	{r3, lr}
 80083fc:	f001 f936 	bl	800966c <raise>
 8008400:	2001      	movs	r0, #1
 8008402:	f7f9 f98a 	bl	800171a <_exit>
	...

08008408 <__assert_func>:
 8008408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800840a:	4614      	mov	r4, r2
 800840c:	461a      	mov	r2, r3
 800840e:	4b09      	ldr	r3, [pc, #36]	@ (8008434 <__assert_func+0x2c>)
 8008410:	4605      	mov	r5, r0
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68d8      	ldr	r0, [r3, #12]
 8008416:	b954      	cbnz	r4, 800842e <__assert_func+0x26>
 8008418:	4b07      	ldr	r3, [pc, #28]	@ (8008438 <__assert_func+0x30>)
 800841a:	461c      	mov	r4, r3
 800841c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008420:	9100      	str	r1, [sp, #0]
 8008422:	462b      	mov	r3, r5
 8008424:	4905      	ldr	r1, [pc, #20]	@ (800843c <__assert_func+0x34>)
 8008426:	f000 ffcf 	bl	80093c8 <fiprintf>
 800842a:	f7ff ffe5 	bl	80083f8 <abort>
 800842e:	4b04      	ldr	r3, [pc, #16]	@ (8008440 <__assert_func+0x38>)
 8008430:	e7f4      	b.n	800841c <__assert_func+0x14>
 8008432:	bf00      	nop
 8008434:	20000018 	.word	0x20000018
 8008438:	0800b013 	.word	0x0800b013
 800843c:	0800afe5 	.word	0x0800afe5
 8008440:	0800afd8 	.word	0x0800afd8

08008444 <calloc>:
 8008444:	4b02      	ldr	r3, [pc, #8]	@ (8008450 <calloc+0xc>)
 8008446:	460a      	mov	r2, r1
 8008448:	4601      	mov	r1, r0
 800844a:	6818      	ldr	r0, [r3, #0]
 800844c:	f000 b802 	b.w	8008454 <_calloc_r>
 8008450:	20000018 	.word	0x20000018

08008454 <_calloc_r>:
 8008454:	b570      	push	{r4, r5, r6, lr}
 8008456:	fba1 5402 	umull	r5, r4, r1, r2
 800845a:	b93c      	cbnz	r4, 800846c <_calloc_r+0x18>
 800845c:	4629      	mov	r1, r5
 800845e:	f000 f83f 	bl	80084e0 <_malloc_r>
 8008462:	4606      	mov	r6, r0
 8008464:	b928      	cbnz	r0, 8008472 <_calloc_r+0x1e>
 8008466:	2600      	movs	r6, #0
 8008468:	4630      	mov	r0, r6
 800846a:	bd70      	pop	{r4, r5, r6, pc}
 800846c:	220c      	movs	r2, #12
 800846e:	6002      	str	r2, [r0, #0]
 8008470:	e7f9      	b.n	8008466 <_calloc_r+0x12>
 8008472:	462a      	mov	r2, r5
 8008474:	4621      	mov	r1, r4
 8008476:	f001 f8c9 	bl	800960c <memset>
 800847a:	e7f5      	b.n	8008468 <_calloc_r+0x14>

0800847c <malloc>:
 800847c:	4b02      	ldr	r3, [pc, #8]	@ (8008488 <malloc+0xc>)
 800847e:	4601      	mov	r1, r0
 8008480:	6818      	ldr	r0, [r3, #0]
 8008482:	f000 b82d 	b.w	80084e0 <_malloc_r>
 8008486:	bf00      	nop
 8008488:	20000018 	.word	0x20000018

0800848c <free>:
 800848c:	4b02      	ldr	r3, [pc, #8]	@ (8008498 <free+0xc>)
 800848e:	4601      	mov	r1, r0
 8008490:	6818      	ldr	r0, [r3, #0]
 8008492:	f001 bffd 	b.w	800a490 <_free_r>
 8008496:	bf00      	nop
 8008498:	20000018 	.word	0x20000018

0800849c <sbrk_aligned>:
 800849c:	b570      	push	{r4, r5, r6, lr}
 800849e:	4e0f      	ldr	r6, [pc, #60]	@ (80084dc <sbrk_aligned+0x40>)
 80084a0:	460c      	mov	r4, r1
 80084a2:	6831      	ldr	r1, [r6, #0]
 80084a4:	4605      	mov	r5, r0
 80084a6:	b911      	cbnz	r1, 80084ae <sbrk_aligned+0x12>
 80084a8:	f001 f934 	bl	8009714 <_sbrk_r>
 80084ac:	6030      	str	r0, [r6, #0]
 80084ae:	4621      	mov	r1, r4
 80084b0:	4628      	mov	r0, r5
 80084b2:	f001 f92f 	bl	8009714 <_sbrk_r>
 80084b6:	1c43      	adds	r3, r0, #1
 80084b8:	d103      	bne.n	80084c2 <sbrk_aligned+0x26>
 80084ba:	f04f 34ff 	mov.w	r4, #4294967295
 80084be:	4620      	mov	r0, r4
 80084c0:	bd70      	pop	{r4, r5, r6, pc}
 80084c2:	1cc4      	adds	r4, r0, #3
 80084c4:	f024 0403 	bic.w	r4, r4, #3
 80084c8:	42a0      	cmp	r0, r4
 80084ca:	d0f8      	beq.n	80084be <sbrk_aligned+0x22>
 80084cc:	1a21      	subs	r1, r4, r0
 80084ce:	4628      	mov	r0, r5
 80084d0:	f001 f920 	bl	8009714 <_sbrk_r>
 80084d4:	3001      	adds	r0, #1
 80084d6:	d1f2      	bne.n	80084be <sbrk_aligned+0x22>
 80084d8:	e7ef      	b.n	80084ba <sbrk_aligned+0x1e>
 80084da:	bf00      	nop
 80084dc:	2000036c 	.word	0x2000036c

080084e0 <_malloc_r>:
 80084e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e4:	1ccd      	adds	r5, r1, #3
 80084e6:	f025 0503 	bic.w	r5, r5, #3
 80084ea:	3508      	adds	r5, #8
 80084ec:	2d0c      	cmp	r5, #12
 80084ee:	bf38      	it	cc
 80084f0:	250c      	movcc	r5, #12
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	4606      	mov	r6, r0
 80084f6:	db01      	blt.n	80084fc <_malloc_r+0x1c>
 80084f8:	42a9      	cmp	r1, r5
 80084fa:	d904      	bls.n	8008506 <_malloc_r+0x26>
 80084fc:	230c      	movs	r3, #12
 80084fe:	6033      	str	r3, [r6, #0]
 8008500:	2000      	movs	r0, #0
 8008502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008506:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085dc <_malloc_r+0xfc>
 800850a:	f000 f869 	bl	80085e0 <__malloc_lock>
 800850e:	f8d8 3000 	ldr.w	r3, [r8]
 8008512:	461c      	mov	r4, r3
 8008514:	bb44      	cbnz	r4, 8008568 <_malloc_r+0x88>
 8008516:	4629      	mov	r1, r5
 8008518:	4630      	mov	r0, r6
 800851a:	f7ff ffbf 	bl	800849c <sbrk_aligned>
 800851e:	1c43      	adds	r3, r0, #1
 8008520:	4604      	mov	r4, r0
 8008522:	d158      	bne.n	80085d6 <_malloc_r+0xf6>
 8008524:	f8d8 4000 	ldr.w	r4, [r8]
 8008528:	4627      	mov	r7, r4
 800852a:	2f00      	cmp	r7, #0
 800852c:	d143      	bne.n	80085b6 <_malloc_r+0xd6>
 800852e:	2c00      	cmp	r4, #0
 8008530:	d04b      	beq.n	80085ca <_malloc_r+0xea>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	4639      	mov	r1, r7
 8008536:	4630      	mov	r0, r6
 8008538:	eb04 0903 	add.w	r9, r4, r3
 800853c:	f001 f8ea 	bl	8009714 <_sbrk_r>
 8008540:	4581      	cmp	r9, r0
 8008542:	d142      	bne.n	80085ca <_malloc_r+0xea>
 8008544:	6821      	ldr	r1, [r4, #0]
 8008546:	4630      	mov	r0, r6
 8008548:	1a6d      	subs	r5, r5, r1
 800854a:	4629      	mov	r1, r5
 800854c:	f7ff ffa6 	bl	800849c <sbrk_aligned>
 8008550:	3001      	adds	r0, #1
 8008552:	d03a      	beq.n	80085ca <_malloc_r+0xea>
 8008554:	6823      	ldr	r3, [r4, #0]
 8008556:	442b      	add	r3, r5
 8008558:	6023      	str	r3, [r4, #0]
 800855a:	f8d8 3000 	ldr.w	r3, [r8]
 800855e:	685a      	ldr	r2, [r3, #4]
 8008560:	bb62      	cbnz	r2, 80085bc <_malloc_r+0xdc>
 8008562:	f8c8 7000 	str.w	r7, [r8]
 8008566:	e00f      	b.n	8008588 <_malloc_r+0xa8>
 8008568:	6822      	ldr	r2, [r4, #0]
 800856a:	1b52      	subs	r2, r2, r5
 800856c:	d420      	bmi.n	80085b0 <_malloc_r+0xd0>
 800856e:	2a0b      	cmp	r2, #11
 8008570:	d917      	bls.n	80085a2 <_malloc_r+0xc2>
 8008572:	1961      	adds	r1, r4, r5
 8008574:	42a3      	cmp	r3, r4
 8008576:	6025      	str	r5, [r4, #0]
 8008578:	bf18      	it	ne
 800857a:	6059      	strne	r1, [r3, #4]
 800857c:	6863      	ldr	r3, [r4, #4]
 800857e:	bf08      	it	eq
 8008580:	f8c8 1000 	streq.w	r1, [r8]
 8008584:	5162      	str	r2, [r4, r5]
 8008586:	604b      	str	r3, [r1, #4]
 8008588:	4630      	mov	r0, r6
 800858a:	f000 f82f 	bl	80085ec <__malloc_unlock>
 800858e:	f104 000b 	add.w	r0, r4, #11
 8008592:	1d23      	adds	r3, r4, #4
 8008594:	f020 0007 	bic.w	r0, r0, #7
 8008598:	1ac2      	subs	r2, r0, r3
 800859a:	bf1c      	itt	ne
 800859c:	1a1b      	subne	r3, r3, r0
 800859e:	50a3      	strne	r3, [r4, r2]
 80085a0:	e7af      	b.n	8008502 <_malloc_r+0x22>
 80085a2:	6862      	ldr	r2, [r4, #4]
 80085a4:	42a3      	cmp	r3, r4
 80085a6:	bf0c      	ite	eq
 80085a8:	f8c8 2000 	streq.w	r2, [r8]
 80085ac:	605a      	strne	r2, [r3, #4]
 80085ae:	e7eb      	b.n	8008588 <_malloc_r+0xa8>
 80085b0:	4623      	mov	r3, r4
 80085b2:	6864      	ldr	r4, [r4, #4]
 80085b4:	e7ae      	b.n	8008514 <_malloc_r+0x34>
 80085b6:	463c      	mov	r4, r7
 80085b8:	687f      	ldr	r7, [r7, #4]
 80085ba:	e7b6      	b.n	800852a <_malloc_r+0x4a>
 80085bc:	461a      	mov	r2, r3
 80085be:	685b      	ldr	r3, [r3, #4]
 80085c0:	42a3      	cmp	r3, r4
 80085c2:	d1fb      	bne.n	80085bc <_malloc_r+0xdc>
 80085c4:	2300      	movs	r3, #0
 80085c6:	6053      	str	r3, [r2, #4]
 80085c8:	e7de      	b.n	8008588 <_malloc_r+0xa8>
 80085ca:	230c      	movs	r3, #12
 80085cc:	4630      	mov	r0, r6
 80085ce:	6033      	str	r3, [r6, #0]
 80085d0:	f000 f80c 	bl	80085ec <__malloc_unlock>
 80085d4:	e794      	b.n	8008500 <_malloc_r+0x20>
 80085d6:	6005      	str	r5, [r0, #0]
 80085d8:	e7d6      	b.n	8008588 <_malloc_r+0xa8>
 80085da:	bf00      	nop
 80085dc:	20000370 	.word	0x20000370

080085e0 <__malloc_lock>:
 80085e0:	4801      	ldr	r0, [pc, #4]	@ (80085e8 <__malloc_lock+0x8>)
 80085e2:	f001 b8e4 	b.w	80097ae <__retarget_lock_acquire_recursive>
 80085e6:	bf00      	nop
 80085e8:	200004b4 	.word	0x200004b4

080085ec <__malloc_unlock>:
 80085ec:	4801      	ldr	r0, [pc, #4]	@ (80085f4 <__malloc_unlock+0x8>)
 80085ee:	f001 b8df 	b.w	80097b0 <__retarget_lock_release_recursive>
 80085f2:	bf00      	nop
 80085f4:	200004b4 	.word	0x200004b4

080085f8 <__cvt>:
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085fe:	461d      	mov	r5, r3
 8008600:	bfbb      	ittet	lt
 8008602:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8008606:	461d      	movlt	r5, r3
 8008608:	2300      	movge	r3, #0
 800860a:	232d      	movlt	r3, #45	@ 0x2d
 800860c:	b088      	sub	sp, #32
 800860e:	4614      	mov	r4, r2
 8008610:	bfb8      	it	lt
 8008612:	4614      	movlt	r4, r2
 8008614:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008616:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8008618:	7013      	strb	r3, [r2, #0]
 800861a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800861c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8008620:	f023 0820 	bic.w	r8, r3, #32
 8008624:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008628:	d005      	beq.n	8008636 <__cvt+0x3e>
 800862a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800862e:	d100      	bne.n	8008632 <__cvt+0x3a>
 8008630:	3601      	adds	r6, #1
 8008632:	2302      	movs	r3, #2
 8008634:	e000      	b.n	8008638 <__cvt+0x40>
 8008636:	2303      	movs	r3, #3
 8008638:	aa07      	add	r2, sp, #28
 800863a:	9204      	str	r2, [sp, #16]
 800863c:	aa06      	add	r2, sp, #24
 800863e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8008642:	e9cd 3600 	strd	r3, r6, [sp]
 8008646:	4622      	mov	r2, r4
 8008648:	462b      	mov	r3, r5
 800864a:	f001 f959 	bl	8009900 <_dtoa_r>
 800864e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008652:	4607      	mov	r7, r0
 8008654:	d119      	bne.n	800868a <__cvt+0x92>
 8008656:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008658:	07db      	lsls	r3, r3, #31
 800865a:	d50e      	bpl.n	800867a <__cvt+0x82>
 800865c:	eb00 0906 	add.w	r9, r0, r6
 8008660:	2200      	movs	r2, #0
 8008662:	2300      	movs	r3, #0
 8008664:	4620      	mov	r0, r4
 8008666:	4629      	mov	r1, r5
 8008668:	f7f8 f99e 	bl	80009a8 <__aeabi_dcmpeq>
 800866c:	b108      	cbz	r0, 8008672 <__cvt+0x7a>
 800866e:	f8cd 901c 	str.w	r9, [sp, #28]
 8008672:	2230      	movs	r2, #48	@ 0x30
 8008674:	9b07      	ldr	r3, [sp, #28]
 8008676:	454b      	cmp	r3, r9
 8008678:	d31e      	bcc.n	80086b8 <__cvt+0xc0>
 800867a:	4638      	mov	r0, r7
 800867c:	9b07      	ldr	r3, [sp, #28]
 800867e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8008680:	1bdb      	subs	r3, r3, r7
 8008682:	6013      	str	r3, [r2, #0]
 8008684:	b008      	add	sp, #32
 8008686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800868a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800868e:	eb00 0906 	add.w	r9, r0, r6
 8008692:	d1e5      	bne.n	8008660 <__cvt+0x68>
 8008694:	7803      	ldrb	r3, [r0, #0]
 8008696:	2b30      	cmp	r3, #48	@ 0x30
 8008698:	d10a      	bne.n	80086b0 <__cvt+0xb8>
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	4620      	mov	r0, r4
 80086a0:	4629      	mov	r1, r5
 80086a2:	f7f8 f981 	bl	80009a8 <__aeabi_dcmpeq>
 80086a6:	b918      	cbnz	r0, 80086b0 <__cvt+0xb8>
 80086a8:	f1c6 0601 	rsb	r6, r6, #1
 80086ac:	f8ca 6000 	str.w	r6, [sl]
 80086b0:	f8da 3000 	ldr.w	r3, [sl]
 80086b4:	4499      	add	r9, r3
 80086b6:	e7d3      	b.n	8008660 <__cvt+0x68>
 80086b8:	1c59      	adds	r1, r3, #1
 80086ba:	9107      	str	r1, [sp, #28]
 80086bc:	701a      	strb	r2, [r3, #0]
 80086be:	e7d9      	b.n	8008674 <__cvt+0x7c>

080086c0 <__exponent>:
 80086c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80086c2:	2900      	cmp	r1, #0
 80086c4:	bfb6      	itet	lt
 80086c6:	232d      	movlt	r3, #45	@ 0x2d
 80086c8:	232b      	movge	r3, #43	@ 0x2b
 80086ca:	4249      	neglt	r1, r1
 80086cc:	2909      	cmp	r1, #9
 80086ce:	7002      	strb	r2, [r0, #0]
 80086d0:	7043      	strb	r3, [r0, #1]
 80086d2:	dd29      	ble.n	8008728 <__exponent+0x68>
 80086d4:	f10d 0307 	add.w	r3, sp, #7
 80086d8:	461d      	mov	r5, r3
 80086da:	270a      	movs	r7, #10
 80086dc:	fbb1 f6f7 	udiv	r6, r1, r7
 80086e0:	461a      	mov	r2, r3
 80086e2:	fb07 1416 	mls	r4, r7, r6, r1
 80086e6:	3430      	adds	r4, #48	@ 0x30
 80086e8:	f802 4c01 	strb.w	r4, [r2, #-1]
 80086ec:	460c      	mov	r4, r1
 80086ee:	2c63      	cmp	r4, #99	@ 0x63
 80086f0:	4631      	mov	r1, r6
 80086f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80086f6:	dcf1      	bgt.n	80086dc <__exponent+0x1c>
 80086f8:	3130      	adds	r1, #48	@ 0x30
 80086fa:	1e94      	subs	r4, r2, #2
 80086fc:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008700:	4623      	mov	r3, r4
 8008702:	1c41      	adds	r1, r0, #1
 8008704:	42ab      	cmp	r3, r5
 8008706:	d30a      	bcc.n	800871e <__exponent+0x5e>
 8008708:	f10d 0309 	add.w	r3, sp, #9
 800870c:	1a9b      	subs	r3, r3, r2
 800870e:	42ac      	cmp	r4, r5
 8008710:	bf88      	it	hi
 8008712:	2300      	movhi	r3, #0
 8008714:	3302      	adds	r3, #2
 8008716:	4403      	add	r3, r0
 8008718:	1a18      	subs	r0, r3, r0
 800871a:	b003      	add	sp, #12
 800871c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800871e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008722:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008726:	e7ed      	b.n	8008704 <__exponent+0x44>
 8008728:	2330      	movs	r3, #48	@ 0x30
 800872a:	3130      	adds	r1, #48	@ 0x30
 800872c:	7083      	strb	r3, [r0, #2]
 800872e:	70c1      	strb	r1, [r0, #3]
 8008730:	1d03      	adds	r3, r0, #4
 8008732:	e7f1      	b.n	8008718 <__exponent+0x58>

08008734 <_printf_float>:
 8008734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008738:	b091      	sub	sp, #68	@ 0x44
 800873a:	460c      	mov	r4, r1
 800873c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8008740:	4616      	mov	r6, r2
 8008742:	461f      	mov	r7, r3
 8008744:	4605      	mov	r5, r0
 8008746:	f000 ff99 	bl	800967c <_localeconv_r>
 800874a:	6803      	ldr	r3, [r0, #0]
 800874c:	4618      	mov	r0, r3
 800874e:	9308      	str	r3, [sp, #32]
 8008750:	f7f7 fcfe 	bl	8000150 <strlen>
 8008754:	2300      	movs	r3, #0
 8008756:	930e      	str	r3, [sp, #56]	@ 0x38
 8008758:	f8d8 3000 	ldr.w	r3, [r8]
 800875c:	9009      	str	r0, [sp, #36]	@ 0x24
 800875e:	3307      	adds	r3, #7
 8008760:	f023 0307 	bic.w	r3, r3, #7
 8008764:	f103 0208 	add.w	r2, r3, #8
 8008768:	f894 a018 	ldrb.w	sl, [r4, #24]
 800876c:	f8d4 b000 	ldr.w	fp, [r4]
 8008770:	f8c8 2000 	str.w	r2, [r8]
 8008774:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008778:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800877c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800877e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8008782:	f04f 32ff 	mov.w	r2, #4294967295
 8008786:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800878a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800878e:	4b9c      	ldr	r3, [pc, #624]	@ (8008a00 <_printf_float+0x2cc>)
 8008790:	f7f8 f93c 	bl	8000a0c <__aeabi_dcmpun>
 8008794:	bb70      	cbnz	r0, 80087f4 <_printf_float+0xc0>
 8008796:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800879a:	f04f 32ff 	mov.w	r2, #4294967295
 800879e:	4b98      	ldr	r3, [pc, #608]	@ (8008a00 <_printf_float+0x2cc>)
 80087a0:	f7f8 f916 	bl	80009d0 <__aeabi_dcmple>
 80087a4:	bb30      	cbnz	r0, 80087f4 <_printf_float+0xc0>
 80087a6:	2200      	movs	r2, #0
 80087a8:	2300      	movs	r3, #0
 80087aa:	4640      	mov	r0, r8
 80087ac:	4649      	mov	r1, r9
 80087ae:	f7f8 f905 	bl	80009bc <__aeabi_dcmplt>
 80087b2:	b110      	cbz	r0, 80087ba <_printf_float+0x86>
 80087b4:	232d      	movs	r3, #45	@ 0x2d
 80087b6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80087ba:	4a92      	ldr	r2, [pc, #584]	@ (8008a04 <_printf_float+0x2d0>)
 80087bc:	4b92      	ldr	r3, [pc, #584]	@ (8008a08 <_printf_float+0x2d4>)
 80087be:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80087c2:	bf94      	ite	ls
 80087c4:	4690      	movls	r8, r2
 80087c6:	4698      	movhi	r8, r3
 80087c8:	2303      	movs	r3, #3
 80087ca:	f04f 0900 	mov.w	r9, #0
 80087ce:	6123      	str	r3, [r4, #16]
 80087d0:	f02b 0304 	bic.w	r3, fp, #4
 80087d4:	6023      	str	r3, [r4, #0]
 80087d6:	4633      	mov	r3, r6
 80087d8:	4621      	mov	r1, r4
 80087da:	4628      	mov	r0, r5
 80087dc:	9700      	str	r7, [sp, #0]
 80087de:	aa0f      	add	r2, sp, #60	@ 0x3c
 80087e0:	f000 fb14 	bl	8008e0c <_printf_common>
 80087e4:	3001      	adds	r0, #1
 80087e6:	f040 8090 	bne.w	800890a <_printf_float+0x1d6>
 80087ea:	f04f 30ff 	mov.w	r0, #4294967295
 80087ee:	b011      	add	sp, #68	@ 0x44
 80087f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087f4:	4642      	mov	r2, r8
 80087f6:	464b      	mov	r3, r9
 80087f8:	4640      	mov	r0, r8
 80087fa:	4649      	mov	r1, r9
 80087fc:	f7f8 f906 	bl	8000a0c <__aeabi_dcmpun>
 8008800:	b148      	cbz	r0, 8008816 <_printf_float+0xe2>
 8008802:	464b      	mov	r3, r9
 8008804:	2b00      	cmp	r3, #0
 8008806:	bfb8      	it	lt
 8008808:	232d      	movlt	r3, #45	@ 0x2d
 800880a:	4a80      	ldr	r2, [pc, #512]	@ (8008a0c <_printf_float+0x2d8>)
 800880c:	bfb8      	it	lt
 800880e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008812:	4b7f      	ldr	r3, [pc, #508]	@ (8008a10 <_printf_float+0x2dc>)
 8008814:	e7d3      	b.n	80087be <_printf_float+0x8a>
 8008816:	6863      	ldr	r3, [r4, #4]
 8008818:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800881c:	1c5a      	adds	r2, r3, #1
 800881e:	d13f      	bne.n	80088a0 <_printf_float+0x16c>
 8008820:	2306      	movs	r3, #6
 8008822:	6063      	str	r3, [r4, #4]
 8008824:	2200      	movs	r2, #0
 8008826:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800882a:	6023      	str	r3, [r4, #0]
 800882c:	9206      	str	r2, [sp, #24]
 800882e:	aa0e      	add	r2, sp, #56	@ 0x38
 8008830:	e9cd a204 	strd	sl, r2, [sp, #16]
 8008834:	aa0d      	add	r2, sp, #52	@ 0x34
 8008836:	9203      	str	r2, [sp, #12]
 8008838:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800883c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8008840:	6863      	ldr	r3, [r4, #4]
 8008842:	4642      	mov	r2, r8
 8008844:	9300      	str	r3, [sp, #0]
 8008846:	4628      	mov	r0, r5
 8008848:	464b      	mov	r3, r9
 800884a:	910a      	str	r1, [sp, #40]	@ 0x28
 800884c:	f7ff fed4 	bl	80085f8 <__cvt>
 8008850:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008852:	4680      	mov	r8, r0
 8008854:	2947      	cmp	r1, #71	@ 0x47
 8008856:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8008858:	d128      	bne.n	80088ac <_printf_float+0x178>
 800885a:	1cc8      	adds	r0, r1, #3
 800885c:	db02      	blt.n	8008864 <_printf_float+0x130>
 800885e:	6863      	ldr	r3, [r4, #4]
 8008860:	4299      	cmp	r1, r3
 8008862:	dd40      	ble.n	80088e6 <_printf_float+0x1b2>
 8008864:	f1aa 0a02 	sub.w	sl, sl, #2
 8008868:	fa5f fa8a 	uxtb.w	sl, sl
 800886c:	4652      	mov	r2, sl
 800886e:	3901      	subs	r1, #1
 8008870:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008874:	910d      	str	r1, [sp, #52]	@ 0x34
 8008876:	f7ff ff23 	bl	80086c0 <__exponent>
 800887a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800887c:	4681      	mov	r9, r0
 800887e:	1813      	adds	r3, r2, r0
 8008880:	2a01      	cmp	r2, #1
 8008882:	6123      	str	r3, [r4, #16]
 8008884:	dc02      	bgt.n	800888c <_printf_float+0x158>
 8008886:	6822      	ldr	r2, [r4, #0]
 8008888:	07d2      	lsls	r2, r2, #31
 800888a:	d501      	bpl.n	8008890 <_printf_float+0x15c>
 800888c:	3301      	adds	r3, #1
 800888e:	6123      	str	r3, [r4, #16]
 8008890:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8008894:	2b00      	cmp	r3, #0
 8008896:	d09e      	beq.n	80087d6 <_printf_float+0xa2>
 8008898:	232d      	movs	r3, #45	@ 0x2d
 800889a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800889e:	e79a      	b.n	80087d6 <_printf_float+0xa2>
 80088a0:	2947      	cmp	r1, #71	@ 0x47
 80088a2:	d1bf      	bne.n	8008824 <_printf_float+0xf0>
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d1bd      	bne.n	8008824 <_printf_float+0xf0>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e7ba      	b.n	8008822 <_printf_float+0xee>
 80088ac:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80088b0:	d9dc      	bls.n	800886c <_printf_float+0x138>
 80088b2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80088b6:	d118      	bne.n	80088ea <_printf_float+0x1b6>
 80088b8:	2900      	cmp	r1, #0
 80088ba:	6863      	ldr	r3, [r4, #4]
 80088bc:	dd0b      	ble.n	80088d6 <_printf_float+0x1a2>
 80088be:	6121      	str	r1, [r4, #16]
 80088c0:	b913      	cbnz	r3, 80088c8 <_printf_float+0x194>
 80088c2:	6822      	ldr	r2, [r4, #0]
 80088c4:	07d0      	lsls	r0, r2, #31
 80088c6:	d502      	bpl.n	80088ce <_printf_float+0x19a>
 80088c8:	3301      	adds	r3, #1
 80088ca:	440b      	add	r3, r1
 80088cc:	6123      	str	r3, [r4, #16]
 80088ce:	f04f 0900 	mov.w	r9, #0
 80088d2:	65a1      	str	r1, [r4, #88]	@ 0x58
 80088d4:	e7dc      	b.n	8008890 <_printf_float+0x15c>
 80088d6:	b913      	cbnz	r3, 80088de <_printf_float+0x1aa>
 80088d8:	6822      	ldr	r2, [r4, #0]
 80088da:	07d2      	lsls	r2, r2, #31
 80088dc:	d501      	bpl.n	80088e2 <_printf_float+0x1ae>
 80088de:	3302      	adds	r3, #2
 80088e0:	e7f4      	b.n	80088cc <_printf_float+0x198>
 80088e2:	2301      	movs	r3, #1
 80088e4:	e7f2      	b.n	80088cc <_printf_float+0x198>
 80088e6:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80088ea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80088ec:	4299      	cmp	r1, r3
 80088ee:	db05      	blt.n	80088fc <_printf_float+0x1c8>
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	6121      	str	r1, [r4, #16]
 80088f4:	07d8      	lsls	r0, r3, #31
 80088f6:	d5ea      	bpl.n	80088ce <_printf_float+0x19a>
 80088f8:	1c4b      	adds	r3, r1, #1
 80088fa:	e7e7      	b.n	80088cc <_printf_float+0x198>
 80088fc:	2900      	cmp	r1, #0
 80088fe:	bfcc      	ite	gt
 8008900:	2201      	movgt	r2, #1
 8008902:	f1c1 0202 	rsble	r2, r1, #2
 8008906:	4413      	add	r3, r2
 8008908:	e7e0      	b.n	80088cc <_printf_float+0x198>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	055a      	lsls	r2, r3, #21
 800890e:	d407      	bmi.n	8008920 <_printf_float+0x1ec>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	4642      	mov	r2, r8
 8008914:	4631      	mov	r1, r6
 8008916:	4628      	mov	r0, r5
 8008918:	47b8      	blx	r7
 800891a:	3001      	adds	r0, #1
 800891c:	d12b      	bne.n	8008976 <_printf_float+0x242>
 800891e:	e764      	b.n	80087ea <_printf_float+0xb6>
 8008920:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008924:	f240 80dc 	bls.w	8008ae0 <_printf_float+0x3ac>
 8008928:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800892c:	2200      	movs	r2, #0
 800892e:	2300      	movs	r3, #0
 8008930:	f7f8 f83a 	bl	80009a8 <__aeabi_dcmpeq>
 8008934:	2800      	cmp	r0, #0
 8008936:	d033      	beq.n	80089a0 <_printf_float+0x26c>
 8008938:	2301      	movs	r3, #1
 800893a:	4631      	mov	r1, r6
 800893c:	4628      	mov	r0, r5
 800893e:	4a35      	ldr	r2, [pc, #212]	@ (8008a14 <_printf_float+0x2e0>)
 8008940:	47b8      	blx	r7
 8008942:	3001      	adds	r0, #1
 8008944:	f43f af51 	beq.w	80087ea <_printf_float+0xb6>
 8008948:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800894c:	4543      	cmp	r3, r8
 800894e:	db02      	blt.n	8008956 <_printf_float+0x222>
 8008950:	6823      	ldr	r3, [r4, #0]
 8008952:	07d8      	lsls	r0, r3, #31
 8008954:	d50f      	bpl.n	8008976 <_printf_float+0x242>
 8008956:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800895a:	4631      	mov	r1, r6
 800895c:	4628      	mov	r0, r5
 800895e:	47b8      	blx	r7
 8008960:	3001      	adds	r0, #1
 8008962:	f43f af42 	beq.w	80087ea <_printf_float+0xb6>
 8008966:	f04f 0900 	mov.w	r9, #0
 800896a:	f108 38ff 	add.w	r8, r8, #4294967295
 800896e:	f104 0a1a 	add.w	sl, r4, #26
 8008972:	45c8      	cmp	r8, r9
 8008974:	dc09      	bgt.n	800898a <_printf_float+0x256>
 8008976:	6823      	ldr	r3, [r4, #0]
 8008978:	079b      	lsls	r3, r3, #30
 800897a:	f100 8102 	bmi.w	8008b82 <_printf_float+0x44e>
 800897e:	68e0      	ldr	r0, [r4, #12]
 8008980:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008982:	4298      	cmp	r0, r3
 8008984:	bfb8      	it	lt
 8008986:	4618      	movlt	r0, r3
 8008988:	e731      	b.n	80087ee <_printf_float+0xba>
 800898a:	2301      	movs	r3, #1
 800898c:	4652      	mov	r2, sl
 800898e:	4631      	mov	r1, r6
 8008990:	4628      	mov	r0, r5
 8008992:	47b8      	blx	r7
 8008994:	3001      	adds	r0, #1
 8008996:	f43f af28 	beq.w	80087ea <_printf_float+0xb6>
 800899a:	f109 0901 	add.w	r9, r9, #1
 800899e:	e7e8      	b.n	8008972 <_printf_float+0x23e>
 80089a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	dc38      	bgt.n	8008a18 <_printf_float+0x2e4>
 80089a6:	2301      	movs	r3, #1
 80089a8:	4631      	mov	r1, r6
 80089aa:	4628      	mov	r0, r5
 80089ac:	4a19      	ldr	r2, [pc, #100]	@ (8008a14 <_printf_float+0x2e0>)
 80089ae:	47b8      	blx	r7
 80089b0:	3001      	adds	r0, #1
 80089b2:	f43f af1a 	beq.w	80087ea <_printf_float+0xb6>
 80089b6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 80089ba:	ea59 0303 	orrs.w	r3, r9, r3
 80089be:	d102      	bne.n	80089c6 <_printf_float+0x292>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	07d9      	lsls	r1, r3, #31
 80089c4:	d5d7      	bpl.n	8008976 <_printf_float+0x242>
 80089c6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80089ca:	4631      	mov	r1, r6
 80089cc:	4628      	mov	r0, r5
 80089ce:	47b8      	blx	r7
 80089d0:	3001      	adds	r0, #1
 80089d2:	f43f af0a 	beq.w	80087ea <_printf_float+0xb6>
 80089d6:	f04f 0a00 	mov.w	sl, #0
 80089da:	f104 0b1a 	add.w	fp, r4, #26
 80089de:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80089e0:	425b      	negs	r3, r3
 80089e2:	4553      	cmp	r3, sl
 80089e4:	dc01      	bgt.n	80089ea <_printf_float+0x2b6>
 80089e6:	464b      	mov	r3, r9
 80089e8:	e793      	b.n	8008912 <_printf_float+0x1de>
 80089ea:	2301      	movs	r3, #1
 80089ec:	465a      	mov	r2, fp
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	f43f aef8 	beq.w	80087ea <_printf_float+0xb6>
 80089fa:	f10a 0a01 	add.w	sl, sl, #1
 80089fe:	e7ee      	b.n	80089de <_printf_float+0x2aa>
 8008a00:	7fefffff 	.word	0x7fefffff
 8008a04:	0800b014 	.word	0x0800b014
 8008a08:	0800b018 	.word	0x0800b018
 8008a0c:	0800b01c 	.word	0x0800b01c
 8008a10:	0800b020 	.word	0x0800b020
 8008a14:	0800b024 	.word	0x0800b024
 8008a18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a1a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008a1e:	4553      	cmp	r3, sl
 8008a20:	bfa8      	it	ge
 8008a22:	4653      	movge	r3, sl
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	4699      	mov	r9, r3
 8008a28:	dc36      	bgt.n	8008a98 <_printf_float+0x364>
 8008a2a:	f04f 0b00 	mov.w	fp, #0
 8008a2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a32:	f104 021a 	add.w	r2, r4, #26
 8008a36:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a3a:	eba3 0309 	sub.w	r3, r3, r9
 8008a3e:	455b      	cmp	r3, fp
 8008a40:	dc31      	bgt.n	8008aa6 <_printf_float+0x372>
 8008a42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a44:	459a      	cmp	sl, r3
 8008a46:	dc3a      	bgt.n	8008abe <_printf_float+0x38a>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	07da      	lsls	r2, r3, #31
 8008a4c:	d437      	bmi.n	8008abe <_printf_float+0x38a>
 8008a4e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a50:	ebaa 0903 	sub.w	r9, sl, r3
 8008a54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008a56:	ebaa 0303 	sub.w	r3, sl, r3
 8008a5a:	4599      	cmp	r9, r3
 8008a5c:	bfa8      	it	ge
 8008a5e:	4699      	movge	r9, r3
 8008a60:	f1b9 0f00 	cmp.w	r9, #0
 8008a64:	dc33      	bgt.n	8008ace <_printf_float+0x39a>
 8008a66:	f04f 0800 	mov.w	r8, #0
 8008a6a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008a6e:	f104 0b1a 	add.w	fp, r4, #26
 8008a72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a74:	ebaa 0303 	sub.w	r3, sl, r3
 8008a78:	eba3 0309 	sub.w	r3, r3, r9
 8008a7c:	4543      	cmp	r3, r8
 8008a7e:	f77f af7a 	ble.w	8008976 <_printf_float+0x242>
 8008a82:	2301      	movs	r3, #1
 8008a84:	465a      	mov	r2, fp
 8008a86:	4631      	mov	r1, r6
 8008a88:	4628      	mov	r0, r5
 8008a8a:	47b8      	blx	r7
 8008a8c:	3001      	adds	r0, #1
 8008a8e:	f43f aeac 	beq.w	80087ea <_printf_float+0xb6>
 8008a92:	f108 0801 	add.w	r8, r8, #1
 8008a96:	e7ec      	b.n	8008a72 <_printf_float+0x33e>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4628      	mov	r0, r5
 8008a9e:	47b8      	blx	r7
 8008aa0:	3001      	adds	r0, #1
 8008aa2:	d1c2      	bne.n	8008a2a <_printf_float+0x2f6>
 8008aa4:	e6a1      	b.n	80087ea <_printf_float+0xb6>
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	920a      	str	r2, [sp, #40]	@ 0x28
 8008aae:	47b8      	blx	r7
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	f43f ae9a 	beq.w	80087ea <_printf_float+0xb6>
 8008ab6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ab8:	f10b 0b01 	add.w	fp, fp, #1
 8008abc:	e7bb      	b.n	8008a36 <_printf_float+0x302>
 8008abe:	4631      	mov	r1, r6
 8008ac0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	47b8      	blx	r7
 8008ac8:	3001      	adds	r0, #1
 8008aca:	d1c0      	bne.n	8008a4e <_printf_float+0x31a>
 8008acc:	e68d      	b.n	80087ea <_printf_float+0xb6>
 8008ace:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008ad0:	464b      	mov	r3, r9
 8008ad2:	4631      	mov	r1, r6
 8008ad4:	4628      	mov	r0, r5
 8008ad6:	4442      	add	r2, r8
 8008ad8:	47b8      	blx	r7
 8008ada:	3001      	adds	r0, #1
 8008adc:	d1c3      	bne.n	8008a66 <_printf_float+0x332>
 8008ade:	e684      	b.n	80087ea <_printf_float+0xb6>
 8008ae0:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8008ae4:	f1ba 0f01 	cmp.w	sl, #1
 8008ae8:	dc01      	bgt.n	8008aee <_printf_float+0x3ba>
 8008aea:	07db      	lsls	r3, r3, #31
 8008aec:	d536      	bpl.n	8008b5c <_printf_float+0x428>
 8008aee:	2301      	movs	r3, #1
 8008af0:	4642      	mov	r2, r8
 8008af2:	4631      	mov	r1, r6
 8008af4:	4628      	mov	r0, r5
 8008af6:	47b8      	blx	r7
 8008af8:	3001      	adds	r0, #1
 8008afa:	f43f ae76 	beq.w	80087ea <_printf_float+0xb6>
 8008afe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008b02:	4631      	mov	r1, r6
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b8      	blx	r7
 8008b08:	3001      	adds	r0, #1
 8008b0a:	f43f ae6e 	beq.w	80087ea <_printf_float+0xb6>
 8008b0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008b12:	2200      	movs	r2, #0
 8008b14:	2300      	movs	r3, #0
 8008b16:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008b1a:	f7f7 ff45 	bl	80009a8 <__aeabi_dcmpeq>
 8008b1e:	b9c0      	cbnz	r0, 8008b52 <_printf_float+0x41e>
 8008b20:	4653      	mov	r3, sl
 8008b22:	f108 0201 	add.w	r2, r8, #1
 8008b26:	4631      	mov	r1, r6
 8008b28:	4628      	mov	r0, r5
 8008b2a:	47b8      	blx	r7
 8008b2c:	3001      	adds	r0, #1
 8008b2e:	d10c      	bne.n	8008b4a <_printf_float+0x416>
 8008b30:	e65b      	b.n	80087ea <_printf_float+0xb6>
 8008b32:	2301      	movs	r3, #1
 8008b34:	465a      	mov	r2, fp
 8008b36:	4631      	mov	r1, r6
 8008b38:	4628      	mov	r0, r5
 8008b3a:	47b8      	blx	r7
 8008b3c:	3001      	adds	r0, #1
 8008b3e:	f43f ae54 	beq.w	80087ea <_printf_float+0xb6>
 8008b42:	f108 0801 	add.w	r8, r8, #1
 8008b46:	45d0      	cmp	r8, sl
 8008b48:	dbf3      	blt.n	8008b32 <_printf_float+0x3fe>
 8008b4a:	464b      	mov	r3, r9
 8008b4c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008b50:	e6e0      	b.n	8008914 <_printf_float+0x1e0>
 8008b52:	f04f 0800 	mov.w	r8, #0
 8008b56:	f104 0b1a 	add.w	fp, r4, #26
 8008b5a:	e7f4      	b.n	8008b46 <_printf_float+0x412>
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	4642      	mov	r2, r8
 8008b60:	e7e1      	b.n	8008b26 <_printf_float+0x3f2>
 8008b62:	2301      	movs	r3, #1
 8008b64:	464a      	mov	r2, r9
 8008b66:	4631      	mov	r1, r6
 8008b68:	4628      	mov	r0, r5
 8008b6a:	47b8      	blx	r7
 8008b6c:	3001      	adds	r0, #1
 8008b6e:	f43f ae3c 	beq.w	80087ea <_printf_float+0xb6>
 8008b72:	f108 0801 	add.w	r8, r8, #1
 8008b76:	68e3      	ldr	r3, [r4, #12]
 8008b78:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008b7a:	1a5b      	subs	r3, r3, r1
 8008b7c:	4543      	cmp	r3, r8
 8008b7e:	dcf0      	bgt.n	8008b62 <_printf_float+0x42e>
 8008b80:	e6fd      	b.n	800897e <_printf_float+0x24a>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	f104 0919 	add.w	r9, r4, #25
 8008b8a:	e7f4      	b.n	8008b76 <_printf_float+0x442>

08008b8c <__sfputc_r>:
 8008b8c:	6893      	ldr	r3, [r2, #8]
 8008b8e:	b410      	push	{r4}
 8008b90:	3b01      	subs	r3, #1
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	6093      	str	r3, [r2, #8]
 8008b96:	da07      	bge.n	8008ba8 <__sfputc_r+0x1c>
 8008b98:	6994      	ldr	r4, [r2, #24]
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	db01      	blt.n	8008ba2 <__sfputc_r+0x16>
 8008b9e:	290a      	cmp	r1, #10
 8008ba0:	d102      	bne.n	8008ba8 <__sfputc_r+0x1c>
 8008ba2:	bc10      	pop	{r4}
 8008ba4:	f000 bc83 	b.w	80094ae <__swbuf_r>
 8008ba8:	6813      	ldr	r3, [r2, #0]
 8008baa:	1c58      	adds	r0, r3, #1
 8008bac:	6010      	str	r0, [r2, #0]
 8008bae:	7019      	strb	r1, [r3, #0]
 8008bb0:	4608      	mov	r0, r1
 8008bb2:	bc10      	pop	{r4}
 8008bb4:	4770      	bx	lr

08008bb6 <__sfputs_r>:
 8008bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bb8:	4606      	mov	r6, r0
 8008bba:	460f      	mov	r7, r1
 8008bbc:	4614      	mov	r4, r2
 8008bbe:	18d5      	adds	r5, r2, r3
 8008bc0:	42ac      	cmp	r4, r5
 8008bc2:	d101      	bne.n	8008bc8 <__sfputs_r+0x12>
 8008bc4:	2000      	movs	r0, #0
 8008bc6:	e007      	b.n	8008bd8 <__sfputs_r+0x22>
 8008bc8:	463a      	mov	r2, r7
 8008bca:	4630      	mov	r0, r6
 8008bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd0:	f7ff ffdc 	bl	8008b8c <__sfputc_r>
 8008bd4:	1c43      	adds	r3, r0, #1
 8008bd6:	d1f3      	bne.n	8008bc0 <__sfputs_r+0xa>
 8008bd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bdc <_vfiprintf_r>:
 8008bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be0:	460d      	mov	r5, r1
 8008be2:	4614      	mov	r4, r2
 8008be4:	4698      	mov	r8, r3
 8008be6:	4606      	mov	r6, r0
 8008be8:	b09d      	sub	sp, #116	@ 0x74
 8008bea:	b118      	cbz	r0, 8008bf4 <_vfiprintf_r+0x18>
 8008bec:	6a03      	ldr	r3, [r0, #32]
 8008bee:	b90b      	cbnz	r3, 8008bf4 <_vfiprintf_r+0x18>
 8008bf0:	f000 fbd2 	bl	8009398 <__sinit>
 8008bf4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bf6:	07d9      	lsls	r1, r3, #31
 8008bf8:	d405      	bmi.n	8008c06 <_vfiprintf_r+0x2a>
 8008bfa:	89ab      	ldrh	r3, [r5, #12]
 8008bfc:	059a      	lsls	r2, r3, #22
 8008bfe:	d402      	bmi.n	8008c06 <_vfiprintf_r+0x2a>
 8008c00:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c02:	f000 fdd4 	bl	80097ae <__retarget_lock_acquire_recursive>
 8008c06:	89ab      	ldrh	r3, [r5, #12]
 8008c08:	071b      	lsls	r3, r3, #28
 8008c0a:	d501      	bpl.n	8008c10 <_vfiprintf_r+0x34>
 8008c0c:	692b      	ldr	r3, [r5, #16]
 8008c0e:	b99b      	cbnz	r3, 8008c38 <_vfiprintf_r+0x5c>
 8008c10:	4629      	mov	r1, r5
 8008c12:	4630      	mov	r0, r6
 8008c14:	f000 fc8a 	bl	800952c <__swsetup_r>
 8008c18:	b170      	cbz	r0, 8008c38 <_vfiprintf_r+0x5c>
 8008c1a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c1c:	07dc      	lsls	r4, r3, #31
 8008c1e:	d504      	bpl.n	8008c2a <_vfiprintf_r+0x4e>
 8008c20:	f04f 30ff 	mov.w	r0, #4294967295
 8008c24:	b01d      	add	sp, #116	@ 0x74
 8008c26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	0598      	lsls	r0, r3, #22
 8008c2e:	d4f7      	bmi.n	8008c20 <_vfiprintf_r+0x44>
 8008c30:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c32:	f000 fdbd 	bl	80097b0 <__retarget_lock_release_recursive>
 8008c36:	e7f3      	b.n	8008c20 <_vfiprintf_r+0x44>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c3c:	2320      	movs	r3, #32
 8008c3e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c42:	2330      	movs	r3, #48	@ 0x30
 8008c44:	f04f 0901 	mov.w	r9, #1
 8008c48:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c4c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008df8 <_vfiprintf_r+0x21c>
 8008c50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c54:	4623      	mov	r3, r4
 8008c56:	469a      	mov	sl, r3
 8008c58:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c5c:	b10a      	cbz	r2, 8008c62 <_vfiprintf_r+0x86>
 8008c5e:	2a25      	cmp	r2, #37	@ 0x25
 8008c60:	d1f9      	bne.n	8008c56 <_vfiprintf_r+0x7a>
 8008c62:	ebba 0b04 	subs.w	fp, sl, r4
 8008c66:	d00b      	beq.n	8008c80 <_vfiprintf_r+0xa4>
 8008c68:	465b      	mov	r3, fp
 8008c6a:	4622      	mov	r2, r4
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4630      	mov	r0, r6
 8008c70:	f7ff ffa1 	bl	8008bb6 <__sfputs_r>
 8008c74:	3001      	adds	r0, #1
 8008c76:	f000 80a7 	beq.w	8008dc8 <_vfiprintf_r+0x1ec>
 8008c7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c7c:	445a      	add	r2, fp
 8008c7e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c80:	f89a 3000 	ldrb.w	r3, [sl]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	f000 809f 	beq.w	8008dc8 <_vfiprintf_r+0x1ec>
 8008c8a:	2300      	movs	r3, #0
 8008c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c90:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c94:	f10a 0a01 	add.w	sl, sl, #1
 8008c98:	9304      	str	r3, [sp, #16]
 8008c9a:	9307      	str	r3, [sp, #28]
 8008c9c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ca0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ca2:	4654      	mov	r4, sl
 8008ca4:	2205      	movs	r2, #5
 8008ca6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008caa:	4853      	ldr	r0, [pc, #332]	@ (8008df8 <_vfiprintf_r+0x21c>)
 8008cac:	f000 fd81 	bl	80097b2 <memchr>
 8008cb0:	9a04      	ldr	r2, [sp, #16]
 8008cb2:	b9d8      	cbnz	r0, 8008cec <_vfiprintf_r+0x110>
 8008cb4:	06d1      	lsls	r1, r2, #27
 8008cb6:	bf44      	itt	mi
 8008cb8:	2320      	movmi	r3, #32
 8008cba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cbe:	0713      	lsls	r3, r2, #28
 8008cc0:	bf44      	itt	mi
 8008cc2:	232b      	movmi	r3, #43	@ 0x2b
 8008cc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cc8:	f89a 3000 	ldrb.w	r3, [sl]
 8008ccc:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cce:	d015      	beq.n	8008cfc <_vfiprintf_r+0x120>
 8008cd0:	4654      	mov	r4, sl
 8008cd2:	2000      	movs	r0, #0
 8008cd4:	f04f 0c0a 	mov.w	ip, #10
 8008cd8:	9a07      	ldr	r2, [sp, #28]
 8008cda:	4621      	mov	r1, r4
 8008cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ce0:	3b30      	subs	r3, #48	@ 0x30
 8008ce2:	2b09      	cmp	r3, #9
 8008ce4:	d94b      	bls.n	8008d7e <_vfiprintf_r+0x1a2>
 8008ce6:	b1b0      	cbz	r0, 8008d16 <_vfiprintf_r+0x13a>
 8008ce8:	9207      	str	r2, [sp, #28]
 8008cea:	e014      	b.n	8008d16 <_vfiprintf_r+0x13a>
 8008cec:	eba0 0308 	sub.w	r3, r0, r8
 8008cf0:	fa09 f303 	lsl.w	r3, r9, r3
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	46a2      	mov	sl, r4
 8008cf8:	9304      	str	r3, [sp, #16]
 8008cfa:	e7d2      	b.n	8008ca2 <_vfiprintf_r+0xc6>
 8008cfc:	9b03      	ldr	r3, [sp, #12]
 8008cfe:	1d19      	adds	r1, r3, #4
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	9103      	str	r1, [sp, #12]
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	bfbb      	ittet	lt
 8008d08:	425b      	neglt	r3, r3
 8008d0a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d0e:	9307      	strge	r3, [sp, #28]
 8008d10:	9307      	strlt	r3, [sp, #28]
 8008d12:	bfb8      	it	lt
 8008d14:	9204      	strlt	r2, [sp, #16]
 8008d16:	7823      	ldrb	r3, [r4, #0]
 8008d18:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d1a:	d10a      	bne.n	8008d32 <_vfiprintf_r+0x156>
 8008d1c:	7863      	ldrb	r3, [r4, #1]
 8008d1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d20:	d132      	bne.n	8008d88 <_vfiprintf_r+0x1ac>
 8008d22:	9b03      	ldr	r3, [sp, #12]
 8008d24:	3402      	adds	r4, #2
 8008d26:	1d1a      	adds	r2, r3, #4
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	9203      	str	r2, [sp, #12]
 8008d2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d30:	9305      	str	r3, [sp, #20]
 8008d32:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008dfc <_vfiprintf_r+0x220>
 8008d36:	2203      	movs	r2, #3
 8008d38:	4650      	mov	r0, sl
 8008d3a:	7821      	ldrb	r1, [r4, #0]
 8008d3c:	f000 fd39 	bl	80097b2 <memchr>
 8008d40:	b138      	cbz	r0, 8008d52 <_vfiprintf_r+0x176>
 8008d42:	2240      	movs	r2, #64	@ 0x40
 8008d44:	9b04      	ldr	r3, [sp, #16]
 8008d46:	eba0 000a 	sub.w	r0, r0, sl
 8008d4a:	4082      	lsls	r2, r0
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	3401      	adds	r4, #1
 8008d50:	9304      	str	r3, [sp, #16]
 8008d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d56:	2206      	movs	r2, #6
 8008d58:	4829      	ldr	r0, [pc, #164]	@ (8008e00 <_vfiprintf_r+0x224>)
 8008d5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d5e:	f000 fd28 	bl	80097b2 <memchr>
 8008d62:	2800      	cmp	r0, #0
 8008d64:	d03f      	beq.n	8008de6 <_vfiprintf_r+0x20a>
 8008d66:	4b27      	ldr	r3, [pc, #156]	@ (8008e04 <_vfiprintf_r+0x228>)
 8008d68:	bb1b      	cbnz	r3, 8008db2 <_vfiprintf_r+0x1d6>
 8008d6a:	9b03      	ldr	r3, [sp, #12]
 8008d6c:	3307      	adds	r3, #7
 8008d6e:	f023 0307 	bic.w	r3, r3, #7
 8008d72:	3308      	adds	r3, #8
 8008d74:	9303      	str	r3, [sp, #12]
 8008d76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d78:	443b      	add	r3, r7
 8008d7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d7c:	e76a      	b.n	8008c54 <_vfiprintf_r+0x78>
 8008d7e:	460c      	mov	r4, r1
 8008d80:	2001      	movs	r0, #1
 8008d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d86:	e7a8      	b.n	8008cda <_vfiprintf_r+0xfe>
 8008d88:	2300      	movs	r3, #0
 8008d8a:	f04f 0c0a 	mov.w	ip, #10
 8008d8e:	4619      	mov	r1, r3
 8008d90:	3401      	adds	r4, #1
 8008d92:	9305      	str	r3, [sp, #20]
 8008d94:	4620      	mov	r0, r4
 8008d96:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d9a:	3a30      	subs	r2, #48	@ 0x30
 8008d9c:	2a09      	cmp	r2, #9
 8008d9e:	d903      	bls.n	8008da8 <_vfiprintf_r+0x1cc>
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d0c6      	beq.n	8008d32 <_vfiprintf_r+0x156>
 8008da4:	9105      	str	r1, [sp, #20]
 8008da6:	e7c4      	b.n	8008d32 <_vfiprintf_r+0x156>
 8008da8:	4604      	mov	r4, r0
 8008daa:	2301      	movs	r3, #1
 8008dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db0:	e7f0      	b.n	8008d94 <_vfiprintf_r+0x1b8>
 8008db2:	ab03      	add	r3, sp, #12
 8008db4:	9300      	str	r3, [sp, #0]
 8008db6:	462a      	mov	r2, r5
 8008db8:	4630      	mov	r0, r6
 8008dba:	4b13      	ldr	r3, [pc, #76]	@ (8008e08 <_vfiprintf_r+0x22c>)
 8008dbc:	a904      	add	r1, sp, #16
 8008dbe:	f7ff fcb9 	bl	8008734 <_printf_float>
 8008dc2:	4607      	mov	r7, r0
 8008dc4:	1c78      	adds	r0, r7, #1
 8008dc6:	d1d6      	bne.n	8008d76 <_vfiprintf_r+0x19a>
 8008dc8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dca:	07d9      	lsls	r1, r3, #31
 8008dcc:	d405      	bmi.n	8008dda <_vfiprintf_r+0x1fe>
 8008dce:	89ab      	ldrh	r3, [r5, #12]
 8008dd0:	059a      	lsls	r2, r3, #22
 8008dd2:	d402      	bmi.n	8008dda <_vfiprintf_r+0x1fe>
 8008dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dd6:	f000 fceb 	bl	80097b0 <__retarget_lock_release_recursive>
 8008dda:	89ab      	ldrh	r3, [r5, #12]
 8008ddc:	065b      	lsls	r3, r3, #25
 8008dde:	f53f af1f 	bmi.w	8008c20 <_vfiprintf_r+0x44>
 8008de2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008de4:	e71e      	b.n	8008c24 <_vfiprintf_r+0x48>
 8008de6:	ab03      	add	r3, sp, #12
 8008de8:	9300      	str	r3, [sp, #0]
 8008dea:	462a      	mov	r2, r5
 8008dec:	4630      	mov	r0, r6
 8008dee:	4b06      	ldr	r3, [pc, #24]	@ (8008e08 <_vfiprintf_r+0x22c>)
 8008df0:	a904      	add	r1, sp, #16
 8008df2:	f000 f87d 	bl	8008ef0 <_printf_i>
 8008df6:	e7e4      	b.n	8008dc2 <_vfiprintf_r+0x1e6>
 8008df8:	0800b026 	.word	0x0800b026
 8008dfc:	0800b02c 	.word	0x0800b02c
 8008e00:	0800b030 	.word	0x0800b030
 8008e04:	08008735 	.word	0x08008735
 8008e08:	08008bb7 	.word	0x08008bb7

08008e0c <_printf_common>:
 8008e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e10:	4616      	mov	r6, r2
 8008e12:	4698      	mov	r8, r3
 8008e14:	688a      	ldr	r2, [r1, #8]
 8008e16:	690b      	ldr	r3, [r1, #16]
 8008e18:	4607      	mov	r7, r0
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	bfb8      	it	lt
 8008e1e:	4613      	movlt	r3, r2
 8008e20:	6033      	str	r3, [r6, #0]
 8008e22:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e26:	460c      	mov	r4, r1
 8008e28:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e2c:	b10a      	cbz	r2, 8008e32 <_printf_common+0x26>
 8008e2e:	3301      	adds	r3, #1
 8008e30:	6033      	str	r3, [r6, #0]
 8008e32:	6823      	ldr	r3, [r4, #0]
 8008e34:	0699      	lsls	r1, r3, #26
 8008e36:	bf42      	ittt	mi
 8008e38:	6833      	ldrmi	r3, [r6, #0]
 8008e3a:	3302      	addmi	r3, #2
 8008e3c:	6033      	strmi	r3, [r6, #0]
 8008e3e:	6825      	ldr	r5, [r4, #0]
 8008e40:	f015 0506 	ands.w	r5, r5, #6
 8008e44:	d106      	bne.n	8008e54 <_printf_common+0x48>
 8008e46:	f104 0a19 	add.w	sl, r4, #25
 8008e4a:	68e3      	ldr	r3, [r4, #12]
 8008e4c:	6832      	ldr	r2, [r6, #0]
 8008e4e:	1a9b      	subs	r3, r3, r2
 8008e50:	42ab      	cmp	r3, r5
 8008e52:	dc2b      	bgt.n	8008eac <_printf_common+0xa0>
 8008e54:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e58:	6822      	ldr	r2, [r4, #0]
 8008e5a:	3b00      	subs	r3, #0
 8008e5c:	bf18      	it	ne
 8008e5e:	2301      	movne	r3, #1
 8008e60:	0692      	lsls	r2, r2, #26
 8008e62:	d430      	bmi.n	8008ec6 <_printf_common+0xba>
 8008e64:	4641      	mov	r1, r8
 8008e66:	4638      	mov	r0, r7
 8008e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e6c:	47c8      	blx	r9
 8008e6e:	3001      	adds	r0, #1
 8008e70:	d023      	beq.n	8008eba <_printf_common+0xae>
 8008e72:	6823      	ldr	r3, [r4, #0]
 8008e74:	6922      	ldr	r2, [r4, #16]
 8008e76:	f003 0306 	and.w	r3, r3, #6
 8008e7a:	2b04      	cmp	r3, #4
 8008e7c:	bf14      	ite	ne
 8008e7e:	2500      	movne	r5, #0
 8008e80:	6833      	ldreq	r3, [r6, #0]
 8008e82:	f04f 0600 	mov.w	r6, #0
 8008e86:	bf08      	it	eq
 8008e88:	68e5      	ldreq	r5, [r4, #12]
 8008e8a:	f104 041a 	add.w	r4, r4, #26
 8008e8e:	bf08      	it	eq
 8008e90:	1aed      	subeq	r5, r5, r3
 8008e92:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008e96:	bf08      	it	eq
 8008e98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	bfc4      	itt	gt
 8008ea0:	1a9b      	subgt	r3, r3, r2
 8008ea2:	18ed      	addgt	r5, r5, r3
 8008ea4:	42b5      	cmp	r5, r6
 8008ea6:	d11a      	bne.n	8008ede <_printf_common+0xd2>
 8008ea8:	2000      	movs	r0, #0
 8008eaa:	e008      	b.n	8008ebe <_printf_common+0xb2>
 8008eac:	2301      	movs	r3, #1
 8008eae:	4652      	mov	r2, sl
 8008eb0:	4641      	mov	r1, r8
 8008eb2:	4638      	mov	r0, r7
 8008eb4:	47c8      	blx	r9
 8008eb6:	3001      	adds	r0, #1
 8008eb8:	d103      	bne.n	8008ec2 <_printf_common+0xb6>
 8008eba:	f04f 30ff 	mov.w	r0, #4294967295
 8008ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ec2:	3501      	adds	r5, #1
 8008ec4:	e7c1      	b.n	8008e4a <_printf_common+0x3e>
 8008ec6:	2030      	movs	r0, #48	@ 0x30
 8008ec8:	18e1      	adds	r1, r4, r3
 8008eca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ece:	1c5a      	adds	r2, r3, #1
 8008ed0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ed4:	4422      	add	r2, r4
 8008ed6:	3302      	adds	r3, #2
 8008ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008edc:	e7c2      	b.n	8008e64 <_printf_common+0x58>
 8008ede:	2301      	movs	r3, #1
 8008ee0:	4622      	mov	r2, r4
 8008ee2:	4641      	mov	r1, r8
 8008ee4:	4638      	mov	r0, r7
 8008ee6:	47c8      	blx	r9
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d0e6      	beq.n	8008eba <_printf_common+0xae>
 8008eec:	3601      	adds	r6, #1
 8008eee:	e7d9      	b.n	8008ea4 <_printf_common+0x98>

08008ef0 <_printf_i>:
 8008ef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef4:	7e0f      	ldrb	r7, [r1, #24]
 8008ef6:	4691      	mov	r9, r2
 8008ef8:	2f78      	cmp	r7, #120	@ 0x78
 8008efa:	4680      	mov	r8, r0
 8008efc:	460c      	mov	r4, r1
 8008efe:	469a      	mov	sl, r3
 8008f00:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f02:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f06:	d807      	bhi.n	8008f18 <_printf_i+0x28>
 8008f08:	2f62      	cmp	r7, #98	@ 0x62
 8008f0a:	d80a      	bhi.n	8008f22 <_printf_i+0x32>
 8008f0c:	2f00      	cmp	r7, #0
 8008f0e:	f000 80d3 	beq.w	80090b8 <_printf_i+0x1c8>
 8008f12:	2f58      	cmp	r7, #88	@ 0x58
 8008f14:	f000 80ba 	beq.w	800908c <_printf_i+0x19c>
 8008f18:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f1c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f20:	e03a      	b.n	8008f98 <_printf_i+0xa8>
 8008f22:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f26:	2b15      	cmp	r3, #21
 8008f28:	d8f6      	bhi.n	8008f18 <_printf_i+0x28>
 8008f2a:	a101      	add	r1, pc, #4	@ (adr r1, 8008f30 <_printf_i+0x40>)
 8008f2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f30:	08008f89 	.word	0x08008f89
 8008f34:	08008f9d 	.word	0x08008f9d
 8008f38:	08008f19 	.word	0x08008f19
 8008f3c:	08008f19 	.word	0x08008f19
 8008f40:	08008f19 	.word	0x08008f19
 8008f44:	08008f19 	.word	0x08008f19
 8008f48:	08008f9d 	.word	0x08008f9d
 8008f4c:	08008f19 	.word	0x08008f19
 8008f50:	08008f19 	.word	0x08008f19
 8008f54:	08008f19 	.word	0x08008f19
 8008f58:	08008f19 	.word	0x08008f19
 8008f5c:	0800909f 	.word	0x0800909f
 8008f60:	08008fc7 	.word	0x08008fc7
 8008f64:	08009059 	.word	0x08009059
 8008f68:	08008f19 	.word	0x08008f19
 8008f6c:	08008f19 	.word	0x08008f19
 8008f70:	080090c1 	.word	0x080090c1
 8008f74:	08008f19 	.word	0x08008f19
 8008f78:	08008fc7 	.word	0x08008fc7
 8008f7c:	08008f19 	.word	0x08008f19
 8008f80:	08008f19 	.word	0x08008f19
 8008f84:	08009061 	.word	0x08009061
 8008f88:	6833      	ldr	r3, [r6, #0]
 8008f8a:	1d1a      	adds	r2, r3, #4
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	6032      	str	r2, [r6, #0]
 8008f90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f94:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f98:	2301      	movs	r3, #1
 8008f9a:	e09e      	b.n	80090da <_printf_i+0x1ea>
 8008f9c:	6833      	ldr	r3, [r6, #0]
 8008f9e:	6820      	ldr	r0, [r4, #0]
 8008fa0:	1d19      	adds	r1, r3, #4
 8008fa2:	6031      	str	r1, [r6, #0]
 8008fa4:	0606      	lsls	r6, r0, #24
 8008fa6:	d501      	bpl.n	8008fac <_printf_i+0xbc>
 8008fa8:	681d      	ldr	r5, [r3, #0]
 8008faa:	e003      	b.n	8008fb4 <_printf_i+0xc4>
 8008fac:	0645      	lsls	r5, r0, #25
 8008fae:	d5fb      	bpl.n	8008fa8 <_printf_i+0xb8>
 8008fb0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fb4:	2d00      	cmp	r5, #0
 8008fb6:	da03      	bge.n	8008fc0 <_printf_i+0xd0>
 8008fb8:	232d      	movs	r3, #45	@ 0x2d
 8008fba:	426d      	negs	r5, r5
 8008fbc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fc0:	230a      	movs	r3, #10
 8008fc2:	4859      	ldr	r0, [pc, #356]	@ (8009128 <_printf_i+0x238>)
 8008fc4:	e011      	b.n	8008fea <_printf_i+0xfa>
 8008fc6:	6821      	ldr	r1, [r4, #0]
 8008fc8:	6833      	ldr	r3, [r6, #0]
 8008fca:	0608      	lsls	r0, r1, #24
 8008fcc:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fd0:	d402      	bmi.n	8008fd8 <_printf_i+0xe8>
 8008fd2:	0649      	lsls	r1, r1, #25
 8008fd4:	bf48      	it	mi
 8008fd6:	b2ad      	uxthmi	r5, r5
 8008fd8:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fda:	6033      	str	r3, [r6, #0]
 8008fdc:	bf14      	ite	ne
 8008fde:	230a      	movne	r3, #10
 8008fe0:	2308      	moveq	r3, #8
 8008fe2:	4851      	ldr	r0, [pc, #324]	@ (8009128 <_printf_i+0x238>)
 8008fe4:	2100      	movs	r1, #0
 8008fe6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fea:	6866      	ldr	r6, [r4, #4]
 8008fec:	2e00      	cmp	r6, #0
 8008fee:	bfa8      	it	ge
 8008ff0:	6821      	ldrge	r1, [r4, #0]
 8008ff2:	60a6      	str	r6, [r4, #8]
 8008ff4:	bfa4      	itt	ge
 8008ff6:	f021 0104 	bicge.w	r1, r1, #4
 8008ffa:	6021      	strge	r1, [r4, #0]
 8008ffc:	b90d      	cbnz	r5, 8009002 <_printf_i+0x112>
 8008ffe:	2e00      	cmp	r6, #0
 8009000:	d04b      	beq.n	800909a <_printf_i+0x1aa>
 8009002:	4616      	mov	r6, r2
 8009004:	fbb5 f1f3 	udiv	r1, r5, r3
 8009008:	fb03 5711 	mls	r7, r3, r1, r5
 800900c:	5dc7      	ldrb	r7, [r0, r7]
 800900e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009012:	462f      	mov	r7, r5
 8009014:	42bb      	cmp	r3, r7
 8009016:	460d      	mov	r5, r1
 8009018:	d9f4      	bls.n	8009004 <_printf_i+0x114>
 800901a:	2b08      	cmp	r3, #8
 800901c:	d10b      	bne.n	8009036 <_printf_i+0x146>
 800901e:	6823      	ldr	r3, [r4, #0]
 8009020:	07df      	lsls	r7, r3, #31
 8009022:	d508      	bpl.n	8009036 <_printf_i+0x146>
 8009024:	6923      	ldr	r3, [r4, #16]
 8009026:	6861      	ldr	r1, [r4, #4]
 8009028:	4299      	cmp	r1, r3
 800902a:	bfde      	ittt	le
 800902c:	2330      	movle	r3, #48	@ 0x30
 800902e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009032:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009036:	1b92      	subs	r2, r2, r6
 8009038:	6122      	str	r2, [r4, #16]
 800903a:	464b      	mov	r3, r9
 800903c:	4621      	mov	r1, r4
 800903e:	4640      	mov	r0, r8
 8009040:	f8cd a000 	str.w	sl, [sp]
 8009044:	aa03      	add	r2, sp, #12
 8009046:	f7ff fee1 	bl	8008e0c <_printf_common>
 800904a:	3001      	adds	r0, #1
 800904c:	d14a      	bne.n	80090e4 <_printf_i+0x1f4>
 800904e:	f04f 30ff 	mov.w	r0, #4294967295
 8009052:	b004      	add	sp, #16
 8009054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009058:	6823      	ldr	r3, [r4, #0]
 800905a:	f043 0320 	orr.w	r3, r3, #32
 800905e:	6023      	str	r3, [r4, #0]
 8009060:	2778      	movs	r7, #120	@ 0x78
 8009062:	4832      	ldr	r0, [pc, #200]	@ (800912c <_printf_i+0x23c>)
 8009064:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009068:	6823      	ldr	r3, [r4, #0]
 800906a:	6831      	ldr	r1, [r6, #0]
 800906c:	061f      	lsls	r7, r3, #24
 800906e:	f851 5b04 	ldr.w	r5, [r1], #4
 8009072:	d402      	bmi.n	800907a <_printf_i+0x18a>
 8009074:	065f      	lsls	r7, r3, #25
 8009076:	bf48      	it	mi
 8009078:	b2ad      	uxthmi	r5, r5
 800907a:	6031      	str	r1, [r6, #0]
 800907c:	07d9      	lsls	r1, r3, #31
 800907e:	bf44      	itt	mi
 8009080:	f043 0320 	orrmi.w	r3, r3, #32
 8009084:	6023      	strmi	r3, [r4, #0]
 8009086:	b11d      	cbz	r5, 8009090 <_printf_i+0x1a0>
 8009088:	2310      	movs	r3, #16
 800908a:	e7ab      	b.n	8008fe4 <_printf_i+0xf4>
 800908c:	4826      	ldr	r0, [pc, #152]	@ (8009128 <_printf_i+0x238>)
 800908e:	e7e9      	b.n	8009064 <_printf_i+0x174>
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	f023 0320 	bic.w	r3, r3, #32
 8009096:	6023      	str	r3, [r4, #0]
 8009098:	e7f6      	b.n	8009088 <_printf_i+0x198>
 800909a:	4616      	mov	r6, r2
 800909c:	e7bd      	b.n	800901a <_printf_i+0x12a>
 800909e:	6833      	ldr	r3, [r6, #0]
 80090a0:	6825      	ldr	r5, [r4, #0]
 80090a2:	1d18      	adds	r0, r3, #4
 80090a4:	6961      	ldr	r1, [r4, #20]
 80090a6:	6030      	str	r0, [r6, #0]
 80090a8:	062e      	lsls	r6, r5, #24
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	d501      	bpl.n	80090b2 <_printf_i+0x1c2>
 80090ae:	6019      	str	r1, [r3, #0]
 80090b0:	e002      	b.n	80090b8 <_printf_i+0x1c8>
 80090b2:	0668      	lsls	r0, r5, #25
 80090b4:	d5fb      	bpl.n	80090ae <_printf_i+0x1be>
 80090b6:	8019      	strh	r1, [r3, #0]
 80090b8:	2300      	movs	r3, #0
 80090ba:	4616      	mov	r6, r2
 80090bc:	6123      	str	r3, [r4, #16]
 80090be:	e7bc      	b.n	800903a <_printf_i+0x14a>
 80090c0:	6833      	ldr	r3, [r6, #0]
 80090c2:	2100      	movs	r1, #0
 80090c4:	1d1a      	adds	r2, r3, #4
 80090c6:	6032      	str	r2, [r6, #0]
 80090c8:	681e      	ldr	r6, [r3, #0]
 80090ca:	6862      	ldr	r2, [r4, #4]
 80090cc:	4630      	mov	r0, r6
 80090ce:	f000 fb70 	bl	80097b2 <memchr>
 80090d2:	b108      	cbz	r0, 80090d8 <_printf_i+0x1e8>
 80090d4:	1b80      	subs	r0, r0, r6
 80090d6:	6060      	str	r0, [r4, #4]
 80090d8:	6863      	ldr	r3, [r4, #4]
 80090da:	6123      	str	r3, [r4, #16]
 80090dc:	2300      	movs	r3, #0
 80090de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090e2:	e7aa      	b.n	800903a <_printf_i+0x14a>
 80090e4:	4632      	mov	r2, r6
 80090e6:	4649      	mov	r1, r9
 80090e8:	4640      	mov	r0, r8
 80090ea:	6923      	ldr	r3, [r4, #16]
 80090ec:	47d0      	blx	sl
 80090ee:	3001      	adds	r0, #1
 80090f0:	d0ad      	beq.n	800904e <_printf_i+0x15e>
 80090f2:	6823      	ldr	r3, [r4, #0]
 80090f4:	079b      	lsls	r3, r3, #30
 80090f6:	d413      	bmi.n	8009120 <_printf_i+0x230>
 80090f8:	68e0      	ldr	r0, [r4, #12]
 80090fa:	9b03      	ldr	r3, [sp, #12]
 80090fc:	4298      	cmp	r0, r3
 80090fe:	bfb8      	it	lt
 8009100:	4618      	movlt	r0, r3
 8009102:	e7a6      	b.n	8009052 <_printf_i+0x162>
 8009104:	2301      	movs	r3, #1
 8009106:	4632      	mov	r2, r6
 8009108:	4649      	mov	r1, r9
 800910a:	4640      	mov	r0, r8
 800910c:	47d0      	blx	sl
 800910e:	3001      	adds	r0, #1
 8009110:	d09d      	beq.n	800904e <_printf_i+0x15e>
 8009112:	3501      	adds	r5, #1
 8009114:	68e3      	ldr	r3, [r4, #12]
 8009116:	9903      	ldr	r1, [sp, #12]
 8009118:	1a5b      	subs	r3, r3, r1
 800911a:	42ab      	cmp	r3, r5
 800911c:	dcf2      	bgt.n	8009104 <_printf_i+0x214>
 800911e:	e7eb      	b.n	80090f8 <_printf_i+0x208>
 8009120:	2500      	movs	r5, #0
 8009122:	f104 0619 	add.w	r6, r4, #25
 8009126:	e7f5      	b.n	8009114 <_printf_i+0x224>
 8009128:	0800b037 	.word	0x0800b037
 800912c:	0800b048 	.word	0x0800b048

08009130 <__sflush_r>:
 8009130:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009136:	0716      	lsls	r6, r2, #28
 8009138:	4605      	mov	r5, r0
 800913a:	460c      	mov	r4, r1
 800913c:	d454      	bmi.n	80091e8 <__sflush_r+0xb8>
 800913e:	684b      	ldr	r3, [r1, #4]
 8009140:	2b00      	cmp	r3, #0
 8009142:	dc02      	bgt.n	800914a <__sflush_r+0x1a>
 8009144:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009146:	2b00      	cmp	r3, #0
 8009148:	dd48      	ble.n	80091dc <__sflush_r+0xac>
 800914a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800914c:	2e00      	cmp	r6, #0
 800914e:	d045      	beq.n	80091dc <__sflush_r+0xac>
 8009150:	2300      	movs	r3, #0
 8009152:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009156:	682f      	ldr	r7, [r5, #0]
 8009158:	6a21      	ldr	r1, [r4, #32]
 800915a:	602b      	str	r3, [r5, #0]
 800915c:	d030      	beq.n	80091c0 <__sflush_r+0x90>
 800915e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009160:	89a3      	ldrh	r3, [r4, #12]
 8009162:	0759      	lsls	r1, r3, #29
 8009164:	d505      	bpl.n	8009172 <__sflush_r+0x42>
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	1ad2      	subs	r2, r2, r3
 800916a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800916c:	b10b      	cbz	r3, 8009172 <__sflush_r+0x42>
 800916e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009170:	1ad2      	subs	r2, r2, r3
 8009172:	2300      	movs	r3, #0
 8009174:	4628      	mov	r0, r5
 8009176:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009178:	6a21      	ldr	r1, [r4, #32]
 800917a:	47b0      	blx	r6
 800917c:	1c43      	adds	r3, r0, #1
 800917e:	89a3      	ldrh	r3, [r4, #12]
 8009180:	d106      	bne.n	8009190 <__sflush_r+0x60>
 8009182:	6829      	ldr	r1, [r5, #0]
 8009184:	291d      	cmp	r1, #29
 8009186:	d82b      	bhi.n	80091e0 <__sflush_r+0xb0>
 8009188:	4a28      	ldr	r2, [pc, #160]	@ (800922c <__sflush_r+0xfc>)
 800918a:	410a      	asrs	r2, r1
 800918c:	07d6      	lsls	r6, r2, #31
 800918e:	d427      	bmi.n	80091e0 <__sflush_r+0xb0>
 8009190:	2200      	movs	r2, #0
 8009192:	6062      	str	r2, [r4, #4]
 8009194:	6922      	ldr	r2, [r4, #16]
 8009196:	04d9      	lsls	r1, r3, #19
 8009198:	6022      	str	r2, [r4, #0]
 800919a:	d504      	bpl.n	80091a6 <__sflush_r+0x76>
 800919c:	1c42      	adds	r2, r0, #1
 800919e:	d101      	bne.n	80091a4 <__sflush_r+0x74>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b903      	cbnz	r3, 80091a6 <__sflush_r+0x76>
 80091a4:	6560      	str	r0, [r4, #84]	@ 0x54
 80091a6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091a8:	602f      	str	r7, [r5, #0]
 80091aa:	b1b9      	cbz	r1, 80091dc <__sflush_r+0xac>
 80091ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091b0:	4299      	cmp	r1, r3
 80091b2:	d002      	beq.n	80091ba <__sflush_r+0x8a>
 80091b4:	4628      	mov	r0, r5
 80091b6:	f001 f96b 	bl	800a490 <_free_r>
 80091ba:	2300      	movs	r3, #0
 80091bc:	6363      	str	r3, [r4, #52]	@ 0x34
 80091be:	e00d      	b.n	80091dc <__sflush_r+0xac>
 80091c0:	2301      	movs	r3, #1
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b0      	blx	r6
 80091c6:	4602      	mov	r2, r0
 80091c8:	1c50      	adds	r0, r2, #1
 80091ca:	d1c9      	bne.n	8009160 <__sflush_r+0x30>
 80091cc:	682b      	ldr	r3, [r5, #0]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d0c6      	beq.n	8009160 <__sflush_r+0x30>
 80091d2:	2b1d      	cmp	r3, #29
 80091d4:	d001      	beq.n	80091da <__sflush_r+0xaa>
 80091d6:	2b16      	cmp	r3, #22
 80091d8:	d11d      	bne.n	8009216 <__sflush_r+0xe6>
 80091da:	602f      	str	r7, [r5, #0]
 80091dc:	2000      	movs	r0, #0
 80091de:	e021      	b.n	8009224 <__sflush_r+0xf4>
 80091e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091e4:	b21b      	sxth	r3, r3
 80091e6:	e01a      	b.n	800921e <__sflush_r+0xee>
 80091e8:	690f      	ldr	r7, [r1, #16]
 80091ea:	2f00      	cmp	r7, #0
 80091ec:	d0f6      	beq.n	80091dc <__sflush_r+0xac>
 80091ee:	0793      	lsls	r3, r2, #30
 80091f0:	bf18      	it	ne
 80091f2:	2300      	movne	r3, #0
 80091f4:	680e      	ldr	r6, [r1, #0]
 80091f6:	bf08      	it	eq
 80091f8:	694b      	ldreq	r3, [r1, #20]
 80091fa:	1bf6      	subs	r6, r6, r7
 80091fc:	600f      	str	r7, [r1, #0]
 80091fe:	608b      	str	r3, [r1, #8]
 8009200:	2e00      	cmp	r6, #0
 8009202:	ddeb      	ble.n	80091dc <__sflush_r+0xac>
 8009204:	4633      	mov	r3, r6
 8009206:	463a      	mov	r2, r7
 8009208:	4628      	mov	r0, r5
 800920a:	6a21      	ldr	r1, [r4, #32]
 800920c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8009210:	47e0      	blx	ip
 8009212:	2800      	cmp	r0, #0
 8009214:	dc07      	bgt.n	8009226 <__sflush_r+0xf6>
 8009216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800921a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800921e:	f04f 30ff 	mov.w	r0, #4294967295
 8009222:	81a3      	strh	r3, [r4, #12]
 8009224:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009226:	4407      	add	r7, r0
 8009228:	1a36      	subs	r6, r6, r0
 800922a:	e7e9      	b.n	8009200 <__sflush_r+0xd0>
 800922c:	dfbffffe 	.word	0xdfbffffe

08009230 <_fflush_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	690b      	ldr	r3, [r1, #16]
 8009234:	4605      	mov	r5, r0
 8009236:	460c      	mov	r4, r1
 8009238:	b913      	cbnz	r3, 8009240 <_fflush_r+0x10>
 800923a:	2500      	movs	r5, #0
 800923c:	4628      	mov	r0, r5
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	b118      	cbz	r0, 800924a <_fflush_r+0x1a>
 8009242:	6a03      	ldr	r3, [r0, #32]
 8009244:	b90b      	cbnz	r3, 800924a <_fflush_r+0x1a>
 8009246:	f000 f8a7 	bl	8009398 <__sinit>
 800924a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f3      	beq.n	800923a <_fflush_r+0xa>
 8009252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009254:	07d0      	lsls	r0, r2, #31
 8009256:	d404      	bmi.n	8009262 <_fflush_r+0x32>
 8009258:	0599      	lsls	r1, r3, #22
 800925a:	d402      	bmi.n	8009262 <_fflush_r+0x32>
 800925c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800925e:	f000 faa6 	bl	80097ae <__retarget_lock_acquire_recursive>
 8009262:	4628      	mov	r0, r5
 8009264:	4621      	mov	r1, r4
 8009266:	f7ff ff63 	bl	8009130 <__sflush_r>
 800926a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800926c:	4605      	mov	r5, r0
 800926e:	07da      	lsls	r2, r3, #31
 8009270:	d4e4      	bmi.n	800923c <_fflush_r+0xc>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	059b      	lsls	r3, r3, #22
 8009276:	d4e1      	bmi.n	800923c <_fflush_r+0xc>
 8009278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800927a:	f000 fa99 	bl	80097b0 <__retarget_lock_release_recursive>
 800927e:	e7dd      	b.n	800923c <_fflush_r+0xc>

08009280 <std>:
 8009280:	2300      	movs	r3, #0
 8009282:	b510      	push	{r4, lr}
 8009284:	4604      	mov	r4, r0
 8009286:	e9c0 3300 	strd	r3, r3, [r0]
 800928a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800928e:	6083      	str	r3, [r0, #8]
 8009290:	8181      	strh	r1, [r0, #12]
 8009292:	6643      	str	r3, [r0, #100]	@ 0x64
 8009294:	81c2      	strh	r2, [r0, #14]
 8009296:	6183      	str	r3, [r0, #24]
 8009298:	4619      	mov	r1, r3
 800929a:	2208      	movs	r2, #8
 800929c:	305c      	adds	r0, #92	@ 0x5c
 800929e:	f000 f9b5 	bl	800960c <memset>
 80092a2:	4b0d      	ldr	r3, [pc, #52]	@ (80092d8 <std+0x58>)
 80092a4:	6224      	str	r4, [r4, #32]
 80092a6:	6263      	str	r3, [r4, #36]	@ 0x24
 80092a8:	4b0c      	ldr	r3, [pc, #48]	@ (80092dc <std+0x5c>)
 80092aa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80092ac:	4b0c      	ldr	r3, [pc, #48]	@ (80092e0 <std+0x60>)
 80092ae:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80092b0:	4b0c      	ldr	r3, [pc, #48]	@ (80092e4 <std+0x64>)
 80092b2:	6323      	str	r3, [r4, #48]	@ 0x30
 80092b4:	4b0c      	ldr	r3, [pc, #48]	@ (80092e8 <std+0x68>)
 80092b6:	429c      	cmp	r4, r3
 80092b8:	d006      	beq.n	80092c8 <std+0x48>
 80092ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80092be:	4294      	cmp	r4, r2
 80092c0:	d002      	beq.n	80092c8 <std+0x48>
 80092c2:	33d0      	adds	r3, #208	@ 0xd0
 80092c4:	429c      	cmp	r4, r3
 80092c6:	d105      	bne.n	80092d4 <std+0x54>
 80092c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80092cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092d0:	f000 ba6c 	b.w	80097ac <__retarget_lock_init_recursive>
 80092d4:	bd10      	pop	{r4, pc}
 80092d6:	bf00      	nop
 80092d8:	08009429 	.word	0x08009429
 80092dc:	0800944b 	.word	0x0800944b
 80092e0:	08009483 	.word	0x08009483
 80092e4:	080094a7 	.word	0x080094a7
 80092e8:	20000374 	.word	0x20000374

080092ec <stdio_exit_handler>:
 80092ec:	4a02      	ldr	r2, [pc, #8]	@ (80092f8 <stdio_exit_handler+0xc>)
 80092ee:	4903      	ldr	r1, [pc, #12]	@ (80092fc <stdio_exit_handler+0x10>)
 80092f0:	4803      	ldr	r0, [pc, #12]	@ (8009300 <stdio_exit_handler+0x14>)
 80092f2:	f000 b87b 	b.w	80093ec <_fwalk_sglue>
 80092f6:	bf00      	nop
 80092f8:	2000000c 	.word	0x2000000c
 80092fc:	08009231 	.word	0x08009231
 8009300:	2000001c 	.word	0x2000001c

08009304 <cleanup_stdio>:
 8009304:	6841      	ldr	r1, [r0, #4]
 8009306:	4b0c      	ldr	r3, [pc, #48]	@ (8009338 <cleanup_stdio+0x34>)
 8009308:	b510      	push	{r4, lr}
 800930a:	4299      	cmp	r1, r3
 800930c:	4604      	mov	r4, r0
 800930e:	d001      	beq.n	8009314 <cleanup_stdio+0x10>
 8009310:	f7ff ff8e 	bl	8009230 <_fflush_r>
 8009314:	68a1      	ldr	r1, [r4, #8]
 8009316:	4b09      	ldr	r3, [pc, #36]	@ (800933c <cleanup_stdio+0x38>)
 8009318:	4299      	cmp	r1, r3
 800931a:	d002      	beq.n	8009322 <cleanup_stdio+0x1e>
 800931c:	4620      	mov	r0, r4
 800931e:	f7ff ff87 	bl	8009230 <_fflush_r>
 8009322:	68e1      	ldr	r1, [r4, #12]
 8009324:	4b06      	ldr	r3, [pc, #24]	@ (8009340 <cleanup_stdio+0x3c>)
 8009326:	4299      	cmp	r1, r3
 8009328:	d004      	beq.n	8009334 <cleanup_stdio+0x30>
 800932a:	4620      	mov	r0, r4
 800932c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009330:	f7ff bf7e 	b.w	8009230 <_fflush_r>
 8009334:	bd10      	pop	{r4, pc}
 8009336:	bf00      	nop
 8009338:	20000374 	.word	0x20000374
 800933c:	200003dc 	.word	0x200003dc
 8009340:	20000444 	.word	0x20000444

08009344 <global_stdio_init.part.0>:
 8009344:	b510      	push	{r4, lr}
 8009346:	4b0b      	ldr	r3, [pc, #44]	@ (8009374 <global_stdio_init.part.0+0x30>)
 8009348:	4c0b      	ldr	r4, [pc, #44]	@ (8009378 <global_stdio_init.part.0+0x34>)
 800934a:	4a0c      	ldr	r2, [pc, #48]	@ (800937c <global_stdio_init.part.0+0x38>)
 800934c:	4620      	mov	r0, r4
 800934e:	601a      	str	r2, [r3, #0]
 8009350:	2104      	movs	r1, #4
 8009352:	2200      	movs	r2, #0
 8009354:	f7ff ff94 	bl	8009280 <std>
 8009358:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800935c:	2201      	movs	r2, #1
 800935e:	2109      	movs	r1, #9
 8009360:	f7ff ff8e 	bl	8009280 <std>
 8009364:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009368:	2202      	movs	r2, #2
 800936a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800936e:	2112      	movs	r1, #18
 8009370:	f7ff bf86 	b.w	8009280 <std>
 8009374:	200004ac 	.word	0x200004ac
 8009378:	20000374 	.word	0x20000374
 800937c:	080092ed 	.word	0x080092ed

08009380 <__sfp_lock_acquire>:
 8009380:	4801      	ldr	r0, [pc, #4]	@ (8009388 <__sfp_lock_acquire+0x8>)
 8009382:	f000 ba14 	b.w	80097ae <__retarget_lock_acquire_recursive>
 8009386:	bf00      	nop
 8009388:	200004b5 	.word	0x200004b5

0800938c <__sfp_lock_release>:
 800938c:	4801      	ldr	r0, [pc, #4]	@ (8009394 <__sfp_lock_release+0x8>)
 800938e:	f000 ba0f 	b.w	80097b0 <__retarget_lock_release_recursive>
 8009392:	bf00      	nop
 8009394:	200004b5 	.word	0x200004b5

08009398 <__sinit>:
 8009398:	b510      	push	{r4, lr}
 800939a:	4604      	mov	r4, r0
 800939c:	f7ff fff0 	bl	8009380 <__sfp_lock_acquire>
 80093a0:	6a23      	ldr	r3, [r4, #32]
 80093a2:	b11b      	cbz	r3, 80093ac <__sinit+0x14>
 80093a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093a8:	f7ff bff0 	b.w	800938c <__sfp_lock_release>
 80093ac:	4b04      	ldr	r3, [pc, #16]	@ (80093c0 <__sinit+0x28>)
 80093ae:	6223      	str	r3, [r4, #32]
 80093b0:	4b04      	ldr	r3, [pc, #16]	@ (80093c4 <__sinit+0x2c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1f5      	bne.n	80093a4 <__sinit+0xc>
 80093b8:	f7ff ffc4 	bl	8009344 <global_stdio_init.part.0>
 80093bc:	e7f2      	b.n	80093a4 <__sinit+0xc>
 80093be:	bf00      	nop
 80093c0:	08009305 	.word	0x08009305
 80093c4:	200004ac 	.word	0x200004ac

080093c8 <fiprintf>:
 80093c8:	b40e      	push	{r1, r2, r3}
 80093ca:	b503      	push	{r0, r1, lr}
 80093cc:	4601      	mov	r1, r0
 80093ce:	ab03      	add	r3, sp, #12
 80093d0:	4805      	ldr	r0, [pc, #20]	@ (80093e8 <fiprintf+0x20>)
 80093d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80093d6:	6800      	ldr	r0, [r0, #0]
 80093d8:	9301      	str	r3, [sp, #4]
 80093da:	f7ff fbff 	bl	8008bdc <_vfiprintf_r>
 80093de:	b002      	add	sp, #8
 80093e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e4:	b003      	add	sp, #12
 80093e6:	4770      	bx	lr
 80093e8:	20000018 	.word	0x20000018

080093ec <_fwalk_sglue>:
 80093ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093f0:	4607      	mov	r7, r0
 80093f2:	4688      	mov	r8, r1
 80093f4:	4614      	mov	r4, r2
 80093f6:	2600      	movs	r6, #0
 80093f8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80093fc:	f1b9 0901 	subs.w	r9, r9, #1
 8009400:	d505      	bpl.n	800940e <_fwalk_sglue+0x22>
 8009402:	6824      	ldr	r4, [r4, #0]
 8009404:	2c00      	cmp	r4, #0
 8009406:	d1f7      	bne.n	80093f8 <_fwalk_sglue+0xc>
 8009408:	4630      	mov	r0, r6
 800940a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800940e:	89ab      	ldrh	r3, [r5, #12]
 8009410:	2b01      	cmp	r3, #1
 8009412:	d907      	bls.n	8009424 <_fwalk_sglue+0x38>
 8009414:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009418:	3301      	adds	r3, #1
 800941a:	d003      	beq.n	8009424 <_fwalk_sglue+0x38>
 800941c:	4629      	mov	r1, r5
 800941e:	4638      	mov	r0, r7
 8009420:	47c0      	blx	r8
 8009422:	4306      	orrs	r6, r0
 8009424:	3568      	adds	r5, #104	@ 0x68
 8009426:	e7e9      	b.n	80093fc <_fwalk_sglue+0x10>

08009428 <__sread>:
 8009428:	b510      	push	{r4, lr}
 800942a:	460c      	mov	r4, r1
 800942c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009430:	f000 f94a 	bl	80096c8 <_read_r>
 8009434:	2800      	cmp	r0, #0
 8009436:	bfab      	itete	ge
 8009438:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800943a:	89a3      	ldrhlt	r3, [r4, #12]
 800943c:	181b      	addge	r3, r3, r0
 800943e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009442:	bfac      	ite	ge
 8009444:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009446:	81a3      	strhlt	r3, [r4, #12]
 8009448:	bd10      	pop	{r4, pc}

0800944a <__swrite>:
 800944a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800944e:	461f      	mov	r7, r3
 8009450:	898b      	ldrh	r3, [r1, #12]
 8009452:	4605      	mov	r5, r0
 8009454:	05db      	lsls	r3, r3, #23
 8009456:	460c      	mov	r4, r1
 8009458:	4616      	mov	r6, r2
 800945a:	d505      	bpl.n	8009468 <__swrite+0x1e>
 800945c:	2302      	movs	r3, #2
 800945e:	2200      	movs	r2, #0
 8009460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009464:	f000 f91e 	bl	80096a4 <_lseek_r>
 8009468:	89a3      	ldrh	r3, [r4, #12]
 800946a:	4632      	mov	r2, r6
 800946c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009470:	81a3      	strh	r3, [r4, #12]
 8009472:	4628      	mov	r0, r5
 8009474:	463b      	mov	r3, r7
 8009476:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800947a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800947e:	f000 b959 	b.w	8009734 <_write_r>

08009482 <__sseek>:
 8009482:	b510      	push	{r4, lr}
 8009484:	460c      	mov	r4, r1
 8009486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800948a:	f000 f90b 	bl	80096a4 <_lseek_r>
 800948e:	1c43      	adds	r3, r0, #1
 8009490:	89a3      	ldrh	r3, [r4, #12]
 8009492:	bf15      	itete	ne
 8009494:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009496:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800949a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800949e:	81a3      	strheq	r3, [r4, #12]
 80094a0:	bf18      	it	ne
 80094a2:	81a3      	strhne	r3, [r4, #12]
 80094a4:	bd10      	pop	{r4, pc}

080094a6 <__sclose>:
 80094a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094aa:	f000 b8eb 	b.w	8009684 <_close_r>

080094ae <__swbuf_r>:
 80094ae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b0:	460e      	mov	r6, r1
 80094b2:	4614      	mov	r4, r2
 80094b4:	4605      	mov	r5, r0
 80094b6:	b118      	cbz	r0, 80094c0 <__swbuf_r+0x12>
 80094b8:	6a03      	ldr	r3, [r0, #32]
 80094ba:	b90b      	cbnz	r3, 80094c0 <__swbuf_r+0x12>
 80094bc:	f7ff ff6c 	bl	8009398 <__sinit>
 80094c0:	69a3      	ldr	r3, [r4, #24]
 80094c2:	60a3      	str	r3, [r4, #8]
 80094c4:	89a3      	ldrh	r3, [r4, #12]
 80094c6:	071a      	lsls	r2, r3, #28
 80094c8:	d501      	bpl.n	80094ce <__swbuf_r+0x20>
 80094ca:	6923      	ldr	r3, [r4, #16]
 80094cc:	b943      	cbnz	r3, 80094e0 <__swbuf_r+0x32>
 80094ce:	4621      	mov	r1, r4
 80094d0:	4628      	mov	r0, r5
 80094d2:	f000 f82b 	bl	800952c <__swsetup_r>
 80094d6:	b118      	cbz	r0, 80094e0 <__swbuf_r+0x32>
 80094d8:	f04f 37ff 	mov.w	r7, #4294967295
 80094dc:	4638      	mov	r0, r7
 80094de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80094e0:	6823      	ldr	r3, [r4, #0]
 80094e2:	6922      	ldr	r2, [r4, #16]
 80094e4:	b2f6      	uxtb	r6, r6
 80094e6:	1a98      	subs	r0, r3, r2
 80094e8:	6963      	ldr	r3, [r4, #20]
 80094ea:	4637      	mov	r7, r6
 80094ec:	4283      	cmp	r3, r0
 80094ee:	dc05      	bgt.n	80094fc <__swbuf_r+0x4e>
 80094f0:	4621      	mov	r1, r4
 80094f2:	4628      	mov	r0, r5
 80094f4:	f7ff fe9c 	bl	8009230 <_fflush_r>
 80094f8:	2800      	cmp	r0, #0
 80094fa:	d1ed      	bne.n	80094d8 <__swbuf_r+0x2a>
 80094fc:	68a3      	ldr	r3, [r4, #8]
 80094fe:	3b01      	subs	r3, #1
 8009500:	60a3      	str	r3, [r4, #8]
 8009502:	6823      	ldr	r3, [r4, #0]
 8009504:	1c5a      	adds	r2, r3, #1
 8009506:	6022      	str	r2, [r4, #0]
 8009508:	701e      	strb	r6, [r3, #0]
 800950a:	6962      	ldr	r2, [r4, #20]
 800950c:	1c43      	adds	r3, r0, #1
 800950e:	429a      	cmp	r2, r3
 8009510:	d004      	beq.n	800951c <__swbuf_r+0x6e>
 8009512:	89a3      	ldrh	r3, [r4, #12]
 8009514:	07db      	lsls	r3, r3, #31
 8009516:	d5e1      	bpl.n	80094dc <__swbuf_r+0x2e>
 8009518:	2e0a      	cmp	r6, #10
 800951a:	d1df      	bne.n	80094dc <__swbuf_r+0x2e>
 800951c:	4621      	mov	r1, r4
 800951e:	4628      	mov	r0, r5
 8009520:	f7ff fe86 	bl	8009230 <_fflush_r>
 8009524:	2800      	cmp	r0, #0
 8009526:	d0d9      	beq.n	80094dc <__swbuf_r+0x2e>
 8009528:	e7d6      	b.n	80094d8 <__swbuf_r+0x2a>
	...

0800952c <__swsetup_r>:
 800952c:	b538      	push	{r3, r4, r5, lr}
 800952e:	4b29      	ldr	r3, [pc, #164]	@ (80095d4 <__swsetup_r+0xa8>)
 8009530:	4605      	mov	r5, r0
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	460c      	mov	r4, r1
 8009536:	b118      	cbz	r0, 8009540 <__swsetup_r+0x14>
 8009538:	6a03      	ldr	r3, [r0, #32]
 800953a:	b90b      	cbnz	r3, 8009540 <__swsetup_r+0x14>
 800953c:	f7ff ff2c 	bl	8009398 <__sinit>
 8009540:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009544:	0719      	lsls	r1, r3, #28
 8009546:	d422      	bmi.n	800958e <__swsetup_r+0x62>
 8009548:	06da      	lsls	r2, r3, #27
 800954a:	d407      	bmi.n	800955c <__swsetup_r+0x30>
 800954c:	2209      	movs	r2, #9
 800954e:	602a      	str	r2, [r5, #0]
 8009550:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	81a3      	strh	r3, [r4, #12]
 800955a:	e033      	b.n	80095c4 <__swsetup_r+0x98>
 800955c:	0758      	lsls	r0, r3, #29
 800955e:	d512      	bpl.n	8009586 <__swsetup_r+0x5a>
 8009560:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009562:	b141      	cbz	r1, 8009576 <__swsetup_r+0x4a>
 8009564:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009568:	4299      	cmp	r1, r3
 800956a:	d002      	beq.n	8009572 <__swsetup_r+0x46>
 800956c:	4628      	mov	r0, r5
 800956e:	f000 ff8f 	bl	800a490 <_free_r>
 8009572:	2300      	movs	r3, #0
 8009574:	6363      	str	r3, [r4, #52]	@ 0x34
 8009576:	89a3      	ldrh	r3, [r4, #12]
 8009578:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800957c:	81a3      	strh	r3, [r4, #12]
 800957e:	2300      	movs	r3, #0
 8009580:	6063      	str	r3, [r4, #4]
 8009582:	6923      	ldr	r3, [r4, #16]
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	f043 0308 	orr.w	r3, r3, #8
 800958c:	81a3      	strh	r3, [r4, #12]
 800958e:	6923      	ldr	r3, [r4, #16]
 8009590:	b94b      	cbnz	r3, 80095a6 <__swsetup_r+0x7a>
 8009592:	89a3      	ldrh	r3, [r4, #12]
 8009594:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009598:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800959c:	d003      	beq.n	80095a6 <__swsetup_r+0x7a>
 800959e:	4621      	mov	r1, r4
 80095a0:	4628      	mov	r0, r5
 80095a2:	f001 fb62 	bl	800ac6a <__smakebuf_r>
 80095a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80095aa:	f013 0201 	ands.w	r2, r3, #1
 80095ae:	d00a      	beq.n	80095c6 <__swsetup_r+0x9a>
 80095b0:	2200      	movs	r2, #0
 80095b2:	60a2      	str	r2, [r4, #8]
 80095b4:	6962      	ldr	r2, [r4, #20]
 80095b6:	4252      	negs	r2, r2
 80095b8:	61a2      	str	r2, [r4, #24]
 80095ba:	6922      	ldr	r2, [r4, #16]
 80095bc:	b942      	cbnz	r2, 80095d0 <__swsetup_r+0xa4>
 80095be:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80095c2:	d1c5      	bne.n	8009550 <__swsetup_r+0x24>
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	0799      	lsls	r1, r3, #30
 80095c8:	bf58      	it	pl
 80095ca:	6962      	ldrpl	r2, [r4, #20]
 80095cc:	60a2      	str	r2, [r4, #8]
 80095ce:	e7f4      	b.n	80095ba <__swsetup_r+0x8e>
 80095d0:	2000      	movs	r0, #0
 80095d2:	e7f7      	b.n	80095c4 <__swsetup_r+0x98>
 80095d4:	20000018 	.word	0x20000018

080095d8 <memmove>:
 80095d8:	4288      	cmp	r0, r1
 80095da:	b510      	push	{r4, lr}
 80095dc:	eb01 0402 	add.w	r4, r1, r2
 80095e0:	d902      	bls.n	80095e8 <memmove+0x10>
 80095e2:	4284      	cmp	r4, r0
 80095e4:	4623      	mov	r3, r4
 80095e6:	d807      	bhi.n	80095f8 <memmove+0x20>
 80095e8:	1e43      	subs	r3, r0, #1
 80095ea:	42a1      	cmp	r1, r4
 80095ec:	d008      	beq.n	8009600 <memmove+0x28>
 80095ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80095f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80095f6:	e7f8      	b.n	80095ea <memmove+0x12>
 80095f8:	4601      	mov	r1, r0
 80095fa:	4402      	add	r2, r0
 80095fc:	428a      	cmp	r2, r1
 80095fe:	d100      	bne.n	8009602 <memmove+0x2a>
 8009600:	bd10      	pop	{r4, pc}
 8009602:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009606:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800960a:	e7f7      	b.n	80095fc <memmove+0x24>

0800960c <memset>:
 800960c:	4603      	mov	r3, r0
 800960e:	4402      	add	r2, r0
 8009610:	4293      	cmp	r3, r2
 8009612:	d100      	bne.n	8009616 <memset+0xa>
 8009614:	4770      	bx	lr
 8009616:	f803 1b01 	strb.w	r1, [r3], #1
 800961a:	e7f9      	b.n	8009610 <memset+0x4>

0800961c <_raise_r>:
 800961c:	291f      	cmp	r1, #31
 800961e:	b538      	push	{r3, r4, r5, lr}
 8009620:	4605      	mov	r5, r0
 8009622:	460c      	mov	r4, r1
 8009624:	d904      	bls.n	8009630 <_raise_r+0x14>
 8009626:	2316      	movs	r3, #22
 8009628:	6003      	str	r3, [r0, #0]
 800962a:	f04f 30ff 	mov.w	r0, #4294967295
 800962e:	bd38      	pop	{r3, r4, r5, pc}
 8009630:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8009632:	b112      	cbz	r2, 800963a <_raise_r+0x1e>
 8009634:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009638:	b94b      	cbnz	r3, 800964e <_raise_r+0x32>
 800963a:	4628      	mov	r0, r5
 800963c:	f000 f868 	bl	8009710 <_getpid_r>
 8009640:	4622      	mov	r2, r4
 8009642:	4601      	mov	r1, r0
 8009644:	4628      	mov	r0, r5
 8009646:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800964a:	f000 b84f 	b.w	80096ec <_kill_r>
 800964e:	2b01      	cmp	r3, #1
 8009650:	d00a      	beq.n	8009668 <_raise_r+0x4c>
 8009652:	1c59      	adds	r1, r3, #1
 8009654:	d103      	bne.n	800965e <_raise_r+0x42>
 8009656:	2316      	movs	r3, #22
 8009658:	6003      	str	r3, [r0, #0]
 800965a:	2001      	movs	r0, #1
 800965c:	e7e7      	b.n	800962e <_raise_r+0x12>
 800965e:	2100      	movs	r1, #0
 8009660:	4620      	mov	r0, r4
 8009662:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8009666:	4798      	blx	r3
 8009668:	2000      	movs	r0, #0
 800966a:	e7e0      	b.n	800962e <_raise_r+0x12>

0800966c <raise>:
 800966c:	4b02      	ldr	r3, [pc, #8]	@ (8009678 <raise+0xc>)
 800966e:	4601      	mov	r1, r0
 8009670:	6818      	ldr	r0, [r3, #0]
 8009672:	f7ff bfd3 	b.w	800961c <_raise_r>
 8009676:	bf00      	nop
 8009678:	20000018 	.word	0x20000018

0800967c <_localeconv_r>:
 800967c:	4800      	ldr	r0, [pc, #0]	@ (8009680 <_localeconv_r+0x4>)
 800967e:	4770      	bx	lr
 8009680:	20000158 	.word	0x20000158

08009684 <_close_r>:
 8009684:	b538      	push	{r3, r4, r5, lr}
 8009686:	2300      	movs	r3, #0
 8009688:	4d05      	ldr	r5, [pc, #20]	@ (80096a0 <_close_r+0x1c>)
 800968a:	4604      	mov	r4, r0
 800968c:	4608      	mov	r0, r1
 800968e:	602b      	str	r3, [r5, #0]
 8009690:	f7f8 f86b 	bl	800176a <_close>
 8009694:	1c43      	adds	r3, r0, #1
 8009696:	d102      	bne.n	800969e <_close_r+0x1a>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	b103      	cbz	r3, 800969e <_close_r+0x1a>
 800969c:	6023      	str	r3, [r4, #0]
 800969e:	bd38      	pop	{r3, r4, r5, pc}
 80096a0:	200004b0 	.word	0x200004b0

080096a4 <_lseek_r>:
 80096a4:	b538      	push	{r3, r4, r5, lr}
 80096a6:	4604      	mov	r4, r0
 80096a8:	4608      	mov	r0, r1
 80096aa:	4611      	mov	r1, r2
 80096ac:	2200      	movs	r2, #0
 80096ae:	4d05      	ldr	r5, [pc, #20]	@ (80096c4 <_lseek_r+0x20>)
 80096b0:	602a      	str	r2, [r5, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	f7f8 f87d 	bl	80017b2 <_lseek>
 80096b8:	1c43      	adds	r3, r0, #1
 80096ba:	d102      	bne.n	80096c2 <_lseek_r+0x1e>
 80096bc:	682b      	ldr	r3, [r5, #0]
 80096be:	b103      	cbz	r3, 80096c2 <_lseek_r+0x1e>
 80096c0:	6023      	str	r3, [r4, #0]
 80096c2:	bd38      	pop	{r3, r4, r5, pc}
 80096c4:	200004b0 	.word	0x200004b0

080096c8 <_read_r>:
 80096c8:	b538      	push	{r3, r4, r5, lr}
 80096ca:	4604      	mov	r4, r0
 80096cc:	4608      	mov	r0, r1
 80096ce:	4611      	mov	r1, r2
 80096d0:	2200      	movs	r2, #0
 80096d2:	4d05      	ldr	r5, [pc, #20]	@ (80096e8 <_read_r+0x20>)
 80096d4:	602a      	str	r2, [r5, #0]
 80096d6:	461a      	mov	r2, r3
 80096d8:	f7f8 f82a 	bl	8001730 <_read>
 80096dc:	1c43      	adds	r3, r0, #1
 80096de:	d102      	bne.n	80096e6 <_read_r+0x1e>
 80096e0:	682b      	ldr	r3, [r5, #0]
 80096e2:	b103      	cbz	r3, 80096e6 <_read_r+0x1e>
 80096e4:	6023      	str	r3, [r4, #0]
 80096e6:	bd38      	pop	{r3, r4, r5, pc}
 80096e8:	200004b0 	.word	0x200004b0

080096ec <_kill_r>:
 80096ec:	b538      	push	{r3, r4, r5, lr}
 80096ee:	2300      	movs	r3, #0
 80096f0:	4d06      	ldr	r5, [pc, #24]	@ (800970c <_kill_r+0x20>)
 80096f2:	4604      	mov	r4, r0
 80096f4:	4608      	mov	r0, r1
 80096f6:	4611      	mov	r1, r2
 80096f8:	602b      	str	r3, [r5, #0]
 80096fa:	f7f7 fffe 	bl	80016fa <_kill>
 80096fe:	1c43      	adds	r3, r0, #1
 8009700:	d102      	bne.n	8009708 <_kill_r+0x1c>
 8009702:	682b      	ldr	r3, [r5, #0]
 8009704:	b103      	cbz	r3, 8009708 <_kill_r+0x1c>
 8009706:	6023      	str	r3, [r4, #0]
 8009708:	bd38      	pop	{r3, r4, r5, pc}
 800970a:	bf00      	nop
 800970c:	200004b0 	.word	0x200004b0

08009710 <_getpid_r>:
 8009710:	f7f7 bfec 	b.w	80016ec <_getpid>

08009714 <_sbrk_r>:
 8009714:	b538      	push	{r3, r4, r5, lr}
 8009716:	2300      	movs	r3, #0
 8009718:	4d05      	ldr	r5, [pc, #20]	@ (8009730 <_sbrk_r+0x1c>)
 800971a:	4604      	mov	r4, r0
 800971c:	4608      	mov	r0, r1
 800971e:	602b      	str	r3, [r5, #0]
 8009720:	f7f8 f854 	bl	80017cc <_sbrk>
 8009724:	1c43      	adds	r3, r0, #1
 8009726:	d102      	bne.n	800972e <_sbrk_r+0x1a>
 8009728:	682b      	ldr	r3, [r5, #0]
 800972a:	b103      	cbz	r3, 800972e <_sbrk_r+0x1a>
 800972c:	6023      	str	r3, [r4, #0]
 800972e:	bd38      	pop	{r3, r4, r5, pc}
 8009730:	200004b0 	.word	0x200004b0

08009734 <_write_r>:
 8009734:	b538      	push	{r3, r4, r5, lr}
 8009736:	4604      	mov	r4, r0
 8009738:	4608      	mov	r0, r1
 800973a:	4611      	mov	r1, r2
 800973c:	2200      	movs	r2, #0
 800973e:	4d05      	ldr	r5, [pc, #20]	@ (8009754 <_write_r+0x20>)
 8009740:	602a      	str	r2, [r5, #0]
 8009742:	461a      	mov	r2, r3
 8009744:	f7fd fa84 	bl	8006c50 <_write>
 8009748:	1c43      	adds	r3, r0, #1
 800974a:	d102      	bne.n	8009752 <_write_r+0x1e>
 800974c:	682b      	ldr	r3, [r5, #0]
 800974e:	b103      	cbz	r3, 8009752 <_write_r+0x1e>
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	bd38      	pop	{r3, r4, r5, pc}
 8009754:	200004b0 	.word	0x200004b0

08009758 <__errno>:
 8009758:	4b01      	ldr	r3, [pc, #4]	@ (8009760 <__errno+0x8>)
 800975a:	6818      	ldr	r0, [r3, #0]
 800975c:	4770      	bx	lr
 800975e:	bf00      	nop
 8009760:	20000018 	.word	0x20000018

08009764 <__libc_init_array>:
 8009764:	b570      	push	{r4, r5, r6, lr}
 8009766:	2600      	movs	r6, #0
 8009768:	4d0c      	ldr	r5, [pc, #48]	@ (800979c <__libc_init_array+0x38>)
 800976a:	4c0d      	ldr	r4, [pc, #52]	@ (80097a0 <__libc_init_array+0x3c>)
 800976c:	1b64      	subs	r4, r4, r5
 800976e:	10a4      	asrs	r4, r4, #2
 8009770:	42a6      	cmp	r6, r4
 8009772:	d109      	bne.n	8009788 <__libc_init_array+0x24>
 8009774:	f001 faf8 	bl	800ad68 <_init>
 8009778:	2600      	movs	r6, #0
 800977a:	4d0a      	ldr	r5, [pc, #40]	@ (80097a4 <__libc_init_array+0x40>)
 800977c:	4c0a      	ldr	r4, [pc, #40]	@ (80097a8 <__libc_init_array+0x44>)
 800977e:	1b64      	subs	r4, r4, r5
 8009780:	10a4      	asrs	r4, r4, #2
 8009782:	42a6      	cmp	r6, r4
 8009784:	d105      	bne.n	8009792 <__libc_init_array+0x2e>
 8009786:	bd70      	pop	{r4, r5, r6, pc}
 8009788:	f855 3b04 	ldr.w	r3, [r5], #4
 800978c:	4798      	blx	r3
 800978e:	3601      	adds	r6, #1
 8009790:	e7ee      	b.n	8009770 <__libc_init_array+0xc>
 8009792:	f855 3b04 	ldr.w	r3, [r5], #4
 8009796:	4798      	blx	r3
 8009798:	3601      	adds	r6, #1
 800979a:	e7f2      	b.n	8009782 <__libc_init_array+0x1e>
 800979c:	0800b354 	.word	0x0800b354
 80097a0:	0800b354 	.word	0x0800b354
 80097a4:	0800b354 	.word	0x0800b354
 80097a8:	0800b35c 	.word	0x0800b35c

080097ac <__retarget_lock_init_recursive>:
 80097ac:	4770      	bx	lr

080097ae <__retarget_lock_acquire_recursive>:
 80097ae:	4770      	bx	lr

080097b0 <__retarget_lock_release_recursive>:
 80097b0:	4770      	bx	lr

080097b2 <memchr>:
 80097b2:	4603      	mov	r3, r0
 80097b4:	b510      	push	{r4, lr}
 80097b6:	b2c9      	uxtb	r1, r1
 80097b8:	4402      	add	r2, r0
 80097ba:	4293      	cmp	r3, r2
 80097bc:	4618      	mov	r0, r3
 80097be:	d101      	bne.n	80097c4 <memchr+0x12>
 80097c0:	2000      	movs	r0, #0
 80097c2:	e003      	b.n	80097cc <memchr+0x1a>
 80097c4:	7804      	ldrb	r4, [r0, #0]
 80097c6:	3301      	adds	r3, #1
 80097c8:	428c      	cmp	r4, r1
 80097ca:	d1f6      	bne.n	80097ba <memchr+0x8>
 80097cc:	bd10      	pop	{r4, pc}

080097ce <memcpy>:
 80097ce:	440a      	add	r2, r1
 80097d0:	4291      	cmp	r1, r2
 80097d2:	f100 33ff 	add.w	r3, r0, #4294967295
 80097d6:	d100      	bne.n	80097da <memcpy+0xc>
 80097d8:	4770      	bx	lr
 80097da:	b510      	push	{r4, lr}
 80097dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80097e0:	4291      	cmp	r1, r2
 80097e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80097e6:	d1f9      	bne.n	80097dc <memcpy+0xe>
 80097e8:	bd10      	pop	{r4, pc}

080097ea <quorem>:
 80097ea:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ee:	6903      	ldr	r3, [r0, #16]
 80097f0:	690c      	ldr	r4, [r1, #16]
 80097f2:	4607      	mov	r7, r0
 80097f4:	42a3      	cmp	r3, r4
 80097f6:	db7e      	blt.n	80098f6 <quorem+0x10c>
 80097f8:	3c01      	subs	r4, #1
 80097fa:	00a3      	lsls	r3, r4, #2
 80097fc:	f100 0514 	add.w	r5, r0, #20
 8009800:	f101 0814 	add.w	r8, r1, #20
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800980a:	9301      	str	r3, [sp, #4]
 800980c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009814:	3301      	adds	r3, #1
 8009816:	429a      	cmp	r2, r3
 8009818:	fbb2 f6f3 	udiv	r6, r2, r3
 800981c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009820:	d32e      	bcc.n	8009880 <quorem+0x96>
 8009822:	f04f 0a00 	mov.w	sl, #0
 8009826:	46c4      	mov	ip, r8
 8009828:	46ae      	mov	lr, r5
 800982a:	46d3      	mov	fp, sl
 800982c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009830:	b298      	uxth	r0, r3
 8009832:	fb06 a000 	mla	r0, r6, r0, sl
 8009836:	0c1b      	lsrs	r3, r3, #16
 8009838:	0c02      	lsrs	r2, r0, #16
 800983a:	fb06 2303 	mla	r3, r6, r3, r2
 800983e:	f8de 2000 	ldr.w	r2, [lr]
 8009842:	b280      	uxth	r0, r0
 8009844:	b292      	uxth	r2, r2
 8009846:	1a12      	subs	r2, r2, r0
 8009848:	445a      	add	r2, fp
 800984a:	f8de 0000 	ldr.w	r0, [lr]
 800984e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009852:	b29b      	uxth	r3, r3
 8009854:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009858:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800985c:	b292      	uxth	r2, r2
 800985e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009862:	45e1      	cmp	r9, ip
 8009864:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8009868:	f84e 2b04 	str.w	r2, [lr], #4
 800986c:	d2de      	bcs.n	800982c <quorem+0x42>
 800986e:	9b00      	ldr	r3, [sp, #0]
 8009870:	58eb      	ldr	r3, [r5, r3]
 8009872:	b92b      	cbnz	r3, 8009880 <quorem+0x96>
 8009874:	9b01      	ldr	r3, [sp, #4]
 8009876:	3b04      	subs	r3, #4
 8009878:	429d      	cmp	r5, r3
 800987a:	461a      	mov	r2, r3
 800987c:	d32f      	bcc.n	80098de <quorem+0xf4>
 800987e:	613c      	str	r4, [r7, #16]
 8009880:	4638      	mov	r0, r7
 8009882:	f001 f8c5 	bl	800aa10 <__mcmp>
 8009886:	2800      	cmp	r0, #0
 8009888:	db25      	blt.n	80098d6 <quorem+0xec>
 800988a:	4629      	mov	r1, r5
 800988c:	2000      	movs	r0, #0
 800988e:	f858 2b04 	ldr.w	r2, [r8], #4
 8009892:	f8d1 c000 	ldr.w	ip, [r1]
 8009896:	fa1f fe82 	uxth.w	lr, r2
 800989a:	fa1f f38c 	uxth.w	r3, ip
 800989e:	eba3 030e 	sub.w	r3, r3, lr
 80098a2:	4403      	add	r3, r0
 80098a4:	0c12      	lsrs	r2, r2, #16
 80098a6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80098aa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80098b4:	45c1      	cmp	r9, r8
 80098b6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80098ba:	f841 3b04 	str.w	r3, [r1], #4
 80098be:	d2e6      	bcs.n	800988e <quorem+0xa4>
 80098c0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80098c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80098c8:	b922      	cbnz	r2, 80098d4 <quorem+0xea>
 80098ca:	3b04      	subs	r3, #4
 80098cc:	429d      	cmp	r5, r3
 80098ce:	461a      	mov	r2, r3
 80098d0:	d30b      	bcc.n	80098ea <quorem+0x100>
 80098d2:	613c      	str	r4, [r7, #16]
 80098d4:	3601      	adds	r6, #1
 80098d6:	4630      	mov	r0, r6
 80098d8:	b003      	add	sp, #12
 80098da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098de:	6812      	ldr	r2, [r2, #0]
 80098e0:	3b04      	subs	r3, #4
 80098e2:	2a00      	cmp	r2, #0
 80098e4:	d1cb      	bne.n	800987e <quorem+0x94>
 80098e6:	3c01      	subs	r4, #1
 80098e8:	e7c6      	b.n	8009878 <quorem+0x8e>
 80098ea:	6812      	ldr	r2, [r2, #0]
 80098ec:	3b04      	subs	r3, #4
 80098ee:	2a00      	cmp	r2, #0
 80098f0:	d1ef      	bne.n	80098d2 <quorem+0xe8>
 80098f2:	3c01      	subs	r4, #1
 80098f4:	e7ea      	b.n	80098cc <quorem+0xe2>
 80098f6:	2000      	movs	r0, #0
 80098f8:	e7ee      	b.n	80098d8 <quorem+0xee>
 80098fa:	0000      	movs	r0, r0
 80098fc:	0000      	movs	r0, r0
	...

08009900 <_dtoa_r>:
 8009900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	4614      	mov	r4, r2
 8009906:	461d      	mov	r5, r3
 8009908:	69c7      	ldr	r7, [r0, #28]
 800990a:	b097      	sub	sp, #92	@ 0x5c
 800990c:	4683      	mov	fp, r0
 800990e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8009912:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8009914:	b97f      	cbnz	r7, 8009936 <_dtoa_r+0x36>
 8009916:	2010      	movs	r0, #16
 8009918:	f7fe fdb0 	bl	800847c <malloc>
 800991c:	4602      	mov	r2, r0
 800991e:	f8cb 001c 	str.w	r0, [fp, #28]
 8009922:	b920      	cbnz	r0, 800992e <_dtoa_r+0x2e>
 8009924:	21ef      	movs	r1, #239	@ 0xef
 8009926:	4ba8      	ldr	r3, [pc, #672]	@ (8009bc8 <_dtoa_r+0x2c8>)
 8009928:	48a8      	ldr	r0, [pc, #672]	@ (8009bcc <_dtoa_r+0x2cc>)
 800992a:	f7fe fd6d 	bl	8008408 <__assert_func>
 800992e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009932:	6007      	str	r7, [r0, #0]
 8009934:	60c7      	str	r7, [r0, #12]
 8009936:	f8db 301c 	ldr.w	r3, [fp, #28]
 800993a:	6819      	ldr	r1, [r3, #0]
 800993c:	b159      	cbz	r1, 8009956 <_dtoa_r+0x56>
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	2301      	movs	r3, #1
 8009942:	4093      	lsls	r3, r2
 8009944:	604a      	str	r2, [r1, #4]
 8009946:	608b      	str	r3, [r1, #8]
 8009948:	4658      	mov	r0, fp
 800994a:	f000 fe29 	bl	800a5a0 <_Bfree>
 800994e:	2200      	movs	r2, #0
 8009950:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009954:	601a      	str	r2, [r3, #0]
 8009956:	1e2b      	subs	r3, r5, #0
 8009958:	bfaf      	iteee	ge
 800995a:	2300      	movge	r3, #0
 800995c:	2201      	movlt	r2, #1
 800995e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009962:	9303      	strlt	r3, [sp, #12]
 8009964:	bfa8      	it	ge
 8009966:	6033      	strge	r3, [r6, #0]
 8009968:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800996c:	4b98      	ldr	r3, [pc, #608]	@ (8009bd0 <_dtoa_r+0x2d0>)
 800996e:	bfb8      	it	lt
 8009970:	6032      	strlt	r2, [r6, #0]
 8009972:	ea33 0308 	bics.w	r3, r3, r8
 8009976:	d112      	bne.n	800999e <_dtoa_r+0x9e>
 8009978:	f242 730f 	movw	r3, #9999	@ 0x270f
 800997c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800997e:	6013      	str	r3, [r2, #0]
 8009980:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8009984:	4323      	orrs	r3, r4
 8009986:	f000 8550 	beq.w	800a42a <_dtoa_r+0xb2a>
 800998a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800998c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8009bd4 <_dtoa_r+0x2d4>
 8009990:	2b00      	cmp	r3, #0
 8009992:	f000 8552 	beq.w	800a43a <_dtoa_r+0xb3a>
 8009996:	f10a 0303 	add.w	r3, sl, #3
 800999a:	f000 bd4c 	b.w	800a436 <_dtoa_r+0xb36>
 800999e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80099a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099aa:	2200      	movs	r2, #0
 80099ac:	2300      	movs	r3, #0
 80099ae:	f7f6 fffb 	bl	80009a8 <__aeabi_dcmpeq>
 80099b2:	4607      	mov	r7, r0
 80099b4:	b158      	cbz	r0, 80099ce <_dtoa_r+0xce>
 80099b6:	2301      	movs	r3, #1
 80099b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80099ba:	6013      	str	r3, [r2, #0]
 80099bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80099be:	b113      	cbz	r3, 80099c6 <_dtoa_r+0xc6>
 80099c0:	4b85      	ldr	r3, [pc, #532]	@ (8009bd8 <_dtoa_r+0x2d8>)
 80099c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80099c4:	6013      	str	r3, [r2, #0]
 80099c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8009bdc <_dtoa_r+0x2dc>
 80099ca:	f000 bd36 	b.w	800a43a <_dtoa_r+0xb3a>
 80099ce:	ab14      	add	r3, sp, #80	@ 0x50
 80099d0:	9301      	str	r3, [sp, #4]
 80099d2:	ab15      	add	r3, sp, #84	@ 0x54
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	4658      	mov	r0, fp
 80099d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80099dc:	f001 f8c8 	bl	800ab70 <__d2b>
 80099e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80099e4:	4681      	mov	r9, r0
 80099e6:	2e00      	cmp	r6, #0
 80099e8:	d077      	beq.n	8009ada <_dtoa_r+0x1da>
 80099ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80099f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80099f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80099f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80099fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009a00:	9712      	str	r7, [sp, #72]	@ 0x48
 8009a02:	4619      	mov	r1, r3
 8009a04:	2200      	movs	r2, #0
 8009a06:	4b76      	ldr	r3, [pc, #472]	@ (8009be0 <_dtoa_r+0x2e0>)
 8009a08:	f7f6 fbae 	bl	8000168 <__aeabi_dsub>
 8009a0c:	a368      	add	r3, pc, #416	@ (adr r3, 8009bb0 <_dtoa_r+0x2b0>)
 8009a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a12:	f7f6 fd61 	bl	80004d8 <__aeabi_dmul>
 8009a16:	a368      	add	r3, pc, #416	@ (adr r3, 8009bb8 <_dtoa_r+0x2b8>)
 8009a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a1c:	f7f6 fba6 	bl	800016c <__adddf3>
 8009a20:	4604      	mov	r4, r0
 8009a22:	4630      	mov	r0, r6
 8009a24:	460d      	mov	r5, r1
 8009a26:	f7f6 fced 	bl	8000404 <__aeabi_i2d>
 8009a2a:	a365      	add	r3, pc, #404	@ (adr r3, 8009bc0 <_dtoa_r+0x2c0>)
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f7f6 fd52 	bl	80004d8 <__aeabi_dmul>
 8009a34:	4602      	mov	r2, r0
 8009a36:	460b      	mov	r3, r1
 8009a38:	4620      	mov	r0, r4
 8009a3a:	4629      	mov	r1, r5
 8009a3c:	f7f6 fb96 	bl	800016c <__adddf3>
 8009a40:	4604      	mov	r4, r0
 8009a42:	460d      	mov	r5, r1
 8009a44:	f7f6 fff8 	bl	8000a38 <__aeabi_d2iz>
 8009a48:	2200      	movs	r2, #0
 8009a4a:	4607      	mov	r7, r0
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	4620      	mov	r0, r4
 8009a50:	4629      	mov	r1, r5
 8009a52:	f7f6 ffb3 	bl	80009bc <__aeabi_dcmplt>
 8009a56:	b140      	cbz	r0, 8009a6a <_dtoa_r+0x16a>
 8009a58:	4638      	mov	r0, r7
 8009a5a:	f7f6 fcd3 	bl	8000404 <__aeabi_i2d>
 8009a5e:	4622      	mov	r2, r4
 8009a60:	462b      	mov	r3, r5
 8009a62:	f7f6 ffa1 	bl	80009a8 <__aeabi_dcmpeq>
 8009a66:	b900      	cbnz	r0, 8009a6a <_dtoa_r+0x16a>
 8009a68:	3f01      	subs	r7, #1
 8009a6a:	2f16      	cmp	r7, #22
 8009a6c:	d853      	bhi.n	8009b16 <_dtoa_r+0x216>
 8009a6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a72:	4b5c      	ldr	r3, [pc, #368]	@ (8009be4 <_dtoa_r+0x2e4>)
 8009a74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f6 ff9e 	bl	80009bc <__aeabi_dcmplt>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	d04a      	beq.n	8009b1a <_dtoa_r+0x21a>
 8009a84:	2300      	movs	r3, #0
 8009a86:	3f01      	subs	r7, #1
 8009a88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009a8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009a8c:	1b9b      	subs	r3, r3, r6
 8009a8e:	1e5a      	subs	r2, r3, #1
 8009a90:	bf46      	itte	mi
 8009a92:	f1c3 0801 	rsbmi	r8, r3, #1
 8009a96:	2300      	movmi	r3, #0
 8009a98:	f04f 0800 	movpl.w	r8, #0
 8009a9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a9e:	bf48      	it	mi
 8009aa0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8009aa2:	2f00      	cmp	r7, #0
 8009aa4:	db3b      	blt.n	8009b1e <_dtoa_r+0x21e>
 8009aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009aa8:	970e      	str	r7, [sp, #56]	@ 0x38
 8009aaa:	443b      	add	r3, r7
 8009aac:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aae:	2300      	movs	r3, #0
 8009ab0:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ab2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ab4:	2b09      	cmp	r3, #9
 8009ab6:	d866      	bhi.n	8009b86 <_dtoa_r+0x286>
 8009ab8:	2b05      	cmp	r3, #5
 8009aba:	bfc4      	itt	gt
 8009abc:	3b04      	subgt	r3, #4
 8009abe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8009ac0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009ac2:	bfc8      	it	gt
 8009ac4:	2400      	movgt	r4, #0
 8009ac6:	f1a3 0302 	sub.w	r3, r3, #2
 8009aca:	bfd8      	it	le
 8009acc:	2401      	movle	r4, #1
 8009ace:	2b03      	cmp	r3, #3
 8009ad0:	d864      	bhi.n	8009b9c <_dtoa_r+0x29c>
 8009ad2:	e8df f003 	tbb	[pc, r3]
 8009ad6:	382b      	.short	0x382b
 8009ad8:	5636      	.short	0x5636
 8009ada:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009ade:	441e      	add	r6, r3
 8009ae0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009ae4:	2b20      	cmp	r3, #32
 8009ae6:	bfc1      	itttt	gt
 8009ae8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009aec:	fa08 f803 	lslgt.w	r8, r8, r3
 8009af0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009af4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009af8:	bfd6      	itet	le
 8009afa:	f1c3 0320 	rsble	r3, r3, #32
 8009afe:	ea48 0003 	orrgt.w	r0, r8, r3
 8009b02:	fa04 f003 	lslle.w	r0, r4, r3
 8009b06:	f7f6 fc6d 	bl	80003e4 <__aeabi_ui2d>
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009b10:	3e01      	subs	r6, #1
 8009b12:	9212      	str	r2, [sp, #72]	@ 0x48
 8009b14:	e775      	b.n	8009a02 <_dtoa_r+0x102>
 8009b16:	2301      	movs	r3, #1
 8009b18:	e7b6      	b.n	8009a88 <_dtoa_r+0x188>
 8009b1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009b1c:	e7b5      	b.n	8009a8a <_dtoa_r+0x18a>
 8009b1e:	427b      	negs	r3, r7
 8009b20:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b22:	2300      	movs	r3, #0
 8009b24:	eba8 0807 	sub.w	r8, r8, r7
 8009b28:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b2a:	e7c2      	b.n	8009ab2 <_dtoa_r+0x1b2>
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dc35      	bgt.n	8009ba2 <_dtoa_r+0x2a2>
 8009b36:	2301      	movs	r3, #1
 8009b38:	461a      	mov	r2, r3
 8009b3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009b3e:	9221      	str	r2, [sp, #132]	@ 0x84
 8009b40:	e00b      	b.n	8009b5a <_dtoa_r+0x25a>
 8009b42:	2301      	movs	r3, #1
 8009b44:	e7f3      	b.n	8009b2e <_dtoa_r+0x22e>
 8009b46:	2300      	movs	r3, #0
 8009b48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009b4c:	18fb      	adds	r3, r7, r3
 8009b4e:	9308      	str	r3, [sp, #32]
 8009b50:	3301      	adds	r3, #1
 8009b52:	2b01      	cmp	r3, #1
 8009b54:	9307      	str	r3, [sp, #28]
 8009b56:	bfb8      	it	lt
 8009b58:	2301      	movlt	r3, #1
 8009b5a:	2100      	movs	r1, #0
 8009b5c:	2204      	movs	r2, #4
 8009b5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009b62:	f102 0514 	add.w	r5, r2, #20
 8009b66:	429d      	cmp	r5, r3
 8009b68:	d91f      	bls.n	8009baa <_dtoa_r+0x2aa>
 8009b6a:	6041      	str	r1, [r0, #4]
 8009b6c:	4658      	mov	r0, fp
 8009b6e:	f000 fcd7 	bl	800a520 <_Balloc>
 8009b72:	4682      	mov	sl, r0
 8009b74:	2800      	cmp	r0, #0
 8009b76:	d139      	bne.n	8009bec <_dtoa_r+0x2ec>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8009b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8009be8 <_dtoa_r+0x2e8>)
 8009b80:	e6d2      	b.n	8009928 <_dtoa_r+0x28>
 8009b82:	2301      	movs	r3, #1
 8009b84:	e7e0      	b.n	8009b48 <_dtoa_r+0x248>
 8009b86:	2401      	movs	r4, #1
 8009b88:	2300      	movs	r3, #0
 8009b8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009b8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8009b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8009b92:	2200      	movs	r2, #0
 8009b94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009b98:	2312      	movs	r3, #18
 8009b9a:	e7d0      	b.n	8009b3e <_dtoa_r+0x23e>
 8009b9c:	2301      	movs	r3, #1
 8009b9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ba0:	e7f5      	b.n	8009b8e <_dtoa_r+0x28e>
 8009ba2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009ba4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8009ba8:	e7d7      	b.n	8009b5a <_dtoa_r+0x25a>
 8009baa:	3101      	adds	r1, #1
 8009bac:	0052      	lsls	r2, r2, #1
 8009bae:	e7d8      	b.n	8009b62 <_dtoa_r+0x262>
 8009bb0:	636f4361 	.word	0x636f4361
 8009bb4:	3fd287a7 	.word	0x3fd287a7
 8009bb8:	8b60c8b3 	.word	0x8b60c8b3
 8009bbc:	3fc68a28 	.word	0x3fc68a28
 8009bc0:	509f79fb 	.word	0x509f79fb
 8009bc4:	3fd34413 	.word	0x3fd34413
 8009bc8:	0800b066 	.word	0x0800b066
 8009bcc:	0800b07d 	.word	0x0800b07d
 8009bd0:	7ff00000 	.word	0x7ff00000
 8009bd4:	0800b062 	.word	0x0800b062
 8009bd8:	0800b025 	.word	0x0800b025
 8009bdc:	0800b024 	.word	0x0800b024
 8009be0:	3ff80000 	.word	0x3ff80000
 8009be4:	0800b178 	.word	0x0800b178
 8009be8:	0800b0d5 	.word	0x0800b0d5
 8009bec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009bf0:	6018      	str	r0, [r3, #0]
 8009bf2:	9b07      	ldr	r3, [sp, #28]
 8009bf4:	2b0e      	cmp	r3, #14
 8009bf6:	f200 80a4 	bhi.w	8009d42 <_dtoa_r+0x442>
 8009bfa:	2c00      	cmp	r4, #0
 8009bfc:	f000 80a1 	beq.w	8009d42 <_dtoa_r+0x442>
 8009c00:	2f00      	cmp	r7, #0
 8009c02:	dd33      	ble.n	8009c6c <_dtoa_r+0x36c>
 8009c04:	4b86      	ldr	r3, [pc, #536]	@ (8009e20 <_dtoa_r+0x520>)
 8009c06:	f007 020f 	and.w	r2, r7, #15
 8009c0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c0e:	05f8      	lsls	r0, r7, #23
 8009c10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009c1c:	d516      	bpl.n	8009c4c <_dtoa_r+0x34c>
 8009c1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c22:	4b80      	ldr	r3, [pc, #512]	@ (8009e24 <_dtoa_r+0x524>)
 8009c24:	2603      	movs	r6, #3
 8009c26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009c2a:	f7f6 fd7f 	bl	800072c <__aeabi_ddiv>
 8009c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c32:	f004 040f 	and.w	r4, r4, #15
 8009c36:	4d7b      	ldr	r5, [pc, #492]	@ (8009e24 <_dtoa_r+0x524>)
 8009c38:	b954      	cbnz	r4, 8009c50 <_dtoa_r+0x350>
 8009c3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c42:	f7f6 fd73 	bl	800072c <__aeabi_ddiv>
 8009c46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c4a:	e028      	b.n	8009c9e <_dtoa_r+0x39e>
 8009c4c:	2602      	movs	r6, #2
 8009c4e:	e7f2      	b.n	8009c36 <_dtoa_r+0x336>
 8009c50:	07e1      	lsls	r1, r4, #31
 8009c52:	d508      	bpl.n	8009c66 <_dtoa_r+0x366>
 8009c54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009c5c:	f7f6 fc3c 	bl	80004d8 <__aeabi_dmul>
 8009c60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c64:	3601      	adds	r6, #1
 8009c66:	1064      	asrs	r4, r4, #1
 8009c68:	3508      	adds	r5, #8
 8009c6a:	e7e5      	b.n	8009c38 <_dtoa_r+0x338>
 8009c6c:	f000 80d2 	beq.w	8009e14 <_dtoa_r+0x514>
 8009c70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c74:	427c      	negs	r4, r7
 8009c76:	4b6a      	ldr	r3, [pc, #424]	@ (8009e20 <_dtoa_r+0x520>)
 8009c78:	f004 020f 	and.w	r2, r4, #15
 8009c7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c84:	f7f6 fc28 	bl	80004d8 <__aeabi_dmul>
 8009c88:	2602      	movs	r6, #2
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c90:	4d64      	ldr	r5, [pc, #400]	@ (8009e24 <_dtoa_r+0x524>)
 8009c92:	1124      	asrs	r4, r4, #4
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	f040 80b2 	bne.w	8009dfe <_dtoa_r+0x4fe>
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d1d3      	bne.n	8009c46 <_dtoa_r+0x346>
 8009c9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ca2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	f000 80b7 	beq.w	8009e18 <_dtoa_r+0x518>
 8009caa:	2200      	movs	r2, #0
 8009cac:	4620      	mov	r0, r4
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4b5d      	ldr	r3, [pc, #372]	@ (8009e28 <_dtoa_r+0x528>)
 8009cb2:	f7f6 fe83 	bl	80009bc <__aeabi_dcmplt>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	f000 80ae 	beq.w	8009e18 <_dtoa_r+0x518>
 8009cbc:	9b07      	ldr	r3, [sp, #28]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	f000 80aa 	beq.w	8009e18 <_dtoa_r+0x518>
 8009cc4:	9b08      	ldr	r3, [sp, #32]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dd37      	ble.n	8009d3a <_dtoa_r+0x43a>
 8009cca:	1e7b      	subs	r3, r7, #1
 8009ccc:	4620      	mov	r0, r4
 8009cce:	9304      	str	r3, [sp, #16]
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	4629      	mov	r1, r5
 8009cd4:	4b55      	ldr	r3, [pc, #340]	@ (8009e2c <_dtoa_r+0x52c>)
 8009cd6:	f7f6 fbff 	bl	80004d8 <__aeabi_dmul>
 8009cda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cde:	9c08      	ldr	r4, [sp, #32]
 8009ce0:	3601      	adds	r6, #1
 8009ce2:	4630      	mov	r0, r6
 8009ce4:	f7f6 fb8e 	bl	8000404 <__aeabi_i2d>
 8009ce8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cec:	f7f6 fbf4 	bl	80004d8 <__aeabi_dmul>
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8009e30 <_dtoa_r+0x530>)
 8009cf4:	f7f6 fa3a 	bl	800016c <__adddf3>
 8009cf8:	4605      	mov	r5, r0
 8009cfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009cfe:	2c00      	cmp	r4, #0
 8009d00:	f040 809a 	bne.w	8009e38 <_dtoa_r+0x538>
 8009d04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	4b4a      	ldr	r3, [pc, #296]	@ (8009e34 <_dtoa_r+0x534>)
 8009d0c:	f7f6 fa2c 	bl	8000168 <__aeabi_dsub>
 8009d10:	4602      	mov	r2, r0
 8009d12:	460b      	mov	r3, r1
 8009d14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009d18:	462a      	mov	r2, r5
 8009d1a:	4633      	mov	r3, r6
 8009d1c:	f7f6 fe6c 	bl	80009f8 <__aeabi_dcmpgt>
 8009d20:	2800      	cmp	r0, #0
 8009d22:	f040 828e 	bne.w	800a242 <_dtoa_r+0x942>
 8009d26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009d30:	f7f6 fe44 	bl	80009bc <__aeabi_dcmplt>
 8009d34:	2800      	cmp	r0, #0
 8009d36:	f040 8127 	bne.w	8009f88 <_dtoa_r+0x688>
 8009d3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009d3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009d42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	f2c0 8163 	blt.w	800a010 <_dtoa_r+0x710>
 8009d4a:	2f0e      	cmp	r7, #14
 8009d4c:	f300 8160 	bgt.w	800a010 <_dtoa_r+0x710>
 8009d50:	4b33      	ldr	r3, [pc, #204]	@ (8009e20 <_dtoa_r+0x520>)
 8009d52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009d56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009d5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	da03      	bge.n	8009d6c <_dtoa_r+0x46c>
 8009d64:	9b07      	ldr	r3, [sp, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	f340 8100 	ble.w	8009f6c <_dtoa_r+0x66c>
 8009d6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009d70:	4656      	mov	r6, sl
 8009d72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d76:	4620      	mov	r0, r4
 8009d78:	4629      	mov	r1, r5
 8009d7a:	f7f6 fcd7 	bl	800072c <__aeabi_ddiv>
 8009d7e:	f7f6 fe5b 	bl	8000a38 <__aeabi_d2iz>
 8009d82:	4680      	mov	r8, r0
 8009d84:	f7f6 fb3e 	bl	8000404 <__aeabi_i2d>
 8009d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d8c:	f7f6 fba4 	bl	80004d8 <__aeabi_dmul>
 8009d90:	4602      	mov	r2, r0
 8009d92:	460b      	mov	r3, r1
 8009d94:	4620      	mov	r0, r4
 8009d96:	4629      	mov	r1, r5
 8009d98:	f7f6 f9e6 	bl	8000168 <__aeabi_dsub>
 8009d9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009da0:	9d07      	ldr	r5, [sp, #28]
 8009da2:	f806 4b01 	strb.w	r4, [r6], #1
 8009da6:	eba6 040a 	sub.w	r4, r6, sl
 8009daa:	42a5      	cmp	r5, r4
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	f040 8116 	bne.w	8009fe0 <_dtoa_r+0x6e0>
 8009db4:	f7f6 f9da 	bl	800016c <__adddf3>
 8009db8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dbc:	4604      	mov	r4, r0
 8009dbe:	460d      	mov	r5, r1
 8009dc0:	f7f6 fe1a 	bl	80009f8 <__aeabi_dcmpgt>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	f040 80f8 	bne.w	8009fba <_dtoa_r+0x6ba>
 8009dca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009dce:	4620      	mov	r0, r4
 8009dd0:	4629      	mov	r1, r5
 8009dd2:	f7f6 fde9 	bl	80009a8 <__aeabi_dcmpeq>
 8009dd6:	b118      	cbz	r0, 8009de0 <_dtoa_r+0x4e0>
 8009dd8:	f018 0f01 	tst.w	r8, #1
 8009ddc:	f040 80ed 	bne.w	8009fba <_dtoa_r+0x6ba>
 8009de0:	4649      	mov	r1, r9
 8009de2:	4658      	mov	r0, fp
 8009de4:	f000 fbdc 	bl	800a5a0 <_Bfree>
 8009de8:	2300      	movs	r3, #0
 8009dea:	7033      	strb	r3, [r6, #0]
 8009dec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8009dee:	3701      	adds	r7, #1
 8009df0:	601f      	str	r7, [r3, #0]
 8009df2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	f000 8320 	beq.w	800a43a <_dtoa_r+0xb3a>
 8009dfa:	601e      	str	r6, [r3, #0]
 8009dfc:	e31d      	b.n	800a43a <_dtoa_r+0xb3a>
 8009dfe:	07e2      	lsls	r2, r4, #31
 8009e00:	d505      	bpl.n	8009e0e <_dtoa_r+0x50e>
 8009e02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009e06:	f7f6 fb67 	bl	80004d8 <__aeabi_dmul>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	3601      	adds	r6, #1
 8009e0e:	1064      	asrs	r4, r4, #1
 8009e10:	3508      	adds	r5, #8
 8009e12:	e73f      	b.n	8009c94 <_dtoa_r+0x394>
 8009e14:	2602      	movs	r6, #2
 8009e16:	e742      	b.n	8009c9e <_dtoa_r+0x39e>
 8009e18:	9c07      	ldr	r4, [sp, #28]
 8009e1a:	9704      	str	r7, [sp, #16]
 8009e1c:	e761      	b.n	8009ce2 <_dtoa_r+0x3e2>
 8009e1e:	bf00      	nop
 8009e20:	0800b178 	.word	0x0800b178
 8009e24:	0800b150 	.word	0x0800b150
 8009e28:	3ff00000 	.word	0x3ff00000
 8009e2c:	40240000 	.word	0x40240000
 8009e30:	401c0000 	.word	0x401c0000
 8009e34:	40140000 	.word	0x40140000
 8009e38:	4b70      	ldr	r3, [pc, #448]	@ (8009ffc <_dtoa_r+0x6fc>)
 8009e3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009e40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009e44:	4454      	add	r4, sl
 8009e46:	2900      	cmp	r1, #0
 8009e48:	d045      	beq.n	8009ed6 <_dtoa_r+0x5d6>
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	496c      	ldr	r1, [pc, #432]	@ (800a000 <_dtoa_r+0x700>)
 8009e4e:	f7f6 fc6d 	bl	800072c <__aeabi_ddiv>
 8009e52:	4633      	mov	r3, r6
 8009e54:	462a      	mov	r2, r5
 8009e56:	f7f6 f987 	bl	8000168 <__aeabi_dsub>
 8009e5a:	4656      	mov	r6, sl
 8009e5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009e60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e64:	f7f6 fde8 	bl	8000a38 <__aeabi_d2iz>
 8009e68:	4605      	mov	r5, r0
 8009e6a:	f7f6 facb 	bl	8000404 <__aeabi_i2d>
 8009e6e:	4602      	mov	r2, r0
 8009e70:	460b      	mov	r3, r1
 8009e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e76:	f7f6 f977 	bl	8000168 <__aeabi_dsub>
 8009e7a:	4602      	mov	r2, r0
 8009e7c:	460b      	mov	r3, r1
 8009e7e:	3530      	adds	r5, #48	@ 0x30
 8009e80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009e84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009e88:	f806 5b01 	strb.w	r5, [r6], #1
 8009e8c:	f7f6 fd96 	bl	80009bc <__aeabi_dcmplt>
 8009e90:	2800      	cmp	r0, #0
 8009e92:	d163      	bne.n	8009f5c <_dtoa_r+0x65c>
 8009e94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009e98:	2000      	movs	r0, #0
 8009e9a:	495a      	ldr	r1, [pc, #360]	@ (800a004 <_dtoa_r+0x704>)
 8009e9c:	f7f6 f964 	bl	8000168 <__aeabi_dsub>
 8009ea0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009ea4:	f7f6 fd8a 	bl	80009bc <__aeabi_dcmplt>
 8009ea8:	2800      	cmp	r0, #0
 8009eaa:	f040 8087 	bne.w	8009fbc <_dtoa_r+0x6bc>
 8009eae:	42a6      	cmp	r6, r4
 8009eb0:	f43f af43 	beq.w	8009d3a <_dtoa_r+0x43a>
 8009eb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009eb8:	2200      	movs	r2, #0
 8009eba:	4b53      	ldr	r3, [pc, #332]	@ (800a008 <_dtoa_r+0x708>)
 8009ebc:	f7f6 fb0c 	bl	80004d8 <__aeabi_dmul>
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eca:	4b4f      	ldr	r3, [pc, #316]	@ (800a008 <_dtoa_r+0x708>)
 8009ecc:	f7f6 fb04 	bl	80004d8 <__aeabi_dmul>
 8009ed0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ed4:	e7c4      	b.n	8009e60 <_dtoa_r+0x560>
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	f7f6 fafd 	bl	80004d8 <__aeabi_dmul>
 8009ede:	4656      	mov	r6, sl
 8009ee0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009ee4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009ee6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009eea:	f7f6 fda5 	bl	8000a38 <__aeabi_d2iz>
 8009eee:	4605      	mov	r5, r0
 8009ef0:	f7f6 fa88 	bl	8000404 <__aeabi_i2d>
 8009ef4:	4602      	mov	r2, r0
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009efc:	f7f6 f934 	bl	8000168 <__aeabi_dsub>
 8009f00:	4602      	mov	r2, r0
 8009f02:	460b      	mov	r3, r1
 8009f04:	3530      	adds	r5, #48	@ 0x30
 8009f06:	f806 5b01 	strb.w	r5, [r6], #1
 8009f0a:	42a6      	cmp	r6, r4
 8009f0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009f10:	f04f 0200 	mov.w	r2, #0
 8009f14:	d124      	bne.n	8009f60 <_dtoa_r+0x660>
 8009f16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009f1a:	4b39      	ldr	r3, [pc, #228]	@ (800a000 <_dtoa_r+0x700>)
 8009f1c:	f7f6 f926 	bl	800016c <__adddf3>
 8009f20:	4602      	mov	r2, r0
 8009f22:	460b      	mov	r3, r1
 8009f24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f28:	f7f6 fd66 	bl	80009f8 <__aeabi_dcmpgt>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d145      	bne.n	8009fbc <_dtoa_r+0x6bc>
 8009f30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009f34:	2000      	movs	r0, #0
 8009f36:	4932      	ldr	r1, [pc, #200]	@ (800a000 <_dtoa_r+0x700>)
 8009f38:	f7f6 f916 	bl	8000168 <__aeabi_dsub>
 8009f3c:	4602      	mov	r2, r0
 8009f3e:	460b      	mov	r3, r1
 8009f40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f44:	f7f6 fd3a 	bl	80009bc <__aeabi_dcmplt>
 8009f48:	2800      	cmp	r0, #0
 8009f4a:	f43f aef6 	beq.w	8009d3a <_dtoa_r+0x43a>
 8009f4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009f50:	1e73      	subs	r3, r6, #1
 8009f52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009f54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009f58:	2b30      	cmp	r3, #48	@ 0x30
 8009f5a:	d0f8      	beq.n	8009f4e <_dtoa_r+0x64e>
 8009f5c:	9f04      	ldr	r7, [sp, #16]
 8009f5e:	e73f      	b.n	8009de0 <_dtoa_r+0x4e0>
 8009f60:	4b29      	ldr	r3, [pc, #164]	@ (800a008 <_dtoa_r+0x708>)
 8009f62:	f7f6 fab9 	bl	80004d8 <__aeabi_dmul>
 8009f66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009f6a:	e7bc      	b.n	8009ee6 <_dtoa_r+0x5e6>
 8009f6c:	d10c      	bne.n	8009f88 <_dtoa_r+0x688>
 8009f6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009f72:	2200      	movs	r2, #0
 8009f74:	4b25      	ldr	r3, [pc, #148]	@ (800a00c <_dtoa_r+0x70c>)
 8009f76:	f7f6 faaf 	bl	80004d8 <__aeabi_dmul>
 8009f7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009f7e:	f7f6 fd31 	bl	80009e4 <__aeabi_dcmpge>
 8009f82:	2800      	cmp	r0, #0
 8009f84:	f000 815b 	beq.w	800a23e <_dtoa_r+0x93e>
 8009f88:	2400      	movs	r4, #0
 8009f8a:	4625      	mov	r5, r4
 8009f8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009f8e:	4656      	mov	r6, sl
 8009f90:	43db      	mvns	r3, r3
 8009f92:	9304      	str	r3, [sp, #16]
 8009f94:	2700      	movs	r7, #0
 8009f96:	4621      	mov	r1, r4
 8009f98:	4658      	mov	r0, fp
 8009f9a:	f000 fb01 	bl	800a5a0 <_Bfree>
 8009f9e:	2d00      	cmp	r5, #0
 8009fa0:	d0dc      	beq.n	8009f5c <_dtoa_r+0x65c>
 8009fa2:	b12f      	cbz	r7, 8009fb0 <_dtoa_r+0x6b0>
 8009fa4:	42af      	cmp	r7, r5
 8009fa6:	d003      	beq.n	8009fb0 <_dtoa_r+0x6b0>
 8009fa8:	4639      	mov	r1, r7
 8009faa:	4658      	mov	r0, fp
 8009fac:	f000 faf8 	bl	800a5a0 <_Bfree>
 8009fb0:	4629      	mov	r1, r5
 8009fb2:	4658      	mov	r0, fp
 8009fb4:	f000 faf4 	bl	800a5a0 <_Bfree>
 8009fb8:	e7d0      	b.n	8009f5c <_dtoa_r+0x65c>
 8009fba:	9704      	str	r7, [sp, #16]
 8009fbc:	4633      	mov	r3, r6
 8009fbe:	461e      	mov	r6, r3
 8009fc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009fc4:	2a39      	cmp	r2, #57	@ 0x39
 8009fc6:	d107      	bne.n	8009fd8 <_dtoa_r+0x6d8>
 8009fc8:	459a      	cmp	sl, r3
 8009fca:	d1f8      	bne.n	8009fbe <_dtoa_r+0x6be>
 8009fcc:	9a04      	ldr	r2, [sp, #16]
 8009fce:	3201      	adds	r2, #1
 8009fd0:	9204      	str	r2, [sp, #16]
 8009fd2:	2230      	movs	r2, #48	@ 0x30
 8009fd4:	f88a 2000 	strb.w	r2, [sl]
 8009fd8:	781a      	ldrb	r2, [r3, #0]
 8009fda:	3201      	adds	r2, #1
 8009fdc:	701a      	strb	r2, [r3, #0]
 8009fde:	e7bd      	b.n	8009f5c <_dtoa_r+0x65c>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	4b09      	ldr	r3, [pc, #36]	@ (800a008 <_dtoa_r+0x708>)
 8009fe4:	f7f6 fa78 	bl	80004d8 <__aeabi_dmul>
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2300      	movs	r3, #0
 8009fec:	4604      	mov	r4, r0
 8009fee:	460d      	mov	r5, r1
 8009ff0:	f7f6 fcda 	bl	80009a8 <__aeabi_dcmpeq>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	f43f aebc 	beq.w	8009d72 <_dtoa_r+0x472>
 8009ffa:	e6f1      	b.n	8009de0 <_dtoa_r+0x4e0>
 8009ffc:	0800b178 	.word	0x0800b178
 800a000:	3fe00000 	.word	0x3fe00000
 800a004:	3ff00000 	.word	0x3ff00000
 800a008:	40240000 	.word	0x40240000
 800a00c:	40140000 	.word	0x40140000
 800a010:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a012:	2a00      	cmp	r2, #0
 800a014:	f000 80db 	beq.w	800a1ce <_dtoa_r+0x8ce>
 800a018:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a01a:	2a01      	cmp	r2, #1
 800a01c:	f300 80bf 	bgt.w	800a19e <_dtoa_r+0x89e>
 800a020:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800a022:	2a00      	cmp	r2, #0
 800a024:	f000 80b7 	beq.w	800a196 <_dtoa_r+0x896>
 800a028:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800a02c:	4646      	mov	r6, r8
 800a02e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a030:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a032:	2101      	movs	r1, #1
 800a034:	441a      	add	r2, r3
 800a036:	4658      	mov	r0, fp
 800a038:	4498      	add	r8, r3
 800a03a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a03c:	f000 fb64 	bl	800a708 <__i2b>
 800a040:	4605      	mov	r5, r0
 800a042:	b15e      	cbz	r6, 800a05c <_dtoa_r+0x75c>
 800a044:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a046:	2b00      	cmp	r3, #0
 800a048:	dd08      	ble.n	800a05c <_dtoa_r+0x75c>
 800a04a:	42b3      	cmp	r3, r6
 800a04c:	bfa8      	it	ge
 800a04e:	4633      	movge	r3, r6
 800a050:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a052:	eba8 0803 	sub.w	r8, r8, r3
 800a056:	1af6      	subs	r6, r6, r3
 800a058:	1ad3      	subs	r3, r2, r3
 800a05a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a05c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a05e:	b1f3      	cbz	r3, 800a09e <_dtoa_r+0x79e>
 800a060:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a062:	2b00      	cmp	r3, #0
 800a064:	f000 80b7 	beq.w	800a1d6 <_dtoa_r+0x8d6>
 800a068:	b18c      	cbz	r4, 800a08e <_dtoa_r+0x78e>
 800a06a:	4629      	mov	r1, r5
 800a06c:	4622      	mov	r2, r4
 800a06e:	4658      	mov	r0, fp
 800a070:	f000 fc08 	bl	800a884 <__pow5mult>
 800a074:	464a      	mov	r2, r9
 800a076:	4601      	mov	r1, r0
 800a078:	4605      	mov	r5, r0
 800a07a:	4658      	mov	r0, fp
 800a07c:	f000 fb5a 	bl	800a734 <__multiply>
 800a080:	4649      	mov	r1, r9
 800a082:	9004      	str	r0, [sp, #16]
 800a084:	4658      	mov	r0, fp
 800a086:	f000 fa8b 	bl	800a5a0 <_Bfree>
 800a08a:	9b04      	ldr	r3, [sp, #16]
 800a08c:	4699      	mov	r9, r3
 800a08e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a090:	1b1a      	subs	r2, r3, r4
 800a092:	d004      	beq.n	800a09e <_dtoa_r+0x79e>
 800a094:	4649      	mov	r1, r9
 800a096:	4658      	mov	r0, fp
 800a098:	f000 fbf4 	bl	800a884 <__pow5mult>
 800a09c:	4681      	mov	r9, r0
 800a09e:	2101      	movs	r1, #1
 800a0a0:	4658      	mov	r0, fp
 800a0a2:	f000 fb31 	bl	800a708 <__i2b>
 800a0a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0a8:	4604      	mov	r4, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 81c9 	beq.w	800a442 <_dtoa_r+0xb42>
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	4601      	mov	r1, r0
 800a0b4:	4658      	mov	r0, fp
 800a0b6:	f000 fbe5 	bl	800a884 <__pow5mult>
 800a0ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a0bc:	4604      	mov	r4, r0
 800a0be:	2b01      	cmp	r3, #1
 800a0c0:	f300 808f 	bgt.w	800a1e2 <_dtoa_r+0x8e2>
 800a0c4:	9b02      	ldr	r3, [sp, #8]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	f040 8087 	bne.w	800a1da <_dtoa_r+0x8da>
 800a0cc:	9b03      	ldr	r3, [sp, #12]
 800a0ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 8083 	bne.w	800a1de <_dtoa_r+0x8de>
 800a0d8:	9b03      	ldr	r3, [sp, #12]
 800a0da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a0de:	0d1b      	lsrs	r3, r3, #20
 800a0e0:	051b      	lsls	r3, r3, #20
 800a0e2:	b12b      	cbz	r3, 800a0f0 <_dtoa_r+0x7f0>
 800a0e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0e6:	f108 0801 	add.w	r8, r8, #1
 800a0ea:	3301      	adds	r3, #1
 800a0ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a0f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	f000 81aa 	beq.w	800a44e <_dtoa_r+0xb4e>
 800a0fa:	6923      	ldr	r3, [r4, #16]
 800a0fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a100:	6918      	ldr	r0, [r3, #16]
 800a102:	f000 fab5 	bl	800a670 <__hi0bits>
 800a106:	f1c0 0020 	rsb	r0, r0, #32
 800a10a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a10c:	4418      	add	r0, r3
 800a10e:	f010 001f 	ands.w	r0, r0, #31
 800a112:	d071      	beq.n	800a1f8 <_dtoa_r+0x8f8>
 800a114:	f1c0 0320 	rsb	r3, r0, #32
 800a118:	2b04      	cmp	r3, #4
 800a11a:	dd65      	ble.n	800a1e8 <_dtoa_r+0x8e8>
 800a11c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a11e:	f1c0 001c 	rsb	r0, r0, #28
 800a122:	4403      	add	r3, r0
 800a124:	4480      	add	r8, r0
 800a126:	4406      	add	r6, r0
 800a128:	9309      	str	r3, [sp, #36]	@ 0x24
 800a12a:	f1b8 0f00 	cmp.w	r8, #0
 800a12e:	dd05      	ble.n	800a13c <_dtoa_r+0x83c>
 800a130:	4649      	mov	r1, r9
 800a132:	4642      	mov	r2, r8
 800a134:	4658      	mov	r0, fp
 800a136:	f000 fbff 	bl	800a938 <__lshift>
 800a13a:	4681      	mov	r9, r0
 800a13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13e:	2b00      	cmp	r3, #0
 800a140:	dd05      	ble.n	800a14e <_dtoa_r+0x84e>
 800a142:	4621      	mov	r1, r4
 800a144:	461a      	mov	r2, r3
 800a146:	4658      	mov	r0, fp
 800a148:	f000 fbf6 	bl	800a938 <__lshift>
 800a14c:	4604      	mov	r4, r0
 800a14e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a150:	2b00      	cmp	r3, #0
 800a152:	d053      	beq.n	800a1fc <_dtoa_r+0x8fc>
 800a154:	4621      	mov	r1, r4
 800a156:	4648      	mov	r0, r9
 800a158:	f000 fc5a 	bl	800aa10 <__mcmp>
 800a15c:	2800      	cmp	r0, #0
 800a15e:	da4d      	bge.n	800a1fc <_dtoa_r+0x8fc>
 800a160:	1e7b      	subs	r3, r7, #1
 800a162:	4649      	mov	r1, r9
 800a164:	9304      	str	r3, [sp, #16]
 800a166:	220a      	movs	r2, #10
 800a168:	2300      	movs	r3, #0
 800a16a:	4658      	mov	r0, fp
 800a16c:	f000 fa3a 	bl	800a5e4 <__multadd>
 800a170:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a172:	4681      	mov	r9, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	f000 816c 	beq.w	800a452 <_dtoa_r+0xb52>
 800a17a:	2300      	movs	r3, #0
 800a17c:	4629      	mov	r1, r5
 800a17e:	220a      	movs	r2, #10
 800a180:	4658      	mov	r0, fp
 800a182:	f000 fa2f 	bl	800a5e4 <__multadd>
 800a186:	9b08      	ldr	r3, [sp, #32]
 800a188:	4605      	mov	r5, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dc61      	bgt.n	800a252 <_dtoa_r+0x952>
 800a18e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a190:	2b02      	cmp	r3, #2
 800a192:	dc3b      	bgt.n	800a20c <_dtoa_r+0x90c>
 800a194:	e05d      	b.n	800a252 <_dtoa_r+0x952>
 800a196:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a198:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a19c:	e746      	b.n	800a02c <_dtoa_r+0x72c>
 800a19e:	9b07      	ldr	r3, [sp, #28]
 800a1a0:	1e5c      	subs	r4, r3, #1
 800a1a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a1a4:	42a3      	cmp	r3, r4
 800a1a6:	bfbf      	itttt	lt
 800a1a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800a1aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800a1ac:	1ae3      	sublt	r3, r4, r3
 800a1ae:	18d2      	addlt	r2, r2, r3
 800a1b0:	bfa8      	it	ge
 800a1b2:	1b1c      	subge	r4, r3, r4
 800a1b4:	9b07      	ldr	r3, [sp, #28]
 800a1b6:	bfbe      	ittt	lt
 800a1b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800a1ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800a1bc:	2400      	movlt	r4, #0
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	bfb5      	itete	lt
 800a1c2:	eba8 0603 	sublt.w	r6, r8, r3
 800a1c6:	4646      	movge	r6, r8
 800a1c8:	2300      	movlt	r3, #0
 800a1ca:	9b07      	ldrge	r3, [sp, #28]
 800a1cc:	e730      	b.n	800a030 <_dtoa_r+0x730>
 800a1ce:	4646      	mov	r6, r8
 800a1d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800a1d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800a1d4:	e735      	b.n	800a042 <_dtoa_r+0x742>
 800a1d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a1d8:	e75c      	b.n	800a094 <_dtoa_r+0x794>
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e788      	b.n	800a0f0 <_dtoa_r+0x7f0>
 800a1de:	9b02      	ldr	r3, [sp, #8]
 800a1e0:	e786      	b.n	800a0f0 <_dtoa_r+0x7f0>
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	930a      	str	r3, [sp, #40]	@ 0x28
 800a1e6:	e788      	b.n	800a0fa <_dtoa_r+0x7fa>
 800a1e8:	d09f      	beq.n	800a12a <_dtoa_r+0x82a>
 800a1ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a1ec:	331c      	adds	r3, #28
 800a1ee:	441a      	add	r2, r3
 800a1f0:	4498      	add	r8, r3
 800a1f2:	441e      	add	r6, r3
 800a1f4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a1f6:	e798      	b.n	800a12a <_dtoa_r+0x82a>
 800a1f8:	4603      	mov	r3, r0
 800a1fa:	e7f6      	b.n	800a1ea <_dtoa_r+0x8ea>
 800a1fc:	9b07      	ldr	r3, [sp, #28]
 800a1fe:	9704      	str	r7, [sp, #16]
 800a200:	2b00      	cmp	r3, #0
 800a202:	dc20      	bgt.n	800a246 <_dtoa_r+0x946>
 800a204:	9308      	str	r3, [sp, #32]
 800a206:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a208:	2b02      	cmp	r3, #2
 800a20a:	dd1e      	ble.n	800a24a <_dtoa_r+0x94a>
 800a20c:	9b08      	ldr	r3, [sp, #32]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	f47f aebc 	bne.w	8009f8c <_dtoa_r+0x68c>
 800a214:	4621      	mov	r1, r4
 800a216:	2205      	movs	r2, #5
 800a218:	4658      	mov	r0, fp
 800a21a:	f000 f9e3 	bl	800a5e4 <__multadd>
 800a21e:	4601      	mov	r1, r0
 800a220:	4604      	mov	r4, r0
 800a222:	4648      	mov	r0, r9
 800a224:	f000 fbf4 	bl	800aa10 <__mcmp>
 800a228:	2800      	cmp	r0, #0
 800a22a:	f77f aeaf 	ble.w	8009f8c <_dtoa_r+0x68c>
 800a22e:	2331      	movs	r3, #49	@ 0x31
 800a230:	4656      	mov	r6, sl
 800a232:	f806 3b01 	strb.w	r3, [r6], #1
 800a236:	9b04      	ldr	r3, [sp, #16]
 800a238:	3301      	adds	r3, #1
 800a23a:	9304      	str	r3, [sp, #16]
 800a23c:	e6aa      	b.n	8009f94 <_dtoa_r+0x694>
 800a23e:	9c07      	ldr	r4, [sp, #28]
 800a240:	9704      	str	r7, [sp, #16]
 800a242:	4625      	mov	r5, r4
 800a244:	e7f3      	b.n	800a22e <_dtoa_r+0x92e>
 800a246:	9b07      	ldr	r3, [sp, #28]
 800a248:	9308      	str	r3, [sp, #32]
 800a24a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 8104 	beq.w	800a45a <_dtoa_r+0xb5a>
 800a252:	2e00      	cmp	r6, #0
 800a254:	dd05      	ble.n	800a262 <_dtoa_r+0x962>
 800a256:	4629      	mov	r1, r5
 800a258:	4632      	mov	r2, r6
 800a25a:	4658      	mov	r0, fp
 800a25c:	f000 fb6c 	bl	800a938 <__lshift>
 800a260:	4605      	mov	r5, r0
 800a262:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a264:	2b00      	cmp	r3, #0
 800a266:	d05a      	beq.n	800a31e <_dtoa_r+0xa1e>
 800a268:	4658      	mov	r0, fp
 800a26a:	6869      	ldr	r1, [r5, #4]
 800a26c:	f000 f958 	bl	800a520 <_Balloc>
 800a270:	4606      	mov	r6, r0
 800a272:	b928      	cbnz	r0, 800a280 <_dtoa_r+0x980>
 800a274:	4602      	mov	r2, r0
 800a276:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a27a:	4b83      	ldr	r3, [pc, #524]	@ (800a488 <_dtoa_r+0xb88>)
 800a27c:	f7ff bb54 	b.w	8009928 <_dtoa_r+0x28>
 800a280:	692a      	ldr	r2, [r5, #16]
 800a282:	f105 010c 	add.w	r1, r5, #12
 800a286:	3202      	adds	r2, #2
 800a288:	0092      	lsls	r2, r2, #2
 800a28a:	300c      	adds	r0, #12
 800a28c:	f7ff fa9f 	bl	80097ce <memcpy>
 800a290:	2201      	movs	r2, #1
 800a292:	4631      	mov	r1, r6
 800a294:	4658      	mov	r0, fp
 800a296:	f000 fb4f 	bl	800a938 <__lshift>
 800a29a:	462f      	mov	r7, r5
 800a29c:	4605      	mov	r5, r0
 800a29e:	f10a 0301 	add.w	r3, sl, #1
 800a2a2:	9307      	str	r3, [sp, #28]
 800a2a4:	9b08      	ldr	r3, [sp, #32]
 800a2a6:	4453      	add	r3, sl
 800a2a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a2aa:	9b02      	ldr	r3, [sp, #8]
 800a2ac:	f003 0301 	and.w	r3, r3, #1
 800a2b0:	930a      	str	r3, [sp, #40]	@ 0x28
 800a2b2:	9b07      	ldr	r3, [sp, #28]
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	3b01      	subs	r3, #1
 800a2b8:	4648      	mov	r0, r9
 800a2ba:	9302      	str	r3, [sp, #8]
 800a2bc:	f7ff fa95 	bl	80097ea <quorem>
 800a2c0:	4639      	mov	r1, r7
 800a2c2:	9008      	str	r0, [sp, #32]
 800a2c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a2c8:	4648      	mov	r0, r9
 800a2ca:	f000 fba1 	bl	800aa10 <__mcmp>
 800a2ce:	462a      	mov	r2, r5
 800a2d0:	9009      	str	r0, [sp, #36]	@ 0x24
 800a2d2:	4621      	mov	r1, r4
 800a2d4:	4658      	mov	r0, fp
 800a2d6:	f000 fbb7 	bl	800aa48 <__mdiff>
 800a2da:	68c2      	ldr	r2, [r0, #12]
 800a2dc:	4606      	mov	r6, r0
 800a2de:	bb02      	cbnz	r2, 800a322 <_dtoa_r+0xa22>
 800a2e0:	4601      	mov	r1, r0
 800a2e2:	4648      	mov	r0, r9
 800a2e4:	f000 fb94 	bl	800aa10 <__mcmp>
 800a2e8:	4602      	mov	r2, r0
 800a2ea:	4631      	mov	r1, r6
 800a2ec:	4658      	mov	r0, fp
 800a2ee:	920c      	str	r2, [sp, #48]	@ 0x30
 800a2f0:	f000 f956 	bl	800a5a0 <_Bfree>
 800a2f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a2f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a2f8:	9e07      	ldr	r6, [sp, #28]
 800a2fa:	ea43 0102 	orr.w	r1, r3, r2
 800a2fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a300:	4319      	orrs	r1, r3
 800a302:	d110      	bne.n	800a326 <_dtoa_r+0xa26>
 800a304:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a308:	d029      	beq.n	800a35e <_dtoa_r+0xa5e>
 800a30a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	dd02      	ble.n	800a316 <_dtoa_r+0xa16>
 800a310:	9b08      	ldr	r3, [sp, #32]
 800a312:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a316:	9b02      	ldr	r3, [sp, #8]
 800a318:	f883 8000 	strb.w	r8, [r3]
 800a31c:	e63b      	b.n	8009f96 <_dtoa_r+0x696>
 800a31e:	4628      	mov	r0, r5
 800a320:	e7bb      	b.n	800a29a <_dtoa_r+0x99a>
 800a322:	2201      	movs	r2, #1
 800a324:	e7e1      	b.n	800a2ea <_dtoa_r+0x9ea>
 800a326:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a328:	2b00      	cmp	r3, #0
 800a32a:	db04      	blt.n	800a336 <_dtoa_r+0xa36>
 800a32c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800a32e:	430b      	orrs	r3, r1
 800a330:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a332:	430b      	orrs	r3, r1
 800a334:	d120      	bne.n	800a378 <_dtoa_r+0xa78>
 800a336:	2a00      	cmp	r2, #0
 800a338:	dded      	ble.n	800a316 <_dtoa_r+0xa16>
 800a33a:	4649      	mov	r1, r9
 800a33c:	2201      	movs	r2, #1
 800a33e:	4658      	mov	r0, fp
 800a340:	f000 fafa 	bl	800a938 <__lshift>
 800a344:	4621      	mov	r1, r4
 800a346:	4681      	mov	r9, r0
 800a348:	f000 fb62 	bl	800aa10 <__mcmp>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dc03      	bgt.n	800a358 <_dtoa_r+0xa58>
 800a350:	d1e1      	bne.n	800a316 <_dtoa_r+0xa16>
 800a352:	f018 0f01 	tst.w	r8, #1
 800a356:	d0de      	beq.n	800a316 <_dtoa_r+0xa16>
 800a358:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a35c:	d1d8      	bne.n	800a310 <_dtoa_r+0xa10>
 800a35e:	2339      	movs	r3, #57	@ 0x39
 800a360:	9a02      	ldr	r2, [sp, #8]
 800a362:	7013      	strb	r3, [r2, #0]
 800a364:	4633      	mov	r3, r6
 800a366:	461e      	mov	r6, r3
 800a368:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a36c:	3b01      	subs	r3, #1
 800a36e:	2a39      	cmp	r2, #57	@ 0x39
 800a370:	d052      	beq.n	800a418 <_dtoa_r+0xb18>
 800a372:	3201      	adds	r2, #1
 800a374:	701a      	strb	r2, [r3, #0]
 800a376:	e60e      	b.n	8009f96 <_dtoa_r+0x696>
 800a378:	2a00      	cmp	r2, #0
 800a37a:	dd07      	ble.n	800a38c <_dtoa_r+0xa8c>
 800a37c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a380:	d0ed      	beq.n	800a35e <_dtoa_r+0xa5e>
 800a382:	9a02      	ldr	r2, [sp, #8]
 800a384:	f108 0301 	add.w	r3, r8, #1
 800a388:	7013      	strb	r3, [r2, #0]
 800a38a:	e604      	b.n	8009f96 <_dtoa_r+0x696>
 800a38c:	9b07      	ldr	r3, [sp, #28]
 800a38e:	9a07      	ldr	r2, [sp, #28]
 800a390:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a394:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a396:	4293      	cmp	r3, r2
 800a398:	d028      	beq.n	800a3ec <_dtoa_r+0xaec>
 800a39a:	4649      	mov	r1, r9
 800a39c:	2300      	movs	r3, #0
 800a39e:	220a      	movs	r2, #10
 800a3a0:	4658      	mov	r0, fp
 800a3a2:	f000 f91f 	bl	800a5e4 <__multadd>
 800a3a6:	42af      	cmp	r7, r5
 800a3a8:	4681      	mov	r9, r0
 800a3aa:	f04f 0300 	mov.w	r3, #0
 800a3ae:	f04f 020a 	mov.w	r2, #10
 800a3b2:	4639      	mov	r1, r7
 800a3b4:	4658      	mov	r0, fp
 800a3b6:	d107      	bne.n	800a3c8 <_dtoa_r+0xac8>
 800a3b8:	f000 f914 	bl	800a5e4 <__multadd>
 800a3bc:	4607      	mov	r7, r0
 800a3be:	4605      	mov	r5, r0
 800a3c0:	9b07      	ldr	r3, [sp, #28]
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	9307      	str	r3, [sp, #28]
 800a3c6:	e774      	b.n	800a2b2 <_dtoa_r+0x9b2>
 800a3c8:	f000 f90c 	bl	800a5e4 <__multadd>
 800a3cc:	4629      	mov	r1, r5
 800a3ce:	4607      	mov	r7, r0
 800a3d0:	2300      	movs	r3, #0
 800a3d2:	220a      	movs	r2, #10
 800a3d4:	4658      	mov	r0, fp
 800a3d6:	f000 f905 	bl	800a5e4 <__multadd>
 800a3da:	4605      	mov	r5, r0
 800a3dc:	e7f0      	b.n	800a3c0 <_dtoa_r+0xac0>
 800a3de:	9b08      	ldr	r3, [sp, #32]
 800a3e0:	2700      	movs	r7, #0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	bfcc      	ite	gt
 800a3e6:	461e      	movgt	r6, r3
 800a3e8:	2601      	movle	r6, #1
 800a3ea:	4456      	add	r6, sl
 800a3ec:	4649      	mov	r1, r9
 800a3ee:	2201      	movs	r2, #1
 800a3f0:	4658      	mov	r0, fp
 800a3f2:	f000 faa1 	bl	800a938 <__lshift>
 800a3f6:	4621      	mov	r1, r4
 800a3f8:	4681      	mov	r9, r0
 800a3fa:	f000 fb09 	bl	800aa10 <__mcmp>
 800a3fe:	2800      	cmp	r0, #0
 800a400:	dcb0      	bgt.n	800a364 <_dtoa_r+0xa64>
 800a402:	d102      	bne.n	800a40a <_dtoa_r+0xb0a>
 800a404:	f018 0f01 	tst.w	r8, #1
 800a408:	d1ac      	bne.n	800a364 <_dtoa_r+0xa64>
 800a40a:	4633      	mov	r3, r6
 800a40c:	461e      	mov	r6, r3
 800a40e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a412:	2a30      	cmp	r2, #48	@ 0x30
 800a414:	d0fa      	beq.n	800a40c <_dtoa_r+0xb0c>
 800a416:	e5be      	b.n	8009f96 <_dtoa_r+0x696>
 800a418:	459a      	cmp	sl, r3
 800a41a:	d1a4      	bne.n	800a366 <_dtoa_r+0xa66>
 800a41c:	9b04      	ldr	r3, [sp, #16]
 800a41e:	3301      	adds	r3, #1
 800a420:	9304      	str	r3, [sp, #16]
 800a422:	2331      	movs	r3, #49	@ 0x31
 800a424:	f88a 3000 	strb.w	r3, [sl]
 800a428:	e5b5      	b.n	8009f96 <_dtoa_r+0x696>
 800a42a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a42c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a48c <_dtoa_r+0xb8c>
 800a430:	b11b      	cbz	r3, 800a43a <_dtoa_r+0xb3a>
 800a432:	f10a 0308 	add.w	r3, sl, #8
 800a436:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	4650      	mov	r0, sl
 800a43c:	b017      	add	sp, #92	@ 0x5c
 800a43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a442:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a444:	2b01      	cmp	r3, #1
 800a446:	f77f ae3d 	ble.w	800a0c4 <_dtoa_r+0x7c4>
 800a44a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a44c:	930a      	str	r3, [sp, #40]	@ 0x28
 800a44e:	2001      	movs	r0, #1
 800a450:	e65b      	b.n	800a10a <_dtoa_r+0x80a>
 800a452:	9b08      	ldr	r3, [sp, #32]
 800a454:	2b00      	cmp	r3, #0
 800a456:	f77f aed6 	ble.w	800a206 <_dtoa_r+0x906>
 800a45a:	4656      	mov	r6, sl
 800a45c:	4621      	mov	r1, r4
 800a45e:	4648      	mov	r0, r9
 800a460:	f7ff f9c3 	bl	80097ea <quorem>
 800a464:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a468:	9b08      	ldr	r3, [sp, #32]
 800a46a:	f806 8b01 	strb.w	r8, [r6], #1
 800a46e:	eba6 020a 	sub.w	r2, r6, sl
 800a472:	4293      	cmp	r3, r2
 800a474:	ddb3      	ble.n	800a3de <_dtoa_r+0xade>
 800a476:	4649      	mov	r1, r9
 800a478:	2300      	movs	r3, #0
 800a47a:	220a      	movs	r2, #10
 800a47c:	4658      	mov	r0, fp
 800a47e:	f000 f8b1 	bl	800a5e4 <__multadd>
 800a482:	4681      	mov	r9, r0
 800a484:	e7ea      	b.n	800a45c <_dtoa_r+0xb5c>
 800a486:	bf00      	nop
 800a488:	0800b0d5 	.word	0x0800b0d5
 800a48c:	0800b059 	.word	0x0800b059

0800a490 <_free_r>:
 800a490:	b538      	push	{r3, r4, r5, lr}
 800a492:	4605      	mov	r5, r0
 800a494:	2900      	cmp	r1, #0
 800a496:	d040      	beq.n	800a51a <_free_r+0x8a>
 800a498:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a49c:	1f0c      	subs	r4, r1, #4
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	bfb8      	it	lt
 800a4a2:	18e4      	addlt	r4, r4, r3
 800a4a4:	f7fe f89c 	bl	80085e0 <__malloc_lock>
 800a4a8:	4a1c      	ldr	r2, [pc, #112]	@ (800a51c <_free_r+0x8c>)
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	b933      	cbnz	r3, 800a4bc <_free_r+0x2c>
 800a4ae:	6063      	str	r3, [r4, #4]
 800a4b0:	6014      	str	r4, [r2, #0]
 800a4b2:	4628      	mov	r0, r5
 800a4b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a4b8:	f7fe b898 	b.w	80085ec <__malloc_unlock>
 800a4bc:	42a3      	cmp	r3, r4
 800a4be:	d908      	bls.n	800a4d2 <_free_r+0x42>
 800a4c0:	6820      	ldr	r0, [r4, #0]
 800a4c2:	1821      	adds	r1, r4, r0
 800a4c4:	428b      	cmp	r3, r1
 800a4c6:	bf01      	itttt	eq
 800a4c8:	6819      	ldreq	r1, [r3, #0]
 800a4ca:	685b      	ldreq	r3, [r3, #4]
 800a4cc:	1809      	addeq	r1, r1, r0
 800a4ce:	6021      	streq	r1, [r4, #0]
 800a4d0:	e7ed      	b.n	800a4ae <_free_r+0x1e>
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	685b      	ldr	r3, [r3, #4]
 800a4d6:	b10b      	cbz	r3, 800a4dc <_free_r+0x4c>
 800a4d8:	42a3      	cmp	r3, r4
 800a4da:	d9fa      	bls.n	800a4d2 <_free_r+0x42>
 800a4dc:	6811      	ldr	r1, [r2, #0]
 800a4de:	1850      	adds	r0, r2, r1
 800a4e0:	42a0      	cmp	r0, r4
 800a4e2:	d10b      	bne.n	800a4fc <_free_r+0x6c>
 800a4e4:	6820      	ldr	r0, [r4, #0]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	1850      	adds	r0, r2, r1
 800a4ea:	4283      	cmp	r3, r0
 800a4ec:	6011      	str	r1, [r2, #0]
 800a4ee:	d1e0      	bne.n	800a4b2 <_free_r+0x22>
 800a4f0:	6818      	ldr	r0, [r3, #0]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	4408      	add	r0, r1
 800a4f6:	6010      	str	r0, [r2, #0]
 800a4f8:	6053      	str	r3, [r2, #4]
 800a4fa:	e7da      	b.n	800a4b2 <_free_r+0x22>
 800a4fc:	d902      	bls.n	800a504 <_free_r+0x74>
 800a4fe:	230c      	movs	r3, #12
 800a500:	602b      	str	r3, [r5, #0]
 800a502:	e7d6      	b.n	800a4b2 <_free_r+0x22>
 800a504:	6820      	ldr	r0, [r4, #0]
 800a506:	1821      	adds	r1, r4, r0
 800a508:	428b      	cmp	r3, r1
 800a50a:	bf01      	itttt	eq
 800a50c:	6819      	ldreq	r1, [r3, #0]
 800a50e:	685b      	ldreq	r3, [r3, #4]
 800a510:	1809      	addeq	r1, r1, r0
 800a512:	6021      	streq	r1, [r4, #0]
 800a514:	6063      	str	r3, [r4, #4]
 800a516:	6054      	str	r4, [r2, #4]
 800a518:	e7cb      	b.n	800a4b2 <_free_r+0x22>
 800a51a:	bd38      	pop	{r3, r4, r5, pc}
 800a51c:	20000370 	.word	0x20000370

0800a520 <_Balloc>:
 800a520:	b570      	push	{r4, r5, r6, lr}
 800a522:	69c6      	ldr	r6, [r0, #28]
 800a524:	4604      	mov	r4, r0
 800a526:	460d      	mov	r5, r1
 800a528:	b976      	cbnz	r6, 800a548 <_Balloc+0x28>
 800a52a:	2010      	movs	r0, #16
 800a52c:	f7fd ffa6 	bl	800847c <malloc>
 800a530:	4602      	mov	r2, r0
 800a532:	61e0      	str	r0, [r4, #28]
 800a534:	b920      	cbnz	r0, 800a540 <_Balloc+0x20>
 800a536:	216b      	movs	r1, #107	@ 0x6b
 800a538:	4b17      	ldr	r3, [pc, #92]	@ (800a598 <_Balloc+0x78>)
 800a53a:	4818      	ldr	r0, [pc, #96]	@ (800a59c <_Balloc+0x7c>)
 800a53c:	f7fd ff64 	bl	8008408 <__assert_func>
 800a540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a544:	6006      	str	r6, [r0, #0]
 800a546:	60c6      	str	r6, [r0, #12]
 800a548:	69e6      	ldr	r6, [r4, #28]
 800a54a:	68f3      	ldr	r3, [r6, #12]
 800a54c:	b183      	cbz	r3, 800a570 <_Balloc+0x50>
 800a54e:	69e3      	ldr	r3, [r4, #28]
 800a550:	68db      	ldr	r3, [r3, #12]
 800a552:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a556:	b9b8      	cbnz	r0, 800a588 <_Balloc+0x68>
 800a558:	2101      	movs	r1, #1
 800a55a:	fa01 f605 	lsl.w	r6, r1, r5
 800a55e:	1d72      	adds	r2, r6, #5
 800a560:	4620      	mov	r0, r4
 800a562:	0092      	lsls	r2, r2, #2
 800a564:	f7fd ff76 	bl	8008454 <_calloc_r>
 800a568:	b160      	cbz	r0, 800a584 <_Balloc+0x64>
 800a56a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a56e:	e00e      	b.n	800a58e <_Balloc+0x6e>
 800a570:	2221      	movs	r2, #33	@ 0x21
 800a572:	2104      	movs	r1, #4
 800a574:	4620      	mov	r0, r4
 800a576:	f7fd ff6d 	bl	8008454 <_calloc_r>
 800a57a:	69e3      	ldr	r3, [r4, #28]
 800a57c:	60f0      	str	r0, [r6, #12]
 800a57e:	68db      	ldr	r3, [r3, #12]
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1e4      	bne.n	800a54e <_Balloc+0x2e>
 800a584:	2000      	movs	r0, #0
 800a586:	bd70      	pop	{r4, r5, r6, pc}
 800a588:	6802      	ldr	r2, [r0, #0]
 800a58a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a58e:	2300      	movs	r3, #0
 800a590:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a594:	e7f7      	b.n	800a586 <_Balloc+0x66>
 800a596:	bf00      	nop
 800a598:	0800b066 	.word	0x0800b066
 800a59c:	0800b0e6 	.word	0x0800b0e6

0800a5a0 <_Bfree>:
 800a5a0:	b570      	push	{r4, r5, r6, lr}
 800a5a2:	69c6      	ldr	r6, [r0, #28]
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	460c      	mov	r4, r1
 800a5a8:	b976      	cbnz	r6, 800a5c8 <_Bfree+0x28>
 800a5aa:	2010      	movs	r0, #16
 800a5ac:	f7fd ff66 	bl	800847c <malloc>
 800a5b0:	4602      	mov	r2, r0
 800a5b2:	61e8      	str	r0, [r5, #28]
 800a5b4:	b920      	cbnz	r0, 800a5c0 <_Bfree+0x20>
 800a5b6:	218f      	movs	r1, #143	@ 0x8f
 800a5b8:	4b08      	ldr	r3, [pc, #32]	@ (800a5dc <_Bfree+0x3c>)
 800a5ba:	4809      	ldr	r0, [pc, #36]	@ (800a5e0 <_Bfree+0x40>)
 800a5bc:	f7fd ff24 	bl	8008408 <__assert_func>
 800a5c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a5c4:	6006      	str	r6, [r0, #0]
 800a5c6:	60c6      	str	r6, [r0, #12]
 800a5c8:	b13c      	cbz	r4, 800a5da <_Bfree+0x3a>
 800a5ca:	69eb      	ldr	r3, [r5, #28]
 800a5cc:	6862      	ldr	r2, [r4, #4]
 800a5ce:	68db      	ldr	r3, [r3, #12]
 800a5d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a5d4:	6021      	str	r1, [r4, #0]
 800a5d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a5da:	bd70      	pop	{r4, r5, r6, pc}
 800a5dc:	0800b066 	.word	0x0800b066
 800a5e0:	0800b0e6 	.word	0x0800b0e6

0800a5e4 <__multadd>:
 800a5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e8:	4607      	mov	r7, r0
 800a5ea:	460c      	mov	r4, r1
 800a5ec:	461e      	mov	r6, r3
 800a5ee:	2000      	movs	r0, #0
 800a5f0:	690d      	ldr	r5, [r1, #16]
 800a5f2:	f101 0c14 	add.w	ip, r1, #20
 800a5f6:	f8dc 3000 	ldr.w	r3, [ip]
 800a5fa:	3001      	adds	r0, #1
 800a5fc:	b299      	uxth	r1, r3
 800a5fe:	fb02 6101 	mla	r1, r2, r1, r6
 800a602:	0c1e      	lsrs	r6, r3, #16
 800a604:	0c0b      	lsrs	r3, r1, #16
 800a606:	fb02 3306 	mla	r3, r2, r6, r3
 800a60a:	b289      	uxth	r1, r1
 800a60c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a610:	4285      	cmp	r5, r0
 800a612:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a616:	f84c 1b04 	str.w	r1, [ip], #4
 800a61a:	dcec      	bgt.n	800a5f6 <__multadd+0x12>
 800a61c:	b30e      	cbz	r6, 800a662 <__multadd+0x7e>
 800a61e:	68a3      	ldr	r3, [r4, #8]
 800a620:	42ab      	cmp	r3, r5
 800a622:	dc19      	bgt.n	800a658 <__multadd+0x74>
 800a624:	6861      	ldr	r1, [r4, #4]
 800a626:	4638      	mov	r0, r7
 800a628:	3101      	adds	r1, #1
 800a62a:	f7ff ff79 	bl	800a520 <_Balloc>
 800a62e:	4680      	mov	r8, r0
 800a630:	b928      	cbnz	r0, 800a63e <__multadd+0x5a>
 800a632:	4602      	mov	r2, r0
 800a634:	21ba      	movs	r1, #186	@ 0xba
 800a636:	4b0c      	ldr	r3, [pc, #48]	@ (800a668 <__multadd+0x84>)
 800a638:	480c      	ldr	r0, [pc, #48]	@ (800a66c <__multadd+0x88>)
 800a63a:	f7fd fee5 	bl	8008408 <__assert_func>
 800a63e:	6922      	ldr	r2, [r4, #16]
 800a640:	f104 010c 	add.w	r1, r4, #12
 800a644:	3202      	adds	r2, #2
 800a646:	0092      	lsls	r2, r2, #2
 800a648:	300c      	adds	r0, #12
 800a64a:	f7ff f8c0 	bl	80097ce <memcpy>
 800a64e:	4621      	mov	r1, r4
 800a650:	4638      	mov	r0, r7
 800a652:	f7ff ffa5 	bl	800a5a0 <_Bfree>
 800a656:	4644      	mov	r4, r8
 800a658:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a65c:	3501      	adds	r5, #1
 800a65e:	615e      	str	r6, [r3, #20]
 800a660:	6125      	str	r5, [r4, #16]
 800a662:	4620      	mov	r0, r4
 800a664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a668:	0800b0d5 	.word	0x0800b0d5
 800a66c:	0800b0e6 	.word	0x0800b0e6

0800a670 <__hi0bits>:
 800a670:	4603      	mov	r3, r0
 800a672:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a676:	bf3a      	itte	cc
 800a678:	0403      	lslcc	r3, r0, #16
 800a67a:	2010      	movcc	r0, #16
 800a67c:	2000      	movcs	r0, #0
 800a67e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a682:	bf3c      	itt	cc
 800a684:	021b      	lslcc	r3, r3, #8
 800a686:	3008      	addcc	r0, #8
 800a688:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a68c:	bf3c      	itt	cc
 800a68e:	011b      	lslcc	r3, r3, #4
 800a690:	3004      	addcc	r0, #4
 800a692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a696:	bf3c      	itt	cc
 800a698:	009b      	lslcc	r3, r3, #2
 800a69a:	3002      	addcc	r0, #2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	db05      	blt.n	800a6ac <__hi0bits+0x3c>
 800a6a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a6a4:	f100 0001 	add.w	r0, r0, #1
 800a6a8:	bf08      	it	eq
 800a6aa:	2020      	moveq	r0, #32
 800a6ac:	4770      	bx	lr

0800a6ae <__lo0bits>:
 800a6ae:	6803      	ldr	r3, [r0, #0]
 800a6b0:	4602      	mov	r2, r0
 800a6b2:	f013 0007 	ands.w	r0, r3, #7
 800a6b6:	d00b      	beq.n	800a6d0 <__lo0bits+0x22>
 800a6b8:	07d9      	lsls	r1, r3, #31
 800a6ba:	d421      	bmi.n	800a700 <__lo0bits+0x52>
 800a6bc:	0798      	lsls	r0, r3, #30
 800a6be:	bf49      	itett	mi
 800a6c0:	085b      	lsrmi	r3, r3, #1
 800a6c2:	089b      	lsrpl	r3, r3, #2
 800a6c4:	2001      	movmi	r0, #1
 800a6c6:	6013      	strmi	r3, [r2, #0]
 800a6c8:	bf5c      	itt	pl
 800a6ca:	2002      	movpl	r0, #2
 800a6cc:	6013      	strpl	r3, [r2, #0]
 800a6ce:	4770      	bx	lr
 800a6d0:	b299      	uxth	r1, r3
 800a6d2:	b909      	cbnz	r1, 800a6d8 <__lo0bits+0x2a>
 800a6d4:	2010      	movs	r0, #16
 800a6d6:	0c1b      	lsrs	r3, r3, #16
 800a6d8:	b2d9      	uxtb	r1, r3
 800a6da:	b909      	cbnz	r1, 800a6e0 <__lo0bits+0x32>
 800a6dc:	3008      	adds	r0, #8
 800a6de:	0a1b      	lsrs	r3, r3, #8
 800a6e0:	0719      	lsls	r1, r3, #28
 800a6e2:	bf04      	itt	eq
 800a6e4:	091b      	lsreq	r3, r3, #4
 800a6e6:	3004      	addeq	r0, #4
 800a6e8:	0799      	lsls	r1, r3, #30
 800a6ea:	bf04      	itt	eq
 800a6ec:	089b      	lsreq	r3, r3, #2
 800a6ee:	3002      	addeq	r0, #2
 800a6f0:	07d9      	lsls	r1, r3, #31
 800a6f2:	d403      	bmi.n	800a6fc <__lo0bits+0x4e>
 800a6f4:	085b      	lsrs	r3, r3, #1
 800a6f6:	f100 0001 	add.w	r0, r0, #1
 800a6fa:	d003      	beq.n	800a704 <__lo0bits+0x56>
 800a6fc:	6013      	str	r3, [r2, #0]
 800a6fe:	4770      	bx	lr
 800a700:	2000      	movs	r0, #0
 800a702:	4770      	bx	lr
 800a704:	2020      	movs	r0, #32
 800a706:	4770      	bx	lr

0800a708 <__i2b>:
 800a708:	b510      	push	{r4, lr}
 800a70a:	460c      	mov	r4, r1
 800a70c:	2101      	movs	r1, #1
 800a70e:	f7ff ff07 	bl	800a520 <_Balloc>
 800a712:	4602      	mov	r2, r0
 800a714:	b928      	cbnz	r0, 800a722 <__i2b+0x1a>
 800a716:	f240 1145 	movw	r1, #325	@ 0x145
 800a71a:	4b04      	ldr	r3, [pc, #16]	@ (800a72c <__i2b+0x24>)
 800a71c:	4804      	ldr	r0, [pc, #16]	@ (800a730 <__i2b+0x28>)
 800a71e:	f7fd fe73 	bl	8008408 <__assert_func>
 800a722:	2301      	movs	r3, #1
 800a724:	6144      	str	r4, [r0, #20]
 800a726:	6103      	str	r3, [r0, #16]
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	bf00      	nop
 800a72c:	0800b0d5 	.word	0x0800b0d5
 800a730:	0800b0e6 	.word	0x0800b0e6

0800a734 <__multiply>:
 800a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a738:	4614      	mov	r4, r2
 800a73a:	690a      	ldr	r2, [r1, #16]
 800a73c:	6923      	ldr	r3, [r4, #16]
 800a73e:	460f      	mov	r7, r1
 800a740:	429a      	cmp	r2, r3
 800a742:	bfa2      	ittt	ge
 800a744:	4623      	movge	r3, r4
 800a746:	460c      	movge	r4, r1
 800a748:	461f      	movge	r7, r3
 800a74a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a74e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a752:	68a3      	ldr	r3, [r4, #8]
 800a754:	6861      	ldr	r1, [r4, #4]
 800a756:	eb0a 0609 	add.w	r6, sl, r9
 800a75a:	42b3      	cmp	r3, r6
 800a75c:	b085      	sub	sp, #20
 800a75e:	bfb8      	it	lt
 800a760:	3101      	addlt	r1, #1
 800a762:	f7ff fedd 	bl	800a520 <_Balloc>
 800a766:	b930      	cbnz	r0, 800a776 <__multiply+0x42>
 800a768:	4602      	mov	r2, r0
 800a76a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a76e:	4b43      	ldr	r3, [pc, #268]	@ (800a87c <__multiply+0x148>)
 800a770:	4843      	ldr	r0, [pc, #268]	@ (800a880 <__multiply+0x14c>)
 800a772:	f7fd fe49 	bl	8008408 <__assert_func>
 800a776:	f100 0514 	add.w	r5, r0, #20
 800a77a:	462b      	mov	r3, r5
 800a77c:	2200      	movs	r2, #0
 800a77e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a782:	4543      	cmp	r3, r8
 800a784:	d321      	bcc.n	800a7ca <__multiply+0x96>
 800a786:	f107 0114 	add.w	r1, r7, #20
 800a78a:	f104 0214 	add.w	r2, r4, #20
 800a78e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a792:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a796:	9302      	str	r3, [sp, #8]
 800a798:	1b13      	subs	r3, r2, r4
 800a79a:	3b15      	subs	r3, #21
 800a79c:	f023 0303 	bic.w	r3, r3, #3
 800a7a0:	3304      	adds	r3, #4
 800a7a2:	f104 0715 	add.w	r7, r4, #21
 800a7a6:	42ba      	cmp	r2, r7
 800a7a8:	bf38      	it	cc
 800a7aa:	2304      	movcc	r3, #4
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	9b02      	ldr	r3, [sp, #8]
 800a7b0:	9103      	str	r1, [sp, #12]
 800a7b2:	428b      	cmp	r3, r1
 800a7b4:	d80c      	bhi.n	800a7d0 <__multiply+0x9c>
 800a7b6:	2e00      	cmp	r6, #0
 800a7b8:	dd03      	ble.n	800a7c2 <__multiply+0x8e>
 800a7ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d05a      	beq.n	800a878 <__multiply+0x144>
 800a7c2:	6106      	str	r6, [r0, #16]
 800a7c4:	b005      	add	sp, #20
 800a7c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7ca:	f843 2b04 	str.w	r2, [r3], #4
 800a7ce:	e7d8      	b.n	800a782 <__multiply+0x4e>
 800a7d0:	f8b1 a000 	ldrh.w	sl, [r1]
 800a7d4:	f1ba 0f00 	cmp.w	sl, #0
 800a7d8:	d023      	beq.n	800a822 <__multiply+0xee>
 800a7da:	46a9      	mov	r9, r5
 800a7dc:	f04f 0c00 	mov.w	ip, #0
 800a7e0:	f104 0e14 	add.w	lr, r4, #20
 800a7e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a7e8:	f8d9 3000 	ldr.w	r3, [r9]
 800a7ec:	fa1f fb87 	uxth.w	fp, r7
 800a7f0:	b29b      	uxth	r3, r3
 800a7f2:	fb0a 330b 	mla	r3, sl, fp, r3
 800a7f6:	4463      	add	r3, ip
 800a7f8:	f8d9 c000 	ldr.w	ip, [r9]
 800a7fc:	0c3f      	lsrs	r7, r7, #16
 800a7fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800a802:	fb0a c707 	mla	r7, sl, r7, ip
 800a806:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a80a:	b29b      	uxth	r3, r3
 800a80c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a810:	4572      	cmp	r2, lr
 800a812:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a816:	f849 3b04 	str.w	r3, [r9], #4
 800a81a:	d8e3      	bhi.n	800a7e4 <__multiply+0xb0>
 800a81c:	9b01      	ldr	r3, [sp, #4]
 800a81e:	f845 c003 	str.w	ip, [r5, r3]
 800a822:	9b03      	ldr	r3, [sp, #12]
 800a824:	3104      	adds	r1, #4
 800a826:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a82a:	f1b9 0f00 	cmp.w	r9, #0
 800a82e:	d021      	beq.n	800a874 <__multiply+0x140>
 800a830:	46ae      	mov	lr, r5
 800a832:	f04f 0a00 	mov.w	sl, #0
 800a836:	682b      	ldr	r3, [r5, #0]
 800a838:	f104 0c14 	add.w	ip, r4, #20
 800a83c:	f8bc b000 	ldrh.w	fp, [ip]
 800a840:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a844:	b29b      	uxth	r3, r3
 800a846:	fb09 770b 	mla	r7, r9, fp, r7
 800a84a:	4457      	add	r7, sl
 800a84c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a850:	f84e 3b04 	str.w	r3, [lr], #4
 800a854:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a858:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a85c:	f8be 3000 	ldrh.w	r3, [lr]
 800a860:	4562      	cmp	r2, ip
 800a862:	fb09 330a 	mla	r3, r9, sl, r3
 800a866:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a86a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a86e:	d8e5      	bhi.n	800a83c <__multiply+0x108>
 800a870:	9f01      	ldr	r7, [sp, #4]
 800a872:	51eb      	str	r3, [r5, r7]
 800a874:	3504      	adds	r5, #4
 800a876:	e79a      	b.n	800a7ae <__multiply+0x7a>
 800a878:	3e01      	subs	r6, #1
 800a87a:	e79c      	b.n	800a7b6 <__multiply+0x82>
 800a87c:	0800b0d5 	.word	0x0800b0d5
 800a880:	0800b0e6 	.word	0x0800b0e6

0800a884 <__pow5mult>:
 800a884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a888:	4615      	mov	r5, r2
 800a88a:	f012 0203 	ands.w	r2, r2, #3
 800a88e:	4607      	mov	r7, r0
 800a890:	460e      	mov	r6, r1
 800a892:	d007      	beq.n	800a8a4 <__pow5mult+0x20>
 800a894:	4c25      	ldr	r4, [pc, #148]	@ (800a92c <__pow5mult+0xa8>)
 800a896:	3a01      	subs	r2, #1
 800a898:	2300      	movs	r3, #0
 800a89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a89e:	f7ff fea1 	bl	800a5e4 <__multadd>
 800a8a2:	4606      	mov	r6, r0
 800a8a4:	10ad      	asrs	r5, r5, #2
 800a8a6:	d03d      	beq.n	800a924 <__pow5mult+0xa0>
 800a8a8:	69fc      	ldr	r4, [r7, #28]
 800a8aa:	b97c      	cbnz	r4, 800a8cc <__pow5mult+0x48>
 800a8ac:	2010      	movs	r0, #16
 800a8ae:	f7fd fde5 	bl	800847c <malloc>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	61f8      	str	r0, [r7, #28]
 800a8b6:	b928      	cbnz	r0, 800a8c4 <__pow5mult+0x40>
 800a8b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a8bc:	4b1c      	ldr	r3, [pc, #112]	@ (800a930 <__pow5mult+0xac>)
 800a8be:	481d      	ldr	r0, [pc, #116]	@ (800a934 <__pow5mult+0xb0>)
 800a8c0:	f7fd fda2 	bl	8008408 <__assert_func>
 800a8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a8c8:	6004      	str	r4, [r0, #0]
 800a8ca:	60c4      	str	r4, [r0, #12]
 800a8cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a8d4:	b94c      	cbnz	r4, 800a8ea <__pow5mult+0x66>
 800a8d6:	f240 2171 	movw	r1, #625	@ 0x271
 800a8da:	4638      	mov	r0, r7
 800a8dc:	f7ff ff14 	bl	800a708 <__i2b>
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4604      	mov	r4, r0
 800a8e4:	f8c8 0008 	str.w	r0, [r8, #8]
 800a8e8:	6003      	str	r3, [r0, #0]
 800a8ea:	f04f 0900 	mov.w	r9, #0
 800a8ee:	07eb      	lsls	r3, r5, #31
 800a8f0:	d50a      	bpl.n	800a908 <__pow5mult+0x84>
 800a8f2:	4631      	mov	r1, r6
 800a8f4:	4622      	mov	r2, r4
 800a8f6:	4638      	mov	r0, r7
 800a8f8:	f7ff ff1c 	bl	800a734 <__multiply>
 800a8fc:	4680      	mov	r8, r0
 800a8fe:	4631      	mov	r1, r6
 800a900:	4638      	mov	r0, r7
 800a902:	f7ff fe4d 	bl	800a5a0 <_Bfree>
 800a906:	4646      	mov	r6, r8
 800a908:	106d      	asrs	r5, r5, #1
 800a90a:	d00b      	beq.n	800a924 <__pow5mult+0xa0>
 800a90c:	6820      	ldr	r0, [r4, #0]
 800a90e:	b938      	cbnz	r0, 800a920 <__pow5mult+0x9c>
 800a910:	4622      	mov	r2, r4
 800a912:	4621      	mov	r1, r4
 800a914:	4638      	mov	r0, r7
 800a916:	f7ff ff0d 	bl	800a734 <__multiply>
 800a91a:	6020      	str	r0, [r4, #0]
 800a91c:	f8c0 9000 	str.w	r9, [r0]
 800a920:	4604      	mov	r4, r0
 800a922:	e7e4      	b.n	800a8ee <__pow5mult+0x6a>
 800a924:	4630      	mov	r0, r6
 800a926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a92a:	bf00      	nop
 800a92c:	0800b140 	.word	0x0800b140
 800a930:	0800b066 	.word	0x0800b066
 800a934:	0800b0e6 	.word	0x0800b0e6

0800a938 <__lshift>:
 800a938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a93c:	460c      	mov	r4, r1
 800a93e:	4607      	mov	r7, r0
 800a940:	4691      	mov	r9, r2
 800a942:	6923      	ldr	r3, [r4, #16]
 800a944:	6849      	ldr	r1, [r1, #4]
 800a946:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a94a:	68a3      	ldr	r3, [r4, #8]
 800a94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a950:	f108 0601 	add.w	r6, r8, #1
 800a954:	42b3      	cmp	r3, r6
 800a956:	db0b      	blt.n	800a970 <__lshift+0x38>
 800a958:	4638      	mov	r0, r7
 800a95a:	f7ff fde1 	bl	800a520 <_Balloc>
 800a95e:	4605      	mov	r5, r0
 800a960:	b948      	cbnz	r0, 800a976 <__lshift+0x3e>
 800a962:	4602      	mov	r2, r0
 800a964:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a968:	4b27      	ldr	r3, [pc, #156]	@ (800aa08 <__lshift+0xd0>)
 800a96a:	4828      	ldr	r0, [pc, #160]	@ (800aa0c <__lshift+0xd4>)
 800a96c:	f7fd fd4c 	bl	8008408 <__assert_func>
 800a970:	3101      	adds	r1, #1
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	e7ee      	b.n	800a954 <__lshift+0x1c>
 800a976:	2300      	movs	r3, #0
 800a978:	f100 0114 	add.w	r1, r0, #20
 800a97c:	f100 0210 	add.w	r2, r0, #16
 800a980:	4618      	mov	r0, r3
 800a982:	4553      	cmp	r3, sl
 800a984:	db33      	blt.n	800a9ee <__lshift+0xb6>
 800a986:	6920      	ldr	r0, [r4, #16]
 800a988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a98c:	f104 0314 	add.w	r3, r4, #20
 800a990:	f019 091f 	ands.w	r9, r9, #31
 800a994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a998:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a99c:	d02b      	beq.n	800a9f6 <__lshift+0xbe>
 800a99e:	468a      	mov	sl, r1
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f1c9 0e20 	rsb	lr, r9, #32
 800a9a6:	6818      	ldr	r0, [r3, #0]
 800a9a8:	fa00 f009 	lsl.w	r0, r0, r9
 800a9ac:	4310      	orrs	r0, r2
 800a9ae:	f84a 0b04 	str.w	r0, [sl], #4
 800a9b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9b6:	459c      	cmp	ip, r3
 800a9b8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a9bc:	d8f3      	bhi.n	800a9a6 <__lshift+0x6e>
 800a9be:	ebac 0304 	sub.w	r3, ip, r4
 800a9c2:	3b15      	subs	r3, #21
 800a9c4:	f023 0303 	bic.w	r3, r3, #3
 800a9c8:	3304      	adds	r3, #4
 800a9ca:	f104 0015 	add.w	r0, r4, #21
 800a9ce:	4584      	cmp	ip, r0
 800a9d0:	bf38      	it	cc
 800a9d2:	2304      	movcc	r3, #4
 800a9d4:	50ca      	str	r2, [r1, r3]
 800a9d6:	b10a      	cbz	r2, 800a9dc <__lshift+0xa4>
 800a9d8:	f108 0602 	add.w	r6, r8, #2
 800a9dc:	3e01      	subs	r6, #1
 800a9de:	4638      	mov	r0, r7
 800a9e0:	4621      	mov	r1, r4
 800a9e2:	612e      	str	r6, [r5, #16]
 800a9e4:	f7ff fddc 	bl	800a5a0 <_Bfree>
 800a9e8:	4628      	mov	r0, r5
 800a9ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9ee:	f842 0f04 	str.w	r0, [r2, #4]!
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	e7c5      	b.n	800a982 <__lshift+0x4a>
 800a9f6:	3904      	subs	r1, #4
 800a9f8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9fc:	459c      	cmp	ip, r3
 800a9fe:	f841 2f04 	str.w	r2, [r1, #4]!
 800aa02:	d8f9      	bhi.n	800a9f8 <__lshift+0xc0>
 800aa04:	e7ea      	b.n	800a9dc <__lshift+0xa4>
 800aa06:	bf00      	nop
 800aa08:	0800b0d5 	.word	0x0800b0d5
 800aa0c:	0800b0e6 	.word	0x0800b0e6

0800aa10 <__mcmp>:
 800aa10:	4603      	mov	r3, r0
 800aa12:	690a      	ldr	r2, [r1, #16]
 800aa14:	6900      	ldr	r0, [r0, #16]
 800aa16:	b530      	push	{r4, r5, lr}
 800aa18:	1a80      	subs	r0, r0, r2
 800aa1a:	d10e      	bne.n	800aa3a <__mcmp+0x2a>
 800aa1c:	3314      	adds	r3, #20
 800aa1e:	3114      	adds	r1, #20
 800aa20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800aa24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800aa28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800aa2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800aa30:	4295      	cmp	r5, r2
 800aa32:	d003      	beq.n	800aa3c <__mcmp+0x2c>
 800aa34:	d205      	bcs.n	800aa42 <__mcmp+0x32>
 800aa36:	f04f 30ff 	mov.w	r0, #4294967295
 800aa3a:	bd30      	pop	{r4, r5, pc}
 800aa3c:	42a3      	cmp	r3, r4
 800aa3e:	d3f3      	bcc.n	800aa28 <__mcmp+0x18>
 800aa40:	e7fb      	b.n	800aa3a <__mcmp+0x2a>
 800aa42:	2001      	movs	r0, #1
 800aa44:	e7f9      	b.n	800aa3a <__mcmp+0x2a>
	...

0800aa48 <__mdiff>:
 800aa48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa4c:	4689      	mov	r9, r1
 800aa4e:	4606      	mov	r6, r0
 800aa50:	4611      	mov	r1, r2
 800aa52:	4648      	mov	r0, r9
 800aa54:	4614      	mov	r4, r2
 800aa56:	f7ff ffdb 	bl	800aa10 <__mcmp>
 800aa5a:	1e05      	subs	r5, r0, #0
 800aa5c:	d112      	bne.n	800aa84 <__mdiff+0x3c>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff fd5d 	bl	800a520 <_Balloc>
 800aa66:	4602      	mov	r2, r0
 800aa68:	b928      	cbnz	r0, 800aa76 <__mdiff+0x2e>
 800aa6a:	f240 2137 	movw	r1, #567	@ 0x237
 800aa6e:	4b3e      	ldr	r3, [pc, #248]	@ (800ab68 <__mdiff+0x120>)
 800aa70:	483e      	ldr	r0, [pc, #248]	@ (800ab6c <__mdiff+0x124>)
 800aa72:	f7fd fcc9 	bl	8008408 <__assert_func>
 800aa76:	2301      	movs	r3, #1
 800aa78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800aa7c:	4610      	mov	r0, r2
 800aa7e:	b003      	add	sp, #12
 800aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa84:	bfbc      	itt	lt
 800aa86:	464b      	movlt	r3, r9
 800aa88:	46a1      	movlt	r9, r4
 800aa8a:	4630      	mov	r0, r6
 800aa8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800aa90:	bfba      	itte	lt
 800aa92:	461c      	movlt	r4, r3
 800aa94:	2501      	movlt	r5, #1
 800aa96:	2500      	movge	r5, #0
 800aa98:	f7ff fd42 	bl	800a520 <_Balloc>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	b918      	cbnz	r0, 800aaa8 <__mdiff+0x60>
 800aaa0:	f240 2145 	movw	r1, #581	@ 0x245
 800aaa4:	4b30      	ldr	r3, [pc, #192]	@ (800ab68 <__mdiff+0x120>)
 800aaa6:	e7e3      	b.n	800aa70 <__mdiff+0x28>
 800aaa8:	f100 0b14 	add.w	fp, r0, #20
 800aaac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800aab0:	f109 0310 	add.w	r3, r9, #16
 800aab4:	60c5      	str	r5, [r0, #12]
 800aab6:	f04f 0c00 	mov.w	ip, #0
 800aaba:	f109 0514 	add.w	r5, r9, #20
 800aabe:	46d9      	mov	r9, fp
 800aac0:	6926      	ldr	r6, [r4, #16]
 800aac2:	f104 0e14 	add.w	lr, r4, #20
 800aac6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aaca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aace:	9301      	str	r3, [sp, #4]
 800aad0:	9b01      	ldr	r3, [sp, #4]
 800aad2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aad6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aada:	b281      	uxth	r1, r0
 800aadc:	9301      	str	r3, [sp, #4]
 800aade:	fa1f f38a 	uxth.w	r3, sl
 800aae2:	1a5b      	subs	r3, r3, r1
 800aae4:	0c00      	lsrs	r0, r0, #16
 800aae6:	4463      	add	r3, ip
 800aae8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aaec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aaf0:	b29b      	uxth	r3, r3
 800aaf2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aaf6:	4576      	cmp	r6, lr
 800aaf8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aafc:	f849 3b04 	str.w	r3, [r9], #4
 800ab00:	d8e6      	bhi.n	800aad0 <__mdiff+0x88>
 800ab02:	1b33      	subs	r3, r6, r4
 800ab04:	3b15      	subs	r3, #21
 800ab06:	f023 0303 	bic.w	r3, r3, #3
 800ab0a:	3415      	adds	r4, #21
 800ab0c:	3304      	adds	r3, #4
 800ab0e:	42a6      	cmp	r6, r4
 800ab10:	bf38      	it	cc
 800ab12:	2304      	movcc	r3, #4
 800ab14:	441d      	add	r5, r3
 800ab16:	445b      	add	r3, fp
 800ab18:	461e      	mov	r6, r3
 800ab1a:	462c      	mov	r4, r5
 800ab1c:	4544      	cmp	r4, r8
 800ab1e:	d30e      	bcc.n	800ab3e <__mdiff+0xf6>
 800ab20:	f108 0103 	add.w	r1, r8, #3
 800ab24:	1b49      	subs	r1, r1, r5
 800ab26:	f021 0103 	bic.w	r1, r1, #3
 800ab2a:	3d03      	subs	r5, #3
 800ab2c:	45a8      	cmp	r8, r5
 800ab2e:	bf38      	it	cc
 800ab30:	2100      	movcc	r1, #0
 800ab32:	440b      	add	r3, r1
 800ab34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab38:	b199      	cbz	r1, 800ab62 <__mdiff+0x11a>
 800ab3a:	6117      	str	r7, [r2, #16]
 800ab3c:	e79e      	b.n	800aa7c <__mdiff+0x34>
 800ab3e:	46e6      	mov	lr, ip
 800ab40:	f854 1b04 	ldr.w	r1, [r4], #4
 800ab44:	fa1f fc81 	uxth.w	ip, r1
 800ab48:	44f4      	add	ip, lr
 800ab4a:	0c08      	lsrs	r0, r1, #16
 800ab4c:	4471      	add	r1, lr
 800ab4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ab52:	b289      	uxth	r1, r1
 800ab54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ab58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ab5c:	f846 1b04 	str.w	r1, [r6], #4
 800ab60:	e7dc      	b.n	800ab1c <__mdiff+0xd4>
 800ab62:	3f01      	subs	r7, #1
 800ab64:	e7e6      	b.n	800ab34 <__mdiff+0xec>
 800ab66:	bf00      	nop
 800ab68:	0800b0d5 	.word	0x0800b0d5
 800ab6c:	0800b0e6 	.word	0x0800b0e6

0800ab70 <__d2b>:
 800ab70:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800ab74:	2101      	movs	r1, #1
 800ab76:	4690      	mov	r8, r2
 800ab78:	4699      	mov	r9, r3
 800ab7a:	9e08      	ldr	r6, [sp, #32]
 800ab7c:	f7ff fcd0 	bl	800a520 <_Balloc>
 800ab80:	4604      	mov	r4, r0
 800ab82:	b930      	cbnz	r0, 800ab92 <__d2b+0x22>
 800ab84:	4602      	mov	r2, r0
 800ab86:	f240 310f 	movw	r1, #783	@ 0x30f
 800ab8a:	4b23      	ldr	r3, [pc, #140]	@ (800ac18 <__d2b+0xa8>)
 800ab8c:	4823      	ldr	r0, [pc, #140]	@ (800ac1c <__d2b+0xac>)
 800ab8e:	f7fd fc3b 	bl	8008408 <__assert_func>
 800ab92:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800ab96:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ab9a:	b10d      	cbz	r5, 800aba0 <__d2b+0x30>
 800ab9c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aba0:	9301      	str	r3, [sp, #4]
 800aba2:	f1b8 0300 	subs.w	r3, r8, #0
 800aba6:	d024      	beq.n	800abf2 <__d2b+0x82>
 800aba8:	4668      	mov	r0, sp
 800abaa:	9300      	str	r3, [sp, #0]
 800abac:	f7ff fd7f 	bl	800a6ae <__lo0bits>
 800abb0:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abb4:	b1d8      	cbz	r0, 800abee <__d2b+0x7e>
 800abb6:	f1c0 0320 	rsb	r3, r0, #32
 800abba:	fa02 f303 	lsl.w	r3, r2, r3
 800abbe:	430b      	orrs	r3, r1
 800abc0:	40c2      	lsrs	r2, r0
 800abc2:	6163      	str	r3, [r4, #20]
 800abc4:	9201      	str	r2, [sp, #4]
 800abc6:	9b01      	ldr	r3, [sp, #4]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	bf0c      	ite	eq
 800abcc:	2201      	moveq	r2, #1
 800abce:	2202      	movne	r2, #2
 800abd0:	61a3      	str	r3, [r4, #24]
 800abd2:	6122      	str	r2, [r4, #16]
 800abd4:	b1ad      	cbz	r5, 800ac02 <__d2b+0x92>
 800abd6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800abda:	4405      	add	r5, r0
 800abdc:	6035      	str	r5, [r6, #0]
 800abde:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800abe2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abe4:	6018      	str	r0, [r3, #0]
 800abe6:	4620      	mov	r0, r4
 800abe8:	b002      	add	sp, #8
 800abea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800abee:	6161      	str	r1, [r4, #20]
 800abf0:	e7e9      	b.n	800abc6 <__d2b+0x56>
 800abf2:	a801      	add	r0, sp, #4
 800abf4:	f7ff fd5b 	bl	800a6ae <__lo0bits>
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	2201      	movs	r2, #1
 800abfc:	6163      	str	r3, [r4, #20]
 800abfe:	3020      	adds	r0, #32
 800ac00:	e7e7      	b.n	800abd2 <__d2b+0x62>
 800ac02:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac06:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac0a:	6030      	str	r0, [r6, #0]
 800ac0c:	6918      	ldr	r0, [r3, #16]
 800ac0e:	f7ff fd2f 	bl	800a670 <__hi0bits>
 800ac12:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac16:	e7e4      	b.n	800abe2 <__d2b+0x72>
 800ac18:	0800b0d5 	.word	0x0800b0d5
 800ac1c:	0800b0e6 	.word	0x0800b0e6

0800ac20 <__swhatbuf_r>:
 800ac20:	b570      	push	{r4, r5, r6, lr}
 800ac22:	460c      	mov	r4, r1
 800ac24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac28:	4615      	mov	r5, r2
 800ac2a:	2900      	cmp	r1, #0
 800ac2c:	461e      	mov	r6, r3
 800ac2e:	b096      	sub	sp, #88	@ 0x58
 800ac30:	da0c      	bge.n	800ac4c <__swhatbuf_r+0x2c>
 800ac32:	89a3      	ldrh	r3, [r4, #12]
 800ac34:	2100      	movs	r1, #0
 800ac36:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac3a:	bf14      	ite	ne
 800ac3c:	2340      	movne	r3, #64	@ 0x40
 800ac3e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac42:	2000      	movs	r0, #0
 800ac44:	6031      	str	r1, [r6, #0]
 800ac46:	602b      	str	r3, [r5, #0]
 800ac48:	b016      	add	sp, #88	@ 0x58
 800ac4a:	bd70      	pop	{r4, r5, r6, pc}
 800ac4c:	466a      	mov	r2, sp
 800ac4e:	f000 f849 	bl	800ace4 <_fstat_r>
 800ac52:	2800      	cmp	r0, #0
 800ac54:	dbed      	blt.n	800ac32 <__swhatbuf_r+0x12>
 800ac56:	9901      	ldr	r1, [sp, #4]
 800ac58:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac5c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac60:	4259      	negs	r1, r3
 800ac62:	4159      	adcs	r1, r3
 800ac64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac68:	e7eb      	b.n	800ac42 <__swhatbuf_r+0x22>

0800ac6a <__smakebuf_r>:
 800ac6a:	898b      	ldrh	r3, [r1, #12]
 800ac6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac6e:	079d      	lsls	r5, r3, #30
 800ac70:	4606      	mov	r6, r0
 800ac72:	460c      	mov	r4, r1
 800ac74:	d507      	bpl.n	800ac86 <__smakebuf_r+0x1c>
 800ac76:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac7a:	6023      	str	r3, [r4, #0]
 800ac7c:	6123      	str	r3, [r4, #16]
 800ac7e:	2301      	movs	r3, #1
 800ac80:	6163      	str	r3, [r4, #20]
 800ac82:	b003      	add	sp, #12
 800ac84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac86:	466a      	mov	r2, sp
 800ac88:	ab01      	add	r3, sp, #4
 800ac8a:	f7ff ffc9 	bl	800ac20 <__swhatbuf_r>
 800ac8e:	9f00      	ldr	r7, [sp, #0]
 800ac90:	4605      	mov	r5, r0
 800ac92:	4639      	mov	r1, r7
 800ac94:	4630      	mov	r0, r6
 800ac96:	f7fd fc23 	bl	80084e0 <_malloc_r>
 800ac9a:	b948      	cbnz	r0, 800acb0 <__smakebuf_r+0x46>
 800ac9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aca0:	059a      	lsls	r2, r3, #22
 800aca2:	d4ee      	bmi.n	800ac82 <__smakebuf_r+0x18>
 800aca4:	f023 0303 	bic.w	r3, r3, #3
 800aca8:	f043 0302 	orr.w	r3, r3, #2
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	e7e2      	b.n	800ac76 <__smakebuf_r+0xc>
 800acb0:	89a3      	ldrh	r3, [r4, #12]
 800acb2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acba:	81a3      	strh	r3, [r4, #12]
 800acbc:	9b01      	ldr	r3, [sp, #4]
 800acbe:	6020      	str	r0, [r4, #0]
 800acc0:	b15b      	cbz	r3, 800acda <__smakebuf_r+0x70>
 800acc2:	4630      	mov	r0, r6
 800acc4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800acc8:	f000 f81e 	bl	800ad08 <_isatty_r>
 800accc:	b128      	cbz	r0, 800acda <__smakebuf_r+0x70>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	f023 0303 	bic.w	r3, r3, #3
 800acd4:	f043 0301 	orr.w	r3, r3, #1
 800acd8:	81a3      	strh	r3, [r4, #12]
 800acda:	89a3      	ldrh	r3, [r4, #12]
 800acdc:	431d      	orrs	r5, r3
 800acde:	81a5      	strh	r5, [r4, #12]
 800ace0:	e7cf      	b.n	800ac82 <__smakebuf_r+0x18>
	...

0800ace4 <_fstat_r>:
 800ace4:	b538      	push	{r3, r4, r5, lr}
 800ace6:	2300      	movs	r3, #0
 800ace8:	4d06      	ldr	r5, [pc, #24]	@ (800ad04 <_fstat_r+0x20>)
 800acea:	4604      	mov	r4, r0
 800acec:	4608      	mov	r0, r1
 800acee:	4611      	mov	r1, r2
 800acf0:	602b      	str	r3, [r5, #0]
 800acf2:	f7f6 fd45 	bl	8001780 <_fstat>
 800acf6:	1c43      	adds	r3, r0, #1
 800acf8:	d102      	bne.n	800ad00 <_fstat_r+0x1c>
 800acfa:	682b      	ldr	r3, [r5, #0]
 800acfc:	b103      	cbz	r3, 800ad00 <_fstat_r+0x1c>
 800acfe:	6023      	str	r3, [r4, #0]
 800ad00:	bd38      	pop	{r3, r4, r5, pc}
 800ad02:	bf00      	nop
 800ad04:	200004b0 	.word	0x200004b0

0800ad08 <_isatty_r>:
 800ad08:	b538      	push	{r3, r4, r5, lr}
 800ad0a:	2300      	movs	r3, #0
 800ad0c:	4d05      	ldr	r5, [pc, #20]	@ (800ad24 <_isatty_r+0x1c>)
 800ad0e:	4604      	mov	r4, r0
 800ad10:	4608      	mov	r0, r1
 800ad12:	602b      	str	r3, [r5, #0]
 800ad14:	f7f6 fd43 	bl	800179e <_isatty>
 800ad18:	1c43      	adds	r3, r0, #1
 800ad1a:	d102      	bne.n	800ad22 <_isatty_r+0x1a>
 800ad1c:	682b      	ldr	r3, [r5, #0]
 800ad1e:	b103      	cbz	r3, 800ad22 <_isatty_r+0x1a>
 800ad20:	6023      	str	r3, [r4, #0]
 800ad22:	bd38      	pop	{r3, r4, r5, pc}
 800ad24:	200004b0 	.word	0x200004b0

0800ad28 <__ascii_mbtowc>:
 800ad28:	b082      	sub	sp, #8
 800ad2a:	b901      	cbnz	r1, 800ad2e <__ascii_mbtowc+0x6>
 800ad2c:	a901      	add	r1, sp, #4
 800ad2e:	b142      	cbz	r2, 800ad42 <__ascii_mbtowc+0x1a>
 800ad30:	b14b      	cbz	r3, 800ad46 <__ascii_mbtowc+0x1e>
 800ad32:	7813      	ldrb	r3, [r2, #0]
 800ad34:	600b      	str	r3, [r1, #0]
 800ad36:	7812      	ldrb	r2, [r2, #0]
 800ad38:	1e10      	subs	r0, r2, #0
 800ad3a:	bf18      	it	ne
 800ad3c:	2001      	movne	r0, #1
 800ad3e:	b002      	add	sp, #8
 800ad40:	4770      	bx	lr
 800ad42:	4610      	mov	r0, r2
 800ad44:	e7fb      	b.n	800ad3e <__ascii_mbtowc+0x16>
 800ad46:	f06f 0001 	mvn.w	r0, #1
 800ad4a:	e7f8      	b.n	800ad3e <__ascii_mbtowc+0x16>

0800ad4c <__ascii_wctomb>:
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	4608      	mov	r0, r1
 800ad50:	b141      	cbz	r1, 800ad64 <__ascii_wctomb+0x18>
 800ad52:	2aff      	cmp	r2, #255	@ 0xff
 800ad54:	d904      	bls.n	800ad60 <__ascii_wctomb+0x14>
 800ad56:	228a      	movs	r2, #138	@ 0x8a
 800ad58:	f04f 30ff 	mov.w	r0, #4294967295
 800ad5c:	601a      	str	r2, [r3, #0]
 800ad5e:	4770      	bx	lr
 800ad60:	2001      	movs	r0, #1
 800ad62:	700a      	strb	r2, [r1, #0]
 800ad64:	4770      	bx	lr
	...

0800ad68 <_init>:
 800ad68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad6a:	bf00      	nop
 800ad6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad6e:	bc08      	pop	{r3}
 800ad70:	469e      	mov	lr, r3
 800ad72:	4770      	bx	lr

0800ad74 <_fini>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr
