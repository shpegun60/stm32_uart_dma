
BluePill_generic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013bc  08007980  08007980  00008980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d3c  08008d3c  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d3c  08008d3c  00009d3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d44  08008d44  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08008d44  08008d44  00009d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  08008d4c  08008d4c  00009d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008d54  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  08008f28  0000a1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08008f28  0000a4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00025383  00000000  00000000  0000a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007176  00000000  00000000  0002f580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000ac02  00000000  00000000  000366f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fc0  00000000  00000000  000412f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001097  00000000  00000000  000422b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb63  00000000  00000000  0004334f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023d06  00000000  00000000  00062eb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009af11  00000000  00000000  00086bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121ac9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003dcc  00000000  00000000  00121b0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006d  00000000  00000000  001258d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08007968 	.word	0x08007968

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08007968 	.word	0x08007968

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <__aeabi_f2uiz>:
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	d20e      	bcs.n	80010ca <__aeabi_f2uiz+0x22>
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b0:	d30b      	bcc.n	80010ca <__aeabi_f2uiz+0x22>
 80010b2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d409      	bmi.n	80010d0 <__aeabi_f2uiz+0x28>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2uiz+0x32>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d102      	bne.n	80010e0 <__aeabi_f2uiz+0x38>
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	4770      	bx	lr
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b500      	push	{lr}
 80010ea:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ec:	2300      	movs	r3, #0
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	9303      	str	r3, [sp, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f4:	484c      	ldr	r0, [pc, #304]	@ (8001228 <MX_ADC1_Init+0x140>)
 80010f6:	4a4d      	ldr	r2, [pc, #308]	@ (800122c <MX_ADC1_Init+0x144>)
 80010f8:	6002      	str	r2, [r0, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010fe:	6082      	str	r2, [r0, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001100:	2201      	movs	r2, #1
 8001102:	7302      	strb	r2, [r0, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001104:	7503      	strb	r3, [r0, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001106:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800110a:	61c2      	str	r2, [r0, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800110c:	6043      	str	r3, [r0, #4]
  hadc1.Init.NbrOfConversion = 10;
 800110e:	230a      	movs	r3, #10
 8001110:	6103      	str	r3, [r0, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001112:	f000 fd79 	bl	8001c08 <HAL_ADC_Init>
 8001116:	2800      	cmp	r0, #0
 8001118:	d164      	bne.n	80011e4 <MX_ADC1_Init+0xfc>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800111a:	2300      	movs	r3, #0
 800111c:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800111e:	2201      	movs	r2, #1
 8001120:	9202      	str	r2, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001122:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001124:	a901      	add	r1, sp, #4
 8001126:	4840      	ldr	r0, [pc, #256]	@ (8001228 <MX_ADC1_Init+0x140>)
 8001128:	f000 fbb8 	bl	800189c <HAL_ADC_ConfigChannel>
 800112c:	2800      	cmp	r0, #0
 800112e:	d15c      	bne.n	80011ea <MX_ADC1_Init+0x102>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001130:	2301      	movs	r3, #1
 8001132:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001134:	2302      	movs	r3, #2
 8001136:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001138:	a901      	add	r1, sp, #4
 800113a:	483b      	ldr	r0, [pc, #236]	@ (8001228 <MX_ADC1_Init+0x140>)
 800113c:	f000 fbae 	bl	800189c <HAL_ADC_ConfigChannel>
 8001140:	2800      	cmp	r0, #0
 8001142:	d155      	bne.n	80011f0 <MX_ADC1_Init+0x108>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001144:	2302      	movs	r3, #2
 8001146:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001148:	2303      	movs	r3, #3
 800114a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800114c:	a901      	add	r1, sp, #4
 800114e:	4836      	ldr	r0, [pc, #216]	@ (8001228 <MX_ADC1_Init+0x140>)
 8001150:	f000 fba4 	bl	800189c <HAL_ADC_ConfigChannel>
 8001154:	2800      	cmp	r0, #0
 8001156:	d14e      	bne.n	80011f6 <MX_ADC1_Init+0x10e>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001158:	2303      	movs	r3, #3
 800115a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800115c:	2304      	movs	r3, #4
 800115e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001160:	eb0d 0103 	add.w	r1, sp, r3
 8001164:	4830      	ldr	r0, [pc, #192]	@ (8001228 <MX_ADC1_Init+0x140>)
 8001166:	f000 fb99 	bl	800189c <HAL_ADC_ConfigChannel>
 800116a:	2800      	cmp	r0, #0
 800116c:	d146      	bne.n	80011fc <MX_ADC1_Init+0x114>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800116e:	2304      	movs	r3, #4
 8001170:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001172:	2305      	movs	r3, #5
 8001174:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001176:	a901      	add	r1, sp, #4
 8001178:	482b      	ldr	r0, [pc, #172]	@ (8001228 <MX_ADC1_Init+0x140>)
 800117a:	f000 fb8f 	bl	800189c <HAL_ADC_ConfigChannel>
 800117e:	2800      	cmp	r0, #0
 8001180:	d13f      	bne.n	8001202 <MX_ADC1_Init+0x11a>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001182:	2305      	movs	r3, #5
 8001184:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001186:	2306      	movs	r3, #6
 8001188:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800118a:	a901      	add	r1, sp, #4
 800118c:	4826      	ldr	r0, [pc, #152]	@ (8001228 <MX_ADC1_Init+0x140>)
 800118e:	f000 fb85 	bl	800189c <HAL_ADC_ConfigChannel>
 8001192:	2800      	cmp	r0, #0
 8001194:	d138      	bne.n	8001208 <MX_ADC1_Init+0x120>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001196:	2306      	movs	r3, #6
 8001198:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800119a:	2307      	movs	r3, #7
 800119c:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800119e:	a901      	add	r1, sp, #4
 80011a0:	4821      	ldr	r0, [pc, #132]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011a2:	f000 fb7b 	bl	800189c <HAL_ADC_ConfigChannel>
 80011a6:	bb90      	cbnz	r0, 800120e <MX_ADC1_Init+0x126>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011a8:	2307      	movs	r3, #7
 80011aa:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b0:	a901      	add	r1, sp, #4
 80011b2:	481d      	ldr	r0, [pc, #116]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011b4:	f000 fb72 	bl	800189c <HAL_ADC_ConfigChannel>
 80011b8:	bb60      	cbnz	r0, 8001214 <MX_ADC1_Init+0x12c>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80011ba:	2308      	movs	r3, #8
 80011bc:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 80011be:	2309      	movs	r3, #9
 80011c0:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011c2:	a901      	add	r1, sp, #4
 80011c4:	4818      	ldr	r0, [pc, #96]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011c6:	f000 fb69 	bl	800189c <HAL_ADC_ConfigChannel>
 80011ca:	bb30      	cbnz	r0, 800121a <MX_ADC1_Init+0x132>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80011cc:	2309      	movs	r3, #9
 80011ce:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 80011d0:	230a      	movs	r3, #10
 80011d2:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011d4:	a901      	add	r1, sp, #4
 80011d6:	4814      	ldr	r0, [pc, #80]	@ (8001228 <MX_ADC1_Init+0x140>)
 80011d8:	f000 fb60 	bl	800189c <HAL_ADC_ConfigChannel>
 80011dc:	bb00      	cbnz	r0, 8001220 <MX_ADC1_Init+0x138>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011de:	b005      	add	sp, #20
 80011e0:	f85d fb04 	ldr.w	pc, [sp], #4
    Error_Handler();
 80011e4:	f000 f96e 	bl	80014c4 <Error_Handler>
 80011e8:	e797      	b.n	800111a <MX_ADC1_Init+0x32>
    Error_Handler();
 80011ea:	f000 f96b 	bl	80014c4 <Error_Handler>
 80011ee:	e79f      	b.n	8001130 <MX_ADC1_Init+0x48>
    Error_Handler();
 80011f0:	f000 f968 	bl	80014c4 <Error_Handler>
 80011f4:	e7a6      	b.n	8001144 <MX_ADC1_Init+0x5c>
    Error_Handler();
 80011f6:	f000 f965 	bl	80014c4 <Error_Handler>
 80011fa:	e7ad      	b.n	8001158 <MX_ADC1_Init+0x70>
    Error_Handler();
 80011fc:	f000 f962 	bl	80014c4 <Error_Handler>
 8001200:	e7b5      	b.n	800116e <MX_ADC1_Init+0x86>
    Error_Handler();
 8001202:	f000 f95f 	bl	80014c4 <Error_Handler>
 8001206:	e7bc      	b.n	8001182 <MX_ADC1_Init+0x9a>
    Error_Handler();
 8001208:	f000 f95c 	bl	80014c4 <Error_Handler>
 800120c:	e7c3      	b.n	8001196 <MX_ADC1_Init+0xae>
    Error_Handler();
 800120e:	f000 f959 	bl	80014c4 <Error_Handler>
 8001212:	e7c9      	b.n	80011a8 <MX_ADC1_Init+0xc0>
    Error_Handler();
 8001214:	f000 f956 	bl	80014c4 <Error_Handler>
 8001218:	e7cf      	b.n	80011ba <MX_ADC1_Init+0xd2>
    Error_Handler();
 800121a:	f000 f953 	bl	80014c4 <Error_Handler>
 800121e:	e7d5      	b.n	80011cc <MX_ADC1_Init+0xe4>
    Error_Handler();
 8001220:	f000 f950 	bl	80014c4 <Error_Handler>
}
 8001224:	e7db      	b.n	80011de <MX_ADC1_Init+0xf6>
 8001226:	bf00      	nop
 8001228:	20000234 	.word	0x20000234
 800122c:	40012400 	.word	0x40012400

08001230 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001230:	b530      	push	{r4, r5, lr}
 8001232:	b089      	sub	sp, #36	@ 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	2300      	movs	r3, #0
 8001236:	9304      	str	r3, [sp, #16]
 8001238:	9305      	str	r3, [sp, #20]
 800123a:	9306      	str	r3, [sp, #24]
 800123c:	9307      	str	r3, [sp, #28]
  if(adcHandle->Instance==ADC1)
 800123e:	6802      	ldr	r2, [r0, #0]
 8001240:	4b25      	ldr	r3, [pc, #148]	@ (80012d8 <HAL_ADC_MspInit+0xa8>)
 8001242:	429a      	cmp	r2, r3
 8001244:	d001      	beq.n	800124a <HAL_ADC_MspInit+0x1a>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001246:	b009      	add	sp, #36	@ 0x24
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	4604      	mov	r4, r0
    __HAL_RCC_ADC1_CLK_ENABLE();
 800124c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
 8001250:	699a      	ldr	r2, [r3, #24]
 8001252:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001256:	619a      	str	r2, [r3, #24]
 8001258:	699a      	ldr	r2, [r3, #24]
 800125a:	f402 7200 	and.w	r2, r2, #512	@ 0x200
 800125e:	9201      	str	r2, [sp, #4]
 8001260:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001262:	699a      	ldr	r2, [r3, #24]
 8001264:	f042 0204 	orr.w	r2, r2, #4
 8001268:	619a      	str	r2, [r3, #24]
 800126a:	699a      	ldr	r2, [r3, #24]
 800126c:	f002 0204 	and.w	r2, r2, #4
 8001270:	9202      	str	r2, [sp, #8]
 8001272:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	699a      	ldr	r2, [r3, #24]
 8001276:	f042 0208 	orr.w	r2, r2, #8
 800127a:	619a      	str	r2, [r3, #24]
 800127c:	699b      	ldr	r3, [r3, #24]
 800127e:	f003 0308 	and.w	r3, r3, #8
 8001282:	9303      	str	r3, [sp, #12]
 8001284:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001286:	23ff      	movs	r3, #255	@ 0xff
 8001288:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128a:	2503      	movs	r5, #3
 800128c:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800128e:	a904      	add	r1, sp, #16
 8001290:	4812      	ldr	r0, [pc, #72]	@ (80012dc <HAL_ADC_MspInit+0xac>)
 8001292:	f000 ff3b 	bl	800210c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001296:	9504      	str	r5, [sp, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001298:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	a904      	add	r1, sp, #16
 800129c:	4810      	ldr	r0, [pc, #64]	@ (80012e0 <HAL_ADC_MspInit+0xb0>)
 800129e:	f000 ff35 	bl	800210c <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel1;
 80012a2:	4810      	ldr	r0, [pc, #64]	@ (80012e4 <HAL_ADC_MspInit+0xb4>)
 80012a4:	4b10      	ldr	r3, [pc, #64]	@ (80012e8 <HAL_ADC_MspInit+0xb8>)
 80012a6:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012a8:	2300      	movs	r3, #0
 80012aa:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ac:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ae:	2280      	movs	r2, #128	@ 0x80
 80012b0:	60c2      	str	r2, [r0, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80012b6:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012bc:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012be:	2220      	movs	r2, #32
 80012c0:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012c2:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012c4:	f000 fd8e 	bl	8001de4 <HAL_DMA_Init>
 80012c8:	b918      	cbnz	r0, 80012d2 <HAL_ADC_MspInit+0xa2>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012ca:	4b06      	ldr	r3, [pc, #24]	@ (80012e4 <HAL_ADC_MspInit+0xb4>)
 80012cc:	6223      	str	r3, [r4, #32]
 80012ce:	625c      	str	r4, [r3, #36]	@ 0x24
}
 80012d0:	e7b9      	b.n	8001246 <HAL_ADC_MspInit+0x16>
      Error_Handler();
 80012d2:	f000 f8f7 	bl	80014c4 <Error_Handler>
 80012d6:	e7f8      	b.n	80012ca <HAL_ADC_MspInit+0x9a>
 80012d8:	40012400 	.word	0x40012400
 80012dc:	40010800 	.word	0x40010800
 80012e0:	40010c00 	.word	0x40010c00
 80012e4:	200001f0 	.word	0x200001f0
 80012e8:	40020008 	.word	0x40020008

080012ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80012ec:	b500      	push	{lr}
 80012ee:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012f0:	4b12      	ldr	r3, [pc, #72]	@ (800133c <MX_DMA_Init+0x50>)
 80012f2:	695a      	ldr	r2, [r3, #20]
 80012f4:	f042 0201 	orr.w	r2, r2, #1
 80012f8:	615a      	str	r2, [r3, #20]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f003 0301 	and.w	r3, r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001304:	2200      	movs	r2, #0
 8001306:	4611      	mov	r1, r2
 8001308:	200b      	movs	r0, #11
 800130a:	f000 fd13 	bl	8001d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800130e:	200b      	movs	r0, #11
 8001310:	f000 fd46 	bl	8001da0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001314:	2200      	movs	r2, #0
 8001316:	4611      	mov	r1, r2
 8001318:	200e      	movs	r0, #14
 800131a:	f000 fd0b 	bl	8001d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800131e:	200e      	movs	r0, #14
 8001320:	f000 fd3e 	bl	8001da0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8001324:	2200      	movs	r2, #0
 8001326:	4611      	mov	r1, r2
 8001328:	200f      	movs	r0, #15
 800132a:	f000 fd03 	bl	8001d34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800132e:	200f      	movs	r0, #15
 8001330:	f000 fd36 	bl	8001da0 <HAL_NVIC_EnableIRQ>

}
 8001334:	b003      	add	sp, #12
 8001336:	f85d fb04 	ldr.w	pc, [sp], #4
 800133a:	bf00      	nop
 800133c:	40021000 	.word	0x40021000

08001340 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001340:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001344:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001346:	2400      	movs	r4, #0
 8001348:	9404      	str	r4, [sp, #16]
 800134a:	9405      	str	r4, [sp, #20]
 800134c:	9406      	str	r4, [sp, #24]
 800134e:	9407      	str	r4, [sp, #28]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	4b2f      	ldr	r3, [pc, #188]	@ (8001410 <MX_GPIO_Init+0xd0>)
 8001352:	699a      	ldr	r2, [r3, #24]
 8001354:	f042 0210 	orr.w	r2, r2, #16
 8001358:	619a      	str	r2, [r3, #24]
 800135a:	699a      	ldr	r2, [r3, #24]
 800135c:	f002 0210 	and.w	r2, r2, #16
 8001360:	9200      	str	r2, [sp, #0]
 8001362:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001364:	699a      	ldr	r2, [r3, #24]
 8001366:	f042 0220 	orr.w	r2, r2, #32
 800136a:	619a      	str	r2, [r3, #24]
 800136c:	699a      	ldr	r2, [r3, #24]
 800136e:	f002 0220 	and.w	r2, r2, #32
 8001372:	9201      	str	r2, [sp, #4]
 8001374:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	f042 0204 	orr.w	r2, r2, #4
 800137c:	619a      	str	r2, [r3, #24]
 800137e:	699a      	ldr	r2, [r3, #24]
 8001380:	f002 0204 	and.w	r2, r2, #4
 8001384:	9202      	str	r2, [sp, #8]
 8001386:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	f042 0208 	orr.w	r2, r2, #8
 800138e:	619a      	str	r2, [r3, #24]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	f003 0308 	and.w	r3, r3, #8
 8001396:	9303      	str	r3, [sp, #12]
 8001398:	9b03      	ldr	r3, [sp, #12]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800139a:	f8df 8078 	ldr.w	r8, [pc, #120]	@ 8001414 <MX_GPIO_Init+0xd4>
 800139e:	4622      	mov	r2, r4
 80013a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013a4:	4640      	mov	r0, r8
 80013a6:	f000 fff7 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, O_DIAG_EN_Pin|O_LATCH_Pin|O_EN_Pin, GPIO_PIN_RESET);
 80013aa:	4d1b      	ldr	r5, [pc, #108]	@ (8001418 <MX_GPIO_Init+0xd8>)
 80013ac:	4622      	mov	r2, r4
 80013ae:	f44f 4130 	mov.w	r1, #45056	@ 0xb000
 80013b2:	4628      	mov	r0, r5
 80013b4:	f000 fff0 	bl	8002398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80013b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013bc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	2701      	movs	r7, #1
 80013c0:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c4:	2602      	movs	r6, #2
 80013c6:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80013c8:	a904      	add	r1, sp, #16
 80013ca:	4640      	mov	r0, r8
 80013cc:	f000 fe9e 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ggggggg_Pin|hhhhhhhh_Pin;
 80013d0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013d4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013d6:	4b11      	ldr	r3, [pc, #68]	@ (800141c <MX_GPIO_Init+0xdc>)
 80013d8:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013dc:	a904      	add	r1, sp, #16
 80013de:	4628      	mov	r0, r5
 80013e0:	f000 fe94 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = O_DIAG_EN_Pin|O_LATCH_Pin|O_EN_Pin;
 80013e4:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80013e8:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	9607      	str	r6, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f0:	a904      	add	r1, sp, #16
 80013f2:	4628      	mov	r0, r5
 80013f4:	f000 fe8a 	bl	800210c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = I_FAULT_Pin;
 80013f8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80013fc:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fe:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(I_FAULT_GPIO_Port, &GPIO_InitStruct);
 8001402:	a904      	add	r1, sp, #16
 8001404:	4628      	mov	r0, r5
 8001406:	f000 fe81 	bl	800210c <HAL_GPIO_Init>

}
 800140a:	b008      	add	sp, #32
 800140c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001410:	40021000 	.word	0x40021000
 8001414:	40011000 	.word	0x40011000
 8001418:	40010c00 	.word	0x40010c00
 800141c:	10110000 	.word	0x10110000

08001420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001420:	b500      	push	{lr}
 8001422:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001424:	2300      	movs	r3, #0
 8001426:	930c      	str	r3, [sp, #48]	@ 0x30
 8001428:	930d      	str	r3, [sp, #52]	@ 0x34
 800142a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800142c:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800142e:	9305      	str	r3, [sp, #20]
 8001430:	9306      	str	r3, [sp, #24]
 8001432:	9307      	str	r3, [sp, #28]
 8001434:	9308      	str	r3, [sp, #32]
 8001436:	9309      	str	r3, [sp, #36]	@ 0x24
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001438:	9301      	str	r3, [sp, #4]
 800143a:	9302      	str	r3, [sp, #8]
 800143c:	9303      	str	r3, [sp, #12]
 800143e:	9304      	str	r3, [sp, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001440:	2201      	movs	r2, #1
 8001442:	920a      	str	r2, [sp, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001444:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001448:	930b      	str	r3, [sp, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800144a:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800144c:	2202      	movs	r2, #2
 800144e:	9211      	str	r2, [sp, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001450:	9312      	str	r3, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001452:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001456:	9313      	str	r3, [sp, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001458:	a80a      	add	r0, sp, #40	@ 0x28
 800145a:	f000 ffad 	bl	80023b8 <HAL_RCC_OscConfig>
 800145e:	b9d8      	cbnz	r0, 8001498 <SystemClock_Config+0x78>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001460:	230f      	movs	r3, #15
 8001462:	9305      	str	r3, [sp, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001464:	2102      	movs	r1, #2
 8001466:	9106      	str	r1, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001468:	2300      	movs	r3, #0
 800146a:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800146c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001470:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001472:	9309      	str	r3, [sp, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001474:	a805      	add	r0, sp, #20
 8001476:	f001 f9e5 	bl	8002844 <HAL_RCC_ClockConfig>
 800147a:	b978      	cbnz	r0, 800149c <SystemClock_Config+0x7c>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800147c:	2302      	movs	r3, #2
 800147e:	9301      	str	r3, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001484:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001486:	a801      	add	r0, sp, #4
 8001488:	f001 fac6 	bl	8002a18 <HAL_RCCEx_PeriphCLKConfig>
 800148c:	b940      	cbnz	r0, 80014a0 <SystemClock_Config+0x80>
    Error_Handler();
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800148e:	f001 f9a9 	bl	80027e4 <HAL_RCC_EnableCSS>
}
 8001492:	b015      	add	sp, #84	@ 0x54
 8001494:	f85d fb04 	ldr.w	pc, [sp], #4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001498:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800149a:	e7fe      	b.n	800149a <SystemClock_Config+0x7a>
 800149c:	b672      	cpsid	i
 800149e:	e7fe      	b.n	800149e <SystemClock_Config+0x7e>
 80014a0:	b672      	cpsid	i
 80014a2:	e7fe      	b.n	80014a2 <SystemClock_Config+0x82>

080014a4 <main>:
{
 80014a4:	b508      	push	{r3, lr}
  HAL_Init();
 80014a6:	f000 f997 	bl	80017d8 <HAL_Init>
  SystemClock_Config();
 80014aa:	f7ff ffb9 	bl	8001420 <SystemClock_Config>
  MX_GPIO_Init();
 80014ae:	f7ff ff47 	bl	8001340 <MX_GPIO_Init>
  MX_DMA_Init();
 80014b2:	f7ff ff1b 	bl	80012ec <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014b6:	f000 f8b1 	bl	800161c <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014ba:	f7ff fe15 	bl	80010e8 <MX_ADC1_Init>
  app_main();
 80014be:	f002 f999 	bl	80037f4 <app_main>
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <main+0x1e>

080014c4 <Error_Handler>:
 80014c4:	b672      	cpsid	i
  while (1)
 80014c6:	e7fe      	b.n	80014c6 <Error_Handler+0x2>

080014c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c8:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ca:	4b0e      	ldr	r3, [pc, #56]	@ (8001504 <HAL_MspInit+0x3c>)
 80014cc:	699a      	ldr	r2, [r3, #24]
 80014ce:	f042 0201 	orr.w	r2, r2, #1
 80014d2:	619a      	str	r2, [r3, #24]
 80014d4:	699a      	ldr	r2, [r3, #24]
 80014d6:	f002 0201 	and.w	r2, r2, #1
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80014e4:	61da      	str	r2, [r3, #28]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014f0:	4a05      	ldr	r2, [pc, #20]	@ (8001508 <HAL_MspInit+0x40>)
 80014f2:	6853      	ldr	r3, [r2, #4]
 80014f4:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014f8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014fc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014fe:	b002      	add	sp, #8
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40021000 	.word	0x40021000
 8001508:	40010000 	.word	0x40010000

0800150c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800150c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800150e:	f001 fa73 	bl	80029f8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001512:	e7fe      	b.n	8001512 <NMI_Handler+0x6>

08001514 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001514:	e7fe      	b.n	8001514 <HardFault_Handler>

08001516 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <MemManage_Handler>

08001518 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001518:	e7fe      	b.n	8001518 <BusFault_Handler>

0800151a <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151a:	e7fe      	b.n	800151a <UsageFault_Handler>

0800151c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800151c:	4770      	bx	lr

0800151e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800151e:	4770      	bx	lr

08001520 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001520:	4770      	bx	lr

08001522 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001522:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001524:	f000 f96a 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001528:	f003 f9be 	bl	80048a8 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800152c:	bd08      	pop	{r3, pc}
	...

08001530 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001530:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001532:	4802      	ldr	r0, [pc, #8]	@ (800153c <DMA1_Channel1_IRQHandler+0xc>)
 8001534:	f000 fd48 	bl	8001fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001538:	bd08      	pop	{r3, pc}
 800153a:	bf00      	nop
 800153c:	200001f0 	.word	0x200001f0

08001540 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001540:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001542:	4802      	ldr	r0, [pc, #8]	@ (800154c <DMA1_Channel4_IRQHandler+0xc>)
 8001544:	f000 fd40 	bl	8001fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8001548:	bd08      	pop	{r3, pc}
 800154a:	bf00      	nop
 800154c:	20000268 	.word	0x20000268

08001550 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001550:	b508      	push	{r3, lr}
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001552:	4802      	ldr	r0, [pc, #8]	@ (800155c <DMA1_Channel5_IRQHandler+0xc>)
 8001554:	f000 fd38 	bl	8001fc8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001558:	bd08      	pop	{r3, pc}
 800155a:	bf00      	nop
 800155c:	200002ac 	.word	0x200002ac

08001560 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001560:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001562:	4c05      	ldr	r4, [pc, #20]	@ (8001578 <USART1_IRQHandler+0x18>)
 8001564:	4620      	mov	r0, r4
 8001566:	f001 fda1 	bl	80030ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(&huart1);
 800156a:	4620      	mov	r0, r4
 800156c:	f003 fb8a 	bl	8004c84 <getContainerUartInstance>
  if(uart_instance) {
 8001570:	b108      	cbz	r0, 8001576 <USART1_IRQHandler+0x16>
	  USER_UART_IRQHandler(uart_instance);
 8001572:	f003 fb6f 	bl	8004c54 <USER_UART_IRQHandler>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 8001576:	bd10      	pop	{r4, pc}
 8001578:	200002f0 	.word	0x200002f0

0800157c <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 800157c:	2001      	movs	r0, #1
 800157e:	4770      	bx	lr

08001580 <_kill>:

int _kill(int pid, int sig)
{
 8001580:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001582:	f004 feeb 	bl	800635c <__errno>
 8001586:	2316      	movs	r3, #22
 8001588:	6003      	str	r3, [r0, #0]
  return -1;
}
 800158a:	f04f 30ff 	mov.w	r0, #4294967295
 800158e:	bd08      	pop	{r3, pc}

08001590 <_exit>:

void _exit (int status)
{
 8001590:	b508      	push	{r3, lr}
  errno = EINVAL;
 8001592:	f004 fee3 	bl	800635c <__errno>
 8001596:	2316      	movs	r3, #22
 8001598:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 800159a:	e7fe      	b.n	800159a <_exit+0xa>

0800159c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800159c:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800159e:	1e16      	subs	r6, r2, #0
 80015a0:	dd07      	ble.n	80015b2 <_read+0x16>
 80015a2:	460c      	mov	r4, r1
 80015a4:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80015a6:	f3af 8000 	nop.w
 80015aa:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ae:	42a5      	cmp	r5, r4
 80015b0:	d1f9      	bne.n	80015a6 <_read+0xa>
  }

  return len;
}
 80015b2:	4630      	mov	r0, r6
 80015b4:	bd70      	pop	{r4, r5, r6, pc}

080015b6 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 80015b6:	f04f 30ff 	mov.w	r0, #4294967295
 80015ba:	4770      	bx	lr

080015bc <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 80015bc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015c0:	604b      	str	r3, [r1, #4]
  return 0;
}
 80015c2:	2000      	movs	r0, #0
 80015c4:	4770      	bx	lr

080015c6 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 80015c6:	2001      	movs	r0, #1
 80015c8:	4770      	bx	lr

080015ca <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 80015ca:	2000      	movs	r0, #0
 80015cc:	4770      	bx	lr
	...

080015d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015d0:	b508      	push	{r3, lr}
 80015d2:	4603      	mov	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015d4:	4a0c      	ldr	r2, [pc, #48]	@ (8001608 <_sbrk+0x38>)
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	b152      	cbz	r2, 80015f0 <_sbrk+0x20>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4a0b      	ldr	r2, [pc, #44]	@ (8001608 <_sbrk+0x38>)
 80015dc:	6810      	ldr	r0, [r2, #0]
 80015de:	4403      	add	r3, r0
 80015e0:	4a0a      	ldr	r2, [pc, #40]	@ (800160c <_sbrk+0x3c>)
 80015e2:	490b      	ldr	r1, [pc, #44]	@ (8001610 <_sbrk+0x40>)
 80015e4:	1a52      	subs	r2, r2, r1
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d806      	bhi.n	80015f8 <_sbrk+0x28>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80015ea:	4a07      	ldr	r2, [pc, #28]	@ (8001608 <_sbrk+0x38>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 80015ee:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 80015f0:	4a05      	ldr	r2, [pc, #20]	@ (8001608 <_sbrk+0x38>)
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <_sbrk+0x44>)
 80015f4:	6011      	str	r1, [r2, #0]
 80015f6:	e7f0      	b.n	80015da <_sbrk+0xa>
    errno = ENOMEM;
 80015f8:	f004 feb0 	bl	800635c <__errno>
 80015fc:	230c      	movs	r3, #12
 80015fe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001600:	f04f 30ff 	mov.w	r0, #4294967295
 8001604:	e7f3      	b.n	80015ee <_sbrk+0x1e>
 8001606:	bf00      	nop
 8001608:	20000264 	.word	0x20000264
 800160c:	20005000 	.word	0x20005000
 8001610:	00000400 	.word	0x00000400
 8001614:	200004b8 	.word	0x200004b8

08001618 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001618:	4770      	bx	lr
	...

0800161c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800161c:	b508      	push	{r3, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800161e:	480a      	ldr	r0, [pc, #40]	@ (8001648 <MX_USART1_UART_Init+0x2c>)
 8001620:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <MX_USART1_UART_Init+0x30>)
 8001622:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 8001624:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8001628:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	2300      	movs	r3, #0
 800162c:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800162e:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001630:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001632:	220c      	movs	r2, #12
 8001634:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001636:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001638:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800163a:	f001 fb31 	bl	8002ca0 <HAL_UART_Init>
 800163e:	b900      	cbnz	r0, 8001642 <MX_USART1_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001640:	bd08      	pop	{r3, pc}
    Error_Handler();
 8001642:	f7ff ff3f 	bl	80014c4 <Error_Handler>
}
 8001646:	e7fb      	b.n	8001640 <MX_USART1_UART_Init+0x24>
 8001648:	200002f0 	.word	0x200002f0
 800164c:	40013800 	.word	0x40013800

08001650 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001650:	b570      	push	{r4, r5, r6, lr}
 8001652:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	2300      	movs	r3, #0
 8001656:	9302      	str	r3, [sp, #8]
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9304      	str	r3, [sp, #16]
 800165c:	9305      	str	r3, [sp, #20]
  if(uartHandle->Instance==USART1)
 800165e:	6802      	ldr	r2, [r0, #0]
 8001660:	4b31      	ldr	r3, [pc, #196]	@ (8001728 <HAL_UART_MspInit+0xd8>)
 8001662:	429a      	cmp	r2, r3
 8001664:	d001      	beq.n	800166a <HAL_UART_MspInit+0x1a>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001666:	b006      	add	sp, #24
 8001668:	bd70      	pop	{r4, r5, r6, pc}
 800166a:	4604      	mov	r4, r0
    __HAL_RCC_USART1_CLK_ENABLE();
 800166c:	f503 4358 	add.w	r3, r3, #55296	@ 0xd800
 8001670:	699a      	ldr	r2, [r3, #24]
 8001672:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001676:	619a      	str	r2, [r3, #24]
 8001678:	699a      	ldr	r2, [r3, #24]
 800167a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800167e:	9200      	str	r2, [sp, #0]
 8001680:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	699a      	ldr	r2, [r3, #24]
 8001684:	f042 0204 	orr.w	r2, r2, #4
 8001688:	619a      	str	r2, [r3, #24]
 800168a:	699b      	ldr	r3, [r3, #24]
 800168c:	f003 0304 	and.w	r3, r3, #4
 8001690:	9301      	str	r3, [sp, #4]
 8001692:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001694:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001698:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800169a:	2302      	movs	r3, #2
 800169c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800169e:	2303      	movs	r3, #3
 80016a0:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a2:	4e22      	ldr	r6, [pc, #136]	@ (800172c <HAL_UART_MspInit+0xdc>)
 80016a4:	a902      	add	r1, sp, #8
 80016a6:	4630      	mov	r0, r6
 80016a8:	f000 fd30 	bl	800210c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016b0:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016b2:	2500      	movs	r5, #0
 80016b4:	9503      	str	r5, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	9504      	str	r5, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b8:	a902      	add	r1, sp, #8
 80016ba:	4630      	mov	r0, r6
 80016bc:	f000 fd26 	bl	800210c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80016c0:	481b      	ldr	r0, [pc, #108]	@ (8001730 <HAL_UART_MspInit+0xe0>)
 80016c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001734 <HAL_UART_MspInit+0xe4>)
 80016c4:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016c6:	6045      	str	r5, [r0, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016c8:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016ca:	2380      	movs	r3, #128	@ 0x80
 80016cc:	60c3      	str	r3, [r0, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016ce:	6105      	str	r5, [r0, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016d0:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016d2:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016d4:	61c5      	str	r5, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016d6:	f000 fb85 	bl	8001de4 <HAL_DMA_Init>
 80016da:	b9f0      	cbnz	r0, 800171a <HAL_UART_MspInit+0xca>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_UART_MspInit+0xe0>)
 80016de:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80016e0:	625c      	str	r4, [r3, #36]	@ 0x24
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80016e2:	4815      	ldr	r0, [pc, #84]	@ (8001738 <HAL_UART_MspInit+0xe8>)
 80016e4:	4b15      	ldr	r3, [pc, #84]	@ (800173c <HAL_UART_MspInit+0xec>)
 80016e6:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016e8:	2310      	movs	r3, #16
 80016ea:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016ec:	2300      	movs	r3, #0
 80016ee:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016f0:	2280      	movs	r2, #128	@ 0x80
 80016f2:	60c2      	str	r2, [r0, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016f4:	6103      	str	r3, [r0, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016f6:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016f8:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fa:	61c3      	str	r3, [r0, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80016fc:	f000 fb72 	bl	8001de4 <HAL_DMA_Init>
 8001700:	b970      	cbnz	r0, 8001720 <HAL_UART_MspInit+0xd0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001702:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_UART_MspInit+0xe8>)
 8001704:	63a3      	str	r3, [r4, #56]	@ 0x38
 8001706:	625c      	str	r4, [r3, #36]	@ 0x24
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001708:	2200      	movs	r2, #0
 800170a:	4611      	mov	r1, r2
 800170c:	2025      	movs	r0, #37	@ 0x25
 800170e:	f000 fb11 	bl	8001d34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001712:	2025      	movs	r0, #37	@ 0x25
 8001714:	f000 fb44 	bl	8001da0 <HAL_NVIC_EnableIRQ>
}
 8001718:	e7a5      	b.n	8001666 <HAL_UART_MspInit+0x16>
      Error_Handler();
 800171a:	f7ff fed3 	bl	80014c4 <Error_Handler>
 800171e:	e7dd      	b.n	80016dc <HAL_UART_MspInit+0x8c>
      Error_Handler();
 8001720:	f7ff fed0 	bl	80014c4 <Error_Handler>
 8001724:	e7ed      	b.n	8001702 <HAL_UART_MspInit+0xb2>
 8001726:	bf00      	nop
 8001728:	40013800 	.word	0x40013800
 800172c:	40010800 	.word	0x40010800
 8001730:	200002ac 	.word	0x200002ac
 8001734:	40020058 	.word	0x40020058
 8001738:	20000268 	.word	0x20000268
 800173c:	40020044 	.word	0x40020044

08001740 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff ff6a 	bl	8001618 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480b      	ldr	r0, [pc, #44]	@ (8001774 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001746:	490c      	ldr	r1, [pc, #48]	@ (8001778 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001748:	4a0c      	ldr	r2, [pc, #48]	@ (800177c <LoopFillZerobss+0x16>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a09      	ldr	r2, [pc, #36]	@ (8001780 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800175c:	4c09      	ldr	r4, [pc, #36]	@ (8001784 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800176a:	f004 fdfd 	bl	8006368 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800176e:	f7ff fe99 	bl	80014a4 <main>
  bx lr
 8001772:	4770      	bx	lr
  ldr r0, =_sdata
 8001774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001778:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800177c:	08008d54 	.word	0x08008d54
  ldr r2, =_sbss
 8001780:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001784:	200004b8 	.word	0x200004b8

08001788 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001788:	e7fe      	b.n	8001788 <ADC1_2_IRQHandler>
	...

0800178c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800178c:	b510      	push	{r4, lr}
 800178e:	4604      	mov	r4, r0
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001790:	4b0e      	ldr	r3, [pc, #56]	@ (80017cc <HAL_InitTick+0x40>)
 8001792:	781a      	ldrb	r2, [r3, #0]
 8001794:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001798:	fbb3 f3f2 	udiv	r3, r3, r2
 800179c:	4a0c      	ldr	r2, [pc, #48]	@ (80017d0 <HAL_InitTick+0x44>)
 800179e:	6810      	ldr	r0, [r2, #0]
 80017a0:	fbb0 f0f3 	udiv	r0, r0, r3
 80017a4:	f000 fb0a 	bl	8001dbc <HAL_SYSTICK_Config>
 80017a8:	b968      	cbnz	r0, 80017c6 <HAL_InitTick+0x3a>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017aa:	2c0f      	cmp	r4, #15
 80017ac:	d901      	bls.n	80017b2 <HAL_InitTick+0x26>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
    uwTickPrio = TickPriority;
  }
  else
  {
    return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
 80017b0:	e00a      	b.n	80017c8 <HAL_InitTick+0x3c>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017b2:	2200      	movs	r2, #0
 80017b4:	4621      	mov	r1, r4
 80017b6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ba:	f000 fabb 	bl	8001d34 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017be:	4b05      	ldr	r3, [pc, #20]	@ (80017d4 <HAL_InitTick+0x48>)
 80017c0:	601c      	str	r4, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80017c2:	2000      	movs	r0, #0
 80017c4:	e000      	b.n	80017c8 <HAL_InitTick+0x3c>
    return HAL_ERROR;
 80017c6:	2001      	movs	r0, #1
}
 80017c8:	bd10      	pop	{r4, pc}
 80017ca:	bf00      	nop
 80017cc:	20000004 	.word	0x20000004
 80017d0:	20000000 	.word	0x20000000
 80017d4:	20000008 	.word	0x20000008

080017d8 <HAL_Init>:
{
 80017d8:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017da:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <HAL_Init+0x20>)
 80017dc:	6813      	ldr	r3, [r2, #0]
 80017de:	f043 0310 	orr.w	r3, r3, #16
 80017e2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017e4:	2003      	movs	r0, #3
 80017e6:	f000 fa93 	bl	8001d10 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80017ea:	200f      	movs	r0, #15
 80017ec:	f7ff ffce 	bl	800178c <HAL_InitTick>
  HAL_MspInit();
 80017f0:	f7ff fe6a 	bl	80014c8 <HAL_MspInit>
}
 80017f4:	2000      	movs	r0, #0
 80017f6:	bd08      	pop	{r3, pc}
 80017f8:	40022000 	.word	0x40022000

080017fc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80017fc:	4a03      	ldr	r2, [pc, #12]	@ (800180c <HAL_IncTick+0x10>)
 80017fe:	6811      	ldr	r1, [r2, #0]
 8001800:	4b03      	ldr	r3, [pc, #12]	@ (8001810 <HAL_IncTick+0x14>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	440b      	add	r3, r1
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	4770      	bx	lr
 800180a:	bf00      	nop
 800180c:	20000338 	.word	0x20000338
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001814:	4b01      	ldr	r3, [pc, #4]	@ (800181c <HAL_GetTick+0x8>)
 8001816:	6818      	ldr	r0, [r3, #0]
}
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000338 	.word	0x20000338

08001820 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001820:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001822:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001824:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001826:	f012 0f50 	tst.w	r2, #80	@ 0x50
 800182a:	d11e      	bne.n	800186a <ADC_DMAConvCplt+0x4a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800182c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800182e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001832:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001834:	681a      	ldr	r2, [r3, #0]
 8001836:	6892      	ldr	r2, [r2, #8]
 8001838:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 800183c:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
 8001840:	d003      	beq.n	800184a <ADC_DMAConvCplt+0x2a>
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001842:	4618      	mov	r0, r3
 8001844:	f002 ff8c 	bl	8004760 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8001848:	bd08      	pop	{r3, pc}
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800184a:	7b1a      	ldrb	r2, [r3, #12]
 800184c:	2a00      	cmp	r2, #0
 800184e:	d1f8      	bne.n	8001842 <ADC_DMAConvCplt+0x22>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001850:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001852:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001856:	629a      	str	r2, [r3, #40]	@ 0x28
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001858:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800185a:	f412 5f80 	tst.w	r2, #4096	@ 0x1000
 800185e:	d1f0      	bne.n	8001842 <ADC_DMAConvCplt+0x22>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001860:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001862:	f042 0201 	orr.w	r2, r2, #1
 8001866:	629a      	str	r2, [r3, #40]	@ 0x28
 8001868:	e7eb      	b.n	8001842 <ADC_DMAConvCplt+0x22>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 800186a:	6a1b      	ldr	r3, [r3, #32]
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4798      	blx	r3
}
 8001870:	e7ea      	b.n	8001848 <ADC_DMAConvCplt+0x28>

08001872 <HAL_ADC_ConvHalfCpltCallback>:
}
 8001872:	4770      	bx	lr

08001874 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001874:	b508      	push	{r3, lr}
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001876:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8001878:	f7ff fffb 	bl	8001872 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800187c:	bd08      	pop	{r3, pc}

0800187e <HAL_ADC_ErrorCallback>:
}
 800187e:	4770      	bx	lr

08001880 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001880:	b508      	push	{r3, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001882:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001884:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001886:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800188a:	6283      	str	r3, [r0, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800188c:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800188e:	f043 0304 	orr.w	r3, r3, #4
 8001892:	62c3      	str	r3, [r0, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001894:	f7ff fff3 	bl	800187e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001898:	bd08      	pop	{r3, pc}
	...

0800189c <HAL_ADC_ConfigChannel>:
{ 
 800189c:	b430      	push	{r4, r5}
 800189e:	b082      	sub	sp, #8
  __IO uint32_t wait_loop_index = 0U;
 80018a0:	2200      	movs	r2, #0
 80018a2:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80018a4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80018a8:	2a01      	cmp	r2, #1
 80018aa:	f000 8093 	beq.w	80019d4 <HAL_ADC_ConfigChannel+0x138>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2201      	movs	r2, #1
 80018b2:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
  if (sConfig->Rank < 7U)
 80018b6:	684a      	ldr	r2, [r1, #4]
 80018b8:	2a06      	cmp	r2, #6
 80018ba:	d82d      	bhi.n	8001918 <HAL_ADC_ConfigChannel+0x7c>
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80018bc:	6804      	ldr	r4, [r0, #0]
 80018be:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80018c0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80018c4:	3a05      	subs	r2, #5
 80018c6:	f04f 0c1f 	mov.w	ip, #31
 80018ca:	fa0c fc02 	lsl.w	ip, ip, r2
 80018ce:	ea20 000c 	bic.w	r0, r0, ip
 80018d2:	680d      	ldr	r5, [r1, #0]
 80018d4:	fa05 f202 	lsl.w	r2, r5, r2
 80018d8:	4302      	orrs	r2, r0
 80018da:	6362      	str	r2, [r4, #52]	@ 0x34
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80018dc:	680a      	ldr	r2, [r1, #0]
 80018de:	2a09      	cmp	r2, #9
 80018e0:	d938      	bls.n	8001954 <HAL_ADC_ConfigChannel+0xb8>
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80018e2:	681c      	ldr	r4, [r3, #0]
 80018e4:	68e0      	ldr	r0, [r4, #12]
 80018e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018ea:	3a1e      	subs	r2, #30
 80018ec:	f04f 0c07 	mov.w	ip, #7
 80018f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80018f4:	ea20 000c 	bic.w	r0, r0, ip
 80018f8:	688d      	ldr	r5, [r1, #8]
 80018fa:	fa05 f202 	lsl.w	r2, r5, r2
 80018fe:	4302      	orrs	r2, r0
 8001900:	60e2      	str	r2, [r4, #12]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001902:	680a      	ldr	r2, [r1, #0]
 8001904:	3a10      	subs	r2, #16
 8001906:	2a01      	cmp	r2, #1
 8001908:	d934      	bls.n	8001974 <HAL_ADC_ConfigChannel+0xd8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190a:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 800190c:	2200      	movs	r2, #0
 800190e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
}
 8001912:	b002      	add	sp, #8
 8001914:	bc30      	pop	{r4, r5}
 8001916:	4770      	bx	lr
  else if (sConfig->Rank < 13U)
 8001918:	2a0c      	cmp	r2, #12
 800191a:	d80d      	bhi.n	8001938 <HAL_ADC_ConfigChannel+0x9c>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800191c:	6805      	ldr	r5, [r0, #0]
 800191e:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8001920:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001924:	3a23      	subs	r2, #35	@ 0x23
 8001926:	241f      	movs	r4, #31
 8001928:	4094      	lsls	r4, r2
 800192a:	ea20 0004 	bic.w	r0, r0, r4
 800192e:	680c      	ldr	r4, [r1, #0]
 8001930:	4094      	lsls	r4, r2
 8001932:	4320      	orrs	r0, r4
 8001934:	6328      	str	r0, [r5, #48]	@ 0x30
 8001936:	e7d1      	b.n	80018dc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001938:	6805      	ldr	r5, [r0, #0]
 800193a:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 800193c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8001940:	3a41      	subs	r2, #65	@ 0x41
 8001942:	241f      	movs	r4, #31
 8001944:	4094      	lsls	r4, r2
 8001946:	ea20 0004 	bic.w	r0, r0, r4
 800194a:	680c      	ldr	r4, [r1, #0]
 800194c:	4094      	lsls	r4, r2
 800194e:	4320      	orrs	r0, r4
 8001950:	62e8      	str	r0, [r5, #44]	@ 0x2c
 8001952:	e7c3      	b.n	80018dc <HAL_ADC_ConfigChannel+0x40>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001954:	681c      	ldr	r4, [r3, #0]
 8001956:	6920      	ldr	r0, [r4, #16]
 8001958:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800195c:	f04f 0c07 	mov.w	ip, #7
 8001960:	fa0c fc02 	lsl.w	ip, ip, r2
 8001964:	ea20 000c 	bic.w	r0, r0, ip
 8001968:	688d      	ldr	r5, [r1, #8]
 800196a:	fa05 f202 	lsl.w	r2, r5, r2
 800196e:	4302      	orrs	r2, r0
 8001970:	6122      	str	r2, [r4, #16]
 8001972:	e7c6      	b.n	8001902 <HAL_ADC_ConfigChannel+0x66>
    if (hadc->Instance == ADC1)
 8001974:	6818      	ldr	r0, [r3, #0]
 8001976:	4a18      	ldr	r2, [pc, #96]	@ (80019d8 <HAL_ADC_ConfigChannel+0x13c>)
 8001978:	4290      	cmp	r0, r2
 800197a:	d005      	beq.n	8001988 <HAL_ADC_ConfigChannel+0xec>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800197c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800197e:	f042 0220 	orr.w	r2, r2, #32
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
      tmp_hal_status = HAL_ERROR;
 8001984:	2001      	movs	r0, #1
 8001986:	e7c1      	b.n	800190c <HAL_ADC_ConfigChannel+0x70>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001988:	6892      	ldr	r2, [r2, #8]
 800198a:	f412 0f00 	tst.w	r2, #8388608	@ 0x800000
 800198e:	d11d      	bne.n	80019cc <HAL_ADC_ConfigChannel+0x130>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001990:	4811      	ldr	r0, [pc, #68]	@ (80019d8 <HAL_ADC_ConfigChannel+0x13c>)
 8001992:	6882      	ldr	r2, [r0, #8]
 8001994:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001998:	6082      	str	r2, [r0, #8]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800199a:	680a      	ldr	r2, [r1, #0]
 800199c:	2a10      	cmp	r2, #16
 800199e:	d001      	beq.n	80019a4 <HAL_ADC_ConfigChannel+0x108>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019a0:	2000      	movs	r0, #0
 80019a2:	e7b3      	b.n	800190c <HAL_ADC_ConfigChannel+0x70>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80019a4:	4a0d      	ldr	r2, [pc, #52]	@ (80019dc <HAL_ADC_ConfigChannel+0x140>)
 80019a6:	6812      	ldr	r2, [r2, #0]
 80019a8:	490d      	ldr	r1, [pc, #52]	@ (80019e0 <HAL_ADC_ConfigChannel+0x144>)
 80019aa:	fba1 1202 	umull	r1, r2, r1, r2
 80019ae:	0c92      	lsrs	r2, r2, #18
 80019b0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80019b4:	0052      	lsls	r2, r2, #1
 80019b6:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80019b8:	9a01      	ldr	r2, [sp, #4]
 80019ba:	b14a      	cbz	r2, 80019d0 <HAL_ADC_ConfigChannel+0x134>
            wait_loop_index--;
 80019bc:	9a01      	ldr	r2, [sp, #4]
 80019be:	3a01      	subs	r2, #1
 80019c0:	9201      	str	r2, [sp, #4]
          while(wait_loop_index != 0U)
 80019c2:	9a01      	ldr	r2, [sp, #4]
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d1f9      	bne.n	80019bc <HAL_ADC_ConfigChannel+0x120>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c8:	2000      	movs	r0, #0
 80019ca:	e79f      	b.n	800190c <HAL_ADC_ConfigChannel+0x70>
 80019cc:	2000      	movs	r0, #0
 80019ce:	e79d      	b.n	800190c <HAL_ADC_ConfigChannel+0x70>
 80019d0:	2000      	movs	r0, #0
 80019d2:	e79b      	b.n	800190c <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80019d4:	2002      	movs	r0, #2
 80019d6:	e79c      	b.n	8001912 <HAL_ADC_ConfigChannel+0x76>
 80019d8:	40012400 	.word	0x40012400
 80019dc:	20000000 	.word	0x20000000
 80019e0:	431bde83 	.word	0x431bde83

080019e4 <ADC_Enable>:
{
 80019e4:	b530      	push	{r4, r5, lr}
 80019e6:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 80019e8:	2300      	movs	r3, #0
 80019ea:	9301      	str	r3, [sp, #4]
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019ec:	6803      	ldr	r3, [r0, #0]
 80019ee:	689a      	ldr	r2, [r3, #8]
 80019f0:	f012 0f01 	tst.w	r2, #1
 80019f4:	d13b      	bne.n	8001a6e <ADC_Enable+0x8a>
 80019f6:	4604      	mov	r4, r0
    __HAL_ADC_ENABLE(hadc);
 80019f8:	689a      	ldr	r2, [r3, #8]
 80019fa:	f042 0201 	orr.w	r2, r2, #1
 80019fe:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a00:	4b1c      	ldr	r3, [pc, #112]	@ (8001a74 <ADC_Enable+0x90>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a1c      	ldr	r2, [pc, #112]	@ (8001a78 <ADC_Enable+0x94>)
 8001a06:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0a:	0c9b      	lsrs	r3, r3, #18
 8001a0c:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001a0e:	9b01      	ldr	r3, [sp, #4]
 8001a10:	b12b      	cbz	r3, 8001a1e <ADC_Enable+0x3a>
      wait_loop_index--;
 8001a12:	9b01      	ldr	r3, [sp, #4]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8001a18:	9b01      	ldr	r3, [sp, #4]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d1f9      	bne.n	8001a12 <ADC_Enable+0x2e>
    tickstart = HAL_GetTick();
 8001a1e:	f7ff fef9 	bl	8001814 <HAL_GetTick>
 8001a22:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a24:	6823      	ldr	r3, [r4, #0]
 8001a26:	689b      	ldr	r3, [r3, #8]
 8001a28:	f013 0f01 	tst.w	r3, #1
 8001a2c:	d006      	beq.n	8001a3c <ADC_Enable+0x58>
  return HAL_OK;
 8001a2e:	2000      	movs	r0, #0
 8001a30:	e01e      	b.n	8001a70 <ADC_Enable+0x8c>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a32:	6823      	ldr	r3, [r4, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f013 0f01 	tst.w	r3, #1
 8001a3a:	d116      	bne.n	8001a6a <ADC_Enable+0x86>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001a3c:	f7ff feea 	bl	8001814 <HAL_GetTick>
 8001a40:	1b43      	subs	r3, r0, r5
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d9f5      	bls.n	8001a32 <ADC_Enable+0x4e>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a46:	6823      	ldr	r3, [r4, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f013 0f01 	tst.w	r3, #1
 8001a4e:	d1f0      	bne.n	8001a32 <ADC_Enable+0x4e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a50:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001a52:	f043 0310 	orr.w	r3, r3, #16
 8001a56:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a58:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
          __HAL_UNLOCK(hadc);
 8001a60:	2300      	movs	r3, #0
 8001a62:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
          return HAL_ERROR;
 8001a66:	2001      	movs	r0, #1
 8001a68:	e002      	b.n	8001a70 <ADC_Enable+0x8c>
  return HAL_OK;
 8001a6a:	2000      	movs	r0, #0
 8001a6c:	e000      	b.n	8001a70 <ADC_Enable+0x8c>
 8001a6e:	2000      	movs	r0, #0
}
 8001a70:	b003      	add	sp, #12
 8001a72:	bd30      	pop	{r4, r5, pc}
 8001a74:	20000000 	.word	0x20000000
 8001a78:	431bde83 	.word	0x431bde83

08001a7c <HAL_ADC_Start_DMA>:
{
 8001a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a7e:	4604      	mov	r4, r0
 8001a80:	460d      	mov	r5, r1
 8001a82:	4616      	mov	r6, r2
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001a84:	6801      	ldr	r1, [r0, #0]
 8001a86:	4842      	ldr	r0, [pc, #264]	@ (8001b90 <HAL_ADC_Start_DMA+0x114>)
 8001a88:	4281      	cmp	r1, r0
 8001a8a:	d05d      	beq.n	8001b48 <HAL_ADC_Start_DMA+0xcc>
 8001a8c:	4b41      	ldr	r3, [pc, #260]	@ (8001b94 <HAL_ADC_Start_DMA+0x118>)
 8001a8e:	4299      	cmp	r1, r3
 8001a90:	d05a      	beq.n	8001b48 <HAL_ADC_Start_DMA+0xcc>
    __HAL_LOCK(hadc);
 8001a92:	f894 3024 	ldrb.w	r3, [r4, #36]	@ 0x24
 8001a96:	2b01      	cmp	r3, #1
 8001a98:	d077      	beq.n	8001b8a <HAL_ADC_Start_DMA+0x10e>
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
    tmp_hal_status = ADC_Enable(hadc);
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	f7ff ff9f 	bl	80019e4 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001aa6:	4607      	mov	r7, r0
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d16a      	bne.n	8001b82 <HAL_ADC_Start_DMA+0x106>
      ADC_STATE_CLR_SET(hadc->State,
 8001aac:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001aae:	f421 6170 	bic.w	r1, r1, #3840	@ 0xf00
 8001ab2:	f021 0101 	bic.w	r1, r1, #1
 8001ab6:	f441 7180 	orr.w	r1, r1, #256	@ 0x100
 8001aba:	62a1      	str	r1, [r4, #40]	@ 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001abc:	6822      	ldr	r2, [r4, #0]
 8001abe:	4b35      	ldr	r3, [pc, #212]	@ (8001b94 <HAL_ADC_Start_DMA+0x118>)
 8001ac0:	429a      	cmp	r2, r3
 8001ac2:	d048      	beq.n	8001b56 <HAL_ADC_Start_DMA+0xda>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001ac4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ac6:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001aca:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001acc:	6853      	ldr	r3, [r2, #4]
 8001ace:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001ad2:	d005      	beq.n	8001ae0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ad6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001ada:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ade:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ae2:	f413 5f80 	tst.w	r3, #4096	@ 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae6:	bf1a      	itte	ne
 8001ae8:	6ae3      	ldrne	r3, [r4, #44]	@ 0x2c
 8001aea:	f023 0306 	bicne.w	r3, r3, #6
        ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	2300      	moveq	r3, #0
 8001af0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      __HAL_UNLOCK(hadc);
 8001af2:	2300      	movs	r3, #0
 8001af4:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001af8:	6a23      	ldr	r3, [r4, #32]
 8001afa:	4a27      	ldr	r2, [pc, #156]	@ (8001b98 <HAL_ADC_Start_DMA+0x11c>)
 8001afc:	629a      	str	r2, [r3, #40]	@ 0x28
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001afe:	6a23      	ldr	r3, [r4, #32]
 8001b00:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <HAL_ADC_Start_DMA+0x120>)
 8001b02:	62da      	str	r2, [r3, #44]	@ 0x2c
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b04:	6a23      	ldr	r3, [r4, #32]
 8001b06:	4a26      	ldr	r2, [pc, #152]	@ (8001ba0 <HAL_ADC_Start_DMA+0x124>)
 8001b08:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001b0a:	6823      	ldr	r3, [r4, #0]
 8001b0c:	f06f 0202 	mvn.w	r2, #2
 8001b10:	601a      	str	r2, [r3, #0]
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001b12:	6822      	ldr	r2, [r4, #0]
 8001b14:	6893      	ldr	r3, [r2, #8]
 8001b16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b1a:	6093      	str	r3, [r2, #8]
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b1c:	6821      	ldr	r1, [r4, #0]
 8001b1e:	4633      	mov	r3, r6
 8001b20:	462a      	mov	r2, r5
 8001b22:	314c      	adds	r1, #76	@ 0x4c
 8001b24:	6a20      	ldr	r0, [r4, #32]
 8001b26:	f000 f993 	bl	8001e50 <HAL_DMA_Start_IT>
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b2a:	6823      	ldr	r3, [r4, #0]
 8001b2c:	689a      	ldr	r2, [r3, #8]
 8001b2e:	f402 2260 	and.w	r2, r2, #917504	@ 0xe0000
 8001b32:	f5b2 2f60 	cmp.w	r2, #917504	@ 0xe0000
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001b36:	689a      	ldr	r2, [r3, #8]
 8001b38:	bf0c      	ite	eq
 8001b3a:	f442 02a0 	orreq.w	r2, r2, #5242880	@ 0x500000
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001b3e:	f442 1280 	orrne.w	r2, r2, #1048576	@ 0x100000
 8001b42:	609a      	str	r2, [r3, #8]
}
 8001b44:	4638      	mov	r0, r7
 8001b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001b48:	4b11      	ldr	r3, [pc, #68]	@ (8001b90 <HAL_ADC_Start_DMA+0x114>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001b50:	d09f      	beq.n	8001a92 <HAL_ADC_Start_DMA+0x16>
    tmp_hal_status = HAL_ERROR;
 8001b52:	2701      	movs	r7, #1
 8001b54:	e7f6      	b.n	8001b44 <HAL_ADC_Start_DMA+0xc8>
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001b56:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f413 2f70 	tst.w	r3, #983040	@ 0xf0000
 8001b60:	d0b0      	beq.n	8001ac4 <HAL_ADC_Start_DMA+0x48>
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b62:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b64:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001b68:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b6a:	4b09      	ldr	r3, [pc, #36]	@ (8001b90 <HAL_ADC_Start_DMA+0x114>)
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f413 6f80 	tst.w	r3, #1024	@ 0x400
 8001b72:	d0b5      	beq.n	8001ae0 <HAL_ADC_Start_DMA+0x64>
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001b76:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b7a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b7e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001b80:	e7ae      	b.n	8001ae0 <HAL_ADC_Start_DMA+0x64>
      __HAL_UNLOCK(hadc);
 8001b82:	2300      	movs	r3, #0
 8001b84:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8001b88:	e7dc      	b.n	8001b44 <HAL_ADC_Start_DMA+0xc8>
    __HAL_LOCK(hadc);
 8001b8a:	2702      	movs	r7, #2
 8001b8c:	e7da      	b.n	8001b44 <HAL_ADC_Start_DMA+0xc8>
 8001b8e:	bf00      	nop
 8001b90:	40012400 	.word	0x40012400
 8001b94:	40012800 	.word	0x40012800
 8001b98:	08001821 	.word	0x08001821
 8001b9c:	08001875 	.word	0x08001875
 8001ba0:	08001881 	.word	0x08001881

08001ba4 <ADC_ConversionStop_Disable>:
{
 8001ba4:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001ba6:	6803      	ldr	r3, [r0, #0]
 8001ba8:	689a      	ldr	r2, [r3, #8]
 8001baa:	f012 0f01 	tst.w	r2, #1
 8001bae:	d101      	bne.n	8001bb4 <ADC_ConversionStop_Disable+0x10>
  return HAL_OK;
 8001bb0:	2000      	movs	r0, #0
}
 8001bb2:	bd38      	pop	{r3, r4, r5, pc}
 8001bb4:	4604      	mov	r4, r0
    __HAL_ADC_DISABLE(hadc);
 8001bb6:	689a      	ldr	r2, [r3, #8]
 8001bb8:	f022 0201 	bic.w	r2, r2, #1
 8001bbc:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001bbe:	f7ff fe29 	bl	8001814 <HAL_GetTick>
 8001bc2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bc4:	6823      	ldr	r3, [r4, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f013 0f01 	tst.w	r3, #1
 8001bcc:	d106      	bne.n	8001bdc <ADC_ConversionStop_Disable+0x38>
  return HAL_OK;
 8001bce:	2000      	movs	r0, #0
 8001bd0:	e7ef      	b.n	8001bb2 <ADC_ConversionStop_Disable+0xe>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd2:	6823      	ldr	r3, [r4, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f013 0f01 	tst.w	r3, #1
 8001bda:	d013      	beq.n	8001c04 <ADC_ConversionStop_Disable+0x60>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bdc:	f7ff fe1a 	bl	8001814 <HAL_GetTick>
 8001be0:	1b43      	subs	r3, r0, r5
 8001be2:	2b02      	cmp	r3, #2
 8001be4:	d9f5      	bls.n	8001bd2 <ADC_ConversionStop_Disable+0x2e>
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001be6:	6823      	ldr	r3, [r4, #0]
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f013 0f01 	tst.w	r3, #1
 8001bee:	d0f0      	beq.n	8001bd2 <ADC_ConversionStop_Disable+0x2e>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001bf2:	f043 0310 	orr.w	r3, r3, #16
 8001bf6:	62a3      	str	r3, [r4, #40]	@ 0x28
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bf8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	62e3      	str	r3, [r4, #44]	@ 0x2c
          return HAL_ERROR;
 8001c00:	2001      	movs	r0, #1
 8001c02:	e7d6      	b.n	8001bb2 <ADC_ConversionStop_Disable+0xe>
  return HAL_OK;
 8001c04:	2000      	movs	r0, #0
 8001c06:	e7d4      	b.n	8001bb2 <ADC_ConversionStop_Disable+0xe>

08001c08 <HAL_ADC_Init>:
  if(hadc == NULL)
 8001c08:	2800      	cmp	r0, #0
 8001c0a:	d07a      	beq.n	8001d02 <HAL_ADC_Init+0xfa>
{
 8001c0c:	b570      	push	{r4, r5, r6, lr}
 8001c0e:	4604      	mov	r4, r0
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c10:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d04f      	beq.n	8001cb6 <HAL_ADC_Init+0xae>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001c16:	4620      	mov	r0, r4
 8001c18:	f7ff ffc4 	bl	8001ba4 <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001c1c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001c1e:	f013 0310 	ands.w	r3, r3, #16
 8001c22:	d168      	bne.n	8001cf6 <HAL_ADC_Init+0xee>
 8001c24:	2800      	cmp	r0, #0
 8001c26:	d166      	bne.n	8001cf6 <HAL_ADC_Init+0xee>
    ADC_STATE_CLR_SET(hadc->State,
 8001c28:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8001c2a:	f422 5288 	bic.w	r2, r2, #4352	@ 0x1100
 8001c2e:	f022 0202 	bic.w	r2, r2, #2
 8001c32:	f042 0202 	orr.w	r2, r2, #2
 8001c36:	62a2      	str	r2, [r4, #40]	@ 0x28
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001c38:	7b21      	ldrb	r1, [r4, #12]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001c3a:	6862      	ldr	r2, [r4, #4]
 8001c3c:	69e5      	ldr	r5, [r4, #28]
 8001c3e:	432a      	orrs	r2, r5
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001c40:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001c44:	68a5      	ldr	r5, [r4, #8]
 8001c46:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 8001c4a:	d004      	beq.n	8001c56 <HAL_ADC_Init+0x4e>
 8001c4c:	2d01      	cmp	r5, #1
 8001c4e:	bf14      	ite	ne
 8001c50:	2500      	movne	r5, #0
 8001c52:	2501      	moveq	r5, #1
 8001c54:	022d      	lsls	r5, r5, #8
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001c56:	7d26      	ldrb	r6, [r4, #20]
 8001c58:	2e01      	cmp	r6, #1
 8001c5a:	d032      	beq.n	8001cc2 <HAL_ADC_Init+0xba>
      MODIFY_REG(hadc->Instance->CR1,
 8001c5c:	6826      	ldr	r6, [r4, #0]
 8001c5e:	6871      	ldr	r1, [r6, #4]
 8001c60:	f421 4169 	bic.w	r1, r1, #59648	@ 0xe900
 8001c64:	4329      	orrs	r1, r5
 8001c66:	6071      	str	r1, [r6, #4]
      MODIFY_REG(hadc->Instance->CR2,
 8001c68:	6825      	ldr	r5, [r4, #0]
 8001c6a:	68ae      	ldr	r6, [r5, #8]
 8001c6c:	4926      	ldr	r1, [pc, #152]	@ (8001d08 <HAL_ADC_Init+0x100>)
 8001c6e:	4031      	ands	r1, r6
 8001c70:	4311      	orrs	r1, r2
 8001c72:	60a9      	str	r1, [r5, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001c74:	68a1      	ldr	r1, [r4, #8]
 8001c76:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8001c7a:	d001      	beq.n	8001c80 <HAL_ADC_Init+0x78>
 8001c7c:	2901      	cmp	r1, #1
 8001c7e:	d102      	bne.n	8001c86 <HAL_ADC_Init+0x7e>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001c80:	6923      	ldr	r3, [r4, #16]
 8001c82:	3b01      	subs	r3, #1
 8001c84:	051b      	lsls	r3, r3, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8001c86:	6825      	ldr	r5, [r4, #0]
 8001c88:	6ae9      	ldr	r1, [r5, #44]	@ 0x2c
 8001c8a:	f421 0170 	bic.w	r1, r1, #15728640	@ 0xf00000
 8001c8e:	430b      	orrs	r3, r1
 8001c90:	62eb      	str	r3, [r5, #44]	@ 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c92:	6823      	ldr	r3, [r4, #0]
 8001c94:	6899      	ldr	r1, [r3, #8]
 8001c96:	4b1d      	ldr	r3, [pc, #116]	@ (8001d0c <HAL_ADC_Init+0x104>)
 8001c98:	400b      	ands	r3, r1
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d022      	beq.n	8001ce4 <HAL_ADC_Init+0xdc>
      ADC_STATE_CLR_SET(hadc->State,
 8001c9e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001ca0:	f023 0312 	bic.w	r3, r3, #18
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	62a3      	str	r3, [r4, #40]	@ 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001caa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8001cac:	f043 0301 	orr.w	r3, r3, #1
 8001cb0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      tmp_hal_status = HAL_ERROR;
 8001cb2:	2001      	movs	r0, #1
 8001cb4:	e024      	b.n	8001d00 <HAL_ADC_Init+0xf8>
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb6:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hadc->Lock = HAL_UNLOCKED;
 8001cb8:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
    HAL_ADC_MspInit(hadc);
 8001cbc:	f7ff fab8 	bl	8001230 <HAL_ADC_MspInit>
 8001cc0:	e7a9      	b.n	8001c16 <HAL_ADC_Init+0xe>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001cc2:	b931      	cbnz	r1, 8001cd2 <HAL_ADC_Init+0xca>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001cc4:	69a1      	ldr	r1, [r4, #24]
 8001cc6:	3901      	subs	r1, #1
 8001cc8:	ea45 3141 	orr.w	r1, r5, r1, lsl #13
 8001ccc:	f441 6500 	orr.w	r5, r1, #2048	@ 0x800
 8001cd0:	e7c4      	b.n	8001c5c <HAL_ADC_Init+0x54>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001cd2:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8001cd4:	f041 0120 	orr.w	r1, r1, #32
 8001cd8:	62a1      	str	r1, [r4, #40]	@ 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8001cdc:	f041 0101 	orr.w	r1, r1, #1
 8001ce0:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8001ce2:	e7bb      	b.n	8001c5c <HAL_ADC_Init+0x54>
      ADC_CLEAR_ERRORCODE(hadc);
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62e3      	str	r3, [r4, #44]	@ 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8001ce8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	f043 0301 	orr.w	r3, r3, #1
 8001cf2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001cf4:	e004      	b.n	8001d00 <HAL_ADC_Init+0xf8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8001cf8:	f043 0310 	orr.w	r3, r3, #16
 8001cfc:	62a3      	str	r3, [r4, #40]	@ 0x28
    tmp_hal_status = HAL_ERROR;
 8001cfe:	2001      	movs	r0, #1
}
 8001d00:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8001d02:	2001      	movs	r0, #1
}
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	ffe1f7fd 	.word	0xffe1f7fd
 8001d0c:	ff1f0efe 	.word	0xff1f0efe

08001d10 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d10:	4907      	ldr	r1, [pc, #28]	@ (8001d30 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8001d12:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001d14:	0203      	lsls	r3, r0, #8
 8001d16:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d1a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8001d1e:	0412      	lsls	r2, r2, #16
 8001d20:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8001d2c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d34:	b500      	push	{lr}
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d36:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <HAL_NVIC_SetPriority+0x64>)
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d3e:	f1c3 0c07 	rsb	ip, r3, #7
 8001d42:	f1bc 0f04 	cmp.w	ip, #4
 8001d46:	bf28      	it	cs
 8001d48:	f04f 0c04 	movcs.w	ip, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d4c:	f103 0e04 	add.w	lr, r3, #4
 8001d50:	f1be 0f06 	cmp.w	lr, #6
 8001d54:	bf8c      	ite	hi
 8001d56:	3b03      	subhi	r3, #3
 8001d58:	2300      	movls	r3, #0

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5a:	f04f 3eff 	mov.w	lr, #4294967295
 8001d5e:	fa0e fc0c 	lsl.w	ip, lr, ip
 8001d62:	ea21 010c 	bic.w	r1, r1, ip
 8001d66:	4099      	lsls	r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d68:	fa0e fe03 	lsl.w	lr, lr, r3
 8001d6c:	ea22 020e 	bic.w	r2, r2, lr
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d70:	4311      	orrs	r1, r2
  if ((int32_t)(IRQn) >= 0)
 8001d72:	2800      	cmp	r0, #0
 8001d74:	db09      	blt.n	8001d8a <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	0109      	lsls	r1, r1, #4
 8001d78:	b2c9      	uxtb	r1, r1
 8001d7a:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8001d7e:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8001d82:	f880 1300 	strb.w	r1, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001d86:	f85d fb04 	ldr.w	pc, [sp], #4
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d8a:	f000 000f 	and.w	r0, r0, #15
 8001d8e:	0109      	lsls	r1, r1, #4
 8001d90:	b2c9      	uxtb	r1, r1
 8001d92:	4b02      	ldr	r3, [pc, #8]	@ (8001d9c <HAL_NVIC_SetPriority+0x68>)
 8001d94:	5419      	strb	r1, [r3, r0]
 8001d96:	e7f6      	b.n	8001d86 <HAL_NVIC_SetPriority+0x52>
 8001d98:	e000ed00 	.word	0xe000ed00
 8001d9c:	e000ed14 	.word	0xe000ed14

08001da0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001da0:	2800      	cmp	r0, #0
 8001da2:	db07      	blt.n	8001db4 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001da4:	0941      	lsrs	r1, r0, #5
 8001da6:	f000 001f 	and.w	r0, r0, #31
 8001daa:	2301      	movs	r3, #1
 8001dac:	4083      	lsls	r3, r0
 8001dae:	4a02      	ldr	r2, [pc, #8]	@ (8001db8 <HAL_NVIC_EnableIRQ+0x18>)
 8001db0:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	e000e100 	.word	0xe000e100

08001dbc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dbc:	3801      	subs	r0, #1
 8001dbe:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8001dc2:	d20b      	bcs.n	8001ddc <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dc4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 8001dc8:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_SYSTICK_Config+0x24>)
 8001dcc:	21f0      	movs	r1, #240	@ 0xf0
 8001dce:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dd2:	2000      	movs	r0, #0
 8001dd4:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dd6:	2207      	movs	r2, #7
 8001dd8:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dda:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001ddc:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001dde:	4770      	bx	lr
 8001de0:	e000ed00 	.word	0xe000ed00

08001de4 <HAL_DMA_Init>:
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
  uint32_t tmp = 0U;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001de4:	b360      	cbz	r0, 8001e40 <HAL_DMA_Init+0x5c>
{
 8001de6:	b410      	push	{r4}
 8001de8:	4602      	mov	r2, r0
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001dea:	6801      	ldr	r1, [r0, #0]
 8001dec:	4b15      	ldr	r3, [pc, #84]	@ (8001e44 <HAL_DMA_Init+0x60>)
 8001dee:	440b      	add	r3, r1
 8001df0:	4815      	ldr	r0, [pc, #84]	@ (8001e48 <HAL_DMA_Init+0x64>)
 8001df2:	fba0 0303 	umull	r0, r3, r0, r3
 8001df6:	091b      	lsrs	r3, r3, #4
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	6413      	str	r3, [r2, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001dfc:	4b13      	ldr	r3, [pc, #76]	@ (8001e4c <HAL_DMA_Init+0x68>)
 8001dfe:	63d3      	str	r3, [r2, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	2302      	movs	r3, #2
 8001e02:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001e06:	6808      	ldr	r0, [r1, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001e08:	f420 507f 	bic.w	r0, r0, #16320	@ 0x3fc0
 8001e0c:	f020 0030 	bic.w	r0, r0, #48	@ 0x30
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001e10:	6853      	ldr	r3, [r2, #4]
 8001e12:	6894      	ldr	r4, [r2, #8]
 8001e14:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e16:	68d4      	ldr	r4, [r2, #12]
 8001e18:	4323      	orrs	r3, r4
 8001e1a:	6914      	ldr	r4, [r2, #16]
 8001e1c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e1e:	6954      	ldr	r4, [r2, #20]
 8001e20:	4323      	orrs	r3, r4
 8001e22:	6994      	ldr	r4, [r2, #24]
 8001e24:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e26:	69d4      	ldr	r4, [r2, #28]
 8001e28:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001e2a:	4303      	orrs	r3, r0

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001e2c:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e2e:	2000      	movs	r0, #0
 8001e30:	6390      	str	r0, [r2, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001e32:	2301      	movs	r3, #1
 8001e34:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001e38:	f882 0020 	strb.w	r0, [r2, #32]

  return HAL_OK;
}
 8001e3c:	bc10      	pop	{r4}
 8001e3e:	4770      	bx	lr
    return HAL_ERROR;
 8001e40:	2001      	movs	r0, #1
}
 8001e42:	4770      	bx	lr
 8001e44:	bffdfff8 	.word	0xbffdfff8
 8001e48:	cccccccd 	.word	0xcccccccd
 8001e4c:	40020000 	.word	0x40020000

08001e50 <HAL_DMA_Start_IT>:

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e50:	f890 c020 	ldrb.w	ip, [r0, #32]
 8001e54:	f1bc 0f01 	cmp.w	ip, #1
 8001e58:	d047      	beq.n	8001eea <HAL_DMA_Start_IT+0x9a>
 8001e5a:	f04f 0c01 	mov.w	ip, #1
 8001e5e:	f880 c020 	strb.w	ip, [r0, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e62:	f890 c021 	ldrb.w	ip, [r0, #33]	@ 0x21
 8001e66:	fa5f fc8c 	uxtb.w	ip, ip
 8001e6a:	f1bc 0f01 	cmp.w	ip, #1
 8001e6e:	d004      	beq.n	8001e7a <HAL_DMA_Start_IT+0x2a>
    __HAL_DMA_ENABLE(hdma);
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001e70:	2300      	movs	r3, #0
 8001e72:	f880 3020 	strb.w	r3, [r0, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001e76:	2002      	movs	r0, #2
 8001e78:	4770      	bx	lr
{
 8001e7a:	b470      	push	{r4, r5, r6}
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7c:	2402      	movs	r4, #2
 8001e7e:	f880 4021 	strb.w	r4, [r0, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e82:	2400      	movs	r4, #0
 8001e84:	6384      	str	r4, [r0, #56]	@ 0x38
    __HAL_DMA_DISABLE(hdma);
 8001e86:	6805      	ldr	r5, [r0, #0]
 8001e88:	682c      	ldr	r4, [r5, #0]
 8001e8a:	f024 0401 	bic.w	r4, r4, #1
 8001e8e:	602c      	str	r4, [r5, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001e90:	6bc5      	ldr	r5, [r0, #60]	@ 0x3c
 8001e92:	2401      	movs	r4, #1
 8001e94:	6c06      	ldr	r6, [r0, #64]	@ 0x40
 8001e96:	40b4      	lsls	r4, r6
 8001e98:	606c      	str	r4, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001e9a:	6804      	ldr	r4, [r0, #0]
 8001e9c:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e9e:	6843      	ldr	r3, [r0, #4]
 8001ea0:	2b10      	cmp	r3, #16
 8001ea2:	d012      	beq.n	8001eca <HAL_DMA_Start_IT+0x7a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001ea4:	6803      	ldr	r3, [r0, #0]
 8001ea6:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001ea8:	6803      	ldr	r3, [r0, #0]
 8001eaa:	60da      	str	r2, [r3, #12]
    if(NULL != hdma->XferHalfCpltCallback)
 8001eac:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001eae:	b18b      	cbz	r3, 8001ed4 <HAL_DMA_Start_IT+0x84>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001eb0:	6802      	ldr	r2, [r0, #0]
 8001eb2:	6813      	ldr	r3, [r2, #0]
 8001eb4:	f043 030e 	orr.w	r3, r3, #14
 8001eb8:	6013      	str	r3, [r2, #0]
    __HAL_DMA_ENABLE(hdma);
 8001eba:	6802      	ldr	r2, [r0, #0]
 8001ebc:	6813      	ldr	r3, [r2, #0]
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec4:	2000      	movs	r0, #0
}
 8001ec6:	bc70      	pop	{r4, r5, r6}
 8001ec8:	4770      	bx	lr
    hdma->Instance->CPAR = DstAddress;
 8001eca:	6803      	ldr	r3, [r0, #0]
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001ece:	6803      	ldr	r3, [r0, #0]
 8001ed0:	60d9      	str	r1, [r3, #12]
 8001ed2:	e7eb      	b.n	8001eac <HAL_DMA_Start_IT+0x5c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001ed4:	6802      	ldr	r2, [r0, #0]
 8001ed6:	6813      	ldr	r3, [r2, #0]
 8001ed8:	f023 0304 	bic.w	r3, r3, #4
 8001edc:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001ede:	6802      	ldr	r2, [r0, #0]
 8001ee0:	6813      	ldr	r3, [r2, #0]
 8001ee2:	f043 030a 	orr.w	r3, r3, #10
 8001ee6:	6013      	str	r3, [r2, #0]
 8001ee8:	e7e7      	b.n	8001eba <HAL_DMA_Start_IT+0x6a>
  __HAL_LOCK(hdma);
 8001eea:	2002      	movs	r0, #2
}
 8001eec:	4770      	bx	lr

08001eee <HAL_DMA_Abort>:
{
 8001eee:	4603      	mov	r3, r0
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ef0:	f890 2021 	ldrb.w	r2, [r0, #33]	@ 0x21
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	2a02      	cmp	r2, #2
 8001ef8:	d006      	beq.n	8001f08 <HAL_DMA_Abort+0x1a>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001efa:	2204      	movs	r2, #4
 8001efc:	6382      	str	r2, [r0, #56]	@ 0x38
    return HAL_ERROR;
 8001efe:	2001      	movs	r0, #1
    __HAL_UNLOCK(hdma);
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2020 	strb.w	r2, [r3, #32]
}
 8001f06:	4770      	bx	lr
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f08:	6801      	ldr	r1, [r0, #0]
 8001f0a:	680a      	ldr	r2, [r1, #0]
 8001f0c:	f022 020e 	bic.w	r2, r2, #14
 8001f10:	600a      	str	r2, [r1, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f12:	6801      	ldr	r1, [r0, #0]
 8001f14:	680a      	ldr	r2, [r1, #0]
 8001f16:	f022 0201 	bic.w	r2, r2, #1
 8001f1a:	600a      	str	r2, [r1, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001f1c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
 8001f1e:	2101      	movs	r1, #1
 8001f20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001f22:	fa01 f202 	lsl.w	r2, r1, r2
 8001f26:	6042      	str	r2, [r0, #4]
  hdma->State = HAL_DMA_STATE_READY;
 8001f28:	f883 1021 	strb.w	r1, [r3, #33]	@ 0x21
  return status; 
 8001f2c:	2000      	movs	r0, #0
 8001f2e:	e7e7      	b.n	8001f00 <HAL_DMA_Abort+0x12>

08001f30 <HAL_DMA_Abort_IT>:
{  
 8001f30:	b508      	push	{r3, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f32:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 8001f36:	b2db      	uxtb	r3, r3
 8001f38:	2b02      	cmp	r3, #2
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_Abort_IT+0x14>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f3c:	2304      	movs	r3, #4
 8001f3e:	6383      	str	r3, [r0, #56]	@ 0x38
    status = HAL_ERROR;
 8001f40:	2001      	movs	r0, #1
}
 8001f42:	bd08      	pop	{r3, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f44:	6802      	ldr	r2, [r0, #0]
 8001f46:	6813      	ldr	r3, [r2, #0]
 8001f48:	f023 030e 	bic.w	r3, r3, #14
 8001f4c:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8001f4e:	6802      	ldr	r2, [r0, #0]
 8001f50:	6813      	ldr	r3, [r2, #0]
 8001f52:	f023 0301 	bic.w	r3, r3, #1
 8001f56:	6013      	str	r3, [r2, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f58:	6803      	ldr	r3, [r0, #0]
 8001f5a:	4a19      	ldr	r2, [pc, #100]	@ (8001fc0 <HAL_DMA_Abort_IT+0x90>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d013      	beq.n	8001f88 <HAL_DMA_Abort_IT+0x58>
 8001f60:	3214      	adds	r2, #20
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01e      	beq.n	8001fa4 <HAL_DMA_Abort_IT+0x74>
 8001f66:	3214      	adds	r2, #20
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d01d      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x78>
 8001f6c:	3214      	adds	r2, #20
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01d      	beq.n	8001fae <HAL_DMA_Abort_IT+0x7e>
 8001f72:	3214      	adds	r2, #20
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d01d      	beq.n	8001fb4 <HAL_DMA_Abort_IT+0x84>
 8001f78:	3214      	adds	r2, #20
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	bf14      	ite	ne
 8001f7e:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8001f82:	f44f 1380 	moveq.w	r3, #1048576	@ 0x100000
 8001f86:	e000      	b.n	8001f8a <HAL_DMA_Abort_IT+0x5a>
 8001f88:	2301      	movs	r3, #1
 8001f8a:	4a0e      	ldr	r2, [pc, #56]	@ (8001fc4 <HAL_DMA_Abort_IT+0x94>)
 8001f8c:	6053      	str	r3, [r2, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 8001f94:	2300      	movs	r3, #0
 8001f96:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8001f9a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8001f9c:	b16b      	cbz	r3, 8001fba <HAL_DMA_Abort_IT+0x8a>
      hdma->XferAbortCallback(hdma);
 8001f9e:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8001fa0:	2000      	movs	r0, #0
 8001fa2:	e7ce      	b.n	8001f42 <HAL_DMA_Abort_IT+0x12>
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001fa4:	2310      	movs	r3, #16
 8001fa6:	e7f0      	b.n	8001f8a <HAL_DMA_Abort_IT+0x5a>
 8001fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fac:	e7ed      	b.n	8001f8a <HAL_DMA_Abort_IT+0x5a>
 8001fae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb2:	e7ea      	b.n	8001f8a <HAL_DMA_Abort_IT+0x5a>
 8001fb4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fb8:	e7e7      	b.n	8001f8a <HAL_DMA_Abort_IT+0x5a>
  HAL_StatusTypeDef status = HAL_OK;
 8001fba:	2000      	movs	r0, #0
 8001fbc:	e7c1      	b.n	8001f42 <HAL_DMA_Abort_IT+0x12>
 8001fbe:	bf00      	nop
 8001fc0:	40020008 	.word	0x40020008
 8001fc4:	40020000 	.word	0x40020000

08001fc8 <HAL_DMA_IRQHandler>:
{
 8001fc8:	b538      	push	{r3, r4, r5, lr}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001fca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8001fcc:	681a      	ldr	r2, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8001fce:	6804      	ldr	r4, [r0, #0]
 8001fd0:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001fd2:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	408b      	lsls	r3, r1
 8001fd8:	4213      	tst	r3, r2
 8001fda:	d034      	beq.n	8002046 <HAL_DMA_IRQHandler+0x7e>
 8001fdc:	f015 0f04 	tst.w	r5, #4
 8001fe0:	d031      	beq.n	8002046 <HAL_DMA_IRQHandler+0x7e>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001fe2:	6823      	ldr	r3, [r4, #0]
 8001fe4:	f013 0f20 	tst.w	r3, #32
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x2a>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001fea:	6823      	ldr	r3, [r4, #0]
 8001fec:	f023 0304 	bic.w	r3, r3, #4
 8001ff0:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001ff2:	6803      	ldr	r3, [r0, #0]
 8001ff4:	4a42      	ldr	r2, [pc, #264]	@ (8002100 <HAL_DMA_IRQHandler+0x138>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d013      	beq.n	8002022 <HAL_DMA_IRQHandler+0x5a>
 8001ffa:	3214      	adds	r2, #20
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d017      	beq.n	8002030 <HAL_DMA_IRQHandler+0x68>
 8002000:	3214      	adds	r2, #20
 8002002:	4293      	cmp	r3, r2
 8002004:	d016      	beq.n	8002034 <HAL_DMA_IRQHandler+0x6c>
 8002006:	3214      	adds	r2, #20
 8002008:	4293      	cmp	r3, r2
 800200a:	d016      	beq.n	800203a <HAL_DMA_IRQHandler+0x72>
 800200c:	3214      	adds	r2, #20
 800200e:	4293      	cmp	r3, r2
 8002010:	d016      	beq.n	8002040 <HAL_DMA_IRQHandler+0x78>
 8002012:	3214      	adds	r2, #20
 8002014:	4293      	cmp	r3, r2
 8002016:	bf14      	ite	ne
 8002018:	f04f 6380 	movne.w	r3, #67108864	@ 0x4000000
 800201c:	f44f 0380 	moveq.w	r3, #4194304	@ 0x400000
 8002020:	e000      	b.n	8002024 <HAL_DMA_IRQHandler+0x5c>
 8002022:	2304      	movs	r3, #4
 8002024:	4a37      	ldr	r2, [pc, #220]	@ (8002104 <HAL_DMA_IRQHandler+0x13c>)
 8002026:	6053      	str	r3, [r2, #4]
    if(hdma->XferHalfCpltCallback != NULL)
 8002028:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800202a:	b103      	cbz	r3, 800202e <HAL_DMA_IRQHandler+0x66>
      hdma->XferHalfCpltCallback(hdma);
 800202c:	4798      	blx	r3
}
 800202e:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002030:	2340      	movs	r3, #64	@ 0x40
 8002032:	e7f7      	b.n	8002024 <HAL_DMA_IRQHandler+0x5c>
 8002034:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002038:	e7f4      	b.n	8002024 <HAL_DMA_IRQHandler+0x5c>
 800203a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800203e:	e7f1      	b.n	8002024 <HAL_DMA_IRQHandler+0x5c>
 8002040:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8002044:	e7ee      	b.n	8002024 <HAL_DMA_IRQHandler+0x5c>
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8002046:	2302      	movs	r3, #2
 8002048:	408b      	lsls	r3, r1
 800204a:	4213      	tst	r3, r2
 800204c:	d03b      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xfe>
 800204e:	f015 0f02 	tst.w	r5, #2
 8002052:	d038      	beq.n	80020c6 <HAL_DMA_IRQHandler+0xfe>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	f013 0f20 	tst.w	r3, #32
 800205a:	d106      	bne.n	800206a <HAL_DMA_IRQHandler+0xa2>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800205c:	6823      	ldr	r3, [r4, #0]
 800205e:	f023 030a 	bic.w	r3, r3, #10
 8002062:	6023      	str	r3, [r4, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8002064:	2301      	movs	r3, #1
 8002066:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800206a:	6803      	ldr	r3, [r0, #0]
 800206c:	4a24      	ldr	r2, [pc, #144]	@ (8002100 <HAL_DMA_IRQHandler+0x138>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d013      	beq.n	800209a <HAL_DMA_IRQHandler+0xd2>
 8002072:	3214      	adds	r2, #20
 8002074:	4293      	cmp	r3, r2
 8002076:	d01b      	beq.n	80020b0 <HAL_DMA_IRQHandler+0xe8>
 8002078:	3214      	adds	r2, #20
 800207a:	4293      	cmp	r3, r2
 800207c:	d01a      	beq.n	80020b4 <HAL_DMA_IRQHandler+0xec>
 800207e:	3214      	adds	r2, #20
 8002080:	4293      	cmp	r3, r2
 8002082:	d01a      	beq.n	80020ba <HAL_DMA_IRQHandler+0xf2>
 8002084:	3214      	adds	r2, #20
 8002086:	4293      	cmp	r3, r2
 8002088:	d01a      	beq.n	80020c0 <HAL_DMA_IRQHandler+0xf8>
 800208a:	3214      	adds	r2, #20
 800208c:	4293      	cmp	r3, r2
 800208e:	bf14      	ite	ne
 8002090:	f04f 7300 	movne.w	r3, #33554432	@ 0x2000000
 8002094:	f44f 1300 	moveq.w	r3, #2097152	@ 0x200000
 8002098:	e000      	b.n	800209c <HAL_DMA_IRQHandler+0xd4>
 800209a:	2302      	movs	r3, #2
 800209c:	4a19      	ldr	r2, [pc, #100]	@ (8002104 <HAL_DMA_IRQHandler+0x13c>)
 800209e:	6053      	str	r3, [r2, #4]
    __HAL_UNLOCK(hdma);
 80020a0:	2300      	movs	r3, #0
 80020a2:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 80020a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d0c0      	beq.n	800202e <HAL_DMA_IRQHandler+0x66>
      hdma->XferCpltCallback(hdma);
 80020ac:	4798      	blx	r3
 80020ae:	e7be      	b.n	800202e <HAL_DMA_IRQHandler+0x66>
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80020b0:	2320      	movs	r3, #32
 80020b2:	e7f3      	b.n	800209c <HAL_DMA_IRQHandler+0xd4>
 80020b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020b8:	e7f0      	b.n	800209c <HAL_DMA_IRQHandler+0xd4>
 80020ba:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80020be:	e7ed      	b.n	800209c <HAL_DMA_IRQHandler+0xd4>
 80020c0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80020c4:	e7ea      	b.n	800209c <HAL_DMA_IRQHandler+0xd4>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80020c6:	2308      	movs	r3, #8
 80020c8:	408b      	lsls	r3, r1
 80020ca:	4213      	tst	r3, r2
 80020cc:	d0af      	beq.n	800202e <HAL_DMA_IRQHandler+0x66>
 80020ce:	f015 0f08 	tst.w	r5, #8
 80020d2:	d0ac      	beq.n	800202e <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80020d4:	6823      	ldr	r3, [r4, #0]
 80020d6:	f023 030e 	bic.w	r3, r3, #14
 80020da:	6023      	str	r3, [r4, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80020dc:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 80020de:	2301      	movs	r3, #1
 80020e0:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80020e2:	fa03 f202 	lsl.w	r2, r3, r2
 80020e6:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80020e8:	6383      	str	r3, [r0, #56]	@ 0x38
    hdma->State = HAL_DMA_STATE_READY;
 80020ea:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
    __HAL_UNLOCK(hdma);
 80020ee:	2300      	movs	r3, #0
 80020f0:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 80020f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d099      	beq.n	800202e <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 80020fa:	4798      	blx	r3
  return;
 80020fc:	e797      	b.n	800202e <HAL_DMA_IRQHandler+0x66>
 80020fe:	bf00      	nop
 8002100:	40020008 	.word	0x40020008
 8002104:	40020000 	.word	0x40020000

08002108 <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8002108:	6b80      	ldr	r0, [r0, #56]	@ 0x38
}
 800210a:	4770      	bx	lr

0800210c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800210c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002110:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002112:	f8d1 9000 	ldr.w	r9, [r1]
 8002116:	f1b9 0f00 	cmp.w	r9, #0
 800211a:	f000 8126 	beq.w	800236a <HAL_GPIO_Init+0x25e>
 800211e:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002120:	4613      	mov	r3, r2
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002122:	4d93      	ldr	r5, [pc, #588]	@ (8002370 <HAL_GPIO_Init+0x264>)
      switch (GPIO_Init->Mode)
 8002124:	4c93      	ldr	r4, [pc, #588]	@ (8002374 <HAL_GPIO_Init+0x268>)
 8002126:	4e94      	ldr	r6, [pc, #592]	@ (8002378 <HAL_GPIO_Init+0x26c>)
 8002128:	f8df e250 	ldr.w	lr, [pc, #592]	@ 800237c <HAL_GPIO_Init+0x270>
 800212c:	4694      	mov	ip, r2
 800212e:	e0be      	b.n	80022ae <HAL_GPIO_Init+0x1a2>
 8002130:	45a1      	cmp	r9, r4
 8002132:	d00d      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 8002134:	d904      	bls.n	8002140 <HAL_GPIO_Init+0x34>
 8002136:	45b1      	cmp	r9, r6
 8002138:	d00a      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 800213a:	45f1      	cmp	r9, lr
 800213c:	d008      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 800213e:	e01b      	b.n	8002178 <HAL_GPIO_Init+0x6c>
 8002140:	f8df a23c 	ldr.w	sl, [pc, #572]	@ 8002380 <HAL_GPIO_Init+0x274>
 8002144:	45d1      	cmp	r9, sl
 8002146:	d003      	beq.n	8002150 <HAL_GPIO_Init+0x44>
 8002148:	f50a 2a70 	add.w	sl, sl, #983040	@ 0xf0000
 800214c:	45d1      	cmp	r9, sl
 800214e:	d10f      	bne.n	8002170 <HAL_GPIO_Init+0x64>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002150:	f8d1 c008 	ldr.w	ip, [r1, #8]
 8002154:	f1bc 0f00 	cmp.w	ip, #0
 8002158:	f000 80fb 	beq.w	8002352 <HAL_GPIO_Init+0x246>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800215c:	f1bc 0f01 	cmp.w	ip, #1
            GPIOx->BSRR = ioposition;
 8002160:	bf0c      	ite	eq
 8002162:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8002166:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800216a:	f04f 0c08 	mov.w	ip, #8
 800216e:	e003      	b.n	8002178 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 8002170:	f5aa 1a80 	sub.w	sl, sl, #1048576	@ 0x100000
 8002174:	45d1      	cmp	r9, sl
 8002176:	d0eb      	beq.n	8002150 <HAL_GPIO_Init+0x44>
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002178:	2fff      	cmp	r7, #255	@ 0xff
 800217a:	bf99      	ittee	ls
 800217c:	4681      	movls	r9, r0
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800217e:	4692      	movls	sl, r2
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002180:	f100 0904 	addhi.w	r9, r0, #4
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002184:	f1a2 0a20 	subhi.w	sl, r2, #32
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002188:	f8d9 8000 	ldr.w	r8, [r9]
 800218c:	f04f 0b0f 	mov.w	fp, #15
 8002190:	fa0b fb0a 	lsl.w	fp, fp, sl
 8002194:	ea28 080b 	bic.w	r8, r8, fp
 8002198:	fa0c fa0a 	lsl.w	sl, ip, sl
 800219c:	ea48 080a 	orr.w	r8, r8, sl
 80021a0:	f8c9 8000 	str.w	r8, [r9]
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80021a4:	f8d1 8004 	ldr.w	r8, [r1, #4]
 80021a8:	f018 5f80 	tst.w	r8, #268435456	@ 0x10000000
 80021ac:	d078      	beq.n	80022a0 <HAL_GPIO_Init+0x194>
        __HAL_RCC_AFIO_CLK_ENABLE();
 80021ae:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80021b2:	f048 0801 	orr.w	r8, r8, #1
 80021b6:	f8c5 8018 	str.w	r8, [r5, #24]
 80021ba:	f8d5 8018 	ldr.w	r8, [r5, #24]
 80021be:	f008 0801 	and.w	r8, r8, #1
 80021c2:	f8cd 8004 	str.w	r8, [sp, #4]
 80021c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
        temp = AFIO->EXTICR[position >> 2u];
 80021ca:	f023 0803 	bic.w	r8, r3, #3
 80021ce:	f108 4880 	add.w	r8, r8, #1073741824	@ 0x40000000
 80021d2:	f508 3880 	add.w	r8, r8, #65536	@ 0x10000
 80021d6:	f8d8 a008 	ldr.w	sl, [r8, #8]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021da:	f003 0b03 	and.w	fp, r3, #3
 80021de:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80021e2:	f04f 090f 	mov.w	r9, #15
 80021e6:	fa09 f90b 	lsl.w	r9, r9, fp
 80021ea:	ea2a 0a09 	bic.w	sl, sl, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021ee:	f8df 9194 	ldr.w	r9, [pc, #404]	@ 8002384 <HAL_GPIO_Init+0x278>
 80021f2:	4548      	cmp	r0, r9
 80021f4:	f000 80b0 	beq.w	8002358 <HAL_GPIO_Init+0x24c>
 80021f8:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 80021fc:	4548      	cmp	r0, r9
 80021fe:	f000 80ae 	beq.w	800235e <HAL_GPIO_Init+0x252>
 8002202:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8002206:	4548      	cmp	r0, r9
 8002208:	f000 80ac 	beq.w	8002364 <HAL_GPIO_Init+0x258>
 800220c:	f509 6980 	add.w	r9, r9, #1024	@ 0x400
 8002210:	4548      	cmp	r0, r9
 8002212:	bf14      	ite	ne
 8002214:	f04f 0904 	movne.w	r9, #4
 8002218:	f04f 0903 	moveq.w	r9, #3
 800221c:	fa09 f90b 	lsl.w	r9, r9, fp
 8002220:	ea49 090a 	orr.w	r9, r9, sl
        AFIO->EXTICR[position >> 2u] = temp;
 8002224:	f8c8 9008 	str.w	r9, [r8, #8]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002228:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800222c:	f418 1f80 	tst.w	r8, #1048576	@ 0x100000
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002230:	f8df 9154 	ldr.w	r9, [pc, #340]	@ 8002388 <HAL_GPIO_Init+0x27c>
 8002234:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002238:	bf14      	ite	ne
 800223a:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800223e:	ea28 0807 	biceq.w	r8, r8, r7
 8002242:	f8c9 8008 	str.w	r8, [r9, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002246:	f8d1 8004 	ldr.w	r8, [r1, #4]
 800224a:	f418 1f00 	tst.w	r8, #2097152	@ 0x200000
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800224e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002388 <HAL_GPIO_Init+0x27c>
 8002252:	f8d9 800c 	ldr.w	r8, [r9, #12]
 8002256:	bf14      	ite	ne
 8002258:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800225c:	ea28 0807 	biceq.w	r8, r8, r7
 8002260:	f8c9 800c 	str.w	r8, [r9, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002264:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002268:	f418 3f00 	tst.w	r8, #131072	@ 0x20000
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800226c:	f8df 9118 	ldr.w	r9, [pc, #280]	@ 8002388 <HAL_GPIO_Init+0x27c>
 8002270:	f8d9 8004 	ldr.w	r8, [r9, #4]
 8002274:	bf14      	ite	ne
 8002276:	ea48 0807 	orrne.w	r8, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800227a:	ea28 0807 	biceq.w	r8, r8, r7
 800227e:	f8c9 8004 	str.w	r8, [r9, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002282:	f8d1 8004 	ldr.w	r8, [r1, #4]
 8002286:	f418 3f80 	tst.w	r8, #65536	@ 0x10000
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800228a:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 8002388 <HAL_GPIO_Init+0x27c>
 800228e:	f8d9 8000 	ldr.w	r8, [r9]
 8002292:	bf14      	ite	ne
 8002294:	ea48 0707 	orrne.w	r7, r8, r7
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002298:	ea28 0707 	biceq.w	r7, r8, r7
 800229c:	f8c9 7000 	str.w	r7, [r9]
        }
      }
    }

	position++;
 80022a0:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022a2:	f8d1 9000 	ldr.w	r9, [r1]
 80022a6:	3204      	adds	r2, #4
 80022a8:	fa39 f703 	lsrs.w	r7, r9, r3
 80022ac:	d05d      	beq.n	800236a <HAL_GPIO_Init+0x25e>
    ioposition = (0x01uL << position);
 80022ae:	f04f 0801 	mov.w	r8, #1
 80022b2:	fa08 f803 	lsl.w	r8, r8, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022b6:	ea08 0709 	and.w	r7, r8, r9
    if (iocurrent == ioposition)
 80022ba:	ea38 0909 	bics.w	r9, r8, r9
 80022be:	d1ef      	bne.n	80022a0 <HAL_GPIO_Init+0x194>
      switch (GPIO_Init->Mode)
 80022c0:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80022c4:	f1b9 0f12 	cmp.w	r9, #18
 80022c8:	f63f af32 	bhi.w	8002130 <HAL_GPIO_Init+0x24>
 80022cc:	f1b9 0f12 	cmp.w	r9, #18
 80022d0:	f63f af52 	bhi.w	8002178 <HAL_GPIO_Init+0x6c>
 80022d4:	f20f 0a04 	addw	sl, pc, #4
 80022d8:	f85a f029 	ldr.w	pc, [sl, r9, lsl #2]
 80022dc:	08002151 	.word	0x08002151
 80022e0:	08002329 	.word	0x08002329
 80022e4:	08002339 	.word	0x08002339
 80022e8:	0800234d 	.word	0x0800234d
 80022ec:	08002179 	.word	0x08002179
 80022f0:	08002179 	.word	0x08002179
 80022f4:	08002179 	.word	0x08002179
 80022f8:	08002179 	.word	0x08002179
 80022fc:	08002179 	.word	0x08002179
 8002300:	08002179 	.word	0x08002179
 8002304:	08002179 	.word	0x08002179
 8002308:	08002179 	.word	0x08002179
 800230c:	08002179 	.word	0x08002179
 8002310:	08002179 	.word	0x08002179
 8002314:	08002179 	.word	0x08002179
 8002318:	08002179 	.word	0x08002179
 800231c:	08002179 	.word	0x08002179
 8002320:	0800232f 	.word	0x0800232f
 8002324:	08002343 	.word	0x08002343
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002328:	f8d1 c00c 	ldr.w	ip, [r1, #12]
          break;
 800232c:	e724      	b.n	8002178 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800232e:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002332:	f10c 0c04 	add.w	ip, ip, #4
          break;
 8002336:	e71f      	b.n	8002178 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002338:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 800233c:	f10c 0c08 	add.w	ip, ip, #8
          break;
 8002340:	e71a      	b.n	8002178 <HAL_GPIO_Init+0x6c>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002342:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8002346:	f10c 0c0c 	add.w	ip, ip, #12
          break;
 800234a:	e715      	b.n	8002178 <HAL_GPIO_Init+0x6c>
      switch (GPIO_Init->Mode)
 800234c:	f04f 0c00 	mov.w	ip, #0
 8002350:	e712      	b.n	8002178 <HAL_GPIO_Init+0x6c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002352:	f04f 0c04 	mov.w	ip, #4
 8002356:	e70f      	b.n	8002178 <HAL_GPIO_Init+0x6c>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002358:	f04f 0900 	mov.w	r9, #0
 800235c:	e75e      	b.n	800221c <HAL_GPIO_Init+0x110>
 800235e:	f04f 0901 	mov.w	r9, #1
 8002362:	e75b      	b.n	800221c <HAL_GPIO_Init+0x110>
 8002364:	f04f 0902 	mov.w	r9, #2
 8002368:	e758      	b.n	800221c <HAL_GPIO_Init+0x110>
  }
}
 800236a:	b003      	add	sp, #12
 800236c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002370:	40021000 	.word	0x40021000
 8002374:	10220000 	.word	0x10220000
 8002378:	10310000 	.word	0x10310000
 800237c:	10320000 	.word	0x10320000
 8002380:	10120000 	.word	0x10120000
 8002384:	40010800 	.word	0x40010800
 8002388:	40010400 	.word	0x40010400

0800238c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800238c:	6883      	ldr	r3, [r0, #8]
 800238e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8002390:	bf14      	ite	ne
 8002392:	2001      	movne	r0, #1
 8002394:	2000      	moveq	r0, #0
 8002396:	4770      	bx	lr

08002398 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002398:	b10a      	cbz	r2, 800239e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
 800239a:	6101      	str	r1, [r0, #16]
 800239c:	4770      	bx	lr
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800239e:	0409      	lsls	r1, r1, #16
 80023a0:	6101      	str	r1, [r0, #16]
  }
}
 80023a2:	4770      	bx	lr

080023a4 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80023a4:	68c3      	ldr	r3, [r0, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80023a6:	ea01 0203 	and.w	r2, r1, r3
 80023aa:	ea21 0103 	bic.w	r1, r1, r3
 80023ae:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80023b2:	6101      	str	r1, [r0, #16]
}
 80023b4:	4770      	bx	lr
	...

080023b8 <HAL_RCC_OscConfig>:
{
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80023b8:	2800      	cmp	r0, #0
 80023ba:	f000 8201 	beq.w	80027c0 <HAL_RCC_OscConfig+0x408>
{
 80023be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c6:	6803      	ldr	r3, [r0, #0]
 80023c8:	f013 0f01 	tst.w	r3, #1
 80023cc:	d02c      	beq.n	8002428 <HAL_RCC_OscConfig+0x70>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ce:	4b9f      	ldr	r3, [pc, #636]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 030c 	and.w	r3, r3, #12
 80023d6:	2b04      	cmp	r3, #4
 80023d8:	d01d      	beq.n	8002416 <HAL_RCC_OscConfig+0x5e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023da:	4b9c      	ldr	r3, [pc, #624]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f003 030c 	and.w	r3, r3, #12
 80023e2:	2b08      	cmp	r3, #8
 80023e4:	d012      	beq.n	800240c <HAL_RCC_OscConfig+0x54>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e6:	6863      	ldr	r3, [r4, #4]
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ec:	d041      	beq.n	8002472 <HAL_RCC_OscConfig+0xba>
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d155      	bne.n	800249e <HAL_RCC_OscConfig+0xe6>
 80023f2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80023f6:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002400:	601a      	str	r2, [r3, #0]
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e037      	b.n	800247c <HAL_RCC_OscConfig+0xc4>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800240c:	4b8f      	ldr	r3, [pc, #572]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 8002414:	d0e7      	beq.n	80023e6 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002416:	4b8d      	ldr	r3, [pc, #564]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800241e:	d003      	beq.n	8002428 <HAL_RCC_OscConfig+0x70>
 8002420:	6863      	ldr	r3, [r4, #4]
 8002422:	2b00      	cmp	r3, #0
 8002424:	f000 81ce 	beq.w	80027c4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	f013 0f02 	tst.w	r3, #2
 800242e:	d075      	beq.n	800251c <HAL_RCC_OscConfig+0x164>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002430:	4b86      	ldr	r3, [pc, #536]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f013 0f0c 	tst.w	r3, #12
 8002438:	d05f      	beq.n	80024fa <HAL_RCC_OscConfig+0x142>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800243a:	4b84      	ldr	r3, [pc, #528]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f003 030c 	and.w	r3, r3, #12
 8002442:	2b08      	cmp	r3, #8
 8002444:	d054      	beq.n	80024f0 <HAL_RCC_OscConfig+0x138>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002446:	6923      	ldr	r3, [r4, #16]
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 808a 	beq.w	8002562 <HAL_RCC_OscConfig+0x1aa>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800244e:	4b80      	ldr	r3, [pc, #512]	@ (8002650 <HAL_RCC_OscConfig+0x298>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff f9de 	bl	8001814 <HAL_GetTick>
 8002458:	4605      	mov	r5, r0

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4e7c      	ldr	r6, [pc, #496]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 800245c:	6833      	ldr	r3, [r6, #0]
 800245e:	f013 0f02 	tst.w	r3, #2
 8002462:	d175      	bne.n	8002550 <HAL_RCC_OscConfig+0x198>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002464:	f7ff f9d6 	bl	8001814 <HAL_GetTick>
 8002468:	1b40      	subs	r0, r0, r5
 800246a:	2802      	cmp	r0, #2
 800246c:	d9f6      	bls.n	800245c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_TIMEOUT;
 800246e:	2003      	movs	r0, #3
 8002470:	e1ad      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002472:	4a76      	ldr	r2, [pc, #472]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002474:	6813      	ldr	r3, [r2, #0]
 8002476:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800247a:	6013      	str	r3, [r2, #0]
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800247c:	6863      	ldr	r3, [r4, #4]
 800247e:	b343      	cbz	r3, 80024d2 <HAL_RCC_OscConfig+0x11a>
        tickstart = HAL_GetTick();
 8002480:	f7ff f9c8 	bl	8001814 <HAL_GetTick>
 8002484:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002486:	4e71      	ldr	r6, [pc, #452]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002488:	6833      	ldr	r3, [r6, #0]
 800248a:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 800248e:	d1cb      	bne.n	8002428 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002490:	f7ff f9c0 	bl	8001814 <HAL_GetTick>
 8002494:	1b40      	subs	r0, r0, r5
 8002496:	2864      	cmp	r0, #100	@ 0x64
 8002498:	d9f6      	bls.n	8002488 <HAL_RCC_OscConfig+0xd0>
            return HAL_TIMEOUT;
 800249a:	2003      	movs	r0, #3
 800249c:	e197      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024a2:	d009      	beq.n	80024b8 <HAL_RCC_OscConfig+0x100>
 80024a4:	4b69      	ldr	r3, [pc, #420]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80024a6:	681a      	ldr	r2, [r3, #0]
 80024a8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	e7e1      	b.n	800247c <HAL_RCC_OscConfig+0xc4>
 80024b8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80024bc:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	681a      	ldr	r2, [r3, #0]
 80024ca:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e7d4      	b.n	800247c <HAL_RCC_OscConfig+0xc4>
        tickstart = HAL_GetTick();
 80024d2:	f7ff f99f 	bl	8001814 <HAL_GetTick>
 80024d6:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024d8:	4e5c      	ldr	r6, [pc, #368]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80024da:	6833      	ldr	r3, [r6, #0]
 80024dc:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 80024e0:	d0a2      	beq.n	8002428 <HAL_RCC_OscConfig+0x70>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e2:	f7ff f997 	bl	8001814 <HAL_GetTick>
 80024e6:	1b40      	subs	r0, r0, r5
 80024e8:	2864      	cmp	r0, #100	@ 0x64
 80024ea:	d9f6      	bls.n	80024da <HAL_RCC_OscConfig+0x122>
            return HAL_TIMEOUT;
 80024ec:	2003      	movs	r0, #3
 80024ee:	e16e      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024f0:	4b56      	ldr	r3, [pc, #344]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 80024f8:	d1a5      	bne.n	8002446 <HAL_RCC_OscConfig+0x8e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024fa:	4b54      	ldr	r3, [pc, #336]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f013 0f02 	tst.w	r3, #2
 8002502:	d003      	beq.n	800250c <HAL_RCC_OscConfig+0x154>
 8002504:	6923      	ldr	r3, [r4, #16]
 8002506:	2b01      	cmp	r3, #1
 8002508:	f040 815e 	bne.w	80027c8 <HAL_RCC_OscConfig+0x410>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800250c:	4a4f      	ldr	r2, [pc, #316]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 800250e:	6813      	ldr	r3, [r2, #0]
 8002510:	6961      	ldr	r1, [r4, #20]
 8002512:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8002516:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800251a:	6013      	str	r3, [r2, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800251c:	6823      	ldr	r3, [r4, #0]
 800251e:	f013 0f08 	tst.w	r3, #8
 8002522:	d03d      	beq.n	80025a0 <HAL_RCC_OscConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002524:	69a3      	ldr	r3, [r4, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d066      	beq.n	80025f8 <HAL_RCC_OscConfig+0x240>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800252a:	4b49      	ldr	r3, [pc, #292]	@ (8002650 <HAL_RCC_OscConfig+0x298>)
 800252c:	2201      	movs	r2, #1
 800252e:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002532:	f7ff f96f 	bl	8001814 <HAL_GetTick>
 8002536:	4605      	mov	r5, r0

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002538:	4e44      	ldr	r6, [pc, #272]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 800253a:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800253c:	f013 0f02 	tst.w	r3, #2
 8002540:	d121      	bne.n	8002586 <HAL_RCC_OscConfig+0x1ce>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002542:	f7ff f967 	bl	8001814 <HAL_GetTick>
 8002546:	1b40      	subs	r0, r0, r5
 8002548:	2802      	cmp	r0, #2
 800254a:	d9f6      	bls.n	800253a <HAL_RCC_OscConfig+0x182>
        {
          return HAL_TIMEOUT;
 800254c:	2003      	movs	r0, #3
 800254e:	e13e      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002550:	4a3e      	ldr	r2, [pc, #248]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002552:	6813      	ldr	r3, [r2, #0]
 8002554:	6961      	ldr	r1, [r4, #20]
 8002556:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800255a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800255e:	6013      	str	r3, [r2, #0]
 8002560:	e7dc      	b.n	800251c <HAL_RCC_OscConfig+0x164>
        __HAL_RCC_HSI_DISABLE();
 8002562:	4b3b      	ldr	r3, [pc, #236]	@ (8002650 <HAL_RCC_OscConfig+0x298>)
 8002564:	2200      	movs	r2, #0
 8002566:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002568:	f7ff f954 	bl	8001814 <HAL_GetTick>
 800256c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800256e:	4e37      	ldr	r6, [pc, #220]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002570:	6833      	ldr	r3, [r6, #0]
 8002572:	f013 0f02 	tst.w	r3, #2
 8002576:	d0d1      	beq.n	800251c <HAL_RCC_OscConfig+0x164>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002578:	f7ff f94c 	bl	8001814 <HAL_GetTick>
 800257c:	1b40      	subs	r0, r0, r5
 800257e:	2802      	cmp	r0, #2
 8002580:	d9f6      	bls.n	8002570 <HAL_RCC_OscConfig+0x1b8>
            return HAL_TIMEOUT;
 8002582:	2003      	movs	r0, #3
 8002584:	e123      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002586:	4b33      	ldr	r3, [pc, #204]	@ (8002654 <HAL_RCC_OscConfig+0x29c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a33      	ldr	r2, [pc, #204]	@ (8002658 <HAL_RCC_OscConfig+0x2a0>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0a5b      	lsrs	r3, r3, #9
 8002592:	9301      	str	r3, [sp, #4]
  do
  {
    __NOP();
 8002594:	bf00      	nop
  }
  while (Delay --);
 8002596:	9b01      	ldr	r3, [sp, #4]
 8002598:	1e5a      	subs	r2, r3, #1
 800259a:	9201      	str	r2, [sp, #4]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1f9      	bne.n	8002594 <HAL_RCC_OscConfig+0x1dc>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a0:	6823      	ldr	r3, [r4, #0]
 80025a2:	f013 0f04 	tst.w	r3, #4
 80025a6:	f000 809b 	beq.w	80026e0 <HAL_RCC_OscConfig+0x328>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025aa:	4b28      	ldr	r3, [pc, #160]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80025ac:	69db      	ldr	r3, [r3, #28]
 80025ae:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 80025b2:	d134      	bne.n	800261e <HAL_RCC_OscConfig+0x266>
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b25      	ldr	r3, [pc, #148]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 80025b6:	69da      	ldr	r2, [r3, #28]
 80025b8:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80025bc:	61da      	str	r2, [r3, #28]
 80025be:	69db      	ldr	r3, [r3, #28]
 80025c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	9b00      	ldr	r3, [sp, #0]
      pwrclkchanged = SET;
 80025c8:	2501      	movs	r5, #1
    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025ca:	4b24      	ldr	r3, [pc, #144]	@ (800265c <HAL_RCC_OscConfig+0x2a4>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f413 7f80 	tst.w	r3, #256	@ 0x100
 80025d2:	d026      	beq.n	8002622 <HAL_RCC_OscConfig+0x26a>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025d4:	68e3      	ldr	r3, [r4, #12]
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d042      	beq.n	8002660 <HAL_RCC_OscConfig+0x2a8>
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d158      	bne.n	8002690 <HAL_RCC_OscConfig+0x2d8>
 80025de:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80025e2:	f503 3304 	add.w	r3, r3, #135168	@ 0x21000
 80025e6:	6a1a      	ldr	r2, [r3, #32]
 80025e8:	f022 0201 	bic.w	r2, r2, #1
 80025ec:	621a      	str	r2, [r3, #32]
 80025ee:	6a1a      	ldr	r2, [r3, #32]
 80025f0:	f022 0204 	bic.w	r2, r2, #4
 80025f4:	621a      	str	r2, [r3, #32]
 80025f6:	e038      	b.n	800266a <HAL_RCC_OscConfig+0x2b2>
      __HAL_RCC_LSI_DISABLE();
 80025f8:	4b15      	ldr	r3, [pc, #84]	@ (8002650 <HAL_RCC_OscConfig+0x298>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	f8c3 2480 	str.w	r2, [r3, #1152]	@ 0x480
      tickstart = HAL_GetTick();
 8002600:	f7ff f908 	bl	8001814 <HAL_GetTick>
 8002604:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002606:	4e11      	ldr	r6, [pc, #68]	@ (800264c <HAL_RCC_OscConfig+0x294>)
 8002608:	6a73      	ldr	r3, [r6, #36]	@ 0x24
 800260a:	f013 0f02 	tst.w	r3, #2
 800260e:	d0c7      	beq.n	80025a0 <HAL_RCC_OscConfig+0x1e8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002610:	f7ff f900 	bl	8001814 <HAL_GetTick>
 8002614:	1b40      	subs	r0, r0, r5
 8002616:	2802      	cmp	r0, #2
 8002618:	d9f6      	bls.n	8002608 <HAL_RCC_OscConfig+0x250>
          return HAL_TIMEOUT;
 800261a:	2003      	movs	r0, #3
 800261c:	e0d7      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
    FlagStatus       pwrclkchanged = RESET;
 800261e:	2500      	movs	r5, #0
 8002620:	e7d3      	b.n	80025ca <HAL_RCC_OscConfig+0x212>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002622:	4a0e      	ldr	r2, [pc, #56]	@ (800265c <HAL_RCC_OscConfig+0x2a4>)
 8002624:	6813      	ldr	r3, [r2, #0]
 8002626:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800262a:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 800262c:	f7ff f8f2 	bl	8001814 <HAL_GetTick>
 8002630:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002632:	4f0a      	ldr	r7, [pc, #40]	@ (800265c <HAL_RCC_OscConfig+0x2a4>)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	f413 7f80 	tst.w	r3, #256	@ 0x100
 800263a:	d1cb      	bne.n	80025d4 <HAL_RCC_OscConfig+0x21c>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800263c:	f7ff f8ea 	bl	8001814 <HAL_GetTick>
 8002640:	1b80      	subs	r0, r0, r6
 8002642:	2864      	cmp	r0, #100	@ 0x64
 8002644:	d9f6      	bls.n	8002634 <HAL_RCC_OscConfig+0x27c>
          return HAL_TIMEOUT;
 8002646:	2003      	movs	r0, #3
 8002648:	e0c1      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
 800264a:	bf00      	nop
 800264c:	40021000 	.word	0x40021000
 8002650:	42420000 	.word	0x42420000
 8002654:	20000000 	.word	0x20000000
 8002658:	10624dd3 	.word	0x10624dd3
 800265c:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002660:	4a5e      	ldr	r2, [pc, #376]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 8002662:	6a13      	ldr	r3, [r2, #32]
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	6213      	str	r3, [r2, #32]
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800266a:	68e3      	ldr	r3, [r4, #12]
 800266c:	b333      	cbz	r3, 80026bc <HAL_RCC_OscConfig+0x304>
      tickstart = HAL_GetTick();
 800266e:	f7ff f8d1 	bl	8001814 <HAL_GetTick>
 8002672:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002674:	4f59      	ldr	r7, [pc, #356]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002676:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	f013 0f02 	tst.w	r3, #2
 8002680:	d12d      	bne.n	80026de <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002682:	f7ff f8c7 	bl	8001814 <HAL_GetTick>
 8002686:	1b80      	subs	r0, r0, r6
 8002688:	4540      	cmp	r0, r8
 800268a:	d9f6      	bls.n	800267a <HAL_RCC_OscConfig+0x2c2>
          return HAL_TIMEOUT;
 800268c:	2003      	movs	r0, #3
 800268e:	e09e      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002690:	2b05      	cmp	r3, #5
 8002692:	d009      	beq.n	80026a8 <HAL_RCC_OscConfig+0x2f0>
 8002694:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 8002696:	6a1a      	ldr	r2, [r3, #32]
 8002698:	f022 0201 	bic.w	r2, r2, #1
 800269c:	621a      	str	r2, [r3, #32]
 800269e:	6a1a      	ldr	r2, [r3, #32]
 80026a0:	f022 0204 	bic.w	r2, r2, #4
 80026a4:	621a      	str	r2, [r3, #32]
 80026a6:	e7e0      	b.n	800266a <HAL_RCC_OscConfig+0x2b2>
 80026a8:	4b4c      	ldr	r3, [pc, #304]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 80026aa:	6a1a      	ldr	r2, [r3, #32]
 80026ac:	f042 0204 	orr.w	r2, r2, #4
 80026b0:	621a      	str	r2, [r3, #32]
 80026b2:	6a1a      	ldr	r2, [r3, #32]
 80026b4:	f042 0201 	orr.w	r2, r2, #1
 80026b8:	621a      	str	r2, [r3, #32]
 80026ba:	e7d6      	b.n	800266a <HAL_RCC_OscConfig+0x2b2>
      tickstart = HAL_GetTick();
 80026bc:	f7ff f8aa 	bl	8001814 <HAL_GetTick>
 80026c0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c2:	4f46      	ldr	r7, [pc, #280]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026c4:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	f013 0f02 	tst.w	r3, #2
 80026ce:	d006      	beq.n	80026de <HAL_RCC_OscConfig+0x326>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026d0:	f7ff f8a0 	bl	8001814 <HAL_GetTick>
 80026d4:	1b80      	subs	r0, r0, r6
 80026d6:	4540      	cmp	r0, r8
 80026d8:	d9f6      	bls.n	80026c8 <HAL_RCC_OscConfig+0x310>
          return HAL_TIMEOUT;
 80026da:	2003      	movs	r0, #3
 80026dc:	e077      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
    if (pwrclkchanged == SET)
 80026de:	b9e5      	cbnz	r5, 800271a <HAL_RCC_OscConfig+0x362>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026e0:	69e3      	ldr	r3, [r4, #28]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d072      	beq.n	80027cc <HAL_RCC_OscConfig+0x414>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026e6:	4a3d      	ldr	r2, [pc, #244]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 80026e8:	6852      	ldr	r2, [r2, #4]
 80026ea:	f002 020c 	and.w	r2, r2, #12
 80026ee:	2a08      	cmp	r2, #8
 80026f0:	d056      	beq.n	80027a0 <HAL_RCC_OscConfig+0x3e8>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d017      	beq.n	8002726 <HAL_RCC_OscConfig+0x36e>
        __HAL_RCC_PLL_DISABLE();
 80026f6:	4b3a      	ldr	r3, [pc, #232]	@ (80027e0 <HAL_RCC_OscConfig+0x428>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80026fc:	f7ff f88a 	bl	8001814 <HAL_GetTick>
 8002700:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002702:	4d36      	ldr	r5, [pc, #216]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800270a:	d047      	beq.n	800279c <HAL_RCC_OscConfig+0x3e4>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800270c:	f7ff f882 	bl	8001814 <HAL_GetTick>
 8002710:	1b00      	subs	r0, r0, r4
 8002712:	2802      	cmp	r0, #2
 8002714:	d9f6      	bls.n	8002704 <HAL_RCC_OscConfig+0x34c>
            return HAL_TIMEOUT;
 8002716:	2003      	movs	r0, #3
 8002718:	e059      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
      __HAL_RCC_PWR_CLK_DISABLE();
 800271a:	4a30      	ldr	r2, [pc, #192]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 800271c:	69d3      	ldr	r3, [r2, #28]
 800271e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002722:	61d3      	str	r3, [r2, #28]
 8002724:	e7dc      	b.n	80026e0 <HAL_RCC_OscConfig+0x328>
        __HAL_RCC_PLL_DISABLE();
 8002726:	4b2e      	ldr	r3, [pc, #184]	@ (80027e0 <HAL_RCC_OscConfig+0x428>)
 8002728:	2200      	movs	r2, #0
 800272a:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800272c:	f7ff f872 	bl	8001814 <HAL_GetTick>
 8002730:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002732:	4e2a      	ldr	r6, [pc, #168]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 8002734:	6833      	ldr	r3, [r6, #0]
 8002736:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 800273a:	d006      	beq.n	800274a <HAL_RCC_OscConfig+0x392>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff f86a 	bl	8001814 <HAL_GetTick>
 8002740:	1b40      	subs	r0, r0, r5
 8002742:	2802      	cmp	r0, #2
 8002744:	d9f6      	bls.n	8002734 <HAL_RCC_OscConfig+0x37c>
            return HAL_TIMEOUT;
 8002746:	2003      	movs	r0, #3
 8002748:	e041      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800274a:	6a23      	ldr	r3, [r4, #32]
 800274c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002750:	d01a      	beq.n	8002788 <HAL_RCC_OscConfig+0x3d0>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002752:	4922      	ldr	r1, [pc, #136]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 8002754:	684a      	ldr	r2, [r1, #4]
 8002756:	6a23      	ldr	r3, [r4, #32]
 8002758:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800275a:	4303      	orrs	r3, r0
 800275c:	f422 1274 	bic.w	r2, r2, #3997696	@ 0x3d0000
 8002760:	4313      	orrs	r3, r2
 8002762:	604b      	str	r3, [r1, #4]
        __HAL_RCC_PLL_ENABLE();
 8002764:	4b1e      	ldr	r3, [pc, #120]	@ (80027e0 <HAL_RCC_OscConfig+0x428>)
 8002766:	2201      	movs	r2, #1
 8002768:	661a      	str	r2, [r3, #96]	@ 0x60
        tickstart = HAL_GetTick();
 800276a:	f7ff f853 	bl	8001814 <HAL_GetTick>
 800276e:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002770:	4d1a      	ldr	r5, [pc, #104]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 8002772:	682b      	ldr	r3, [r5, #0]
 8002774:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002778:	d10e      	bne.n	8002798 <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800277a:	f7ff f84b 	bl	8001814 <HAL_GetTick>
 800277e:	1b00      	subs	r0, r0, r4
 8002780:	2802      	cmp	r0, #2
 8002782:	d9f6      	bls.n	8002772 <HAL_RCC_OscConfig+0x3ba>
            return HAL_TIMEOUT;
 8002784:	2003      	movs	r0, #3
 8002786:	e022      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002788:	4a14      	ldr	r2, [pc, #80]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 800278a:	6853      	ldr	r3, [r2, #4]
 800278c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8002790:	68a1      	ldr	r1, [r4, #8]
 8002792:	430b      	orrs	r3, r1
 8002794:	6053      	str	r3, [r2, #4]
 8002796:	e7dc      	b.n	8002752 <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8002798:	2000      	movs	r0, #0
 800279a:	e018      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
 800279c:	2000      	movs	r0, #0
 800279e:	e016      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d017      	beq.n	80027d4 <HAL_RCC_OscConfig+0x41c>
        pll_config = RCC->CFGR;
 80027a4:	4b0d      	ldr	r3, [pc, #52]	@ (80027dc <HAL_RCC_OscConfig+0x424>)
 80027a6:	685b      	ldr	r3, [r3, #4]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027a8:	f403 3180 	and.w	r1, r3, #65536	@ 0x10000
 80027ac:	6a22      	ldr	r2, [r4, #32]
 80027ae:	4291      	cmp	r1, r2
 80027b0:	d112      	bne.n	80027d8 <HAL_RCC_OscConfig+0x420>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027b2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b6:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80027b8:	1a18      	subs	r0, r3, r0
 80027ba:	bf18      	it	ne
 80027bc:	2001      	movne	r0, #1
 80027be:	e006      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
    return HAL_ERROR;
 80027c0:	2001      	movs	r0, #1
}
 80027c2:	4770      	bx	lr
        return HAL_ERROR;
 80027c4:	2001      	movs	r0, #1
 80027c6:	e002      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
        return HAL_ERROR;
 80027c8:	2001      	movs	r0, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
  return HAL_OK;
 80027cc:	2000      	movs	r0, #0
}
 80027ce:	b002      	add	sp, #8
 80027d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return HAL_ERROR;
 80027d4:	2001      	movs	r0, #1
 80027d6:	e7fa      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
          return HAL_ERROR;
 80027d8:	2001      	movs	r0, #1
 80027da:	e7f8      	b.n	80027ce <HAL_RCC_OscConfig+0x416>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	42420000 	.word	0x42420000

080027e4 <HAL_RCC_EnableCSS>:
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80027e4:	4b01      	ldr	r3, [pc, #4]	@ (80027ec <HAL_RCC_EnableCSS+0x8>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80027ea:	4770      	bx	lr
 80027ec:	42420000 	.word	0x42420000

080027f0 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 80027f0:	4b0f      	ldr	r3, [pc, #60]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x40>)
 80027f2:	685b      	ldr	r3, [r3, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80027f4:	f003 020c 	and.w	r2, r3, #12
 80027f8:	2a08      	cmp	r2, #8
 80027fa:	d001      	beq.n	8002800 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 80027fc:	480d      	ldr	r0, [pc, #52]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x44>)
}
 80027fe:	4770      	bx	lr
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002800:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8002804:	490c      	ldr	r1, [pc, #48]	@ (8002838 <HAL_RCC_GetSysClockFreq+0x48>)
 8002806:	5c88      	ldrb	r0, [r1, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002808:	f413 3f80 	tst.w	r3, #65536	@ 0x10000
 800280c:	d00b      	beq.n	8002826 <HAL_RCC_GetSysClockFreq+0x36>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800280e:	4b08      	ldr	r3, [pc, #32]	@ (8002830 <HAL_RCC_GetSysClockFreq+0x40>)
 8002810:	685b      	ldr	r3, [r3, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002812:	4a08      	ldr	r2, [pc, #32]	@ (8002834 <HAL_RCC_GetSysClockFreq+0x44>)
 8002814:	fb02 f000 	mul.w	r0, r2, r0
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002818:	f3c3 4340 	ubfx	r3, r3, #17, #1
 800281c:	4a07      	ldr	r2, [pc, #28]	@ (800283c <HAL_RCC_GetSysClockFreq+0x4c>)
 800281e:	5cd3      	ldrb	r3, [r2, r3]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002820:	fbb0 f0f3 	udiv	r0, r0, r3
 8002824:	4770      	bx	lr
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002826:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_RCC_GetSysClockFreq+0x50>)
 8002828:	fb03 f000 	mul.w	r0, r3, r0
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	40021000 	.word	0x40021000
 8002834:	007a1200 	.word	0x007a1200
 8002838:	080079c8 	.word	0x080079c8
 800283c:	080079c4 	.word	0x080079c4
 8002840:	003d0900 	.word	0x003d0900

08002844 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8002844:	2800      	cmp	r0, #0
 8002846:	f000 80a2 	beq.w	800298e <HAL_RCC_ClockConfig+0x14a>
{
 800284a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800284e:	460d      	mov	r5, r1
 8002850:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002852:	4b53      	ldr	r3, [pc, #332]	@ (80029a0 <HAL_RCC_ClockConfig+0x15c>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	428b      	cmp	r3, r1
 800285c:	d20b      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x32>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285e:	4a50      	ldr	r2, [pc, #320]	@ (80029a0 <HAL_RCC_ClockConfig+0x15c>)
 8002860:	6813      	ldr	r3, [r2, #0]
 8002862:	f023 0307 	bic.w	r3, r3, #7
 8002866:	430b      	orrs	r3, r1
 8002868:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800286a:	6813      	ldr	r3, [r2, #0]
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	428b      	cmp	r3, r1
 8002872:	f040 808e 	bne.w	8002992 <HAL_RCC_ClockConfig+0x14e>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002876:	6823      	ldr	r3, [r4, #0]
 8002878:	f013 0f02 	tst.w	r3, #2
 800287c:	d017      	beq.n	80028ae <HAL_RCC_ClockConfig+0x6a>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800287e:	f013 0f04 	tst.w	r3, #4
 8002882:	d004      	beq.n	800288e <HAL_RCC_ClockConfig+0x4a>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002884:	4a47      	ldr	r2, [pc, #284]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 8002886:	6853      	ldr	r3, [r2, #4]
 8002888:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800288c:	6053      	str	r3, [r2, #4]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	f013 0f08 	tst.w	r3, #8
 8002894:	d004      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x5c>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002896:	4a43      	ldr	r2, [pc, #268]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 8002898:	6853      	ldr	r3, [r2, #4]
 800289a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800289e:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a0:	4a40      	ldr	r2, [pc, #256]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 80028a2:	6853      	ldr	r3, [r2, #4]
 80028a4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80028a8:	68a1      	ldr	r1, [r4, #8]
 80028aa:	430b      	orrs	r3, r1
 80028ac:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028ae:	6823      	ldr	r3, [r4, #0]
 80028b0:	f013 0f01 	tst.w	r3, #1
 80028b4:	d031      	beq.n	800291a <HAL_RCC_ClockConfig+0xd6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028b6:	6862      	ldr	r2, [r4, #4]
 80028b8:	2a01      	cmp	r2, #1
 80028ba:	d020      	beq.n	80028fe <HAL_RCC_ClockConfig+0xba>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028bc:	2a02      	cmp	r2, #2
 80028be:	d025      	beq.n	800290c <HAL_RCC_ClockConfig+0xc8>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c0:	4b38      	ldr	r3, [pc, #224]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f013 0f02 	tst.w	r3, #2
 80028c8:	d065      	beq.n	8002996 <HAL_RCC_ClockConfig+0x152>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ca:	4936      	ldr	r1, [pc, #216]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 80028cc:	684b      	ldr	r3, [r1, #4]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	4313      	orrs	r3, r2
 80028d4:	604b      	str	r3, [r1, #4]
    tickstart = HAL_GetTick();
 80028d6:	f7fe ff9d 	bl	8001814 <HAL_GetTick>
 80028da:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028dc:	4f31      	ldr	r7, [pc, #196]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028de:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f003 030c 	and.w	r3, r3, #12
 80028e8:	6862      	ldr	r2, [r4, #4]
 80028ea:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80028ee:	d014      	beq.n	800291a <HAL_RCC_ClockConfig+0xd6>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe ff90 	bl	8001814 <HAL_GetTick>
 80028f4:	1b80      	subs	r0, r0, r6
 80028f6:	4540      	cmp	r0, r8
 80028f8:	d9f3      	bls.n	80028e2 <HAL_RCC_ClockConfig+0x9e>
        return HAL_TIMEOUT;
 80028fa:	2003      	movs	r0, #3
 80028fc:	e045      	b.n	800298a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028fe:	4b29      	ldr	r3, [pc, #164]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f413 3f00 	tst.w	r3, #131072	@ 0x20000
 8002906:	d1e0      	bne.n	80028ca <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002908:	2001      	movs	r0, #1
 800290a:	e03e      	b.n	800298a <HAL_RCC_ClockConfig+0x146>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800290c:	4b25      	ldr	r3, [pc, #148]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f013 7f00 	tst.w	r3, #33554432	@ 0x2000000
 8002914:	d1d9      	bne.n	80028ca <HAL_RCC_ClockConfig+0x86>
        return HAL_ERROR;
 8002916:	2001      	movs	r0, #1
 8002918:	e037      	b.n	800298a <HAL_RCC_ClockConfig+0x146>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800291a:	4b21      	ldr	r3, [pc, #132]	@ (80029a0 <HAL_RCC_ClockConfig+0x15c>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	42ab      	cmp	r3, r5
 8002924:	d90a      	bls.n	800293c <HAL_RCC_ClockConfig+0xf8>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4a1e      	ldr	r2, [pc, #120]	@ (80029a0 <HAL_RCC_ClockConfig+0x15c>)
 8002928:	6813      	ldr	r3, [r2, #0]
 800292a:	f023 0307 	bic.w	r3, r3, #7
 800292e:	432b      	orrs	r3, r5
 8002930:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002932:	6813      	ldr	r3, [r2, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
 8002938:	42ab      	cmp	r3, r5
 800293a:	d12e      	bne.n	800299a <HAL_RCC_ClockConfig+0x156>
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800293c:	6823      	ldr	r3, [r4, #0]
 800293e:	f013 0f04 	tst.w	r3, #4
 8002942:	d006      	beq.n	8002952 <HAL_RCC_ClockConfig+0x10e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002944:	4a17      	ldr	r2, [pc, #92]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 8002946:	6853      	ldr	r3, [r2, #4]
 8002948:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800294c:	68e1      	ldr	r1, [r4, #12]
 800294e:	430b      	orrs	r3, r1
 8002950:	6053      	str	r3, [r2, #4]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002952:	6823      	ldr	r3, [r4, #0]
 8002954:	f013 0f08 	tst.w	r3, #8
 8002958:	d007      	beq.n	800296a <HAL_RCC_ClockConfig+0x126>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800295a:	4a12      	ldr	r2, [pc, #72]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 800295c:	6853      	ldr	r3, [r2, #4]
 800295e:	6921      	ldr	r1, [r4, #16]
 8002960:	f423 5360 	bic.w	r3, r3, #14336	@ 0x3800
 8002964:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002968:	6053      	str	r3, [r2, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800296a:	f7ff ff41 	bl	80027f0 <HAL_RCC_GetSysClockFreq>
 800296e:	4b0d      	ldr	r3, [pc, #52]	@ (80029a4 <HAL_RCC_ClockConfig+0x160>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002976:	4a0c      	ldr	r2, [pc, #48]	@ (80029a8 <HAL_RCC_ClockConfig+0x164>)
 8002978:	5cd3      	ldrb	r3, [r2, r3]
 800297a:	40d8      	lsrs	r0, r3
 800297c:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <HAL_RCC_ClockConfig+0x168>)
 800297e:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8002980:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_ClockConfig+0x16c>)
 8002982:	6818      	ldr	r0, [r3, #0]
 8002984:	f7fe ff02 	bl	800178c <HAL_InitTick>
  return HAL_OK;
 8002988:	2000      	movs	r0, #0
}
 800298a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 800298e:	2001      	movs	r0, #1
}
 8002990:	4770      	bx	lr
    return HAL_ERROR;
 8002992:	2001      	movs	r0, #1
 8002994:	e7f9      	b.n	800298a <HAL_RCC_ClockConfig+0x146>
        return HAL_ERROR;
 8002996:	2001      	movs	r0, #1
 8002998:	e7f7      	b.n	800298a <HAL_RCC_ClockConfig+0x146>
    return HAL_ERROR;
 800299a:	2001      	movs	r0, #1
 800299c:	e7f5      	b.n	800298a <HAL_RCC_ClockConfig+0x146>
 800299e:	bf00      	nop
 80029a0:	40022000 	.word	0x40022000
 80029a4:	40021000 	.word	0x40021000
 80029a8:	080079b4 	.word	0x080079b4
 80029ac:	20000000 	.word	0x20000000
 80029b0:	20000008 	.word	0x20000008

080029b4 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029b4:	4b04      	ldr	r3, [pc, #16]	@ (80029c8 <HAL_RCC_GetPCLK1Freq+0x14>)
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f3c3 2302 	ubfx	r3, r3, #8, #3
 80029bc:	4a03      	ldr	r2, [pc, #12]	@ (80029cc <HAL_RCC_GetPCLK1Freq+0x18>)
 80029be:	5cd3      	ldrb	r3, [r2, r3]
 80029c0:	4a03      	ldr	r2, [pc, #12]	@ (80029d0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80029c2:	6810      	ldr	r0, [r2, #0]
}
 80029c4:	40d8      	lsrs	r0, r3
 80029c6:	4770      	bx	lr
 80029c8:	40021000 	.word	0x40021000
 80029cc:	080079ac 	.word	0x080079ac
 80029d0:	20000000 	.word	0x20000000

080029d4 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029d4:	4b04      	ldr	r3, [pc, #16]	@ (80029e8 <HAL_RCC_GetPCLK2Freq+0x14>)
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 80029dc:	4a03      	ldr	r2, [pc, #12]	@ (80029ec <HAL_RCC_GetPCLK2Freq+0x18>)
 80029de:	5cd3      	ldrb	r3, [r2, r3]
 80029e0:	4a03      	ldr	r2, [pc, #12]	@ (80029f0 <HAL_RCC_GetPCLK2Freq+0x1c>)
 80029e2:	6810      	ldr	r0, [r2, #0]
}
 80029e4:	40d8      	lsrs	r0, r3
 80029e6:	4770      	bx	lr
 80029e8:	40021000 	.word	0x40021000
 80029ec:	080079ac 	.word	0x080079ac
 80029f0:	20000000 	.word	0x20000000

080029f4 <HAL_RCC_CSSCallback>:
__weak void HAL_RCC_CSSCallback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 80029f4:	4770      	bx	lr
	...

080029f8 <HAL_RCC_NMI_IRQHandler>:
{
 80029f8:	b508      	push	{r3, lr}
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80029fa:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_RCC_NMI_IRQHandler+0x1c>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002a02:	d100      	bne.n	8002a06 <HAL_RCC_NMI_IRQHandler+0xe>
}
 8002a04:	bd08      	pop	{r3, pc}
    HAL_RCC_CSSCallback();
 8002a06:	f7ff fff5 	bl	80029f4 <HAL_RCC_CSSCallback>
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8002a0a:	4b02      	ldr	r3, [pc, #8]	@ (8002a14 <HAL_RCC_NMI_IRQHandler+0x1c>)
 8002a0c:	2280      	movs	r2, #128	@ 0x80
 8002a0e:	729a      	strb	r2, [r3, #10]
}
 8002a10:	e7f8      	b.n	8002a04 <HAL_RCC_NMI_IRQHandler+0xc>
 8002a12:	bf00      	nop
 8002a14:	40021000 	.word	0x40021000

08002a18 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a1c:	b082      	sub	sp, #8
 8002a1e:	4604      	mov	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002a20:	6803      	ldr	r3, [r0, #0]
 8002a22:	f013 0f01 	tst.w	r3, #1
 8002a26:	d036      	beq.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a28:	4b3f      	ldr	r3, [pc, #252]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a2a:	69db      	ldr	r3, [r3, #28]
 8002a2c:	f013 5f80 	tst.w	r3, #268435456	@ 0x10000000
 8002a30:	d149      	bne.n	8002ac6 <HAL_RCCEx_PeriphCLKConfig+0xae>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a32:	4b3d      	ldr	r3, [pc, #244]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a34:	69da      	ldr	r2, [r3, #28]
 8002a36:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8002a3a:	61da      	str	r2, [r3, #28]
 8002a3c:	69db      	ldr	r3, [r3, #28]
 8002a3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002a46:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a48:	4b38      	ldr	r3, [pc, #224]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002a50:	d03b      	beq.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002a52:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a54:	6a1b      	ldr	r3, [r3, #32]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002a56:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
 8002a5a:	d013      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 8002a5c:	6862      	ldr	r2, [r4, #4]
 8002a5e:	f402 7240 	and.w	r2, r2, #768	@ 0x300
 8002a62:	429a      	cmp	r2, r3
 8002a64:	d00e      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x6c>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002a66:	4a30      	ldr	r2, [pc, #192]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a68:	6a13      	ldr	r3, [r2, #32]
 8002a6a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002a6e:	4930      	ldr	r1, [pc, #192]	@ (8002b30 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8002a70:	2601      	movs	r6, #1
 8002a72:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a76:	2600      	movs	r6, #0
 8002a78:	f8c1 6440 	str.w	r6, [r1, #1088]	@ 0x440
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a7c:	6210      	str	r0, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a7e:	f013 0f01 	tst.w	r3, #1
 8002a82:	d136      	bne.n	8002af2 <HAL_RCCEx_PeriphCLKConfig+0xda>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a84:	4a28      	ldr	r2, [pc, #160]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002a86:	6a13      	ldr	r3, [r2, #32]
 8002a88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a8c:	6861      	ldr	r1, [r4, #4]
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a92:	2d00      	cmp	r5, #0
 8002a94:	d13e      	bne.n	8002b14 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a96:	6823      	ldr	r3, [r4, #0]
 8002a98:	f013 0f02 	tst.w	r3, #2
 8002a9c:	d006      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a9e:	4a22      	ldr	r2, [pc, #136]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002aa0:	6853      	ldr	r3, [r2, #4]
 8002aa2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002aa6:	68a1      	ldr	r1, [r4, #8]
 8002aa8:	430b      	orrs	r3, r1
 8002aaa:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002aac:	6823      	ldr	r3, [r4, #0]
 8002aae:	f013 0f10 	tst.w	r3, #16
 8002ab2:	d034      	beq.n	8002b1e <HAL_RCCEx_PeriphCLKConfig+0x106>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ab4:	4a1c      	ldr	r2, [pc, #112]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
 8002ab6:	6853      	ldr	r3, [r2, #4]
 8002ab8:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8002abc:	68e1      	ldr	r1, [r4, #12]
 8002abe:	430b      	orrs	r3, r1
 8002ac0:	6053      	str	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002ac2:	2000      	movs	r0, #0
 8002ac4:	e02c      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
    FlagStatus pwrclkchanged = RESET;
 8002ac6:	2500      	movs	r5, #0
 8002ac8:	e7be      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x30>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aca:	4a18      	ldr	r2, [pc, #96]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002acc:	6813      	ldr	r3, [r2, #0]
 8002ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ad2:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8002ad4:	f7fe fe9e 	bl	8001814 <HAL_GetTick>
 8002ad8:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ada:	4f14      	ldr	r7, [pc, #80]	@ (8002b2c <HAL_RCCEx_PeriphCLKConfig+0x114>)
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8002ae2:	d1b6      	bne.n	8002a52 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae4:	f7fe fe96 	bl	8001814 <HAL_GetTick>
 8002ae8:	1b80      	subs	r0, r0, r6
 8002aea:	2864      	cmp	r0, #100	@ 0x64
 8002aec:	d9f6      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0xc4>
          return HAL_TIMEOUT;
 8002aee:	2003      	movs	r0, #3
 8002af0:	e016      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
        tickstart = HAL_GetTick();
 8002af2:	f7fe fe8f 	bl	8001814 <HAL_GetTick>
 8002af6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002af8:	4f0b      	ldr	r7, [pc, #44]	@ (8002b28 <HAL_RCCEx_PeriphCLKConfig+0x110>)
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002afa:	f241 3888 	movw	r8, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f013 0f02 	tst.w	r3, #2
 8002b04:	d1be      	bne.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b06:	f7fe fe85 	bl	8001814 <HAL_GetTick>
 8002b0a:	1b80      	subs	r0, r0, r6
 8002b0c:	4540      	cmp	r0, r8
 8002b0e:	d9f6      	bls.n	8002afe <HAL_RCCEx_PeriphCLKConfig+0xe6>
            return HAL_TIMEOUT;
 8002b10:	2003      	movs	r0, #3
 8002b12:	e005      	b.n	8002b20 <HAL_RCCEx_PeriphCLKConfig+0x108>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b14:	69d3      	ldr	r3, [r2, #28]
 8002b16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b1a:	61d3      	str	r3, [r2, #28]
 8002b1c:	e7bb      	b.n	8002a96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
  return HAL_OK;
 8002b1e:	2000      	movs	r0, #0
}
 8002b20:	b002      	add	sp, #8
 8002b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b26:	bf00      	nop
 8002b28:	40021000 	.word	0x40021000
 8002b2c:	40007000 	.word	0x40007000
 8002b30:	42420000 	.word	0x42420000

08002b34 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002b34:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b36:	f102 030c 	add.w	r3, r2, #12
 8002b3a:	e853 3f00 	ldrex	r3, [r3]
 8002b3e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b42:	320c      	adds	r2, #12
 8002b44:	e842 3100 	strex	r1, r3, [r2]
 8002b48:	2900      	cmp	r1, #0
 8002b4a:	d1f3      	bne.n	8002b34 <UART_EndRxTransfer>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b4c:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b4e:	f102 0314 	add.w	r3, r2, #20
 8002b52:	e853 3f00 	ldrex	r3, [r3]
 8002b56:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b5a:	3214      	adds	r2, #20
 8002b5c:	e842 3100 	strex	r1, r3, [r2]
 8002b60:	2900      	cmp	r1, #0
 8002b62:	d1f3      	bne.n	8002b4c <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b64:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d005      	beq.n	8002b76 <UART_EndRxTransfer+0x42>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002b6a:	2320      	movs	r3, #32
 8002b6c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b70:	2300      	movs	r3, #0
 8002b72:	6303      	str	r3, [r0, #48]	@ 0x30
}
 8002b74:	4770      	bx	lr
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b76:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b78:	f102 030c 	add.w	r3, r2, #12
 8002b7c:	e853 3f00 	ldrex	r3, [r3]
 8002b80:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b84:	320c      	adds	r2, #12
 8002b86:	e842 3100 	strex	r1, r3, [r2]
 8002b8a:	2900      	cmp	r1, #0
 8002b8c:	d1f3      	bne.n	8002b76 <UART_EndRxTransfer+0x42>
 8002b8e:	e7ec      	b.n	8002b6a <UART_EndRxTransfer+0x36>

08002b90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b90:	b510      	push	{r4, lr}
 8002b92:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b94:	6802      	ldr	r2, [r0, #0]
 8002b96:	6913      	ldr	r3, [r2, #16]
 8002b98:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b9c:	68c1      	ldr	r1, [r0, #12]
 8002b9e:	430b      	orrs	r3, r1
 8002ba0:	6113      	str	r3, [r2, #16]
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
  MODIFY_REG(huart->Instance->CR1,
 8002ba2:	6801      	ldr	r1, [r0, #0]
 8002ba4:	68ca      	ldr	r2, [r1, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ba6:	6883      	ldr	r3, [r0, #8]
 8002ba8:	6900      	ldr	r0, [r0, #16]
 8002baa:	4303      	orrs	r3, r0
 8002bac:	6960      	ldr	r0, [r4, #20]
 8002bae:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8002bb0:	f422 52b0 	bic.w	r2, r2, #5632	@ 0x1600
 8002bb4:	f022 020c 	bic.w	r2, r2, #12
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	60cb      	str	r3, [r1, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	6953      	ldr	r3, [r2, #20]
 8002bc0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bc4:	69a1      	ldr	r1, [r4, #24]
 8002bc6:	430b      	orrs	r3, r1
 8002bc8:	6153      	str	r3, [r2, #20]


  if(huart->Instance == USART1)
 8002bca:	6822      	ldr	r2, [r4, #0]
 8002bcc:	4b11      	ldr	r3, [pc, #68]	@ (8002c14 <UART_SetConfig+0x84>)
 8002bce:	429a      	cmp	r2, r3
 8002bd0:	d01b      	beq.n	8002c0a <UART_SetConfig+0x7a>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bd2:	f7ff feef 	bl	80029b4 <HAL_RCC_GetPCLK1Freq>
 8002bd6:	4603      	mov	r3, r0
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bd8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002bdc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002be0:	6862      	ldr	r2, [r4, #4]
 8002be2:	0092      	lsls	r2, r2, #2
 8002be4:	fbb3 f3f2 	udiv	r3, r3, r2
 8002be8:	6820      	ldr	r0, [r4, #0]
 8002bea:	490b      	ldr	r1, [pc, #44]	@ (8002c18 <UART_SetConfig+0x88>)
 8002bec:	fba1 4203 	umull	r4, r2, r1, r3
 8002bf0:	0952      	lsrs	r2, r2, #5
 8002bf2:	2464      	movs	r4, #100	@ 0x64
 8002bf4:	fb04 3312 	mls	r3, r4, r2, r3
 8002bf8:	011b      	lsls	r3, r3, #4
 8002bfa:	3332      	adds	r3, #50	@ 0x32
 8002bfc:	fba1 1303 	umull	r1, r3, r1, r3
 8002c00:	0112      	lsls	r2, r2, #4
 8002c02:	eb02 1253 	add.w	r2, r2, r3, lsr #5
 8002c06:	6082      	str	r2, [r0, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c08:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK2Freq();
 8002c0a:	f7ff fee3 	bl	80029d4 <HAL_RCC_GetPCLK2Freq>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	e7e2      	b.n	8002bd8 <UART_SetConfig+0x48>
 8002c12:	bf00      	nop
 8002c14:	40013800 	.word	0x40013800
 8002c18:	51eb851f 	.word	0x51eb851f

08002c1c <UART_WaitOnFlagUntilTimeout>:
{
 8002c1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002c20:	4680      	mov	r8, r0
 8002c22:	460e      	mov	r6, r1
 8002c24:	4615      	mov	r5, r2
 8002c26:	4699      	mov	r9, r3
 8002c28:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2a:	f8d8 3000 	ldr.w	r3, [r8]
 8002c2e:	681c      	ldr	r4, [r3, #0]
 8002c30:	ea36 0404 	bics.w	r4, r6, r4
 8002c34:	bf0c      	ite	eq
 8002c36:	2401      	moveq	r4, #1
 8002c38:	2400      	movne	r4, #0
 8002c3a:	42ac      	cmp	r4, r5
 8002c3c:	d12d      	bne.n	8002c9a <UART_WaitOnFlagUntilTimeout+0x7e>
    if (Timeout != HAL_MAX_DELAY)
 8002c3e:	f1b7 3fff 	cmp.w	r7, #4294967295
 8002c42:	d0f4      	beq.n	8002c2e <UART_WaitOnFlagUntilTimeout+0x12>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002c44:	b12f      	cbz	r7, 8002c52 <UART_WaitOnFlagUntilTimeout+0x36>
 8002c46:	f7fe fde5 	bl	8001814 <HAL_GetTick>
 8002c4a:	eba0 0009 	sub.w	r0, r0, r9
 8002c4e:	42b8      	cmp	r0, r7
 8002c50:	d9eb      	bls.n	8002c2a <UART_WaitOnFlagUntilTimeout+0xe>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c52:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c56:	f102 030c 	add.w	r3, r2, #12
 8002c5a:	e853 3f00 	ldrex	r3, [r3]
 8002c5e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c62:	320c      	adds	r2, #12
 8002c64:	e842 3100 	strex	r1, r3, [r2]
 8002c68:	2900      	cmp	r1, #0
 8002c6a:	d1f2      	bne.n	8002c52 <UART_WaitOnFlagUntilTimeout+0x36>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c6c:	f8d8 2000 	ldr.w	r2, [r8]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c70:	f102 0314 	add.w	r3, r2, #20
 8002c74:	e853 3f00 	ldrex	r3, [r3]
 8002c78:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c7c:	3214      	adds	r2, #20
 8002c7e:	e842 3100 	strex	r1, r3, [r2]
 8002c82:	2900      	cmp	r1, #0
 8002c84:	d1f2      	bne.n	8002c6c <UART_WaitOnFlagUntilTimeout+0x50>
        huart->gState  = HAL_UART_STATE_READY;
 8002c86:	2320      	movs	r3, #32
 8002c88:	f888 3041 	strb.w	r3, [r8, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8002c8c:	f888 3042 	strb.w	r3, [r8, #66]	@ 0x42
        __HAL_UNLOCK(huart);
 8002c90:	2300      	movs	r3, #0
 8002c92:	f888 3040 	strb.w	r3, [r8, #64]	@ 0x40
        return HAL_TIMEOUT;
 8002c96:	2003      	movs	r0, #3
 8002c98:	e000      	b.n	8002c9c <UART_WaitOnFlagUntilTimeout+0x80>
  return HAL_OK;
 8002c9a:	2000      	movs	r0, #0
}
 8002c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08002ca0 <HAL_UART_Init>:
  if (huart == NULL)
 8002ca0:	b360      	cbz	r0, 8002cfc <HAL_UART_Init+0x5c>
{
 8002ca2:	b510      	push	{r4, lr}
 8002ca4:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_RESET)
 8002ca6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002caa:	b313      	cbz	r3, 8002cf2 <HAL_UART_Init+0x52>
  huart->gState = HAL_UART_STATE_BUSY;
 8002cac:	2324      	movs	r3, #36	@ 0x24
 8002cae:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8002cb2:	6822      	ldr	r2, [r4, #0]
 8002cb4:	68d3      	ldr	r3, [r2, #12]
 8002cb6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002cba:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8002cbc:	4620      	mov	r0, r4
 8002cbe:	f7ff ff67 	bl	8002b90 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cc2:	6822      	ldr	r2, [r4, #0]
 8002cc4:	6913      	ldr	r3, [r2, #16]
 8002cc6:	f423 4390 	bic.w	r3, r3, #18432	@ 0x4800
 8002cca:	6113      	str	r3, [r2, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ccc:	6822      	ldr	r2, [r4, #0]
 8002cce:	6953      	ldr	r3, [r2, #20]
 8002cd0:	f023 032a 	bic.w	r3, r3, #42	@ 0x2a
 8002cd4:	6153      	str	r3, [r2, #20]
  __HAL_UART_ENABLE(huart);
 8002cd6:	6822      	ldr	r2, [r4, #0]
 8002cd8:	68d3      	ldr	r3, [r2, #12]
 8002cda:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cde:	60d3      	str	r3, [r2, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ce0:	2000      	movs	r0, #0
 8002ce2:	6460      	str	r0, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002ce4:	2320      	movs	r3, #32
 8002ce6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cea:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cee:	6360      	str	r0, [r4, #52]	@ 0x34
}
 8002cf0:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8002cf2:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8002cf6:	f7fe fcab 	bl	8001650 <HAL_UART_MspInit>
 8002cfa:	e7d7      	b.n	8002cac <HAL_UART_Init+0xc>
    return HAL_ERROR;
 8002cfc:	2001      	movs	r0, #1
}
 8002cfe:	4770      	bx	lr

08002d00 <HAL_UART_Transmit>:
{
 8002d00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002d04:	b082      	sub	sp, #8
 8002d06:	461e      	mov	r6, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8002d08:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d151      	bne.n	8002db6 <HAL_UART_Transmit+0xb6>
 8002d12:	4604      	mov	r4, r0
 8002d14:	460d      	mov	r5, r1
 8002d16:	4690      	mov	r8, r2
    if ((pData == NULL) || (Size == 0U))
 8002d18:	2900      	cmp	r1, #0
 8002d1a:	d050      	beq.n	8002dbe <HAL_UART_Transmit+0xbe>
 8002d1c:	b90a      	cbnz	r2, 8002d22 <HAL_UART_Transmit+0x22>
      return  HAL_ERROR;
 8002d1e:	2001      	movs	r0, #1
 8002d20:	e04a      	b.n	8002db8 <HAL_UART_Transmit+0xb8>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d22:	2300      	movs	r3, #0
 8002d24:	6443      	str	r3, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d26:	2321      	movs	r3, #33	@ 0x21
 8002d28:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8002d2c:	f7fe fd72 	bl	8001814 <HAL_GetTick>
 8002d30:	4607      	mov	r7, r0
    huart->TxXferSize = Size;
 8002d32:	f8a4 8024 	strh.w	r8, [r4, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d36:	f8a4 8026 	strh.w	r8, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d3a:	68a3      	ldr	r3, [r4, #8]
 8002d3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d40:	d009      	beq.n	8002d56 <HAL_UART_Transmit+0x56>
      pdata16bits = NULL;
 8002d42:	f04f 0a00 	mov.w	sl, #0
    while (huart->TxXferCount > 0U)
 8002d46:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002d48:	b29b      	uxth	r3, r3
 8002d4a:	b343      	cbz	r3, 8002d9e <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d4c:	f04f 0900 	mov.w	r9, #0
 8002d50:	f04f 0880 	mov.w	r8, #128	@ 0x80
 8002d54:	e014      	b.n	8002d80 <HAL_UART_Transmit+0x80>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d56:	6923      	ldr	r3, [r4, #16]
 8002d58:	b113      	cbz	r3, 8002d60 <HAL_UART_Transmit+0x60>
      pdata16bits = NULL;
 8002d5a:	f04f 0a00 	mov.w	sl, #0
 8002d5e:	e7f2      	b.n	8002d46 <HAL_UART_Transmit+0x46>
      pdata16bits = (const uint16_t *) pData;
 8002d60:	46aa      	mov	sl, r5
      pdata8bits  = NULL;
 8002d62:	2500      	movs	r5, #0
 8002d64:	e7ef      	b.n	8002d46 <HAL_UART_Transmit+0x46>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d66:	6822      	ldr	r2, [r4, #0]
 8002d68:	f83a 3b02 	ldrh.w	r3, [sl], #2
 8002d6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d70:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8002d72:	8ce2      	ldrh	r2, [r4, #38]	@ 0x26
 8002d74:	3a01      	subs	r2, #1
 8002d76:	b292      	uxth	r2, r2
 8002d78:	84e2      	strh	r2, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d7a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8002d7c:	b29b      	uxth	r3, r3
 8002d7e:	b173      	cbz	r3, 8002d9e <HAL_UART_Transmit+0x9e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d80:	9600      	str	r6, [sp, #0]
 8002d82:	463b      	mov	r3, r7
 8002d84:	464a      	mov	r2, r9
 8002d86:	4641      	mov	r1, r8
 8002d88:	4620      	mov	r0, r4
 8002d8a:	f7ff ff47 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 8002d8e:	b9c0      	cbnz	r0, 8002dc2 <HAL_UART_Transmit+0xc2>
      if (pdata8bits == NULL)
 8002d90:	2d00      	cmp	r5, #0
 8002d92:	d0e8      	beq.n	8002d66 <HAL_UART_Transmit+0x66>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d94:	6823      	ldr	r3, [r4, #0]
 8002d96:	f815 2b01 	ldrb.w	r2, [r5], #1
 8002d9a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d9c:	e7e9      	b.n	8002d72 <HAL_UART_Transmit+0x72>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d9e:	9600      	str	r6, [sp, #0]
 8002da0:	463b      	mov	r3, r7
 8002da2:	2200      	movs	r2, #0
 8002da4:	2140      	movs	r1, #64	@ 0x40
 8002da6:	4620      	mov	r0, r4
 8002da8:	f7ff ff38 	bl	8002c1c <UART_WaitOnFlagUntilTimeout>
 8002dac:	b958      	cbnz	r0, 8002dc6 <HAL_UART_Transmit+0xc6>
    huart->gState = HAL_UART_STATE_READY;
 8002dae:	2320      	movs	r3, #32
 8002db0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8002db4:	e000      	b.n	8002db8 <HAL_UART_Transmit+0xb8>
    return HAL_BUSY;
 8002db6:	2002      	movs	r0, #2
}
 8002db8:	b002      	add	sp, #8
 8002dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	e7fa      	b.n	8002db8 <HAL_UART_Transmit+0xb8>
        return HAL_TIMEOUT;
 8002dc2:	2003      	movs	r0, #3
 8002dc4:	e7f8      	b.n	8002db8 <HAL_UART_Transmit+0xb8>
      return HAL_TIMEOUT;
 8002dc6:	2003      	movs	r0, #3
 8002dc8:	e7f6      	b.n	8002db8 <HAL_UART_Transmit+0xb8>
	...

08002dcc <HAL_UART_Transmit_DMA>:
{
 8002dcc:	b538      	push	{r3, r4, r5, lr}
 8002dce:	4613      	mov	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002dd0:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	2a20      	cmp	r2, #32
 8002dd8:	d12f      	bne.n	8002e3a <HAL_UART_Transmit_DMA+0x6e>
 8002dda:	4604      	mov	r4, r0
    if ((pData == NULL) || (Size == 0U))
 8002ddc:	2900      	cmp	r1, #0
 8002dde:	d02e      	beq.n	8002e3e <HAL_UART_Transmit_DMA+0x72>
 8002de0:	b90b      	cbnz	r3, 8002de6 <HAL_UART_Transmit_DMA+0x1a>
      return HAL_ERROR;
 8002de2:	2001      	movs	r0, #1
}
 8002de4:	bd38      	pop	{r3, r4, r5, pc}
    huart->pTxBuffPtr = pData;
 8002de6:	6201      	str	r1, [r0, #32]
    huart->TxXferSize = Size;
 8002de8:	8483      	strh	r3, [r0, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002dea:	84c3      	strh	r3, [r0, #38]	@ 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dec:	2200      	movs	r2, #0
 8002dee:	6442      	str	r2, [r0, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002df0:	2021      	movs	r0, #33	@ 0x21
 8002df2:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002df6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002df8:	4d12      	ldr	r5, [pc, #72]	@ (8002e44 <HAL_UART_Transmit_DMA+0x78>)
 8002dfa:	6285      	str	r5, [r0, #40]	@ 0x28
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002dfc:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002dfe:	4d12      	ldr	r5, [pc, #72]	@ (8002e48 <HAL_UART_Transmit_DMA+0x7c>)
 8002e00:	62c5      	str	r5, [r0, #44]	@ 0x2c
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002e02:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e04:	4d11      	ldr	r5, [pc, #68]	@ (8002e4c <HAL_UART_Transmit_DMA+0x80>)
 8002e06:	6305      	str	r5, [r0, #48]	@ 0x30
    huart->hdmatx->XferAbortCallback = NULL;
 8002e08:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e0a:	6342      	str	r2, [r0, #52]	@ 0x34
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002e0c:	6822      	ldr	r2, [r4, #0]
 8002e0e:	3204      	adds	r2, #4
 8002e10:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8002e12:	f7ff f81d 	bl	8001e50 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002e16:	6823      	ldr	r3, [r4, #0]
 8002e18:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e1c:	601a      	str	r2, [r3, #0]
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002e1e:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e20:	f102 0314 	add.w	r3, r2, #20
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2c:	3214      	adds	r2, #20
 8002e2e:	e842 3100 	strex	r1, r3, [r2]
 8002e32:	2900      	cmp	r1, #0
 8002e34:	d1f3      	bne.n	8002e1e <HAL_UART_Transmit_DMA+0x52>
    return HAL_OK;
 8002e36:	2000      	movs	r0, #0
 8002e38:	e7d4      	b.n	8002de4 <HAL_UART_Transmit_DMA+0x18>
    return HAL_BUSY;
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	e7d2      	b.n	8002de4 <HAL_UART_Transmit_DMA+0x18>
      return HAL_ERROR;
 8002e3e:	2001      	movs	r0, #1
 8002e40:	e7d0      	b.n	8002de4 <HAL_UART_Transmit_DMA+0x18>
 8002e42:	bf00      	nop
 8002e44:	08002ef7 	.word	0x08002ef7
 8002e48:	08002f45 	.word	0x08002f45
 8002e4c:	08002f51 	.word	0x08002f51

08002e50 <HAL_UART_AbortReceive>:
{
 8002e50:	b510      	push	{r4, lr}
 8002e52:	4604      	mov	r4, r0
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e54:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e56:	f102 030c 	add.w	r3, r2, #12
 8002e5a:	e853 3f00 	ldrex	r3, [r3]
 8002e5e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e62:	320c      	adds	r2, #12
 8002e64:	e842 3100 	strex	r1, r3, [r2]
 8002e68:	2900      	cmp	r1, #0
 8002e6a:	d1f3      	bne.n	8002e54 <HAL_UART_AbortReceive+0x4>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e6c:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e6e:	f102 0314 	add.w	r3, r2, #20
 8002e72:	e853 3f00 	ldrex	r3, [r3]
 8002e76:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	3214      	adds	r2, #20
 8002e7c:	e842 3100 	strex	r1, r3, [r2]
 8002e80:	2900      	cmp	r1, #0
 8002e82:	d1f3      	bne.n	8002e6c <HAL_UART_AbortReceive+0x1c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e84:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d01f      	beq.n	8002eca <HAL_UART_AbortReceive+0x7a>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8002e92:	d013      	beq.n	8002ebc <HAL_UART_AbortReceive+0x6c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e94:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e96:	f102 0314 	add.w	r3, r2, #20
 8002e9a:	e853 3f00 	ldrex	r3, [r3]
 8002e9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ea2:	3214      	adds	r2, #20
 8002ea4:	e842 3100 	strex	r1, r3, [r2]
 8002ea8:	2900      	cmp	r1, #0
 8002eaa:	d1f3      	bne.n	8002e94 <HAL_UART_AbortReceive+0x44>
    if (huart->hdmarx != NULL)
 8002eac:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8002eae:	b12b      	cbz	r3, 8002ebc <HAL_UART_AbortReceive+0x6c>
      huart->hdmarx->XferAbortCallback = NULL;
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	635a      	str	r2, [r3, #52]	@ 0x34
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002eb4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002eb6:	f7ff f81a 	bl	8001eee <HAL_DMA_Abort>
 8002eba:	b998      	cbnz	r0, 8002ee4 <HAL_UART_AbortReceive+0x94>
  huart->RxXferCount = 0x00U;
 8002ebc:	2000      	movs	r0, #0
 8002ebe:	85e0      	strh	r0, [r4, #46]	@ 0x2e
  huart->RxState = HAL_UART_STATE_READY;
 8002ec0:	2320      	movs	r3, #32
 8002ec2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ec6:	6320      	str	r0, [r4, #48]	@ 0x30
}
 8002ec8:	bd10      	pop	{r4, pc}
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002eca:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ecc:	f102 030c 	add.w	r3, r2, #12
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed8:	320c      	adds	r2, #12
 8002eda:	e842 3100 	strex	r1, r3, [r2]
 8002ede:	2900      	cmp	r1, #0
 8002ee0:	d1f3      	bne.n	8002eca <HAL_UART_AbortReceive+0x7a>
 8002ee2:	e7d2      	b.n	8002e8a <HAL_UART_AbortReceive+0x3a>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002ee4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 8002ee6:	f7ff f90f 	bl	8002108 <HAL_DMA_GetError>
 8002eea:	2820      	cmp	r0, #32
 8002eec:	d1e6      	bne.n	8002ebc <HAL_UART_AbortReceive+0x6c>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002eee:	2310      	movs	r3, #16
 8002ef0:	6463      	str	r3, [r4, #68]	@ 0x44
          return HAL_TIMEOUT;
 8002ef2:	2003      	movs	r0, #3
 8002ef4:	e7e8      	b.n	8002ec8 <HAL_UART_AbortReceive+0x78>

08002ef6 <UART_DMATransmitCplt>:
{
 8002ef6:	b508      	push	{r3, lr}
 8002ef8:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002efa:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f013 0f20 	tst.w	r3, #32
 8002f04:	d11a      	bne.n	8002f3c <UART_DMATransmitCplt+0x46>
    huart->TxXferCount = 0x00U;
 8002f06:	2300      	movs	r3, #0
 8002f08:	84c3      	strh	r3, [r0, #38]	@ 0x26
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f0a:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0c:	f102 0314 	add.w	r3, r2, #20
 8002f10:	e853 3f00 	ldrex	r3, [r3]
 8002f14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f18:	3214      	adds	r2, #20
 8002f1a:	e842 3100 	strex	r1, r3, [r2]
 8002f1e:	2900      	cmp	r1, #0
 8002f20:	d1f3      	bne.n	8002f0a <UART_DMATransmitCplt+0x14>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002f22:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f24:	f102 030c 	add.w	r3, r2, #12
 8002f28:	e853 3f00 	ldrex	r3, [r3]
 8002f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f30:	320c      	adds	r2, #12
 8002f32:	e842 3100 	strex	r1, r3, [r2]
 8002f36:	2900      	cmp	r1, #0
 8002f38:	d1f3      	bne.n	8002f22 <UART_DMATransmitCplt+0x2c>
}
 8002f3a:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8002f3c:	f000 fbae 	bl	800369c <HAL_UART_TxCpltCallback>
}
 8002f40:	e7fb      	b.n	8002f3a <UART_DMATransmitCplt+0x44>

08002f42 <HAL_UART_TxHalfCpltCallback>:
}
 8002f42:	4770      	bx	lr

08002f44 <UART_DMATxHalfCplt>:
{
 8002f44:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8002f46:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8002f48:	f7ff fffb 	bl	8002f42 <HAL_UART_TxHalfCpltCallback>
}
 8002f4c:	bd08      	pop	{r3, pc}

08002f4e <HAL_UART_RxHalfCpltCallback>:
}
 8002f4e:	4770      	bx	lr

08002f50 <UART_DMAError>:
{
 8002f50:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f52:	6a44      	ldr	r4, [r0, #36]	@ 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8002f54:	6823      	ldr	r3, [r4, #0]
 8002f56:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f58:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	2b21      	cmp	r3, #33	@ 0x21
 8002f60:	d00e      	beq.n	8002f80 <UART_DMAError+0x30>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f62:	6823      	ldr	r3, [r4, #0]
 8002f64:	695a      	ldr	r2, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002f66:	f894 3042 	ldrb.w	r3, [r4, #66]	@ 0x42
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b22      	cmp	r3, #34	@ 0x22
 8002f6e:	d01c      	beq.n	8002faa <UART_DMAError+0x5a>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002f70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8002f72:	f043 0310 	orr.w	r3, r3, #16
 8002f76:	6463      	str	r3, [r4, #68]	@ 0x44
  HAL_UART_ErrorCallback(huart);
 8002f78:	4620      	mov	r0, r4
 8002f7a:	f000 fb9d 	bl	80036b8 <HAL_UART_ErrorCallback>
}
 8002f7e:	bd10      	pop	{r4, pc}
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002f80:	f012 0f80 	tst.w	r2, #128	@ 0x80
 8002f84:	d0ed      	beq.n	8002f62 <UART_DMAError+0x12>
    huart->TxXferCount = 0x00U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	84e3      	strh	r3, [r4, #38]	@ 0x26
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8002f8a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f8c:	f102 030c 	add.w	r3, r2, #12
 8002f90:	e853 3f00 	ldrex	r3, [r3]
 8002f94:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f98:	320c      	adds	r2, #12
 8002f9a:	e842 3100 	strex	r1, r3, [r2]
 8002f9e:	2900      	cmp	r1, #0
 8002fa0:	d1f3      	bne.n	8002f8a <UART_DMAError+0x3a>
  huart->gState = HAL_UART_STATE_READY;
 8002fa2:	2320      	movs	r3, #32
 8002fa4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8002fa8:	e7db      	b.n	8002f62 <UART_DMAError+0x12>
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002faa:	f012 0f40 	tst.w	r2, #64	@ 0x40
 8002fae:	d0df      	beq.n	8002f70 <UART_DMAError+0x20>
    huart->RxXferCount = 0x00U;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002fb4:	4620      	mov	r0, r4
 8002fb6:	f7ff fdbd 	bl	8002b34 <UART_EndRxTransfer>
 8002fba:	e7d9      	b.n	8002f70 <UART_DMAError+0x20>

08002fbc <UART_DMAAbortOnError>:
{
 8002fbc:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fbe:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxXferCount = 0x00U;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	85c3      	strh	r3, [r0, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002fc4:	84c3      	strh	r3, [r0, #38]	@ 0x26
  HAL_UART_ErrorCallback(huart);
 8002fc6:	f000 fb77 	bl	80036b8 <HAL_UART_ErrorCallback>
}
 8002fca:	bd08      	pop	{r3, pc}

08002fcc <HAL_UARTEx_RxEventCallback>:
}
 8002fcc:	4770      	bx	lr

08002fce <UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002fce:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	2b22      	cmp	r3, #34	@ 0x22
 8002fd6:	d11d      	bne.n	8003014 <UART_Receive_IT+0x46>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fd8:	6883      	ldr	r3, [r0, #8]
 8002fda:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fde:	d006      	beq.n	8002fee <UART_Receive_IT+0x20>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002fe0:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002fe2:	b17b      	cbz	r3, 8003004 <UART_Receive_IT+0x36>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002fe4:	6803      	ldr	r3, [r0, #0]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fec:	e01a      	b.n	8003024 <UART_Receive_IT+0x56>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fee:	6903      	ldr	r3, [r0, #16]
 8002ff0:	b9a3      	cbnz	r3, 800301c <UART_Receive_IT+0x4e>
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002ff2:	6a82      	ldr	r2, [r0, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002ff4:	6803      	ldr	r3, [r0, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffc:	8013      	strh	r3, [r2, #0]
      huart->pRxBuffPtr += 2U;
 8002ffe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003000:	3302      	adds	r3, #2
 8003002:	e012      	b.n	800302a <UART_Receive_IT+0x5c>
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003004:	6903      	ldr	r3, [r0, #16]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ec      	bne.n	8002fe4 <UART_Receive_IT+0x16>
 800300a:	e008      	b.n	800301e <UART_Receive_IT+0x50>
        HAL_UART_RxCpltCallback(huart);
 800300c:	f000 fb4d 	bl	80036aa <HAL_UART_RxCpltCallback>
      return HAL_OK;
 8003010:	2000      	movs	r0, #0
 8003012:	e048      	b.n	80030a6 <UART_Receive_IT+0xd8>
    return HAL_BUSY;
 8003014:	2002      	movs	r0, #2
 8003016:	4770      	bx	lr
    return HAL_OK;
 8003018:	2000      	movs	r0, #0
}
 800301a:	4770      	bx	lr
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800301c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800301e:	6803      	ldr	r3, [r0, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	b2db      	uxtb	r3, r3
 8003024:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8003026:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003028:	3301      	adds	r3, #1
      huart->pRxBuffPtr += 2U;
 800302a:	6283      	str	r3, [r0, #40]	@ 0x28
    if (--huart->RxXferCount == 0U)
 800302c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 800302e:	3b01      	subs	r3, #1
 8003030:	b29b      	uxth	r3, r3
 8003032:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1ef      	bne.n	8003018 <UART_Receive_IT+0x4a>
{
 8003038:	b500      	push	{lr}
 800303a:	b083      	sub	sp, #12
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800303c:	6802      	ldr	r2, [r0, #0]
 800303e:	68d3      	ldr	r3, [r2, #12]
 8003040:	f023 0320 	bic.w	r3, r3, #32
 8003044:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003046:	6802      	ldr	r2, [r0, #0]
 8003048:	68d3      	ldr	r3, [r2, #12]
 800304a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800304e:	60d3      	str	r3, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003050:	6802      	ldr	r2, [r0, #0]
 8003052:	6953      	ldr	r3, [r2, #20]
 8003054:	f023 0301 	bic.w	r3, r3, #1
 8003058:	6153      	str	r3, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 800305a:	2320      	movs	r3, #32
 800305c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003060:	2300      	movs	r3, #0
 8003062:	6343      	str	r3, [r0, #52]	@ 0x34
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003064:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003066:	2b01      	cmp	r3, #1
 8003068:	d1d0      	bne.n	800300c <UART_Receive_IT+0x3e>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800306a:	2300      	movs	r3, #0
 800306c:	6303      	str	r3, [r0, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800306e:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	f102 030c 	add.w	r3, r2, #12
 8003074:	e853 3f00 	ldrex	r3, [r3]
 8003078:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800307c:	320c      	adds	r2, #12
 800307e:	e842 3100 	strex	r1, r3, [r2]
 8003082:	2900      	cmp	r1, #0
 8003084:	d1f3      	bne.n	800306e <UART_Receive_IT+0xa0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003086:	6803      	ldr	r3, [r0, #0]
 8003088:	681a      	ldr	r2, [r3, #0]
 800308a:	f012 0f10 	tst.w	r2, #16
 800308e:	d006      	beq.n	800309e <UART_Receive_IT+0xd0>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003090:	2200      	movs	r2, #0
 8003092:	9201      	str	r2, [sp, #4]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	9201      	str	r2, [sp, #4]
 8003098:	685b      	ldr	r3, [r3, #4]
 800309a:	9301      	str	r3, [sp, #4]
 800309c:	9b01      	ldr	r3, [sp, #4]
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800309e:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80030a0:	f7ff ff94 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
      return HAL_OK;
 80030a4:	2000      	movs	r0, #0
}
 80030a6:	b003      	add	sp, #12
 80030a8:	f85d fb04 	ldr.w	pc, [sp], #4

080030ac <HAL_UART_IRQHandler>:
{
 80030ac:	b510      	push	{r4, lr}
 80030ae:	b082      	sub	sp, #8
 80030b0:	4604      	mov	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80030b2:	6802      	ldr	r2, [r0, #0]
 80030b4:	6813      	ldr	r3, [r2, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030b6:	68d0      	ldr	r0, [r2, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030b8:	6951      	ldr	r1, [r2, #20]
  if (errorflags == RESET)
 80030ba:	f013 0f0f 	tst.w	r3, #15
 80030be:	d109      	bne.n	80030d4 <HAL_UART_IRQHandler+0x28>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80030c0:	f013 0f20 	tst.w	r3, #32
 80030c4:	d00d      	beq.n	80030e2 <HAL_UART_IRQHandler+0x36>
 80030c6:	f010 0f20 	tst.w	r0, #32
 80030ca:	d00a      	beq.n	80030e2 <HAL_UART_IRQHandler+0x36>
      UART_Receive_IT(huart);
 80030cc:	4620      	mov	r0, r4
 80030ce:	f7ff ff7e 	bl	8002fce <UART_Receive_IT>
      return;
 80030d2:	e018      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80030d4:	f001 0101 	and.w	r1, r1, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80030d8:	f400 7c90 	and.w	ip, r0, #288	@ 0x120
 80030dc:	ea5c 0c01 	orrs.w	ip, ip, r1
 80030e0:	d113      	bne.n	800310a <HAL_UART_IRQHandler+0x5e>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030e2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80030e4:	2901      	cmp	r1, #1
 80030e6:	f000 8081 	beq.w	80031ec <HAL_UART_IRQHandler+0x140>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030ea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80030ee:	d003      	beq.n	80030f8 <HAL_UART_IRQHandler+0x4c>
 80030f0:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80030f4:	f040 811a 	bne.w	800332c <HAL_UART_IRQHandler+0x280>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80030f8:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80030fc:	d003      	beq.n	8003106 <HAL_UART_IRQHandler+0x5a>
 80030fe:	f010 0f40 	tst.w	r0, #64	@ 0x40
 8003102:	f040 8140 	bne.w	8003386 <HAL_UART_IRQHandler+0x2da>
}
 8003106:	b002      	add	sp, #8
 8003108:	bd10      	pop	{r4, pc}
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800310a:	f013 0f01 	tst.w	r3, #1
 800310e:	d006      	beq.n	800311e <HAL_UART_IRQHandler+0x72>
 8003110:	f410 7f80 	tst.w	r0, #256	@ 0x100
 8003114:	d003      	beq.n	800311e <HAL_UART_IRQHandler+0x72>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003116:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003118:	f042 0201 	orr.w	r2, r2, #1
 800311c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800311e:	f013 0f04 	tst.w	r3, #4
 8003122:	d00b      	beq.n	800313c <HAL_UART_IRQHandler+0x90>
 8003124:	b191      	cbz	r1, 800314c <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003126:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003128:	f042 0202 	orr.w	r2, r2, #2
 800312c:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800312e:	f013 0f02 	tst.w	r3, #2
 8003132:	d107      	bne.n	8003144 <HAL_UART_IRQHandler+0x98>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003134:	f013 0f08 	tst.w	r3, #8
 8003138:	d10f      	bne.n	800315a <HAL_UART_IRQHandler+0xae>
 800313a:	e012      	b.n	8003162 <HAL_UART_IRQHandler+0xb6>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800313c:	f013 0f02 	tst.w	r3, #2
 8003140:	d004      	beq.n	800314c <HAL_UART_IRQHandler+0xa0>
 8003142:	b119      	cbz	r1, 800314c <HAL_UART_IRQHandler+0xa0>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003144:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003146:	f042 0204 	orr.w	r2, r2, #4
 800314a:	6462      	str	r2, [r4, #68]	@ 0x44
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800314c:	f013 0f08 	tst.w	r3, #8
 8003150:	d007      	beq.n	8003162 <HAL_UART_IRQHandler+0xb6>
 8003152:	f000 0220 	and.w	r2, r0, #32
 8003156:	430a      	orrs	r2, r1
 8003158:	d003      	beq.n	8003162 <HAL_UART_IRQHandler+0xb6>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800315a:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800315c:	f042 0208 	orr.w	r2, r2, #8
 8003160:	6462      	str	r2, [r4, #68]	@ 0x44
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003162:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8003164:	2a00      	cmp	r2, #0
 8003166:	d0ce      	beq.n	8003106 <HAL_UART_IRQHandler+0x5a>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003168:	f013 0f20 	tst.w	r3, #32
 800316c:	d002      	beq.n	8003174 <HAL_UART_IRQHandler+0xc8>
 800316e:	f010 0f20 	tst.w	r0, #32
 8003172:	d10e      	bne.n	8003192 <HAL_UART_IRQHandler+0xe6>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	695b      	ldr	r3, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003178:	6c62      	ldr	r2, [r4, #68]	@ 0x44
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800317a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800317e:	f002 0208 	and.w	r2, r2, #8
 8003182:	4313      	orrs	r3, r2
 8003184:	d109      	bne.n	800319a <HAL_UART_IRQHandler+0xee>
        HAL_UART_ErrorCallback(huart);
 8003186:	4620      	mov	r0, r4
 8003188:	f000 fa96 	bl	80036b8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800318c:	2300      	movs	r3, #0
 800318e:	6463      	str	r3, [r4, #68]	@ 0x44
 8003190:	e7b9      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
        UART_Receive_IT(huart);
 8003192:	4620      	mov	r0, r4
 8003194:	f7ff ff1b 	bl	8002fce <UART_Receive_IT>
 8003198:	e7ec      	b.n	8003174 <HAL_UART_IRQHandler+0xc8>
        UART_EndRxTransfer(huart);
 800319a:	4620      	mov	r0, r4
 800319c:	f7ff fcca 	bl	8002b34 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031a0:	6823      	ldr	r3, [r4, #0]
 80031a2:	695b      	ldr	r3, [r3, #20]
 80031a4:	f013 0f40 	tst.w	r3, #64	@ 0x40
 80031a8:	d01c      	beq.n	80031e4 <HAL_UART_IRQHandler+0x138>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031aa:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ac:	f102 0314 	add.w	r3, r2, #20
 80031b0:	e853 3f00 	ldrex	r3, [r3]
 80031b4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031b8:	3214      	adds	r2, #20
 80031ba:	e842 3100 	strex	r1, r3, [r2]
 80031be:	2900      	cmp	r1, #0
 80031c0:	d1f3      	bne.n	80031aa <HAL_UART_IRQHandler+0xfe>
          if (huart->hdmarx != NULL)
 80031c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80031c4:	b153      	cbz	r3, 80031dc <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031c6:	4a75      	ldr	r2, [pc, #468]	@ (800339c <HAL_UART_IRQHandler+0x2f0>)
 80031c8:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ca:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80031cc:	f7fe feb0 	bl	8001f30 <HAL_DMA_Abort_IT>
 80031d0:	2800      	cmp	r0, #0
 80031d2:	d098      	beq.n	8003106 <HAL_UART_IRQHandler+0x5a>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031d4:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 80031d6:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80031d8:	4798      	blx	r3
 80031da:	e794      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
            HAL_UART_ErrorCallback(huart);
 80031dc:	4620      	mov	r0, r4
 80031de:	f000 fa6b 	bl	80036b8 <HAL_UART_ErrorCallback>
 80031e2:	e790      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
          HAL_UART_ErrorCallback(huart);
 80031e4:	4620      	mov	r0, r4
 80031e6:	f000 fa67 	bl	80036b8 <HAL_UART_ErrorCallback>
 80031ea:	e78c      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80031ec:	f013 0f10 	tst.w	r3, #16
 80031f0:	f43f af7b 	beq.w	80030ea <HAL_UART_IRQHandler+0x3e>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80031f4:	f010 0f10 	tst.w	r0, #16
 80031f8:	f43f af77 	beq.w	80030ea <HAL_UART_IRQHandler+0x3e>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80031fc:	2300      	movs	r3, #0
 80031fe:	9301      	str	r3, [sp, #4]
 8003200:	6813      	ldr	r3, [r2, #0]
 8003202:	9301      	str	r3, [sp, #4]
 8003204:	6853      	ldr	r3, [r2, #4]
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800320a:	6953      	ldr	r3, [r2, #20]
 800320c:	f013 0f40 	tst.w	r3, #64	@ 0x40
 8003210:	d050      	beq.n	80032b4 <HAL_UART_IRQHandler+0x208>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003212:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003214:	6813      	ldr	r3, [r2, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 800321a:	2b00      	cmp	r3, #0
 800321c:	f43f af73 	beq.w	8003106 <HAL_UART_IRQHandler+0x5a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003220:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8003222:	4299      	cmp	r1, r3
 8003224:	f67f af6f 	bls.w	8003106 <HAL_UART_IRQHandler+0x5a>
        huart->RxXferCount = nb_remaining_rx_data;
 8003228:	85e3      	strh	r3, [r4, #46]	@ 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800322a:	6993      	ldr	r3, [r2, #24]
 800322c:	2b20      	cmp	r3, #32
 800322e:	d037      	beq.n	80032a0 <HAL_UART_IRQHandler+0x1f4>
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003230:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003232:	f102 030c 	add.w	r3, r2, #12
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323e:	320c      	adds	r2, #12
 8003240:	e842 3100 	strex	r1, r3, [r2]
 8003244:	2900      	cmp	r1, #0
 8003246:	d1f3      	bne.n	8003230 <HAL_UART_IRQHandler+0x184>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003248:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	f102 0314 	add.w	r3, r2, #20
 800324e:	e853 3f00 	ldrex	r3, [r3]
 8003252:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003256:	3214      	adds	r2, #20
 8003258:	e842 3100 	strex	r1, r3, [r2]
 800325c:	2900      	cmp	r1, #0
 800325e:	d1f3      	bne.n	8003248 <HAL_UART_IRQHandler+0x19c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003260:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003262:	f102 0314 	add.w	r3, r2, #20
 8003266:	e853 3f00 	ldrex	r3, [r3]
 800326a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326e:	3214      	adds	r2, #20
 8003270:	e842 3100 	strex	r1, r3, [r2]
 8003274:	2900      	cmp	r1, #0
 8003276:	d1f3      	bne.n	8003260 <HAL_UART_IRQHandler+0x1b4>
          huart->RxState = HAL_UART_STATE_READY;
 8003278:	2320      	movs	r3, #32
 800327a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327e:	2300      	movs	r3, #0
 8003280:	6323      	str	r3, [r4, #48]	@ 0x30
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003282:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003284:	f102 030c 	add.w	r3, r2, #12
 8003288:	e853 3f00 	ldrex	r3, [r3]
 800328c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003290:	320c      	adds	r2, #12
 8003292:	e842 3100 	strex	r1, r3, [r2]
 8003296:	2900      	cmp	r1, #0
 8003298:	d1f3      	bne.n	8003282 <HAL_UART_IRQHandler+0x1d6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800329a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800329c:	f7fe fe27 	bl	8001eee <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032a0:	2302      	movs	r3, #2
 80032a2:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032a4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80032a6:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80032a8:	1ac9      	subs	r1, r1, r3
 80032aa:	b289      	uxth	r1, r1
 80032ac:	4620      	mov	r0, r4
 80032ae:	f7ff fe8d 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
 80032b2:	e728      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032b4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80032b6:	b29a      	uxth	r2, r3
      if ((huart->RxXferCount > 0U)
 80032b8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80032ba:	b29b      	uxth	r3, r3
 80032bc:	2b00      	cmp	r3, #0
 80032be:	f43f af22 	beq.w	8003106 <HAL_UART_IRQHandler+0x5a>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032c2:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80032c4:	1a89      	subs	r1, r1, r2
 80032c6:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 80032c8:	2900      	cmp	r1, #0
 80032ca:	f43f af1c 	beq.w	8003106 <HAL_UART_IRQHandler+0x5a>
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032ce:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032d0:	f102 030c 	add.w	r3, r2, #12
 80032d4:	e853 3f00 	ldrex	r3, [r3]
 80032d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032dc:	320c      	adds	r2, #12
 80032de:	e842 3000 	strex	r0, r3, [r2]
 80032e2:	2800      	cmp	r0, #0
 80032e4:	d1f3      	bne.n	80032ce <HAL_UART_IRQHandler+0x222>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032e8:	f102 0314 	add.w	r3, r2, #20
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f4:	3214      	adds	r2, #20
 80032f6:	e842 3000 	strex	r0, r3, [r2]
 80032fa:	2800      	cmp	r0, #0
 80032fc:	d1f3      	bne.n	80032e6 <HAL_UART_IRQHandler+0x23a>
        huart->RxState = HAL_UART_STATE_READY;
 80032fe:	2320      	movs	r3, #32
 8003300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003304:	2300      	movs	r3, #0
 8003306:	6323      	str	r3, [r4, #48]	@ 0x30
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003308:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	f102 030c 	add.w	r3, r2, #12
 800330e:	e853 3f00 	ldrex	r3, [r3]
 8003312:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003316:	320c      	adds	r2, #12
 8003318:	e842 3000 	strex	r0, r3, [r2]
 800331c:	2800      	cmp	r0, #0
 800331e:	d1f3      	bne.n	8003308 <HAL_UART_IRQHandler+0x25c>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003320:	2302      	movs	r3, #2
 8003322:	6363      	str	r3, [r4, #52]	@ 0x34
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003324:	4620      	mov	r0, r4
 8003326:	f7ff fe51 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
 800332a:	e6ec      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800332c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b21      	cmp	r3, #33	@ 0x21
 8003334:	f47f aee7 	bne.w	8003106 <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003338:	68a3      	ldr	r3, [r4, #8]
 800333a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800333e:	d016      	beq.n	800336e <HAL_UART_IRQHandler+0x2c2>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003340:	6a23      	ldr	r3, [r4, #32]
 8003342:	1c59      	adds	r1, r3, #1
 8003344:	6221      	str	r1, [r4, #32]
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	6053      	str	r3, [r2, #4]
    if (--huart->TxXferCount == 0U)
 800334a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800334c:	3b01      	subs	r3, #1
 800334e:	b29b      	uxth	r3, r3
 8003350:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8003352:	2b00      	cmp	r3, #0
 8003354:	f47f aed7 	bne.w	8003106 <HAL_UART_IRQHandler+0x5a>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003358:	6822      	ldr	r2, [r4, #0]
 800335a:	68d3      	ldr	r3, [r2, #12]
 800335c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003360:	60d3      	str	r3, [r2, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	68d3      	ldr	r3, [r2, #12]
 8003366:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800336a:	60d3      	str	r3, [r2, #12]
 800336c:	e6cb      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800336e:	6923      	ldr	r3, [r4, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d1e5      	bne.n	8003340 <HAL_UART_IRQHandler+0x294>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003374:	6a23      	ldr	r3, [r4, #32]
 8003376:	881b      	ldrh	r3, [r3, #0]
 8003378:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800337c:	6053      	str	r3, [r2, #4]
      huart->pTxBuffPtr += 2U;
 800337e:	6a23      	ldr	r3, [r4, #32]
 8003380:	3302      	adds	r3, #2
 8003382:	6223      	str	r3, [r4, #32]
 8003384:	e7e1      	b.n	800334a <HAL_UART_IRQHandler+0x29e>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003386:	68d3      	ldr	r3, [r2, #12]
 8003388:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800338c:	60d3      	str	r3, [r2, #12]
  huart->gState = HAL_UART_STATE_READY;
 800338e:	2320      	movs	r3, #32
 8003390:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  HAL_UART_TxCpltCallback(huart);
 8003394:	4620      	mov	r0, r4
 8003396:	f000 f981 	bl	800369c <HAL_UART_TxCpltCallback>
  return HAL_OK;
 800339a:	e6b4      	b.n	8003106 <HAL_UART_IRQHandler+0x5a>
 800339c:	08002fbd 	.word	0x08002fbd

080033a0 <UART_DMARxHalfCplt>:
{
 80033a0:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033a2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80033a4:	2301      	movs	r3, #1
 80033a6:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033a8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d002      	beq.n	80033b4 <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 80033ae:	f7ff fdce 	bl	8002f4e <HAL_UART_RxHalfCpltCallback>
}
 80033b2:	bd08      	pop	{r3, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80033b4:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 80033b6:	0849      	lsrs	r1, r1, #1
 80033b8:	f7ff fe08 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
 80033bc:	e7f9      	b.n	80033b2 <UART_DMARxHalfCplt+0x12>

080033be <UART_DMAReceiveCplt>:
{
 80033be:	b508      	push	{r3, lr}
 80033c0:	4603      	mov	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80033c2:	6a40      	ldr	r0, [r0, #36]	@ 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f013 0f20 	tst.w	r3, #32
 80033cc:	d12b      	bne.n	8003426 <UART_DMAReceiveCplt+0x68>
    huart->RxXferCount = 0U;
 80033ce:	2300      	movs	r3, #0
 80033d0:	85c3      	strh	r3, [r0, #46]	@ 0x2e
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d2:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033d4:	f102 030c 	add.w	r3, r2, #12
 80033d8:	e853 3f00 	ldrex	r3, [r3]
 80033dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	320c      	adds	r2, #12
 80033e2:	e842 3100 	strex	r1, r3, [r2]
 80033e6:	2900      	cmp	r1, #0
 80033e8:	d1f3      	bne.n	80033d2 <UART_DMAReceiveCplt+0x14>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ea:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ec:	f102 0314 	add.w	r3, r2, #20
 80033f0:	e853 3f00 	ldrex	r3, [r3]
 80033f4:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	3214      	adds	r2, #20
 80033fa:	e842 3100 	strex	r1, r3, [r2]
 80033fe:	2900      	cmp	r1, #0
 8003400:	d1f3      	bne.n	80033ea <UART_DMAReceiveCplt+0x2c>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003402:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003404:	f102 0314 	add.w	r3, r2, #20
 8003408:	e853 3f00 	ldrex	r3, [r3]
 800340c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003410:	3214      	adds	r2, #20
 8003412:	e842 3100 	strex	r1, r3, [r2]
 8003416:	2900      	cmp	r1, #0
 8003418:	d1f3      	bne.n	8003402 <UART_DMAReceiveCplt+0x44>
    huart->RxState = HAL_UART_STATE_READY;
 800341a:	2320      	movs	r3, #32
 800341c:	f880 3042 	strb.w	r3, [r0, #66]	@ 0x42
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003420:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8003422:	2b01      	cmp	r3, #1
 8003424:	d007      	beq.n	8003436 <UART_DMAReceiveCplt+0x78>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003426:	2300      	movs	r3, #0
 8003428:	6343      	str	r3, [r0, #52]	@ 0x34
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800342c:	2b01      	cmp	r3, #1
 800342e:	d00f      	beq.n	8003450 <UART_DMAReceiveCplt+0x92>
    HAL_UART_RxCpltCallback(huart);
 8003430:	f000 f93b 	bl	80036aa <HAL_UART_RxCpltCallback>
}
 8003434:	bd08      	pop	{r3, pc}
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003436:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003438:	f102 030c 	add.w	r3, r2, #12
 800343c:	e853 3f00 	ldrex	r3, [r3]
 8003440:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003444:	320c      	adds	r2, #12
 8003446:	e842 3100 	strex	r1, r3, [r2]
 800344a:	2900      	cmp	r1, #0
 800344c:	d1f3      	bne.n	8003436 <UART_DMAReceiveCplt+0x78>
 800344e:	e7ea      	b.n	8003426 <UART_DMAReceiveCplt+0x68>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003450:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8003452:	f7ff fdbb 	bl	8002fcc <HAL_UARTEx_RxEventCallback>
 8003456:	e7ed      	b.n	8003434 <UART_DMAReceiveCplt+0x76>

08003458 <UART_Start_Receive_DMA>:
{
 8003458:	b530      	push	{r4, r5, lr}
 800345a:	b083      	sub	sp, #12
 800345c:	4604      	mov	r4, r0
 800345e:	4613      	mov	r3, r2
  huart->pRxBuffPtr = pData;
 8003460:	6281      	str	r1, [r0, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003462:	8582      	strh	r2, [r0, #44]	@ 0x2c
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003464:	2500      	movs	r5, #0
 8003466:	6445      	str	r5, [r0, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003468:	2222      	movs	r2, #34	@ 0x22
 800346a:	f880 2042 	strb.w	r2, [r0, #66]	@ 0x42
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800346e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8003470:	481f      	ldr	r0, [pc, #124]	@ (80034f0 <UART_Start_Receive_DMA+0x98>)
 8003472:	6290      	str	r0, [r2, #40]	@ 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003474:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003476:	481f      	ldr	r0, [pc, #124]	@ (80034f4 <UART_Start_Receive_DMA+0x9c>)
 8003478:	62d0      	str	r0, [r2, #44]	@ 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800347a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800347c:	481e      	ldr	r0, [pc, #120]	@ (80034f8 <UART_Start_Receive_DMA+0xa0>)
 800347e:	6310      	str	r0, [r2, #48]	@ 0x30
  huart->hdmarx->XferAbortCallback = NULL;
 8003480:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8003482:	6355      	str	r5, [r2, #52]	@ 0x34
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003484:	6820      	ldr	r0, [r4, #0]
 8003486:	460a      	mov	r2, r1
 8003488:	1d01      	adds	r1, r0, #4
 800348a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800348c:	f7fe fce0 	bl	8001e50 <HAL_DMA_Start_IT>
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003490:	9501      	str	r5, [sp, #4]
 8003492:	6823      	ldr	r3, [r4, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	9201      	str	r2, [sp, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	9301      	str	r3, [sp, #4]
 800349c:	9b01      	ldr	r3, [sp, #4]
  if (huart->Init.Parity != UART_PARITY_NONE)
 800349e:	6923      	ldr	r3, [r4, #16]
 80034a0:	b15b      	cbz	r3, 80034ba <UART_Start_Receive_DMA+0x62>
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034a2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	f102 030c 	add.w	r3, r2, #12
 80034a8:	e853 3f00 	ldrex	r3, [r3]
 80034ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b0:	320c      	adds	r2, #12
 80034b2:	e842 3100 	strex	r1, r3, [r2]
 80034b6:	2900      	cmp	r1, #0
 80034b8:	d1f3      	bne.n	80034a2 <UART_Start_Receive_DMA+0x4a>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034ba:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034bc:	f102 0314 	add.w	r3, r2, #20
 80034c0:	e853 3f00 	ldrex	r3, [r3]
 80034c4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	3214      	adds	r2, #20
 80034ca:	e842 3100 	strex	r1, r3, [r2]
 80034ce:	2900      	cmp	r1, #0
 80034d0:	d1f3      	bne.n	80034ba <UART_Start_Receive_DMA+0x62>
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	f102 0314 	add.w	r3, r2, #20
 80034d8:	e853 3f00 	ldrex	r3, [r3]
 80034dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	3214      	adds	r2, #20
 80034e2:	e842 3100 	strex	r1, r3, [r2]
 80034e6:	2900      	cmp	r1, #0
 80034e8:	d1f3      	bne.n	80034d2 <UART_Start_Receive_DMA+0x7a>
}
 80034ea:	2000      	movs	r0, #0
 80034ec:	b003      	add	sp, #12
 80034ee:	bd30      	pop	{r4, r5, pc}
 80034f0:	080033bf 	.word	0x080033bf
 80034f4:	080033a1 	.word	0x080033a1
 80034f8:	08002f51 	.word	0x08002f51

080034fc <HAL_UART_Receive_DMA>:
{
 80034fc:	b508      	push	{r3, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 80034fe:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b20      	cmp	r3, #32
 8003506:	d108      	bne.n	800351a <HAL_UART_Receive_DMA+0x1e>
    if ((pData == NULL) || (Size == 0U))
 8003508:	b149      	cbz	r1, 800351e <HAL_UART_Receive_DMA+0x22>
 800350a:	b90a      	cbnz	r2, 8003510 <HAL_UART_Receive_DMA+0x14>
      return HAL_ERROR;
 800350c:	2001      	movs	r0, #1
}
 800350e:	bd08      	pop	{r3, pc}
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003510:	2300      	movs	r3, #0
 8003512:	6303      	str	r3, [r0, #48]	@ 0x30
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003514:	f7ff ffa0 	bl	8003458 <UART_Start_Receive_DMA>
 8003518:	e7f9      	b.n	800350e <HAL_UART_Receive_DMA+0x12>
    return HAL_BUSY;
 800351a:	2002      	movs	r0, #2
 800351c:	e7f7      	b.n	800350e <HAL_UART_Receive_DMA+0x12>
      return HAL_ERROR;
 800351e:	2001      	movs	r0, #1
 8003520:	e7f5      	b.n	800350e <HAL_UART_Receive_DMA+0x12>

08003522 <_ZL16uart_tx_callbackaPv>:
	RawParser_dynamic_t* const raw_p = (RawParser_dynamic_t*)captured;
	rawP_dynamic_receiveArray(raw_p, data, size);
}

static void uart_tx_callback(const status_t status, void* const captured)
{
 8003522:	b508      	push	{r3, lr}
	pool_container_t* const pack_pool = (pool_container_t*)captured;
	poolContainer_nextReadPos(pack_pool);
 8003524:	4608      	mov	r0, r1
 8003526:	f000 fcbf 	bl	8003ea8 <poolContainer_nextReadPos>
}
 800352a:	bd08      	pop	{r3, pc}

0800352c <_ZL16uart_rx_callbackPKhmPv>:
{
 800352c:	b508      	push	{r3, lr}
 800352e:	4613      	mov	r3, r2
	ringbuf_putc(&self->RX.input_ring, byte);
}

STATIC_FORCEINLINE void rawP_dynamic_receiveArray(RawParser_dynamic_t* const self, const u8* const arr, const reg size)
{
	ringbuf_put(&self->RX.input_ring, arr, size);
 8003530:	460a      	mov	r2, r1
 8003532:	4601      	mov	r1, r0
 8003534:	f103 0010 	add.w	r0, r3, #16
 8003538:	f000 fd1f 	bl	8003f7a <ringbuf_put>
}
 800353c:	bd08      	pop	{r3, pc}

0800353e <_ZL11rx_callbackP11ring_bufferPv>:
//}



static void rx_callback(ringbuf_t* const rxStream, void* const ctx)
{
 800353e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	ProtocolSender& self = *static_cast<ProtocolSender*>(ctx);

	RawParser_dynamic_t* const parser = self.getParserNew();
	pool_container_t* const pack_pool = self.getPool();

	while(!FIFO_IS_FULL(pack_pool)) {
 8003542:	690b      	ldr	r3, [r1, #16]
 8003544:	68ca      	ldr	r2, [r1, #12]
 8003546:	4053      	eors	r3, r2
 8003548:	688a      	ldr	r2, [r1, #8]
 800354a:	4013      	ands	r3, r2
 800354c:	680a      	ldr	r2, [r1, #0]
 800354e:	4293      	cmp	r3, r2
 8003550:	d038      	beq.n	80035c4 <_ZL11rx_callbackP11ring_bufferPv+0x86>
 8003552:	460d      	mov	r5, r1
 8003554:	f101 041c 	add.w	r4, r1, #28
		ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(pack_pool);

		ringbuf_install_buf(&parser->TX.frame_stream, buffer->data);
 8003558:	f101 086c 	add.w	r8, r1, #108	@ 0x6c
		rawP_dynamic_startTransmittPacket(parser, 10);
 800355c:	270a      	movs	r7, #10

		rawp_stream_add_u8(parser, 0x11);
 800355e:	2611      	movs	r6, #17
		ProtocolSender::pool_elem* const buffer = (ProtocolSender::pool_elem*) poolContainer_getWriteBuffer(pack_pool);
 8003560:	4628      	mov	r0, r5
 8003562:	f000 fc8f 	bl	8003e84 <poolContainer_getWriteBuffer>
 8003566:	4681      	mov	r9, r0
		ringbuf_install_buf(&parser->TX.frame_stream, buffer->data);
 8003568:	1c81      	adds	r1, r0, #2
 800356a:	4640      	mov	r0, r8
 800356c:	f000 fcc5 	bl	8003efa <ringbuf_install_buf>
		rawP_dynamic_startTransmittPacket(parser, 10);
 8003570:	4639      	mov	r1, r7
 8003572:	4620      	mov	r0, r4
 8003574:	f000 fffb 	bl	800456e <rawP_dynamic_startTransmittPacket>
		rawp_stream_add_u8(parser, 0x11);
 8003578:	4631      	mov	r1, r6
 800357a:	4620      	mov	r0, r4
 800357c:	f000 fe8a 	bl	8004294 <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0x22);
 8003580:	2122      	movs	r1, #34	@ 0x22
 8003582:	4620      	mov	r0, r4
 8003584:	f000 fe86 	bl	8004294 <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0x33);
 8003588:	2133      	movs	r1, #51	@ 0x33
 800358a:	4620      	mov	r0, r4
 800358c:	f000 fe82 	bl	8004294 <rawp_stream_add_u8>
		rawp_stream_add_u8(parser, 0x1a);
 8003590:	211a      	movs	r1, #26
 8003592:	4620      	mov	r0, r4
 8003594:	f000 fe7e 	bl	8004294 <rawp_stream_add_u8>
		rawp_stream_add_u16(parser, 0xaabb);
 8003598:	f64a 21bb 	movw	r1, #43707	@ 0xaabb
 800359c:	4620      	mov	r0, r4
 800359e:	f000 fe99 	bl	80042d4 <rawp_stream_add_u16>

		ringbuf_t* const ring = rawP_dynamic_finishTransmittPacket(parser);
 80035a2:	4620      	mov	r0, r4
 80035a4:	f001 f851 	bl	800464a <rawP_dynamic_finishTransmittPacket>
		buffer->size = ring->base.head;
 80035a8:	6903      	ldr	r3, [r0, #16]
 80035aa:	f8a9 3000 	strh.w	r3, [r9]
		poolContainer_nextWritePos(pack_pool);
 80035ae:	4628      	mov	r0, r5
 80035b0:	f000 fc6f 	bl	8003e92 <poolContainer_nextWritePos>
	while(!FIFO_IS_FULL(pack_pool)) {
 80035b4:	692b      	ldr	r3, [r5, #16]
 80035b6:	68ea      	ldr	r2, [r5, #12]
 80035b8:	4053      	eors	r3, r2
 80035ba:	68aa      	ldr	r2, [r5, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	682a      	ldr	r2, [r5, #0]
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d1cd      	bne.n	8003560 <_ZL11rx_callbackP11ring_bufferPv+0x22>
	}
}
 80035c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080035c8 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef>:


status_t ProtocolSender::init(UART_HandleTypeDef *const huart)
{
 80035c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035ca:	b087      	sub	sp, #28
	M_Assert_BreakSaveCheck(huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 80035cc:	2900      	cmp	r1, #0
 80035ce:	d041      	beq.n	8003654 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x8c>
 80035d0:	4604      	mov	r4, r0

	M_Assert_BreakSaveCheck(UART_Init(&stm32_uart, huart, 128) != STATUS_OK,
 80035d2:	f100 058c 	add.w	r5, r0, #140	@ 0x8c
 80035d6:	2280      	movs	r2, #128	@ 0x80
 80035d8:	4628      	mov	r0, r5
 80035da:	f001 faf6 	bl	8004bca <UART_Init>
 80035de:	4607      	mov	r7, r0
 80035e0:	2800      	cmp	r0, #0
 80035e2:	d13a      	bne.n	800365a <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x92>
			M_EMPTY, return ERROR_FAIL,
					"uart init fail");

	poolContainer_init(&pack_pool, 4, sizeof(pool_elem) + 128);
 80035e4:	2282      	movs	r2, #130	@ 0x82
 80035e6:	2104      	movs	r1, #4
 80035e8:	4620      	mov	r0, r4
 80035ea:	f000 fc00 	bl	8003dee <poolContainer_init>
	pool_elem* const buffer = static_cast<pool_elem*>(poolContainer_getWriteBuffer(&pack_pool));
 80035ee:	4620      	mov	r0, r4
 80035f0:	f000 fc48 	bl	8003e84 <poolContainer_getWriteBuffer>

	RawP_dynamic_init_t rawP_init = {
 80035f4:	2300      	movs	r3, #0
 80035f6:	9300      	str	r3, [sp, #0]
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	9302      	str	r3, [sp, #8]
 80035fc:	9303      	str	r3, [sp, #12]
 80035fe:	9305      	str	r3, [sp, #20]
 8003600:	231a      	movs	r3, #26
 8003602:	f88d 3000 	strb.w	r3, [sp]
 8003606:	2380      	movs	r3, #128	@ 0x80
 8003608:	f8ad 3002 	strh.w	r3, [sp, #2]
 800360c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003610:	f8ad 2004 	strh.w	r2, [sp, #4]
 8003614:	f8ad 300c 	strh.w	r3, [sp, #12]
			.rxBufferSize = 128,
			.rxFrameSize = 256,
			.rxFrameBuff = NULL,
			//tx--------------
			.txFrameSize = 128,
			.txFrameBuff = buffer->data,
 8003618:	3002      	adds	r0, #2
			.crc_type = CRC8
	};
 800361a:	9004      	str	r0, [sp, #16]

	rawP_dynamic_init(&rawP_new, &rawP_init);
 800361c:	f104 061c 	add.w	r6, r4, #28
 8003620:	4669      	mov	r1, sp
 8003622:	4630      	mov	r0, r6
 8003624:	f000 ff24 	bl	8004470 <rawP_dynamic_init>
	rawP_dynamic_subscribe(&rawP_new, rx_callback, this);
 8003628:	4622      	mov	r2, r4
 800362a:	490d      	ldr	r1, [pc, #52]	@ (8003660 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x98>)
 800362c:	4630      	mov	r0, r6
 800362e:	f000 ff5e 	bl	80044ee <rawP_dynamic_subscribe>


	UART_SetRxCallback(&stm32_uart, uart_rx_callback, &rawP_new/*&raw_p*/);
 8003632:	4632      	mov	r2, r6
 8003634:	490b      	ldr	r1, [pc, #44]	@ (8003664 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x9c>)
 8003636:	4628      	mov	r0, r5
 8003638:	f001 faaa 	bl	8004b90 <UART_SetRxCallback>
	UART_SetTxcallback(&stm32_uart, uart_tx_callback, &pack_pool);
 800363c:	4622      	mov	r2, r4
 800363e:	490a      	ldr	r1, [pc, #40]	@ (8003668 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0xa0>)
 8003640:	4628      	mov	r0, r5
 8003642:	f001 f9fc 	bl	8004a3e <UART_SetTxcallback>
	//	UART_SetErrorCallback(&self->stm32_uart, uart_error_callback, self);

	m_keyGroup = Key_tps1htc30Group::getInstance();
 8003646:	f000 f8df 	bl	8003808 <_ZN18Key_tps1htc30Group11getInstanceEv>
 800364a:	f8c4 00c4 	str.w	r0, [r4, #196]	@ 0xc4
	return STATUS_OK;
}
 800364e:	4638      	mov	r0, r7
 8003650:	b007      	add	sp, #28
 8003652:	bdf0      	pop	{r4, r5, r6, r7, pc}
	M_Assert_BreakSaveCheck(huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 8003654:	f04f 37ff 	mov.w	r7, #4294967295
 8003658:	e7f9      	b.n	800364e <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x86>
	M_Assert_BreakSaveCheck(UART_Init(&stm32_uart, huart, 128) != STATUS_OK,
 800365a:	f04f 37ff 	mov.w	r7, #4294967295
 800365e:	e7f6      	b.n	800364e <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef+0x86>
 8003660:	0800353f 	.word	0x0800353f
 8003664:	0800352d 	.word	0x0800352d
 8003668:	08003523 	.word	0x08003523

0800366c <_ZN14ProtocolSender7proceedEm>:

void ProtocolSender::proceed(const uint32_t current_time)
{
 800366c:	b510      	push	{r4, lr}
 800366e:	4604      	mov	r4, r0
	rawP_dynamic_proceed(&rawP_new);
 8003670:	301c      	adds	r0, #28
 8003672:	f000 ff40 	bl	80044f6 <rawP_dynamic_proceed>
 * @param   -
 * @return  Booleon value:
 *           - true: device is busy
 *           - false: device is idle
 *****************************************************************************/
static inline bool UART_IsTxBusy(stm32_DMA_uart_t* const self) { return self->isTxBusy_; }
 8003676:	f894 3090 	ldrb.w	r3, [r4, #144]	@ 0x90
	//		proto_timer.start(100);
	//	}

		// proceed TX
		{
			if(!UART_IsTxBusy(&stm32_uart) && FIFO_NOT_EMPTY(&pack_pool)) {
 800367a:	b91b      	cbnz	r3, 8003684 <_ZN14ProtocolSender7proceedEm+0x18>
 800367c:	68e2      	ldr	r2, [r4, #12]
 800367e:	6923      	ldr	r3, [r4, #16]
 8003680:	429a      	cmp	r2, r3
 8003682:	d100      	bne.n	8003686 <_ZN14ProtocolSender7proceedEm+0x1a>
	//			proto_timer.start(50);
	//		}
	//
	//	}

}
 8003684:	bd10      	pop	{r4, pc}
				pool_elem* const buffer = (pool_elem*) poolContainer_readBuffer(&pack_pool);
 8003686:	4620      	mov	r0, r4
 8003688:	f000 fc07 	bl	8003e9a <poolContainer_readBuffer>
				UART_SendBuffer(&stm32_uart, buffer->data, buffer->size);
 800368c:	4601      	mov	r1, r0
 800368e:	f831 2b02 	ldrh.w	r2, [r1], #2
 8003692:	f104 008c 	add.w	r0, r4, #140	@ 0x8c
 8003696:	f001 f9af 	bl	80049f8 <UART_SendBuffer>
}
 800369a:	e7f3      	b.n	8003684 <_ZN14ProtocolSender7proceedEm+0x18>

0800369c <HAL_UART_TxCpltCallback>:



// callbacks IT --------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800369c:	b508      	push	{r3, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 800369e:	f001 faf1 	bl	8004c84 <getContainerUartInstance>
	if(uart_instance) {
 80036a2:	b108      	cbz	r0, 80036a8 <HAL_UART_TxCpltCallback+0xc>
		UART_TXCallback(uart_instance);
 80036a4:	f001 f9d3 	bl	8004a4e <UART_TXCallback>
	}
}
 80036a8:	bd08      	pop	{r3, pc}

080036aa <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036aa:	b508      	push	{r3, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 80036ac:	f001 faea 	bl	8004c84 <getContainerUartInstance>
	if(uart_instance) {
 80036b0:	b108      	cbz	r0, 80036b6 <HAL_UART_RxCpltCallback+0xc>
		UART_RXCallback(uart_instance);
 80036b2:	f001 fa37 	bl	8004b24 <UART_RXCallback>
	}
}
 80036b6:	bd08      	pop	{r3, pc}

080036b8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036b8:	b508      	push	{r3, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 80036ba:	f001 fae3 	bl	8004c84 <getContainerUartInstance>
	if(uart_instance) {
 80036be:	b108      	cbz	r0, 80036c4 <HAL_UART_ErrorCallback+0xc>
		UART_ErrorCallback(uart_instance);
 80036c0:	f001 f9d8 	bl	8004a74 <UART_ErrorCallback>
	}
}
 80036c4:	bd08      	pop	{r3, pc}
	...

080036c8 <_ZN15RelayController8init_allEv>:
	// TODO Auto-generated constructor stub
	init_all();
}

void RelayController::init_all()
{
 80036c8:	b570      	push	{r4, r5, r6, lr}
 80036ca:	b08c      	sub	sp, #48	@ 0x30
 80036cc:	4605      	mov	r5, r0
	//init communicator --------------------------------------------------
	extern UART_HandleTypeDef huart1;
	m_comm.init(&huart1);
 80036ce:	491c      	ldr	r1, [pc, #112]	@ (8003740 <_ZN15RelayController8init_allEv+0x78>)
 80036d0:	3004      	adds	r0, #4
 80036d2:	f7ff ff79 	bl	80035c8 <_ZN14ProtocolSender4initEP20__UART_HandleTypeDef>

	// init adc ---------------------------------------------------------
	extern ADC_HandleTypeDef hadc1;

	Stm32ADC_dma::Stm32ADC_init adc_init =  {
 80036d6:	4c1b      	ldr	r4, [pc, #108]	@ (8003744 <_ZN15RelayController8init_allEv+0x7c>)
 80036d8:	ae0a      	add	r6, sp, #40	@ 0x28
 80036da:	e894 0003 	ldmia.w	r4, {r0, r1}
 80036de:	e886 0003 	stmia.w	r6, {r0, r1}
			.hadc = &hadc1,
			.filter = 1.0/512.0
	};

	m_relayGroup = Key_tps1htc30Group::getInstance();
 80036e2:	f000 f891 	bl	8003808 <_ZN18Key_tps1htc30Group11getInstanceEv>
 80036e6:	f8c5 00d0 	str.w	r0, [r5, #208]	@ 0xd0
	inline uint8_t getKeys(const uint8_t group_id) {return m_initPinCnt[group_id];}


	//initialization functions
	static Key_tps1htc30Group* const getInstance();
	inline void initAdc(const Stm32ADC_dma::Stm32ADC_init& settings) { m_adc.init(settings); }
 80036ea:	4631      	mov	r1, r6
 80036ec:	f500 7022 	add.w	r0, r0, #648	@ 0x288
 80036f0:	f001 f80a 	bl	8004708 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>
	m_relayGroup->initAdc(adc_init);


	Key_tps1htc30Group::KeyInit key =  {
 80036f4:	f10d 0c14 	add.w	ip, sp, #20
 80036f8:	f104 0e08 	add.w	lr, r4, #8
 80036fc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8003700:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8003704:	f8de 3000 	ldr.w	r3, [lr]
 8003708:	f8cc 3000 	str.w	r3, [ip]
					.GPIO_Pin = I_FAULT_Pin
			},
			.adc_ch = 0
	};

	Key_tps1htc30Group::GroupInit group = {
 800370c:	f10d 0c04 	add.w	ip, sp, #4
 8003710:	341c      	adds	r4, #28
 8003712:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8003716:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
					.GPIOx = O_DIAG_EN_GPIO_Port,
					.GPIO_Pin = O_DIAG_EN_Pin
			}
	};

	m_relayGroup->initGroup(group, 0);
 800371a:	2200      	movs	r2, #0
 800371c:	4661      	mov	r1, ip
 800371e:	f8d5 00d0 	ldr.w	r0, [r5, #208]	@ 0xd0
 8003722:	f000 f938 	bl	8003996 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh>
	m_relayGroup->initKey(key, 0);
 8003726:	2200      	movs	r2, #0
 8003728:	a905      	add	r1, sp, #20
 800372a:	f8d5 00d0 	ldr.w	r0, [r5, #208]	@ 0xd0
 800372e:	f000 f8f1 	bl	8003914 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh>
	m_relayGroup->start();
 8003732:	f8d5 00d0 	ldr.w	r0, [r5, #208]	@ 0xd0
 8003736:	f000 f953 	bl	80039e0 <_ZN18Key_tps1htc30Group5startEv>
}
 800373a:	b00c      	add	sp, #48	@ 0x30
 800373c:	bd70      	pop	{r4, r5, r6, pc}
 800373e:	bf00      	nop
 8003740:	200002f0 	.word	0x200002f0
 8003744:	08007980 	.word	0x08007980

08003748 <_ZN15RelayControllerC1Ev>:
RelayController::RelayController()
 8003748:	b538      	push	{r3, r4, r5, lr}
 800374a:	4604      	mov	r4, r0
 800374c:	f001 f930 	bl	80049b0 <_ZN13TimingManagerC1Ev>
	struct pool_elem {
		u16 size;
		u8 data[];
	};

	ProtocolSender() = default;
 8003750:	2500      	movs	r5, #0
 8003752:	f8c4 50c8 	str.w	r5, [r4, #200]	@ 0xc8
 8003756:	f104 00cc 	add.w	r0, r4, #204	@ 0xcc
 800375a:	f001 f929 	bl	80049b0 <_ZN13TimingManagerC1Ev>
 800375e:	f8c4 50d0 	str.w	r5, [r4, #208]	@ 0xd0
	init_all();
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff ffb0 	bl	80036c8 <_ZN15RelayController8init_allEv>
}
 8003768:	4620      	mov	r0, r4
 800376a:	bd38      	pop	{r3, r4, r5, pc}

0800376c <_ZN15RelayController12get_instanceEv>:

RelayController* const RelayController::get_instance()
{
	static RelayController* const inst = new RelayController();
 800376c:	4b0e      	ldr	r3, [pc, #56]	@ (80037a8 <_ZN15RelayController12get_instanceEv+0x3c>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3bf 8f5b 	dmb	ish
 8003774:	f013 0f01 	tst.w	r3, #1
 8003778:	d002      	beq.n	8003780 <_ZN15RelayController12get_instanceEv+0x14>
	return inst;
}
 800377a:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <_ZN15RelayController12get_instanceEv+0x40>)
 800377c:	6818      	ldr	r0, [r3, #0]
 800377e:	4770      	bx	lr
{
 8003780:	b510      	push	{r4, lr}
	static RelayController* const inst = new RelayController();
 8003782:	4809      	ldr	r0, [pc, #36]	@ (80037a8 <_ZN15RelayController12get_instanceEv+0x3c>)
 8003784:	f001 fa96 	bl	8004cb4 <__cxa_guard_acquire>
 8003788:	b910      	cbnz	r0, 8003790 <_ZN15RelayController12get_instanceEv+0x24>
}
 800378a:	4b08      	ldr	r3, [pc, #32]	@ (80037ac <_ZN15RelayController12get_instanceEv+0x40>)
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	bd10      	pop	{r4, pc}
	static RelayController* const inst = new RelayController();
 8003790:	20e8      	movs	r0, #232	@ 0xe8
 8003792:	f001 fa9e 	bl	8004cd2 <_Znwj>
 8003796:	4604      	mov	r4, r0
 8003798:	f7ff ffd6 	bl	8003748 <_ZN15RelayControllerC1Ev>
 800379c:	4b03      	ldr	r3, [pc, #12]	@ (80037ac <_ZN15RelayController12get_instanceEv+0x40>)
 800379e:	601c      	str	r4, [r3, #0]
 80037a0:	4801      	ldr	r0, [pc, #4]	@ (80037a8 <_ZN15RelayController12get_instanceEv+0x3c>)
 80037a2:	f001 fa93 	bl	8004ccc <__cxa_guard_release>
 80037a6:	e7f0      	b.n	800378a <_ZN15RelayController12get_instanceEv+0x1e>
 80037a8:	2000033c 	.word	0x2000033c
 80037ac:	20000340 	.word	0x20000340

080037b0 <_ZN15RelayController7proceedEv>:

void RelayController::proceed()
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	4604      	mov	r4, r0

	while(true) {
		m_comm.proceed(HAL_GetTick());
 80037b4:	1d06      	adds	r6, r0, #4

		if(led_timer.isExpired()) {
			//UART_SendBuffer(&m_comm.stm32_uart, (uint8_t*)txBuff, sizeof(txBuff) - 1);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80037b6:	f8df 8038 	ldr.w	r8, [pc, #56]	@ 80037f0 <_ZN15RelayController7proceedEv+0x40>
 80037ba:	f44f 5700 	mov.w	r7, #8192	@ 0x2000
 80037be:	e00d      	b.n	80037dc <_ZN15RelayController7proceedEv+0x2c>
 80037c0:	4639      	mov	r1, r7
 80037c2:	4640      	mov	r0, r8
 80037c4:	f7fe fdee 	bl	80023a4 <HAL_GPIO_TogglePin>

    inline bool isExpired() const {
        return m_counter == 0;
    }

    inline void start(const uint32_t delay) { m_counter = delay; }
 80037c8:	2364      	movs	r3, #100	@ 0x64
 80037ca:	6023      	str	r3, [r4, #0]
//		if(adc->proceed(0)) {
//			for(int i = 0; i != 10; ++i) {
//				currents[i] = adc->getAdc(i);
//			}
//		}
		m_relayGroup->proceed(HAL_GetTick());
 80037cc:	f8d4 50d0 	ldr.w	r5, [r4, #208]	@ 0xd0
 80037d0:	f7fe f820 	bl	8001814 <HAL_GetTick>
 80037d4:	4601      	mov	r1, r0
 80037d6:	4628      	mov	r0, r5
 80037d8:	f000 f96c 	bl	8003ab4 <_ZN18Key_tps1htc30Group7proceedEm>
		m_comm.proceed(HAL_GetTick());
 80037dc:	f7fe f81a 	bl	8001814 <HAL_GetTick>
 80037e0:	4601      	mov	r1, r0
 80037e2:	4630      	mov	r0, r6
 80037e4:	f7ff ff42 	bl	800366c <_ZN14ProtocolSender7proceedEm>
        return m_counter == 0;
 80037e8:	6823      	ldr	r3, [r4, #0]
		if(led_timer.isExpired()) {
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0e8      	beq.n	80037c0 <_ZN15RelayController7proceedEv+0x10>
 80037ee:	e7ed      	b.n	80037cc <_ZN15RelayController7proceedEv+0x1c>
 80037f0:	40011000 	.word	0x40011000

080037f4 <app_main>:
#include <RelayController.h>

RelayController* global;

void app_main(void)
{
 80037f4:	b508      	push	{r3, lr}
	RelayController* const inst = global = RelayController::get_instance();
 80037f6:	f7ff ffb9 	bl	800376c <_ZN15RelayController12get_instanceEv>
 80037fa:	4b02      	ldr	r3, [pc, #8]	@ (8003804 <app_main+0x10>)
 80037fc:	6018      	str	r0, [r3, #0]
	inst->proceed();
 80037fe:	f7ff ffd7 	bl	80037b0 <_ZN15RelayController7proceedEv>
}
 8003802:	bd08      	pop	{r3, pc}
 8003804:	20000344 	.word	0x20000344

08003808 <_ZN18Key_tps1htc30Group11getInstanceEv>:

#include "Keytps1htc30Group.h"
#include "tools/irq/stm32_irq_block.h"

Key_tps1htc30Group* const Key_tps1htc30Group::getInstance()
{
 8003808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static Key_tps1htc30Group* const inst = new Key_tps1htc30Group;
 800380c:	4b3e      	ldr	r3, [pc, #248]	@ (8003908 <_ZN18Key_tps1htc30Group11getInstanceEv+0x100>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f3bf 8f5b 	dmb	ish
 8003814:	f013 0f01 	tst.w	r3, #1
 8003818:	d003      	beq.n	8003822 <_ZN18Key_tps1htc30Group11getInstanceEv+0x1a>
	return inst;
}
 800381a:	4b3c      	ldr	r3, [pc, #240]	@ (800390c <_ZN18Key_tps1htc30Group11getInstanceEv+0x104>)
 800381c:	6818      	ldr	r0, [r3, #0]
 800381e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static Key_tps1htc30Group* const inst = new Key_tps1htc30Group;
 8003822:	4839      	ldr	r0, [pc, #228]	@ (8003908 <_ZN18Key_tps1htc30Group11getInstanceEv+0x100>)
 8003824:	f001 fa46 	bl	8004cb4 <__cxa_guard_acquire>
 8003828:	2800      	cmp	r0, #0
 800382a:	d0f6      	beq.n	800381a <_ZN18Key_tps1htc30Group11getInstanceEv+0x12>
 800382c:	f44f 7033 	mov.w	r0, #716	@ 0x2cc
 8003830:	f001 fa4f 	bl	8004cd2 <_Znwj>
 8003834:	4605      	mov	r5, r0
	static constexpr float Rsns = 1000.0;		// Rsns resistance
	static constexpr float Ksns = 1300.0; 		// Rsns resistance
	static constexpr uint32_t K_Points = 1000; 	// K calibration points
	static constexpr uint32_t K_delay = 2000; 	// K calibration delay

	Key_tps1htc30Group() = default;
 8003836:	4604      	mov	r4, r0
 8003838:	f500 7922 	add.w	r9, r0, #648	@ 0x288
		const float current = ((voltage/*- m_v_rms*/) / Rsns) * Ksns;
		return (current > 0.0) ? current : 0.0;
	}

public:
	struct KeyGroup {
 800383c:	2730      	movs	r7, #48	@ 0x30
 800383e:	2600      	movs	r6, #0
 8003840:	f04f 0890 	mov.w	r8, #144	@ 0x90
 8003844:	463a      	mov	r2, r7
 8003846:	4631      	mov	r1, r6
 8003848:	4620      	mov	r0, r4
 800384a:	f002 fce1 	bl	8006210 <memset>
 800384e:	463a      	mov	r2, r7
 8003850:	4631      	mov	r1, r6
 8003852:	f104 0030 	add.w	r0, r4, #48	@ 0x30
 8003856:	f002 fcdb 	bl	8006210 <memset>
 800385a:	4642      	mov	r2, r8
 800385c:	4631      	mov	r1, r6
 800385e:	f104 009c 	add.w	r0, r4, #156	@ 0x9c
 8003862:	f002 fcd5 	bl	8006210 <memset>
 8003866:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800386a:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 800386e:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 8003872:	f8c4 30d0 	str.w	r3, [r4, #208]	@ 0xd0
 8003876:	f8c4 30e8 	str.w	r3, [r4, #232]	@ 0xe8
 800387a:	f8c4 3100 	str.w	r3, [r4, #256]	@ 0x100
 800387e:	f8c4 3118 	str.w	r3, [r4, #280]	@ 0x118
 8003882:	f8c4 612c 	str.w	r6, [r4, #300]	@ 0x12c
 8003886:	f8a4 6130 	strh.w	r6, [r4, #304]	@ 0x130
	GPIO_TypeDef* GPIOx = nullptr;
	uint16_t GPIO_Pin = 0;
};

// IO -----------------------------------------------------------
struct Stm32Pin_O
 800388a:	f8c4 6134 	str.w	r6, [r4, #308]	@ 0x134
 800388e:	f8a4 6138 	strh.w	r6, [r4, #312]	@ 0x138
 8003892:	f8c4 613c 	str.w	r6, [r4, #316]	@ 0x13c
 8003896:	f8a4 6140 	strh.w	r6, [r4, #320]	@ 0x140
	Key_tps1htc30Group() = default;
 800389a:	f504 74a2 	add.w	r4, r4, #324	@ 0x144
 800389e:	45a1      	cmp	r9, r4
 80038a0:	d1d0      	bne.n	8003844 <_ZN18Key_tps1htc30Group11getInstanceEv+0x3c>
		ADC_HandleTypeDef* hadc;
		float filter;
	};

public:
	Stm32ADC_dma() = default;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c5 3288 	str.w	r3, [r5, #648]	@ 0x288
 80038a8:	f885 328c 	strb.w	r3, [r5, #652]	@ 0x28c
 80038ac:	f8c5 3290 	str.w	r3, [r5, #656]	@ 0x290
 80038b0:	f885 3294 	strb.w	r3, [r5, #660]	@ 0x294
#include <cstdint>

class FP_MovingAverageBase
{
public:
	FP_MovingAverageBase() = default;
 80038b4:	f885 329c 	strb.w	r3, [r5, #668]	@ 0x29c
 80038b8:	f885 329d 	strb.w	r3, [r5, #669]	@ 0x29d
 80038bc:	f885 329e 	strb.w	r3, [r5, #670]	@ 0x29e
 80038c0:	2200      	movs	r2, #0
 80038c2:	f8c5 22a0 	str.w	r2, [r5, #672]	@ 0x2a0
 80038c6:	f8c5 32a4 	str.w	r3, [r5, #676]	@ 0x2a4
#include "FPMovingAverageBase.h"

class FP_MovingAverageArray: public FP_MovingAverageBase
{
public:
	FP_MovingAverageArray() = default;
 80038ca:	4a11      	ldr	r2, [pc, #68]	@ (8003910 <_ZN18Key_tps1htc30Group11getInstanceEv+0x108>)
 80038cc:	f8c5 2298 	str.w	r2, [r5, #664]	@ 0x298
 80038d0:	f8c5 32a8 	str.w	r3, [r5, #680]	@ 0x2a8
 80038d4:	f8c5 32ac 	str.w	r3, [r5, #684]	@ 0x2ac
 80038d8:	f885 32b0 	strb.w	r3, [r5, #688]	@ 0x2b0
 80038dc:	f8a5 32b4 	strh.w	r3, [r5, #692]	@ 0x2b4
 80038e0:	f885 32b6 	strb.w	r3, [r5, #694]	@ 0x2b6
 80038e4:	f885 32b7 	strb.w	r3, [r5, #695]	@ 0x2b7
 80038e8:	f885 32b8 	strb.w	r3, [r5, #696]	@ 0x2b8
 80038ec:	f8c5 32bc 	str.w	r3, [r5, #700]	@ 0x2bc
 80038f0:	f8c5 32c0 	str.w	r3, [r5, #704]	@ 0x2c0
 80038f4:	f8c5 32c4 	str.w	r3, [r5, #708]	@ 0x2c4
 80038f8:	f885 32c8 	strb.w	r3, [r5, #712]	@ 0x2c8
 80038fc:	4b03      	ldr	r3, [pc, #12]	@ (800390c <_ZN18Key_tps1htc30Group11getInstanceEv+0x104>)
 80038fe:	601d      	str	r5, [r3, #0]
 8003900:	4801      	ldr	r0, [pc, #4]	@ (8003908 <_ZN18Key_tps1htc30Group11getInstanceEv+0x100>)
 8003902:	f001 f9e3 	bl	8004ccc <__cxa_guard_release>
 8003906:	e788      	b.n	800381a <_ZN18Key_tps1htc30Group11getInstanceEv+0x12>
 8003908:	20000348 	.word	0x20000348
 800390c:	2000034c 	.word	0x2000034c
 8003910:	08008928 	.word	0x08008928

08003914 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh>:

bool Key_tps1htc30Group::initKey(const KeyInit &setting, const uint8_t group_id)
{
	uint8_t cnt = m_initPinCnt[group_id];

	if(group_id < Groups && cnt != N_ch_div && setting.adc_ch < m_adc.getChannels() ) {
 8003914:	2a01      	cmp	r2, #1
 8003916:	d901      	bls.n	800391c <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x8>
		m_initPinCnt[group_id] = cnt + 1;

		return true;
	}

	return false;
 8003918:	2000      	movs	r0, #0
}
 800391a:	4770      	bx	lr
{
 800391c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800391e:	4605      	mov	r5, r0
 8003920:	4614      	mov	r4, r2
	uint8_t cnt = m_initPinCnt[group_id];
 8003922:	1883      	adds	r3, r0, r2
 8003924:	f893 62b4 	ldrb.w	r6, [r3, #692]	@ 0x2b4
	if(group_id < Groups && cnt != N_ch_div && setting.adc_ch < m_adc.getChannels() ) {
 8003928:	2e06      	cmp	r6, #6
 800392a:	d032      	beq.n	8003992 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x7e>
 800392c:	7c0a      	ldrb	r2, [r1, #16]
 800392e:	f890 328c 	ldrb.w	r3, [r0, #652]	@ 0x28c
 8003932:	429a      	cmp	r2, r3
 8003934:	d301      	bcc.n	800393a <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x26>
	return false;
 8003936:	2000      	movs	r0, #0
}
 8003938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m_keys[group_id].o_en[cnt] = setting.o_en;
 800393a:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 800393e:	fb03 f004 	mul.w	r0, r3, r4
 8003942:	eb05 07c6 	add.w	r7, r5, r6, lsl #3
 8003946:	183a      	adds	r2, r7, r0
 8003948:	f8d1 c000 	ldr.w	ip, [r1]
 800394c:	f847 c000 	str.w	ip, [r7, r0]
 8003950:	8888      	ldrh	r0, [r1, #4]
 8003952:	8090      	strh	r0, [r2, #4]
		m_keys[group_id].i_fault[cnt] = setting.i_fault;
 8003954:	6888      	ldr	r0, [r1, #8]
 8003956:	6310      	str	r0, [r2, #48]	@ 0x30
 8003958:	8988      	ldrh	r0, [r1, #12]
 800395a:	8690      	strh	r0, [r2, #52]	@ 0x34
		m_keys[group_id].adc_ch[cnt] = setting.adc_ch;
 800395c:	7c0a      	ldrb	r2, [r1, #16]
 800395e:	fb04 f303 	mul.w	r3, r4, r3
 8003962:	18ef      	adds	r7, r5, r3
 8003964:	4437      	add	r7, r6
 8003966:	f887 2060 	strb.w	r2, [r7, #96]	@ 0x60
{

	inline void set_output(bool state) {
		HAL_GPIO_WritePin(GPIOx, GPIO_Pin, (state) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800396a:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800396e:	18e9      	adds	r1, r5, r3
 8003970:	2200      	movs	r2, #0
 8003972:	8889      	ldrh	r1, [r1, #4]
 8003974:	58e8      	ldr	r0, [r5, r3]
 8003976:	f7fe fd0f 	bl	8002398 <HAL_GPIO_WritePin>
		m_keys[group_id].out_state[cnt] = false;
 800397a:	2300      	movs	r3, #0
 800397c:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
		m_keys[group_id].err[cnt] = error::PowerOff;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 312c 	strb.w	r3, [r7, #300]	@ 0x12c
		m_initPinCnt[group_id] = cnt + 1;
 8003986:	1928      	adds	r0, r5, r4
 8003988:	441e      	add	r6, r3
 800398a:	f880 62b4 	strb.w	r6, [r0, #692]	@ 0x2b4
		return true;
 800398e:	4618      	mov	r0, r3
 8003990:	e7d2      	b.n	8003938 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x24>
	return false;
 8003992:	2000      	movs	r0, #0
 8003994:	e7d0      	b.n	8003938 <_ZN18Key_tps1htc30Group7initKeyERKNS_7KeyInitEh+0x24>

08003996 <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh>:

bool Key_tps1htc30Group::initGroup(const GroupInit &setting, const uint8_t group_id)
{
	if(group_id < Groups) {
 8003996:	2a01      	cmp	r2, #1
 8003998:	d901      	bls.n	800399e <_ZN18Key_tps1htc30Group9initGroupERKNS_9GroupInitEh+0x8>
		m_keys[group_id].o_latch.set_output(false);

		return true;
	}

	return false;
 800399a:	2000      	movs	r0, #0
}
 800399c:	4770      	bx	lr
{
 800399e:	b510      	push	{r4, lr}
		m_keys[group_id].o_diag_en = setting.o_diag_en;
 80039a0:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 80039a4:	fb03 0402 	mla	r4, r3, r2, r0
 80039a8:	688b      	ldr	r3, [r1, #8]
 80039aa:	f8c4 313c 	str.w	r3, [r4, #316]	@ 0x13c
 80039ae:	898b      	ldrh	r3, [r1, #12]
 80039b0:	f8a4 3140 	strh.w	r3, [r4, #320]	@ 0x140
		m_keys[group_id].o_latch = setting.o_latch;
 80039b4:	680b      	ldr	r3, [r1, #0]
 80039b6:	f8c4 3134 	str.w	r3, [r4, #308]	@ 0x134
 80039ba:	888b      	ldrh	r3, [r1, #4]
 80039bc:	f8a4 3138 	strh.w	r3, [r4, #312]	@ 0x138
 80039c0:	2200      	movs	r2, #0
 80039c2:	f8b4 1140 	ldrh.w	r1, [r4, #320]	@ 0x140
 80039c6:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
 80039ca:	f7fe fce5 	bl	8002398 <HAL_GPIO_WritePin>
 80039ce:	2200      	movs	r2, #0
 80039d0:	f8b4 1138 	ldrh.w	r1, [r4, #312]	@ 0x138
 80039d4:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
 80039d8:	f7fe fcde 	bl	8002398 <HAL_GPIO_WritePin>
		return true;
 80039dc:	2001      	movs	r0, #1
}
 80039de:	bd10      	pop	{r4, pc}

080039e0 <_ZN18Key_tps1htc30Group5startEv>:

bool Key_tps1htc30Group::start()
{
 80039e0:	b508      	push	{r3, lr}
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
		const uint8_t cnt = m_initPinCnt[group_id];
 80039e2:	f890 22b4 	ldrb.w	r2, [r0, #692]	@ 0x2b4

		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 80039e6:	b1ba      	cbz	r2, 8003a18 <_ZN18Key_tps1htc30Group5startEv+0x38>
			m_keys[group_id].m_range[cnt].init(/*min*/0.05, /*max*/4.0, K_delay);
 80039e8:	2300      	movs	r3, #0
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 80039ea:	3301      	adds	r3, #1
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d1fc      	bne.n	80039ea <_ZN18Key_tps1htc30Group5startEv+0xa>
 80039f0:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80039f4:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 80039f8:	4917      	ldr	r1, [pc, #92]	@ (8003a58 <_ZN18Key_tps1htc30Group5startEv+0x78>)
 80039fa:	f8c3 10ac 	str.w	r1, [r3, #172]	@ 0xac
 80039fe:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003a02:	f8c3 10b0 	str.w	r1, [r3, #176]	@ 0xb0
 8003a06:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003a0a:	f8c3 10a0 	str.w	r1, [r3, #160]	@ 0xa0
 8003a0e:	2100      	movs	r1, #0
 8003a10:	f8c3 109c 	str.w	r1, [r3, #156]	@ 0x9c
 8003a14:	f883 10a8 	strb.w	r1, [r3, #168]	@ 0xa8
		const uint8_t cnt = m_initPinCnt[group_id];
 8003a18:	f890 22b5 	ldrb.w	r2, [r0, #693]	@ 0x2b5
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003a1c:	b1ba      	cbz	r2, 8003a4e <_ZN18Key_tps1htc30Group5startEv+0x6e>
			m_keys[group_id].m_range[cnt].init(/*min*/0.05, /*max*/4.0, K_delay);
 8003a1e:	2300      	movs	r3, #0
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003a20:	3301      	adds	r3, #1
 8003a22:	429a      	cmp	r2, r3
 8003a24:	d1fc      	bne.n	8003a20 <_ZN18Key_tps1htc30Group5startEv+0x40>
 8003a26:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8003a2a:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8003a2e:	490a      	ldr	r1, [pc, #40]	@ (8003a58 <_ZN18Key_tps1htc30Group5startEv+0x78>)
 8003a30:	f8c3 11f0 	str.w	r1, [r3, #496]	@ 0x1f0
 8003a34:	f04f 4181 	mov.w	r1, #1082130432	@ 0x40800000
 8003a38:	f8c3 11f4 	str.w	r1, [r3, #500]	@ 0x1f4
 8003a3c:	f44f 61fa 	mov.w	r1, #2000	@ 0x7d0
 8003a40:	f8c3 11e4 	str.w	r1, [r3, #484]	@ 0x1e4
 8003a44:	2100      	movs	r1, #0
 8003a46:	f8c3 11e0 	str.w	r1, [r3, #480]	@ 0x1e0
 8003a4a:	f883 11ec 	strb.w	r1, [r3, #492]	@ 0x1ec
		}
	}

	return m_adc.start();
 8003a4e:	f500 7022 	add.w	r0, r0, #648	@ 0x288
 8003a52:	f000 fe4d 	bl	80046f0 <_ZN12Stm32ADC_dma5startEv>
}
 8003a56:	bd08      	pop	{r3, pc}
 8003a58:	3d4ccccd 	.word	0x3d4ccccd

08003a5c <_ZN18Key_tps1htc30Group7set_outEbhh>:
		const uint8_t key_id)
{

	const uint8_t cnt = m_initPinCnt[group_id];

	if(group_id < Groups && key_id < cnt) {
 8003a5c:	2a01      	cmp	r2, #1
 8003a5e:	d900      	bls.n	8003a62 <_ZN18Key_tps1htc30Group7set_outEbhh+0x6>
 8003a60:	4770      	bx	lr
{
 8003a62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a66:	4607      	mov	r7, r0
 8003a68:	460e      	mov	r6, r1
 8003a6a:	461d      	mov	r5, r3
	const uint8_t cnt = m_initPinCnt[group_id];
 8003a6c:	1883      	adds	r3, r0, r2
	if(group_id < Groups && key_id < cnt) {
 8003a6e:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 8003a72:	42ab      	cmp	r3, r5
 8003a74:	d801      	bhi.n	8003a7a <_ZN18Key_tps1htc30Group7set_outEbhh+0x1e>
		m_keys[group_id].o_en[key_id].set_output(en);
		m_keys[group_id].o_diag_en.set_output(en);
		m_keys[group_id].err[key_id] = en ? error::Work : error::PowerOff;
	}
}
 8003a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a7a:	f44f 78a2 	mov.w	r8, #324	@ 0x144
 8003a7e:	fb08 f802 	mul.w	r8, r8, r2
 8003a82:	eb08 03c5 	add.w	r3, r8, r5, lsl #3
 8003a86:	18c1      	adds	r1, r0, r3
 8003a88:	4632      	mov	r2, r6
 8003a8a:	8889      	ldrh	r1, [r1, #4]
 8003a8c:	58c0      	ldr	r0, [r0, r3]
 8003a8e:	f7fe fc83 	bl	8002398 <HAL_GPIO_WritePin>
 8003a92:	44b8      	add	r8, r7
 8003a94:	4632      	mov	r2, r6
 8003a96:	f8b8 1140 	ldrh.w	r1, [r8, #320]	@ 0x140
 8003a9a:	f8d8 013c 	ldr.w	r0, [r8, #316]	@ 0x13c
 8003a9e:	f7fe fc7b 	bl	8002398 <HAL_GPIO_WritePin>
		m_keys[group_id].err[key_id] = en ? error::Work : error::PowerOff;
 8003aa2:	2e00      	cmp	r6, #0
 8003aa4:	bf0c      	ite	eq
 8003aa6:	2101      	moveq	r1, #1
 8003aa8:	2104      	movne	r1, #4
 8003aaa:	4642      	mov	r2, r8
 8003aac:	1953      	adds	r3, r2, r5
 8003aae:	f883 112c 	strb.w	r1, [r3, #300]	@ 0x12c
}
 8003ab2:	e7e0      	b.n	8003a76 <_ZN18Key_tps1htc30Group7set_outEbhh+0x1a>

08003ab4 <_ZN18Key_tps1htc30Group7proceedEm>:
{
 8003ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ab8:	b087      	sub	sp, #28
 8003aba:	4683      	mov	fp, r0
 8003abc:	9101      	str	r1, [sp, #4]
	if(!m_adc.proceed(current_time)) {
 8003abe:	f500 7022 	add.w	r0, r0, #648	@ 0x288
 8003ac2:	f000 fe3d 	bl	8004740 <_ZN12Stm32ADC_dma7proceedEm>
 8003ac6:	b370      	cbz	r0, 8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
	if(m_needCalibration) {
 8003ac8:	f89b 32b6 	ldrb.w	r3, [fp, #694]	@ 0x2b6
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d07a      	beq.n	8003bc6 <_ZN18Key_tps1htc30Group7proceedEm+0x112>
		if(m_calib_counter == 0) {
 8003ad0:	f8db 32bc 	ldr.w	r3, [fp, #700]	@ 0x2bc
 8003ad4:	b353      	cbz	r3, 8003b2c <_ZN18Key_tps1htc30Group7proceedEm+0x78>
		if((current_time - last_time) < K_delay) {
 8003ad6:	f8db 32c4 	ldr.w	r3, [fp, #708]	@ 0x2c4
 8003ada:	9a01      	ldr	r2, [sp, #4]
 8003adc:	1ad3      	subs	r3, r2, r3
 8003ade:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003ae2:	d320      	bcc.n	8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
		const uint8_t 	ch 	=  	m_keys[m_group_it].adc_ch[m_key_it];
 8003ae4:	f89b 52b7 	ldrb.w	r5, [fp, #695]	@ 0x2b7
 8003ae8:	f89b 42b8 	ldrb.w	r4, [fp, #696]	@ 0x2b8
 8003aec:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8003af0:	fb03 b305 	mla	r3, r3, r5, fp
 8003af4:	4423      	add	r3, r4
 8003af6:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
	void allocArrays(const uint8_t n);
	void proceed(uint16_t* const values);

	inline uint32_t getOut(const uint8_t n) const
	{
		if(n < m_n) {
 8003afa:	f89b 22b0 	ldrb.w	r2, [fp, #688]	@ 0x2b0
 8003afe:	429a      	cmp	r2, r3
			return m_y[n];
 8003b00:	bf86      	itte	hi
 8003b02:	f8db 22ac 	ldrhi.w	r2, [fp, #684]	@ 0x2ac
 8003b06:	f852 0023 	ldrhi.w	r0, [r2, r3, lsl #2]
		}
		return 0;
 8003b0a:	2000      	movls	r0, #0
		m_summ += val;
 8003b0c:	f8db 32c0 	ldr.w	r3, [fp, #704]	@ 0x2c0
 8003b10:	4418      	add	r0, r3
 8003b12:	f8cb 02c0 	str.w	r0, [fp, #704]	@ 0x2c0
		++m_calib_counter;
 8003b16:	f8db 32bc 	ldr.w	r3, [fp, #700]	@ 0x2bc
 8003b1a:	3301      	adds	r3, #1
 8003b1c:	f8cb 32bc 	str.w	r3, [fp, #700]	@ 0x2bc
		if(m_calib_counter == K_Points) {
 8003b20:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003b24:	d01e      	beq.n	8003b64 <_ZN18Key_tps1htc30Group7proceedEm+0xb0>
}
 8003b26:	b007      	add	sp, #28
 8003b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m_summ = 0;
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	f8cb 12c0 	str.w	r1, [fp, #704]	@ 0x2c0
			m_keys[m_group_it].adc_offset[m_key_it] = 0;
 8003b32:	f89b 22b7 	ldrb.w	r2, [fp, #695]	@ 0x2b7
 8003b36:	f89b 32b8 	ldrb.w	r3, [fp, #696]	@ 0x2b8
 8003b3a:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
 8003b3e:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
 8003b42:	4418      	add	r0, r3
 8003b44:	3020      	adds	r0, #32
 8003b46:	eb0b 0080 	add.w	r0, fp, r0, lsl #2
 8003b4a:	6041      	str	r1, [r0, #4]
			m_keys[m_group_it].err[m_key_it] = error::Calibration;
 8003b4c:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8003b50:	fb00 b002 	mla	r0, r0, r2, fp
 8003b54:	4418      	add	r0, r3
 8003b56:	2402      	movs	r4, #2
 8003b58:	f880 412c 	strb.w	r4, [r0, #300]	@ 0x12c
			set_out(false, m_group_it, m_key_it);
 8003b5c:	4658      	mov	r0, fp
 8003b5e:	f7ff ff7d 	bl	8003a5c <_ZN18Key_tps1htc30Group7set_outEbhh>
 8003b62:	e7b8      	b.n	8003ad6 <_ZN18Key_tps1htc30Group7proceedEm+0x22>
			m_keys[m_group_it].adc_offset[m_key_it] = m_summ / static_cast<float>(K_Points);
 8003b64:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
 8003b68:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
 8003b6c:	191e      	adds	r6, r3, r4
 8003b6e:	3620      	adds	r6, #32
 8003b70:	eb0b 0686 	add.w	r6, fp, r6, lsl #2
 8003b74:	f7fd f83e 	bl	8000bf4 <__aeabi_ui2f>
 8003b78:	498b      	ldr	r1, [pc, #556]	@ (8003da8 <_ZN18Key_tps1htc30Group7proceedEm+0x2f4>)
 8003b7a:	f7fd f947 	bl	8000e0c <__aeabi_fdiv>
 8003b7e:	f7fd fa93 	bl	80010a8 <__aeabi_f2uiz>
 8003b82:	6070      	str	r0, [r6, #4]
			m_keys[m_group_it].err[m_key_it] = error::PowerOff;
 8003b84:	f44f 73a2 	mov.w	r3, #324	@ 0x144
 8003b88:	fb03 b305 	mla	r3, r3, r5, fp
 8003b8c:	4423      	add	r3, r4
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
			m_calib_counter = 0;
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8cb 32bc 	str.w	r3, [fp, #700]	@ 0x2bc
			++m_key_it;
 8003b9a:	18a3      	adds	r3, r4, r2
 8003b9c:	b2db      	uxtb	r3, r3
 8003b9e:	f88b 32b8 	strb.w	r3, [fp, #696]	@ 0x2b8
			if(m_key_it == m_initPinCnt[m_group_it]) {
 8003ba2:	eb0b 0205 	add.w	r2, fp, r5
 8003ba6:	f892 22b4 	ldrb.w	r2, [r2, #692]	@ 0x2b4
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d1bb      	bne.n	8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
				++m_group_it;
 8003bae:	1c6b      	adds	r3, r5, #1
 8003bb0:	b2db      	uxtb	r3, r3
 8003bb2:	f88b 32b7 	strb.w	r3, [fp, #695]	@ 0x2b7
				m_key_it = 0;
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f88b 22b8 	strb.w	r2, [fp, #696]	@ 0x2b8
				if(m_group_it == Groups) {
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d1b2      	bne.n	8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
					m_needCalibration = false;
 8003bc0:	f88b 22b6 	strb.w	r2, [fp, #694]	@ 0x2b6
 8003bc4:	e7af      	b.n	8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
	} else if(m_openLoadChk) {
 8003bc6:	f89b 32c8 	ldrb.w	r3, [fp, #712]	@ 0x2c8
 8003bca:	b95b      	cbnz	r3, 8003be4 <_ZN18Key_tps1htc30Group7proceedEm+0x130>
	last_time = current_time;
 8003bcc:	9b01      	ldr	r3, [sp, #4]
 8003bce:	f8cb 32c4 	str.w	r3, [fp, #708]	@ 0x2c4
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8003bd2:	f20b 28b3 	addw	r8, fp, #691	@ 0x2b3
 8003bd6:	f20b 2ab5 	addw	sl, fp, #693	@ 0x2b5
				err = error::Fault;
 8003bda:	465d      	mov	r5, fp
 8003bdc:	f8cd a014 	str.w	sl, [sp, #20]
 8003be0:	46c2      	mov	sl, r8
 8003be2:	e0cf      	b.n	8003d84 <_ZN18Key_tps1htc30Group7proceedEm+0x2d0>
		set_out(false, m_group_it, m_key_it);
 8003be4:	f89b 32b8 	ldrb.w	r3, [fp, #696]	@ 0x2b8
 8003be8:	f89b 22b7 	ldrb.w	r2, [fp, #695]	@ 0x2b7
 8003bec:	2100      	movs	r1, #0
 8003bee:	4658      	mov	r0, fp
 8003bf0:	f7ff ff34 	bl	8003a5c <_ZN18Key_tps1htc30Group7set_outEbhh>
		m_keys[m_group_it].err[m_key_it] = error::OpenLoadCHK;
 8003bf4:	f89b 32b7 	ldrb.w	r3, [fp, #695]	@ 0x2b7
 8003bf8:	f89b 22b8 	ldrb.w	r2, [fp, #696]	@ 0x2b8
 8003bfc:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8003c00:	fb01 b303 	mla	r3, r1, r3, fp
 8003c04:	441a      	add	r2, r3
 8003c06:	2103      	movs	r1, #3
 8003c08:	f882 112c 	strb.w	r1, [r2, #300]	@ 0x12c
 8003c0c:	2201      	movs	r2, #1
 8003c0e:	f8b3 1140 	ldrh.w	r1, [r3, #320]	@ 0x140
 8003c12:	f8d3 013c 	ldr.w	r0, [r3, #316]	@ 0x13c
 8003c16:	f7fe fbbf 	bl	8002398 <HAL_GPIO_WritePin>
		if((current_time - last_time) < K_delay) {
 8003c1a:	f8db 32c4 	ldr.w	r3, [fp, #708]	@ 0x2c4
 8003c1e:	9a01      	ldr	r2, [sp, #4]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8003c26:	f4ff af7e 	bcc.w	8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
		const uint8_t 	ch 	=  	m_keys[m_group_it].adc_ch[m_key_it];
 8003c2a:	f89b 32b7 	ldrb.w	r3, [fp, #695]	@ 0x2b7
 8003c2e:	f89b 12b8 	ldrb.w	r1, [fp, #696]	@ 0x2b8
 8003c32:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8003c36:	fb02 b203 	mla	r2, r2, r3, fp
 8003c3a:	440a      	add	r2, r1
 8003c3c:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
		if(n < m_n) {
 8003c40:	f89b 02b0 	ldrb.w	r0, [fp, #688]	@ 0x2b0
 8003c44:	4290      	cmp	r0, r2
			return m_y[n];
 8003c46:	bf86      	itte	hi
 8003c48:	f8db 02ac 	ldrhi.w	r0, [fp, #684]	@ 0x2ac
 8003c4c:	f850 4022 	ldrhi.w	r4, [r0, r2, lsl #2]
		return 0;
 8003c50:	2400      	movls	r4, #0
		return HAL_GPIO_ReadPin(GPIOx, GPIO_Pin) == GPIO_PIN_SET;
 8003c52:	3106      	adds	r1, #6
 8003c54:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 8003c58:	fb02 f303 	mul.w	r3, r2, r3
 8003c5c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8003c60:	eb0b 0203 	add.w	r2, fp, r3
 8003c64:	8891      	ldrh	r1, [r2, #4]
 8003c66:	f85b 0003 	ldr.w	r0, [fp, r3]
 8003c6a:	f7fe fb8f 	bl	800238c <HAL_GPIO_ReadPin>
		m_keys[m_group_it].err[m_key_it] = ( (!m_keys[m_group_it].i_fault[m_key_it].get_input()) || (val > 4000) ) ? error::OpenLoad : error::OK;
 8003c6e:	2801      	cmp	r0, #1
 8003c70:	d00f      	beq.n	8003c92 <_ZN18Key_tps1htc30Group7proceedEm+0x1de>
 8003c72:	2206      	movs	r2, #6
 8003c74:	f89b 32b7 	ldrb.w	r3, [fp, #695]	@ 0x2b7
 8003c78:	f89b 12b8 	ldrb.w	r1, [fp, #696]	@ 0x2b8
 8003c7c:	f44f 70a2 	mov.w	r0, #324	@ 0x144
 8003c80:	fb00 b303 	mla	r3, r0, r3, fp
 8003c84:	440b      	add	r3, r1
 8003c86:	f883 212c 	strb.w	r2, [r3, #300]	@ 0x12c
		m_openLoadChk = false;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f88b 32c8 	strb.w	r3, [fp, #712]	@ 0x2c8
 8003c90:	e79c      	b.n	8003bcc <_ZN18Key_tps1htc30Group7proceedEm+0x118>
		m_keys[m_group_it].err[m_key_it] = ( (!m_keys[m_group_it].i_fault[m_key_it].get_input()) || (val > 4000) ) ? error::OpenLoad : error::OK;
 8003c92:	f5b4 6f7a 	cmp.w	r4, #4000	@ 0xfa0
 8003c96:	bf94      	ite	ls
 8003c98:	2207      	movls	r2, #7
 8003c9a:	2206      	movhi	r2, #6
 8003c9c:	e7ea      	b.n	8003c74 <_ZN18Key_tps1htc30Group7proceedEm+0x1c0>

template<class T>
typename InRangeDetector<T>::error InRangeDetector<T>::proceed(const uint32_t current_time, const T value)
{
	if(m_last_time == current_time) {
		return m_lastError;
 8003c9e:	f899 50a8 	ldrb.w	r5, [r9, #168]	@ 0xa8
 8003ca2:	e00e      	b.n	8003cc2 <_ZN18Key_tps1htc30Group7proceedEm+0x20e>
	}

	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003ca4:	2101      	movs	r1, #1

	if(reg_error != error::None) {
		const uint32_t next_counter = m_time_counter + 1;
 8003ca6:	f8da 309c 	ldr.w	r3, [sl, #156]	@ 0x9c
 8003caa:	3301      	adds	r3, #1

		if(next_counter < m_dt) {
 8003cac:	f8da 20a0 	ldr.w	r2, [sl, #160]	@ 0xa0
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d24a      	bcs.n	8003d4a <_ZN18Key_tps1htc30Group7proceedEm+0x296>
			m_time_counter = next_counter;
 8003cb4:	f8ca 309c 	str.w	r3, [sl, #156]	@ 0x9c
			m_time_counter = 0;
			m_lastError = error::None;
		}
	}

	m_last_time = current_time;
 8003cb8:	9b01      	ldr	r3, [sp, #4]
 8003cba:	f8ca 30a4 	str.w	r3, [sl, #164]	@ 0xa4

	return m_lastError;
 8003cbe:	f89a 50a8 	ldrb.w	r5, [sl, #168]	@ 0xa8
 8003cc2:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8003cc4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003cc6:	f7fe fb61 	bl	800238c <HAL_GPIO_ReadPin>
			if(!m_keys[group_id].i_fault[key_id].get_input()) {
 8003cca:	2801      	cmp	r0, #1
 8003ccc:	d048      	beq.n	8003d60 <_ZN18Key_tps1htc30Group7proceedEm+0x2ac>
				err = error::Fault;
 8003cce:	2305      	movs	r3, #5
			m_keys[group_id].err[key_id] = err;
 8003cd0:	f888 30cc 	strb.w	r3, [r8, #204]	@ 0xcc
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	f109 0918 	add.w	r9, r9, #24
 8003cda:	9b02      	ldr	r3, [sp, #8]
 8003cdc:	429f      	cmp	r7, r3
 8003cde:	d048      	beq.n	8003d72 <_ZN18Key_tps1htc30Group7proceedEm+0x2be>
			const uint8_t ch =  m_keys[group_id].adc_ch[key_id];
 8003ce0:	3601      	adds	r6, #1
 8003ce2:	46b0      	mov	r8, r6
 8003ce4:	7833      	ldrb	r3, [r6, #0]
		if(n < m_n) {
 8003ce6:	f89b 22b0 	ldrb.w	r2, [fp, #688]	@ 0x2b0
 8003cea:	429a      	cmp	r2, r3
			return m_y[n];
 8003cec:	bf86      	itte	hi
 8003cee:	f8db 22ac 	ldrhi.w	r2, [fp, #684]	@ 0x2ac
 8003cf2:	f852 0023 	ldrhi.w	r0, [r2, r3, lsl #2]
		return 0;
 8003cf6:	2000      	movls	r0, #0
			const float curr = m_keys[group_id].current[key_id] = val;//calculateCurrent(val);
 8003cf8:	f7fc ff7c 	bl	8000bf4 <__aeabi_ui2f>
 8003cfc:	4605      	mov	r5, r0
 8003cfe:	f844 0f04 	str.w	r0, [r4, #4]!
			error err = m_keys[group_id].err[key_id];
 8003d02:	f896 30cc 	ldrb.w	r3, [r6, #204]	@ 0xcc
			if(err == error::PowerOff || err == error::OpenLoad || err == error::OK) {
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d0e4      	beq.n	8003cd4 <_ZN18Key_tps1htc30Group7proceedEm+0x220>
 8003d0a:	3b06      	subs	r3, #6
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d9e0      	bls.n	8003cd4 <_ZN18Key_tps1htc30Group7proceedEm+0x220>
typename InRangeDetector<T>::error InRangeDetector<T>::proceed(const uint32_t current_time, const T value)
 8003d12:	46ca      	mov	sl, r9
	if(m_last_time == current_time) {
 8003d14:	f8d9 30a4 	ldr.w	r3, [r9, #164]	@ 0xa4
 8003d18:	9a01      	ldr	r2, [sp, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d0bf      	beq.n	8003c9e <_ZN18Key_tps1htc30Group7proceedEm+0x1ea>
	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003d1e:	f8d9 10ac 	ldr.w	r1, [r9, #172]	@ 0xac
 8003d22:	f7fd f95d 	bl	8000fe0 <__aeabi_fcmplt>
 8003d26:	2800      	cmp	r0, #0
 8003d28:	d1bc      	bne.n	8003ca4 <_ZN18Key_tps1htc30Group7proceedEm+0x1f0>
 8003d2a:	f8d9 10b0 	ldr.w	r1, [r9, #176]	@ 0xb0
 8003d2e:	4628      	mov	r0, r5
 8003d30:	f7fd f974 	bl	800101c <__aeabi_fcmpgt>
 8003d34:	b938      	cbnz	r0, 8003d46 <_ZN18Key_tps1htc30Group7proceedEm+0x292>
		const int next_counter = m_time_counter - 1;
 8003d36:	f8d9 309c 	ldr.w	r3, [r9, #156]	@ 0x9c
 8003d3a:	3b01      	subs	r3, #1
		if(next_counter > 0) {
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	dd09      	ble.n	8003d54 <_ZN18Key_tps1htc30Group7proceedEm+0x2a0>
			m_time_counter = next_counter;
 8003d40:	f8c9 309c 	str.w	r3, [r9, #156]	@ 0x9c
 8003d44:	e7b8      	b.n	8003cb8 <_ZN18Key_tps1htc30Group7proceedEm+0x204>
	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003d46:	2102      	movs	r1, #2
 8003d48:	e7ad      	b.n	8003ca6 <_ZN18Key_tps1htc30Group7proceedEm+0x1f2>
		} else if(next_counter == m_dt) {
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d1b4      	bne.n	8003cb8 <_ZN18Key_tps1htc30Group7proceedEm+0x204>
			m_lastError = reg_error;
 8003d4e:	f88a 10a8 	strb.w	r1, [sl, #168]	@ 0xa8
 8003d52:	e7b1      	b.n	8003cb8 <_ZN18Key_tps1htc30Group7proceedEm+0x204>
			m_time_counter = 0;
 8003d54:	2300      	movs	r3, #0
 8003d56:	f8c9 309c 	str.w	r3, [r9, #156]	@ 0x9c
			m_lastError = error::None;
 8003d5a:	f889 30a8 	strb.w	r3, [r9, #168]	@ 0xa8
 8003d5e:	e7ab      	b.n	8003cb8 <_ZN18Key_tps1htc30Group7proceedEm+0x204>
			} else if(rangeErr == InRangeDetector_f::error::OutOfMinimumBoarder) {
 8003d60:	2d01      	cmp	r5, #1
 8003d62:	d004      	beq.n	8003d6e <_ZN18Key_tps1htc30Group7proceedEm+0x2ba>
				err = error::Fault;
 8003d64:	2d02      	cmp	r5, #2
 8003d66:	bf14      	ite	ne
 8003d68:	2304      	movne	r3, #4
 8003d6a:	2305      	moveq	r3, #5
 8003d6c:	e7b0      	b.n	8003cd0 <_ZN18Key_tps1htc30Group7proceedEm+0x21c>
				err = error::OpenLoad;
 8003d6e:	2306      	movs	r3, #6
 8003d70:	e7ae      	b.n	8003cd0 <_ZN18Key_tps1htc30Group7proceedEm+0x21c>
 8003d72:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8003d76:	9d04      	ldr	r5, [sp, #16]
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8003d78:	f505 75a2 	add.w	r5, r5, #324	@ 0x144
 8003d7c:	9b05      	ldr	r3, [sp, #20]
 8003d7e:	459a      	cmp	sl, r3
 8003d80:	f43f aed1 	beq.w	8003b26 <_ZN18Key_tps1htc30Group7proceedEm+0x72>
		const uint8_t cnt = m_initPinCnt[group_id];
 8003d84:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 8003d88:	2a00      	cmp	r2, #0
 8003d8a:	d0f5      	beq.n	8003d78 <_ZN18Key_tps1htc30Group7proceedEm+0x2c4>
 8003d8c:	f105 065f 	add.w	r6, r5, #95	@ 0x5f
 8003d90:	f105 0468 	add.w	r4, r5, #104	@ 0x68
 8003d94:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
 8003d98:	9302      	str	r3, [sp, #8]
 8003d9a:	46a9      	mov	r9, r5
 8003d9c:	462f      	mov	r7, r5
	const error reg_error = (value < m_minimum) ? error::OutOfMinimumBoarder : ( (value > m_maximum) ? error::OutOfMaximumBoarder : error::None );
 8003d9e:	f8cd a00c 	str.w	sl, [sp, #12]
 8003da2:	9504      	str	r5, [sp, #16]
 8003da4:	e79c      	b.n	8003ce0 <_ZN18Key_tps1htc30Group7proceedEm+0x22c>
 8003da6:	bf00      	nop
 8003da8:	447a0000 	.word	0x447a0000

08003dac <crc_from_ringbuf>:
// include assert engine
#include "assertsEngine/assert_engine.h"
#define _INT_SWITCH(...) __VA_ARGS__

void crc_from_ringbuf(crc_obj_t* const crc_base, const ringbuf_t* const ring_buf)
{
 8003dac:	b570      	push	{r4, r5, r6, lr}
	_INT_SWITCH(M_Assert_Break(ring_buf == NULL || crc_base == NULL, M_EMPTY, return,
			"not valid parameters"));

	const u8* const ring_ptr 	= ring_buf->buffer;
 8003dae:	694e      	ldr	r6, [r1, #20]

	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return,
 8003db0:	b1be      	cbz	r6, 8003de2 <crc_from_ringbuf+0x36>
 8003db2:	4605      	mov	r5, r0
					"no buffer internal");

	const reg tail_reg 			= ring_buf->base.tail;
 8003db4:	68c8      	ldr	r0, [r1, #12]
	const reg head_reg 			= ring_buf->base.head;
 8003db6:	690a      	ldr	r2, [r1, #16]
	const reg msk_reg			= ring_buf->base.msk;

	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return, "ring buffer is empty");
 8003db8:	4290      	cmp	r0, r2
 8003dba:	d012      	beq.n	8003de2 <crc_from_ringbuf+0x36>

	const reg tail_pos 			= tail_reg & msk_reg;								// get tail position
 8003dbc:	684b      	ldr	r3, [r1, #4]
 8003dbe:	4003      	ands	r3, r0
	const reg n_elem 			= _FIFO_LEN_IMPL(tail_reg, head_reg); 				// get n elements
 8003dc0:	1a12      	subs	r2, r2, r0
	const reg remaining_to_end 	= ring_buf->base.cap - tail_pos;
 8003dc2:	6808      	ldr	r0, [r1, #0]
 8003dc4:	1ac1      	subs	r1, r0, r3

	if(n_elem > remaining_to_end) {
 8003dc6:	428a      	cmp	r2, r1
 8003dc8:	d90c      	bls.n	8003de4 <crc_from_ringbuf+0x38>
		const reg remaining_n		= n_elem - remaining_to_end;
 8003dca:	189c      	adds	r4, r3, r2
 8003dcc:	1a24      	subs	r4, r4, r0
		CRC_ARRAY(crc_base, ring_ptr + tail_pos, remaining_to_end);
 8003dce:	460a      	mov	r2, r1
 8003dd0:	18f1      	adds	r1, r6, r3
 8003dd2:	6828      	ldr	r0, [r5, #0]
 8003dd4:	68eb      	ldr	r3, [r5, #12]
 8003dd6:	4798      	blx	r3
		CRC_ARRAY(crc_base, ring_ptr, remaining_n);
 8003dd8:	68eb      	ldr	r3, [r5, #12]
 8003dda:	4622      	mov	r2, r4
 8003ddc:	4631      	mov	r1, r6
 8003dde:	6828      	ldr	r0, [r5, #0]
 8003de0:	4798      	blx	r3
	} else {
		CRC_ARRAY(crc_base, ring_buf->buffer, n_elem);
	}
}
 8003de2:	bd70      	pop	{r4, r5, r6, pc}
		CRC_ARRAY(crc_base, ring_buf->buffer, n_elem);
 8003de4:	68eb      	ldr	r3, [r5, #12]
 8003de6:	4631      	mov	r1, r6
 8003de8:	6828      	ldr	r0, [r5, #0]
 8003dea:	4798      	blx	r3
 8003dec:	e7f9      	b.n	8003de2 <crc_from_ringbuf+0x36>

08003dee <poolContainer_init>:
	return self;
}

bool poolContainer_init(pool_container_t* const self, const u16 n_buffers, const u16 max_size)
{
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8003dee:	1e4b      	subs	r3, r1, #1
 8003df0:	b29b      	uxth	r3, r3
 8003df2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003df6:	d23c      	bcs.n	8003e72 <poolContainer_init+0x84>
{
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	4604      	mov	r4, r0
 8003dfe:	460d      	mov	r5, r1
 8003e00:	4616      	mov	r6, r2
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8003e02:	1e53      	subs	r3, r2, #1
 8003e04:	b29b      	uxth	r3, r3
 8003e06:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003e0a:	d234      	bcs.n	8003e76 <poolContainer_init+0x88>
			return true,
					"Give me positive values for dimensions genius");

	M_Assert_BreakSaveCheck(!is_power_of_2(n_buffers), M_EMPTY,
 8003e0c:	1e4b      	subs	r3, r1, #1
 8003e0e:	420b      	tst	r3, r1
 8003e10:	d134      	bne.n	8003e7c <poolContainer_init+0x8e>

	M_Assert_BreakSaveCheck((n_buffers  > 16384 || max_size > 16384), M_EMPTY,
			return true,
					"is too long, N_BUF: %d, SIZE: %d", n_buffers, max_size);

	self->pool = (void**)calloc(n_buffers, sizeof(void*));
 8003e12:	2104      	movs	r1, #4
 8003e14:	4628      	mov	r0, r5
 8003e16:	f001 f907 	bl	8005028 <calloc>
 8003e1a:	6160      	str	r0, [r4, #20]
	M_Assert_BreakSaveCheck(self->pool == NULL, M_EMPTY,
 8003e1c:	b380      	cbz	r0, 8003e80 <poolContainer_init+0x92>
 8003e1e:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8003e22:	2700      	movs	r7, #0
			return true,
					"no memories for allocation data");

	for (u16 i = 0; i < n_buffers; ++i) {
		self->pool[i] = calloc(max_size, sizeof(u8));
 8003e24:	f04f 0901 	mov.w	r9, #1
 8003e28:	f8d4 a014 	ldr.w	sl, [r4, #20]
 8003e2c:	4649      	mov	r1, r9
 8003e2e:	4630      	mov	r0, r6
 8003e30:	f001 f8fa 	bl	8005028 <calloc>
 8003e34:	f84a 0007 	str.w	r0, [sl, r7]
		M_Assert_BreakSaveCheck(self->pool[i] == NULL, M_EMPTY, goto error, "no memories for allocation");
 8003e38:	6963      	ldr	r3, [r4, #20]
 8003e3a:	59db      	ldr	r3, [r3, r7]
 8003e3c:	b163      	cbz	r3, 8003e58 <poolContainer_init+0x6a>
	for (u16 i = 0; i < n_buffers; ++i) {
 8003e3e:	3704      	adds	r7, #4
 8003e40:	4547      	cmp	r7, r8
 8003e42:	d1f1      	bne.n	8003e28 <poolContainer_init+0x3a>
	}


	self->max_size = max_size;
 8003e44:	8326      	strh	r6, [r4, #24]

// Determine whether x is a power of 2
#define is_power_of_2(x) ((x) != 0 && (((x) & ((x) - 1)) == 0))
STATIC_FORCEINLINE void fifo_base_init(fifo_base_t * const fifo, const reg cap)
{
	const reg msk = (cap - 1U);
 8003e46:	1e6b      	subs	r3, r5, #1

	fifo->cap = cap;
 8003e48:	6025      	str	r5, [r4, #0]
	fifo->msk = msk;
 8003e4a:	6063      	str	r3, [r4, #4]
	fifo->xor_msk = cap | msk;
 8003e4c:	431d      	orrs	r5, r3
 8003e4e:	60a5      	str	r5, [r4, #8]
	fifo->tail = 0;
 8003e50:	2000      	movs	r0, #0
 8003e52:	60e0      	str	r0, [r4, #12]
	fifo->head = 0;
 8003e54:	6120      	str	r0, [r4, #16]
	fifo_base_init(&self->base, n_buffers);
	return false;
 8003e56:	e00f      	b.n	8003e78 <poolContainer_init+0x8a>
 8003e58:	2500      	movs	r5, #0

	// error proceed mark --------------------------------------------
	error:
	for (u16 i = 0; i < n_buffers; ++i) {
		free(self->pool[i]);
 8003e5a:	6963      	ldr	r3, [r4, #20]
 8003e5c:	5958      	ldr	r0, [r3, r5]
 8003e5e:	f001 f907 	bl	8005070 <free>
	for (u16 i = 0; i < n_buffers; ++i) {
 8003e62:	3504      	adds	r5, #4
 8003e64:	45a8      	cmp	r8, r5
 8003e66:	d1f8      	bne.n	8003e5a <poolContainer_init+0x6c>
	}
	free(self->pool);
 8003e68:	6960      	ldr	r0, [r4, #20]
 8003e6a:	f001 f901 	bl	8005070 <free>
	return true;
 8003e6e:	2001      	movs	r0, #1
 8003e70:	e002      	b.n	8003e78 <poolContainer_init+0x8a>
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8003e72:	2001      	movs	r0, #1
}
 8003e74:	4770      	bx	lr
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8003e76:	2001      	movs	r0, #1
}
 8003e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	M_Assert_BreakSaveCheck(!is_power_of_2(n_buffers), M_EMPTY,
 8003e7c:	2001      	movs	r0, #1
 8003e7e:	e7fb      	b.n	8003e78 <poolContainer_init+0x8a>
	M_Assert_BreakSaveCheck(self->pool == NULL, M_EMPTY,
 8003e80:	2001      	movs	r0, #1
 8003e82:	e7f9      	b.n	8003e78 <poolContainer_init+0x8a>

08003e84 <poolContainer_getWriteBuffer>:
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg head_reg = self->base.head;
	const reg msk_reg = self->base.msk;
	const reg wr_pos = head_reg & msk_reg;
 8003e84:	6903      	ldr	r3, [r0, #16]
 8003e86:	6842      	ldr	r2, [r0, #4]
 8003e88:	4013      	ands	r3, r2

	return self->pool[wr_pos];
 8003e8a:	6942      	ldr	r2, [r0, #20]
}
 8003e8c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003e90:	4770      	bx	lr

08003e92 <poolContainer_nextWritePos>:
void poolContainer_nextWritePos(pool_container_t * const self)
{
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));

	const reg head_reg = self->base.head + 1U;
 8003e92:	6903      	ldr	r3, [r0, #16]
 8003e94:	3301      	adds	r3, #1

	// proceed signalls ---------------------------------------------
	self->base.head 	= (head_reg);
 8003e96:	6103      	str	r3, [r0, #16]
}
 8003e98:	4770      	bx	lr

08003e9a <poolContainer_readBuffer>:
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg tail_reg = self->base.tail;
	const reg msk_reg = self->base.msk;
	const reg rd_pos = tail_reg & msk_reg;
 8003e9a:	68c3      	ldr	r3, [r0, #12]
 8003e9c:	6842      	ldr	r2, [r0, #4]
 8003e9e:	4013      	ands	r3, r2

	return self->pool[rd_pos];
 8003ea0:	6942      	ldr	r2, [r0, #20]
}
 8003ea2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8003ea6:	4770      	bx	lr

08003ea8 <poolContainer_nextReadPos>:
void poolContainer_nextReadPos(pool_container_t * const self)
{
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));

	const reg tail_reg = self->base.tail + 1U;
 8003ea8:	68c3      	ldr	r3, [r0, #12]
 8003eaa:	3301      	adds	r3, #1

	// write data to memory ------------------------------------
	// proceed signalls
	self->base.tail 		= (tail_reg);
 8003eac:	60c3      	str	r3, [r0, #12]
}
 8003eae:	4770      	bx	lr

08003eb0 <ringbuf_init>:
	return buffer;
}

bool ringbuf_init(ringbuf_t* const ring_buf, void* const buffer, const reg size)
{
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8003eb0:	b1ea      	cbz	r2, 8003eee <ringbuf_init+0x3e>
{
 8003eb2:	b570      	push	{r4, r5, r6, lr}
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	4615      	mov	r5, r2
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8003eb8:	1e56      	subs	r6, r2, #1
 8003eba:	4216      	tst	r6, r2
 8003ebc:	d119      	bne.n	8003ef2 <ringbuf_init+0x42>
 8003ebe:	b1d0      	cbz	r0, 8003ef6 <ringbuf_init+0x46>
			"not valid parameter size: %d", size);

	memset(ring_buf, 0, sizeof(ringbuf_t));
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	6003      	str	r3, [r0, #0]
 8003ec4:	6043      	str	r3, [r0, #4]
 8003ec6:	6083      	str	r3, [r0, #8]
 8003ec8:	60c3      	str	r3, [r0, #12]
 8003eca:	6103      	str	r3, [r0, #16]
 8003ecc:	6143      	str	r3, [r0, #20]

	if(buffer != NULL) {
 8003ece:	b131      	cbz	r1, 8003ede <ringbuf_init+0x2e>
		ring_buf->buffer = buffer;
 8003ed0:	6161      	str	r1, [r4, #20]
	fifo->cap = cap;
 8003ed2:	6025      	str	r5, [r4, #0]
	fifo->msk = msk;
 8003ed4:	6066      	str	r6, [r4, #4]
	fifo->xor_msk = cap | msk;
 8003ed6:	432e      	orrs	r6, r5
 8003ed8:	60a6      	str	r6, [r4, #8]

		ring_buf->buffer = tmp;
	}

	fifo_base_init(&ring_buf->base, size);
	return true;
 8003eda:	2001      	movs	r0, #1
}
 8003edc:	bd70      	pop	{r4, r5, r6, pc}
		void* const tmp = malloc(size);
 8003ede:	4610      	mov	r0, r2
 8003ee0:	f001 f8be 	bl	8005060 <malloc>
		M_Assert_BreakSaveCheck(tmp == NULL, M_EMPTY, return false,
 8003ee4:	4601      	mov	r1, r0
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	d1f2      	bne.n	8003ed0 <ringbuf_init+0x20>
 8003eea:	2000      	movs	r0, #0
 8003eec:	e7f6      	b.n	8003edc <ringbuf_init+0x2c>
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8003eee:	2000      	movs	r0, #0
}
 8003ef0:	4770      	bx	lr
	M_Assert_BreakSaveCheck(!is_power_of_2(size) || ring_buf == NULL, M_EMPTY, return false,
 8003ef2:	2000      	movs	r0, #0
 8003ef4:	e7f2      	b.n	8003edc <ringbuf_init+0x2c>
 8003ef6:	2000      	movs	r0, #0
 8003ef8:	e7f0      	b.n	8003edc <ringbuf_init+0x2c>

08003efa <ringbuf_install_buf>:

bool ringbuf_install_buf(ringbuf_t* const ring_buf, void* const buffer)
{
	M_Assert_BreakSaveCheck(buffer == NULL, M_EMPTY, return false,
 8003efa:	b129      	cbz	r1, 8003f08 <ringbuf_install_buf+0xe>
			"not valid parameter");

	ring_buf->buffer = buffer;
 8003efc:	6141      	str	r1, [r0, #20]
}

#define FIFO_CLEAN(chield) fifo_base_clear(&((chield)->base))
STATIC_FORCEINLINE void fifo_base_clear(fifo_base_t * const fifo)
{
	fifo->tail = 0;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60c3      	str	r3, [r0, #12]
	fifo->head = 0;
 8003f02:	6103      	str	r3, [r0, #16]
	FIFO_CLEAN(ring_buf);
	return true;
 8003f04:	2001      	movs	r0, #1
 8003f06:	4770      	bx	lr
	M_Assert_BreakSaveCheck(buffer == NULL, M_EMPTY, return false,
 8003f08:	2000      	movs	r0, #0
}
 8003f0a:	4770      	bx	lr

08003f0c <ringbuf_get>:


// Get data from buffer================================================================================================
reg ringbuf_get(ringbuf_t* const ring_buf, void* const buffer, const reg size)
{
 8003f0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_INT_SWITCH(M_Assert_Break((ring_buf == NULL || buffer == NULL), M_EMPTY, return 0, "ring buffer NULL"));

	// move to registers------------------------------------------
	const u8* const ring_ptr 			= ring_buf->buffer;
 8003f10:	f8d0 9014 	ldr.w	r9, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 8003f14:	f1b9 0f00 	cmp.w	r9, #0
 8003f18:	d02b      	beq.n	8003f72 <ringbuf_get+0x66>
 8003f1a:	4604      	mov	r4, r0
 8003f1c:	4688      	mov	r8, r1

	reg tail_reg 				= ring_buf->base.tail;
 8003f1e:	68c6      	ldr	r6, [r0, #12]
	const reg head_reg 			= ring_buf->base.head;
 8003f20:	6905      	ldr	r5, [r0, #16]
	const reg msk_reg			= ring_buf->base.msk;

	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return 0, "ring buffer is empty");
 8003f22:	42ae      	cmp	r6, r5
 8003f24:	d027      	beq.n	8003f76 <ringbuf_get+0x6a>

	const reg n_elem 			= _FIFO_LEN_IMPL(tail_reg, head_reg);	// get n elements
 8003f26:	1bad      	subs	r5, r5, r6
	const reg size_constr 		= (size < n_elem) ? size : n_elem;		// constrain input size
 8003f28:	4295      	cmp	r5, r2
 8003f2a:	bf28      	it	cs
 8003f2c:	4615      	movcs	r5, r2
	const reg tail_pos 			= tail_reg & msk_reg;					// get tail position
 8003f2e:	6847      	ldr	r7, [r0, #4]
 8003f30:	4037      	ands	r7, r6
	const reg remaining_to_end 	= ring_buf->base.cap - tail_pos;		// get remaining from tail to end
 8003f32:	f8d0 b000 	ldr.w	fp, [r0]
 8003f36:	ebab 0a07 	sub.w	sl, fp, r7

	// do logic --------------------------------------------------
	if(size_constr > remaining_to_end) {
 8003f3a:	4555      	cmp	r5, sl
 8003f3c:	d912      	bls.n	8003f64 <ringbuf_get+0x58>
		const reg remaining_n		= size_constr - remaining_to_end;
		/* first get the data from fifo->out until the end of the buffer */
		memcpy(buffer, ring_ptr + tail_pos, remaining_to_end);
 8003f3e:	4652      	mov	r2, sl
 8003f40:	eb09 0107 	add.w	r1, r9, r7
 8003f44:	4640      	mov	r0, r8
 8003f46:	f002 fa44 	bl	80063d2 <memcpy>
		const reg remaining_n		= size_constr - remaining_to_end;
 8003f4a:	eba7 020b 	sub.w	r2, r7, fp
		/* then get the rest (if any) from the beginning of the buffer */
		memcpy((u8* const)(buffer) + remaining_to_end, ring_ptr, remaining_n);
 8003f4e:	442a      	add	r2, r5
 8003f50:	4649      	mov	r1, r9
 8003f52:	eb08 000a 	add.w	r0, r8, sl
 8003f56:	f002 fa3c 	bl	80063d2 <memcpy>
		/* get all the data */
		memcpy(buffer, ring_ptr + tail_pos, size_constr);
	}

	// write data to memory ------------------------------------
	tail_reg += size_constr;
 8003f5a:	442e      	add	r6, r5

	// proceed signalls
	ring_buf->base.tail 		= (tail_reg);
 8003f5c:	60e6      	str	r6, [r4, #12]
	return size_constr;
}
 8003f5e:	4628      	mov	r0, r5
 8003f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(buffer, ring_ptr + tail_pos, size_constr);
 8003f64:	462a      	mov	r2, r5
 8003f66:	eb09 0107 	add.w	r1, r9, r7
 8003f6a:	4640      	mov	r0, r8
 8003f6c:	f002 fa31 	bl	80063d2 <memcpy>
 8003f70:	e7f3      	b.n	8003f5a <ringbuf_get+0x4e>
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 8003f72:	2500      	movs	r5, #0
 8003f74:	e7f3      	b.n	8003f5e <ringbuf_get+0x52>
	M_Assert_BreakSaveCheck(_FIFO_IS_EMPTY_IMPL(tail_reg, head_reg), M_EMPTY, return 0, "ring buffer is empty");
 8003f76:	2500      	movs	r5, #0
 8003f78:	e7f1      	b.n	8003f5e <ringbuf_get+0x52>

08003f7a <ringbuf_put>:
RINGBUF_PEEK(f64)


// Store data into buffer===========================================================================================
reg ringbuf_put(ringbuf_t* const ring_buf, const void *buffer, const reg size)
{
 8003f7a:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	_INT_SWITCH(M_Assert_Break((ring_buf == NULL || buffer == NULL || ring_buf->buffer == NULL), M_EMPTY, return 0, "ring buffer NULL"));

	// move to registers------------------------------------------------------
	u8* const ring_ptr 			= ring_buf->buffer;
 8003f7e:	f8d0 a014 	ldr.w	sl, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 8003f82:	f1ba 0f00 	cmp.w	sl, #0
 8003f86:	d031      	beq.n	8003fec <ringbuf_put+0x72>
 8003f88:	4605      	mov	r5, r0
 8003f8a:	460f      	mov	r7, r1

	const reg tail_reg 			= ring_buf->base.tail;
 8003f8c:	68c4      	ldr	r4, [r0, #12]
	reg head_reg 				= ring_buf->base.head;
 8003f8e:	6906      	ldr	r6, [r0, #16]
	const reg msk_reg			= ring_buf->base.msk;
	const reg xor_msk_reg		= ring_buf->base.xor_msk;
	const reg cap_reg			= ring_buf->base.cap;
 8003f90:	f8d0 8000 	ldr.w	r8, [r0]

	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return 0, "ring buffer is full");
 8003f94:	ea84 0306 	eor.w	r3, r4, r6
 8003f98:	6881      	ldr	r1, [r0, #8]
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	4543      	cmp	r3, r8
 8003f9e:	d027      	beq.n	8003ff0 <ringbuf_put+0x76>

	const reg head_pos 			= head_reg & msk_reg;
 8003fa0:	6843      	ldr	r3, [r0, #4]
 8003fa2:	ea06 0903 	and.w	r9, r6, r3
	const reg remaining_to_end 	= cap_reg - head_pos;					// get remaining from head to end
 8003fa6:	eba8 0b09 	sub.w	fp, r8, r9
	const reg n_empty 			= (cap_reg - head_reg) + tail_reg;		// black magic for get empty cells
 8003faa:	4444      	add	r4, r8
 8003fac:	1ba4      	subs	r4, r4, r6
	const reg size_constr 		= (size < n_empty) ? size : n_empty;	// constrain input size
 8003fae:	4294      	cmp	r4, r2
 8003fb0:	bf28      	it	cs
 8003fb2:	4614      	movcs	r4, r2


	// do logic ------------------------------------------------------------
	if(size_constr > remaining_to_end) {
 8003fb4:	45a3      	cmp	fp, r4
 8003fb6:	d212      	bcs.n	8003fde <ringbuf_put+0x64>
		const reg remaining_n		= size_constr - remaining_to_end;
		/* first put the data starting from fifo->in to buffer end */
		memcpy(ring_ptr + head_pos, buffer, remaining_to_end);
 8003fb8:	465a      	mov	r2, fp
 8003fba:	4639      	mov	r1, r7
 8003fbc:	eb0a 0009 	add.w	r0, sl, r9
 8003fc0:	f002 fa07 	bl	80063d2 <memcpy>
		const reg remaining_n		= size_constr - remaining_to_end;
 8003fc4:	eba9 0208 	sub.w	r2, r9, r8
		/* then put the rest (if any) at the beginning of the buffer */
		memcpy(ring_ptr, (u8* const)(buffer) + remaining_to_end, remaining_n);
 8003fc8:	4422      	add	r2, r4
 8003fca:	eb07 010b 	add.w	r1, r7, fp
 8003fce:	4650      	mov	r0, sl
 8003fd0:	f002 f9ff 	bl	80063d2 <memcpy>
		/* put all the data */
		memcpy(ring_ptr + head_pos, buffer, size_constr);
	}

	// write data to memory ------------------------------------------------
	head_reg += size_constr;
 8003fd4:	4426      	add	r6, r4

	// proceed signalls
	ring_buf->base.head 	= (head_reg);
 8003fd6:	612e      	str	r6, [r5, #16]
	return size_constr;
}
 8003fd8:	4620      	mov	r0, r4
 8003fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(ring_ptr + head_pos, buffer, size_constr);
 8003fde:	4622      	mov	r2, r4
 8003fe0:	4639      	mov	r1, r7
 8003fe2:	eb0a 0009 	add.w	r0, sl, r9
 8003fe6:	f002 f9f4 	bl	80063d2 <memcpy>
 8003fea:	e7f3      	b.n	8003fd4 <ringbuf_put+0x5a>
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return 0, "buffer is null");
 8003fec:	2400      	movs	r4, #0
 8003fee:	e7f3      	b.n	8003fd8 <ringbuf_put+0x5e>
	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return 0, "ring buffer is full");
 8003ff0:	2400      	movs	r4, #0
 8003ff2:	e7f1      	b.n	8003fd8 <ringbuf_put+0x5e>

08003ff4 <ringbuf_putc>:

// Store byte data in buffer
bool ringbuf_putc(ringbuf_t* const ring_buf, const u8 c)
{
 8003ff4:	b430      	push	{r4, r5}
	_INT_SWITCH(M_Assert_Break(ring_buf == NULL || ring_buf->buffer == NULL, M_EMPTY, return false, "ring buffer NULL"));

	// move to registers------------------------------------
	u8* const ring_ptr 			= ring_buf->buffer;
 8003ff6:	6944      	ldr	r4, [r0, #20]
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return false, "buffer is null");
 8003ff8:	b18c      	cbz	r4, 800401e <ringbuf_putc+0x2a>

	reg head_reg 				= ring_buf->base.head;
 8003ffa:	6902      	ldr	r2, [r0, #16]
	const reg tail_reg 			= ring_buf->base.tail;
	const reg msk_reg			= ring_buf->base.msk;
	const reg xor_msk_reg		= ring_buf->base.xor_msk;
	const reg cap_reg			= ring_buf->base.cap;

	const reg head_pos 			= head_reg & msk_reg;
 8003ffc:	6843      	ldr	r3, [r0, #4]
 8003ffe:	ea02 0c03 	and.w	ip, r2, r3

	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return false, "ring buffer is full");
 8004002:	68c3      	ldr	r3, [r0, #12]
 8004004:	4053      	eors	r3, r2
 8004006:	6885      	ldr	r5, [r0, #8]
 8004008:	402b      	ands	r3, r5
 800400a:	6805      	ldr	r5, [r0, #0]
 800400c:	42ab      	cmp	r3, r5
 800400e:	d008      	beq.n	8004022 <ringbuf_putc+0x2e>

	*(ring_ptr + head_pos) = c;
 8004010:	f804 100c 	strb.w	r1, [r4, ip]

	++head_reg;
 8004014:	3201      	adds	r2, #1

	// proceed signalls
	ring_buf->base.head 	= (head_reg);
 8004016:	6102      	str	r2, [r0, #16]

	return true;
 8004018:	2001      	movs	r0, #1
}
 800401a:	bc30      	pop	{r4, r5}
 800401c:	4770      	bx	lr
	M_Assert_BreakSaveCheck(ring_ptr == NULL, M_EMPTY, return false, "buffer is null");
 800401e:	2000      	movs	r0, #0
 8004020:	e7fb      	b.n	800401a <ringbuf_putc+0x26>
	M_Assert_BreakSaveCheck(_FIFO_IS_FULL_IMPL(tail_reg, head_reg, cap_reg, xor_msk_reg), M_EMPTY, return false, "ring buffer is full");
 8004022:	2000      	movs	r0, #0
 8004024:	e7f9      	b.n	800401a <ringbuf_putc+0x26>

08004026 <crc16_t10_dif_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc16_t10_dif_init_base(void* const crc)
{
	*UINT16_TYPE_DC(crc) = CRC16INIT;
 8004026:	2300      	movs	r3, #0
 8004028:	8003      	strh	r3, [r0, #0]
}
 800402a:	4770      	bx	lr

0800402c <fast_crc16_t10_dif_array_base>:

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc16_t10_dif_array_base(void* const crc, const u8* data, reg len)
{
	u16 crc16 = *UINT16_TYPE_DC(crc);
 800402c:	8803      	ldrh	r3, [r0, #0]
	CRC16_FAST_ARRAY_PROCEED(crc16, data, len);
 800402e:	b18a      	cbz	r2, 8004054 <fast_crc16_t10_dif_array_base+0x28>
{
 8004030:	b410      	push	{r4}
 8004032:	4694      	mov	ip, r2
 8004034:	448c      	add	ip, r1
	CRC16_FAST_ARRAY_PROCEED(crc16, data, len);
 8004036:	4c08      	ldr	r4, [pc, #32]	@ (8004058 <fast_crc16_t10_dif_array_base+0x2c>)
 8004038:	f811 2b01 	ldrb.w	r2, [r1], #1
 800403c:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8004040:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	b29b      	uxth	r3, r3
 8004048:	4053      	eors	r3, r2
 800404a:	458c      	cmp	ip, r1
 800404c:	d1f4      	bne.n	8004038 <fast_crc16_t10_dif_array_base+0xc>
	*UINT16_TYPE_DC(crc) = crc16;
 800404e:	8003      	strh	r3, [r0, #0]
}
 8004050:	bc10      	pop	{r4}
 8004052:	4770      	bx	lr
	*UINT16_TYPE_DC(crc) = crc16;
 8004054:	8003      	strh	r3, [r0, #0]
 8004056:	4770      	bx	lr
 8004058:	080079d8 	.word	0x080079d8

0800405c <fast_crc16_t10_dif_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc16_t10_dif_byte_base(void* const crc, const u8 data)
{
	u16 crc16 = *UINT16_TYPE_DC(crc);
 800405c:	8802      	ldrh	r2, [r0, #0]
	crc16 = CRC16_FAST_BYTE_PROCEED(crc16, data);
 800405e:	ea81 2112 	eor.w	r1, r1, r2, lsr #8
 8004062:	4b03      	ldr	r3, [pc, #12]	@ (8004070 <fast_crc16_t10_dif_byte_base+0x14>)
 8004064:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8004068:	ea83 2302 	eor.w	r3, r3, r2, lsl #8
	*UINT16_TYPE_DC(crc) = crc16;
 800406c:	8003      	strh	r3, [r0, #0]
}
 800406e:	4770      	bx	lr
 8004070:	080079d8 	.word	0x080079d8

08004074 <crc32b_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc32b_init_base(void* const crc)
{
	*UINT32_TYPE_DC(crc) = CRC32INIT;
 8004074:	f04f 33ff 	mov.w	r3, #4294967295
 8004078:	6003      	str	r3, [r0, #0]
}
 800407a:	4770      	bx	lr

0800407c <fast_crc32b_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc32b_array_base(void* const crc, const u8* data, reg len)
{
 800407c:	b430      	push	{r4, r5}
	u32 crc32 = *UINT32_TYPE_DC(crc);
 800407e:	6804      	ldr	r4, [r0, #0]
	CRC32_FAST_ARRAY_PROCEED(crc32, data, len);
 8004080:	b15a      	cbz	r2, 800409a <fast_crc32b_array_base+0x1e>
 8004082:	188a      	adds	r2, r1, r2
 8004084:	4d06      	ldr	r5, [pc, #24]	@ (80040a0 <fast_crc32b_array_base+0x24>)
 8004086:	f811 3b01 	ldrb.w	r3, [r1], #1
 800408a:	4063      	eors	r3, r4
 800408c:	b2db      	uxtb	r3, r3
 800408e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 8004092:	ea83 2414 	eor.w	r4, r3, r4, lsr #8
 8004096:	428a      	cmp	r2, r1
 8004098:	d1f5      	bne.n	8004086 <fast_crc32b_array_base+0xa>
	*UINT32_TYPE_DC(crc) = crc32;
 800409a:	6004      	str	r4, [r0, #0]
}
 800409c:	bc30      	pop	{r4, r5}
 800409e:	4770      	bx	lr
 80040a0:	08007bd8 	.word	0x08007bd8

080040a4 <fast_crc32b_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc32b_byte_base(void* const crc, const u8 data)
{
	u32 crc32 = *UINT32_TYPE_DC(crc);
 80040a4:	6802      	ldr	r2, [r0, #0]
	crc32 = CRC32_FAST_BYTE_PROCEED(crc32, data);
 80040a6:	4051      	eors	r1, r2
 80040a8:	b2c9      	uxtb	r1, r1
 80040aa:	4b03      	ldr	r3, [pc, #12]	@ (80040b8 <fast_crc32b_byte_base+0x14>)
 80040ac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80040b0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
	*UINT32_TYPE_DC(crc) = crc32;
 80040b4:	6003      	str	r3, [r0, #0]
}
 80040b6:	4770      	bx	lr
 80040b8:	08007bd8 	.word	0x08007bd8

080040bc <crc64jones_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc64jones_init_base(void* const crc)
{
	*UINT64_TYPE_DC(crc) = CRC64INIT;
 80040bc:	2200      	movs	r2, #0
 80040be:	2300      	movs	r3, #0
 80040c0:	e9c0 2300 	strd	r2, r3, [r0]
}
 80040c4:	4770      	bx	lr
	...

080040c8 <fast_crc64jones_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc64jones_array_base(void* const crc, const u8* data, reg len)
{
 80040c8:	b570      	push	{r4, r5, r6, lr}
	u64 crc64 = *UINT64_TYPE_DC(crc);
 80040ca:	6803      	ldr	r3, [r0, #0]
 80040cc:	6844      	ldr	r4, [r0, #4]
	CRC64_FAST_ARRAY_PROCEED(crc64, data, len);
 80040ce:	b1a2      	cbz	r2, 80040fa <fast_crc64jones_array_base+0x32>
 80040d0:	4696      	mov	lr, r2
 80040d2:	448e      	add	lr, r1
 80040d4:	4d0a      	ldr	r5, [pc, #40]	@ (8004100 <fast_crc64jones_array_base+0x38>)
 80040d6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80040da:	405a      	eors	r2, r3
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	eb05 0cc2 	add.w	ip, r5, r2, lsl #3
 80040e2:	f855 6032 	ldr.w	r6, [r5, r2, lsl #3]
 80040e6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80040ea:	0a1b      	lsrs	r3, r3, #8
 80040ec:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 80040f0:	4073      	eors	r3, r6
 80040f2:	ea82 2414 	eor.w	r4, r2, r4, lsr #8
 80040f6:	458e      	cmp	lr, r1
 80040f8:	d1ed      	bne.n	80040d6 <fast_crc64jones_array_base+0xe>
	*UINT64_TYPE_DC(crc) = crc64;
 80040fa:	6003      	str	r3, [r0, #0]
 80040fc:	6044      	str	r4, [r0, #4]
}
 80040fe:	bd70      	pop	{r4, r5, r6, pc}
 8004100:	08007fd8 	.word	0x08007fd8

08004104 <fast_crc64jones_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc64jones_byte_base(void* const crc, const u8 data)
{
 8004104:	b410      	push	{r4}
	u64 crc64 = *UINT64_TYPE_DC(crc);
 8004106:	6803      	ldr	r3, [r0, #0]
 8004108:	6844      	ldr	r4, [r0, #4]
	crc64 = CRC64_FAST_BYTE_PROCEED(crc64, data);
 800410a:	4a09      	ldr	r2, [pc, #36]	@ (8004130 <fast_crc64jones_byte_base+0x2c>)
 800410c:	4059      	eors	r1, r3
 800410e:	b2c9      	uxtb	r1, r1
 8004110:	eb02 0cc1 	add.w	ip, r2, r1, lsl #3
 8004114:	f852 1031 	ldr.w	r1, [r2, r1, lsl #3]
 8004118:	f8dc 2004 	ldr.w	r2, [ip, #4]
 800411c:	0a1b      	lsrs	r3, r3, #8
 800411e:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
 8004122:	4059      	eors	r1, r3
 8004124:	ea82 2214 	eor.w	r2, r2, r4, lsr #8
	*UINT64_TYPE_DC(crc) = crc64;
 8004128:	6001      	str	r1, [r0, #0]
 800412a:	6042      	str	r2, [r0, #4]
}
 800412c:	bc10      	pop	{r4}
 800412e:	4770      	bx	lr
 8004130:	08007fd8 	.word	0x08007fd8

08004134 <crc8_maxim_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc8_maxim_init_base(void* const crc)
{
	*UINT8_TYPE_DC(crc) = CRC8INIT;
 8004134:	23ff      	movs	r3, #255	@ 0xff
 8004136:	7003      	strb	r3, [r0, #0]
}
 8004138:	4770      	bx	lr
	...

0800413c <fast_crc8_maxim_array_base>:

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc8_maxim_array_base(void* const crc, const u8* data, reg len)
{
	u8 crc8 = *UINT8_TYPE_DC(crc);
 800413c:	7803      	ldrb	r3, [r0, #0]
	CRC8_FAST_ARRAY_PROCEED(crc8, data, len);
 800413e:	b162      	cbz	r2, 800415a <fast_crc8_maxim_array_base+0x1e>
{
 8004140:	b410      	push	{r4}
 8004142:	4694      	mov	ip, r2
 8004144:	448c      	add	ip, r1
	CRC8_FAST_ARRAY_PROCEED(crc8, data, len);
 8004146:	4c06      	ldr	r4, [pc, #24]	@ (8004160 <fast_crc8_maxim_array_base+0x24>)
 8004148:	f811 2b01 	ldrb.w	r2, [r1], #1
 800414c:	4053      	eors	r3, r2
 800414e:	5ce3      	ldrb	r3, [r4, r3]
 8004150:	458c      	cmp	ip, r1
 8004152:	d1f9      	bne.n	8004148 <fast_crc8_maxim_array_base+0xc>
	*UINT8_TYPE_DC(crc) = crc8;
 8004154:	7003      	strb	r3, [r0, #0]
}
 8004156:	bc10      	pop	{r4}
 8004158:	4770      	bx	lr
	*UINT8_TYPE_DC(crc) = crc8;
 800415a:	7003      	strb	r3, [r0, #0]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	080087d8 	.word	0x080087d8

08004164 <fast_crc8_maxim_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc8_maxim_byte_base(void* const crc, const u8 data)
{
	u8 crc8 = *UINT8_TYPE_DC(crc);
	crc8 = CRC8_FAST_BYTE_PROCEED(crc8, data);
 8004164:	7803      	ldrb	r3, [r0, #0]
 8004166:	4059      	eors	r1, r3
 8004168:	4b01      	ldr	r3, [pc, #4]	@ (8004170 <fast_crc8_maxim_byte_base+0xc>)
	*UINT8_TYPE_DC(crc) = crc8;
 800416a:	5c5b      	ldrb	r3, [r3, r1]
 800416c:	7003      	strb	r3, [r0, #0]
}
 800416e:	4770      	bx	lr
 8004170:	080087d8 	.word	0x080087d8

08004174 <crc_base_init>:
#include "crc_base.h"
#include <string.h>
#include <stdlib.h>

void crc_base_init(crc_base_t* const self, const reg size)
{
 8004174:	b538      	push	{r3, r4, r5, lr}
 8004176:	4604      	mov	r4, r0
 8004178:	460d      	mov	r5, r1
	self->crc = malloc(size);
 800417a:	4608      	mov	r0, r1
 800417c:	f000 ff70 	bl	8005060 <malloc>
 8004180:	6020      	str	r0, [r4, #0]
	self->crc_size = size;
 8004182:	7125      	strb	r5, [r4, #4]
}
 8004184:	bd38      	pop	{r3, r4, r5, pc}

08004186 <crc_base_duplicate>:

crc_base_t* const crc_base_duplicate(crc_base_t* const from)
{
 8004186:	b538      	push	{r3, r4, r5, lr}
	if(from == NULL) {
 8004188:	4605      	mov	r5, r0
 800418a:	b158      	cbz	r0, 80041a4 <crc_base_duplicate+0x1e>
		return NULL;
	}

	crc_base_t* const to = (crc_base_t*)malloc(sizeof(crc_base_t));
 800418c:	2008      	movs	r0, #8
 800418e:	f000 ff67 	bl	8005060 <malloc>
 8004192:	4604      	mov	r4, r0
	to->crc = malloc(from->crc_size);
 8004194:	792d      	ldrb	r5, [r5, #4]
 8004196:	4628      	mov	r0, r5
 8004198:	f000 ff62 	bl	8005060 <malloc>
 800419c:	6020      	str	r0, [r4, #0]
	to->crc_size = from->crc_size;
 800419e:	7125      	strb	r5, [r4, #4]

	return to;
}
 80041a0:	4620      	mov	r0, r4
 80041a2:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
 80041a4:	4604      	mov	r4, r0
 80041a6:	e7fb      	b.n	80041a0 <crc_base_duplicate+0x1a>

080041a8 <crc_compleate>:


bool crc_compleate(crc_base_t* const self1, crc_base_t* const self2)
{
 80041a8:	b508      	push	{r3, lr}
	const reg size1 = self1->crc_size;
 80041aa:	7902      	ldrb	r2, [r0, #4]
	const reg size2 = self2->crc_size;
 80041ac:	790b      	ldrb	r3, [r1, #4]
	const void* const ptr1 = self1->crc;
	const void* const ptr2 = self2->crc;

	if(size1 != size2) {
 80041ae:	429a      	cmp	r2, r3
 80041b0:	d107      	bne.n	80041c2 <crc_compleate+0x1a>
		return false;
	}

	return memcmp(ptr1, ptr2, size1) == 0;
 80041b2:	6809      	ldr	r1, [r1, #0]
 80041b4:	6800      	ldr	r0, [r0, #0]
 80041b6:	f002 f801 	bl	80061bc <memcmp>
 80041ba:	fab0 f080 	clz	r0, r0
 80041be:	0940      	lsrs	r0, r0, #5
}
 80041c0:	bd08      	pop	{r3, pc}
		return false;
 80041c2:	2000      	movs	r0, #0
 80041c4:	e7fc      	b.n	80041c0 <crc_compleate+0x18>
	...

080041c8 <createCRC>:




crc_obj_t* const createCRC(const crc_type type)
{
 80041c8:	b510      	push	{r4, lr}
	switch(type) {
 80041ca:	2803      	cmp	r0, #3
 80041cc:	d848      	bhi.n	8004260 <createCRC+0x98>
 80041ce:	e8df f000 	tbb	[pc, r0]
 80041d2:	1402      	.short	0x1402
 80041d4:	3625      	.short	0x3625
	crc_obj_t* const crc = malloc(sizeof(crc_obj_t));
 80041d6:	2014      	movs	r0, #20
 80041d8:	f000 ff42 	bl	8005060 <malloc>
 80041dc:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u8));
 80041de:	2101      	movs	r1, #1
 80041e0:	f7ff ffc8 	bl	8004174 <crc_base_init>
    crc->crc_init = _MY_CRC8_INIT_BASE;
 80041e4:	4b1f      	ldr	r3, [pc, #124]	@ (8004264 <createCRC+0x9c>)
 80041e6:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC8_ARRAY_BASE;
 80041e8:	4b1f      	ldr	r3, [pc, #124]	@ (8004268 <createCRC+0xa0>)
 80041ea:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC8_BYTE_BASE;
 80041ec:	4b1f      	ldr	r3, [pc, #124]	@ (800426c <createCRC+0xa4>)
 80041ee:	6123      	str	r3, [r4, #16]
    _MY_CRC8_INIT_BASE(&crc->base.crc);
 80041f0:	4620      	mov	r0, r4
 80041f2:	f7ff ff9f 	bl	8004134 <crc8_maxim_init_base>
	default: 	return NULL;

	}

	return NULL;
}
 80041f6:	4620      	mov	r0, r4
 80041f8:	bd10      	pop	{r4, pc}
	crc_obj_t* const crc = malloc(sizeof(crc_obj_t));
 80041fa:	2014      	movs	r0, #20
 80041fc:	f000 ff30 	bl	8005060 <malloc>
 8004200:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u16));
 8004202:	2102      	movs	r1, #2
 8004204:	f7ff ffb6 	bl	8004174 <crc_base_init>
    crc->crc_init = _MY_CRC16_INIT_BASE;
 8004208:	4b19      	ldr	r3, [pc, #100]	@ (8004270 <createCRC+0xa8>)
 800420a:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC16_ARRAY_BASE;
 800420c:	4b19      	ldr	r3, [pc, #100]	@ (8004274 <createCRC+0xac>)
 800420e:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC16_BYTE_BASE;
 8004210:	4b19      	ldr	r3, [pc, #100]	@ (8004278 <createCRC+0xb0>)
 8004212:	6123      	str	r3, [r4, #16]
    _MY_CRC16_INIT_BASE(&crc->base.crc);
 8004214:	4620      	mov	r0, r4
 8004216:	f7ff ff06 	bl	8004026 <crc16_t10_dif_init_base>
		return newCRC16();
 800421a:	e7ec      	b.n	80041f6 <createCRC+0x2e>
	crc_obj_t* const crc = malloc(sizeof(crc_obj_t));
 800421c:	2014      	movs	r0, #20
 800421e:	f000 ff1f 	bl	8005060 <malloc>
 8004222:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u32));
 8004224:	2104      	movs	r1, #4
 8004226:	f7ff ffa5 	bl	8004174 <crc_base_init>
    crc->crc_init = _MY_CRC32_INIT_BASE;
 800422a:	4b14      	ldr	r3, [pc, #80]	@ (800427c <createCRC+0xb4>)
 800422c:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC32_ARRAY_BASE;
 800422e:	4b14      	ldr	r3, [pc, #80]	@ (8004280 <createCRC+0xb8>)
 8004230:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC32_BYTE_BASE;
 8004232:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <createCRC+0xbc>)
 8004234:	6123      	str	r3, [r4, #16]
    _MY_CRC32_INIT_BASE(&crc->base.crc);
 8004236:	4620      	mov	r0, r4
 8004238:	f7ff ff1c 	bl	8004074 <crc32b_init_base>
		return newCRC32();
 800423c:	e7db      	b.n	80041f6 <createCRC+0x2e>
	crc_obj_t* const crc = malloc(sizeof(crc_obj_t));
 800423e:	2014      	movs	r0, #20
 8004240:	f000 ff0e 	bl	8005060 <malloc>
 8004244:	4604      	mov	r4, r0
	CRC_BASE_INIT(crc, sizeof(u64));
 8004246:	2108      	movs	r1, #8
 8004248:	f7ff ff94 	bl	8004174 <crc_base_init>
    crc->crc_init = _MY_CRC64_INIT_BASE;
 800424c:	4b0e      	ldr	r3, [pc, #56]	@ (8004288 <createCRC+0xc0>)
 800424e:	60a3      	str	r3, [r4, #8]
    crc->crc_array = _MY_CRC64_ARRAY_BASE;
 8004250:	4b0e      	ldr	r3, [pc, #56]	@ (800428c <createCRC+0xc4>)
 8004252:	60e3      	str	r3, [r4, #12]
    crc->crc_byte = _MY_CRC64_BYTE_BASE;
 8004254:	4b0e      	ldr	r3, [pc, #56]	@ (8004290 <createCRC+0xc8>)
 8004256:	6123      	str	r3, [r4, #16]
    _MY_CRC8_INIT_BASE(&crc->base.crc);
 8004258:	4620      	mov	r0, r4
 800425a:	f7ff ff6b 	bl	8004134 <crc8_maxim_init_base>
		return newCRC64();
 800425e:	e7ca      	b.n	80041f6 <createCRC+0x2e>
	switch(type) {
 8004260:	2400      	movs	r4, #0
 8004262:	e7c8      	b.n	80041f6 <createCRC+0x2e>
 8004264:	08004135 	.word	0x08004135
 8004268:	0800413d 	.word	0x0800413d
 800426c:	08004165 	.word	0x08004165
 8004270:	08004027 	.word	0x08004027
 8004274:	0800402d 	.word	0x0800402d
 8004278:	0800405d 	.word	0x0800405d
 800427c:	08004075 	.word	0x08004075
 8004280:	0800407d 	.word	0x0800407d
 8004284:	080040a5 	.word	0x080040a5
 8004288:	080040bd 	.word	0x080040bd
 800428c:	080040c9 	.word	0x080040c9
 8004290:	08004105 	.word	0x08004105

08004294 <rawp_stream_add_u8>:

// include assert engine
#include "assertsEngine/assert_engine.h"

void rawp_stream_add_u8(RawParser_dynamic_t* const self, u8 c)
{
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	b082      	sub	sp, #8
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
	crc_obj_t* const tx_crc = self->TX.crc;

	const reg remaining_len = self->TX.length_write_control;
 8004298:	6e86      	ldr	r6, [r0, #104]	@ 0x68
	M_Assert_BreakSaveCheck(remaining_len == 0, M_EMPTY, return, "Overflow!!!!!!");
 800429a:	b186      	cbz	r6, 80042be <rawp_stream_add_u8+0x2a>
 800429c:	4604      	mov	r4, r0
 800429e:	460d      	mov	r5, r1
	crc_obj_t* const tx_crc = self->TX.crc;
 80042a0:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c

	M_Assert_SafeFunctionCall(tx_crc, CRC_BYTE(tx_crc, c));
 80042a2:	b113      	cbz	r3, 80042aa <rawp_stream_add_u8+0x16>
 80042a4:	691a      	ldr	r2, [r3, #16]
 80042a6:	6818      	ldr	r0, [r3, #0]
 80042a8:	4790      	blx	r2
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
 80042aa:	4620      	mov	r0, r4


// elementary byte adding functions ----------------------------------------------------------------------------
STATIC_FORCEINLINE void rawp_stream_addByte(ringbuf_t* const ring, const u8 c, const u8 SB)
{
	if(c == SB) {
 80042ac:	f810 3b50 	ldrb.w	r3, [r0], #80
 80042b0:	42ab      	cmp	r3, r5
 80042b2:	d006      	beq.n	80042c2 <rawp_stream_add_u8+0x2e>
		const u8 arr [2] = {c, c};
		ringbuf_put(ring, arr, sizeof(arr));
	} else {
		ringbuf_putc(ring, c);
 80042b4:	4629      	mov	r1, r5
 80042b6:	f7ff fe9d 	bl	8003ff4 <ringbuf_putc>
	rawp_stream_addByte(tx_ring, c, self->startByte);

	self->TX.length_write_control = remaining_len - 1;
 80042ba:	3e01      	subs	r6, #1
 80042bc:	66a6      	str	r6, [r4, #104]	@ 0x68
}
 80042be:	b002      	add	sp, #8
 80042c0:	bd70      	pop	{r4, r5, r6, pc}
		const u8 arr [2] = {c, c};
 80042c2:	f88d 5004 	strb.w	r5, [sp, #4]
 80042c6:	f88d 5005 	strb.w	r5, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 80042ca:	2202      	movs	r2, #2
 80042cc:	a901      	add	r1, sp, #4
 80042ce:	f7ff fe54 	bl	8003f7a <ringbuf_put>
 80042d2:	e7f2      	b.n	80042ba <rawp_stream_add_u8+0x26>

080042d4 <rawp_stream_add_u16>:
		}																									\
																											\
		self->TX.length_write_control = remaining_len - sizeof(TYPE);										\
    }

RAW_P_STREAM_INST(u16)
 80042d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	6e85      	ldr	r5, [r0, #104]	@ 0x68
 80042dc:	2d01      	cmp	r5, #1
 80042de:	d91d      	bls.n	800431c <rawp_stream_add_u16+0x48>
 80042e0:	4604      	mov	r4, r0
 80042e2:	4606      	mov	r6, r0
 80042e4:	f816 7b50 	ldrb.w	r7, [r6], #80
 80042e8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80042ea:	f8ad 1004 	strh.w	r1, [sp, #4]
 80042ee:	b12b      	cbz	r3, 80042fc <rawp_stream_add_u16+0x28>
 80042f0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 80042f4:	2202      	movs	r2, #2
 80042f6:	a901      	add	r1, sp, #4
 80042f8:	6818      	ldr	r0, [r3, #0]
 80042fa:	47c0      	blx	r8
 80042fc:	f89d 1004 	ldrb.w	r1, [sp, #4]
	if(c == SB) {
 8004300:	42b9      	cmp	r1, r7
 8004302:	d00e      	beq.n	8004322 <rawp_stream_add_u16+0x4e>
		ringbuf_putc(ring, c);
 8004304:	4630      	mov	r0, r6
 8004306:	f7ff fe75 	bl	8003ff4 <ringbuf_putc>
 800430a:	f89d 1005 	ldrb.w	r1, [sp, #5]
	if(c == SB) {
 800430e:	42b9      	cmp	r1, r7
 8004310:	d011      	beq.n	8004336 <rawp_stream_add_u16+0x62>
		ringbuf_putc(ring, c);
 8004312:	4630      	mov	r0, r6
 8004314:	f7ff fe6e 	bl	8003ff4 <ringbuf_putc>
 8004318:	3d02      	subs	r5, #2
 800431a:	66a5      	str	r5, [r4, #104]	@ 0x68
 800431c:	b002      	add	sp, #8
 800431e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		const u8 arr [2] = {c, c};
 8004322:	f88d 1000 	strb.w	r1, [sp]
 8004326:	f88d 1001 	strb.w	r1, [sp, #1]
		ringbuf_put(ring, arr, sizeof(arr));
 800432a:	2202      	movs	r2, #2
 800432c:	4669      	mov	r1, sp
 800432e:	4630      	mov	r0, r6
 8004330:	f7ff fe23 	bl	8003f7a <ringbuf_put>
 8004334:	e7e9      	b.n	800430a <rawp_stream_add_u16+0x36>
		const u8 arr [2] = {c, c};
 8004336:	f88d 1000 	strb.w	r1, [sp]
 800433a:	f88d 1001 	strb.w	r1, [sp, #1]
		ringbuf_put(ring, arr, sizeof(arr));
 800433e:	2202      	movs	r2, #2
 8004340:	4669      	mov	r1, sp
 8004342:	4630      	mov	r0, r6
 8004344:	f7ff fe19 	bl	8003f7a <ringbuf_put>
 8004348:	e7e6      	b.n	8004318 <rawp_stream_add_u16+0x44>
	...

0800434c <_proceedByte>:
/* PROCEED FUNCTIONS *************************************************************************************************
 *
 */

static void _proceedByte(RawParser_dynamic_t* const self, const u8 ch, const bool newFrame)
{
 800434c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004350:	4604      	mov	r4, r0
 8004352:	460d      	mov	r5, r1
#define RECEIVE_DATA                   	0x03U
#define RECEIVE_CRC                   	0x04U
	//--------------------------------------------
#define RECEIVE_COMPLEATE              	0x0CU

	u8 _state = self->RX.receiveState;
 8004354:	7b07      	ldrb	r7, [r0, #12]
	ringbuf_t* const rx_frame_ring = &self->RX.frame_stream;
	crc_obj_t* const rx_crc_check = self->RX.crc;
 8004356:	6c06      	ldr	r6, [r0, #64]	@ 0x40

	if (newFrame) {
 8004358:	b31a      	cbz	r2, 80043a2 <_proceedByte+0x56>
		M_Assert_SafeFunctionCall(rx_crc_check, {
 800435a:	b12e      	cbz	r6, 8004368 <_proceedByte+0x1c>
 800435c:	68b3      	ldr	r3, [r6, #8]
 800435e:	6830      	ldr	r0, [r6, #0]
 8004360:	4798      	blx	r3
 8004362:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8004364:	2200      	movs	r2, #0
 8004366:	711a      	strb	r2, [r3, #4]
}

#define FIFO_CLEAN(chield) fifo_base_clear(&((chield)->base))
STATIC_FORCEINLINE void fifo_base_clear(fifo_base_t * const fifo)
{
	fifo->tail = 0;
 8004368:	2300      	movs	r3, #0
 800436a:	6363      	str	r3, [r4, #52]	@ 0x34
	fifo->head = 0;
 800436c:	63a3      	str	r3, [r4, #56]	@ 0x38
	}

	switch(_state) {

	case RECEIVE_LEN_0: {
		M_Assert_SafeFunctionCall(rx_crc_check, CRC_BYTE(rx_crc_check, ch));
 800436e:	b11e      	cbz	r6, 8004378 <_proceedByte+0x2c>
 8004370:	6933      	ldr	r3, [r6, #16]
 8004372:	4629      	mov	r1, r5
 8004374:	6830      	ldr	r0, [r6, #0]
 8004376:	4798      	blx	r3

		if(RECEIVE_EXTENDED_LEN_CMD == ch) {
 8004378:	2dff      	cmp	r5, #255	@ 0xff
 800437a:	d06c      	beq.n	8004456 <_proceedByte+0x10a>
			_state = RECEIVE_LEN_LOW;
		} else {
			const reg rx_len = self->RX.tmpReceiveLen = ((ch > self->startByte) ? (ch - 1U) : ch);
 800437c:	7823      	ldrb	r3, [r4, #0]
 800437e:	42ab      	cmp	r3, r5
 8004380:	bf38      	it	cc
 8004382:	f105 35ff 	addcc.w	r5, r5, #4294967295
 8004386:	60a5      	str	r5, [r4, #8]
	fifo->tail = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	6363      	str	r3, [r4, #52]	@ 0x34
	fifo->head = 0;
 800438c:	63a3      	str	r3, [r4, #56]	@ 0x38
			FIFO_CLEAN(rx_frame_ring);

			M_Assert_WarningSaveCheck((rx_len > FIFO_CAPACITY(rx_frame_ring) || rx_len == 0), M_EMPTY, {
 800438e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8004390:	42ab      	cmp	r3, r5
 8004392:	d368      	bcc.n	8004466 <_proceedByte+0x11a>
					self->RX.receiveState = RECEIVE_COMPLEATE;
					return;
			}, "No valid receive length");

			_state = RECEIVE_DATA;
 8004394:	2d00      	cmp	r5, #0
 8004396:	bf0c      	ite	eq
 8004398:	270c      	moveq	r7, #12
 800439a:	2703      	movne	r7, #3
			M_Assert_WarningSaveCheck((rx_len > FIFO_CAPACITY(rx_frame_ring) || rx_len == 0), M_EMPTY, {
 800439c:	7327      	strb	r7, [r4, #12]
#undef RECEIVE_CRC
	//--------------------------------------------
#undef RECEIVE_COMPLEATE

#undef NEXT_STATE
}
 800439e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ringbuf_t* const rx_frame_ring = &self->RX.frame_stream;
 80043a2:	f100 0828 	add.w	r8, r0, #40	@ 0x28
	switch(_state) {
 80043a6:	2f04      	cmp	r7, #4
 80043a8:	d8f8      	bhi.n	800439c <_proceedByte+0x50>
 80043aa:	a301      	add	r3, pc, #4	@ (adr r3, 80043b0 <_proceedByte+0x64>)
 80043ac:	f853 f027 	ldr.w	pc, [r3, r7, lsl #2]
 80043b0:	0800436f 	.word	0x0800436f
 80043b4:	080043c5 	.word	0x080043c5
 80043b8:	080043d3 	.word	0x080043d3
 80043bc:	080043f9 	.word	0x080043f9
 80043c0:	0800441b 	.word	0x0800441b
		M_Assert_SafeFunctionCall(rx_crc_check, CRC_BYTE(rx_crc_check, ch));
 80043c4:	b116      	cbz	r6, 80043cc <_proceedByte+0x80>
 80043c6:	6933      	ldr	r3, [r6, #16]
 80043c8:	6830      	ldr	r0, [r6, #0]
 80043ca:	4798      	blx	r3
		self->RX.tmpReceiveLen = ch;    // read low byte
 80043cc:	60a5      	str	r5, [r4, #8]
		_state = RECEIVE_LEN_HIGH;
 80043ce:	2702      	movs	r7, #2
		break;}
 80043d0:	e7e4      	b.n	800439c <_proceedByte+0x50>
		M_Assert_SafeFunctionCall(rx_crc_check, CRC_BYTE(rx_crc_check, ch));
 80043d2:	b116      	cbz	r6, 80043da <_proceedByte+0x8e>
 80043d4:	6933      	ldr	r3, [r6, #16]
 80043d6:	6830      	ldr	r0, [r6, #0]
 80043d8:	4798      	blx	r3
		reg rx_len = ((reg)(ch << 8U) | self->RX.tmpReceiveLen) & 0x0000FFFFUL ; // read high byte
 80043da:	8923      	ldrh	r3, [r4, #8]
 80043dc:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
		self->RX.tmpReceiveLen = rx_len;
 80043e0:	60a3      	str	r3, [r4, #8]
	fifo->tail = 0;
 80043e2:	2200      	movs	r2, #0
 80043e4:	6362      	str	r2, [r4, #52]	@ 0x34
	fifo->head = 0;
 80043e6:	63a2      	str	r2, [r4, #56]	@ 0x38
		M_Assert_WarningSaveCheck((rx_len > FIFO_CAPACITY(rx_frame_ring) || rx_len == 0), M_EMPTY, {
 80043e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d33d      	bcc.n	800446a <_proceedByte+0x11e>
		_state = RECEIVE_DATA;
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	bf0c      	ite	eq
 80043f2:	270c      	moveq	r7, #12
 80043f4:	2703      	movne	r7, #3
 80043f6:	e7d1      	b.n	800439c <_proceedByte+0x50>
		ringbuf_putc(rx_frame_ring, ch);
 80043f8:	4640      	mov	r0, r8
 80043fa:	f7ff fdfb 	bl	8003ff4 <ringbuf_putc>
		if (/*FIFO_LEN(rx_frame_ring)*/rx_frame_ring->base.head == self->RX.tmpReceiveLen) {
 80043fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004400:	68a3      	ldr	r3, [r4, #8]
 8004402:	429a      	cmp	r2, r3
 8004404:	d1ca      	bne.n	800439c <_proceedByte+0x50>
			if(rx_crc_check) {
 8004406:	b10e      	cbz	r6, 800440c <_proceedByte+0xc0>
				_state = RECEIVE_CRC;
 8004408:	2704      	movs	r7, #4
 800440a:	e7c7      	b.n	800439c <_proceedByte+0x50>
				const RawPdynamicCallback _callback = self->RX.rx_callback;
 800440c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
				if(_callback) {
 800440e:	b323      	cbz	r3, 800445a <_proceedByte+0x10e>
					_callback(rx_frame_ring, _ctx);
 8004410:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 8004412:	4640      	mov	r0, r8
 8004414:	4798      	blx	r3
				_state = RECEIVE_COMPLEATE;
 8004416:	270c      	movs	r7, #12
 8004418:	e7c0      	b.n	800439c <_proceedByte+0x50>
		crc_base_t* const rx_crc = self->RX.crc_received;
 800441a:	f8d0 9044 	ldr.w	r9, [r0, #68]	@ 0x44
		u8 crc_counter = rx_crc->crc_size;
 800441e:	f899 3004 	ldrb.w	r3, [r9, #4]
		*(crc_pointer + crc_counter) = ch;
 8004422:	f8d9 2000 	ldr.w	r2, [r9]
 8004426:	54d1      	strb	r1, [r2, r3]
		++crc_counter;
 8004428:	3301      	adds	r3, #1
 800442a:	b2db      	uxtb	r3, r3
		rx_crc->crc_size = crc_counter;
 800442c:	f889 3004 	strb.w	r3, [r9, #4]
		if(crc_counter == rx_crc_check->base.crc_size) {
 8004430:	7932      	ldrb	r2, [r6, #4]
 8004432:	429a      	cmp	r2, r3
 8004434:	d1b2      	bne.n	800439c <_proceedByte+0x50>
			crc_from_ringbuf(rx_crc_check, rx_frame_ring);
 8004436:	4641      	mov	r1, r8
 8004438:	4630      	mov	r0, r6
 800443a:	f7ff fcb7 	bl	8003dac <crc_from_ringbuf>
			if(crc_compleate(&rx_crc_check->base, rx_crc)) {
 800443e:	4649      	mov	r1, r9
 8004440:	4630      	mov	r0, r6
 8004442:	f7ff feb1 	bl	80041a8 <crc_compleate>
 8004446:	b150      	cbz	r0, 800445e <_proceedByte+0x112>
				const RawPdynamicCallback _callback = self->RX.rx_callback;
 8004448:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
				if(_callback) {
 800444a:	b153      	cbz	r3, 8004462 <_proceedByte+0x116>
					_callback(rx_frame_ring, _ctx);
 800444c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
 800444e:	4640      	mov	r0, r8
 8004450:	4798      	blx	r3
			_state = RECEIVE_COMPLEATE;
 8004452:	270c      	movs	r7, #12
 8004454:	e7a2      	b.n	800439c <_proceedByte+0x50>
			_state = RECEIVE_LEN_LOW;
 8004456:	2701      	movs	r7, #1
 8004458:	e7a0      	b.n	800439c <_proceedByte+0x50>
				_state = RECEIVE_COMPLEATE;
 800445a:	270c      	movs	r7, #12
 800445c:	e79e      	b.n	800439c <_proceedByte+0x50>
			_state = RECEIVE_COMPLEATE;
 800445e:	270c      	movs	r7, #12
 8004460:	e79c      	b.n	800439c <_proceedByte+0x50>
 8004462:	270c      	movs	r7, #12
	self->RX.receiveState = _state;
 8004464:	e79a      	b.n	800439c <_proceedByte+0x50>
 8004466:	270c      	movs	r7, #12
 8004468:	e798      	b.n	800439c <_proceedByte+0x50>
 800446a:	270c      	movs	r7, #12
 800446c:	e796      	b.n	800439c <_proceedByte+0x50>
 800446e:	bf00      	nop

08004470 <rawP_dynamic_init>:
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 8004470:	2800      	cmp	r0, #0
 8004472:	d038      	beq.n	80044e6 <rawP_dynamic_init+0x76>
{
 8004474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004478:	460c      	mov	r4, r1
 800447a:	4605      	mov	r5, r0
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 800447c:	2900      	cmp	r1, #0
 800447e:	d034      	beq.n	80044ea <rawP_dynamic_init+0x7a>
	if(!_rawp_start(self, settings->packStart)) {
 8004480:	780e      	ldrb	r6, [r1, #0]
	M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD || packStart == 0x00, M_EMPTY,
 8004482:	1e73      	subs	r3, r6, #1
 8004484:	b2db      	uxtb	r3, r3
 8004486:	2bfd      	cmp	r3, #253	@ 0xfd
 8004488:	d902      	bls.n	8004490 <rawP_dynamic_init+0x20>
		return false;
 800448a:	2000      	movs	r0, #0
}
 800448c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memset(self, 0, sizeof(RawParser_dynamic_t));
 8004490:	226f      	movs	r2, #111	@ 0x6f
 8004492:	2100      	movs	r1, #0
 8004494:	3001      	adds	r0, #1
 8004496:	f001 febb 	bl	8006210 <memset>
	self->startByte = packStart;
 800449a:	702e      	strb	r6, [r5, #0]
	_rx_new(self, settings->rxBufferSize, settings->rxFrameSize, settings->rxFrameBuff, settings->crc_type);
 800449c:	8862      	ldrh	r2, [r4, #2]
 800449e:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 80044a2:	68a7      	ldr	r7, [r4, #8]
 80044a4:	7d26      	ldrb	r6, [r4, #20]
	self->RX.receiveState = 0;
 80044a6:	2100      	movs	r1, #0
 80044a8:	7329      	strb	r1, [r5, #12]
	ringbuf_init(&self->RX.input_ring, NULL, rxBuffSize);
 80044aa:	f105 0010 	add.w	r0, r5, #16
 80044ae:	f7ff fcff 	bl	8003eb0 <ringbuf_init>
	ringbuf_init(&self->RX.frame_stream, frameBuff, rxFrameSize);
 80044b2:	4642      	mov	r2, r8
 80044b4:	4639      	mov	r1, r7
 80044b6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 80044ba:	f7ff fcf9 	bl	8003eb0 <ringbuf_init>
	self->RX.crc = createCRC(crc_type);
 80044be:	4630      	mov	r0, r6
 80044c0:	f7ff fe82 	bl	80041c8 <createCRC>
 80044c4:	6428      	str	r0, [r5, #64]	@ 0x40
	self->RX.crc_received = CRC_BASE_DUPLICATE(self->RX.crc);
 80044c6:	f7ff fe5e 	bl	8004186 <crc_base_duplicate>
 80044ca:	6468      	str	r0, [r5, #68]	@ 0x44
	_tx_new(self, settings->txFrameSize, settings->txFrameBuff, settings->crc_type);
 80044cc:	7d26      	ldrb	r6, [r4, #20]
	ringbuf_init(&self->TX.frame_stream, txBuff, txFrameSize);
 80044ce:	89a2      	ldrh	r2, [r4, #12]
 80044d0:	6921      	ldr	r1, [r4, #16]
 80044d2:	f105 0050 	add.w	r0, r5, #80	@ 0x50
 80044d6:	f7ff fceb 	bl	8003eb0 <ringbuf_init>
	self->TX.crc = createCRC(crc_type);
 80044da:	4630      	mov	r0, r6
 80044dc:	f7ff fe74 	bl	80041c8 <createCRC>
 80044e0:	66e8      	str	r0, [r5, #108]	@ 0x6c
	return true;
 80044e2:	2001      	movs	r0, #1
}
 80044e4:	e7d2      	b.n	800448c <rawP_dynamic_init+0x1c>
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 80044e6:	2000      	movs	r0, #0
}
 80044e8:	4770      	bx	lr
	M_Assert_BreakSaveCheck(self == NULL || settings == NULL, M_EMPTY, return NULL, "No valid parameters");
 80044ea:	2000      	movs	r0, #0
 80044ec:	e7ce      	b.n	800448c <rawP_dynamic_init+0x1c>

080044ee <rawP_dynamic_subscribe>:

void rawP_dynamic_subscribe(RawParser_dynamic_t* const self, const RawPdynamicCallback rx_callback, void* const rx_ctx)
{
	M_Assert_BreakSaveCheck(self == NULL, M_EMPTY, return, "No valid input");
 80044ee:	b108      	cbz	r0, 80044f4 <rawP_dynamic_subscribe+0x6>
	self->RX.rx_callback = rx_callback;
 80044f0:	6481      	str	r1, [r0, #72]	@ 0x48
	self->RX.rx_ctx = rx_ctx;
 80044f2:	64c2      	str	r2, [r0, #76]	@ 0x4c
}
 80044f4:	4770      	bx	lr

080044f6 <rawP_dynamic_proceed>:

void rawP_dynamic_proceed(RawParser_dynamic_t* const self)
{
 80044f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044fa:	b085      	sub	sp, #20
 80044fc:	4607      	mov	r7, r0
	_INT_SWITCH(M_Assert_Break((self == NULL), M_EMPTY, return NULL, "No valid input"));

	u8 buffer[10];
	const u8 SB = self->startByte;
 80044fe:	f890 9000 	ldrb.w	r9, [r0]
	bool triggerSB = self->RX.triggerSB;
 8004502:	7905      	ldrb	r5, [r0, #4]
	ringbuf_t* const rx_ring = &self->RX.input_ring;

	while(FIFO_NOT_EMPTY(rx_ring)) {
 8004504:	69c2      	ldr	r2, [r0, #28]
 8004506:	6a03      	ldr	r3, [r0, #32]
 8004508:	429a      	cmp	r2, r3
 800450a:	d02c      	beq.n	8004566 <rawP_dynamic_proceed+0x70>
 800450c:	f100 0b10 	add.w	fp, r0, #16
				} else { 			//{SB}{!SB} -> {SB} and newframe
					_proceedByte(self, ch, true);
				}
				triggerSB = false;
			} else if (SB == ch) { 	//{!SB}{SB} -> set flag and skip step
				triggerSB = true;
 8004510:	f04f 0a01 	mov.w	sl, #1
 8004514:	e01a      	b.n	800454c <rawP_dynamic_proceed+0x56>
			} else if (SB == ch) { 	//{!SB}{SB} -> set flag and skip step
 8004516:	4589      	cmp	r9, r1
 8004518:	d10f      	bne.n	800453a <rawP_dynamic_proceed+0x44>
				triggerSB = true;
 800451a:	4655      	mov	r5, sl
		for(reg i = 0; i != len; ++i) {
 800451c:	42b4      	cmp	r4, r6
 800451e:	d011      	beq.n	8004544 <rawP_dynamic_proceed+0x4e>
			const u8 ch = buffer[i];
 8004520:	f814 1b01 	ldrb.w	r1, [r4], #1
			if (triggerSB) {
 8004524:	2d00      	cmp	r5, #0
 8004526:	d0f6      	beq.n	8004516 <rawP_dynamic_proceed+0x20>
				if(SB == ch) { 		//{SB}{SB} -> {SB}
 8004528:	4589      	cmp	r9, r1
					_proceedByte(self, ch, false);
 800452a:	bf0c      	ite	eq
 800452c:	4642      	moveq	r2, r8
					_proceedByte(self, ch, true);
 800452e:	4652      	movne	r2, sl
 8004530:	4638      	mov	r0, r7
 8004532:	f7ff ff0b 	bl	800434c <_proceedByte>
				triggerSB = false;
 8004536:	4645      	mov	r5, r8
 8004538:	e7f0      	b.n	800451c <rawP_dynamic_proceed+0x26>
			} else { 				//{!SB}{!SB} -> {!SB}
				_proceedByte(self, ch, false);
 800453a:	4642      	mov	r2, r8
 800453c:	4638      	mov	r0, r7
 800453e:	f7ff ff05 	bl	800434c <_proceedByte>
 8004542:	e7eb      	b.n	800451c <rawP_dynamic_proceed+0x26>
	while(FIFO_NOT_EMPTY(rx_ring)) {
 8004544:	69fa      	ldr	r2, [r7, #28]
 8004546:	6a3b      	ldr	r3, [r7, #32]
 8004548:	429a      	cmp	r2, r3
 800454a:	d00c      	beq.n	8004566 <rawP_dynamic_proceed+0x70>
		const reg len = ringbuf_get(rx_ring, buffer, sizeof(buffer));
 800454c:	220a      	movs	r2, #10
 800454e:	a901      	add	r1, sp, #4
 8004550:	4658      	mov	r0, fp
 8004552:	f7ff fcdb 	bl	8003f0c <ringbuf_get>
		for(reg i = 0; i != len; ++i) {
 8004556:	4606      	mov	r6, r0
 8004558:	2800      	cmp	r0, #0
 800455a:	d0f3      	beq.n	8004544 <rawP_dynamic_proceed+0x4e>
 800455c:	ac01      	add	r4, sp, #4
 800455e:	4426      	add	r6, r4
				_proceedByte(self, ch, false);
 8004560:	f04f 0800 	mov.w	r8, #0
 8004564:	e7dc      	b.n	8004520 <rawP_dynamic_proceed+0x2a>
			}
		}
	}

	self->RX.triggerSB = triggerSB;
 8004566:	713d      	strb	r5, [r7, #4]
}
 8004568:	b005      	add	sp, #20
 800456a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800456e <rawP_dynamic_startTransmittPacket>:
	crc_obj_t* const tx_crc = self->TX.crc;
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
	const reg max_size = FIFO_CAPACITY(tx_ring) - 5U;

	// do logic ------------------------------------------------
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 800456e:	2900      	cmp	r1, #0
 8004570:	d061      	beq.n	8004636 <rawP_dynamic_startTransmittPacket+0xc8>
{
 8004572:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004576:	b082      	sub	sp, #8
 8004578:	4604      	mov	r4, r0
 800457a:	460d      	mov	r5, r1
	const reg max_size = FIFO_CAPACITY(tx_ring) - 5U;
 800457c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800457e:	3b05      	subs	r3, #5
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 8004580:	428b      	cmp	r3, r1
 8004582:	d35a      	bcc.n	800463a <rawP_dynamic_startTransmittPacket+0xcc>
	const u8 SB = self->startByte;
 8004584:	f890 8000 	ldrb.w	r8, [r0]
	crc_obj_t* const tx_crc = self->TX.crc;
 8004588:	6ec6      	ldr	r6, [r0, #108]	@ 0x6c
			M_EMPTY, return false, "No valid input length");

	M_Assert_Warning(len > (max_size >> 1),
			M_EMPTY, M_EMPTY, "UNDEFINED BEHAVIOR!!!");

	M_Assert_SafeFunctionCall(tx_crc, CRC_INIT(tx_crc));
 800458a:	b116      	cbz	r6, 8004592 <rawP_dynamic_startTransmittPacket+0x24>
 800458c:	68b3      	ldr	r3, [r6, #8]
 800458e:	6830      	ldr	r0, [r6, #0]
 8004590:	4798      	blx	r3
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
 8004592:	f104 0750 	add.w	r7, r4, #80	@ 0x50
	fifo->tail = 0;
 8004596:	2300      	movs	r3, #0
 8004598:	65e3      	str	r3, [r4, #92]	@ 0x5c
	fifo->head = 0;
 800459a:	6623      	str	r3, [r4, #96]	@ 0x60

	FIFO_CLEAN(tx_ring);
	self->TX.length_write_control = len;
 800459c:	66a5      	str	r5, [r4, #104]	@ 0x68

	ringbuf_putc(tx_ring, SB);
 800459e:	4641      	mov	r1, r8
 80045a0:	4638      	mov	r0, r7
 80045a2:	f7ff fd27 	bl	8003ff4 <ringbuf_putc>

	if(len > D_RAW_P_LEN_SEPARATOR) {
 80045a6:	2dfb      	cmp	r5, #251	@ 0xfb
 80045a8:	d80f      	bhi.n	80045ca <rawP_dynamic_startTransmittPacket+0x5c>
				const u8 arr[3] = {RECEIVE_EXTENDED_LEN_CMD, len_l, len_h};
				CRC_ARRAY(tx_crc, arr, sizeof(arr));
		});

	} else {
		const reg len_reg = (len >= SB) ? (len + 1U) : len;
 80045aa:	45a8      	cmp	r8, r5
 80045ac:	bf98      	it	ls
 80045ae:	3501      	addls	r5, #1
		ringbuf_putc(tx_ring, len_reg);
 80045b0:	b2ed      	uxtb	r5, r5
 80045b2:	4629      	mov	r1, r5
 80045b4:	4638      	mov	r0, r7
 80045b6:	f7ff fd1d 	bl	8003ff4 <ringbuf_putc>

		M_Assert_SafeFunctionCall(tx_crc, CRC_BYTE(tx_crc, len_reg));
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	d043      	beq.n	8004646 <rawP_dynamic_startTransmittPacket+0xd8>
 80045be:	6933      	ldr	r3, [r6, #16]
 80045c0:	4629      	mov	r1, r5
 80045c2:	6830      	ldr	r0, [r6, #0]
 80045c4:	4798      	blx	r3
	}
	return true;
 80045c6:	2001      	movs	r0, #1
 80045c8:	e038      	b.n	800463c <rawP_dynamic_startTransmittPacket+0xce>
		const u8 len_l = (u8)(len & 0xFF);
 80045ca:	b2ec      	uxtb	r4, r5
		const u8 len_h = (u8)((len >> 8) & 0xFF);
 80045cc:	f3c5 2507 	ubfx	r5, r5, #8, #8
		ringbuf_putc(tx_ring, RECEIVE_EXTENDED_LEN_CMD);
 80045d0:	21ff      	movs	r1, #255	@ 0xff
 80045d2:	4638      	mov	r0, r7
 80045d4:	f7ff fd0e 	bl	8003ff4 <ringbuf_putc>
	if(c == SB) {
 80045d8:	45a0      	cmp	r8, r4
 80045da:	d018      	beq.n	800460e <rawP_dynamic_startTransmittPacket+0xa0>
		ringbuf_putc(ring, c);
 80045dc:	4621      	mov	r1, r4
 80045de:	4638      	mov	r0, r7
 80045e0:	f7ff fd08 	bl	8003ff4 <ringbuf_putc>
	if(c == SB) {
 80045e4:	45a8      	cmp	r8, r5
 80045e6:	d01c      	beq.n	8004622 <rawP_dynamic_startTransmittPacket+0xb4>
		ringbuf_putc(ring, c);
 80045e8:	4629      	mov	r1, r5
 80045ea:	4638      	mov	r0, r7
 80045ec:	f7ff fd02 	bl	8003ff4 <ringbuf_putc>
		M_Assert_SafeFunctionCall(tx_crc, {
 80045f0:	b33e      	cbz	r6, 8004642 <rawP_dynamic_startTransmittPacket+0xd4>
 80045f2:	23ff      	movs	r3, #255	@ 0xff
 80045f4:	f88d 3004 	strb.w	r3, [sp, #4]
 80045f8:	f88d 4005 	strb.w	r4, [sp, #5]
 80045fc:	f88d 5006 	strb.w	r5, [sp, #6]
 8004600:	68f3      	ldr	r3, [r6, #12]
 8004602:	2203      	movs	r2, #3
 8004604:	a901      	add	r1, sp, #4
 8004606:	6830      	ldr	r0, [r6, #0]
 8004608:	4798      	blx	r3
	return true;
 800460a:	2001      	movs	r0, #1
 800460c:	e016      	b.n	800463c <rawP_dynamic_startTransmittPacket+0xce>
		const u8 arr [2] = {c, c};
 800460e:	f88d 4004 	strb.w	r4, [sp, #4]
 8004612:	f88d 4005 	strb.w	r4, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 8004616:	2202      	movs	r2, #2
 8004618:	a901      	add	r1, sp, #4
 800461a:	4638      	mov	r0, r7
 800461c:	f7ff fcad 	bl	8003f7a <ringbuf_put>
 8004620:	e7e0      	b.n	80045e4 <rawP_dynamic_startTransmittPacket+0x76>
		const u8 arr [2] = {c, c};
 8004622:	f88d 5004 	strb.w	r5, [sp, #4]
 8004626:	f88d 5005 	strb.w	r5, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 800462a:	2202      	movs	r2, #2
 800462c:	a901      	add	r1, sp, #4
 800462e:	4638      	mov	r0, r7
 8004630:	f7ff fca3 	bl	8003f7a <ringbuf_put>
 8004634:	e7dc      	b.n	80045f0 <rawP_dynamic_startTransmittPacket+0x82>
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 8004636:	2000      	movs	r0, #0
}
 8004638:	4770      	bx	lr
	M_Assert_WarningSaveCheck(len == 0 || len > max_size,
 800463a:	2000      	movs	r0, #0
}
 800463c:	b002      	add	sp, #8
 800463e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return true;
 8004642:	2001      	movs	r0, #1
 8004644:	e7fa      	b.n	800463c <rawP_dynamic_startTransmittPacket+0xce>
 8004646:	2001      	movs	r0, #1
 8004648:	e7f8      	b.n	800463c <rawP_dynamic_startTransmittPacket+0xce>

0800464a <rawP_dynamic_finishTransmittPacket>:


ringbuf_t* const rawP_dynamic_finishTransmittPacket(RawParser_dynamic_t* const self)
{
 800464a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800464e:	b082      	sub	sp, #8
	_INT_SWITCH(M_Assert_Break((self == NULL), M_EMPTY, return NULL, "No valid input"));

	crc_obj_t* const tx_crc = self->TX.crc;
 8004650:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
	ringbuf_t* const tx_ring = &self->TX.frame_stream;
 8004652:	f100 0550 	add.w	r5, r0, #80	@ 0x50
	reg ramained_len = self->TX.length_write_control;
 8004656:	6e82      	ldr	r2, [r0, #104]	@ 0x68

	// fill remaining len
	if(tx_crc) {
 8004658:	b1db      	cbz	r3, 8004692 <rawP_dynamic_finishTransmittPacket+0x48>
		const u8 SB = self->startByte;
 800465a:	f890 8000 	ldrb.w	r8, [r0]

		u8* const crc_pointer = tx_crc->base.crc;
 800465e:	681e      	ldr	r6, [r3, #0]
		const u8 crc_size = tx_crc->base.crc_size;
 8004660:	f893 a004 	ldrb.w	sl, [r3, #4]
		const crc_byte_func _crc_calc = tx_crc->crc_byte;
 8004664:	f8d3 9010 	ldr.w	r9, [r3, #16]

		while(ramained_len--) {
 8004668:	1e54      	subs	r4, r2, #1
 800466a:	b15a      	cbz	r2, 8004684 <rawP_dynamic_finishTransmittPacket+0x3a>
			ringbuf_putc(tx_ring, 0x00);
 800466c:	2700      	movs	r7, #0
 800466e:	4639      	mov	r1, r7
 8004670:	4628      	mov	r0, r5
 8004672:	f7ff fcbf 	bl	8003ff4 <ringbuf_putc>
			_crc_calc(crc_pointer, 0x00);
 8004676:	4639      	mov	r1, r7
 8004678:	4630      	mov	r0, r6
 800467a:	47c8      	blx	r9
		while(ramained_len--) {
 800467c:	3c01      	subs	r4, #1
 800467e:	f1b4 3fff 	cmp.w	r4, #4294967295
 8004682:	d1f4      	bne.n	800466e <rawP_dynamic_finishTransmittPacket+0x24>
		}

		LittleEndianGeneric(crc_pointer, crc_size);

		for(u8 i = 0; i != crc_size; ++i) {
 8004684:	f1ba 0f00 	cmp.w	sl, #0
 8004688:	d00e      	beq.n	80046a8 <rawP_dynamic_finishTransmittPacket+0x5e>
 800468a:	4634      	mov	r4, r6
 800468c:	4456      	add	r6, sl
 800468e:	2702      	movs	r7, #2
 8004690:	e019      	b.n	80046c6 <rawP_dynamic_finishTransmittPacket+0x7c>
			rawp_stream_addByte(tx_ring, *(crc_pointer + i), SB);
		}

	} else {
		while(ramained_len--) {
 8004692:	1e54      	subs	r4, r2, #1
 8004694:	b142      	cbz	r2, 80046a8 <rawP_dynamic_finishTransmittPacket+0x5e>
			ringbuf_putc(tx_ring, 0x00);
 8004696:	2600      	movs	r6, #0
 8004698:	4631      	mov	r1, r6
 800469a:	4628      	mov	r0, r5
 800469c:	f7ff fcaa 	bl	8003ff4 <ringbuf_putc>
		while(ramained_len--) {
 80046a0:	3c01      	subs	r4, #1
 80046a2:	f1b4 3fff 	cmp.w	r4, #4294967295
 80046a6:	d1f7      	bne.n	8004698 <rawP_dynamic_finishTransmittPacket+0x4e>
		}
	}

	return tx_ring;
}
 80046a8:	4628      	mov	r0, r5
 80046aa:	b002      	add	sp, #8
 80046ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const u8 arr [2] = {c, c};
 80046b0:	f88d 1004 	strb.w	r1, [sp, #4]
 80046b4:	f88d 1005 	strb.w	r1, [sp, #5]
		ringbuf_put(ring, arr, sizeof(arr));
 80046b8:	463a      	mov	r2, r7
 80046ba:	a901      	add	r1, sp, #4
 80046bc:	4628      	mov	r0, r5
 80046be:	f7ff fc5c 	bl	8003f7a <ringbuf_put>
		for(u8 i = 0; i != crc_size; ++i) {
 80046c2:	42a6      	cmp	r6, r4
 80046c4:	d0f0      	beq.n	80046a8 <rawP_dynamic_finishTransmittPacket+0x5e>
			rawp_stream_addByte(tx_ring, *(crc_pointer + i), SB);
 80046c6:	f814 1b01 	ldrb.w	r1, [r4], #1
	if(c == SB) {
 80046ca:	4541      	cmp	r1, r8
 80046cc:	d0f0      	beq.n	80046b0 <rawP_dynamic_finishTransmittPacket+0x66>
		ringbuf_putc(ring, c);
 80046ce:	4628      	mov	r0, r5
 80046d0:	f7ff fc90 	bl	8003ff4 <ringbuf_putc>
 80046d4:	e7f5      	b.n	80046c2 <rawP_dynamic_finishTransmittPacket+0x78>
	...

080046d8 <_write>:

extern UART_HandleTypeDef huart1;
#define UART_PRINTF	huart1

int _write(int file, char *ptr, int len)
{
 80046d8:	b510      	push	{r4, lr}
 80046da:	4614      	mov	r4, r2
	HAL_UART_Transmit(&UART_PRINTF, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80046dc:	f04f 33ff 	mov.w	r3, #4294967295
 80046e0:	b292      	uxth	r2, r2
 80046e2:	4802      	ldr	r0, [pc, #8]	@ (80046ec <_write+0x14>)
 80046e4:	f7fe fb0c 	bl	8002d00 <HAL_UART_Transmit>
	return len;
}
 80046e8:	4620      	mov	r0, r4
 80046ea:	bd10      	pop	{r4, pc}
 80046ec:	200002f0 	.word	0x200002f0

080046f0 <_ZN12Stm32ADC_dma5startEv>:
	delete[] adc_values;
}

bool Stm32ADC_dma::start()
{
	if(n_channels) {
 80046f0:	7902      	ldrb	r2, [r0, #4]
 80046f2:	b90a      	cbnz	r2, 80046f8 <_ZN12Stm32ADC_dma5startEv+0x8>
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
		return true;
	}

	return false;
 80046f4:	2000      	movs	r0, #0
}
 80046f6:	4770      	bx	lr
{
 80046f8:	b508      	push	{r3, lr}
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
 80046fa:	6881      	ldr	r1, [r0, #8]
 80046fc:	6800      	ldr	r0, [r0, #0]
 80046fe:	f7fd f9bd 	bl	8001a7c <HAL_ADC_Start_DMA>
		return true;
 8004702:	2001      	movs	r0, #1
}
 8004704:	bd08      	pop	{r3, pc}
	...

08004708 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>:

void Stm32ADC_dma::init(const Stm32ADC_init& settings)
{
 8004708:	b570      	push	{r4, r5, r6, lr}
 800470a:	4604      	mov	r4, r0
 800470c:	460d      	mov	r5, r1
	m_hadc = settings.hadc;
 800470e:	680b      	ldr	r3, [r1, #0]
 8004710:	6003      	str	r3, [r0, #0]
	n_channels = settings.hadc->Init.NbrOfConversion;
 8004712:	6918      	ldr	r0, [r3, #16]
 8004714:	7120      	strb	r0, [r4, #4]
	adc_values = new uint16_t[n_channels];
 8004716:	b2c0      	uxtb	r0, r0
 8004718:	0040      	lsls	r0, r0, #1
 800471a:	f000 faeb 	bl	8004cf4 <_Znaj>
 800471e:	60a0      	str	r0, [r4, #8]

	Stm32ADC_dma::instance = this;
 8004720:	4b06      	ldr	r3, [pc, #24]	@ (800473c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x34>)
 8004722:	601c      	str	r4, [r3, #0]

	ma.init(settings.filter, 16);
 8004724:	f104 0610 	add.w	r6, r4, #16
 8004728:	2210      	movs	r2, #16
 800472a:	6869      	ldr	r1, [r5, #4]
 800472c:	4630      	mov	r0, r6
 800472e:	f000 f893 	bl	8004858 <_ZN20FP_MovingAverageBase4initEfh>
	ma.allocArrays(n_channels);
 8004732:	7921      	ldrb	r1, [r4, #4]
 8004734:	4630      	mov	r0, r6
 8004736:	f000 f85f 	bl	80047f8 <_ZN21FP_MovingAverageArray11allocArraysEh>
}
 800473a:	bd70      	pop	{r4, r5, r6, pc}
 800473c:	20000350 	.word	0x20000350

08004740 <_ZN12Stm32ADC_dma7proceedEm>:

bool Stm32ADC_dma::proceed(const uint32_t current_time)
{
 8004740:	b538      	push	{r3, r4, r5, lr}
	if(calculated) {
 8004742:	7b03      	ldrb	r3, [r0, #12]
 8004744:	f003 05ff 	and.w	r5, r3, #255	@ 0xff
 8004748:	b90b      	cbnz	r3, 800474e <_ZN12Stm32ADC_dma7proceedEm+0xe>

		return true;
	}

	return false;
}
 800474a:	4628      	mov	r0, r5
 800474c:	bd38      	pop	{r3, r4, r5, pc}
 800474e:	4604      	mov	r4, r0
		ma.proceed(adc_values);
 8004750:	6881      	ldr	r1, [r0, #8]
 8004752:	3010      	adds	r0, #16
 8004754:	f000 f85e 	bl	8004814 <_ZN21FP_MovingAverageArray7proceedEPt>
		calculated = false;
 8004758:	2300      	movs	r3, #0
 800475a:	7323      	strb	r3, [r4, #12]
		return true;
 800475c:	e7f5      	b.n	800474a <_ZN12Stm32ADC_dma7proceedEm+0xa>
	...

08004760 <HAL_ADC_ConvCpltCallback>:
	inline uint32_t getAdc(int i) const {return ma.getOut(i);}
	inline uint8_t getChannels() const { return n_channels; }

	bool proceed(const uint32_t current_time);
	static inline Stm32ADC_dma* const getObject(ADC_HandleTypeDef* const hadc) {
		if(instance->m_hadc == hadc) {
 8004760:	4b03      	ldr	r3, [pc, #12]	@ (8004770 <HAL_ADC_ConvCpltCallback+0x10>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	4282      	cmp	r2, r0
	inline void calculateFinished() { calculated = true;}
 8004768:	bf04      	itt	eq
 800476a:	2201      	moveq	r2, #1
 800476c:	731a      	strbeq	r2, [r3, #12]
{
	Stm32ADC_dma* const root = Stm32ADC_dma::getObject(hadc);
	if(root) {
		root->calculateFinished();
	}
}
 800476e:	4770      	bx	lr
 8004770:	20000350 	.word	0x20000350

08004774 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8004774:	b508      	push	{r3, lr}
    assert(g_irq_lock_ct > 0);
 8004776:	4b0b      	ldr	r3, [pc, #44]	@ (80047a4 <IRQ_UNLOCK+0x30>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	dd06      	ble.n	800478c <IRQ_UNLOCK+0x18>
    if (--g_irq_lock_ct <= 0)
 800477e:	4a09      	ldr	r2, [pc, #36]	@ (80047a4 <IRQ_UNLOCK+0x30>)
 8004780:	6813      	ldr	r3, [r2, #0]
 8004782:	3b01      	subs	r3, #1
 8004784:	6013      	str	r3, [r2, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	dd06      	ble.n	8004798 <IRQ_UNLOCK+0x24>
    {
        g_irq_lock_ct = 0;
        __enable_irq();
    }
}
 800478a:	bd08      	pop	{r3, pc}
    assert(g_irq_lock_ct > 0);
 800478c:	4b06      	ldr	r3, [pc, #24]	@ (80047a8 <IRQ_UNLOCK+0x34>)
 800478e:	4a07      	ldr	r2, [pc, #28]	@ (80047ac <IRQ_UNLOCK+0x38>)
 8004790:	2137      	movs	r1, #55	@ 0x37
 8004792:	4807      	ldr	r0, [pc, #28]	@ (80047b0 <IRQ_UNLOCK+0x3c>)
 8004794:	f000 fc2a 	bl	8004fec <__assert_func>
        g_irq_lock_ct = 0;
 8004798:	4613      	mov	r3, r2
 800479a:	2200      	movs	r2, #0
 800479c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800479e:	b662      	cpsie	i
}
 80047a0:	e7f3      	b.n	800478a <IRQ_UNLOCK+0x16>
 80047a2:	bf00      	nop
 80047a4:	20000354 	.word	0x20000354
 80047a8:	080088d8 	.word	0x080088d8
 80047ac:	08008914 	.word	0x08008914
 80047b0:	080088ec 	.word	0x080088ec

080047b4 <IRQ_LOCK>:
  __ASM volatile ("cpsid i" : : : "memory");
 80047b4:	b672      	cpsid	i
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
    __disable_irq();
    ++g_irq_lock_ct;
 80047b6:	4a02      	ldr	r2, [pc, #8]	@ (80047c0 <IRQ_LOCK+0xc>)
 80047b8:	6813      	ldr	r3, [r2, #0]
 80047ba:	3301      	adds	r3, #1
 80047bc:	6013      	str	r3, [r2, #0]
}
 80047be:	4770      	bx	lr
 80047c0:	20000354 	.word	0x20000354

080047c4 <_ZN21FP_MovingAverageArrayD1Ev>:
 *      Author: admin
 */

#include "FPMovingAverageArray.h"

FP_MovingAverageArray::~FP_MovingAverageArray()
 80047c4:	b510      	push	{r4, lr}
 80047c6:	4604      	mov	r4, r0
 80047c8:	4b05      	ldr	r3, [pc, #20]	@ (80047e0 <_ZN21FP_MovingAverageArrayD1Ev+0x1c>)
 80047ca:	6003      	str	r3, [r0, #0]
{
	// TODO Auto-generated destructor stub
	delete[] m_y_states;
 80047cc:	6900      	ldr	r0, [r0, #16]
 80047ce:	b108      	cbz	r0, 80047d4 <_ZN21FP_MovingAverageArrayD1Ev+0x10>
 80047d0:	f000 fa6e 	bl	8004cb0 <_ZdaPv>
	delete[] m_y;
 80047d4:	6960      	ldr	r0, [r4, #20]
 80047d6:	b108      	cbz	r0, 80047dc <_ZN21FP_MovingAverageArrayD1Ev+0x18>
 80047d8:	f000 fa6a 	bl	8004cb0 <_ZdaPv>
}
 80047dc:	4620      	mov	r0, r4
 80047de:	bd10      	pop	{r4, pc}
 80047e0:	08008928 	.word	0x08008928

080047e4 <_ZN21FP_MovingAverageArrayD0Ev>:
FP_MovingAverageArray::~FP_MovingAverageArray()
 80047e4:	b510      	push	{r4, lr}
 80047e6:	4604      	mov	r4, r0
}
 80047e8:	f7ff ffec 	bl	80047c4 <_ZN21FP_MovingAverageArrayD1Ev>
 80047ec:	211c      	movs	r1, #28
 80047ee:	4620      	mov	r0, r4
 80047f0:	f000 fa5c 	bl	8004cac <_ZdlPvj>
 80047f4:	4620      	mov	r0, r4
 80047f6:	bd10      	pop	{r4, pc}

080047f8 <_ZN21FP_MovingAverageArray11allocArraysEh>:

void FP_MovingAverageArray::allocArrays(const uint8_t n)
{
 80047f8:	b570      	push	{r4, r5, r6, lr}
 80047fa:	4604      	mov	r4, r0
 80047fc:	460d      	mov	r5, r1
	m_y_states = new uint32_t[n];
 80047fe:	008e      	lsls	r6, r1, #2
 8004800:	4630      	mov	r0, r6
 8004802:	f000 fa77 	bl	8004cf4 <_Znaj>
 8004806:	6120      	str	r0, [r4, #16]
	m_y = new uint32_t[n];
 8004808:	4630      	mov	r0, r6
 800480a:	f000 fa73 	bl	8004cf4 <_Znaj>
 800480e:	6160      	str	r0, [r4, #20]
	m_n = n;
 8004810:	7625      	strb	r5, [r4, #24]
}
 8004812:	bd70      	pop	{r4, r5, r6, pc}

08004814 <_ZN21FP_MovingAverageArray7proceedEPt>:

void FP_MovingAverageArray::proceed(uint16_t* const values)
{
 8004814:	b530      	push	{r4, r5, lr}
	uint8_t n = m_n;
 8004816:	7e04      	ldrb	r4, [r0, #24]
	uint16_t* x_ptr = values;
	uint32_t* y_ptr = m_y;
 8004818:	6943      	ldr	r3, [r0, #20]
	uint32_t* y_state_ptr = m_y_states;
 800481a:	6902      	ldr	r2, [r0, #16]

	while(n) {
 800481c:	b1dc      	cbz	r4, 8004856 <_ZN21FP_MovingAverageArray7proceedEPt+0x42>
 800481e:	f1a1 0c02 	sub.w	ip, r1, #2
 8004822:	1f19      	subs	r1, r3, #4
 8004824:	eb02 0484 	add.w	r4, r2, r4, lsl #2
		baseProceed(*x_ptr, *y_ptr, *y_state_ptr);
 8004828:	f83c 3f02 	ldrh.w	r3, [ip, #2]!
	bool init(const float alpha, const uint8_t Q);
	bool inline setAlpha(const float alpha) {return init(alpha, m_Q);}

	void inline baseProceed(const uint32_t x, uint32_t& last, uint32_t& last_shifted)
	{
		const int32_t val = (x - last) * m_alpha_scaled;
 800482c:	f851 5f04 	ldr.w	r5, [r1, #4]!
 8004830:	1b5b      	subs	r3, r3, r5
 8004832:	68c5      	ldr	r5, [r0, #12]
 8004834:	fb05 f303 	mul.w	r3, r5, r3
		last_shifted += val >> m_diff_b;
 8004838:	f890 e006 	ldrb.w	lr, [r0, #6]
 800483c:	fa43 f30e 	asr.w	r3, r3, lr
 8004840:	6815      	ldr	r5, [r2, #0]
 8004842:	442b      	add	r3, r5
 8004844:	f842 3b04 	str.w	r3, [r2], #4
		last = last_shifted >> m_N;
 8004848:	f890 e005 	ldrb.w	lr, [r0, #5]
 800484c:	fa23 f30e 	lsr.w	r3, r3, lr
 8004850:	600b      	str	r3, [r1, #0]
	while(n) {
 8004852:	42a2      	cmp	r2, r4
 8004854:	d1e8      	bne.n	8004828 <_ZN21FP_MovingAverageArray7proceedEPt+0x14>
		++x_ptr;
		++y_ptr;
		++y_state_ptr;
		--n;
	}
}
 8004856:	bd30      	pop	{r4, r5, pc}

08004858 <_ZN20FP_MovingAverageBase4initEfh>:
#include "FPMovingAverageBase.h"
#include <cmath>


bool FP_MovingAverageBase::init(const float alpha, const uint8_t Q)
{
 8004858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800485a:	4605      	mov	r5, r0
 800485c:	460e      	mov	r6, r1
 800485e:	4614      	mov	r4, r2

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 8004860:	4608      	mov	r0, r1
 8004862:	f000 fa57 	bl	8004d14 <log2f>
	const int N = -std::log2(alpha);
 8004866:	f100 4000 	add.w	r0, r0, #2147483648	@ 0x80000000
 800486a:	f7fc fbf7 	bl	800105c <__aeabi_f2iz>

	if((Q + N) > 32 || N < 0) {
 800486e:	1823      	adds	r3, r4, r0
 8004870:	2b20      	cmp	r3, #32
 8004872:	dc14      	bgt.n	800489e <_ZN20FP_MovingAverageBase4initEfh+0x46>
 8004874:	2800      	cmp	r0, #0
 8004876:	db14      	blt.n	80048a2 <_ZN20FP_MovingAverageBase4initEfh+0x4a>
		return false;
	}

	m_N = N;
 8004878:	b2c3      	uxtb	r3, r0
 800487a:	716b      	strb	r3, [r5, #5]
	m_Q = Q;
 800487c:	712c      	strb	r4, [r5, #4]
	m_diff_b = (m_Q - m_N);
 800487e:	1ae3      	subs	r3, r4, r3
 8004880:	71ab      	strb	r3, [r5, #6]
	m_alpha = alpha;
 8004882:	60ae      	str	r6, [r5, #8]
	m_alpha_scaled = static_cast<uint32_t>(static_cast<float>(1 << Q) * alpha);
 8004884:	2701      	movs	r7, #1
 8004886:	fa07 f004 	lsl.w	r0, r7, r4
 800488a:	f7fc f9b7 	bl	8000bfc <__aeabi_i2f>
 800488e:	4631      	mov	r1, r6
 8004890:	f7fc fa08 	bl	8000ca4 <__aeabi_fmul>
 8004894:	f7fc fc08 	bl	80010a8 <__aeabi_f2uiz>
 8004898:	60e8      	str	r0, [r5, #12]

	return true;
 800489a:	4638      	mov	r0, r7
}
 800489c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
 800489e:	2000      	movs	r0, #0
 80048a0:	e7fc      	b.n	800489c <_ZN20FP_MovingAverageBase4initEfh+0x44>
 80048a2:	2000      	movs	r0, #0
 80048a4:	e7fa      	b.n	800489c <_ZN20FP_MovingAverageBase4initEfh+0x44>
	...

080048a8 <HAL_SYSTICK_Callback>:
      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit _GLIBCXX20_CONSTEXPR
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
      : _M_current(__i) { }
 80048a8:	4a08      	ldr	r2, [pc, #32]	@ (80048cc <HAL_SYSTICK_Callback+0x24>)
 80048aa:	6813      	ldr	r3, [r2, #0]
 80048ac:	6850      	ldr	r0, [r2, #4]
	TimingManager();
	TimingManager(const uint32_t delay);
	~TimingManager();

    static inline void proceed() {
        for (TimingManager* const timer : m_timers) {
 80048ae:	4283      	cmp	r3, r0
 80048b0:	d102      	bne.n	80048b8 <HAL_SYSTICK_Callback+0x10>
//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
	TimingManager::proceed();
}
 80048b2:	4770      	bx	lr
 80048b4:	4283      	cmp	r3, r0
 80048b6:	d0fc      	beq.n	80048b2 <HAL_SYSTICK_Callback+0xa>
 80048b8:	f853 2b04 	ldr.w	r2, [r3], #4
            if (timer->m_counter) {
 80048bc:	6811      	ldr	r1, [r2, #0]
 80048be:	2900      	cmp	r1, #0
 80048c0:	d0f8      	beq.n	80048b4 <HAL_SYSTICK_Callback+0xc>
                --timer->m_counter;
 80048c2:	6811      	ldr	r1, [r2, #0]
 80048c4:	3901      	subs	r1, #1
 80048c6:	6011      	str	r1, [r2, #0]
 80048c8:	e7f4      	b.n	80048b4 <HAL_SYSTICK_Callback+0xc>
 80048ca:	bf00      	nop
 80048cc:	20000358 	.word	0x20000358

080048d0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80048d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048d4:	4689      	mov	r9, r1
 80048d6:	4692      	mov	sl, r2
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80048d8:	6847      	ldr	r7, [r0, #4]
 80048da:	f8d0 8000 	ldr.w	r8, [r0]
 80048de:	eba7 0208 	sub.w	r2, r7, r8
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 80048e2:	f06f 4160 	mvn.w	r1, #3758096384	@ 0xe0000000
 80048e6:	ebb1 0fa2 	cmp.w	r1, r2, asr #2
 80048ea:	d011      	beq.n	8004910 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x40>
 80048ec:	4605      	mov	r5, r0
 80048ee:	1093      	asrs	r3, r2, #2
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
 80048f0:	4547      	cmp	r7, r8
 80048f2:	bf14      	ite	ne
 80048f4:	461a      	movne	r2, r3
 80048f6:	2201      	moveq	r2, #1
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80048f8:	189b      	adds	r3, r3, r2
 80048fa:	d21c      	bcs.n	8004936 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x66>
 80048fc:	f06f 4b60 	mvn.w	fp, #3758096384	@ 0xe0000000
 8004900:	459b      	cmp	fp, r3
 8004902:	bf28      	it	cs
 8004904:	469b      	movcs	fp, r3
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8004906:	eba9 0408 	sub.w	r4, r9, r8
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800490a:	b9c3      	cbnz	r3, 800493e <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x6e>
 800490c:	2600      	movs	r6, #0
 800490e:	e01b      	b.n	8004948 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __throw_length_error(__N(__s));
 8004910:	481e      	ldr	r0, [pc, #120]	@ (800498c <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xbc>)
 8004912:	f000 f9f1 	bl	8004cf8 <_ZSt20__throw_length_errorPKc>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8004916:	4622      	mov	r2, r4
 8004918:	4641      	mov	r1, r8
 800491a:	4630      	mov	r0, r6
 800491c:	f001 fc5e 	bl	80061dc <memmove>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8004920:	3404      	adds	r4, #4
 8004922:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 8004924:	eba7 0709 	sub.w	r7, r7, r9
      if (__count > 0)
 8004928:	2f00      	cmp	r7, #0
 800492a:	dc18      	bgt.n	800495e <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x8e>
	}
      return __result + __count;
 800492c:	443c      	add	r4, r7
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 800492e:	68a9      	ldr	r1, [r5, #8]
 8004930:	eba1 0108 	sub.w	r1, r1, r8
      _M_deallocate(pointer __p, size_t __n)
 8004934:	e01f      	b.n	8004976 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa6>
 8004936:	eba9 0408 	sub.w	r4, r9, r8
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800493a:	f06f 4b60 	mvn.w	fp, #3758096384	@ 0xe0000000
	    std::align_val_t __al = std::align_val_t(alignof(_Tp));
	    return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp),
							   __al));
	  }
#endif
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800493e:	ea4f 008b 	mov.w	r0, fp, lsl #2
 8004942:	f000 f9c6 	bl	8004cd2 <_Znwj>
 8004946:	4606      	mov	r6, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004948:	f8da 3000 	ldr.w	r3, [sl]
 800494c:	5133      	str	r3, [r6, r4]
      if (__count > 0)
 800494e:	2c00      	cmp	r4, #0
 8004950:	dce1      	bgt.n	8004916 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x46>
	      ++__new_finish;
 8004952:	3404      	adds	r4, #4
 8004954:	4434      	add	r4, r6
      ptrdiff_t __count = __last - __first;
 8004956:	eba7 0709 	sub.w	r7, r7, r9
      if (__count > 0)
 800495a:	2f00      	cmp	r7, #0
 800495c:	dd04      	ble.n	8004968 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x98>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800495e:	463a      	mov	r2, r7
 8004960:	4649      	mov	r1, r9
 8004962:	4620      	mov	r0, r4
 8004964:	f001 fd35 	bl	80063d2 <memcpy>
      return __result + __count;
 8004968:	443c      	add	r4, r7
	if (__p)
 800496a:	f1b8 0f00 	cmp.w	r8, #0
 800496e:	d005      	beq.n	800497c <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xac>
		    this->_M_impl._M_end_of_storage - __old_start);
 8004970:	68a9      	ldr	r1, [r5, #8]
 8004972:	eba1 0108 	sub.w	r1, r1, r8
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004976:	4640      	mov	r0, r8
 8004978:	f000 f998 	bl	8004cac <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 800497c:	602e      	str	r6, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 800497e:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004980:	eb06 068b 	add.w	r6, r6, fp, lsl #2
 8004984:	60ae      	str	r6, [r5, #8]
    }
 8004986:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800498a:	bf00      	nop
 800498c:	08008930 	.word	0x08008930

08004990 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8004990:	b508      	push	{r3, lr}
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004992:	6843      	ldr	r3, [r0, #4]
 8004994:	6882      	ldr	r2, [r0, #8]
 8004996:	4293      	cmp	r3, r2
 8004998:	d005      	beq.n	80049a6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x16>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800499a:	680a      	ldr	r2, [r1, #0]
 800499c:	601a      	str	r2, [r3, #0]
	    ++this->_M_impl._M_finish;
 800499e:	6843      	ldr	r3, [r0, #4]
 80049a0:	3304      	adds	r3, #4
 80049a2:	6043      	str	r3, [r0, #4]
      }
 80049a4:	bd08      	pop	{r3, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80049a6:	460a      	mov	r2, r1
 80049a8:	4619      	mov	r1, r3
 80049aa:	f7ff ff91 	bl	80048d0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80049ae:	e7f9      	b.n	80049a4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x14>

080049b0 <_ZN13TimingManagerC1Ev>:
TimingManager::TimingManager()
 80049b0:	b510      	push	{r4, lr}
 80049b2:	b082      	sub	sp, #8
 80049b4:	4604      	mov	r4, r0
 80049b6:	2300      	movs	r3, #0
 80049b8:	6003      	str	r3, [r0, #0]
	m_counter = 0;
 80049ba:	6003      	str	r3, [r0, #0]
	m_timers.push_back(this);
 80049bc:	9001      	str	r0, [sp, #4]
      { emplace_back(std::move(__x)); }
 80049be:	a901      	add	r1, sp, #4
 80049c0:	4802      	ldr	r0, [pc, #8]	@ (80049cc <_ZN13TimingManagerC1Ev+0x1c>)
 80049c2:	f7ff ffe5 	bl	8004990 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
}
 80049c6:	4620      	mov	r0, r4
 80049c8:	b002      	add	sp, #8
 80049ca:	bd10      	pop	{r4, pc}
 80049cc:	20000358 	.word	0x20000358

080049d0 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80049d0:	4b02      	ldr	r3, [pc, #8]	@ (80049dc <_GLOBAL__sub_I__ZN13TimingManager8m_timersE+0xc>)
 80049d2:	2200      	movs	r2, #0
 80049d4:	601a      	str	r2, [r3, #0]
 80049d6:	605a      	str	r2, [r3, #4]
 80049d8:	609a      	str	r2, [r3, #8]
}
 80049da:	4770      	bx	lr
 80049dc:	20000358 	.word	0x20000358

080049e0 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 80049e0:	b508      	push	{r3, lr}
	_M_deallocate(_M_impl._M_start,
 80049e2:	4b04      	ldr	r3, [pc, #16]	@ (80049f4 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE+0x14>)
 80049e4:	6818      	ldr	r0, [r3, #0]
	if (__p)
 80049e6:	b118      	cbz	r0, 80049f0 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE+0x10>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80049e8:	6899      	ldr	r1, [r3, #8]
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80049ea:	1a09      	subs	r1, r1, r0
 80049ec:	f000 f95e 	bl	8004cac <_ZdlPvj>
 80049f0:	bd08      	pop	{r3, pc}
 80049f2:	bf00      	nop
 80049f4:	20000358 	.word	0x20000358

080049f8 <UART_SendBuffer>:
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 80049f8:	b1d9      	cbz	r1, 8004a32 <UART_SendBuffer+0x3a>
{
 80049fa:	b570      	push	{r4, r5, r6, lr}
 80049fc:	4604      	mov	r4, r0
 80049fe:	4615      	mov	r5, r2
 8004a00:	460e      	mov	r6, r1
	if (!txBuff || txSize == 0) {
 8004a02:	b1ca      	cbz	r2, 8004a38 <UART_SendBuffer+0x40>
		return ERROR_INVALID_ARGUMENT;
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8004a04:	f7ff fed6 	bl	80047b4 <IRQ_LOCK>
	if (self->isTxBusy_) {
 8004a08:	7923      	ldrb	r3, [r4, #4]
 8004a0a:	b973      	cbnz	r3, 8004a2a <UART_SendBuffer+0x32>
		IRQ_UNLOCK();
		return STATUS_BUSY;
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	7123      	strb	r3, [r4, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 8004a10:	b2aa      	uxth	r2, r5
 8004a12:	4631      	mov	r1, r6
 8004a14:	6820      	ldr	r0, [r4, #0]
 8004a16:	f7fe f9d9 	bl	8002dcc <HAL_UART_Transmit_DMA>
 8004a1a:	4604      	mov	r4, r0
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8004a1c:	f7ff feaa 	bl	8004774 <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 8004a20:	1e20      	subs	r0, r4, #0
 8004a22:	bf18      	it	ne
 8004a24:	2001      	movne	r0, #1
 8004a26:	4240      	negs	r0, r0
		return ERROR_FAIL;
	}

	return STATUS_OK;
}
 8004a28:	bd70      	pop	{r4, r5, r6, pc}
		IRQ_UNLOCK();
 8004a2a:	f7ff fea3 	bl	8004774 <IRQ_UNLOCK>
		return STATUS_BUSY;
 8004a2e:	2002      	movs	r0, #2
 8004a30:	e7fa      	b.n	8004a28 <UART_SendBuffer+0x30>
		return ERROR_INVALID_ARGUMENT;
 8004a32:	f06f 0004 	mvn.w	r0, #4
}
 8004a36:	4770      	bx	lr
		return ERROR_INVALID_ARGUMENT;
 8004a38:	f06f 0004 	mvn.w	r0, #4
 8004a3c:	e7f4      	b.n	8004a28 <UART_SendBuffer+0x30>

08004a3e <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
	if (self->isTxBusy_) {
 8004a3e:	7903      	ldrb	r3, [r0, #4]
 8004a40:	b91b      	cbnz	r3, 8004a4a <UART_SetTxcallback+0xc>
		return STATUS_BUSY;
	}

	self->TX.txCallback_ = f;
 8004a42:	6081      	str	r1, [r0, #8]
	self->TX.txCallbackData_ = captured;
 8004a44:	60c2      	str	r2, [r0, #12]

	return STATUS_OK;
 8004a46:	2000      	movs	r0, #0
 8004a48:	4770      	bx	lr
		return STATUS_BUSY;
 8004a4a:	2002      	movs	r0, #2
}
 8004a4c:	4770      	bx	lr

08004a4e <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 8004a4e:	b508      	push	{r3, lr}
	void* const captured = self->TX.txCallbackData_;
 8004a50:	68c1      	ldr	r1, [r0, #12]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 8004a52:	6882      	ldr	r2, [r0, #8]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8004a54:	6803      	ldr	r3, [r0, #0]
 8004a56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
	self->isTxBusy_ = false;
 8004a5a:	f04f 0c00 	mov.w	ip, #0
 8004a5e:	f880 c004 	strb.w	ip, [r0, #4]

	if (callback) {
 8004a62:	b132      	cbz	r2, 8004a72 <UART_TXCallback+0x24>
 8004a64:	b2db      	uxtb	r3, r3
		callback(status, captured);
 8004a66:	2be0      	cmp	r3, #224	@ 0xe0
 8004a68:	f04f 30ff 	mov.w	r0, #4294967295
 8004a6c:	bf18      	it	ne
 8004a6e:	2000      	movne	r0, #0
 8004a70:	4790      	blx	r2
	}
}
 8004a72:	bd08      	pop	{r3, pc}

08004a74 <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 8004a74:	b508      	push	{r3, lr}
 8004a76:	4603      	mov	r3, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004a78:	6802      	ldr	r2, [r0, #0]
	status_t status = ERROR_FAIL;

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8004a7a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a7c:	f011 0f08 	tst.w	r1, #8
 8004a80:	d13b      	bne.n	8004afa <UART_ErrorCallback+0x86>
		status = ERROR_UART_RX_OVERRUN;
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8004a82:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a84:	f011 0f04 	tst.w	r1, #4
 8004a88:	d13e      	bne.n	8004b08 <UART_ErrorCallback+0x94>
		status = ERROR_UART_FRAMING_ERR;
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8004a8a:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a8c:	f011 0f02 	tst.w	r1, #2
 8004a90:	d13d      	bne.n	8004b0e <UART_ErrorCallback+0x9a>
		status = ERROR_UART_RX_NOISE;
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8004a92:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8004a94:	f011 0f10 	tst.w	r1, #16
 8004a98:	d004      	beq.n	8004aa4 <UART_ErrorCallback+0x30>
		self->isTxBusy_ = false;
 8004a9a:	2200      	movs	r2, #0
 8004a9c:	7102      	strb	r2, [r0, #4]
		status = ERROR_UART_TX_DMA_ERR;
 8004a9e:	f06f 004a 	mvn.w	r0, #74	@ 0x4a
 8004aa2:	e02c      	b.n	8004afe <UART_ErrorCallback+0x8a>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 8004aa4:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004aa8:	b2c9      	uxtb	r1, r1
 8004aaa:	2924      	cmp	r1, #36	@ 0x24
 8004aac:	d032      	beq.n	8004b14 <UART_ErrorCallback+0xa0>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 8004aae:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004ab2:	b2c9      	uxtb	r1, r1
 8004ab4:	2922      	cmp	r1, #34	@ 0x22
 8004ab6:	d02f      	beq.n	8004b18 <UART_ErrorCallback+0xa4>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8004ab8:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004abc:	b2c9      	uxtb	r1, r1
 8004abe:	2921      	cmp	r1, #33	@ 0x21
 8004ac0:	d02c      	beq.n	8004b1c <UART_ErrorCallback+0xa8>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 8004ac2:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004ac6:	b2c9      	uxtb	r1, r1
 8004ac8:	2923      	cmp	r1, #35	@ 0x23
 8004aca:	d029      	beq.n	8004b20 <UART_ErrorCallback+0xac>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 8004acc:	f892 1041 	ldrb.w	r1, [r2, #65]	@ 0x41
 8004ad0:	b2c9      	uxtb	r1, r1
 8004ad2:	29e0      	cmp	r1, #224	@ 0xe0
 8004ad4:	d007      	beq.n	8004ae6 <UART_ErrorCallback+0x72>
		self->isTxBusy_ = false;
		status = ERROR_FAIL;
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 8004ad6:	f892 2041 	ldrb.w	r2, [r2, #65]	@ 0x41
 8004ada:	b2d2      	uxtb	r2, r2
 8004adc:	2aa0      	cmp	r2, #160	@ 0xa0
 8004ade:	d007      	beq.n	8004af0 <UART_ErrorCallback+0x7c>
	status_t status = ERROR_FAIL;
 8004ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae4:	e00b      	b.n	8004afe <UART_ErrorCallback+0x8a>
		self->isTxBusy_ = false;
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	7102      	strb	r2, [r0, #4]
		status = ERROR_FAIL;
 8004aea:	f04f 30ff 	mov.w	r0, #4294967295
 8004aee:	e006      	b.n	8004afe <UART_ErrorCallback+0x8a>
		self->isTxBusy_ = false;
 8004af0:	2200      	movs	r2, #0
 8004af2:	7102      	strb	r2, [r0, #4]
		status = ERROR_TIMEOUT;
 8004af4:	f06f 0005 	mvn.w	r0, #5
 8004af8:	e001      	b.n	8004afe <UART_ErrorCallback+0x8a>
		status = ERROR_UART_RX_OVERRUN;
 8004afa:	f06f 0047 	mvn.w	r0, #71	@ 0x47
	}

	void* const captured = self->Error.errorCallbackData_;
	const uart_error_callback_t callback = self->Error.errorCallback;
 8004afe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
	if (callback) {
 8004b00:	b10a      	cbz	r2, 8004b06 <UART_ErrorCallback+0x92>
		callback(status, captured);
 8004b02:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8004b04:	4790      	blx	r2
	}
}
 8004b06:	bd08      	pop	{r3, pc}
		status = ERROR_UART_FRAMING_ERR;
 8004b08:	f06f 0049 	mvn.w	r0, #73	@ 0x49
 8004b0c:	e7f7      	b.n	8004afe <UART_ErrorCallback+0x8a>
		status = ERROR_UART_RX_NOISE;
 8004b0e:	f06f 0048 	mvn.w	r0, #72	@ 0x48
 8004b12:	e7f4      	b.n	8004afe <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004b14:	2002      	movs	r0, #2
 8004b16:	e7f2      	b.n	8004afe <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004b18:	2002      	movs	r0, #2
 8004b1a:	e7f0      	b.n	8004afe <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004b1c:	2002      	movs	r0, #2
 8004b1e:	e7ee      	b.n	8004afe <UART_ErrorCallback+0x8a>
		status = STATUS_BUSY;
 8004b20:	2002      	movs	r0, #2
 8004b22:	e7ec      	b.n	8004afe <UART_ErrorCallback+0x8a>

08004b24 <UART_RXCallback>:
{
 8004b24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b26:	4604      	mov	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004b28:	6805      	ldr	r5, [r0, #0]
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 8004b2a:	69c1      	ldr	r1, [r0, #28]
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 8004b2c:	6a03      	ldr	r3, [r0, #32]
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 8004b2e:	6982      	ldr	r2, [r0, #24]
	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8004b30:	6aaf      	ldr	r7, [r5, #40]	@ 0x28
 8004b32:	428f      	cmp	r7, r1
 8004b34:	d020      	beq.n	8004b78 <UART_RXCallback+0x54>
 8004b36:	429f      	cmp	r7, r3
 8004b38:	d117      	bne.n	8004b6a <UART_RXCallback+0x46>
	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b3a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685e      	ldr	r6, [r3, #4]
 8004b40:	1b96      	subs	r6, r2, r6
	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8004b42:	b292      	uxth	r2, r2
 8004b44:	4628      	mov	r0, r5
 8004b46:	f7fe fcd9 	bl	80034fc <HAL_UART_Receive_DMA>
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 8004b4a:	b920      	cbnz	r0, 8004b56 <UART_RXCallback+0x32>
 8004b4c:	f895 3041 	ldrb.w	r3, [r5, #65]	@ 0x41
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2be0      	cmp	r3, #224	@ 0xe0
 8004b54:	d102      	bne.n	8004b5c <UART_RXCallback+0x38>
		UART_ErrorCallback(self);
 8004b56:	4620      	mov	r0, r4
 8004b58:	f7ff ff8c 	bl	8004a74 <UART_ErrorCallback>
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 8004b5c:	6923      	ldr	r3, [r4, #16]
	if (callback) {
 8004b5e:	b11b      	cbz	r3, 8004b68 <UART_RXCallback+0x44>
		callback(curr, size, captured);
 8004b60:	6962      	ldr	r2, [r4, #20]
 8004b62:	4631      	mov	r1, r6
 8004b64:	4638      	mov	r0, r7
 8004b66:	4798      	blx	r3
}
 8004b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8004b6a:	4b06      	ldr	r3, [pc, #24]	@ (8004b84 <UART_RXCallback+0x60>)
 8004b6c:	4a06      	ldr	r2, [pc, #24]	@ (8004b88 <UART_RXCallback+0x64>)
 8004b6e:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8004b72:	4806      	ldr	r0, [pc, #24]	@ (8004b8c <UART_RXCallback+0x68>)
 8004b74:	f000 fa3a 	bl	8004fec <__assert_func>
	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b78:	6be9      	ldr	r1, [r5, #60]	@ 0x3c
 8004b7a:	6809      	ldr	r1, [r1, #0]
 8004b7c:	684e      	ldr	r6, [r1, #4]
 8004b7e:	1b96      	subs	r6, r2, r6
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8004b80:	4619      	mov	r1, r3
 8004b82:	e7de      	b.n	8004b42 <UART_RXCallback+0x1e>
 8004b84:	0800894c 	.word	0x0800894c
 8004b88:	080089b8 	.word	0x080089b8
 8004b8c:	08008994 	.word	0x08008994

08004b90 <UART_SetRxCallback>:
{
 8004b90:	b538      	push	{r3, r4, r5, lr}
 8004b92:	4604      	mov	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004b94:	6805      	ldr	r5, [r0, #0]
	self->RX.rxCallback_ = f;
 8004b96:	6101      	str	r1, [r0, #16]
	self->RX.rxCallbackData_ = captured;
 8004b98:	6142      	str	r2, [r0, #20]
	if (f) {
 8004b9a:	b151      	cbz	r1, 8004bb2 <UART_SetRxCallback+0x22>
		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 8004b9c:	8b02      	ldrh	r2, [r0, #24]
 8004b9e:	69c1      	ldr	r1, [r0, #28]
 8004ba0:	4628      	mov	r0, r5
 8004ba2:	f7fe fcab 	bl	80034fc <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 8004ba6:	682a      	ldr	r2, [r5, #0]
 8004ba8:	68d3      	ldr	r3, [r2, #12]
 8004baa:	f043 0310 	orr.w	r3, r3, #16
 8004bae:	60d3      	str	r3, [r2, #12]
}
 8004bb0:	bd38      	pop	{r3, r4, r5, pc}
		HAL_UART_AbortReceive(huart);
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f7fe f94c 	bl	8002e50 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8004bb8:	4620      	mov	r0, r4
 8004bba:	f7ff ffb3 	bl	8004b24 <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 8004bbe:	682a      	ldr	r2, [r5, #0]
 8004bc0:	68d3      	ldr	r3, [r2, #12]
 8004bc2:	f023 0310 	bic.w	r3, r3, #16
 8004bc6:	60d3      	str	r3, [r2, #12]
}
 8004bc8:	e7f2      	b.n	8004bb0 <UART_SetRxCallback+0x20>

08004bca <UART_Init>:
{
 8004bca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 8004bce:	b3a8      	cbz	r0, 8004c3c <UART_Init+0x72>
 8004bd0:	460e      	mov	r6, r1
 8004bd2:	4615      	mov	r5, r2
 8004bd4:	4604      	mov	r4, r0
 8004bd6:	b3a1      	cbz	r1, 8004c42 <UART_Init+0x78>
 8004bd8:	f5b2 6f00 	cmp.w	r2, #2048	@ 0x800
 8004bdc:	d834      	bhi.n	8004c48 <UART_Init+0x7e>
	memset(self, 0, sizeof(stm32_DMA_uart_t));
 8004bde:	2227      	movs	r2, #39	@ 0x27
 8004be0:	2100      	movs	r1, #0
 8004be2:	3005      	adds	r0, #5
 8004be4:	f001 fb14 	bl	8006210 <memset>
	self->huart = huart;
 8004be8:	6026      	str	r6, [r4, #0]
	self->isTxBusy_ = false;
 8004bea:	2300      	movs	r3, #0
 8004bec:	7123      	strb	r3, [r4, #4]
	if(pushContainerUartInstance(self) != STATUS_OK) {
 8004bee:	4620      	mov	r0, r4
 8004bf0:	f000 f852 	bl	8004c98 <pushContainerUartInstance>
 8004bf4:	4680      	mov	r8, r0
 8004bf6:	b9a0      	cbnz	r0, 8004c22 <UART_Init+0x58>
	void* const buf1 = malloc(rxBufferSize);
 8004bf8:	4628      	mov	r0, r5
 8004bfa:	f000 fa31 	bl	8005060 <malloc>
	if(buf1 == NULL) {
 8004bfe:	4607      	mov	r7, r0
 8004c00:	b328      	cbz	r0, 8004c4e <UART_Init+0x84>
	void* const buf2 = malloc(rxBufferSize);
 8004c02:	4628      	mov	r0, r5
 8004c04:	f000 fa2c 	bl	8005060 <malloc>
	if(buf2 == NULL) {
 8004c08:	b190      	cbz	r0, 8004c30 <UART_Init+0x66>
	self->RX.rxBuffer1 = buf1;
 8004c0a:	61e7      	str	r7, [r4, #28]
	self->RX.rxBuffer2 = buf2;
 8004c0c:	6220      	str	r0, [r4, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8004c0e:	61a5      	str	r5, [r4, #24]
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8004c10:	62b7      	str	r7, [r6, #40]	@ 0x28
	UART_SetRxCallback(self, 0, 0);
 8004c12:	2200      	movs	r2, #0
 8004c14:	4611      	mov	r1, r2
 8004c16:	4620      	mov	r0, r4
 8004c18:	f7ff ffba 	bl	8004b90 <UART_SetRxCallback>
}
 8004c1c:	4640      	mov	r0, r8
 8004c1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		self->isTxBusy_ = true;
 8004c22:	2301      	movs	r3, #1
 8004c24:	7123      	strb	r3, [r4, #4]
		self->RX.rxBufferSize = 0;
 8004c26:	2300      	movs	r3, #0
 8004c28:	61a3      	str	r3, [r4, #24]
		return ERROR_FAIL;
 8004c2a:	f04f 38ff 	mov.w	r8, #4294967295
 8004c2e:	e7f5      	b.n	8004c1c <UART_Init+0x52>
		free(buf1);
 8004c30:	4638      	mov	r0, r7
 8004c32:	f000 fa1d 	bl	8005070 <free>
		return ERROR_FAIL;
 8004c36:	f04f 38ff 	mov.w	r8, #4294967295
 8004c3a:	e7ef      	b.n	8004c1c <UART_Init+0x52>
		return ERROR_INVALID_ARGUMENT;
 8004c3c:	f06f 0804 	mvn.w	r8, #4
 8004c40:	e7ec      	b.n	8004c1c <UART_Init+0x52>
 8004c42:	f06f 0804 	mvn.w	r8, #4
 8004c46:	e7e9      	b.n	8004c1c <UART_Init+0x52>
 8004c48:	f06f 0804 	mvn.w	r8, #4
 8004c4c:	e7e6      	b.n	8004c1c <UART_Init+0x52>
		return ERROR_FAIL;
 8004c4e:	f04f 38ff 	mov.w	r8, #4294967295
 8004c52:	e7e3      	b.n	8004c1c <UART_Init+0x52>

08004c54 <USER_UART_IRQHandler>:
{
 8004c54:	b510      	push	{r4, lr}
 8004c56:	b082      	sub	sp, #8
 8004c58:	4604      	mov	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8004c5a:	6800      	ldr	r0, [r0, #0]
	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8004c5c:	6803      	ldr	r3, [r0, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	f012 0f10 	tst.w	r2, #16
 8004c64:	d101      	bne.n	8004c6a <USER_UART_IRQHandler+0x16>
}
 8004c66:	b002      	add	sp, #8
 8004c68:	bd10      	pop	{r4, pc}
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	9201      	str	r2, [sp, #4]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	9201      	str	r2, [sp, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	9301      	str	r3, [sp, #4]
 8004c76:	9b01      	ldr	r3, [sp, #4]
		HAL_UART_AbortReceive(huart);
 8004c78:	f7fe f8ea 	bl	8002e50 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	f7ff ff51 	bl	8004b24 <UART_RXCallback>
}
 8004c82:	e7f0      	b.n	8004c66 <USER_UART_IRQHandler+0x12>

08004c84 <getContainerUartInstance>:

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
#if (UART_CONTAINER_COUNT == 1)

	stm32_DMA_uart_t* const r_inst = m_instances[0];
 8004c84:	4b03      	ldr	r3, [pc, #12]	@ (8004c94 <getContainerUartInstance+0x10>)
 8004c86:	681b      	ldr	r3, [r3, #0]
	if(r_inst->huart == huart) {
 8004c88:	681a      	ldr	r2, [r3, #0]
		}
	}
#endif /* (UART_CONTAINER_COUNT == 1) */

	return NULL;
}
 8004c8a:	4282      	cmp	r2, r0
 8004c8c:	bf0c      	ite	eq
 8004c8e:	4618      	moveq	r0, r3
 8004c90:	2000      	movne	r0, #0
 8004c92:	4770      	bx	lr
 8004c94:	20000364 	.word	0x20000364

08004c98 <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
#if (UART_CONTAINER_COUNT == 1)
	if(inst == NULL) {
 8004c98:	b118      	cbz	r0, 8004ca2 <pushContainerUartInstance+0xa>
		return ERROR_FAIL;
	}

	m_instances[0] = inst;
 8004c9a:	4a03      	ldr	r2, [pc, #12]	@ (8004ca8 <pushContainerUartInstance+0x10>)
 8004c9c:	6010      	str	r0, [r2, #0]
	}
	m_instances[m_instance_counter] = inst;
	++m_instance_counter;
#endif /* (UART_CONTAINER_COUNT == 1) */

	return STATUS_OK;
 8004c9e:	2000      	movs	r0, #0
 8004ca0:	4770      	bx	lr
		return ERROR_FAIL;
 8004ca2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004ca6:	4770      	bx	lr
 8004ca8:	20000364 	.word	0x20000364

08004cac <_ZdlPvj>:
 8004cac:	f000 b827 	b.w	8004cfe <_ZdlPv>

08004cb0 <_ZdaPv>:
 8004cb0:	f000 b825 	b.w	8004cfe <_ZdlPv>

08004cb4 <__cxa_guard_acquire>:
 8004cb4:	6802      	ldr	r2, [r0, #0]
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	07d2      	lsls	r2, r2, #31
 8004cba:	d405      	bmi.n	8004cc8 <__cxa_guard_acquire+0x14>
 8004cbc:	7842      	ldrb	r2, [r0, #1]
 8004cbe:	b102      	cbz	r2, 8004cc2 <__cxa_guard_acquire+0xe>
 8004cc0:	deff      	udf	#255	@ 0xff
 8004cc2:	2001      	movs	r0, #1
 8004cc4:	7058      	strb	r0, [r3, #1]
 8004cc6:	4770      	bx	lr
 8004cc8:	2000      	movs	r0, #0
 8004cca:	4770      	bx	lr

08004ccc <__cxa_guard_release>:
 8004ccc:	2301      	movs	r3, #1
 8004cce:	6003      	str	r3, [r0, #0]
 8004cd0:	4770      	bx	lr

08004cd2 <_Znwj>:
 8004cd2:	2801      	cmp	r0, #1
 8004cd4:	bf38      	it	cc
 8004cd6:	2001      	movcc	r0, #1
 8004cd8:	b510      	push	{r4, lr}
 8004cda:	4604      	mov	r4, r0
 8004cdc:	4620      	mov	r0, r4
 8004cde:	f000 f9bf 	bl	8005060 <malloc>
 8004ce2:	b100      	cbz	r0, 8004ce6 <_Znwj+0x14>
 8004ce4:	bd10      	pop	{r4, pc}
 8004ce6:	f000 f80d 	bl	8004d04 <_ZSt15get_new_handlerv>
 8004cea:	b908      	cbnz	r0, 8004cf0 <_Znwj+0x1e>
 8004cec:	f000 f976 	bl	8004fdc <abort>
 8004cf0:	4780      	blx	r0
 8004cf2:	e7f3      	b.n	8004cdc <_Znwj+0xa>

08004cf4 <_Znaj>:
 8004cf4:	f7ff bfed 	b.w	8004cd2 <_Znwj>

08004cf8 <_ZSt20__throw_length_errorPKc>:
 8004cf8:	b508      	push	{r3, lr}
 8004cfa:	f000 f96f 	bl	8004fdc <abort>

08004cfe <_ZdlPv>:
 8004cfe:	f000 b9b7 	b.w	8005070 <free>
	...

08004d04 <_ZSt15get_new_handlerv>:
 8004d04:	4b02      	ldr	r3, [pc, #8]	@ (8004d10 <_ZSt15get_new_handlerv+0xc>)
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	f3bf 8f5b 	dmb	ish
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000368 	.word	0x20000368

08004d14 <log2f>:
 8004d14:	b508      	push	{r3, lr}
 8004d16:	f000 f807 	bl	8004d28 <logf>
 8004d1a:	4902      	ldr	r1, [pc, #8]	@ (8004d24 <log2f+0x10>)
 8004d1c:	f7fc f876 	bl	8000e0c <__aeabi_fdiv>
 8004d20:	bd08      	pop	{r3, pc}
 8004d22:	bf00      	nop
 8004d24:	3f317218 	.word	0x3f317218

08004d28 <logf>:
 8004d28:	b538      	push	{r3, r4, r5, lr}
 8004d2a:	4604      	mov	r4, r0
 8004d2c:	f000 f828 	bl	8004d80 <__ieee754_logf>
 8004d30:	4621      	mov	r1, r4
 8004d32:	4605      	mov	r5, r0
 8004d34:	4620      	mov	r0, r4
 8004d36:	f7fc f97b 	bl	8001030 <__aeabi_fcmpun>
 8004d3a:	b970      	cbnz	r0, 8004d5a <logf+0x32>
 8004d3c:	2100      	movs	r1, #0
 8004d3e:	4620      	mov	r0, r4
 8004d40:	f7fc f96c 	bl	800101c <__aeabi_fcmpgt>
 8004d44:	b948      	cbnz	r0, 8004d5a <logf+0x32>
 8004d46:	2100      	movs	r1, #0
 8004d48:	4620      	mov	r0, r4
 8004d4a:	f7fc f93f 	bl	8000fcc <__aeabi_fcmpeq>
 8004d4e:	b130      	cbz	r0, 8004d5e <logf+0x36>
 8004d50:	f001 fb04 	bl	800635c <__errno>
 8004d54:	2322      	movs	r3, #34	@ 0x22
 8004d56:	4d06      	ldr	r5, [pc, #24]	@ (8004d70 <logf+0x48>)
 8004d58:	6003      	str	r3, [r0, #0]
 8004d5a:	4628      	mov	r0, r5
 8004d5c:	bd38      	pop	{r3, r4, r5, pc}
 8004d5e:	f001 fafd 	bl	800635c <__errno>
 8004d62:	2321      	movs	r3, #33	@ 0x21
 8004d64:	6003      	str	r3, [r0, #0]
 8004d66:	4803      	ldr	r0, [pc, #12]	@ (8004d74 <logf+0x4c>)
 8004d68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004d6c:	f000 b804 	b.w	8004d78 <nanf>
 8004d70:	ff800000 	.word	0xff800000
 8004d74:	08008a03 	.word	0x08008a03

08004d78 <nanf>:
 8004d78:	4800      	ldr	r0, [pc, #0]	@ (8004d7c <nanf+0x4>)
 8004d7a:	4770      	bx	lr
 8004d7c:	7fc00000 	.word	0x7fc00000

08004d80 <__ieee754_logf>:
 8004d80:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8004d84:	4601      	mov	r1, r0
 8004d86:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d8a:	d106      	bne.n	8004d9a <__ieee754_logf+0x1a>
 8004d8c:	2100      	movs	r1, #0
 8004d8e:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 8004d92:	f7fc f83b 	bl	8000e0c <__aeabi_fdiv>
 8004d96:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	4604      	mov	r4, r0
 8004d9e:	da03      	bge.n	8004da8 <__ieee754_logf+0x28>
 8004da0:	f7fb fe76 	bl	8000a90 <__aeabi_fsub>
 8004da4:	2100      	movs	r1, #0
 8004da6:	e7f4      	b.n	8004d92 <__ieee754_logf+0x12>
 8004da8:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8004dac:	db02      	blt.n	8004db4 <__ieee754_logf+0x34>
 8004dae:	f7fb fe71 	bl	8000a94 <__addsf3>
 8004db2:	e7f0      	b.n	8004d96 <__ieee754_logf+0x16>
 8004db4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8004db8:	da35      	bge.n	8004e26 <__ieee754_logf+0xa6>
 8004dba:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 8004dbe:	f7fb ff71 	bl	8000ca4 <__aeabi_fmul>
 8004dc2:	f06f 0318 	mvn.w	r3, #24
 8004dc6:	4604      	mov	r4, r0
 8004dc8:	15e7      	asrs	r7, r4, #23
 8004dca:	3f7f      	subs	r7, #127	@ 0x7f
 8004dcc:	441f      	add	r7, r3
 8004dce:	4b76      	ldr	r3, [pc, #472]	@ (8004fa8 <__ieee754_logf+0x228>)
 8004dd0:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8004dd4:	4423      	add	r3, r4
 8004dd6:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 8004dda:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 8004dde:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 8004de2:	4320      	orrs	r0, r4
 8004de4:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 8004de8:	f7fb fe52 	bl	8000a90 <__aeabi_fsub>
 8004dec:	4b6f      	ldr	r3, [pc, #444]	@ (8004fac <__ieee754_logf+0x22c>)
 8004dee:	f104 020f 	add.w	r2, r4, #15
 8004df2:	4013      	ands	r3, r2
 8004df4:	4606      	mov	r6, r0
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d143      	bne.n	8004e82 <__ieee754_logf+0x102>
 8004dfa:	2100      	movs	r1, #0
 8004dfc:	f7fc f8e6 	bl	8000fcc <__aeabi_fcmpeq>
 8004e00:	b198      	cbz	r0, 8004e2a <__ieee754_logf+0xaa>
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	f000 80cd 	beq.w	8004fa2 <__ieee754_logf+0x222>
 8004e08:	4638      	mov	r0, r7
 8004e0a:	f7fb fef7 	bl	8000bfc <__aeabi_i2f>
 8004e0e:	4968      	ldr	r1, [pc, #416]	@ (8004fb0 <__ieee754_logf+0x230>)
 8004e10:	4605      	mov	r5, r0
 8004e12:	f7fb ff47 	bl	8000ca4 <__aeabi_fmul>
 8004e16:	4967      	ldr	r1, [pc, #412]	@ (8004fb4 <__ieee754_logf+0x234>)
 8004e18:	4604      	mov	r4, r0
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f7fb ff42 	bl	8000ca4 <__aeabi_fmul>
 8004e20:	4601      	mov	r1, r0
 8004e22:	4620      	mov	r0, r4
 8004e24:	e7c3      	b.n	8004dae <__ieee754_logf+0x2e>
 8004e26:	2300      	movs	r3, #0
 8004e28:	e7ce      	b.n	8004dc8 <__ieee754_logf+0x48>
 8004e2a:	4963      	ldr	r1, [pc, #396]	@ (8004fb8 <__ieee754_logf+0x238>)
 8004e2c:	4630      	mov	r0, r6
 8004e2e:	f7fb ff39 	bl	8000ca4 <__aeabi_fmul>
 8004e32:	4601      	mov	r1, r0
 8004e34:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 8004e38:	f7fb fe2a 	bl	8000a90 <__aeabi_fsub>
 8004e3c:	4631      	mov	r1, r6
 8004e3e:	4604      	mov	r4, r0
 8004e40:	4630      	mov	r0, r6
 8004e42:	f7fb ff2f 	bl	8000ca4 <__aeabi_fmul>
 8004e46:	4601      	mov	r1, r0
 8004e48:	4620      	mov	r0, r4
 8004e4a:	f7fb ff2b 	bl	8000ca4 <__aeabi_fmul>
 8004e4e:	4604      	mov	r4, r0
 8004e50:	b90f      	cbnz	r7, 8004e56 <__ieee754_logf+0xd6>
 8004e52:	4621      	mov	r1, r4
 8004e54:	e078      	b.n	8004f48 <__ieee754_logf+0x1c8>
 8004e56:	4638      	mov	r0, r7
 8004e58:	f7fb fed0 	bl	8000bfc <__aeabi_i2f>
 8004e5c:	4954      	ldr	r1, [pc, #336]	@ (8004fb0 <__ieee754_logf+0x230>)
 8004e5e:	4607      	mov	r7, r0
 8004e60:	f7fb ff20 	bl	8000ca4 <__aeabi_fmul>
 8004e64:	4605      	mov	r5, r0
 8004e66:	4638      	mov	r0, r7
 8004e68:	4952      	ldr	r1, [pc, #328]	@ (8004fb4 <__ieee754_logf+0x234>)
 8004e6a:	f7fb ff1b 	bl	8000ca4 <__aeabi_fmul>
 8004e6e:	4601      	mov	r1, r0
 8004e70:	4620      	mov	r0, r4
 8004e72:	f7fb fe0d 	bl	8000a90 <__aeabi_fsub>
 8004e76:	4631      	mov	r1, r6
 8004e78:	f7fb fe0a 	bl	8000a90 <__aeabi_fsub>
 8004e7c:	4601      	mov	r1, r0
 8004e7e:	4628      	mov	r0, r5
 8004e80:	e079      	b.n	8004f76 <__ieee754_logf+0x1f6>
 8004e82:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004e86:	f7fb fe05 	bl	8000a94 <__addsf3>
 8004e8a:	4601      	mov	r1, r0
 8004e8c:	4630      	mov	r0, r6
 8004e8e:	f7fb ffbd 	bl	8000e0c <__aeabi_fdiv>
 8004e92:	4681      	mov	r9, r0
 8004e94:	4638      	mov	r0, r7
 8004e96:	f7fb feb1 	bl	8000bfc <__aeabi_i2f>
 8004e9a:	4649      	mov	r1, r9
 8004e9c:	4680      	mov	r8, r0
 8004e9e:	4648      	mov	r0, r9
 8004ea0:	f7fb ff00 	bl	8000ca4 <__aeabi_fmul>
 8004ea4:	4601      	mov	r1, r0
 8004ea6:	4682      	mov	sl, r0
 8004ea8:	f7fb fefc 	bl	8000ca4 <__aeabi_fmul>
 8004eac:	4605      	mov	r5, r0
 8004eae:	4943      	ldr	r1, [pc, #268]	@ (8004fbc <__ieee754_logf+0x23c>)
 8004eb0:	f7fb fef8 	bl	8000ca4 <__aeabi_fmul>
 8004eb4:	4942      	ldr	r1, [pc, #264]	@ (8004fc0 <__ieee754_logf+0x240>)
 8004eb6:	f7fb fded 	bl	8000a94 <__addsf3>
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb fef2 	bl	8000ca4 <__aeabi_fmul>
 8004ec0:	4940      	ldr	r1, [pc, #256]	@ (8004fc4 <__ieee754_logf+0x244>)
 8004ec2:	f7fb fde7 	bl	8000a94 <__addsf3>
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	f7fb feec 	bl	8000ca4 <__aeabi_fmul>
 8004ecc:	493e      	ldr	r1, [pc, #248]	@ (8004fc8 <__ieee754_logf+0x248>)
 8004ece:	f7fb fde1 	bl	8000a94 <__addsf3>
 8004ed2:	4651      	mov	r1, sl
 8004ed4:	f7fb fee6 	bl	8000ca4 <__aeabi_fmul>
 8004ed8:	493c      	ldr	r1, [pc, #240]	@ (8004fcc <__ieee754_logf+0x24c>)
 8004eda:	4682      	mov	sl, r0
 8004edc:	4628      	mov	r0, r5
 8004ede:	f7fb fee1 	bl	8000ca4 <__aeabi_fmul>
 8004ee2:	493b      	ldr	r1, [pc, #236]	@ (8004fd0 <__ieee754_logf+0x250>)
 8004ee4:	f7fb fdd6 	bl	8000a94 <__addsf3>
 8004ee8:	4629      	mov	r1, r5
 8004eea:	f7fb fedb 	bl	8000ca4 <__aeabi_fmul>
 8004eee:	4939      	ldr	r1, [pc, #228]	@ (8004fd4 <__ieee754_logf+0x254>)
 8004ef0:	f7fb fdd0 	bl	8000a94 <__addsf3>
 8004ef4:	4629      	mov	r1, r5
 8004ef6:	f7fb fed5 	bl	8000ca4 <__aeabi_fmul>
 8004efa:	4601      	mov	r1, r0
 8004efc:	4650      	mov	r0, sl
 8004efe:	f7fb fdc9 	bl	8000a94 <__addsf3>
 8004f02:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8004fd8 <__ieee754_logf+0x258>
 8004f06:	4605      	mov	r5, r0
 8004f08:	44a3      	add	fp, r4
 8004f0a:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 8004f0e:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 8004f12:	ea44 040b 	orr.w	r4, r4, fp
 8004f16:	2c00      	cmp	r4, #0
 8004f18:	dd30      	ble.n	8004f7c <__ieee754_logf+0x1fc>
 8004f1a:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8004f1e:	4630      	mov	r0, r6
 8004f20:	f7fb fec0 	bl	8000ca4 <__aeabi_fmul>
 8004f24:	4631      	mov	r1, r6
 8004f26:	f7fb febd 	bl	8000ca4 <__aeabi_fmul>
 8004f2a:	4601      	mov	r1, r0
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	4628      	mov	r0, r5
 8004f30:	f7fb fdb0 	bl	8000a94 <__addsf3>
 8004f34:	4649      	mov	r1, r9
 8004f36:	f7fb feb5 	bl	8000ca4 <__aeabi_fmul>
 8004f3a:	4605      	mov	r5, r0
 8004f3c:	b937      	cbnz	r7, 8004f4c <__ieee754_logf+0x1cc>
 8004f3e:	4601      	mov	r1, r0
 8004f40:	4620      	mov	r0, r4
 8004f42:	f7fb fda5 	bl	8000a90 <__aeabi_fsub>
 8004f46:	4601      	mov	r1, r0
 8004f48:	4630      	mov	r0, r6
 8004f4a:	e014      	b.n	8004f76 <__ieee754_logf+0x1f6>
 8004f4c:	4918      	ldr	r1, [pc, #96]	@ (8004fb0 <__ieee754_logf+0x230>)
 8004f4e:	4640      	mov	r0, r8
 8004f50:	f7fb fea8 	bl	8000ca4 <__aeabi_fmul>
 8004f54:	4917      	ldr	r1, [pc, #92]	@ (8004fb4 <__ieee754_logf+0x234>)
 8004f56:	4607      	mov	r7, r0
 8004f58:	4640      	mov	r0, r8
 8004f5a:	f7fb fea3 	bl	8000ca4 <__aeabi_fmul>
 8004f5e:	4629      	mov	r1, r5
 8004f60:	f7fb fd98 	bl	8000a94 <__addsf3>
 8004f64:	4601      	mov	r1, r0
 8004f66:	4620      	mov	r0, r4
 8004f68:	f7fb fd92 	bl	8000a90 <__aeabi_fsub>
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	f7fb fd8f 	bl	8000a90 <__aeabi_fsub>
 8004f72:	4601      	mov	r1, r0
 8004f74:	4638      	mov	r0, r7
 8004f76:	f7fb fd8b 	bl	8000a90 <__aeabi_fsub>
 8004f7a:	e70c      	b.n	8004d96 <__ieee754_logf+0x16>
 8004f7c:	4601      	mov	r1, r0
 8004f7e:	4630      	mov	r0, r6
 8004f80:	f7fb fd86 	bl	8000a90 <__aeabi_fsub>
 8004f84:	4649      	mov	r1, r9
 8004f86:	f7fb fe8d 	bl	8000ca4 <__aeabi_fmul>
 8004f8a:	4604      	mov	r4, r0
 8004f8c:	2f00      	cmp	r7, #0
 8004f8e:	f43f af60 	beq.w	8004e52 <__ieee754_logf+0xd2>
 8004f92:	4907      	ldr	r1, [pc, #28]	@ (8004fb0 <__ieee754_logf+0x230>)
 8004f94:	4640      	mov	r0, r8
 8004f96:	f7fb fe85 	bl	8000ca4 <__aeabi_fmul>
 8004f9a:	4906      	ldr	r1, [pc, #24]	@ (8004fb4 <__ieee754_logf+0x234>)
 8004f9c:	4605      	mov	r5, r0
 8004f9e:	4640      	mov	r0, r8
 8004fa0:	e763      	b.n	8004e6a <__ieee754_logf+0xea>
 8004fa2:	2000      	movs	r0, #0
 8004fa4:	e6f7      	b.n	8004d96 <__ieee754_logf+0x16>
 8004fa6:	bf00      	nop
 8004fa8:	004afb20 	.word	0x004afb20
 8004fac:	007ffff0 	.word	0x007ffff0
 8004fb0:	3f317180 	.word	0x3f317180
 8004fb4:	3717f7d1 	.word	0x3717f7d1
 8004fb8:	3eaaaaab 	.word	0x3eaaaaab
 8004fbc:	3e178897 	.word	0x3e178897
 8004fc0:	3e3a3325 	.word	0x3e3a3325
 8004fc4:	3e924925 	.word	0x3e924925
 8004fc8:	3f2aaaab 	.word	0x3f2aaaab
 8004fcc:	3e1cd04f 	.word	0x3e1cd04f
 8004fd0:	3e638e29 	.word	0x3e638e29
 8004fd4:	3ecccccd 	.word	0x3ecccccd
 8004fd8:	ffcf5c30 	.word	0xffcf5c30

08004fdc <abort>:
 8004fdc:	2006      	movs	r0, #6
 8004fde:	b508      	push	{r3, lr}
 8004fe0:	f001 f946 	bl	8006270 <raise>
 8004fe4:	2001      	movs	r0, #1
 8004fe6:	f7fc fad3 	bl	8001590 <_exit>
	...

08004fec <__assert_func>:
 8004fec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004fee:	4614      	mov	r4, r2
 8004ff0:	461a      	mov	r2, r3
 8004ff2:	4b09      	ldr	r3, [pc, #36]	@ (8005018 <__assert_func+0x2c>)
 8004ff4:	4605      	mov	r5, r0
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68d8      	ldr	r0, [r3, #12]
 8004ffa:	b954      	cbnz	r4, 8005012 <__assert_func+0x26>
 8004ffc:	4b07      	ldr	r3, [pc, #28]	@ (800501c <__assert_func+0x30>)
 8004ffe:	461c      	mov	r4, r3
 8005000:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005004:	9100      	str	r1, [sp, #0]
 8005006:	462b      	mov	r3, r5
 8005008:	4905      	ldr	r1, [pc, #20]	@ (8005020 <__assert_func+0x34>)
 800500a:	f000 ffcf 	bl	8005fac <fiprintf>
 800500e:	f7ff ffe5 	bl	8004fdc <abort>
 8005012:	4b04      	ldr	r3, [pc, #16]	@ (8005024 <__assert_func+0x38>)
 8005014:	e7f4      	b.n	8005000 <__assert_func+0x14>
 8005016:	bf00      	nop
 8005018:	20000018 	.word	0x20000018
 800501c:	08008a03 	.word	0x08008a03
 8005020:	080089d5 	.word	0x080089d5
 8005024:	080089c8 	.word	0x080089c8

08005028 <calloc>:
 8005028:	4b02      	ldr	r3, [pc, #8]	@ (8005034 <calloc+0xc>)
 800502a:	460a      	mov	r2, r1
 800502c:	4601      	mov	r1, r0
 800502e:	6818      	ldr	r0, [r3, #0]
 8005030:	f000 b802 	b.w	8005038 <_calloc_r>
 8005034:	20000018 	.word	0x20000018

08005038 <_calloc_r>:
 8005038:	b570      	push	{r4, r5, r6, lr}
 800503a:	fba1 5402 	umull	r5, r4, r1, r2
 800503e:	b93c      	cbnz	r4, 8005050 <_calloc_r+0x18>
 8005040:	4629      	mov	r1, r5
 8005042:	f000 f83f 	bl	80050c4 <_malloc_r>
 8005046:	4606      	mov	r6, r0
 8005048:	b928      	cbnz	r0, 8005056 <_calloc_r+0x1e>
 800504a:	2600      	movs	r6, #0
 800504c:	4630      	mov	r0, r6
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	220c      	movs	r2, #12
 8005052:	6002      	str	r2, [r0, #0]
 8005054:	e7f9      	b.n	800504a <_calloc_r+0x12>
 8005056:	462a      	mov	r2, r5
 8005058:	4621      	mov	r1, r4
 800505a:	f001 f8d9 	bl	8006210 <memset>
 800505e:	e7f5      	b.n	800504c <_calloc_r+0x14>

08005060 <malloc>:
 8005060:	4b02      	ldr	r3, [pc, #8]	@ (800506c <malloc+0xc>)
 8005062:	4601      	mov	r1, r0
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	f000 b82d 	b.w	80050c4 <_malloc_r>
 800506a:	bf00      	nop
 800506c:	20000018 	.word	0x20000018

08005070 <free>:
 8005070:	4b02      	ldr	r3, [pc, #8]	@ (800507c <free+0xc>)
 8005072:	4601      	mov	r1, r0
 8005074:	6818      	ldr	r0, [r3, #0]
 8005076:	f002 b80b 	b.w	8007090 <_free_r>
 800507a:	bf00      	nop
 800507c:	20000018 	.word	0x20000018

08005080 <sbrk_aligned>:
 8005080:	b570      	push	{r4, r5, r6, lr}
 8005082:	4e0f      	ldr	r6, [pc, #60]	@ (80050c0 <sbrk_aligned+0x40>)
 8005084:	460c      	mov	r4, r1
 8005086:	6831      	ldr	r1, [r6, #0]
 8005088:	4605      	mov	r5, r0
 800508a:	b911      	cbnz	r1, 8005092 <sbrk_aligned+0x12>
 800508c:	f001 f944 	bl	8006318 <_sbrk_r>
 8005090:	6030      	str	r0, [r6, #0]
 8005092:	4621      	mov	r1, r4
 8005094:	4628      	mov	r0, r5
 8005096:	f001 f93f 	bl	8006318 <_sbrk_r>
 800509a:	1c43      	adds	r3, r0, #1
 800509c:	d103      	bne.n	80050a6 <sbrk_aligned+0x26>
 800509e:	f04f 34ff 	mov.w	r4, #4294967295
 80050a2:	4620      	mov	r0, r4
 80050a4:	bd70      	pop	{r4, r5, r6, pc}
 80050a6:	1cc4      	adds	r4, r0, #3
 80050a8:	f024 0403 	bic.w	r4, r4, #3
 80050ac:	42a0      	cmp	r0, r4
 80050ae:	d0f8      	beq.n	80050a2 <sbrk_aligned+0x22>
 80050b0:	1a21      	subs	r1, r4, r0
 80050b2:	4628      	mov	r0, r5
 80050b4:	f001 f930 	bl	8006318 <_sbrk_r>
 80050b8:	3001      	adds	r0, #1
 80050ba:	d1f2      	bne.n	80050a2 <sbrk_aligned+0x22>
 80050bc:	e7ef      	b.n	800509e <sbrk_aligned+0x1e>
 80050be:	bf00      	nop
 80050c0:	2000036c 	.word	0x2000036c

080050c4 <_malloc_r>:
 80050c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c8:	1ccd      	adds	r5, r1, #3
 80050ca:	f025 0503 	bic.w	r5, r5, #3
 80050ce:	3508      	adds	r5, #8
 80050d0:	2d0c      	cmp	r5, #12
 80050d2:	bf38      	it	cc
 80050d4:	250c      	movcc	r5, #12
 80050d6:	2d00      	cmp	r5, #0
 80050d8:	4606      	mov	r6, r0
 80050da:	db01      	blt.n	80050e0 <_malloc_r+0x1c>
 80050dc:	42a9      	cmp	r1, r5
 80050de:	d904      	bls.n	80050ea <_malloc_r+0x26>
 80050e0:	230c      	movs	r3, #12
 80050e2:	6033      	str	r3, [r6, #0]
 80050e4:	2000      	movs	r0, #0
 80050e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80050ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80051c0 <_malloc_r+0xfc>
 80050ee:	f000 f869 	bl	80051c4 <__malloc_lock>
 80050f2:	f8d8 3000 	ldr.w	r3, [r8]
 80050f6:	461c      	mov	r4, r3
 80050f8:	bb44      	cbnz	r4, 800514c <_malloc_r+0x88>
 80050fa:	4629      	mov	r1, r5
 80050fc:	4630      	mov	r0, r6
 80050fe:	f7ff ffbf 	bl	8005080 <sbrk_aligned>
 8005102:	1c43      	adds	r3, r0, #1
 8005104:	4604      	mov	r4, r0
 8005106:	d158      	bne.n	80051ba <_malloc_r+0xf6>
 8005108:	f8d8 4000 	ldr.w	r4, [r8]
 800510c:	4627      	mov	r7, r4
 800510e:	2f00      	cmp	r7, #0
 8005110:	d143      	bne.n	800519a <_malloc_r+0xd6>
 8005112:	2c00      	cmp	r4, #0
 8005114:	d04b      	beq.n	80051ae <_malloc_r+0xea>
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	4639      	mov	r1, r7
 800511a:	4630      	mov	r0, r6
 800511c:	eb04 0903 	add.w	r9, r4, r3
 8005120:	f001 f8fa 	bl	8006318 <_sbrk_r>
 8005124:	4581      	cmp	r9, r0
 8005126:	d142      	bne.n	80051ae <_malloc_r+0xea>
 8005128:	6821      	ldr	r1, [r4, #0]
 800512a:	4630      	mov	r0, r6
 800512c:	1a6d      	subs	r5, r5, r1
 800512e:	4629      	mov	r1, r5
 8005130:	f7ff ffa6 	bl	8005080 <sbrk_aligned>
 8005134:	3001      	adds	r0, #1
 8005136:	d03a      	beq.n	80051ae <_malloc_r+0xea>
 8005138:	6823      	ldr	r3, [r4, #0]
 800513a:	442b      	add	r3, r5
 800513c:	6023      	str	r3, [r4, #0]
 800513e:	f8d8 3000 	ldr.w	r3, [r8]
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	bb62      	cbnz	r2, 80051a0 <_malloc_r+0xdc>
 8005146:	f8c8 7000 	str.w	r7, [r8]
 800514a:	e00f      	b.n	800516c <_malloc_r+0xa8>
 800514c:	6822      	ldr	r2, [r4, #0]
 800514e:	1b52      	subs	r2, r2, r5
 8005150:	d420      	bmi.n	8005194 <_malloc_r+0xd0>
 8005152:	2a0b      	cmp	r2, #11
 8005154:	d917      	bls.n	8005186 <_malloc_r+0xc2>
 8005156:	1961      	adds	r1, r4, r5
 8005158:	42a3      	cmp	r3, r4
 800515a:	6025      	str	r5, [r4, #0]
 800515c:	bf18      	it	ne
 800515e:	6059      	strne	r1, [r3, #4]
 8005160:	6863      	ldr	r3, [r4, #4]
 8005162:	bf08      	it	eq
 8005164:	f8c8 1000 	streq.w	r1, [r8]
 8005168:	5162      	str	r2, [r4, r5]
 800516a:	604b      	str	r3, [r1, #4]
 800516c:	4630      	mov	r0, r6
 800516e:	f000 f82f 	bl	80051d0 <__malloc_unlock>
 8005172:	f104 000b 	add.w	r0, r4, #11
 8005176:	1d23      	adds	r3, r4, #4
 8005178:	f020 0007 	bic.w	r0, r0, #7
 800517c:	1ac2      	subs	r2, r0, r3
 800517e:	bf1c      	itt	ne
 8005180:	1a1b      	subne	r3, r3, r0
 8005182:	50a3      	strne	r3, [r4, r2]
 8005184:	e7af      	b.n	80050e6 <_malloc_r+0x22>
 8005186:	6862      	ldr	r2, [r4, #4]
 8005188:	42a3      	cmp	r3, r4
 800518a:	bf0c      	ite	eq
 800518c:	f8c8 2000 	streq.w	r2, [r8]
 8005190:	605a      	strne	r2, [r3, #4]
 8005192:	e7eb      	b.n	800516c <_malloc_r+0xa8>
 8005194:	4623      	mov	r3, r4
 8005196:	6864      	ldr	r4, [r4, #4]
 8005198:	e7ae      	b.n	80050f8 <_malloc_r+0x34>
 800519a:	463c      	mov	r4, r7
 800519c:	687f      	ldr	r7, [r7, #4]
 800519e:	e7b6      	b.n	800510e <_malloc_r+0x4a>
 80051a0:	461a      	mov	r2, r3
 80051a2:	685b      	ldr	r3, [r3, #4]
 80051a4:	42a3      	cmp	r3, r4
 80051a6:	d1fb      	bne.n	80051a0 <_malloc_r+0xdc>
 80051a8:	2300      	movs	r3, #0
 80051aa:	6053      	str	r3, [r2, #4]
 80051ac:	e7de      	b.n	800516c <_malloc_r+0xa8>
 80051ae:	230c      	movs	r3, #12
 80051b0:	4630      	mov	r0, r6
 80051b2:	6033      	str	r3, [r6, #0]
 80051b4:	f000 f80c 	bl	80051d0 <__malloc_unlock>
 80051b8:	e794      	b.n	80050e4 <_malloc_r+0x20>
 80051ba:	6005      	str	r5, [r0, #0]
 80051bc:	e7d6      	b.n	800516c <_malloc_r+0xa8>
 80051be:	bf00      	nop
 80051c0:	20000370 	.word	0x20000370

080051c4 <__malloc_lock>:
 80051c4:	4801      	ldr	r0, [pc, #4]	@ (80051cc <__malloc_lock+0x8>)
 80051c6:	f001 b8f4 	b.w	80063b2 <__retarget_lock_acquire_recursive>
 80051ca:	bf00      	nop
 80051cc:	200004b4 	.word	0x200004b4

080051d0 <__malloc_unlock>:
 80051d0:	4801      	ldr	r0, [pc, #4]	@ (80051d8 <__malloc_unlock+0x8>)
 80051d2:	f001 b8ef 	b.w	80063b4 <__retarget_lock_release_recursive>
 80051d6:	bf00      	nop
 80051d8:	200004b4 	.word	0x200004b4

080051dc <__cvt>:
 80051dc:	2b00      	cmp	r3, #0
 80051de:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051e2:	461d      	mov	r5, r3
 80051e4:	bfbb      	ittet	lt
 80051e6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80051ea:	461d      	movlt	r5, r3
 80051ec:	2300      	movge	r3, #0
 80051ee:	232d      	movlt	r3, #45	@ 0x2d
 80051f0:	b088      	sub	sp, #32
 80051f2:	4614      	mov	r4, r2
 80051f4:	bfb8      	it	lt
 80051f6:	4614      	movlt	r4, r2
 80051f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80051fa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80051fc:	7013      	strb	r3, [r2, #0]
 80051fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005200:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8005204:	f023 0820 	bic.w	r8, r3, #32
 8005208:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800520c:	d005      	beq.n	800521a <__cvt+0x3e>
 800520e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005212:	d100      	bne.n	8005216 <__cvt+0x3a>
 8005214:	3601      	adds	r6, #1
 8005216:	2302      	movs	r3, #2
 8005218:	e000      	b.n	800521c <__cvt+0x40>
 800521a:	2303      	movs	r3, #3
 800521c:	aa07      	add	r2, sp, #28
 800521e:	9204      	str	r2, [sp, #16]
 8005220:	aa06      	add	r2, sp, #24
 8005222:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005226:	e9cd 3600 	strd	r3, r6, [sp]
 800522a:	4622      	mov	r2, r4
 800522c:	462b      	mov	r3, r5
 800522e:	f001 f967 	bl	8006500 <_dtoa_r>
 8005232:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005236:	4607      	mov	r7, r0
 8005238:	d119      	bne.n	800526e <__cvt+0x92>
 800523a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800523c:	07db      	lsls	r3, r3, #31
 800523e:	d50e      	bpl.n	800525e <__cvt+0x82>
 8005240:	eb00 0906 	add.w	r9, r0, r6
 8005244:	2200      	movs	r2, #0
 8005246:	2300      	movs	r3, #0
 8005248:	4620      	mov	r0, r4
 800524a:	4629      	mov	r1, r5
 800524c:	f7fb fbac 	bl	80009a8 <__aeabi_dcmpeq>
 8005250:	b108      	cbz	r0, 8005256 <__cvt+0x7a>
 8005252:	f8cd 901c 	str.w	r9, [sp, #28]
 8005256:	2230      	movs	r2, #48	@ 0x30
 8005258:	9b07      	ldr	r3, [sp, #28]
 800525a:	454b      	cmp	r3, r9
 800525c:	d31e      	bcc.n	800529c <__cvt+0xc0>
 800525e:	4638      	mov	r0, r7
 8005260:	9b07      	ldr	r3, [sp, #28]
 8005262:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005264:	1bdb      	subs	r3, r3, r7
 8005266:	6013      	str	r3, [r2, #0]
 8005268:	b008      	add	sp, #32
 800526a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800526e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005272:	eb00 0906 	add.w	r9, r0, r6
 8005276:	d1e5      	bne.n	8005244 <__cvt+0x68>
 8005278:	7803      	ldrb	r3, [r0, #0]
 800527a:	2b30      	cmp	r3, #48	@ 0x30
 800527c:	d10a      	bne.n	8005294 <__cvt+0xb8>
 800527e:	2200      	movs	r2, #0
 8005280:	2300      	movs	r3, #0
 8005282:	4620      	mov	r0, r4
 8005284:	4629      	mov	r1, r5
 8005286:	f7fb fb8f 	bl	80009a8 <__aeabi_dcmpeq>
 800528a:	b918      	cbnz	r0, 8005294 <__cvt+0xb8>
 800528c:	f1c6 0601 	rsb	r6, r6, #1
 8005290:	f8ca 6000 	str.w	r6, [sl]
 8005294:	f8da 3000 	ldr.w	r3, [sl]
 8005298:	4499      	add	r9, r3
 800529a:	e7d3      	b.n	8005244 <__cvt+0x68>
 800529c:	1c59      	adds	r1, r3, #1
 800529e:	9107      	str	r1, [sp, #28]
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	e7d9      	b.n	8005258 <__cvt+0x7c>

080052a4 <__exponent>:
 80052a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80052a6:	2900      	cmp	r1, #0
 80052a8:	bfb6      	itet	lt
 80052aa:	232d      	movlt	r3, #45	@ 0x2d
 80052ac:	232b      	movge	r3, #43	@ 0x2b
 80052ae:	4249      	neglt	r1, r1
 80052b0:	2909      	cmp	r1, #9
 80052b2:	7002      	strb	r2, [r0, #0]
 80052b4:	7043      	strb	r3, [r0, #1]
 80052b6:	dd29      	ble.n	800530c <__exponent+0x68>
 80052b8:	f10d 0307 	add.w	r3, sp, #7
 80052bc:	461d      	mov	r5, r3
 80052be:	270a      	movs	r7, #10
 80052c0:	fbb1 f6f7 	udiv	r6, r1, r7
 80052c4:	461a      	mov	r2, r3
 80052c6:	fb07 1416 	mls	r4, r7, r6, r1
 80052ca:	3430      	adds	r4, #48	@ 0x30
 80052cc:	f802 4c01 	strb.w	r4, [r2, #-1]
 80052d0:	460c      	mov	r4, r1
 80052d2:	2c63      	cmp	r4, #99	@ 0x63
 80052d4:	4631      	mov	r1, r6
 80052d6:	f103 33ff 	add.w	r3, r3, #4294967295
 80052da:	dcf1      	bgt.n	80052c0 <__exponent+0x1c>
 80052dc:	3130      	adds	r1, #48	@ 0x30
 80052de:	1e94      	subs	r4, r2, #2
 80052e0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80052e4:	4623      	mov	r3, r4
 80052e6:	1c41      	adds	r1, r0, #1
 80052e8:	42ab      	cmp	r3, r5
 80052ea:	d30a      	bcc.n	8005302 <__exponent+0x5e>
 80052ec:	f10d 0309 	add.w	r3, sp, #9
 80052f0:	1a9b      	subs	r3, r3, r2
 80052f2:	42ac      	cmp	r4, r5
 80052f4:	bf88      	it	hi
 80052f6:	2300      	movhi	r3, #0
 80052f8:	3302      	adds	r3, #2
 80052fa:	4403      	add	r3, r0
 80052fc:	1a18      	subs	r0, r3, r0
 80052fe:	b003      	add	sp, #12
 8005300:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005302:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005306:	f801 6f01 	strb.w	r6, [r1, #1]!
 800530a:	e7ed      	b.n	80052e8 <__exponent+0x44>
 800530c:	2330      	movs	r3, #48	@ 0x30
 800530e:	3130      	adds	r1, #48	@ 0x30
 8005310:	7083      	strb	r3, [r0, #2]
 8005312:	70c1      	strb	r1, [r0, #3]
 8005314:	1d03      	adds	r3, r0, #4
 8005316:	e7f1      	b.n	80052fc <__exponent+0x58>

08005318 <_printf_float>:
 8005318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800531c:	b091      	sub	sp, #68	@ 0x44
 800531e:	460c      	mov	r4, r1
 8005320:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8005324:	4616      	mov	r6, r2
 8005326:	461f      	mov	r7, r3
 8005328:	4605      	mov	r5, r0
 800532a:	f000 ffa9 	bl	8006280 <_localeconv_r>
 800532e:	6803      	ldr	r3, [r0, #0]
 8005330:	4618      	mov	r0, r3
 8005332:	9308      	str	r3, [sp, #32]
 8005334:	f7fa ff0c 	bl	8000150 <strlen>
 8005338:	2300      	movs	r3, #0
 800533a:	930e      	str	r3, [sp, #56]	@ 0x38
 800533c:	f8d8 3000 	ldr.w	r3, [r8]
 8005340:	9009      	str	r0, [sp, #36]	@ 0x24
 8005342:	3307      	adds	r3, #7
 8005344:	f023 0307 	bic.w	r3, r3, #7
 8005348:	f103 0208 	add.w	r2, r3, #8
 800534c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005350:	f8d4 b000 	ldr.w	fp, [r4]
 8005354:	f8c8 2000 	str.w	r2, [r8]
 8005358:	e9d3 8900 	ldrd	r8, r9, [r3]
 800535c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005360:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005362:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005366:	f04f 32ff 	mov.w	r2, #4294967295
 800536a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800536e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005372:	4b9c      	ldr	r3, [pc, #624]	@ (80055e4 <_printf_float+0x2cc>)
 8005374:	f7fb fb4a 	bl	8000a0c <__aeabi_dcmpun>
 8005378:	bb70      	cbnz	r0, 80053d8 <_printf_float+0xc0>
 800537a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800537e:	f04f 32ff 	mov.w	r2, #4294967295
 8005382:	4b98      	ldr	r3, [pc, #608]	@ (80055e4 <_printf_float+0x2cc>)
 8005384:	f7fb fb24 	bl	80009d0 <__aeabi_dcmple>
 8005388:	bb30      	cbnz	r0, 80053d8 <_printf_float+0xc0>
 800538a:	2200      	movs	r2, #0
 800538c:	2300      	movs	r3, #0
 800538e:	4640      	mov	r0, r8
 8005390:	4649      	mov	r1, r9
 8005392:	f7fb fb13 	bl	80009bc <__aeabi_dcmplt>
 8005396:	b110      	cbz	r0, 800539e <_printf_float+0x86>
 8005398:	232d      	movs	r3, #45	@ 0x2d
 800539a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800539e:	4a92      	ldr	r2, [pc, #584]	@ (80055e8 <_printf_float+0x2d0>)
 80053a0:	4b92      	ldr	r3, [pc, #584]	@ (80055ec <_printf_float+0x2d4>)
 80053a2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80053a6:	bf94      	ite	ls
 80053a8:	4690      	movls	r8, r2
 80053aa:	4698      	movhi	r8, r3
 80053ac:	2303      	movs	r3, #3
 80053ae:	f04f 0900 	mov.w	r9, #0
 80053b2:	6123      	str	r3, [r4, #16]
 80053b4:	f02b 0304 	bic.w	r3, fp, #4
 80053b8:	6023      	str	r3, [r4, #0]
 80053ba:	4633      	mov	r3, r6
 80053bc:	4621      	mov	r1, r4
 80053be:	4628      	mov	r0, r5
 80053c0:	9700      	str	r7, [sp, #0]
 80053c2:	aa0f      	add	r2, sp, #60	@ 0x3c
 80053c4:	f000 fb14 	bl	80059f0 <_printf_common>
 80053c8:	3001      	adds	r0, #1
 80053ca:	f040 8090 	bne.w	80054ee <_printf_float+0x1d6>
 80053ce:	f04f 30ff 	mov.w	r0, #4294967295
 80053d2:	b011      	add	sp, #68	@ 0x44
 80053d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053d8:	4642      	mov	r2, r8
 80053da:	464b      	mov	r3, r9
 80053dc:	4640      	mov	r0, r8
 80053de:	4649      	mov	r1, r9
 80053e0:	f7fb fb14 	bl	8000a0c <__aeabi_dcmpun>
 80053e4:	b148      	cbz	r0, 80053fa <_printf_float+0xe2>
 80053e6:	464b      	mov	r3, r9
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	bfb8      	it	lt
 80053ec:	232d      	movlt	r3, #45	@ 0x2d
 80053ee:	4a80      	ldr	r2, [pc, #512]	@ (80055f0 <_printf_float+0x2d8>)
 80053f0:	bfb8      	it	lt
 80053f2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80053f6:	4b7f      	ldr	r3, [pc, #508]	@ (80055f4 <_printf_float+0x2dc>)
 80053f8:	e7d3      	b.n	80053a2 <_printf_float+0x8a>
 80053fa:	6863      	ldr	r3, [r4, #4]
 80053fc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	d13f      	bne.n	8005484 <_printf_float+0x16c>
 8005404:	2306      	movs	r3, #6
 8005406:	6063      	str	r3, [r4, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800540e:	6023      	str	r3, [r4, #0]
 8005410:	9206      	str	r2, [sp, #24]
 8005412:	aa0e      	add	r2, sp, #56	@ 0x38
 8005414:	e9cd a204 	strd	sl, r2, [sp, #16]
 8005418:	aa0d      	add	r2, sp, #52	@ 0x34
 800541a:	9203      	str	r2, [sp, #12]
 800541c:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8005420:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005424:	6863      	ldr	r3, [r4, #4]
 8005426:	4642      	mov	r2, r8
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	4628      	mov	r0, r5
 800542c:	464b      	mov	r3, r9
 800542e:	910a      	str	r1, [sp, #40]	@ 0x28
 8005430:	f7ff fed4 	bl	80051dc <__cvt>
 8005434:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005436:	4680      	mov	r8, r0
 8005438:	2947      	cmp	r1, #71	@ 0x47
 800543a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800543c:	d128      	bne.n	8005490 <_printf_float+0x178>
 800543e:	1cc8      	adds	r0, r1, #3
 8005440:	db02      	blt.n	8005448 <_printf_float+0x130>
 8005442:	6863      	ldr	r3, [r4, #4]
 8005444:	4299      	cmp	r1, r3
 8005446:	dd40      	ble.n	80054ca <_printf_float+0x1b2>
 8005448:	f1aa 0a02 	sub.w	sl, sl, #2
 800544c:	fa5f fa8a 	uxtb.w	sl, sl
 8005450:	4652      	mov	r2, sl
 8005452:	3901      	subs	r1, #1
 8005454:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005458:	910d      	str	r1, [sp, #52]	@ 0x34
 800545a:	f7ff ff23 	bl	80052a4 <__exponent>
 800545e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005460:	4681      	mov	r9, r0
 8005462:	1813      	adds	r3, r2, r0
 8005464:	2a01      	cmp	r2, #1
 8005466:	6123      	str	r3, [r4, #16]
 8005468:	dc02      	bgt.n	8005470 <_printf_float+0x158>
 800546a:	6822      	ldr	r2, [r4, #0]
 800546c:	07d2      	lsls	r2, r2, #31
 800546e:	d501      	bpl.n	8005474 <_printf_float+0x15c>
 8005470:	3301      	adds	r3, #1
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005478:	2b00      	cmp	r3, #0
 800547a:	d09e      	beq.n	80053ba <_printf_float+0xa2>
 800547c:	232d      	movs	r3, #45	@ 0x2d
 800547e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005482:	e79a      	b.n	80053ba <_printf_float+0xa2>
 8005484:	2947      	cmp	r1, #71	@ 0x47
 8005486:	d1bf      	bne.n	8005408 <_printf_float+0xf0>
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1bd      	bne.n	8005408 <_printf_float+0xf0>
 800548c:	2301      	movs	r3, #1
 800548e:	e7ba      	b.n	8005406 <_printf_float+0xee>
 8005490:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005494:	d9dc      	bls.n	8005450 <_printf_float+0x138>
 8005496:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800549a:	d118      	bne.n	80054ce <_printf_float+0x1b6>
 800549c:	2900      	cmp	r1, #0
 800549e:	6863      	ldr	r3, [r4, #4]
 80054a0:	dd0b      	ble.n	80054ba <_printf_float+0x1a2>
 80054a2:	6121      	str	r1, [r4, #16]
 80054a4:	b913      	cbnz	r3, 80054ac <_printf_float+0x194>
 80054a6:	6822      	ldr	r2, [r4, #0]
 80054a8:	07d0      	lsls	r0, r2, #31
 80054aa:	d502      	bpl.n	80054b2 <_printf_float+0x19a>
 80054ac:	3301      	adds	r3, #1
 80054ae:	440b      	add	r3, r1
 80054b0:	6123      	str	r3, [r4, #16]
 80054b2:	f04f 0900 	mov.w	r9, #0
 80054b6:	65a1      	str	r1, [r4, #88]	@ 0x58
 80054b8:	e7dc      	b.n	8005474 <_printf_float+0x15c>
 80054ba:	b913      	cbnz	r3, 80054c2 <_printf_float+0x1aa>
 80054bc:	6822      	ldr	r2, [r4, #0]
 80054be:	07d2      	lsls	r2, r2, #31
 80054c0:	d501      	bpl.n	80054c6 <_printf_float+0x1ae>
 80054c2:	3302      	adds	r3, #2
 80054c4:	e7f4      	b.n	80054b0 <_printf_float+0x198>
 80054c6:	2301      	movs	r3, #1
 80054c8:	e7f2      	b.n	80054b0 <_printf_float+0x198>
 80054ca:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80054ce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054d0:	4299      	cmp	r1, r3
 80054d2:	db05      	blt.n	80054e0 <_printf_float+0x1c8>
 80054d4:	6823      	ldr	r3, [r4, #0]
 80054d6:	6121      	str	r1, [r4, #16]
 80054d8:	07d8      	lsls	r0, r3, #31
 80054da:	d5ea      	bpl.n	80054b2 <_printf_float+0x19a>
 80054dc:	1c4b      	adds	r3, r1, #1
 80054de:	e7e7      	b.n	80054b0 <_printf_float+0x198>
 80054e0:	2900      	cmp	r1, #0
 80054e2:	bfcc      	ite	gt
 80054e4:	2201      	movgt	r2, #1
 80054e6:	f1c1 0202 	rsble	r2, r1, #2
 80054ea:	4413      	add	r3, r2
 80054ec:	e7e0      	b.n	80054b0 <_printf_float+0x198>
 80054ee:	6823      	ldr	r3, [r4, #0]
 80054f0:	055a      	lsls	r2, r3, #21
 80054f2:	d407      	bmi.n	8005504 <_printf_float+0x1ec>
 80054f4:	6923      	ldr	r3, [r4, #16]
 80054f6:	4642      	mov	r2, r8
 80054f8:	4631      	mov	r1, r6
 80054fa:	4628      	mov	r0, r5
 80054fc:	47b8      	blx	r7
 80054fe:	3001      	adds	r0, #1
 8005500:	d12b      	bne.n	800555a <_printf_float+0x242>
 8005502:	e764      	b.n	80053ce <_printf_float+0xb6>
 8005504:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005508:	f240 80dc 	bls.w	80056c4 <_printf_float+0x3ac>
 800550c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005510:	2200      	movs	r2, #0
 8005512:	2300      	movs	r3, #0
 8005514:	f7fb fa48 	bl	80009a8 <__aeabi_dcmpeq>
 8005518:	2800      	cmp	r0, #0
 800551a:	d033      	beq.n	8005584 <_printf_float+0x26c>
 800551c:	2301      	movs	r3, #1
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	4a35      	ldr	r2, [pc, #212]	@ (80055f8 <_printf_float+0x2e0>)
 8005524:	47b8      	blx	r7
 8005526:	3001      	adds	r0, #1
 8005528:	f43f af51 	beq.w	80053ce <_printf_float+0xb6>
 800552c:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8005530:	4543      	cmp	r3, r8
 8005532:	db02      	blt.n	800553a <_printf_float+0x222>
 8005534:	6823      	ldr	r3, [r4, #0]
 8005536:	07d8      	lsls	r0, r3, #31
 8005538:	d50f      	bpl.n	800555a <_printf_float+0x242>
 800553a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800553e:	4631      	mov	r1, r6
 8005540:	4628      	mov	r0, r5
 8005542:	47b8      	blx	r7
 8005544:	3001      	adds	r0, #1
 8005546:	f43f af42 	beq.w	80053ce <_printf_float+0xb6>
 800554a:	f04f 0900 	mov.w	r9, #0
 800554e:	f108 38ff 	add.w	r8, r8, #4294967295
 8005552:	f104 0a1a 	add.w	sl, r4, #26
 8005556:	45c8      	cmp	r8, r9
 8005558:	dc09      	bgt.n	800556e <_printf_float+0x256>
 800555a:	6823      	ldr	r3, [r4, #0]
 800555c:	079b      	lsls	r3, r3, #30
 800555e:	f100 8102 	bmi.w	8005766 <_printf_float+0x44e>
 8005562:	68e0      	ldr	r0, [r4, #12]
 8005564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005566:	4298      	cmp	r0, r3
 8005568:	bfb8      	it	lt
 800556a:	4618      	movlt	r0, r3
 800556c:	e731      	b.n	80053d2 <_printf_float+0xba>
 800556e:	2301      	movs	r3, #1
 8005570:	4652      	mov	r2, sl
 8005572:	4631      	mov	r1, r6
 8005574:	4628      	mov	r0, r5
 8005576:	47b8      	blx	r7
 8005578:	3001      	adds	r0, #1
 800557a:	f43f af28 	beq.w	80053ce <_printf_float+0xb6>
 800557e:	f109 0901 	add.w	r9, r9, #1
 8005582:	e7e8      	b.n	8005556 <_printf_float+0x23e>
 8005584:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005586:	2b00      	cmp	r3, #0
 8005588:	dc38      	bgt.n	80055fc <_printf_float+0x2e4>
 800558a:	2301      	movs	r3, #1
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	4a19      	ldr	r2, [pc, #100]	@ (80055f8 <_printf_float+0x2e0>)
 8005592:	47b8      	blx	r7
 8005594:	3001      	adds	r0, #1
 8005596:	f43f af1a 	beq.w	80053ce <_printf_float+0xb6>
 800559a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800559e:	ea59 0303 	orrs.w	r3, r9, r3
 80055a2:	d102      	bne.n	80055aa <_printf_float+0x292>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	07d9      	lsls	r1, r3, #31
 80055a8:	d5d7      	bpl.n	800555a <_printf_float+0x242>
 80055aa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80055ae:	4631      	mov	r1, r6
 80055b0:	4628      	mov	r0, r5
 80055b2:	47b8      	blx	r7
 80055b4:	3001      	adds	r0, #1
 80055b6:	f43f af0a 	beq.w	80053ce <_printf_float+0xb6>
 80055ba:	f04f 0a00 	mov.w	sl, #0
 80055be:	f104 0b1a 	add.w	fp, r4, #26
 80055c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80055c4:	425b      	negs	r3, r3
 80055c6:	4553      	cmp	r3, sl
 80055c8:	dc01      	bgt.n	80055ce <_printf_float+0x2b6>
 80055ca:	464b      	mov	r3, r9
 80055cc:	e793      	b.n	80054f6 <_printf_float+0x1de>
 80055ce:	2301      	movs	r3, #1
 80055d0:	465a      	mov	r2, fp
 80055d2:	4631      	mov	r1, r6
 80055d4:	4628      	mov	r0, r5
 80055d6:	47b8      	blx	r7
 80055d8:	3001      	adds	r0, #1
 80055da:	f43f aef8 	beq.w	80053ce <_printf_float+0xb6>
 80055de:	f10a 0a01 	add.w	sl, sl, #1
 80055e2:	e7ee      	b.n	80055c2 <_printf_float+0x2aa>
 80055e4:	7fefffff 	.word	0x7fefffff
 80055e8:	08008a04 	.word	0x08008a04
 80055ec:	08008a08 	.word	0x08008a08
 80055f0:	08008a0c 	.word	0x08008a0c
 80055f4:	08008a10 	.word	0x08008a10
 80055f8:	08008a14 	.word	0x08008a14
 80055fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80055fe:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005602:	4553      	cmp	r3, sl
 8005604:	bfa8      	it	ge
 8005606:	4653      	movge	r3, sl
 8005608:	2b00      	cmp	r3, #0
 800560a:	4699      	mov	r9, r3
 800560c:	dc36      	bgt.n	800567c <_printf_float+0x364>
 800560e:	f04f 0b00 	mov.w	fp, #0
 8005612:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005616:	f104 021a 	add.w	r2, r4, #26
 800561a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800561c:	930a      	str	r3, [sp, #40]	@ 0x28
 800561e:	eba3 0309 	sub.w	r3, r3, r9
 8005622:	455b      	cmp	r3, fp
 8005624:	dc31      	bgt.n	800568a <_printf_float+0x372>
 8005626:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005628:	459a      	cmp	sl, r3
 800562a:	dc3a      	bgt.n	80056a2 <_printf_float+0x38a>
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	07da      	lsls	r2, r3, #31
 8005630:	d437      	bmi.n	80056a2 <_printf_float+0x38a>
 8005632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005634:	ebaa 0903 	sub.w	r9, sl, r3
 8005638:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800563a:	ebaa 0303 	sub.w	r3, sl, r3
 800563e:	4599      	cmp	r9, r3
 8005640:	bfa8      	it	ge
 8005642:	4699      	movge	r9, r3
 8005644:	f1b9 0f00 	cmp.w	r9, #0
 8005648:	dc33      	bgt.n	80056b2 <_printf_float+0x39a>
 800564a:	f04f 0800 	mov.w	r8, #0
 800564e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005652:	f104 0b1a 	add.w	fp, r4, #26
 8005656:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005658:	ebaa 0303 	sub.w	r3, sl, r3
 800565c:	eba3 0309 	sub.w	r3, r3, r9
 8005660:	4543      	cmp	r3, r8
 8005662:	f77f af7a 	ble.w	800555a <_printf_float+0x242>
 8005666:	2301      	movs	r3, #1
 8005668:	465a      	mov	r2, fp
 800566a:	4631      	mov	r1, r6
 800566c:	4628      	mov	r0, r5
 800566e:	47b8      	blx	r7
 8005670:	3001      	adds	r0, #1
 8005672:	f43f aeac 	beq.w	80053ce <_printf_float+0xb6>
 8005676:	f108 0801 	add.w	r8, r8, #1
 800567a:	e7ec      	b.n	8005656 <_printf_float+0x33e>
 800567c:	4642      	mov	r2, r8
 800567e:	4631      	mov	r1, r6
 8005680:	4628      	mov	r0, r5
 8005682:	47b8      	blx	r7
 8005684:	3001      	adds	r0, #1
 8005686:	d1c2      	bne.n	800560e <_printf_float+0x2f6>
 8005688:	e6a1      	b.n	80053ce <_printf_float+0xb6>
 800568a:	2301      	movs	r3, #1
 800568c:	4631      	mov	r1, r6
 800568e:	4628      	mov	r0, r5
 8005690:	920a      	str	r2, [sp, #40]	@ 0x28
 8005692:	47b8      	blx	r7
 8005694:	3001      	adds	r0, #1
 8005696:	f43f ae9a 	beq.w	80053ce <_printf_float+0xb6>
 800569a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800569c:	f10b 0b01 	add.w	fp, fp, #1
 80056a0:	e7bb      	b.n	800561a <_printf_float+0x302>
 80056a2:	4631      	mov	r1, r6
 80056a4:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056a8:	4628      	mov	r0, r5
 80056aa:	47b8      	blx	r7
 80056ac:	3001      	adds	r0, #1
 80056ae:	d1c0      	bne.n	8005632 <_printf_float+0x31a>
 80056b0:	e68d      	b.n	80053ce <_printf_float+0xb6>
 80056b2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80056b4:	464b      	mov	r3, r9
 80056b6:	4631      	mov	r1, r6
 80056b8:	4628      	mov	r0, r5
 80056ba:	4442      	add	r2, r8
 80056bc:	47b8      	blx	r7
 80056be:	3001      	adds	r0, #1
 80056c0:	d1c3      	bne.n	800564a <_printf_float+0x332>
 80056c2:	e684      	b.n	80053ce <_printf_float+0xb6>
 80056c4:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80056c8:	f1ba 0f01 	cmp.w	sl, #1
 80056cc:	dc01      	bgt.n	80056d2 <_printf_float+0x3ba>
 80056ce:	07db      	lsls	r3, r3, #31
 80056d0:	d536      	bpl.n	8005740 <_printf_float+0x428>
 80056d2:	2301      	movs	r3, #1
 80056d4:	4642      	mov	r2, r8
 80056d6:	4631      	mov	r1, r6
 80056d8:	4628      	mov	r0, r5
 80056da:	47b8      	blx	r7
 80056dc:	3001      	adds	r0, #1
 80056de:	f43f ae76 	beq.w	80053ce <_printf_float+0xb6>
 80056e2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	f43f ae6e 	beq.w	80053ce <_printf_float+0xb6>
 80056f2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056f6:	2200      	movs	r2, #0
 80056f8:	2300      	movs	r3, #0
 80056fa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056fe:	f7fb f953 	bl	80009a8 <__aeabi_dcmpeq>
 8005702:	b9c0      	cbnz	r0, 8005736 <_printf_float+0x41e>
 8005704:	4653      	mov	r3, sl
 8005706:	f108 0201 	add.w	r2, r8, #1
 800570a:	4631      	mov	r1, r6
 800570c:	4628      	mov	r0, r5
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	d10c      	bne.n	800572e <_printf_float+0x416>
 8005714:	e65b      	b.n	80053ce <_printf_float+0xb6>
 8005716:	2301      	movs	r3, #1
 8005718:	465a      	mov	r2, fp
 800571a:	4631      	mov	r1, r6
 800571c:	4628      	mov	r0, r5
 800571e:	47b8      	blx	r7
 8005720:	3001      	adds	r0, #1
 8005722:	f43f ae54 	beq.w	80053ce <_printf_float+0xb6>
 8005726:	f108 0801 	add.w	r8, r8, #1
 800572a:	45d0      	cmp	r8, sl
 800572c:	dbf3      	blt.n	8005716 <_printf_float+0x3fe>
 800572e:	464b      	mov	r3, r9
 8005730:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005734:	e6e0      	b.n	80054f8 <_printf_float+0x1e0>
 8005736:	f04f 0800 	mov.w	r8, #0
 800573a:	f104 0b1a 	add.w	fp, r4, #26
 800573e:	e7f4      	b.n	800572a <_printf_float+0x412>
 8005740:	2301      	movs	r3, #1
 8005742:	4642      	mov	r2, r8
 8005744:	e7e1      	b.n	800570a <_printf_float+0x3f2>
 8005746:	2301      	movs	r3, #1
 8005748:	464a      	mov	r2, r9
 800574a:	4631      	mov	r1, r6
 800574c:	4628      	mov	r0, r5
 800574e:	47b8      	blx	r7
 8005750:	3001      	adds	r0, #1
 8005752:	f43f ae3c 	beq.w	80053ce <_printf_float+0xb6>
 8005756:	f108 0801 	add.w	r8, r8, #1
 800575a:	68e3      	ldr	r3, [r4, #12]
 800575c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800575e:	1a5b      	subs	r3, r3, r1
 8005760:	4543      	cmp	r3, r8
 8005762:	dcf0      	bgt.n	8005746 <_printf_float+0x42e>
 8005764:	e6fd      	b.n	8005562 <_printf_float+0x24a>
 8005766:	f04f 0800 	mov.w	r8, #0
 800576a:	f104 0919 	add.w	r9, r4, #25
 800576e:	e7f4      	b.n	800575a <_printf_float+0x442>

08005770 <__sfputc_r>:
 8005770:	6893      	ldr	r3, [r2, #8]
 8005772:	b410      	push	{r4}
 8005774:	3b01      	subs	r3, #1
 8005776:	2b00      	cmp	r3, #0
 8005778:	6093      	str	r3, [r2, #8]
 800577a:	da07      	bge.n	800578c <__sfputc_r+0x1c>
 800577c:	6994      	ldr	r4, [r2, #24]
 800577e:	42a3      	cmp	r3, r4
 8005780:	db01      	blt.n	8005786 <__sfputc_r+0x16>
 8005782:	290a      	cmp	r1, #10
 8005784:	d102      	bne.n	800578c <__sfputc_r+0x1c>
 8005786:	bc10      	pop	{r4}
 8005788:	f000 bc83 	b.w	8006092 <__swbuf_r>
 800578c:	6813      	ldr	r3, [r2, #0]
 800578e:	1c58      	adds	r0, r3, #1
 8005790:	6010      	str	r0, [r2, #0]
 8005792:	7019      	strb	r1, [r3, #0]
 8005794:	4608      	mov	r0, r1
 8005796:	bc10      	pop	{r4}
 8005798:	4770      	bx	lr

0800579a <__sfputs_r>:
 800579a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800579c:	4606      	mov	r6, r0
 800579e:	460f      	mov	r7, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	18d5      	adds	r5, r2, r3
 80057a4:	42ac      	cmp	r4, r5
 80057a6:	d101      	bne.n	80057ac <__sfputs_r+0x12>
 80057a8:	2000      	movs	r0, #0
 80057aa:	e007      	b.n	80057bc <__sfputs_r+0x22>
 80057ac:	463a      	mov	r2, r7
 80057ae:	4630      	mov	r0, r6
 80057b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057b4:	f7ff ffdc 	bl	8005770 <__sfputc_r>
 80057b8:	1c43      	adds	r3, r0, #1
 80057ba:	d1f3      	bne.n	80057a4 <__sfputs_r+0xa>
 80057bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080057c0 <_vfiprintf_r>:
 80057c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	460d      	mov	r5, r1
 80057c6:	4614      	mov	r4, r2
 80057c8:	4698      	mov	r8, r3
 80057ca:	4606      	mov	r6, r0
 80057cc:	b09d      	sub	sp, #116	@ 0x74
 80057ce:	b118      	cbz	r0, 80057d8 <_vfiprintf_r+0x18>
 80057d0:	6a03      	ldr	r3, [r0, #32]
 80057d2:	b90b      	cbnz	r3, 80057d8 <_vfiprintf_r+0x18>
 80057d4:	f000 fbd2 	bl	8005f7c <__sinit>
 80057d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80057da:	07d9      	lsls	r1, r3, #31
 80057dc:	d405      	bmi.n	80057ea <_vfiprintf_r+0x2a>
 80057de:	89ab      	ldrh	r3, [r5, #12]
 80057e0:	059a      	lsls	r2, r3, #22
 80057e2:	d402      	bmi.n	80057ea <_vfiprintf_r+0x2a>
 80057e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80057e6:	f000 fde4 	bl	80063b2 <__retarget_lock_acquire_recursive>
 80057ea:	89ab      	ldrh	r3, [r5, #12]
 80057ec:	071b      	lsls	r3, r3, #28
 80057ee:	d501      	bpl.n	80057f4 <_vfiprintf_r+0x34>
 80057f0:	692b      	ldr	r3, [r5, #16]
 80057f2:	b99b      	cbnz	r3, 800581c <_vfiprintf_r+0x5c>
 80057f4:	4629      	mov	r1, r5
 80057f6:	4630      	mov	r0, r6
 80057f8:	f000 fc8a 	bl	8006110 <__swsetup_r>
 80057fc:	b170      	cbz	r0, 800581c <_vfiprintf_r+0x5c>
 80057fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005800:	07dc      	lsls	r4, r3, #31
 8005802:	d504      	bpl.n	800580e <_vfiprintf_r+0x4e>
 8005804:	f04f 30ff 	mov.w	r0, #4294967295
 8005808:	b01d      	add	sp, #116	@ 0x74
 800580a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800580e:	89ab      	ldrh	r3, [r5, #12]
 8005810:	0598      	lsls	r0, r3, #22
 8005812:	d4f7      	bmi.n	8005804 <_vfiprintf_r+0x44>
 8005814:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005816:	f000 fdcd 	bl	80063b4 <__retarget_lock_release_recursive>
 800581a:	e7f3      	b.n	8005804 <_vfiprintf_r+0x44>
 800581c:	2300      	movs	r3, #0
 800581e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005820:	2320      	movs	r3, #32
 8005822:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005826:	2330      	movs	r3, #48	@ 0x30
 8005828:	f04f 0901 	mov.w	r9, #1
 800582c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005830:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80059dc <_vfiprintf_r+0x21c>
 8005834:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005838:	4623      	mov	r3, r4
 800583a:	469a      	mov	sl, r3
 800583c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005840:	b10a      	cbz	r2, 8005846 <_vfiprintf_r+0x86>
 8005842:	2a25      	cmp	r2, #37	@ 0x25
 8005844:	d1f9      	bne.n	800583a <_vfiprintf_r+0x7a>
 8005846:	ebba 0b04 	subs.w	fp, sl, r4
 800584a:	d00b      	beq.n	8005864 <_vfiprintf_r+0xa4>
 800584c:	465b      	mov	r3, fp
 800584e:	4622      	mov	r2, r4
 8005850:	4629      	mov	r1, r5
 8005852:	4630      	mov	r0, r6
 8005854:	f7ff ffa1 	bl	800579a <__sfputs_r>
 8005858:	3001      	adds	r0, #1
 800585a:	f000 80a7 	beq.w	80059ac <_vfiprintf_r+0x1ec>
 800585e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005860:	445a      	add	r2, fp
 8005862:	9209      	str	r2, [sp, #36]	@ 0x24
 8005864:	f89a 3000 	ldrb.w	r3, [sl]
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 809f 	beq.w	80059ac <_vfiprintf_r+0x1ec>
 800586e:	2300      	movs	r3, #0
 8005870:	f04f 32ff 	mov.w	r2, #4294967295
 8005874:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005878:	f10a 0a01 	add.w	sl, sl, #1
 800587c:	9304      	str	r3, [sp, #16]
 800587e:	9307      	str	r3, [sp, #28]
 8005880:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005884:	931a      	str	r3, [sp, #104]	@ 0x68
 8005886:	4654      	mov	r4, sl
 8005888:	2205      	movs	r2, #5
 800588a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800588e:	4853      	ldr	r0, [pc, #332]	@ (80059dc <_vfiprintf_r+0x21c>)
 8005890:	f000 fd91 	bl	80063b6 <memchr>
 8005894:	9a04      	ldr	r2, [sp, #16]
 8005896:	b9d8      	cbnz	r0, 80058d0 <_vfiprintf_r+0x110>
 8005898:	06d1      	lsls	r1, r2, #27
 800589a:	bf44      	itt	mi
 800589c:	2320      	movmi	r3, #32
 800589e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058a2:	0713      	lsls	r3, r2, #28
 80058a4:	bf44      	itt	mi
 80058a6:	232b      	movmi	r3, #43	@ 0x2b
 80058a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80058ac:	f89a 3000 	ldrb.w	r3, [sl]
 80058b0:	2b2a      	cmp	r3, #42	@ 0x2a
 80058b2:	d015      	beq.n	80058e0 <_vfiprintf_r+0x120>
 80058b4:	4654      	mov	r4, sl
 80058b6:	2000      	movs	r0, #0
 80058b8:	f04f 0c0a 	mov.w	ip, #10
 80058bc:	9a07      	ldr	r2, [sp, #28]
 80058be:	4621      	mov	r1, r4
 80058c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80058c4:	3b30      	subs	r3, #48	@ 0x30
 80058c6:	2b09      	cmp	r3, #9
 80058c8:	d94b      	bls.n	8005962 <_vfiprintf_r+0x1a2>
 80058ca:	b1b0      	cbz	r0, 80058fa <_vfiprintf_r+0x13a>
 80058cc:	9207      	str	r2, [sp, #28]
 80058ce:	e014      	b.n	80058fa <_vfiprintf_r+0x13a>
 80058d0:	eba0 0308 	sub.w	r3, r0, r8
 80058d4:	fa09 f303 	lsl.w	r3, r9, r3
 80058d8:	4313      	orrs	r3, r2
 80058da:	46a2      	mov	sl, r4
 80058dc:	9304      	str	r3, [sp, #16]
 80058de:	e7d2      	b.n	8005886 <_vfiprintf_r+0xc6>
 80058e0:	9b03      	ldr	r3, [sp, #12]
 80058e2:	1d19      	adds	r1, r3, #4
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	9103      	str	r1, [sp, #12]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bfbb      	ittet	lt
 80058ec:	425b      	neglt	r3, r3
 80058ee:	f042 0202 	orrlt.w	r2, r2, #2
 80058f2:	9307      	strge	r3, [sp, #28]
 80058f4:	9307      	strlt	r3, [sp, #28]
 80058f6:	bfb8      	it	lt
 80058f8:	9204      	strlt	r2, [sp, #16]
 80058fa:	7823      	ldrb	r3, [r4, #0]
 80058fc:	2b2e      	cmp	r3, #46	@ 0x2e
 80058fe:	d10a      	bne.n	8005916 <_vfiprintf_r+0x156>
 8005900:	7863      	ldrb	r3, [r4, #1]
 8005902:	2b2a      	cmp	r3, #42	@ 0x2a
 8005904:	d132      	bne.n	800596c <_vfiprintf_r+0x1ac>
 8005906:	9b03      	ldr	r3, [sp, #12]
 8005908:	3402      	adds	r4, #2
 800590a:	1d1a      	adds	r2, r3, #4
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	9203      	str	r2, [sp, #12]
 8005910:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005914:	9305      	str	r3, [sp, #20]
 8005916:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80059e0 <_vfiprintf_r+0x220>
 800591a:	2203      	movs	r2, #3
 800591c:	4650      	mov	r0, sl
 800591e:	7821      	ldrb	r1, [r4, #0]
 8005920:	f000 fd49 	bl	80063b6 <memchr>
 8005924:	b138      	cbz	r0, 8005936 <_vfiprintf_r+0x176>
 8005926:	2240      	movs	r2, #64	@ 0x40
 8005928:	9b04      	ldr	r3, [sp, #16]
 800592a:	eba0 000a 	sub.w	r0, r0, sl
 800592e:	4082      	lsls	r2, r0
 8005930:	4313      	orrs	r3, r2
 8005932:	3401      	adds	r4, #1
 8005934:	9304      	str	r3, [sp, #16]
 8005936:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593a:	2206      	movs	r2, #6
 800593c:	4829      	ldr	r0, [pc, #164]	@ (80059e4 <_vfiprintf_r+0x224>)
 800593e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005942:	f000 fd38 	bl	80063b6 <memchr>
 8005946:	2800      	cmp	r0, #0
 8005948:	d03f      	beq.n	80059ca <_vfiprintf_r+0x20a>
 800594a:	4b27      	ldr	r3, [pc, #156]	@ (80059e8 <_vfiprintf_r+0x228>)
 800594c:	bb1b      	cbnz	r3, 8005996 <_vfiprintf_r+0x1d6>
 800594e:	9b03      	ldr	r3, [sp, #12]
 8005950:	3307      	adds	r3, #7
 8005952:	f023 0307 	bic.w	r3, r3, #7
 8005956:	3308      	adds	r3, #8
 8005958:	9303      	str	r3, [sp, #12]
 800595a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800595c:	443b      	add	r3, r7
 800595e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005960:	e76a      	b.n	8005838 <_vfiprintf_r+0x78>
 8005962:	460c      	mov	r4, r1
 8005964:	2001      	movs	r0, #1
 8005966:	fb0c 3202 	mla	r2, ip, r2, r3
 800596a:	e7a8      	b.n	80058be <_vfiprintf_r+0xfe>
 800596c:	2300      	movs	r3, #0
 800596e:	f04f 0c0a 	mov.w	ip, #10
 8005972:	4619      	mov	r1, r3
 8005974:	3401      	adds	r4, #1
 8005976:	9305      	str	r3, [sp, #20]
 8005978:	4620      	mov	r0, r4
 800597a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800597e:	3a30      	subs	r2, #48	@ 0x30
 8005980:	2a09      	cmp	r2, #9
 8005982:	d903      	bls.n	800598c <_vfiprintf_r+0x1cc>
 8005984:	2b00      	cmp	r3, #0
 8005986:	d0c6      	beq.n	8005916 <_vfiprintf_r+0x156>
 8005988:	9105      	str	r1, [sp, #20]
 800598a:	e7c4      	b.n	8005916 <_vfiprintf_r+0x156>
 800598c:	4604      	mov	r4, r0
 800598e:	2301      	movs	r3, #1
 8005990:	fb0c 2101 	mla	r1, ip, r1, r2
 8005994:	e7f0      	b.n	8005978 <_vfiprintf_r+0x1b8>
 8005996:	ab03      	add	r3, sp, #12
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	462a      	mov	r2, r5
 800599c:	4630      	mov	r0, r6
 800599e:	4b13      	ldr	r3, [pc, #76]	@ (80059ec <_vfiprintf_r+0x22c>)
 80059a0:	a904      	add	r1, sp, #16
 80059a2:	f7ff fcb9 	bl	8005318 <_printf_float>
 80059a6:	4607      	mov	r7, r0
 80059a8:	1c78      	adds	r0, r7, #1
 80059aa:	d1d6      	bne.n	800595a <_vfiprintf_r+0x19a>
 80059ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80059ae:	07d9      	lsls	r1, r3, #31
 80059b0:	d405      	bmi.n	80059be <_vfiprintf_r+0x1fe>
 80059b2:	89ab      	ldrh	r3, [r5, #12]
 80059b4:	059a      	lsls	r2, r3, #22
 80059b6:	d402      	bmi.n	80059be <_vfiprintf_r+0x1fe>
 80059b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80059ba:	f000 fcfb 	bl	80063b4 <__retarget_lock_release_recursive>
 80059be:	89ab      	ldrh	r3, [r5, #12]
 80059c0:	065b      	lsls	r3, r3, #25
 80059c2:	f53f af1f 	bmi.w	8005804 <_vfiprintf_r+0x44>
 80059c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80059c8:	e71e      	b.n	8005808 <_vfiprintf_r+0x48>
 80059ca:	ab03      	add	r3, sp, #12
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	462a      	mov	r2, r5
 80059d0:	4630      	mov	r0, r6
 80059d2:	4b06      	ldr	r3, [pc, #24]	@ (80059ec <_vfiprintf_r+0x22c>)
 80059d4:	a904      	add	r1, sp, #16
 80059d6:	f000 f87d 	bl	8005ad4 <_printf_i>
 80059da:	e7e4      	b.n	80059a6 <_vfiprintf_r+0x1e6>
 80059dc:	08008a16 	.word	0x08008a16
 80059e0:	08008a1c 	.word	0x08008a1c
 80059e4:	08008a20 	.word	0x08008a20
 80059e8:	08005319 	.word	0x08005319
 80059ec:	0800579b 	.word	0x0800579b

080059f0 <_printf_common>:
 80059f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059f4:	4616      	mov	r6, r2
 80059f6:	4698      	mov	r8, r3
 80059f8:	688a      	ldr	r2, [r1, #8]
 80059fa:	690b      	ldr	r3, [r1, #16]
 80059fc:	4607      	mov	r7, r0
 80059fe:	4293      	cmp	r3, r2
 8005a00:	bfb8      	it	lt
 8005a02:	4613      	movlt	r3, r2
 8005a04:	6033      	str	r3, [r6, #0]
 8005a06:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005a0a:	460c      	mov	r4, r1
 8005a0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005a10:	b10a      	cbz	r2, 8005a16 <_printf_common+0x26>
 8005a12:	3301      	adds	r3, #1
 8005a14:	6033      	str	r3, [r6, #0]
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	0699      	lsls	r1, r3, #26
 8005a1a:	bf42      	ittt	mi
 8005a1c:	6833      	ldrmi	r3, [r6, #0]
 8005a1e:	3302      	addmi	r3, #2
 8005a20:	6033      	strmi	r3, [r6, #0]
 8005a22:	6825      	ldr	r5, [r4, #0]
 8005a24:	f015 0506 	ands.w	r5, r5, #6
 8005a28:	d106      	bne.n	8005a38 <_printf_common+0x48>
 8005a2a:	f104 0a19 	add.w	sl, r4, #25
 8005a2e:	68e3      	ldr	r3, [r4, #12]
 8005a30:	6832      	ldr	r2, [r6, #0]
 8005a32:	1a9b      	subs	r3, r3, r2
 8005a34:	42ab      	cmp	r3, r5
 8005a36:	dc2b      	bgt.n	8005a90 <_printf_common+0xa0>
 8005a38:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005a3c:	6822      	ldr	r2, [r4, #0]
 8005a3e:	3b00      	subs	r3, #0
 8005a40:	bf18      	it	ne
 8005a42:	2301      	movne	r3, #1
 8005a44:	0692      	lsls	r2, r2, #26
 8005a46:	d430      	bmi.n	8005aaa <_printf_common+0xba>
 8005a48:	4641      	mov	r1, r8
 8005a4a:	4638      	mov	r0, r7
 8005a4c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a50:	47c8      	blx	r9
 8005a52:	3001      	adds	r0, #1
 8005a54:	d023      	beq.n	8005a9e <_printf_common+0xae>
 8005a56:	6823      	ldr	r3, [r4, #0]
 8005a58:	6922      	ldr	r2, [r4, #16]
 8005a5a:	f003 0306 	and.w	r3, r3, #6
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	bf14      	ite	ne
 8005a62:	2500      	movne	r5, #0
 8005a64:	6833      	ldreq	r3, [r6, #0]
 8005a66:	f04f 0600 	mov.w	r6, #0
 8005a6a:	bf08      	it	eq
 8005a6c:	68e5      	ldreq	r5, [r4, #12]
 8005a6e:	f104 041a 	add.w	r4, r4, #26
 8005a72:	bf08      	it	eq
 8005a74:	1aed      	subeq	r5, r5, r3
 8005a76:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8005a7a:	bf08      	it	eq
 8005a7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a80:	4293      	cmp	r3, r2
 8005a82:	bfc4      	itt	gt
 8005a84:	1a9b      	subgt	r3, r3, r2
 8005a86:	18ed      	addgt	r5, r5, r3
 8005a88:	42b5      	cmp	r5, r6
 8005a8a:	d11a      	bne.n	8005ac2 <_printf_common+0xd2>
 8005a8c:	2000      	movs	r0, #0
 8005a8e:	e008      	b.n	8005aa2 <_printf_common+0xb2>
 8005a90:	2301      	movs	r3, #1
 8005a92:	4652      	mov	r2, sl
 8005a94:	4641      	mov	r1, r8
 8005a96:	4638      	mov	r0, r7
 8005a98:	47c8      	blx	r9
 8005a9a:	3001      	adds	r0, #1
 8005a9c:	d103      	bne.n	8005aa6 <_printf_common+0xb6>
 8005a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8005aa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aa6:	3501      	adds	r5, #1
 8005aa8:	e7c1      	b.n	8005a2e <_printf_common+0x3e>
 8005aaa:	2030      	movs	r0, #48	@ 0x30
 8005aac:	18e1      	adds	r1, r4, r3
 8005aae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ab2:	1c5a      	adds	r2, r3, #1
 8005ab4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005ab8:	4422      	add	r2, r4
 8005aba:	3302      	adds	r3, #2
 8005abc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005ac0:	e7c2      	b.n	8005a48 <_printf_common+0x58>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4622      	mov	r2, r4
 8005ac6:	4641      	mov	r1, r8
 8005ac8:	4638      	mov	r0, r7
 8005aca:	47c8      	blx	r9
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0e6      	beq.n	8005a9e <_printf_common+0xae>
 8005ad0:	3601      	adds	r6, #1
 8005ad2:	e7d9      	b.n	8005a88 <_printf_common+0x98>

08005ad4 <_printf_i>:
 8005ad4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ad8:	7e0f      	ldrb	r7, [r1, #24]
 8005ada:	4691      	mov	r9, r2
 8005adc:	2f78      	cmp	r7, #120	@ 0x78
 8005ade:	4680      	mov	r8, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	469a      	mov	sl, r3
 8005ae4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ae6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aea:	d807      	bhi.n	8005afc <_printf_i+0x28>
 8005aec:	2f62      	cmp	r7, #98	@ 0x62
 8005aee:	d80a      	bhi.n	8005b06 <_printf_i+0x32>
 8005af0:	2f00      	cmp	r7, #0
 8005af2:	f000 80d3 	beq.w	8005c9c <_printf_i+0x1c8>
 8005af6:	2f58      	cmp	r7, #88	@ 0x58
 8005af8:	f000 80ba 	beq.w	8005c70 <_printf_i+0x19c>
 8005afc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005b04:	e03a      	b.n	8005b7c <_printf_i+0xa8>
 8005b06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005b0a:	2b15      	cmp	r3, #21
 8005b0c:	d8f6      	bhi.n	8005afc <_printf_i+0x28>
 8005b0e:	a101      	add	r1, pc, #4	@ (adr r1, 8005b14 <_printf_i+0x40>)
 8005b10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005b14:	08005b6d 	.word	0x08005b6d
 8005b18:	08005b81 	.word	0x08005b81
 8005b1c:	08005afd 	.word	0x08005afd
 8005b20:	08005afd 	.word	0x08005afd
 8005b24:	08005afd 	.word	0x08005afd
 8005b28:	08005afd 	.word	0x08005afd
 8005b2c:	08005b81 	.word	0x08005b81
 8005b30:	08005afd 	.word	0x08005afd
 8005b34:	08005afd 	.word	0x08005afd
 8005b38:	08005afd 	.word	0x08005afd
 8005b3c:	08005afd 	.word	0x08005afd
 8005b40:	08005c83 	.word	0x08005c83
 8005b44:	08005bab 	.word	0x08005bab
 8005b48:	08005c3d 	.word	0x08005c3d
 8005b4c:	08005afd 	.word	0x08005afd
 8005b50:	08005afd 	.word	0x08005afd
 8005b54:	08005ca5 	.word	0x08005ca5
 8005b58:	08005afd 	.word	0x08005afd
 8005b5c:	08005bab 	.word	0x08005bab
 8005b60:	08005afd 	.word	0x08005afd
 8005b64:	08005afd 	.word	0x08005afd
 8005b68:	08005c45 	.word	0x08005c45
 8005b6c:	6833      	ldr	r3, [r6, #0]
 8005b6e:	1d1a      	adds	r2, r3, #4
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	6032      	str	r2, [r6, #0]
 8005b74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e09e      	b.n	8005cbe <_printf_i+0x1ea>
 8005b80:	6833      	ldr	r3, [r6, #0]
 8005b82:	6820      	ldr	r0, [r4, #0]
 8005b84:	1d19      	adds	r1, r3, #4
 8005b86:	6031      	str	r1, [r6, #0]
 8005b88:	0606      	lsls	r6, r0, #24
 8005b8a:	d501      	bpl.n	8005b90 <_printf_i+0xbc>
 8005b8c:	681d      	ldr	r5, [r3, #0]
 8005b8e:	e003      	b.n	8005b98 <_printf_i+0xc4>
 8005b90:	0645      	lsls	r5, r0, #25
 8005b92:	d5fb      	bpl.n	8005b8c <_printf_i+0xb8>
 8005b94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b98:	2d00      	cmp	r5, #0
 8005b9a:	da03      	bge.n	8005ba4 <_printf_i+0xd0>
 8005b9c:	232d      	movs	r3, #45	@ 0x2d
 8005b9e:	426d      	negs	r5, r5
 8005ba0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ba4:	230a      	movs	r3, #10
 8005ba6:	4859      	ldr	r0, [pc, #356]	@ (8005d0c <_printf_i+0x238>)
 8005ba8:	e011      	b.n	8005bce <_printf_i+0xfa>
 8005baa:	6821      	ldr	r1, [r4, #0]
 8005bac:	6833      	ldr	r3, [r6, #0]
 8005bae:	0608      	lsls	r0, r1, #24
 8005bb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8005bb4:	d402      	bmi.n	8005bbc <_printf_i+0xe8>
 8005bb6:	0649      	lsls	r1, r1, #25
 8005bb8:	bf48      	it	mi
 8005bba:	b2ad      	uxthmi	r5, r5
 8005bbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	bf14      	ite	ne
 8005bc2:	230a      	movne	r3, #10
 8005bc4:	2308      	moveq	r3, #8
 8005bc6:	4851      	ldr	r0, [pc, #324]	@ (8005d0c <_printf_i+0x238>)
 8005bc8:	2100      	movs	r1, #0
 8005bca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005bce:	6866      	ldr	r6, [r4, #4]
 8005bd0:	2e00      	cmp	r6, #0
 8005bd2:	bfa8      	it	ge
 8005bd4:	6821      	ldrge	r1, [r4, #0]
 8005bd6:	60a6      	str	r6, [r4, #8]
 8005bd8:	bfa4      	itt	ge
 8005bda:	f021 0104 	bicge.w	r1, r1, #4
 8005bde:	6021      	strge	r1, [r4, #0]
 8005be0:	b90d      	cbnz	r5, 8005be6 <_printf_i+0x112>
 8005be2:	2e00      	cmp	r6, #0
 8005be4:	d04b      	beq.n	8005c7e <_printf_i+0x1aa>
 8005be6:	4616      	mov	r6, r2
 8005be8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005bec:	fb03 5711 	mls	r7, r3, r1, r5
 8005bf0:	5dc7      	ldrb	r7, [r0, r7]
 8005bf2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bf6:	462f      	mov	r7, r5
 8005bf8:	42bb      	cmp	r3, r7
 8005bfa:	460d      	mov	r5, r1
 8005bfc:	d9f4      	bls.n	8005be8 <_printf_i+0x114>
 8005bfe:	2b08      	cmp	r3, #8
 8005c00:	d10b      	bne.n	8005c1a <_printf_i+0x146>
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	07df      	lsls	r7, r3, #31
 8005c06:	d508      	bpl.n	8005c1a <_printf_i+0x146>
 8005c08:	6923      	ldr	r3, [r4, #16]
 8005c0a:	6861      	ldr	r1, [r4, #4]
 8005c0c:	4299      	cmp	r1, r3
 8005c0e:	bfde      	ittt	le
 8005c10:	2330      	movle	r3, #48	@ 0x30
 8005c12:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005c16:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005c1a:	1b92      	subs	r2, r2, r6
 8005c1c:	6122      	str	r2, [r4, #16]
 8005c1e:	464b      	mov	r3, r9
 8005c20:	4621      	mov	r1, r4
 8005c22:	4640      	mov	r0, r8
 8005c24:	f8cd a000 	str.w	sl, [sp]
 8005c28:	aa03      	add	r2, sp, #12
 8005c2a:	f7ff fee1 	bl	80059f0 <_printf_common>
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d14a      	bne.n	8005cc8 <_printf_i+0x1f4>
 8005c32:	f04f 30ff 	mov.w	r0, #4294967295
 8005c36:	b004      	add	sp, #16
 8005c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c3c:	6823      	ldr	r3, [r4, #0]
 8005c3e:	f043 0320 	orr.w	r3, r3, #32
 8005c42:	6023      	str	r3, [r4, #0]
 8005c44:	2778      	movs	r7, #120	@ 0x78
 8005c46:	4832      	ldr	r0, [pc, #200]	@ (8005d10 <_printf_i+0x23c>)
 8005c48:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c4c:	6823      	ldr	r3, [r4, #0]
 8005c4e:	6831      	ldr	r1, [r6, #0]
 8005c50:	061f      	lsls	r7, r3, #24
 8005c52:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c56:	d402      	bmi.n	8005c5e <_printf_i+0x18a>
 8005c58:	065f      	lsls	r7, r3, #25
 8005c5a:	bf48      	it	mi
 8005c5c:	b2ad      	uxthmi	r5, r5
 8005c5e:	6031      	str	r1, [r6, #0]
 8005c60:	07d9      	lsls	r1, r3, #31
 8005c62:	bf44      	itt	mi
 8005c64:	f043 0320 	orrmi.w	r3, r3, #32
 8005c68:	6023      	strmi	r3, [r4, #0]
 8005c6a:	b11d      	cbz	r5, 8005c74 <_printf_i+0x1a0>
 8005c6c:	2310      	movs	r3, #16
 8005c6e:	e7ab      	b.n	8005bc8 <_printf_i+0xf4>
 8005c70:	4826      	ldr	r0, [pc, #152]	@ (8005d0c <_printf_i+0x238>)
 8005c72:	e7e9      	b.n	8005c48 <_printf_i+0x174>
 8005c74:	6823      	ldr	r3, [r4, #0]
 8005c76:	f023 0320 	bic.w	r3, r3, #32
 8005c7a:	6023      	str	r3, [r4, #0]
 8005c7c:	e7f6      	b.n	8005c6c <_printf_i+0x198>
 8005c7e:	4616      	mov	r6, r2
 8005c80:	e7bd      	b.n	8005bfe <_printf_i+0x12a>
 8005c82:	6833      	ldr	r3, [r6, #0]
 8005c84:	6825      	ldr	r5, [r4, #0]
 8005c86:	1d18      	adds	r0, r3, #4
 8005c88:	6961      	ldr	r1, [r4, #20]
 8005c8a:	6030      	str	r0, [r6, #0]
 8005c8c:	062e      	lsls	r6, r5, #24
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	d501      	bpl.n	8005c96 <_printf_i+0x1c2>
 8005c92:	6019      	str	r1, [r3, #0]
 8005c94:	e002      	b.n	8005c9c <_printf_i+0x1c8>
 8005c96:	0668      	lsls	r0, r5, #25
 8005c98:	d5fb      	bpl.n	8005c92 <_printf_i+0x1be>
 8005c9a:	8019      	strh	r1, [r3, #0]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	4616      	mov	r6, r2
 8005ca0:	6123      	str	r3, [r4, #16]
 8005ca2:	e7bc      	b.n	8005c1e <_printf_i+0x14a>
 8005ca4:	6833      	ldr	r3, [r6, #0]
 8005ca6:	2100      	movs	r1, #0
 8005ca8:	1d1a      	adds	r2, r3, #4
 8005caa:	6032      	str	r2, [r6, #0]
 8005cac:	681e      	ldr	r6, [r3, #0]
 8005cae:	6862      	ldr	r2, [r4, #4]
 8005cb0:	4630      	mov	r0, r6
 8005cb2:	f000 fb80 	bl	80063b6 <memchr>
 8005cb6:	b108      	cbz	r0, 8005cbc <_printf_i+0x1e8>
 8005cb8:	1b80      	subs	r0, r0, r6
 8005cba:	6060      	str	r0, [r4, #4]
 8005cbc:	6863      	ldr	r3, [r4, #4]
 8005cbe:	6123      	str	r3, [r4, #16]
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005cc6:	e7aa      	b.n	8005c1e <_printf_i+0x14a>
 8005cc8:	4632      	mov	r2, r6
 8005cca:	4649      	mov	r1, r9
 8005ccc:	4640      	mov	r0, r8
 8005cce:	6923      	ldr	r3, [r4, #16]
 8005cd0:	47d0      	blx	sl
 8005cd2:	3001      	adds	r0, #1
 8005cd4:	d0ad      	beq.n	8005c32 <_printf_i+0x15e>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	079b      	lsls	r3, r3, #30
 8005cda:	d413      	bmi.n	8005d04 <_printf_i+0x230>
 8005cdc:	68e0      	ldr	r0, [r4, #12]
 8005cde:	9b03      	ldr	r3, [sp, #12]
 8005ce0:	4298      	cmp	r0, r3
 8005ce2:	bfb8      	it	lt
 8005ce4:	4618      	movlt	r0, r3
 8005ce6:	e7a6      	b.n	8005c36 <_printf_i+0x162>
 8005ce8:	2301      	movs	r3, #1
 8005cea:	4632      	mov	r2, r6
 8005cec:	4649      	mov	r1, r9
 8005cee:	4640      	mov	r0, r8
 8005cf0:	47d0      	blx	sl
 8005cf2:	3001      	adds	r0, #1
 8005cf4:	d09d      	beq.n	8005c32 <_printf_i+0x15e>
 8005cf6:	3501      	adds	r5, #1
 8005cf8:	68e3      	ldr	r3, [r4, #12]
 8005cfa:	9903      	ldr	r1, [sp, #12]
 8005cfc:	1a5b      	subs	r3, r3, r1
 8005cfe:	42ab      	cmp	r3, r5
 8005d00:	dcf2      	bgt.n	8005ce8 <_printf_i+0x214>
 8005d02:	e7eb      	b.n	8005cdc <_printf_i+0x208>
 8005d04:	2500      	movs	r5, #0
 8005d06:	f104 0619 	add.w	r6, r4, #25
 8005d0a:	e7f5      	b.n	8005cf8 <_printf_i+0x224>
 8005d0c:	08008a27 	.word	0x08008a27
 8005d10:	08008a38 	.word	0x08008a38

08005d14 <__sflush_r>:
 8005d14:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d1a:	0716      	lsls	r6, r2, #28
 8005d1c:	4605      	mov	r5, r0
 8005d1e:	460c      	mov	r4, r1
 8005d20:	d454      	bmi.n	8005dcc <__sflush_r+0xb8>
 8005d22:	684b      	ldr	r3, [r1, #4]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dc02      	bgt.n	8005d2e <__sflush_r+0x1a>
 8005d28:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	dd48      	ble.n	8005dc0 <__sflush_r+0xac>
 8005d2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d30:	2e00      	cmp	r6, #0
 8005d32:	d045      	beq.n	8005dc0 <__sflush_r+0xac>
 8005d34:	2300      	movs	r3, #0
 8005d36:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005d3a:	682f      	ldr	r7, [r5, #0]
 8005d3c:	6a21      	ldr	r1, [r4, #32]
 8005d3e:	602b      	str	r3, [r5, #0]
 8005d40:	d030      	beq.n	8005da4 <__sflush_r+0x90>
 8005d42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005d44:	89a3      	ldrh	r3, [r4, #12]
 8005d46:	0759      	lsls	r1, r3, #29
 8005d48:	d505      	bpl.n	8005d56 <__sflush_r+0x42>
 8005d4a:	6863      	ldr	r3, [r4, #4]
 8005d4c:	1ad2      	subs	r2, r2, r3
 8005d4e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005d50:	b10b      	cbz	r3, 8005d56 <__sflush_r+0x42>
 8005d52:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005d54:	1ad2      	subs	r2, r2, r3
 8005d56:	2300      	movs	r3, #0
 8005d58:	4628      	mov	r0, r5
 8005d5a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005d5c:	6a21      	ldr	r1, [r4, #32]
 8005d5e:	47b0      	blx	r6
 8005d60:	1c43      	adds	r3, r0, #1
 8005d62:	89a3      	ldrh	r3, [r4, #12]
 8005d64:	d106      	bne.n	8005d74 <__sflush_r+0x60>
 8005d66:	6829      	ldr	r1, [r5, #0]
 8005d68:	291d      	cmp	r1, #29
 8005d6a:	d82b      	bhi.n	8005dc4 <__sflush_r+0xb0>
 8005d6c:	4a28      	ldr	r2, [pc, #160]	@ (8005e10 <__sflush_r+0xfc>)
 8005d6e:	410a      	asrs	r2, r1
 8005d70:	07d6      	lsls	r6, r2, #31
 8005d72:	d427      	bmi.n	8005dc4 <__sflush_r+0xb0>
 8005d74:	2200      	movs	r2, #0
 8005d76:	6062      	str	r2, [r4, #4]
 8005d78:	6922      	ldr	r2, [r4, #16]
 8005d7a:	04d9      	lsls	r1, r3, #19
 8005d7c:	6022      	str	r2, [r4, #0]
 8005d7e:	d504      	bpl.n	8005d8a <__sflush_r+0x76>
 8005d80:	1c42      	adds	r2, r0, #1
 8005d82:	d101      	bne.n	8005d88 <__sflush_r+0x74>
 8005d84:	682b      	ldr	r3, [r5, #0]
 8005d86:	b903      	cbnz	r3, 8005d8a <__sflush_r+0x76>
 8005d88:	6560      	str	r0, [r4, #84]	@ 0x54
 8005d8a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005d8c:	602f      	str	r7, [r5, #0]
 8005d8e:	b1b9      	cbz	r1, 8005dc0 <__sflush_r+0xac>
 8005d90:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005d94:	4299      	cmp	r1, r3
 8005d96:	d002      	beq.n	8005d9e <__sflush_r+0x8a>
 8005d98:	4628      	mov	r0, r5
 8005d9a:	f001 f979 	bl	8007090 <_free_r>
 8005d9e:	2300      	movs	r3, #0
 8005da0:	6363      	str	r3, [r4, #52]	@ 0x34
 8005da2:	e00d      	b.n	8005dc0 <__sflush_r+0xac>
 8005da4:	2301      	movs	r3, #1
 8005da6:	4628      	mov	r0, r5
 8005da8:	47b0      	blx	r6
 8005daa:	4602      	mov	r2, r0
 8005dac:	1c50      	adds	r0, r2, #1
 8005dae:	d1c9      	bne.n	8005d44 <__sflush_r+0x30>
 8005db0:	682b      	ldr	r3, [r5, #0]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d0c6      	beq.n	8005d44 <__sflush_r+0x30>
 8005db6:	2b1d      	cmp	r3, #29
 8005db8:	d001      	beq.n	8005dbe <__sflush_r+0xaa>
 8005dba:	2b16      	cmp	r3, #22
 8005dbc:	d11d      	bne.n	8005dfa <__sflush_r+0xe6>
 8005dbe:	602f      	str	r7, [r5, #0]
 8005dc0:	2000      	movs	r0, #0
 8005dc2:	e021      	b.n	8005e08 <__sflush_r+0xf4>
 8005dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005dc8:	b21b      	sxth	r3, r3
 8005dca:	e01a      	b.n	8005e02 <__sflush_r+0xee>
 8005dcc:	690f      	ldr	r7, [r1, #16]
 8005dce:	2f00      	cmp	r7, #0
 8005dd0:	d0f6      	beq.n	8005dc0 <__sflush_r+0xac>
 8005dd2:	0793      	lsls	r3, r2, #30
 8005dd4:	bf18      	it	ne
 8005dd6:	2300      	movne	r3, #0
 8005dd8:	680e      	ldr	r6, [r1, #0]
 8005dda:	bf08      	it	eq
 8005ddc:	694b      	ldreq	r3, [r1, #20]
 8005dde:	1bf6      	subs	r6, r6, r7
 8005de0:	600f      	str	r7, [r1, #0]
 8005de2:	608b      	str	r3, [r1, #8]
 8005de4:	2e00      	cmp	r6, #0
 8005de6:	ddeb      	ble.n	8005dc0 <__sflush_r+0xac>
 8005de8:	4633      	mov	r3, r6
 8005dea:	463a      	mov	r2, r7
 8005dec:	4628      	mov	r0, r5
 8005dee:	6a21      	ldr	r1, [r4, #32]
 8005df0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005df4:	47e0      	blx	ip
 8005df6:	2800      	cmp	r0, #0
 8005df8:	dc07      	bgt.n	8005e0a <__sflush_r+0xf6>
 8005dfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005dfe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e02:	f04f 30ff 	mov.w	r0, #4294967295
 8005e06:	81a3      	strh	r3, [r4, #12]
 8005e08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e0a:	4407      	add	r7, r0
 8005e0c:	1a36      	subs	r6, r6, r0
 8005e0e:	e7e9      	b.n	8005de4 <__sflush_r+0xd0>
 8005e10:	dfbffffe 	.word	0xdfbffffe

08005e14 <_fflush_r>:
 8005e14:	b538      	push	{r3, r4, r5, lr}
 8005e16:	690b      	ldr	r3, [r1, #16]
 8005e18:	4605      	mov	r5, r0
 8005e1a:	460c      	mov	r4, r1
 8005e1c:	b913      	cbnz	r3, 8005e24 <_fflush_r+0x10>
 8005e1e:	2500      	movs	r5, #0
 8005e20:	4628      	mov	r0, r5
 8005e22:	bd38      	pop	{r3, r4, r5, pc}
 8005e24:	b118      	cbz	r0, 8005e2e <_fflush_r+0x1a>
 8005e26:	6a03      	ldr	r3, [r0, #32]
 8005e28:	b90b      	cbnz	r3, 8005e2e <_fflush_r+0x1a>
 8005e2a:	f000 f8a7 	bl	8005f7c <__sinit>
 8005e2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d0f3      	beq.n	8005e1e <_fflush_r+0xa>
 8005e36:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005e38:	07d0      	lsls	r0, r2, #31
 8005e3a:	d404      	bmi.n	8005e46 <_fflush_r+0x32>
 8005e3c:	0599      	lsls	r1, r3, #22
 8005e3e:	d402      	bmi.n	8005e46 <_fflush_r+0x32>
 8005e40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e42:	f000 fab6 	bl	80063b2 <__retarget_lock_acquire_recursive>
 8005e46:	4628      	mov	r0, r5
 8005e48:	4621      	mov	r1, r4
 8005e4a:	f7ff ff63 	bl	8005d14 <__sflush_r>
 8005e4e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005e50:	4605      	mov	r5, r0
 8005e52:	07da      	lsls	r2, r3, #31
 8005e54:	d4e4      	bmi.n	8005e20 <_fflush_r+0xc>
 8005e56:	89a3      	ldrh	r3, [r4, #12]
 8005e58:	059b      	lsls	r3, r3, #22
 8005e5a:	d4e1      	bmi.n	8005e20 <_fflush_r+0xc>
 8005e5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005e5e:	f000 faa9 	bl	80063b4 <__retarget_lock_release_recursive>
 8005e62:	e7dd      	b.n	8005e20 <_fflush_r+0xc>

08005e64 <std>:
 8005e64:	2300      	movs	r3, #0
 8005e66:	b510      	push	{r4, lr}
 8005e68:	4604      	mov	r4, r0
 8005e6a:	e9c0 3300 	strd	r3, r3, [r0]
 8005e6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005e72:	6083      	str	r3, [r0, #8]
 8005e74:	8181      	strh	r1, [r0, #12]
 8005e76:	6643      	str	r3, [r0, #100]	@ 0x64
 8005e78:	81c2      	strh	r2, [r0, #14]
 8005e7a:	6183      	str	r3, [r0, #24]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	2208      	movs	r2, #8
 8005e80:	305c      	adds	r0, #92	@ 0x5c
 8005e82:	f000 f9c5 	bl	8006210 <memset>
 8005e86:	4b0d      	ldr	r3, [pc, #52]	@ (8005ebc <std+0x58>)
 8005e88:	6224      	str	r4, [r4, #32]
 8005e8a:	6263      	str	r3, [r4, #36]	@ 0x24
 8005e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec0 <std+0x5c>)
 8005e8e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005e90:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec4 <std+0x60>)
 8005e92:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005e94:	4b0c      	ldr	r3, [pc, #48]	@ (8005ec8 <std+0x64>)
 8005e96:	6323      	str	r3, [r4, #48]	@ 0x30
 8005e98:	4b0c      	ldr	r3, [pc, #48]	@ (8005ecc <std+0x68>)
 8005e9a:	429c      	cmp	r4, r3
 8005e9c:	d006      	beq.n	8005eac <std+0x48>
 8005e9e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005ea2:	4294      	cmp	r4, r2
 8005ea4:	d002      	beq.n	8005eac <std+0x48>
 8005ea6:	33d0      	adds	r3, #208	@ 0xd0
 8005ea8:	429c      	cmp	r4, r3
 8005eaa:	d105      	bne.n	8005eb8 <std+0x54>
 8005eac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005eb4:	f000 ba7c 	b.w	80063b0 <__retarget_lock_init_recursive>
 8005eb8:	bd10      	pop	{r4, pc}
 8005eba:	bf00      	nop
 8005ebc:	0800600d 	.word	0x0800600d
 8005ec0:	0800602f 	.word	0x0800602f
 8005ec4:	08006067 	.word	0x08006067
 8005ec8:	0800608b 	.word	0x0800608b
 8005ecc:	20000374 	.word	0x20000374

08005ed0 <stdio_exit_handler>:
 8005ed0:	4a02      	ldr	r2, [pc, #8]	@ (8005edc <stdio_exit_handler+0xc>)
 8005ed2:	4903      	ldr	r1, [pc, #12]	@ (8005ee0 <stdio_exit_handler+0x10>)
 8005ed4:	4803      	ldr	r0, [pc, #12]	@ (8005ee4 <stdio_exit_handler+0x14>)
 8005ed6:	f000 b87b 	b.w	8005fd0 <_fwalk_sglue>
 8005eda:	bf00      	nop
 8005edc:	2000000c 	.word	0x2000000c
 8005ee0:	08005e15 	.word	0x08005e15
 8005ee4:	2000001c 	.word	0x2000001c

08005ee8 <cleanup_stdio>:
 8005ee8:	6841      	ldr	r1, [r0, #4]
 8005eea:	4b0c      	ldr	r3, [pc, #48]	@ (8005f1c <cleanup_stdio+0x34>)
 8005eec:	b510      	push	{r4, lr}
 8005eee:	4299      	cmp	r1, r3
 8005ef0:	4604      	mov	r4, r0
 8005ef2:	d001      	beq.n	8005ef8 <cleanup_stdio+0x10>
 8005ef4:	f7ff ff8e 	bl	8005e14 <_fflush_r>
 8005ef8:	68a1      	ldr	r1, [r4, #8]
 8005efa:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <cleanup_stdio+0x38>)
 8005efc:	4299      	cmp	r1, r3
 8005efe:	d002      	beq.n	8005f06 <cleanup_stdio+0x1e>
 8005f00:	4620      	mov	r0, r4
 8005f02:	f7ff ff87 	bl	8005e14 <_fflush_r>
 8005f06:	68e1      	ldr	r1, [r4, #12]
 8005f08:	4b06      	ldr	r3, [pc, #24]	@ (8005f24 <cleanup_stdio+0x3c>)
 8005f0a:	4299      	cmp	r1, r3
 8005f0c:	d004      	beq.n	8005f18 <cleanup_stdio+0x30>
 8005f0e:	4620      	mov	r0, r4
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f7ff bf7e 	b.w	8005e14 <_fflush_r>
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	20000374 	.word	0x20000374
 8005f20:	200003dc 	.word	0x200003dc
 8005f24:	20000444 	.word	0x20000444

08005f28 <global_stdio_init.part.0>:
 8005f28:	b510      	push	{r4, lr}
 8005f2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005f58 <global_stdio_init.part.0+0x30>)
 8005f2c:	4c0b      	ldr	r4, [pc, #44]	@ (8005f5c <global_stdio_init.part.0+0x34>)
 8005f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8005f60 <global_stdio_init.part.0+0x38>)
 8005f30:	4620      	mov	r0, r4
 8005f32:	601a      	str	r2, [r3, #0]
 8005f34:	2104      	movs	r1, #4
 8005f36:	2200      	movs	r2, #0
 8005f38:	f7ff ff94 	bl	8005e64 <std>
 8005f3c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005f40:	2201      	movs	r2, #1
 8005f42:	2109      	movs	r1, #9
 8005f44:	f7ff ff8e 	bl	8005e64 <std>
 8005f48:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005f4c:	2202      	movs	r2, #2
 8005f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f52:	2112      	movs	r1, #18
 8005f54:	f7ff bf86 	b.w	8005e64 <std>
 8005f58:	200004ac 	.word	0x200004ac
 8005f5c:	20000374 	.word	0x20000374
 8005f60:	08005ed1 	.word	0x08005ed1

08005f64 <__sfp_lock_acquire>:
 8005f64:	4801      	ldr	r0, [pc, #4]	@ (8005f6c <__sfp_lock_acquire+0x8>)
 8005f66:	f000 ba24 	b.w	80063b2 <__retarget_lock_acquire_recursive>
 8005f6a:	bf00      	nop
 8005f6c:	200004b5 	.word	0x200004b5

08005f70 <__sfp_lock_release>:
 8005f70:	4801      	ldr	r0, [pc, #4]	@ (8005f78 <__sfp_lock_release+0x8>)
 8005f72:	f000 ba1f 	b.w	80063b4 <__retarget_lock_release_recursive>
 8005f76:	bf00      	nop
 8005f78:	200004b5 	.word	0x200004b5

08005f7c <__sinit>:
 8005f7c:	b510      	push	{r4, lr}
 8005f7e:	4604      	mov	r4, r0
 8005f80:	f7ff fff0 	bl	8005f64 <__sfp_lock_acquire>
 8005f84:	6a23      	ldr	r3, [r4, #32]
 8005f86:	b11b      	cbz	r3, 8005f90 <__sinit+0x14>
 8005f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f8c:	f7ff bff0 	b.w	8005f70 <__sfp_lock_release>
 8005f90:	4b04      	ldr	r3, [pc, #16]	@ (8005fa4 <__sinit+0x28>)
 8005f92:	6223      	str	r3, [r4, #32]
 8005f94:	4b04      	ldr	r3, [pc, #16]	@ (8005fa8 <__sinit+0x2c>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d1f5      	bne.n	8005f88 <__sinit+0xc>
 8005f9c:	f7ff ffc4 	bl	8005f28 <global_stdio_init.part.0>
 8005fa0:	e7f2      	b.n	8005f88 <__sinit+0xc>
 8005fa2:	bf00      	nop
 8005fa4:	08005ee9 	.word	0x08005ee9
 8005fa8:	200004ac 	.word	0x200004ac

08005fac <fiprintf>:
 8005fac:	b40e      	push	{r1, r2, r3}
 8005fae:	b503      	push	{r0, r1, lr}
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	ab03      	add	r3, sp, #12
 8005fb4:	4805      	ldr	r0, [pc, #20]	@ (8005fcc <fiprintf+0x20>)
 8005fb6:	f853 2b04 	ldr.w	r2, [r3], #4
 8005fba:	6800      	ldr	r0, [r0, #0]
 8005fbc:	9301      	str	r3, [sp, #4]
 8005fbe:	f7ff fbff 	bl	80057c0 <_vfiprintf_r>
 8005fc2:	b002      	add	sp, #8
 8005fc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005fc8:	b003      	add	sp, #12
 8005fca:	4770      	bx	lr
 8005fcc:	20000018 	.word	0x20000018

08005fd0 <_fwalk_sglue>:
 8005fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005fd4:	4607      	mov	r7, r0
 8005fd6:	4688      	mov	r8, r1
 8005fd8:	4614      	mov	r4, r2
 8005fda:	2600      	movs	r6, #0
 8005fdc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005fe0:	f1b9 0901 	subs.w	r9, r9, #1
 8005fe4:	d505      	bpl.n	8005ff2 <_fwalk_sglue+0x22>
 8005fe6:	6824      	ldr	r4, [r4, #0]
 8005fe8:	2c00      	cmp	r4, #0
 8005fea:	d1f7      	bne.n	8005fdc <_fwalk_sglue+0xc>
 8005fec:	4630      	mov	r0, r6
 8005fee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005ff2:	89ab      	ldrh	r3, [r5, #12]
 8005ff4:	2b01      	cmp	r3, #1
 8005ff6:	d907      	bls.n	8006008 <_fwalk_sglue+0x38>
 8005ff8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ffc:	3301      	adds	r3, #1
 8005ffe:	d003      	beq.n	8006008 <_fwalk_sglue+0x38>
 8006000:	4629      	mov	r1, r5
 8006002:	4638      	mov	r0, r7
 8006004:	47c0      	blx	r8
 8006006:	4306      	orrs	r6, r0
 8006008:	3568      	adds	r5, #104	@ 0x68
 800600a:	e7e9      	b.n	8005fe0 <_fwalk_sglue+0x10>

0800600c <__sread>:
 800600c:	b510      	push	{r4, lr}
 800600e:	460c      	mov	r4, r1
 8006010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006014:	f000 f95a 	bl	80062cc <_read_r>
 8006018:	2800      	cmp	r0, #0
 800601a:	bfab      	itete	ge
 800601c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800601e:	89a3      	ldrhlt	r3, [r4, #12]
 8006020:	181b      	addge	r3, r3, r0
 8006022:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006026:	bfac      	ite	ge
 8006028:	6563      	strge	r3, [r4, #84]	@ 0x54
 800602a:	81a3      	strhlt	r3, [r4, #12]
 800602c:	bd10      	pop	{r4, pc}

0800602e <__swrite>:
 800602e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006032:	461f      	mov	r7, r3
 8006034:	898b      	ldrh	r3, [r1, #12]
 8006036:	4605      	mov	r5, r0
 8006038:	05db      	lsls	r3, r3, #23
 800603a:	460c      	mov	r4, r1
 800603c:	4616      	mov	r6, r2
 800603e:	d505      	bpl.n	800604c <__swrite+0x1e>
 8006040:	2302      	movs	r3, #2
 8006042:	2200      	movs	r2, #0
 8006044:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006048:	f000 f92e 	bl	80062a8 <_lseek_r>
 800604c:	89a3      	ldrh	r3, [r4, #12]
 800604e:	4632      	mov	r2, r6
 8006050:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006054:	81a3      	strh	r3, [r4, #12]
 8006056:	4628      	mov	r0, r5
 8006058:	463b      	mov	r3, r7
 800605a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800605e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006062:	f000 b969 	b.w	8006338 <_write_r>

08006066 <__sseek>:
 8006066:	b510      	push	{r4, lr}
 8006068:	460c      	mov	r4, r1
 800606a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800606e:	f000 f91b 	bl	80062a8 <_lseek_r>
 8006072:	1c43      	adds	r3, r0, #1
 8006074:	89a3      	ldrh	r3, [r4, #12]
 8006076:	bf15      	itete	ne
 8006078:	6560      	strne	r0, [r4, #84]	@ 0x54
 800607a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800607e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006082:	81a3      	strheq	r3, [r4, #12]
 8006084:	bf18      	it	ne
 8006086:	81a3      	strhne	r3, [r4, #12]
 8006088:	bd10      	pop	{r4, pc}

0800608a <__sclose>:
 800608a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800608e:	f000 b8fb 	b.w	8006288 <_close_r>

08006092 <__swbuf_r>:
 8006092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006094:	460e      	mov	r6, r1
 8006096:	4614      	mov	r4, r2
 8006098:	4605      	mov	r5, r0
 800609a:	b118      	cbz	r0, 80060a4 <__swbuf_r+0x12>
 800609c:	6a03      	ldr	r3, [r0, #32]
 800609e:	b90b      	cbnz	r3, 80060a4 <__swbuf_r+0x12>
 80060a0:	f7ff ff6c 	bl	8005f7c <__sinit>
 80060a4:	69a3      	ldr	r3, [r4, #24]
 80060a6:	60a3      	str	r3, [r4, #8]
 80060a8:	89a3      	ldrh	r3, [r4, #12]
 80060aa:	071a      	lsls	r2, r3, #28
 80060ac:	d501      	bpl.n	80060b2 <__swbuf_r+0x20>
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	b943      	cbnz	r3, 80060c4 <__swbuf_r+0x32>
 80060b2:	4621      	mov	r1, r4
 80060b4:	4628      	mov	r0, r5
 80060b6:	f000 f82b 	bl	8006110 <__swsetup_r>
 80060ba:	b118      	cbz	r0, 80060c4 <__swbuf_r+0x32>
 80060bc:	f04f 37ff 	mov.w	r7, #4294967295
 80060c0:	4638      	mov	r0, r7
 80060c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80060c4:	6823      	ldr	r3, [r4, #0]
 80060c6:	6922      	ldr	r2, [r4, #16]
 80060c8:	b2f6      	uxtb	r6, r6
 80060ca:	1a98      	subs	r0, r3, r2
 80060cc:	6963      	ldr	r3, [r4, #20]
 80060ce:	4637      	mov	r7, r6
 80060d0:	4283      	cmp	r3, r0
 80060d2:	dc05      	bgt.n	80060e0 <__swbuf_r+0x4e>
 80060d4:	4621      	mov	r1, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	f7ff fe9c 	bl	8005e14 <_fflush_r>
 80060dc:	2800      	cmp	r0, #0
 80060de:	d1ed      	bne.n	80060bc <__swbuf_r+0x2a>
 80060e0:	68a3      	ldr	r3, [r4, #8]
 80060e2:	3b01      	subs	r3, #1
 80060e4:	60a3      	str	r3, [r4, #8]
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	6022      	str	r2, [r4, #0]
 80060ec:	701e      	strb	r6, [r3, #0]
 80060ee:	6962      	ldr	r2, [r4, #20]
 80060f0:	1c43      	adds	r3, r0, #1
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d004      	beq.n	8006100 <__swbuf_r+0x6e>
 80060f6:	89a3      	ldrh	r3, [r4, #12]
 80060f8:	07db      	lsls	r3, r3, #31
 80060fa:	d5e1      	bpl.n	80060c0 <__swbuf_r+0x2e>
 80060fc:	2e0a      	cmp	r6, #10
 80060fe:	d1df      	bne.n	80060c0 <__swbuf_r+0x2e>
 8006100:	4621      	mov	r1, r4
 8006102:	4628      	mov	r0, r5
 8006104:	f7ff fe86 	bl	8005e14 <_fflush_r>
 8006108:	2800      	cmp	r0, #0
 800610a:	d0d9      	beq.n	80060c0 <__swbuf_r+0x2e>
 800610c:	e7d6      	b.n	80060bc <__swbuf_r+0x2a>
	...

08006110 <__swsetup_r>:
 8006110:	b538      	push	{r3, r4, r5, lr}
 8006112:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <__swsetup_r+0xa8>)
 8006114:	4605      	mov	r5, r0
 8006116:	6818      	ldr	r0, [r3, #0]
 8006118:	460c      	mov	r4, r1
 800611a:	b118      	cbz	r0, 8006124 <__swsetup_r+0x14>
 800611c:	6a03      	ldr	r3, [r0, #32]
 800611e:	b90b      	cbnz	r3, 8006124 <__swsetup_r+0x14>
 8006120:	f7ff ff2c 	bl	8005f7c <__sinit>
 8006124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006128:	0719      	lsls	r1, r3, #28
 800612a:	d422      	bmi.n	8006172 <__swsetup_r+0x62>
 800612c:	06da      	lsls	r2, r3, #27
 800612e:	d407      	bmi.n	8006140 <__swsetup_r+0x30>
 8006130:	2209      	movs	r2, #9
 8006132:	602a      	str	r2, [r5, #0]
 8006134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006138:	f04f 30ff 	mov.w	r0, #4294967295
 800613c:	81a3      	strh	r3, [r4, #12]
 800613e:	e033      	b.n	80061a8 <__swsetup_r+0x98>
 8006140:	0758      	lsls	r0, r3, #29
 8006142:	d512      	bpl.n	800616a <__swsetup_r+0x5a>
 8006144:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006146:	b141      	cbz	r1, 800615a <__swsetup_r+0x4a>
 8006148:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800614c:	4299      	cmp	r1, r3
 800614e:	d002      	beq.n	8006156 <__swsetup_r+0x46>
 8006150:	4628      	mov	r0, r5
 8006152:	f000 ff9d 	bl	8007090 <_free_r>
 8006156:	2300      	movs	r3, #0
 8006158:	6363      	str	r3, [r4, #52]	@ 0x34
 800615a:	89a3      	ldrh	r3, [r4, #12]
 800615c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006160:	81a3      	strh	r3, [r4, #12]
 8006162:	2300      	movs	r3, #0
 8006164:	6063      	str	r3, [r4, #4]
 8006166:	6923      	ldr	r3, [r4, #16]
 8006168:	6023      	str	r3, [r4, #0]
 800616a:	89a3      	ldrh	r3, [r4, #12]
 800616c:	f043 0308 	orr.w	r3, r3, #8
 8006170:	81a3      	strh	r3, [r4, #12]
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	b94b      	cbnz	r3, 800618a <__swsetup_r+0x7a>
 8006176:	89a3      	ldrh	r3, [r4, #12]
 8006178:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800617c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006180:	d003      	beq.n	800618a <__swsetup_r+0x7a>
 8006182:	4621      	mov	r1, r4
 8006184:	4628      	mov	r0, r5
 8006186:	f001 fb70 	bl	800786a <__smakebuf_r>
 800618a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800618e:	f013 0201 	ands.w	r2, r3, #1
 8006192:	d00a      	beq.n	80061aa <__swsetup_r+0x9a>
 8006194:	2200      	movs	r2, #0
 8006196:	60a2      	str	r2, [r4, #8]
 8006198:	6962      	ldr	r2, [r4, #20]
 800619a:	4252      	negs	r2, r2
 800619c:	61a2      	str	r2, [r4, #24]
 800619e:	6922      	ldr	r2, [r4, #16]
 80061a0:	b942      	cbnz	r2, 80061b4 <__swsetup_r+0xa4>
 80061a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80061a6:	d1c5      	bne.n	8006134 <__swsetup_r+0x24>
 80061a8:	bd38      	pop	{r3, r4, r5, pc}
 80061aa:	0799      	lsls	r1, r3, #30
 80061ac:	bf58      	it	pl
 80061ae:	6962      	ldrpl	r2, [r4, #20]
 80061b0:	60a2      	str	r2, [r4, #8]
 80061b2:	e7f4      	b.n	800619e <__swsetup_r+0x8e>
 80061b4:	2000      	movs	r0, #0
 80061b6:	e7f7      	b.n	80061a8 <__swsetup_r+0x98>
 80061b8:	20000018 	.word	0x20000018

080061bc <memcmp>:
 80061bc:	b510      	push	{r4, lr}
 80061be:	3901      	subs	r1, #1
 80061c0:	4402      	add	r2, r0
 80061c2:	4290      	cmp	r0, r2
 80061c4:	d101      	bne.n	80061ca <memcmp+0xe>
 80061c6:	2000      	movs	r0, #0
 80061c8:	e005      	b.n	80061d6 <memcmp+0x1a>
 80061ca:	7803      	ldrb	r3, [r0, #0]
 80061cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d001      	beq.n	80061d8 <memcmp+0x1c>
 80061d4:	1b18      	subs	r0, r3, r4
 80061d6:	bd10      	pop	{r4, pc}
 80061d8:	3001      	adds	r0, #1
 80061da:	e7f2      	b.n	80061c2 <memcmp+0x6>

080061dc <memmove>:
 80061dc:	4288      	cmp	r0, r1
 80061de:	b510      	push	{r4, lr}
 80061e0:	eb01 0402 	add.w	r4, r1, r2
 80061e4:	d902      	bls.n	80061ec <memmove+0x10>
 80061e6:	4284      	cmp	r4, r0
 80061e8:	4623      	mov	r3, r4
 80061ea:	d807      	bhi.n	80061fc <memmove+0x20>
 80061ec:	1e43      	subs	r3, r0, #1
 80061ee:	42a1      	cmp	r1, r4
 80061f0:	d008      	beq.n	8006204 <memmove+0x28>
 80061f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80061f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80061fa:	e7f8      	b.n	80061ee <memmove+0x12>
 80061fc:	4601      	mov	r1, r0
 80061fe:	4402      	add	r2, r0
 8006200:	428a      	cmp	r2, r1
 8006202:	d100      	bne.n	8006206 <memmove+0x2a>
 8006204:	bd10      	pop	{r4, pc}
 8006206:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800620a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800620e:	e7f7      	b.n	8006200 <memmove+0x24>

08006210 <memset>:
 8006210:	4603      	mov	r3, r0
 8006212:	4402      	add	r2, r0
 8006214:	4293      	cmp	r3, r2
 8006216:	d100      	bne.n	800621a <memset+0xa>
 8006218:	4770      	bx	lr
 800621a:	f803 1b01 	strb.w	r1, [r3], #1
 800621e:	e7f9      	b.n	8006214 <memset+0x4>

08006220 <_raise_r>:
 8006220:	291f      	cmp	r1, #31
 8006222:	b538      	push	{r3, r4, r5, lr}
 8006224:	4605      	mov	r5, r0
 8006226:	460c      	mov	r4, r1
 8006228:	d904      	bls.n	8006234 <_raise_r+0x14>
 800622a:	2316      	movs	r3, #22
 800622c:	6003      	str	r3, [r0, #0]
 800622e:	f04f 30ff 	mov.w	r0, #4294967295
 8006232:	bd38      	pop	{r3, r4, r5, pc}
 8006234:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8006236:	b112      	cbz	r2, 800623e <_raise_r+0x1e>
 8006238:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800623c:	b94b      	cbnz	r3, 8006252 <_raise_r+0x32>
 800623e:	4628      	mov	r0, r5
 8006240:	f000 f868 	bl	8006314 <_getpid_r>
 8006244:	4622      	mov	r2, r4
 8006246:	4601      	mov	r1, r0
 8006248:	4628      	mov	r0, r5
 800624a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800624e:	f000 b84f 	b.w	80062f0 <_kill_r>
 8006252:	2b01      	cmp	r3, #1
 8006254:	d00a      	beq.n	800626c <_raise_r+0x4c>
 8006256:	1c59      	adds	r1, r3, #1
 8006258:	d103      	bne.n	8006262 <_raise_r+0x42>
 800625a:	2316      	movs	r3, #22
 800625c:	6003      	str	r3, [r0, #0]
 800625e:	2001      	movs	r0, #1
 8006260:	e7e7      	b.n	8006232 <_raise_r+0x12>
 8006262:	2100      	movs	r1, #0
 8006264:	4620      	mov	r0, r4
 8006266:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800626a:	4798      	blx	r3
 800626c:	2000      	movs	r0, #0
 800626e:	e7e0      	b.n	8006232 <_raise_r+0x12>

08006270 <raise>:
 8006270:	4b02      	ldr	r3, [pc, #8]	@ (800627c <raise+0xc>)
 8006272:	4601      	mov	r1, r0
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f7ff bfd3 	b.w	8006220 <_raise_r>
 800627a:	bf00      	nop
 800627c:	20000018 	.word	0x20000018

08006280 <_localeconv_r>:
 8006280:	4800      	ldr	r0, [pc, #0]	@ (8006284 <_localeconv_r+0x4>)
 8006282:	4770      	bx	lr
 8006284:	20000158 	.word	0x20000158

08006288 <_close_r>:
 8006288:	b538      	push	{r3, r4, r5, lr}
 800628a:	2300      	movs	r3, #0
 800628c:	4d05      	ldr	r5, [pc, #20]	@ (80062a4 <_close_r+0x1c>)
 800628e:	4604      	mov	r4, r0
 8006290:	4608      	mov	r0, r1
 8006292:	602b      	str	r3, [r5, #0]
 8006294:	f7fb f98f 	bl	80015b6 <_close>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	d102      	bne.n	80062a2 <_close_r+0x1a>
 800629c:	682b      	ldr	r3, [r5, #0]
 800629e:	b103      	cbz	r3, 80062a2 <_close_r+0x1a>
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	bd38      	pop	{r3, r4, r5, pc}
 80062a4:	200004b0 	.word	0x200004b0

080062a8 <_lseek_r>:
 80062a8:	b538      	push	{r3, r4, r5, lr}
 80062aa:	4604      	mov	r4, r0
 80062ac:	4608      	mov	r0, r1
 80062ae:	4611      	mov	r1, r2
 80062b0:	2200      	movs	r2, #0
 80062b2:	4d05      	ldr	r5, [pc, #20]	@ (80062c8 <_lseek_r+0x20>)
 80062b4:	602a      	str	r2, [r5, #0]
 80062b6:	461a      	mov	r2, r3
 80062b8:	f7fb f987 	bl	80015ca <_lseek>
 80062bc:	1c43      	adds	r3, r0, #1
 80062be:	d102      	bne.n	80062c6 <_lseek_r+0x1e>
 80062c0:	682b      	ldr	r3, [r5, #0]
 80062c2:	b103      	cbz	r3, 80062c6 <_lseek_r+0x1e>
 80062c4:	6023      	str	r3, [r4, #0]
 80062c6:	bd38      	pop	{r3, r4, r5, pc}
 80062c8:	200004b0 	.word	0x200004b0

080062cc <_read_r>:
 80062cc:	b538      	push	{r3, r4, r5, lr}
 80062ce:	4604      	mov	r4, r0
 80062d0:	4608      	mov	r0, r1
 80062d2:	4611      	mov	r1, r2
 80062d4:	2200      	movs	r2, #0
 80062d6:	4d05      	ldr	r5, [pc, #20]	@ (80062ec <_read_r+0x20>)
 80062d8:	602a      	str	r2, [r5, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	f7fb f95e 	bl	800159c <_read>
 80062e0:	1c43      	adds	r3, r0, #1
 80062e2:	d102      	bne.n	80062ea <_read_r+0x1e>
 80062e4:	682b      	ldr	r3, [r5, #0]
 80062e6:	b103      	cbz	r3, 80062ea <_read_r+0x1e>
 80062e8:	6023      	str	r3, [r4, #0]
 80062ea:	bd38      	pop	{r3, r4, r5, pc}
 80062ec:	200004b0 	.word	0x200004b0

080062f0 <_kill_r>:
 80062f0:	b538      	push	{r3, r4, r5, lr}
 80062f2:	2300      	movs	r3, #0
 80062f4:	4d06      	ldr	r5, [pc, #24]	@ (8006310 <_kill_r+0x20>)
 80062f6:	4604      	mov	r4, r0
 80062f8:	4608      	mov	r0, r1
 80062fa:	4611      	mov	r1, r2
 80062fc:	602b      	str	r3, [r5, #0]
 80062fe:	f7fb f93f 	bl	8001580 <_kill>
 8006302:	1c43      	adds	r3, r0, #1
 8006304:	d102      	bne.n	800630c <_kill_r+0x1c>
 8006306:	682b      	ldr	r3, [r5, #0]
 8006308:	b103      	cbz	r3, 800630c <_kill_r+0x1c>
 800630a:	6023      	str	r3, [r4, #0]
 800630c:	bd38      	pop	{r3, r4, r5, pc}
 800630e:	bf00      	nop
 8006310:	200004b0 	.word	0x200004b0

08006314 <_getpid_r>:
 8006314:	f7fb b932 	b.w	800157c <_getpid>

08006318 <_sbrk_r>:
 8006318:	b538      	push	{r3, r4, r5, lr}
 800631a:	2300      	movs	r3, #0
 800631c:	4d05      	ldr	r5, [pc, #20]	@ (8006334 <_sbrk_r+0x1c>)
 800631e:	4604      	mov	r4, r0
 8006320:	4608      	mov	r0, r1
 8006322:	602b      	str	r3, [r5, #0]
 8006324:	f7fb f954 	bl	80015d0 <_sbrk>
 8006328:	1c43      	adds	r3, r0, #1
 800632a:	d102      	bne.n	8006332 <_sbrk_r+0x1a>
 800632c:	682b      	ldr	r3, [r5, #0]
 800632e:	b103      	cbz	r3, 8006332 <_sbrk_r+0x1a>
 8006330:	6023      	str	r3, [r4, #0]
 8006332:	bd38      	pop	{r3, r4, r5, pc}
 8006334:	200004b0 	.word	0x200004b0

08006338 <_write_r>:
 8006338:	b538      	push	{r3, r4, r5, lr}
 800633a:	4604      	mov	r4, r0
 800633c:	4608      	mov	r0, r1
 800633e:	4611      	mov	r1, r2
 8006340:	2200      	movs	r2, #0
 8006342:	4d05      	ldr	r5, [pc, #20]	@ (8006358 <_write_r+0x20>)
 8006344:	602a      	str	r2, [r5, #0]
 8006346:	461a      	mov	r2, r3
 8006348:	f7fe f9c6 	bl	80046d8 <_write>
 800634c:	1c43      	adds	r3, r0, #1
 800634e:	d102      	bne.n	8006356 <_write_r+0x1e>
 8006350:	682b      	ldr	r3, [r5, #0]
 8006352:	b103      	cbz	r3, 8006356 <_write_r+0x1e>
 8006354:	6023      	str	r3, [r4, #0]
 8006356:	bd38      	pop	{r3, r4, r5, pc}
 8006358:	200004b0 	.word	0x200004b0

0800635c <__errno>:
 800635c:	4b01      	ldr	r3, [pc, #4]	@ (8006364 <__errno+0x8>)
 800635e:	6818      	ldr	r0, [r3, #0]
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	20000018 	.word	0x20000018

08006368 <__libc_init_array>:
 8006368:	b570      	push	{r4, r5, r6, lr}
 800636a:	2600      	movs	r6, #0
 800636c:	4d0c      	ldr	r5, [pc, #48]	@ (80063a0 <__libc_init_array+0x38>)
 800636e:	4c0d      	ldr	r4, [pc, #52]	@ (80063a4 <__libc_init_array+0x3c>)
 8006370:	1b64      	subs	r4, r4, r5
 8006372:	10a4      	asrs	r4, r4, #2
 8006374:	42a6      	cmp	r6, r4
 8006376:	d109      	bne.n	800638c <__libc_init_array+0x24>
 8006378:	f001 faf6 	bl	8007968 <_init>
 800637c:	2600      	movs	r6, #0
 800637e:	4d0a      	ldr	r5, [pc, #40]	@ (80063a8 <__libc_init_array+0x40>)
 8006380:	4c0a      	ldr	r4, [pc, #40]	@ (80063ac <__libc_init_array+0x44>)
 8006382:	1b64      	subs	r4, r4, r5
 8006384:	10a4      	asrs	r4, r4, #2
 8006386:	42a6      	cmp	r6, r4
 8006388:	d105      	bne.n	8006396 <__libc_init_array+0x2e>
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006390:	4798      	blx	r3
 8006392:	3601      	adds	r6, #1
 8006394:	e7ee      	b.n	8006374 <__libc_init_array+0xc>
 8006396:	f855 3b04 	ldr.w	r3, [r5], #4
 800639a:	4798      	blx	r3
 800639c:	3601      	adds	r6, #1
 800639e:	e7f2      	b.n	8006386 <__libc_init_array+0x1e>
 80063a0:	08008d44 	.word	0x08008d44
 80063a4:	08008d44 	.word	0x08008d44
 80063a8:	08008d44 	.word	0x08008d44
 80063ac:	08008d4c 	.word	0x08008d4c

080063b0 <__retarget_lock_init_recursive>:
 80063b0:	4770      	bx	lr

080063b2 <__retarget_lock_acquire_recursive>:
 80063b2:	4770      	bx	lr

080063b4 <__retarget_lock_release_recursive>:
 80063b4:	4770      	bx	lr

080063b6 <memchr>:
 80063b6:	4603      	mov	r3, r0
 80063b8:	b510      	push	{r4, lr}
 80063ba:	b2c9      	uxtb	r1, r1
 80063bc:	4402      	add	r2, r0
 80063be:	4293      	cmp	r3, r2
 80063c0:	4618      	mov	r0, r3
 80063c2:	d101      	bne.n	80063c8 <memchr+0x12>
 80063c4:	2000      	movs	r0, #0
 80063c6:	e003      	b.n	80063d0 <memchr+0x1a>
 80063c8:	7804      	ldrb	r4, [r0, #0]
 80063ca:	3301      	adds	r3, #1
 80063cc:	428c      	cmp	r4, r1
 80063ce:	d1f6      	bne.n	80063be <memchr+0x8>
 80063d0:	bd10      	pop	{r4, pc}

080063d2 <memcpy>:
 80063d2:	440a      	add	r2, r1
 80063d4:	4291      	cmp	r1, r2
 80063d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80063da:	d100      	bne.n	80063de <memcpy+0xc>
 80063dc:	4770      	bx	lr
 80063de:	b510      	push	{r4, lr}
 80063e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063e4:	4291      	cmp	r1, r2
 80063e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063ea:	d1f9      	bne.n	80063e0 <memcpy+0xe>
 80063ec:	bd10      	pop	{r4, pc}

080063ee <quorem>:
 80063ee:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f2:	6903      	ldr	r3, [r0, #16]
 80063f4:	690c      	ldr	r4, [r1, #16]
 80063f6:	4607      	mov	r7, r0
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	db7e      	blt.n	80064fa <quorem+0x10c>
 80063fc:	3c01      	subs	r4, #1
 80063fe:	00a3      	lsls	r3, r4, #2
 8006400:	f100 0514 	add.w	r5, r0, #20
 8006404:	f101 0814 	add.w	r8, r1, #20
 8006408:	9300      	str	r3, [sp, #0]
 800640a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006414:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006418:	3301      	adds	r3, #1
 800641a:	429a      	cmp	r2, r3
 800641c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006420:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006424:	d32e      	bcc.n	8006484 <quorem+0x96>
 8006426:	f04f 0a00 	mov.w	sl, #0
 800642a:	46c4      	mov	ip, r8
 800642c:	46ae      	mov	lr, r5
 800642e:	46d3      	mov	fp, sl
 8006430:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006434:	b298      	uxth	r0, r3
 8006436:	fb06 a000 	mla	r0, r6, r0, sl
 800643a:	0c1b      	lsrs	r3, r3, #16
 800643c:	0c02      	lsrs	r2, r0, #16
 800643e:	fb06 2303 	mla	r3, r6, r3, r2
 8006442:	f8de 2000 	ldr.w	r2, [lr]
 8006446:	b280      	uxth	r0, r0
 8006448:	b292      	uxth	r2, r2
 800644a:	1a12      	subs	r2, r2, r0
 800644c:	445a      	add	r2, fp
 800644e:	f8de 0000 	ldr.w	r0, [lr]
 8006452:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006456:	b29b      	uxth	r3, r3
 8006458:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800645c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006460:	b292      	uxth	r2, r2
 8006462:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006466:	45e1      	cmp	r9, ip
 8006468:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800646c:	f84e 2b04 	str.w	r2, [lr], #4
 8006470:	d2de      	bcs.n	8006430 <quorem+0x42>
 8006472:	9b00      	ldr	r3, [sp, #0]
 8006474:	58eb      	ldr	r3, [r5, r3]
 8006476:	b92b      	cbnz	r3, 8006484 <quorem+0x96>
 8006478:	9b01      	ldr	r3, [sp, #4]
 800647a:	3b04      	subs	r3, #4
 800647c:	429d      	cmp	r5, r3
 800647e:	461a      	mov	r2, r3
 8006480:	d32f      	bcc.n	80064e2 <quorem+0xf4>
 8006482:	613c      	str	r4, [r7, #16]
 8006484:	4638      	mov	r0, r7
 8006486:	f001 f8c3 	bl	8007610 <__mcmp>
 800648a:	2800      	cmp	r0, #0
 800648c:	db25      	blt.n	80064da <quorem+0xec>
 800648e:	4629      	mov	r1, r5
 8006490:	2000      	movs	r0, #0
 8006492:	f858 2b04 	ldr.w	r2, [r8], #4
 8006496:	f8d1 c000 	ldr.w	ip, [r1]
 800649a:	fa1f fe82 	uxth.w	lr, r2
 800649e:	fa1f f38c 	uxth.w	r3, ip
 80064a2:	eba3 030e 	sub.w	r3, r3, lr
 80064a6:	4403      	add	r3, r0
 80064a8:	0c12      	lsrs	r2, r2, #16
 80064aa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80064ae:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80064b8:	45c1      	cmp	r9, r8
 80064ba:	ea4f 4022 	mov.w	r0, r2, asr #16
 80064be:	f841 3b04 	str.w	r3, [r1], #4
 80064c2:	d2e6      	bcs.n	8006492 <quorem+0xa4>
 80064c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80064c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80064cc:	b922      	cbnz	r2, 80064d8 <quorem+0xea>
 80064ce:	3b04      	subs	r3, #4
 80064d0:	429d      	cmp	r5, r3
 80064d2:	461a      	mov	r2, r3
 80064d4:	d30b      	bcc.n	80064ee <quorem+0x100>
 80064d6:	613c      	str	r4, [r7, #16]
 80064d8:	3601      	adds	r6, #1
 80064da:	4630      	mov	r0, r6
 80064dc:	b003      	add	sp, #12
 80064de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064e2:	6812      	ldr	r2, [r2, #0]
 80064e4:	3b04      	subs	r3, #4
 80064e6:	2a00      	cmp	r2, #0
 80064e8:	d1cb      	bne.n	8006482 <quorem+0x94>
 80064ea:	3c01      	subs	r4, #1
 80064ec:	e7c6      	b.n	800647c <quorem+0x8e>
 80064ee:	6812      	ldr	r2, [r2, #0]
 80064f0:	3b04      	subs	r3, #4
 80064f2:	2a00      	cmp	r2, #0
 80064f4:	d1ef      	bne.n	80064d6 <quorem+0xe8>
 80064f6:	3c01      	subs	r4, #1
 80064f8:	e7ea      	b.n	80064d0 <quorem+0xe2>
 80064fa:	2000      	movs	r0, #0
 80064fc:	e7ee      	b.n	80064dc <quorem+0xee>
	...

08006500 <_dtoa_r>:
 8006500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006504:	4614      	mov	r4, r2
 8006506:	461d      	mov	r5, r3
 8006508:	69c7      	ldr	r7, [r0, #28]
 800650a:	b097      	sub	sp, #92	@ 0x5c
 800650c:	4683      	mov	fp, r0
 800650e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006512:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006514:	b97f      	cbnz	r7, 8006536 <_dtoa_r+0x36>
 8006516:	2010      	movs	r0, #16
 8006518:	f7fe fda2 	bl	8005060 <malloc>
 800651c:	4602      	mov	r2, r0
 800651e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006522:	b920      	cbnz	r0, 800652e <_dtoa_r+0x2e>
 8006524:	21ef      	movs	r1, #239	@ 0xef
 8006526:	4ba8      	ldr	r3, [pc, #672]	@ (80067c8 <_dtoa_r+0x2c8>)
 8006528:	48a8      	ldr	r0, [pc, #672]	@ (80067cc <_dtoa_r+0x2cc>)
 800652a:	f7fe fd5f 	bl	8004fec <__assert_func>
 800652e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006532:	6007      	str	r7, [r0, #0]
 8006534:	60c7      	str	r7, [r0, #12]
 8006536:	f8db 301c 	ldr.w	r3, [fp, #28]
 800653a:	6819      	ldr	r1, [r3, #0]
 800653c:	b159      	cbz	r1, 8006556 <_dtoa_r+0x56>
 800653e:	685a      	ldr	r2, [r3, #4]
 8006540:	2301      	movs	r3, #1
 8006542:	4093      	lsls	r3, r2
 8006544:	604a      	str	r2, [r1, #4]
 8006546:	608b      	str	r3, [r1, #8]
 8006548:	4658      	mov	r0, fp
 800654a:	f000 fe29 	bl	80071a0 <_Bfree>
 800654e:	2200      	movs	r2, #0
 8006550:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006554:	601a      	str	r2, [r3, #0]
 8006556:	1e2b      	subs	r3, r5, #0
 8006558:	bfaf      	iteee	ge
 800655a:	2300      	movge	r3, #0
 800655c:	2201      	movlt	r2, #1
 800655e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006562:	9303      	strlt	r3, [sp, #12]
 8006564:	bfa8      	it	ge
 8006566:	6033      	strge	r3, [r6, #0]
 8006568:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800656c:	4b98      	ldr	r3, [pc, #608]	@ (80067d0 <_dtoa_r+0x2d0>)
 800656e:	bfb8      	it	lt
 8006570:	6032      	strlt	r2, [r6, #0]
 8006572:	ea33 0308 	bics.w	r3, r3, r8
 8006576:	d112      	bne.n	800659e <_dtoa_r+0x9e>
 8006578:	f242 730f 	movw	r3, #9999	@ 0x270f
 800657c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006584:	4323      	orrs	r3, r4
 8006586:	f000 8550 	beq.w	800702a <_dtoa_r+0xb2a>
 800658a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800658c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80067d4 <_dtoa_r+0x2d4>
 8006590:	2b00      	cmp	r3, #0
 8006592:	f000 8552 	beq.w	800703a <_dtoa_r+0xb3a>
 8006596:	f10a 0303 	add.w	r3, sl, #3
 800659a:	f000 bd4c 	b.w	8007036 <_dtoa_r+0xb36>
 800659e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065a2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80065a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065aa:	2200      	movs	r2, #0
 80065ac:	2300      	movs	r3, #0
 80065ae:	f7fa f9fb 	bl	80009a8 <__aeabi_dcmpeq>
 80065b2:	4607      	mov	r7, r0
 80065b4:	b158      	cbz	r0, 80065ce <_dtoa_r+0xce>
 80065b6:	2301      	movs	r3, #1
 80065b8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80065be:	b113      	cbz	r3, 80065c6 <_dtoa_r+0xc6>
 80065c0:	4b85      	ldr	r3, [pc, #532]	@ (80067d8 <_dtoa_r+0x2d8>)
 80065c2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80065c4:	6013      	str	r3, [r2, #0]
 80065c6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80067dc <_dtoa_r+0x2dc>
 80065ca:	f000 bd36 	b.w	800703a <_dtoa_r+0xb3a>
 80065ce:	ab14      	add	r3, sp, #80	@ 0x50
 80065d0:	9301      	str	r3, [sp, #4]
 80065d2:	ab15      	add	r3, sp, #84	@ 0x54
 80065d4:	9300      	str	r3, [sp, #0]
 80065d6:	4658      	mov	r0, fp
 80065d8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80065dc:	f001 f8c8 	bl	8007770 <__d2b>
 80065e0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 80065e4:	4681      	mov	r9, r0
 80065e6:	2e00      	cmp	r6, #0
 80065e8:	d077      	beq.n	80066da <_dtoa_r+0x1da>
 80065ea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80065ee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80065f0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80065f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80065f8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80065fc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006600:	9712      	str	r7, [sp, #72]	@ 0x48
 8006602:	4619      	mov	r1, r3
 8006604:	2200      	movs	r2, #0
 8006606:	4b76      	ldr	r3, [pc, #472]	@ (80067e0 <_dtoa_r+0x2e0>)
 8006608:	f7f9 fdae 	bl	8000168 <__aeabi_dsub>
 800660c:	a368      	add	r3, pc, #416	@ (adr r3, 80067b0 <_dtoa_r+0x2b0>)
 800660e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006612:	f7f9 ff61 	bl	80004d8 <__aeabi_dmul>
 8006616:	a368      	add	r3, pc, #416	@ (adr r3, 80067b8 <_dtoa_r+0x2b8>)
 8006618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800661c:	f7f9 fda6 	bl	800016c <__adddf3>
 8006620:	4604      	mov	r4, r0
 8006622:	4630      	mov	r0, r6
 8006624:	460d      	mov	r5, r1
 8006626:	f7f9 feed 	bl	8000404 <__aeabi_i2d>
 800662a:	a365      	add	r3, pc, #404	@ (adr r3, 80067c0 <_dtoa_r+0x2c0>)
 800662c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006630:	f7f9 ff52 	bl	80004d8 <__aeabi_dmul>
 8006634:	4602      	mov	r2, r0
 8006636:	460b      	mov	r3, r1
 8006638:	4620      	mov	r0, r4
 800663a:	4629      	mov	r1, r5
 800663c:	f7f9 fd96 	bl	800016c <__adddf3>
 8006640:	4604      	mov	r4, r0
 8006642:	460d      	mov	r5, r1
 8006644:	f7fa f9f8 	bl	8000a38 <__aeabi_d2iz>
 8006648:	2200      	movs	r2, #0
 800664a:	4607      	mov	r7, r0
 800664c:	2300      	movs	r3, #0
 800664e:	4620      	mov	r0, r4
 8006650:	4629      	mov	r1, r5
 8006652:	f7fa f9b3 	bl	80009bc <__aeabi_dcmplt>
 8006656:	b140      	cbz	r0, 800666a <_dtoa_r+0x16a>
 8006658:	4638      	mov	r0, r7
 800665a:	f7f9 fed3 	bl	8000404 <__aeabi_i2d>
 800665e:	4622      	mov	r2, r4
 8006660:	462b      	mov	r3, r5
 8006662:	f7fa f9a1 	bl	80009a8 <__aeabi_dcmpeq>
 8006666:	b900      	cbnz	r0, 800666a <_dtoa_r+0x16a>
 8006668:	3f01      	subs	r7, #1
 800666a:	2f16      	cmp	r7, #22
 800666c:	d853      	bhi.n	8006716 <_dtoa_r+0x216>
 800666e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006672:	4b5c      	ldr	r3, [pc, #368]	@ (80067e4 <_dtoa_r+0x2e4>)
 8006674:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f7fa f99e 	bl	80009bc <__aeabi_dcmplt>
 8006680:	2800      	cmp	r0, #0
 8006682:	d04a      	beq.n	800671a <_dtoa_r+0x21a>
 8006684:	2300      	movs	r3, #0
 8006686:	3f01      	subs	r7, #1
 8006688:	930f      	str	r3, [sp, #60]	@ 0x3c
 800668a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800668c:	1b9b      	subs	r3, r3, r6
 800668e:	1e5a      	subs	r2, r3, #1
 8006690:	bf46      	itte	mi
 8006692:	f1c3 0801 	rsbmi	r8, r3, #1
 8006696:	2300      	movmi	r3, #0
 8006698:	f04f 0800 	movpl.w	r8, #0
 800669c:	9209      	str	r2, [sp, #36]	@ 0x24
 800669e:	bf48      	it	mi
 80066a0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80066a2:	2f00      	cmp	r7, #0
 80066a4:	db3b      	blt.n	800671e <_dtoa_r+0x21e>
 80066a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066a8:	970e      	str	r7, [sp, #56]	@ 0x38
 80066aa:	443b      	add	r3, r7
 80066ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80066ae:	2300      	movs	r3, #0
 80066b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80066b2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066b4:	2b09      	cmp	r3, #9
 80066b6:	d866      	bhi.n	8006786 <_dtoa_r+0x286>
 80066b8:	2b05      	cmp	r3, #5
 80066ba:	bfc4      	itt	gt
 80066bc:	3b04      	subgt	r3, #4
 80066be:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80066c0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80066c2:	bfc8      	it	gt
 80066c4:	2400      	movgt	r4, #0
 80066c6:	f1a3 0302 	sub.w	r3, r3, #2
 80066ca:	bfd8      	it	le
 80066cc:	2401      	movle	r4, #1
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	d864      	bhi.n	800679c <_dtoa_r+0x29c>
 80066d2:	e8df f003 	tbb	[pc, r3]
 80066d6:	382b      	.short	0x382b
 80066d8:	5636      	.short	0x5636
 80066da:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80066de:	441e      	add	r6, r3
 80066e0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80066e4:	2b20      	cmp	r3, #32
 80066e6:	bfc1      	itttt	gt
 80066e8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80066ec:	fa08 f803 	lslgt.w	r8, r8, r3
 80066f0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80066f4:	fa24 f303 	lsrgt.w	r3, r4, r3
 80066f8:	bfd6      	itet	le
 80066fa:	f1c3 0320 	rsble	r3, r3, #32
 80066fe:	ea48 0003 	orrgt.w	r0, r8, r3
 8006702:	fa04 f003 	lslle.w	r0, r4, r3
 8006706:	f7f9 fe6d 	bl	80003e4 <__aeabi_ui2d>
 800670a:	2201      	movs	r2, #1
 800670c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006710:	3e01      	subs	r6, #1
 8006712:	9212      	str	r2, [sp, #72]	@ 0x48
 8006714:	e775      	b.n	8006602 <_dtoa_r+0x102>
 8006716:	2301      	movs	r3, #1
 8006718:	e7b6      	b.n	8006688 <_dtoa_r+0x188>
 800671a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800671c:	e7b5      	b.n	800668a <_dtoa_r+0x18a>
 800671e:	427b      	negs	r3, r7
 8006720:	930a      	str	r3, [sp, #40]	@ 0x28
 8006722:	2300      	movs	r3, #0
 8006724:	eba8 0807 	sub.w	r8, r8, r7
 8006728:	930e      	str	r3, [sp, #56]	@ 0x38
 800672a:	e7c2      	b.n	80066b2 <_dtoa_r+0x1b2>
 800672c:	2300      	movs	r3, #0
 800672e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006730:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006732:	2b00      	cmp	r3, #0
 8006734:	dc35      	bgt.n	80067a2 <_dtoa_r+0x2a2>
 8006736:	2301      	movs	r3, #1
 8006738:	461a      	mov	r2, r3
 800673a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800673e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006740:	e00b      	b.n	800675a <_dtoa_r+0x25a>
 8006742:	2301      	movs	r3, #1
 8006744:	e7f3      	b.n	800672e <_dtoa_r+0x22e>
 8006746:	2300      	movs	r3, #0
 8006748:	930b      	str	r3, [sp, #44]	@ 0x2c
 800674a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800674c:	18fb      	adds	r3, r7, r3
 800674e:	9308      	str	r3, [sp, #32]
 8006750:	3301      	adds	r3, #1
 8006752:	2b01      	cmp	r3, #1
 8006754:	9307      	str	r3, [sp, #28]
 8006756:	bfb8      	it	lt
 8006758:	2301      	movlt	r3, #1
 800675a:	2100      	movs	r1, #0
 800675c:	2204      	movs	r2, #4
 800675e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006762:	f102 0514 	add.w	r5, r2, #20
 8006766:	429d      	cmp	r5, r3
 8006768:	d91f      	bls.n	80067aa <_dtoa_r+0x2aa>
 800676a:	6041      	str	r1, [r0, #4]
 800676c:	4658      	mov	r0, fp
 800676e:	f000 fcd7 	bl	8007120 <_Balloc>
 8006772:	4682      	mov	sl, r0
 8006774:	2800      	cmp	r0, #0
 8006776:	d139      	bne.n	80067ec <_dtoa_r+0x2ec>
 8006778:	4602      	mov	r2, r0
 800677a:	f240 11af 	movw	r1, #431	@ 0x1af
 800677e:	4b1a      	ldr	r3, [pc, #104]	@ (80067e8 <_dtoa_r+0x2e8>)
 8006780:	e6d2      	b.n	8006528 <_dtoa_r+0x28>
 8006782:	2301      	movs	r3, #1
 8006784:	e7e0      	b.n	8006748 <_dtoa_r+0x248>
 8006786:	2401      	movs	r4, #1
 8006788:	2300      	movs	r3, #0
 800678a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800678c:	9320      	str	r3, [sp, #128]	@ 0x80
 800678e:	f04f 33ff 	mov.w	r3, #4294967295
 8006792:	2200      	movs	r2, #0
 8006794:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8006798:	2312      	movs	r3, #18
 800679a:	e7d0      	b.n	800673e <_dtoa_r+0x23e>
 800679c:	2301      	movs	r3, #1
 800679e:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067a0:	e7f5      	b.n	800678e <_dtoa_r+0x28e>
 80067a2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067a4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80067a8:	e7d7      	b.n	800675a <_dtoa_r+0x25a>
 80067aa:	3101      	adds	r1, #1
 80067ac:	0052      	lsls	r2, r2, #1
 80067ae:	e7d8      	b.n	8006762 <_dtoa_r+0x262>
 80067b0:	636f4361 	.word	0x636f4361
 80067b4:	3fd287a7 	.word	0x3fd287a7
 80067b8:	8b60c8b3 	.word	0x8b60c8b3
 80067bc:	3fc68a28 	.word	0x3fc68a28
 80067c0:	509f79fb 	.word	0x509f79fb
 80067c4:	3fd34413 	.word	0x3fd34413
 80067c8:	08008a56 	.word	0x08008a56
 80067cc:	08008a6d 	.word	0x08008a6d
 80067d0:	7ff00000 	.word	0x7ff00000
 80067d4:	08008a52 	.word	0x08008a52
 80067d8:	08008a15 	.word	0x08008a15
 80067dc:	08008a14 	.word	0x08008a14
 80067e0:	3ff80000 	.word	0x3ff80000
 80067e4:	08008b68 	.word	0x08008b68
 80067e8:	08008ac5 	.word	0x08008ac5
 80067ec:	f8db 301c 	ldr.w	r3, [fp, #28]
 80067f0:	6018      	str	r0, [r3, #0]
 80067f2:	9b07      	ldr	r3, [sp, #28]
 80067f4:	2b0e      	cmp	r3, #14
 80067f6:	f200 80a4 	bhi.w	8006942 <_dtoa_r+0x442>
 80067fa:	2c00      	cmp	r4, #0
 80067fc:	f000 80a1 	beq.w	8006942 <_dtoa_r+0x442>
 8006800:	2f00      	cmp	r7, #0
 8006802:	dd33      	ble.n	800686c <_dtoa_r+0x36c>
 8006804:	4b86      	ldr	r3, [pc, #536]	@ (8006a20 <_dtoa_r+0x520>)
 8006806:	f007 020f 	and.w	r2, r7, #15
 800680a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800680e:	05f8      	lsls	r0, r7, #23
 8006810:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006814:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006818:	ea4f 1427 	mov.w	r4, r7, asr #4
 800681c:	d516      	bpl.n	800684c <_dtoa_r+0x34c>
 800681e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006822:	4b80      	ldr	r3, [pc, #512]	@ (8006a24 <_dtoa_r+0x524>)
 8006824:	2603      	movs	r6, #3
 8006826:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800682a:	f7f9 ff7f 	bl	800072c <__aeabi_ddiv>
 800682e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006832:	f004 040f 	and.w	r4, r4, #15
 8006836:	4d7b      	ldr	r5, [pc, #492]	@ (8006a24 <_dtoa_r+0x524>)
 8006838:	b954      	cbnz	r4, 8006850 <_dtoa_r+0x350>
 800683a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800683e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006842:	f7f9 ff73 	bl	800072c <__aeabi_ddiv>
 8006846:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800684a:	e028      	b.n	800689e <_dtoa_r+0x39e>
 800684c:	2602      	movs	r6, #2
 800684e:	e7f2      	b.n	8006836 <_dtoa_r+0x336>
 8006850:	07e1      	lsls	r1, r4, #31
 8006852:	d508      	bpl.n	8006866 <_dtoa_r+0x366>
 8006854:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006858:	e9d5 2300 	ldrd	r2, r3, [r5]
 800685c:	f7f9 fe3c 	bl	80004d8 <__aeabi_dmul>
 8006860:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006864:	3601      	adds	r6, #1
 8006866:	1064      	asrs	r4, r4, #1
 8006868:	3508      	adds	r5, #8
 800686a:	e7e5      	b.n	8006838 <_dtoa_r+0x338>
 800686c:	f000 80d2 	beq.w	8006a14 <_dtoa_r+0x514>
 8006870:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006874:	427c      	negs	r4, r7
 8006876:	4b6a      	ldr	r3, [pc, #424]	@ (8006a20 <_dtoa_r+0x520>)
 8006878:	f004 020f 	and.w	r2, r4, #15
 800687c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	f7f9 fe28 	bl	80004d8 <__aeabi_dmul>
 8006888:	2602      	movs	r6, #2
 800688a:	2300      	movs	r3, #0
 800688c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006890:	4d64      	ldr	r5, [pc, #400]	@ (8006a24 <_dtoa_r+0x524>)
 8006892:	1124      	asrs	r4, r4, #4
 8006894:	2c00      	cmp	r4, #0
 8006896:	f040 80b2 	bne.w	80069fe <_dtoa_r+0x4fe>
 800689a:	2b00      	cmp	r3, #0
 800689c:	d1d3      	bne.n	8006846 <_dtoa_r+0x346>
 800689e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80068a2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f000 80b7 	beq.w	8006a18 <_dtoa_r+0x518>
 80068aa:	2200      	movs	r2, #0
 80068ac:	4620      	mov	r0, r4
 80068ae:	4629      	mov	r1, r5
 80068b0:	4b5d      	ldr	r3, [pc, #372]	@ (8006a28 <_dtoa_r+0x528>)
 80068b2:	f7fa f883 	bl	80009bc <__aeabi_dcmplt>
 80068b6:	2800      	cmp	r0, #0
 80068b8:	f000 80ae 	beq.w	8006a18 <_dtoa_r+0x518>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f000 80aa 	beq.w	8006a18 <_dtoa_r+0x518>
 80068c4:	9b08      	ldr	r3, [sp, #32]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	dd37      	ble.n	800693a <_dtoa_r+0x43a>
 80068ca:	1e7b      	subs	r3, r7, #1
 80068cc:	4620      	mov	r0, r4
 80068ce:	9304      	str	r3, [sp, #16]
 80068d0:	2200      	movs	r2, #0
 80068d2:	4629      	mov	r1, r5
 80068d4:	4b55      	ldr	r3, [pc, #340]	@ (8006a2c <_dtoa_r+0x52c>)
 80068d6:	f7f9 fdff 	bl	80004d8 <__aeabi_dmul>
 80068da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068de:	9c08      	ldr	r4, [sp, #32]
 80068e0:	3601      	adds	r6, #1
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7f9 fd8e 	bl	8000404 <__aeabi_i2d>
 80068e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80068ec:	f7f9 fdf4 	bl	80004d8 <__aeabi_dmul>
 80068f0:	2200      	movs	r2, #0
 80068f2:	4b4f      	ldr	r3, [pc, #316]	@ (8006a30 <_dtoa_r+0x530>)
 80068f4:	f7f9 fc3a 	bl	800016c <__adddf3>
 80068f8:	4605      	mov	r5, r0
 80068fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80068fe:	2c00      	cmp	r4, #0
 8006900:	f040 809a 	bne.w	8006a38 <_dtoa_r+0x538>
 8006904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006908:	2200      	movs	r2, #0
 800690a:	4b4a      	ldr	r3, [pc, #296]	@ (8006a34 <_dtoa_r+0x534>)
 800690c:	f7f9 fc2c 	bl	8000168 <__aeabi_dsub>
 8006910:	4602      	mov	r2, r0
 8006912:	460b      	mov	r3, r1
 8006914:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006918:	462a      	mov	r2, r5
 800691a:	4633      	mov	r3, r6
 800691c:	f7fa f86c 	bl	80009f8 <__aeabi_dcmpgt>
 8006920:	2800      	cmp	r0, #0
 8006922:	f040 828e 	bne.w	8006e42 <_dtoa_r+0x942>
 8006926:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800692a:	462a      	mov	r2, r5
 800692c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006930:	f7fa f844 	bl	80009bc <__aeabi_dcmplt>
 8006934:	2800      	cmp	r0, #0
 8006936:	f040 8127 	bne.w	8006b88 <_dtoa_r+0x688>
 800693a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800693e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006942:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006944:	2b00      	cmp	r3, #0
 8006946:	f2c0 8163 	blt.w	8006c10 <_dtoa_r+0x710>
 800694a:	2f0e      	cmp	r7, #14
 800694c:	f300 8160 	bgt.w	8006c10 <_dtoa_r+0x710>
 8006950:	4b33      	ldr	r3, [pc, #204]	@ (8006a20 <_dtoa_r+0x520>)
 8006952:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006956:	e9d3 3400 	ldrd	r3, r4, [r3]
 800695a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800695e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006960:	2b00      	cmp	r3, #0
 8006962:	da03      	bge.n	800696c <_dtoa_r+0x46c>
 8006964:	9b07      	ldr	r3, [sp, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	f340 8100 	ble.w	8006b6c <_dtoa_r+0x66c>
 800696c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006970:	4656      	mov	r6, sl
 8006972:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006976:	4620      	mov	r0, r4
 8006978:	4629      	mov	r1, r5
 800697a:	f7f9 fed7 	bl	800072c <__aeabi_ddiv>
 800697e:	f7fa f85b 	bl	8000a38 <__aeabi_d2iz>
 8006982:	4680      	mov	r8, r0
 8006984:	f7f9 fd3e 	bl	8000404 <__aeabi_i2d>
 8006988:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800698c:	f7f9 fda4 	bl	80004d8 <__aeabi_dmul>
 8006990:	4602      	mov	r2, r0
 8006992:	460b      	mov	r3, r1
 8006994:	4620      	mov	r0, r4
 8006996:	4629      	mov	r1, r5
 8006998:	f7f9 fbe6 	bl	8000168 <__aeabi_dsub>
 800699c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80069a0:	9d07      	ldr	r5, [sp, #28]
 80069a2:	f806 4b01 	strb.w	r4, [r6], #1
 80069a6:	eba6 040a 	sub.w	r4, r6, sl
 80069aa:	42a5      	cmp	r5, r4
 80069ac:	4602      	mov	r2, r0
 80069ae:	460b      	mov	r3, r1
 80069b0:	f040 8116 	bne.w	8006be0 <_dtoa_r+0x6e0>
 80069b4:	f7f9 fbda 	bl	800016c <__adddf3>
 80069b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069bc:	4604      	mov	r4, r0
 80069be:	460d      	mov	r5, r1
 80069c0:	f7fa f81a 	bl	80009f8 <__aeabi_dcmpgt>
 80069c4:	2800      	cmp	r0, #0
 80069c6:	f040 80f8 	bne.w	8006bba <_dtoa_r+0x6ba>
 80069ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069ce:	4620      	mov	r0, r4
 80069d0:	4629      	mov	r1, r5
 80069d2:	f7f9 ffe9 	bl	80009a8 <__aeabi_dcmpeq>
 80069d6:	b118      	cbz	r0, 80069e0 <_dtoa_r+0x4e0>
 80069d8:	f018 0f01 	tst.w	r8, #1
 80069dc:	f040 80ed 	bne.w	8006bba <_dtoa_r+0x6ba>
 80069e0:	4649      	mov	r1, r9
 80069e2:	4658      	mov	r0, fp
 80069e4:	f000 fbdc 	bl	80071a0 <_Bfree>
 80069e8:	2300      	movs	r3, #0
 80069ea:	7033      	strb	r3, [r6, #0]
 80069ec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80069ee:	3701      	adds	r7, #1
 80069f0:	601f      	str	r7, [r3, #0]
 80069f2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f000 8320 	beq.w	800703a <_dtoa_r+0xb3a>
 80069fa:	601e      	str	r6, [r3, #0]
 80069fc:	e31d      	b.n	800703a <_dtoa_r+0xb3a>
 80069fe:	07e2      	lsls	r2, r4, #31
 8006a00:	d505      	bpl.n	8006a0e <_dtoa_r+0x50e>
 8006a02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006a06:	f7f9 fd67 	bl	80004d8 <__aeabi_dmul>
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	1064      	asrs	r4, r4, #1
 8006a10:	3508      	adds	r5, #8
 8006a12:	e73f      	b.n	8006894 <_dtoa_r+0x394>
 8006a14:	2602      	movs	r6, #2
 8006a16:	e742      	b.n	800689e <_dtoa_r+0x39e>
 8006a18:	9c07      	ldr	r4, [sp, #28]
 8006a1a:	9704      	str	r7, [sp, #16]
 8006a1c:	e761      	b.n	80068e2 <_dtoa_r+0x3e2>
 8006a1e:	bf00      	nop
 8006a20:	08008b68 	.word	0x08008b68
 8006a24:	08008b40 	.word	0x08008b40
 8006a28:	3ff00000 	.word	0x3ff00000
 8006a2c:	40240000 	.word	0x40240000
 8006a30:	401c0000 	.word	0x401c0000
 8006a34:	40140000 	.word	0x40140000
 8006a38:	4b70      	ldr	r3, [pc, #448]	@ (8006bfc <_dtoa_r+0x6fc>)
 8006a3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006a3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006a40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006a44:	4454      	add	r4, sl
 8006a46:	2900      	cmp	r1, #0
 8006a48:	d045      	beq.n	8006ad6 <_dtoa_r+0x5d6>
 8006a4a:	2000      	movs	r0, #0
 8006a4c:	496c      	ldr	r1, [pc, #432]	@ (8006c00 <_dtoa_r+0x700>)
 8006a4e:	f7f9 fe6d 	bl	800072c <__aeabi_ddiv>
 8006a52:	4633      	mov	r3, r6
 8006a54:	462a      	mov	r2, r5
 8006a56:	f7f9 fb87 	bl	8000168 <__aeabi_dsub>
 8006a5a:	4656      	mov	r6, sl
 8006a5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a64:	f7f9 ffe8 	bl	8000a38 <__aeabi_d2iz>
 8006a68:	4605      	mov	r5, r0
 8006a6a:	f7f9 fccb 	bl	8000404 <__aeabi_i2d>
 8006a6e:	4602      	mov	r2, r0
 8006a70:	460b      	mov	r3, r1
 8006a72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a76:	f7f9 fb77 	bl	8000168 <__aeabi_dsub>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	460b      	mov	r3, r1
 8006a7e:	3530      	adds	r5, #48	@ 0x30
 8006a80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006a88:	f806 5b01 	strb.w	r5, [r6], #1
 8006a8c:	f7f9 ff96 	bl	80009bc <__aeabi_dcmplt>
 8006a90:	2800      	cmp	r0, #0
 8006a92:	d163      	bne.n	8006b5c <_dtoa_r+0x65c>
 8006a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a98:	2000      	movs	r0, #0
 8006a9a:	495a      	ldr	r1, [pc, #360]	@ (8006c04 <_dtoa_r+0x704>)
 8006a9c:	f7f9 fb64 	bl	8000168 <__aeabi_dsub>
 8006aa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006aa4:	f7f9 ff8a 	bl	80009bc <__aeabi_dcmplt>
 8006aa8:	2800      	cmp	r0, #0
 8006aaa:	f040 8087 	bne.w	8006bbc <_dtoa_r+0x6bc>
 8006aae:	42a6      	cmp	r6, r4
 8006ab0:	f43f af43 	beq.w	800693a <_dtoa_r+0x43a>
 8006ab4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006ab8:	2200      	movs	r2, #0
 8006aba:	4b53      	ldr	r3, [pc, #332]	@ (8006c08 <_dtoa_r+0x708>)
 8006abc:	f7f9 fd0c 	bl	80004d8 <__aeabi_dmul>
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aca:	4b4f      	ldr	r3, [pc, #316]	@ (8006c08 <_dtoa_r+0x708>)
 8006acc:	f7f9 fd04 	bl	80004d8 <__aeabi_dmul>
 8006ad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006ad4:	e7c4      	b.n	8006a60 <_dtoa_r+0x560>
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	f7f9 fcfd 	bl	80004d8 <__aeabi_dmul>
 8006ade:	4656      	mov	r6, sl
 8006ae0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006ae4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006aea:	f7f9 ffa5 	bl	8000a38 <__aeabi_d2iz>
 8006aee:	4605      	mov	r5, r0
 8006af0:	f7f9 fc88 	bl	8000404 <__aeabi_i2d>
 8006af4:	4602      	mov	r2, r0
 8006af6:	460b      	mov	r3, r1
 8006af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006afc:	f7f9 fb34 	bl	8000168 <__aeabi_dsub>
 8006b00:	4602      	mov	r2, r0
 8006b02:	460b      	mov	r3, r1
 8006b04:	3530      	adds	r5, #48	@ 0x30
 8006b06:	f806 5b01 	strb.w	r5, [r6], #1
 8006b0a:	42a6      	cmp	r6, r4
 8006b0c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	d124      	bne.n	8006b60 <_dtoa_r+0x660>
 8006b16:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006b1a:	4b39      	ldr	r3, [pc, #228]	@ (8006c00 <_dtoa_r+0x700>)
 8006b1c:	f7f9 fb26 	bl	800016c <__adddf3>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b28:	f7f9 ff66 	bl	80009f8 <__aeabi_dcmpgt>
 8006b2c:	2800      	cmp	r0, #0
 8006b2e:	d145      	bne.n	8006bbc <_dtoa_r+0x6bc>
 8006b30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006b34:	2000      	movs	r0, #0
 8006b36:	4932      	ldr	r1, [pc, #200]	@ (8006c00 <_dtoa_r+0x700>)
 8006b38:	f7f9 fb16 	bl	8000168 <__aeabi_dsub>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b44:	f7f9 ff3a 	bl	80009bc <__aeabi_dcmplt>
 8006b48:	2800      	cmp	r0, #0
 8006b4a:	f43f aef6 	beq.w	800693a <_dtoa_r+0x43a>
 8006b4e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006b50:	1e73      	subs	r3, r6, #1
 8006b52:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006b54:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006b58:	2b30      	cmp	r3, #48	@ 0x30
 8006b5a:	d0f8      	beq.n	8006b4e <_dtoa_r+0x64e>
 8006b5c:	9f04      	ldr	r7, [sp, #16]
 8006b5e:	e73f      	b.n	80069e0 <_dtoa_r+0x4e0>
 8006b60:	4b29      	ldr	r3, [pc, #164]	@ (8006c08 <_dtoa_r+0x708>)
 8006b62:	f7f9 fcb9 	bl	80004d8 <__aeabi_dmul>
 8006b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006b6a:	e7bc      	b.n	8006ae6 <_dtoa_r+0x5e6>
 8006b6c:	d10c      	bne.n	8006b88 <_dtoa_r+0x688>
 8006b6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006b72:	2200      	movs	r2, #0
 8006b74:	4b25      	ldr	r3, [pc, #148]	@ (8006c0c <_dtoa_r+0x70c>)
 8006b76:	f7f9 fcaf 	bl	80004d8 <__aeabi_dmul>
 8006b7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006b7e:	f7f9 ff31 	bl	80009e4 <__aeabi_dcmpge>
 8006b82:	2800      	cmp	r0, #0
 8006b84:	f000 815b 	beq.w	8006e3e <_dtoa_r+0x93e>
 8006b88:	2400      	movs	r4, #0
 8006b8a:	4625      	mov	r5, r4
 8006b8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006b8e:	4656      	mov	r6, sl
 8006b90:	43db      	mvns	r3, r3
 8006b92:	9304      	str	r3, [sp, #16]
 8006b94:	2700      	movs	r7, #0
 8006b96:	4621      	mov	r1, r4
 8006b98:	4658      	mov	r0, fp
 8006b9a:	f000 fb01 	bl	80071a0 <_Bfree>
 8006b9e:	2d00      	cmp	r5, #0
 8006ba0:	d0dc      	beq.n	8006b5c <_dtoa_r+0x65c>
 8006ba2:	b12f      	cbz	r7, 8006bb0 <_dtoa_r+0x6b0>
 8006ba4:	42af      	cmp	r7, r5
 8006ba6:	d003      	beq.n	8006bb0 <_dtoa_r+0x6b0>
 8006ba8:	4639      	mov	r1, r7
 8006baa:	4658      	mov	r0, fp
 8006bac:	f000 faf8 	bl	80071a0 <_Bfree>
 8006bb0:	4629      	mov	r1, r5
 8006bb2:	4658      	mov	r0, fp
 8006bb4:	f000 faf4 	bl	80071a0 <_Bfree>
 8006bb8:	e7d0      	b.n	8006b5c <_dtoa_r+0x65c>
 8006bba:	9704      	str	r7, [sp, #16]
 8006bbc:	4633      	mov	r3, r6
 8006bbe:	461e      	mov	r6, r3
 8006bc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006bc4:	2a39      	cmp	r2, #57	@ 0x39
 8006bc6:	d107      	bne.n	8006bd8 <_dtoa_r+0x6d8>
 8006bc8:	459a      	cmp	sl, r3
 8006bca:	d1f8      	bne.n	8006bbe <_dtoa_r+0x6be>
 8006bcc:	9a04      	ldr	r2, [sp, #16]
 8006bce:	3201      	adds	r2, #1
 8006bd0:	9204      	str	r2, [sp, #16]
 8006bd2:	2230      	movs	r2, #48	@ 0x30
 8006bd4:	f88a 2000 	strb.w	r2, [sl]
 8006bd8:	781a      	ldrb	r2, [r3, #0]
 8006bda:	3201      	adds	r2, #1
 8006bdc:	701a      	strb	r2, [r3, #0]
 8006bde:	e7bd      	b.n	8006b5c <_dtoa_r+0x65c>
 8006be0:	2200      	movs	r2, #0
 8006be2:	4b09      	ldr	r3, [pc, #36]	@ (8006c08 <_dtoa_r+0x708>)
 8006be4:	f7f9 fc78 	bl	80004d8 <__aeabi_dmul>
 8006be8:	2200      	movs	r2, #0
 8006bea:	2300      	movs	r3, #0
 8006bec:	4604      	mov	r4, r0
 8006bee:	460d      	mov	r5, r1
 8006bf0:	f7f9 feda 	bl	80009a8 <__aeabi_dcmpeq>
 8006bf4:	2800      	cmp	r0, #0
 8006bf6:	f43f aebc 	beq.w	8006972 <_dtoa_r+0x472>
 8006bfa:	e6f1      	b.n	80069e0 <_dtoa_r+0x4e0>
 8006bfc:	08008b68 	.word	0x08008b68
 8006c00:	3fe00000 	.word	0x3fe00000
 8006c04:	3ff00000 	.word	0x3ff00000
 8006c08:	40240000 	.word	0x40240000
 8006c0c:	40140000 	.word	0x40140000
 8006c10:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006c12:	2a00      	cmp	r2, #0
 8006c14:	f000 80db 	beq.w	8006dce <_dtoa_r+0x8ce>
 8006c18:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c1a:	2a01      	cmp	r2, #1
 8006c1c:	f300 80bf 	bgt.w	8006d9e <_dtoa_r+0x89e>
 8006c20:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006c22:	2a00      	cmp	r2, #0
 8006c24:	f000 80b7 	beq.w	8006d96 <_dtoa_r+0x896>
 8006c28:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006c2c:	4646      	mov	r6, r8
 8006c2e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006c30:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c32:	2101      	movs	r1, #1
 8006c34:	441a      	add	r2, r3
 8006c36:	4658      	mov	r0, fp
 8006c38:	4498      	add	r8, r3
 8006c3a:	9209      	str	r2, [sp, #36]	@ 0x24
 8006c3c:	f000 fb64 	bl	8007308 <__i2b>
 8006c40:	4605      	mov	r5, r0
 8006c42:	b15e      	cbz	r6, 8006c5c <_dtoa_r+0x75c>
 8006c44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	dd08      	ble.n	8006c5c <_dtoa_r+0x75c>
 8006c4a:	42b3      	cmp	r3, r6
 8006c4c:	bfa8      	it	ge
 8006c4e:	4633      	movge	r3, r6
 8006c50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006c52:	eba8 0803 	sub.w	r8, r8, r3
 8006c56:	1af6      	subs	r6, r6, r3
 8006c58:	1ad3      	subs	r3, r2, r3
 8006c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c5e:	b1f3      	cbz	r3, 8006c9e <_dtoa_r+0x79e>
 8006c60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f000 80b7 	beq.w	8006dd6 <_dtoa_r+0x8d6>
 8006c68:	b18c      	cbz	r4, 8006c8e <_dtoa_r+0x78e>
 8006c6a:	4629      	mov	r1, r5
 8006c6c:	4622      	mov	r2, r4
 8006c6e:	4658      	mov	r0, fp
 8006c70:	f000 fc08 	bl	8007484 <__pow5mult>
 8006c74:	464a      	mov	r2, r9
 8006c76:	4601      	mov	r1, r0
 8006c78:	4605      	mov	r5, r0
 8006c7a:	4658      	mov	r0, fp
 8006c7c:	f000 fb5a 	bl	8007334 <__multiply>
 8006c80:	4649      	mov	r1, r9
 8006c82:	9004      	str	r0, [sp, #16]
 8006c84:	4658      	mov	r0, fp
 8006c86:	f000 fa8b 	bl	80071a0 <_Bfree>
 8006c8a:	9b04      	ldr	r3, [sp, #16]
 8006c8c:	4699      	mov	r9, r3
 8006c8e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c90:	1b1a      	subs	r2, r3, r4
 8006c92:	d004      	beq.n	8006c9e <_dtoa_r+0x79e>
 8006c94:	4649      	mov	r1, r9
 8006c96:	4658      	mov	r0, fp
 8006c98:	f000 fbf4 	bl	8007484 <__pow5mult>
 8006c9c:	4681      	mov	r9, r0
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4658      	mov	r0, fp
 8006ca2:	f000 fb31 	bl	8007308 <__i2b>
 8006ca6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ca8:	4604      	mov	r4, r0
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	f000 81c9 	beq.w	8007042 <_dtoa_r+0xb42>
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	4601      	mov	r1, r0
 8006cb4:	4658      	mov	r0, fp
 8006cb6:	f000 fbe5 	bl	8007484 <__pow5mult>
 8006cba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006cbc:	4604      	mov	r4, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	f300 808f 	bgt.w	8006de2 <_dtoa_r+0x8e2>
 8006cc4:	9b02      	ldr	r3, [sp, #8]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	f040 8087 	bne.w	8006dda <_dtoa_r+0x8da>
 8006ccc:	9b03      	ldr	r3, [sp, #12]
 8006cce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f040 8083 	bne.w	8006dde <_dtoa_r+0x8de>
 8006cd8:	9b03      	ldr	r3, [sp, #12]
 8006cda:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006cde:	0d1b      	lsrs	r3, r3, #20
 8006ce0:	051b      	lsls	r3, r3, #20
 8006ce2:	b12b      	cbz	r3, 8006cf0 <_dtoa_r+0x7f0>
 8006ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ce6:	f108 0801 	add.w	r8, r8, #1
 8006cea:	3301      	adds	r3, #1
 8006cec:	9309      	str	r3, [sp, #36]	@ 0x24
 8006cee:	2301      	movs	r3, #1
 8006cf0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cf2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 81aa 	beq.w	800704e <_dtoa_r+0xb4e>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006d00:	6918      	ldr	r0, [r3, #16]
 8006d02:	f000 fab5 	bl	8007270 <__hi0bits>
 8006d06:	f1c0 0020 	rsb	r0, r0, #32
 8006d0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d0c:	4418      	add	r0, r3
 8006d0e:	f010 001f 	ands.w	r0, r0, #31
 8006d12:	d071      	beq.n	8006df8 <_dtoa_r+0x8f8>
 8006d14:	f1c0 0320 	rsb	r3, r0, #32
 8006d18:	2b04      	cmp	r3, #4
 8006d1a:	dd65      	ble.n	8006de8 <_dtoa_r+0x8e8>
 8006d1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d1e:	f1c0 001c 	rsb	r0, r0, #28
 8006d22:	4403      	add	r3, r0
 8006d24:	4480      	add	r8, r0
 8006d26:	4406      	add	r6, r0
 8006d28:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d2a:	f1b8 0f00 	cmp.w	r8, #0
 8006d2e:	dd05      	ble.n	8006d3c <_dtoa_r+0x83c>
 8006d30:	4649      	mov	r1, r9
 8006d32:	4642      	mov	r2, r8
 8006d34:	4658      	mov	r0, fp
 8006d36:	f000 fbff 	bl	8007538 <__lshift>
 8006d3a:	4681      	mov	r9, r0
 8006d3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	dd05      	ble.n	8006d4e <_dtoa_r+0x84e>
 8006d42:	4621      	mov	r1, r4
 8006d44:	461a      	mov	r2, r3
 8006d46:	4658      	mov	r0, fp
 8006d48:	f000 fbf6 	bl	8007538 <__lshift>
 8006d4c:	4604      	mov	r4, r0
 8006d4e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d053      	beq.n	8006dfc <_dtoa_r+0x8fc>
 8006d54:	4621      	mov	r1, r4
 8006d56:	4648      	mov	r0, r9
 8006d58:	f000 fc5a 	bl	8007610 <__mcmp>
 8006d5c:	2800      	cmp	r0, #0
 8006d5e:	da4d      	bge.n	8006dfc <_dtoa_r+0x8fc>
 8006d60:	1e7b      	subs	r3, r7, #1
 8006d62:	4649      	mov	r1, r9
 8006d64:	9304      	str	r3, [sp, #16]
 8006d66:	220a      	movs	r2, #10
 8006d68:	2300      	movs	r3, #0
 8006d6a:	4658      	mov	r0, fp
 8006d6c:	f000 fa3a 	bl	80071e4 <__multadd>
 8006d70:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d72:	4681      	mov	r9, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	f000 816c 	beq.w	8007052 <_dtoa_r+0xb52>
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	4629      	mov	r1, r5
 8006d7e:	220a      	movs	r2, #10
 8006d80:	4658      	mov	r0, fp
 8006d82:	f000 fa2f 	bl	80071e4 <__multadd>
 8006d86:	9b08      	ldr	r3, [sp, #32]
 8006d88:	4605      	mov	r5, r0
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	dc61      	bgt.n	8006e52 <_dtoa_r+0x952>
 8006d8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006d90:	2b02      	cmp	r3, #2
 8006d92:	dc3b      	bgt.n	8006e0c <_dtoa_r+0x90c>
 8006d94:	e05d      	b.n	8006e52 <_dtoa_r+0x952>
 8006d96:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006d98:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006d9c:	e746      	b.n	8006c2c <_dtoa_r+0x72c>
 8006d9e:	9b07      	ldr	r3, [sp, #28]
 8006da0:	1e5c      	subs	r4, r3, #1
 8006da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006da4:	42a3      	cmp	r3, r4
 8006da6:	bfbf      	itttt	lt
 8006da8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006daa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8006dac:	1ae3      	sublt	r3, r4, r3
 8006dae:	18d2      	addlt	r2, r2, r3
 8006db0:	bfa8      	it	ge
 8006db2:	1b1c      	subge	r4, r3, r4
 8006db4:	9b07      	ldr	r3, [sp, #28]
 8006db6:	bfbe      	ittt	lt
 8006db8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006dba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8006dbc:	2400      	movlt	r4, #0
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	bfb5      	itete	lt
 8006dc2:	eba8 0603 	sublt.w	r6, r8, r3
 8006dc6:	4646      	movge	r6, r8
 8006dc8:	2300      	movlt	r3, #0
 8006dca:	9b07      	ldrge	r3, [sp, #28]
 8006dcc:	e730      	b.n	8006c30 <_dtoa_r+0x730>
 8006dce:	4646      	mov	r6, r8
 8006dd0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006dd2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006dd4:	e735      	b.n	8006c42 <_dtoa_r+0x742>
 8006dd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006dd8:	e75c      	b.n	8006c94 <_dtoa_r+0x794>
 8006dda:	2300      	movs	r3, #0
 8006ddc:	e788      	b.n	8006cf0 <_dtoa_r+0x7f0>
 8006dde:	9b02      	ldr	r3, [sp, #8]
 8006de0:	e786      	b.n	8006cf0 <_dtoa_r+0x7f0>
 8006de2:	2300      	movs	r3, #0
 8006de4:	930a      	str	r3, [sp, #40]	@ 0x28
 8006de6:	e788      	b.n	8006cfa <_dtoa_r+0x7fa>
 8006de8:	d09f      	beq.n	8006d2a <_dtoa_r+0x82a>
 8006dea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dec:	331c      	adds	r3, #28
 8006dee:	441a      	add	r2, r3
 8006df0:	4498      	add	r8, r3
 8006df2:	441e      	add	r6, r3
 8006df4:	9209      	str	r2, [sp, #36]	@ 0x24
 8006df6:	e798      	b.n	8006d2a <_dtoa_r+0x82a>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	e7f6      	b.n	8006dea <_dtoa_r+0x8ea>
 8006dfc:	9b07      	ldr	r3, [sp, #28]
 8006dfe:	9704      	str	r7, [sp, #16]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	dc20      	bgt.n	8006e46 <_dtoa_r+0x946>
 8006e04:	9308      	str	r3, [sp, #32]
 8006e06:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006e08:	2b02      	cmp	r3, #2
 8006e0a:	dd1e      	ble.n	8006e4a <_dtoa_r+0x94a>
 8006e0c:	9b08      	ldr	r3, [sp, #32]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f47f aebc 	bne.w	8006b8c <_dtoa_r+0x68c>
 8006e14:	4621      	mov	r1, r4
 8006e16:	2205      	movs	r2, #5
 8006e18:	4658      	mov	r0, fp
 8006e1a:	f000 f9e3 	bl	80071e4 <__multadd>
 8006e1e:	4601      	mov	r1, r0
 8006e20:	4604      	mov	r4, r0
 8006e22:	4648      	mov	r0, r9
 8006e24:	f000 fbf4 	bl	8007610 <__mcmp>
 8006e28:	2800      	cmp	r0, #0
 8006e2a:	f77f aeaf 	ble.w	8006b8c <_dtoa_r+0x68c>
 8006e2e:	2331      	movs	r3, #49	@ 0x31
 8006e30:	4656      	mov	r6, sl
 8006e32:	f806 3b01 	strb.w	r3, [r6], #1
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	e6aa      	b.n	8006b94 <_dtoa_r+0x694>
 8006e3e:	9c07      	ldr	r4, [sp, #28]
 8006e40:	9704      	str	r7, [sp, #16]
 8006e42:	4625      	mov	r5, r4
 8006e44:	e7f3      	b.n	8006e2e <_dtoa_r+0x92e>
 8006e46:	9b07      	ldr	r3, [sp, #28]
 8006e48:	9308      	str	r3, [sp, #32]
 8006e4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	f000 8104 	beq.w	800705a <_dtoa_r+0xb5a>
 8006e52:	2e00      	cmp	r6, #0
 8006e54:	dd05      	ble.n	8006e62 <_dtoa_r+0x962>
 8006e56:	4629      	mov	r1, r5
 8006e58:	4632      	mov	r2, r6
 8006e5a:	4658      	mov	r0, fp
 8006e5c:	f000 fb6c 	bl	8007538 <__lshift>
 8006e60:	4605      	mov	r5, r0
 8006e62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d05a      	beq.n	8006f1e <_dtoa_r+0xa1e>
 8006e68:	4658      	mov	r0, fp
 8006e6a:	6869      	ldr	r1, [r5, #4]
 8006e6c:	f000 f958 	bl	8007120 <_Balloc>
 8006e70:	4606      	mov	r6, r0
 8006e72:	b928      	cbnz	r0, 8006e80 <_dtoa_r+0x980>
 8006e74:	4602      	mov	r2, r0
 8006e76:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006e7a:	4b83      	ldr	r3, [pc, #524]	@ (8007088 <_dtoa_r+0xb88>)
 8006e7c:	f7ff bb54 	b.w	8006528 <_dtoa_r+0x28>
 8006e80:	692a      	ldr	r2, [r5, #16]
 8006e82:	f105 010c 	add.w	r1, r5, #12
 8006e86:	3202      	adds	r2, #2
 8006e88:	0092      	lsls	r2, r2, #2
 8006e8a:	300c      	adds	r0, #12
 8006e8c:	f7ff faa1 	bl	80063d2 <memcpy>
 8006e90:	2201      	movs	r2, #1
 8006e92:	4631      	mov	r1, r6
 8006e94:	4658      	mov	r0, fp
 8006e96:	f000 fb4f 	bl	8007538 <__lshift>
 8006e9a:	462f      	mov	r7, r5
 8006e9c:	4605      	mov	r5, r0
 8006e9e:	f10a 0301 	add.w	r3, sl, #1
 8006ea2:	9307      	str	r3, [sp, #28]
 8006ea4:	9b08      	ldr	r3, [sp, #32]
 8006ea6:	4453      	add	r3, sl
 8006ea8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006eaa:	9b02      	ldr	r3, [sp, #8]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006eb2:	9b07      	ldr	r3, [sp, #28]
 8006eb4:	4621      	mov	r1, r4
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	4648      	mov	r0, r9
 8006eba:	9302      	str	r3, [sp, #8]
 8006ebc:	f7ff fa97 	bl	80063ee <quorem>
 8006ec0:	4639      	mov	r1, r7
 8006ec2:	9008      	str	r0, [sp, #32]
 8006ec4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ec8:	4648      	mov	r0, r9
 8006eca:	f000 fba1 	bl	8007610 <__mcmp>
 8006ece:	462a      	mov	r2, r5
 8006ed0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006ed2:	4621      	mov	r1, r4
 8006ed4:	4658      	mov	r0, fp
 8006ed6:	f000 fbb7 	bl	8007648 <__mdiff>
 8006eda:	68c2      	ldr	r2, [r0, #12]
 8006edc:	4606      	mov	r6, r0
 8006ede:	bb02      	cbnz	r2, 8006f22 <_dtoa_r+0xa22>
 8006ee0:	4601      	mov	r1, r0
 8006ee2:	4648      	mov	r0, r9
 8006ee4:	f000 fb94 	bl	8007610 <__mcmp>
 8006ee8:	4602      	mov	r2, r0
 8006eea:	4631      	mov	r1, r6
 8006eec:	4658      	mov	r0, fp
 8006eee:	920c      	str	r2, [sp, #48]	@ 0x30
 8006ef0:	f000 f956 	bl	80071a0 <_Bfree>
 8006ef4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006ef6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006ef8:	9e07      	ldr	r6, [sp, #28]
 8006efa:	ea43 0102 	orr.w	r1, r3, r2
 8006efe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f00:	4319      	orrs	r1, r3
 8006f02:	d110      	bne.n	8006f26 <_dtoa_r+0xa26>
 8006f04:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f08:	d029      	beq.n	8006f5e <_dtoa_r+0xa5e>
 8006f0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	dd02      	ble.n	8006f16 <_dtoa_r+0xa16>
 8006f10:	9b08      	ldr	r3, [sp, #32]
 8006f12:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006f16:	9b02      	ldr	r3, [sp, #8]
 8006f18:	f883 8000 	strb.w	r8, [r3]
 8006f1c:	e63b      	b.n	8006b96 <_dtoa_r+0x696>
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e7bb      	b.n	8006e9a <_dtoa_r+0x99a>
 8006f22:	2201      	movs	r2, #1
 8006f24:	e7e1      	b.n	8006eea <_dtoa_r+0x9ea>
 8006f26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	db04      	blt.n	8006f36 <_dtoa_r+0xa36>
 8006f2c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006f2e:	430b      	orrs	r3, r1
 8006f30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006f32:	430b      	orrs	r3, r1
 8006f34:	d120      	bne.n	8006f78 <_dtoa_r+0xa78>
 8006f36:	2a00      	cmp	r2, #0
 8006f38:	dded      	ble.n	8006f16 <_dtoa_r+0xa16>
 8006f3a:	4649      	mov	r1, r9
 8006f3c:	2201      	movs	r2, #1
 8006f3e:	4658      	mov	r0, fp
 8006f40:	f000 fafa 	bl	8007538 <__lshift>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4681      	mov	r9, r0
 8006f48:	f000 fb62 	bl	8007610 <__mcmp>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	dc03      	bgt.n	8006f58 <_dtoa_r+0xa58>
 8006f50:	d1e1      	bne.n	8006f16 <_dtoa_r+0xa16>
 8006f52:	f018 0f01 	tst.w	r8, #1
 8006f56:	d0de      	beq.n	8006f16 <_dtoa_r+0xa16>
 8006f58:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f5c:	d1d8      	bne.n	8006f10 <_dtoa_r+0xa10>
 8006f5e:	2339      	movs	r3, #57	@ 0x39
 8006f60:	9a02      	ldr	r2, [sp, #8]
 8006f62:	7013      	strb	r3, [r2, #0]
 8006f64:	4633      	mov	r3, r6
 8006f66:	461e      	mov	r6, r3
 8006f68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	2a39      	cmp	r2, #57	@ 0x39
 8006f70:	d052      	beq.n	8007018 <_dtoa_r+0xb18>
 8006f72:	3201      	adds	r2, #1
 8006f74:	701a      	strb	r2, [r3, #0]
 8006f76:	e60e      	b.n	8006b96 <_dtoa_r+0x696>
 8006f78:	2a00      	cmp	r2, #0
 8006f7a:	dd07      	ble.n	8006f8c <_dtoa_r+0xa8c>
 8006f7c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006f80:	d0ed      	beq.n	8006f5e <_dtoa_r+0xa5e>
 8006f82:	9a02      	ldr	r2, [sp, #8]
 8006f84:	f108 0301 	add.w	r3, r8, #1
 8006f88:	7013      	strb	r3, [r2, #0]
 8006f8a:	e604      	b.n	8006b96 <_dtoa_r+0x696>
 8006f8c:	9b07      	ldr	r3, [sp, #28]
 8006f8e:	9a07      	ldr	r2, [sp, #28]
 8006f90:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f96:	4293      	cmp	r3, r2
 8006f98:	d028      	beq.n	8006fec <_dtoa_r+0xaec>
 8006f9a:	4649      	mov	r1, r9
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	220a      	movs	r2, #10
 8006fa0:	4658      	mov	r0, fp
 8006fa2:	f000 f91f 	bl	80071e4 <__multadd>
 8006fa6:	42af      	cmp	r7, r5
 8006fa8:	4681      	mov	r9, r0
 8006faa:	f04f 0300 	mov.w	r3, #0
 8006fae:	f04f 020a 	mov.w	r2, #10
 8006fb2:	4639      	mov	r1, r7
 8006fb4:	4658      	mov	r0, fp
 8006fb6:	d107      	bne.n	8006fc8 <_dtoa_r+0xac8>
 8006fb8:	f000 f914 	bl	80071e4 <__multadd>
 8006fbc:	4607      	mov	r7, r0
 8006fbe:	4605      	mov	r5, r0
 8006fc0:	9b07      	ldr	r3, [sp, #28]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	9307      	str	r3, [sp, #28]
 8006fc6:	e774      	b.n	8006eb2 <_dtoa_r+0x9b2>
 8006fc8:	f000 f90c 	bl	80071e4 <__multadd>
 8006fcc:	4629      	mov	r1, r5
 8006fce:	4607      	mov	r7, r0
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	220a      	movs	r2, #10
 8006fd4:	4658      	mov	r0, fp
 8006fd6:	f000 f905 	bl	80071e4 <__multadd>
 8006fda:	4605      	mov	r5, r0
 8006fdc:	e7f0      	b.n	8006fc0 <_dtoa_r+0xac0>
 8006fde:	9b08      	ldr	r3, [sp, #32]
 8006fe0:	2700      	movs	r7, #0
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	bfcc      	ite	gt
 8006fe6:	461e      	movgt	r6, r3
 8006fe8:	2601      	movle	r6, #1
 8006fea:	4456      	add	r6, sl
 8006fec:	4649      	mov	r1, r9
 8006fee:	2201      	movs	r2, #1
 8006ff0:	4658      	mov	r0, fp
 8006ff2:	f000 faa1 	bl	8007538 <__lshift>
 8006ff6:	4621      	mov	r1, r4
 8006ff8:	4681      	mov	r9, r0
 8006ffa:	f000 fb09 	bl	8007610 <__mcmp>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	dcb0      	bgt.n	8006f64 <_dtoa_r+0xa64>
 8007002:	d102      	bne.n	800700a <_dtoa_r+0xb0a>
 8007004:	f018 0f01 	tst.w	r8, #1
 8007008:	d1ac      	bne.n	8006f64 <_dtoa_r+0xa64>
 800700a:	4633      	mov	r3, r6
 800700c:	461e      	mov	r6, r3
 800700e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007012:	2a30      	cmp	r2, #48	@ 0x30
 8007014:	d0fa      	beq.n	800700c <_dtoa_r+0xb0c>
 8007016:	e5be      	b.n	8006b96 <_dtoa_r+0x696>
 8007018:	459a      	cmp	sl, r3
 800701a:	d1a4      	bne.n	8006f66 <_dtoa_r+0xa66>
 800701c:	9b04      	ldr	r3, [sp, #16]
 800701e:	3301      	adds	r3, #1
 8007020:	9304      	str	r3, [sp, #16]
 8007022:	2331      	movs	r3, #49	@ 0x31
 8007024:	f88a 3000 	strb.w	r3, [sl]
 8007028:	e5b5      	b.n	8006b96 <_dtoa_r+0x696>
 800702a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800702c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800708c <_dtoa_r+0xb8c>
 8007030:	b11b      	cbz	r3, 800703a <_dtoa_r+0xb3a>
 8007032:	f10a 0308 	add.w	r3, sl, #8
 8007036:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007038:	6013      	str	r3, [r2, #0]
 800703a:	4650      	mov	r0, sl
 800703c:	b017      	add	sp, #92	@ 0x5c
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007044:	2b01      	cmp	r3, #1
 8007046:	f77f ae3d 	ble.w	8006cc4 <_dtoa_r+0x7c4>
 800704a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800704c:	930a      	str	r3, [sp, #40]	@ 0x28
 800704e:	2001      	movs	r0, #1
 8007050:	e65b      	b.n	8006d0a <_dtoa_r+0x80a>
 8007052:	9b08      	ldr	r3, [sp, #32]
 8007054:	2b00      	cmp	r3, #0
 8007056:	f77f aed6 	ble.w	8006e06 <_dtoa_r+0x906>
 800705a:	4656      	mov	r6, sl
 800705c:	4621      	mov	r1, r4
 800705e:	4648      	mov	r0, r9
 8007060:	f7ff f9c5 	bl	80063ee <quorem>
 8007064:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	f806 8b01 	strb.w	r8, [r6], #1
 800706e:	eba6 020a 	sub.w	r2, r6, sl
 8007072:	4293      	cmp	r3, r2
 8007074:	ddb3      	ble.n	8006fde <_dtoa_r+0xade>
 8007076:	4649      	mov	r1, r9
 8007078:	2300      	movs	r3, #0
 800707a:	220a      	movs	r2, #10
 800707c:	4658      	mov	r0, fp
 800707e:	f000 f8b1 	bl	80071e4 <__multadd>
 8007082:	4681      	mov	r9, r0
 8007084:	e7ea      	b.n	800705c <_dtoa_r+0xb5c>
 8007086:	bf00      	nop
 8007088:	08008ac5 	.word	0x08008ac5
 800708c:	08008a49 	.word	0x08008a49

08007090 <_free_r>:
 8007090:	b538      	push	{r3, r4, r5, lr}
 8007092:	4605      	mov	r5, r0
 8007094:	2900      	cmp	r1, #0
 8007096:	d040      	beq.n	800711a <_free_r+0x8a>
 8007098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800709c:	1f0c      	subs	r4, r1, #4
 800709e:	2b00      	cmp	r3, #0
 80070a0:	bfb8      	it	lt
 80070a2:	18e4      	addlt	r4, r4, r3
 80070a4:	f7fe f88e 	bl	80051c4 <__malloc_lock>
 80070a8:	4a1c      	ldr	r2, [pc, #112]	@ (800711c <_free_r+0x8c>)
 80070aa:	6813      	ldr	r3, [r2, #0]
 80070ac:	b933      	cbnz	r3, 80070bc <_free_r+0x2c>
 80070ae:	6063      	str	r3, [r4, #4]
 80070b0:	6014      	str	r4, [r2, #0]
 80070b2:	4628      	mov	r0, r5
 80070b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070b8:	f7fe b88a 	b.w	80051d0 <__malloc_unlock>
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d908      	bls.n	80070d2 <_free_r+0x42>
 80070c0:	6820      	ldr	r0, [r4, #0]
 80070c2:	1821      	adds	r1, r4, r0
 80070c4:	428b      	cmp	r3, r1
 80070c6:	bf01      	itttt	eq
 80070c8:	6819      	ldreq	r1, [r3, #0]
 80070ca:	685b      	ldreq	r3, [r3, #4]
 80070cc:	1809      	addeq	r1, r1, r0
 80070ce:	6021      	streq	r1, [r4, #0]
 80070d0:	e7ed      	b.n	80070ae <_free_r+0x1e>
 80070d2:	461a      	mov	r2, r3
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	b10b      	cbz	r3, 80070dc <_free_r+0x4c>
 80070d8:	42a3      	cmp	r3, r4
 80070da:	d9fa      	bls.n	80070d2 <_free_r+0x42>
 80070dc:	6811      	ldr	r1, [r2, #0]
 80070de:	1850      	adds	r0, r2, r1
 80070e0:	42a0      	cmp	r0, r4
 80070e2:	d10b      	bne.n	80070fc <_free_r+0x6c>
 80070e4:	6820      	ldr	r0, [r4, #0]
 80070e6:	4401      	add	r1, r0
 80070e8:	1850      	adds	r0, r2, r1
 80070ea:	4283      	cmp	r3, r0
 80070ec:	6011      	str	r1, [r2, #0]
 80070ee:	d1e0      	bne.n	80070b2 <_free_r+0x22>
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	4408      	add	r0, r1
 80070f6:	6010      	str	r0, [r2, #0]
 80070f8:	6053      	str	r3, [r2, #4]
 80070fa:	e7da      	b.n	80070b2 <_free_r+0x22>
 80070fc:	d902      	bls.n	8007104 <_free_r+0x74>
 80070fe:	230c      	movs	r3, #12
 8007100:	602b      	str	r3, [r5, #0]
 8007102:	e7d6      	b.n	80070b2 <_free_r+0x22>
 8007104:	6820      	ldr	r0, [r4, #0]
 8007106:	1821      	adds	r1, r4, r0
 8007108:	428b      	cmp	r3, r1
 800710a:	bf01      	itttt	eq
 800710c:	6819      	ldreq	r1, [r3, #0]
 800710e:	685b      	ldreq	r3, [r3, #4]
 8007110:	1809      	addeq	r1, r1, r0
 8007112:	6021      	streq	r1, [r4, #0]
 8007114:	6063      	str	r3, [r4, #4]
 8007116:	6054      	str	r4, [r2, #4]
 8007118:	e7cb      	b.n	80070b2 <_free_r+0x22>
 800711a:	bd38      	pop	{r3, r4, r5, pc}
 800711c:	20000370 	.word	0x20000370

08007120 <_Balloc>:
 8007120:	b570      	push	{r4, r5, r6, lr}
 8007122:	69c6      	ldr	r6, [r0, #28]
 8007124:	4604      	mov	r4, r0
 8007126:	460d      	mov	r5, r1
 8007128:	b976      	cbnz	r6, 8007148 <_Balloc+0x28>
 800712a:	2010      	movs	r0, #16
 800712c:	f7fd ff98 	bl	8005060 <malloc>
 8007130:	4602      	mov	r2, r0
 8007132:	61e0      	str	r0, [r4, #28]
 8007134:	b920      	cbnz	r0, 8007140 <_Balloc+0x20>
 8007136:	216b      	movs	r1, #107	@ 0x6b
 8007138:	4b17      	ldr	r3, [pc, #92]	@ (8007198 <_Balloc+0x78>)
 800713a:	4818      	ldr	r0, [pc, #96]	@ (800719c <_Balloc+0x7c>)
 800713c:	f7fd ff56 	bl	8004fec <__assert_func>
 8007140:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007144:	6006      	str	r6, [r0, #0]
 8007146:	60c6      	str	r6, [r0, #12]
 8007148:	69e6      	ldr	r6, [r4, #28]
 800714a:	68f3      	ldr	r3, [r6, #12]
 800714c:	b183      	cbz	r3, 8007170 <_Balloc+0x50>
 800714e:	69e3      	ldr	r3, [r4, #28]
 8007150:	68db      	ldr	r3, [r3, #12]
 8007152:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007156:	b9b8      	cbnz	r0, 8007188 <_Balloc+0x68>
 8007158:	2101      	movs	r1, #1
 800715a:	fa01 f605 	lsl.w	r6, r1, r5
 800715e:	1d72      	adds	r2, r6, #5
 8007160:	4620      	mov	r0, r4
 8007162:	0092      	lsls	r2, r2, #2
 8007164:	f7fd ff68 	bl	8005038 <_calloc_r>
 8007168:	b160      	cbz	r0, 8007184 <_Balloc+0x64>
 800716a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800716e:	e00e      	b.n	800718e <_Balloc+0x6e>
 8007170:	2221      	movs	r2, #33	@ 0x21
 8007172:	2104      	movs	r1, #4
 8007174:	4620      	mov	r0, r4
 8007176:	f7fd ff5f 	bl	8005038 <_calloc_r>
 800717a:	69e3      	ldr	r3, [r4, #28]
 800717c:	60f0      	str	r0, [r6, #12]
 800717e:	68db      	ldr	r3, [r3, #12]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e4      	bne.n	800714e <_Balloc+0x2e>
 8007184:	2000      	movs	r0, #0
 8007186:	bd70      	pop	{r4, r5, r6, pc}
 8007188:	6802      	ldr	r2, [r0, #0]
 800718a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800718e:	2300      	movs	r3, #0
 8007190:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007194:	e7f7      	b.n	8007186 <_Balloc+0x66>
 8007196:	bf00      	nop
 8007198:	08008a56 	.word	0x08008a56
 800719c:	08008ad6 	.word	0x08008ad6

080071a0 <_Bfree>:
 80071a0:	b570      	push	{r4, r5, r6, lr}
 80071a2:	69c6      	ldr	r6, [r0, #28]
 80071a4:	4605      	mov	r5, r0
 80071a6:	460c      	mov	r4, r1
 80071a8:	b976      	cbnz	r6, 80071c8 <_Bfree+0x28>
 80071aa:	2010      	movs	r0, #16
 80071ac:	f7fd ff58 	bl	8005060 <malloc>
 80071b0:	4602      	mov	r2, r0
 80071b2:	61e8      	str	r0, [r5, #28]
 80071b4:	b920      	cbnz	r0, 80071c0 <_Bfree+0x20>
 80071b6:	218f      	movs	r1, #143	@ 0x8f
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <_Bfree+0x3c>)
 80071ba:	4809      	ldr	r0, [pc, #36]	@ (80071e0 <_Bfree+0x40>)
 80071bc:	f7fd ff16 	bl	8004fec <__assert_func>
 80071c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80071c4:	6006      	str	r6, [r0, #0]
 80071c6:	60c6      	str	r6, [r0, #12]
 80071c8:	b13c      	cbz	r4, 80071da <_Bfree+0x3a>
 80071ca:	69eb      	ldr	r3, [r5, #28]
 80071cc:	6862      	ldr	r2, [r4, #4]
 80071ce:	68db      	ldr	r3, [r3, #12]
 80071d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80071d4:	6021      	str	r1, [r4, #0]
 80071d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80071da:	bd70      	pop	{r4, r5, r6, pc}
 80071dc:	08008a56 	.word	0x08008a56
 80071e0:	08008ad6 	.word	0x08008ad6

080071e4 <__multadd>:
 80071e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071e8:	4607      	mov	r7, r0
 80071ea:	460c      	mov	r4, r1
 80071ec:	461e      	mov	r6, r3
 80071ee:	2000      	movs	r0, #0
 80071f0:	690d      	ldr	r5, [r1, #16]
 80071f2:	f101 0c14 	add.w	ip, r1, #20
 80071f6:	f8dc 3000 	ldr.w	r3, [ip]
 80071fa:	3001      	adds	r0, #1
 80071fc:	b299      	uxth	r1, r3
 80071fe:	fb02 6101 	mla	r1, r2, r1, r6
 8007202:	0c1e      	lsrs	r6, r3, #16
 8007204:	0c0b      	lsrs	r3, r1, #16
 8007206:	fb02 3306 	mla	r3, r2, r6, r3
 800720a:	b289      	uxth	r1, r1
 800720c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007210:	4285      	cmp	r5, r0
 8007212:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007216:	f84c 1b04 	str.w	r1, [ip], #4
 800721a:	dcec      	bgt.n	80071f6 <__multadd+0x12>
 800721c:	b30e      	cbz	r6, 8007262 <__multadd+0x7e>
 800721e:	68a3      	ldr	r3, [r4, #8]
 8007220:	42ab      	cmp	r3, r5
 8007222:	dc19      	bgt.n	8007258 <__multadd+0x74>
 8007224:	6861      	ldr	r1, [r4, #4]
 8007226:	4638      	mov	r0, r7
 8007228:	3101      	adds	r1, #1
 800722a:	f7ff ff79 	bl	8007120 <_Balloc>
 800722e:	4680      	mov	r8, r0
 8007230:	b928      	cbnz	r0, 800723e <__multadd+0x5a>
 8007232:	4602      	mov	r2, r0
 8007234:	21ba      	movs	r1, #186	@ 0xba
 8007236:	4b0c      	ldr	r3, [pc, #48]	@ (8007268 <__multadd+0x84>)
 8007238:	480c      	ldr	r0, [pc, #48]	@ (800726c <__multadd+0x88>)
 800723a:	f7fd fed7 	bl	8004fec <__assert_func>
 800723e:	6922      	ldr	r2, [r4, #16]
 8007240:	f104 010c 	add.w	r1, r4, #12
 8007244:	3202      	adds	r2, #2
 8007246:	0092      	lsls	r2, r2, #2
 8007248:	300c      	adds	r0, #12
 800724a:	f7ff f8c2 	bl	80063d2 <memcpy>
 800724e:	4621      	mov	r1, r4
 8007250:	4638      	mov	r0, r7
 8007252:	f7ff ffa5 	bl	80071a0 <_Bfree>
 8007256:	4644      	mov	r4, r8
 8007258:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800725c:	3501      	adds	r5, #1
 800725e:	615e      	str	r6, [r3, #20]
 8007260:	6125      	str	r5, [r4, #16]
 8007262:	4620      	mov	r0, r4
 8007264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007268:	08008ac5 	.word	0x08008ac5
 800726c:	08008ad6 	.word	0x08008ad6

08007270 <__hi0bits>:
 8007270:	4603      	mov	r3, r0
 8007272:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007276:	bf3a      	itte	cc
 8007278:	0403      	lslcc	r3, r0, #16
 800727a:	2010      	movcc	r0, #16
 800727c:	2000      	movcs	r0, #0
 800727e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007282:	bf3c      	itt	cc
 8007284:	021b      	lslcc	r3, r3, #8
 8007286:	3008      	addcc	r0, #8
 8007288:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800728c:	bf3c      	itt	cc
 800728e:	011b      	lslcc	r3, r3, #4
 8007290:	3004      	addcc	r0, #4
 8007292:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007296:	bf3c      	itt	cc
 8007298:	009b      	lslcc	r3, r3, #2
 800729a:	3002      	addcc	r0, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	db05      	blt.n	80072ac <__hi0bits+0x3c>
 80072a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80072a4:	f100 0001 	add.w	r0, r0, #1
 80072a8:	bf08      	it	eq
 80072aa:	2020      	moveq	r0, #32
 80072ac:	4770      	bx	lr

080072ae <__lo0bits>:
 80072ae:	6803      	ldr	r3, [r0, #0]
 80072b0:	4602      	mov	r2, r0
 80072b2:	f013 0007 	ands.w	r0, r3, #7
 80072b6:	d00b      	beq.n	80072d0 <__lo0bits+0x22>
 80072b8:	07d9      	lsls	r1, r3, #31
 80072ba:	d421      	bmi.n	8007300 <__lo0bits+0x52>
 80072bc:	0798      	lsls	r0, r3, #30
 80072be:	bf49      	itett	mi
 80072c0:	085b      	lsrmi	r3, r3, #1
 80072c2:	089b      	lsrpl	r3, r3, #2
 80072c4:	2001      	movmi	r0, #1
 80072c6:	6013      	strmi	r3, [r2, #0]
 80072c8:	bf5c      	itt	pl
 80072ca:	2002      	movpl	r0, #2
 80072cc:	6013      	strpl	r3, [r2, #0]
 80072ce:	4770      	bx	lr
 80072d0:	b299      	uxth	r1, r3
 80072d2:	b909      	cbnz	r1, 80072d8 <__lo0bits+0x2a>
 80072d4:	2010      	movs	r0, #16
 80072d6:	0c1b      	lsrs	r3, r3, #16
 80072d8:	b2d9      	uxtb	r1, r3
 80072da:	b909      	cbnz	r1, 80072e0 <__lo0bits+0x32>
 80072dc:	3008      	adds	r0, #8
 80072de:	0a1b      	lsrs	r3, r3, #8
 80072e0:	0719      	lsls	r1, r3, #28
 80072e2:	bf04      	itt	eq
 80072e4:	091b      	lsreq	r3, r3, #4
 80072e6:	3004      	addeq	r0, #4
 80072e8:	0799      	lsls	r1, r3, #30
 80072ea:	bf04      	itt	eq
 80072ec:	089b      	lsreq	r3, r3, #2
 80072ee:	3002      	addeq	r0, #2
 80072f0:	07d9      	lsls	r1, r3, #31
 80072f2:	d403      	bmi.n	80072fc <__lo0bits+0x4e>
 80072f4:	085b      	lsrs	r3, r3, #1
 80072f6:	f100 0001 	add.w	r0, r0, #1
 80072fa:	d003      	beq.n	8007304 <__lo0bits+0x56>
 80072fc:	6013      	str	r3, [r2, #0]
 80072fe:	4770      	bx	lr
 8007300:	2000      	movs	r0, #0
 8007302:	4770      	bx	lr
 8007304:	2020      	movs	r0, #32
 8007306:	4770      	bx	lr

08007308 <__i2b>:
 8007308:	b510      	push	{r4, lr}
 800730a:	460c      	mov	r4, r1
 800730c:	2101      	movs	r1, #1
 800730e:	f7ff ff07 	bl	8007120 <_Balloc>
 8007312:	4602      	mov	r2, r0
 8007314:	b928      	cbnz	r0, 8007322 <__i2b+0x1a>
 8007316:	f240 1145 	movw	r1, #325	@ 0x145
 800731a:	4b04      	ldr	r3, [pc, #16]	@ (800732c <__i2b+0x24>)
 800731c:	4804      	ldr	r0, [pc, #16]	@ (8007330 <__i2b+0x28>)
 800731e:	f7fd fe65 	bl	8004fec <__assert_func>
 8007322:	2301      	movs	r3, #1
 8007324:	6144      	str	r4, [r0, #20]
 8007326:	6103      	str	r3, [r0, #16]
 8007328:	bd10      	pop	{r4, pc}
 800732a:	bf00      	nop
 800732c:	08008ac5 	.word	0x08008ac5
 8007330:	08008ad6 	.word	0x08008ad6

08007334 <__multiply>:
 8007334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007338:	4614      	mov	r4, r2
 800733a:	690a      	ldr	r2, [r1, #16]
 800733c:	6923      	ldr	r3, [r4, #16]
 800733e:	460f      	mov	r7, r1
 8007340:	429a      	cmp	r2, r3
 8007342:	bfa2      	ittt	ge
 8007344:	4623      	movge	r3, r4
 8007346:	460c      	movge	r4, r1
 8007348:	461f      	movge	r7, r3
 800734a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800734e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007352:	68a3      	ldr	r3, [r4, #8]
 8007354:	6861      	ldr	r1, [r4, #4]
 8007356:	eb0a 0609 	add.w	r6, sl, r9
 800735a:	42b3      	cmp	r3, r6
 800735c:	b085      	sub	sp, #20
 800735e:	bfb8      	it	lt
 8007360:	3101      	addlt	r1, #1
 8007362:	f7ff fedd 	bl	8007120 <_Balloc>
 8007366:	b930      	cbnz	r0, 8007376 <__multiply+0x42>
 8007368:	4602      	mov	r2, r0
 800736a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800736e:	4b43      	ldr	r3, [pc, #268]	@ (800747c <__multiply+0x148>)
 8007370:	4843      	ldr	r0, [pc, #268]	@ (8007480 <__multiply+0x14c>)
 8007372:	f7fd fe3b 	bl	8004fec <__assert_func>
 8007376:	f100 0514 	add.w	r5, r0, #20
 800737a:	462b      	mov	r3, r5
 800737c:	2200      	movs	r2, #0
 800737e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007382:	4543      	cmp	r3, r8
 8007384:	d321      	bcc.n	80073ca <__multiply+0x96>
 8007386:	f107 0114 	add.w	r1, r7, #20
 800738a:	f104 0214 	add.w	r2, r4, #20
 800738e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007392:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007396:	9302      	str	r3, [sp, #8]
 8007398:	1b13      	subs	r3, r2, r4
 800739a:	3b15      	subs	r3, #21
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	3304      	adds	r3, #4
 80073a2:	f104 0715 	add.w	r7, r4, #21
 80073a6:	42ba      	cmp	r2, r7
 80073a8:	bf38      	it	cc
 80073aa:	2304      	movcc	r3, #4
 80073ac:	9301      	str	r3, [sp, #4]
 80073ae:	9b02      	ldr	r3, [sp, #8]
 80073b0:	9103      	str	r1, [sp, #12]
 80073b2:	428b      	cmp	r3, r1
 80073b4:	d80c      	bhi.n	80073d0 <__multiply+0x9c>
 80073b6:	2e00      	cmp	r6, #0
 80073b8:	dd03      	ble.n	80073c2 <__multiply+0x8e>
 80073ba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d05a      	beq.n	8007478 <__multiply+0x144>
 80073c2:	6106      	str	r6, [r0, #16]
 80073c4:	b005      	add	sp, #20
 80073c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073ca:	f843 2b04 	str.w	r2, [r3], #4
 80073ce:	e7d8      	b.n	8007382 <__multiply+0x4e>
 80073d0:	f8b1 a000 	ldrh.w	sl, [r1]
 80073d4:	f1ba 0f00 	cmp.w	sl, #0
 80073d8:	d023      	beq.n	8007422 <__multiply+0xee>
 80073da:	46a9      	mov	r9, r5
 80073dc:	f04f 0c00 	mov.w	ip, #0
 80073e0:	f104 0e14 	add.w	lr, r4, #20
 80073e4:	f85e 7b04 	ldr.w	r7, [lr], #4
 80073e8:	f8d9 3000 	ldr.w	r3, [r9]
 80073ec:	fa1f fb87 	uxth.w	fp, r7
 80073f0:	b29b      	uxth	r3, r3
 80073f2:	fb0a 330b 	mla	r3, sl, fp, r3
 80073f6:	4463      	add	r3, ip
 80073f8:	f8d9 c000 	ldr.w	ip, [r9]
 80073fc:	0c3f      	lsrs	r7, r7, #16
 80073fe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007402:	fb0a c707 	mla	r7, sl, r7, ip
 8007406:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800740a:	b29b      	uxth	r3, r3
 800740c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007410:	4572      	cmp	r2, lr
 8007412:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007416:	f849 3b04 	str.w	r3, [r9], #4
 800741a:	d8e3      	bhi.n	80073e4 <__multiply+0xb0>
 800741c:	9b01      	ldr	r3, [sp, #4]
 800741e:	f845 c003 	str.w	ip, [r5, r3]
 8007422:	9b03      	ldr	r3, [sp, #12]
 8007424:	3104      	adds	r1, #4
 8007426:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800742a:	f1b9 0f00 	cmp.w	r9, #0
 800742e:	d021      	beq.n	8007474 <__multiply+0x140>
 8007430:	46ae      	mov	lr, r5
 8007432:	f04f 0a00 	mov.w	sl, #0
 8007436:	682b      	ldr	r3, [r5, #0]
 8007438:	f104 0c14 	add.w	ip, r4, #20
 800743c:	f8bc b000 	ldrh.w	fp, [ip]
 8007440:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007444:	b29b      	uxth	r3, r3
 8007446:	fb09 770b 	mla	r7, r9, fp, r7
 800744a:	4457      	add	r7, sl
 800744c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007450:	f84e 3b04 	str.w	r3, [lr], #4
 8007454:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007458:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800745c:	f8be 3000 	ldrh.w	r3, [lr]
 8007460:	4562      	cmp	r2, ip
 8007462:	fb09 330a 	mla	r3, r9, sl, r3
 8007466:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800746a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800746e:	d8e5      	bhi.n	800743c <__multiply+0x108>
 8007470:	9f01      	ldr	r7, [sp, #4]
 8007472:	51eb      	str	r3, [r5, r7]
 8007474:	3504      	adds	r5, #4
 8007476:	e79a      	b.n	80073ae <__multiply+0x7a>
 8007478:	3e01      	subs	r6, #1
 800747a:	e79c      	b.n	80073b6 <__multiply+0x82>
 800747c:	08008ac5 	.word	0x08008ac5
 8007480:	08008ad6 	.word	0x08008ad6

08007484 <__pow5mult>:
 8007484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007488:	4615      	mov	r5, r2
 800748a:	f012 0203 	ands.w	r2, r2, #3
 800748e:	4607      	mov	r7, r0
 8007490:	460e      	mov	r6, r1
 8007492:	d007      	beq.n	80074a4 <__pow5mult+0x20>
 8007494:	4c25      	ldr	r4, [pc, #148]	@ (800752c <__pow5mult+0xa8>)
 8007496:	3a01      	subs	r2, #1
 8007498:	2300      	movs	r3, #0
 800749a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800749e:	f7ff fea1 	bl	80071e4 <__multadd>
 80074a2:	4606      	mov	r6, r0
 80074a4:	10ad      	asrs	r5, r5, #2
 80074a6:	d03d      	beq.n	8007524 <__pow5mult+0xa0>
 80074a8:	69fc      	ldr	r4, [r7, #28]
 80074aa:	b97c      	cbnz	r4, 80074cc <__pow5mult+0x48>
 80074ac:	2010      	movs	r0, #16
 80074ae:	f7fd fdd7 	bl	8005060 <malloc>
 80074b2:	4602      	mov	r2, r0
 80074b4:	61f8      	str	r0, [r7, #28]
 80074b6:	b928      	cbnz	r0, 80074c4 <__pow5mult+0x40>
 80074b8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80074bc:	4b1c      	ldr	r3, [pc, #112]	@ (8007530 <__pow5mult+0xac>)
 80074be:	481d      	ldr	r0, [pc, #116]	@ (8007534 <__pow5mult+0xb0>)
 80074c0:	f7fd fd94 	bl	8004fec <__assert_func>
 80074c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80074c8:	6004      	str	r4, [r0, #0]
 80074ca:	60c4      	str	r4, [r0, #12]
 80074cc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80074d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80074d4:	b94c      	cbnz	r4, 80074ea <__pow5mult+0x66>
 80074d6:	f240 2171 	movw	r1, #625	@ 0x271
 80074da:	4638      	mov	r0, r7
 80074dc:	f7ff ff14 	bl	8007308 <__i2b>
 80074e0:	2300      	movs	r3, #0
 80074e2:	4604      	mov	r4, r0
 80074e4:	f8c8 0008 	str.w	r0, [r8, #8]
 80074e8:	6003      	str	r3, [r0, #0]
 80074ea:	f04f 0900 	mov.w	r9, #0
 80074ee:	07eb      	lsls	r3, r5, #31
 80074f0:	d50a      	bpl.n	8007508 <__pow5mult+0x84>
 80074f2:	4631      	mov	r1, r6
 80074f4:	4622      	mov	r2, r4
 80074f6:	4638      	mov	r0, r7
 80074f8:	f7ff ff1c 	bl	8007334 <__multiply>
 80074fc:	4680      	mov	r8, r0
 80074fe:	4631      	mov	r1, r6
 8007500:	4638      	mov	r0, r7
 8007502:	f7ff fe4d 	bl	80071a0 <_Bfree>
 8007506:	4646      	mov	r6, r8
 8007508:	106d      	asrs	r5, r5, #1
 800750a:	d00b      	beq.n	8007524 <__pow5mult+0xa0>
 800750c:	6820      	ldr	r0, [r4, #0]
 800750e:	b938      	cbnz	r0, 8007520 <__pow5mult+0x9c>
 8007510:	4622      	mov	r2, r4
 8007512:	4621      	mov	r1, r4
 8007514:	4638      	mov	r0, r7
 8007516:	f7ff ff0d 	bl	8007334 <__multiply>
 800751a:	6020      	str	r0, [r4, #0]
 800751c:	f8c0 9000 	str.w	r9, [r0]
 8007520:	4604      	mov	r4, r0
 8007522:	e7e4      	b.n	80074ee <__pow5mult+0x6a>
 8007524:	4630      	mov	r0, r6
 8007526:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752a:	bf00      	nop
 800752c:	08008b30 	.word	0x08008b30
 8007530:	08008a56 	.word	0x08008a56
 8007534:	08008ad6 	.word	0x08008ad6

08007538 <__lshift>:
 8007538:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800753c:	460c      	mov	r4, r1
 800753e:	4607      	mov	r7, r0
 8007540:	4691      	mov	r9, r2
 8007542:	6923      	ldr	r3, [r4, #16]
 8007544:	6849      	ldr	r1, [r1, #4]
 8007546:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800754a:	68a3      	ldr	r3, [r4, #8]
 800754c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007550:	f108 0601 	add.w	r6, r8, #1
 8007554:	42b3      	cmp	r3, r6
 8007556:	db0b      	blt.n	8007570 <__lshift+0x38>
 8007558:	4638      	mov	r0, r7
 800755a:	f7ff fde1 	bl	8007120 <_Balloc>
 800755e:	4605      	mov	r5, r0
 8007560:	b948      	cbnz	r0, 8007576 <__lshift+0x3e>
 8007562:	4602      	mov	r2, r0
 8007564:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007568:	4b27      	ldr	r3, [pc, #156]	@ (8007608 <__lshift+0xd0>)
 800756a:	4828      	ldr	r0, [pc, #160]	@ (800760c <__lshift+0xd4>)
 800756c:	f7fd fd3e 	bl	8004fec <__assert_func>
 8007570:	3101      	adds	r1, #1
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	e7ee      	b.n	8007554 <__lshift+0x1c>
 8007576:	2300      	movs	r3, #0
 8007578:	f100 0114 	add.w	r1, r0, #20
 800757c:	f100 0210 	add.w	r2, r0, #16
 8007580:	4618      	mov	r0, r3
 8007582:	4553      	cmp	r3, sl
 8007584:	db33      	blt.n	80075ee <__lshift+0xb6>
 8007586:	6920      	ldr	r0, [r4, #16]
 8007588:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800758c:	f104 0314 	add.w	r3, r4, #20
 8007590:	f019 091f 	ands.w	r9, r9, #31
 8007594:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007598:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800759c:	d02b      	beq.n	80075f6 <__lshift+0xbe>
 800759e:	468a      	mov	sl, r1
 80075a0:	2200      	movs	r2, #0
 80075a2:	f1c9 0e20 	rsb	lr, r9, #32
 80075a6:	6818      	ldr	r0, [r3, #0]
 80075a8:	fa00 f009 	lsl.w	r0, r0, r9
 80075ac:	4310      	orrs	r0, r2
 80075ae:	f84a 0b04 	str.w	r0, [sl], #4
 80075b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80075b6:	459c      	cmp	ip, r3
 80075b8:	fa22 f20e 	lsr.w	r2, r2, lr
 80075bc:	d8f3      	bhi.n	80075a6 <__lshift+0x6e>
 80075be:	ebac 0304 	sub.w	r3, ip, r4
 80075c2:	3b15      	subs	r3, #21
 80075c4:	f023 0303 	bic.w	r3, r3, #3
 80075c8:	3304      	adds	r3, #4
 80075ca:	f104 0015 	add.w	r0, r4, #21
 80075ce:	4584      	cmp	ip, r0
 80075d0:	bf38      	it	cc
 80075d2:	2304      	movcc	r3, #4
 80075d4:	50ca      	str	r2, [r1, r3]
 80075d6:	b10a      	cbz	r2, 80075dc <__lshift+0xa4>
 80075d8:	f108 0602 	add.w	r6, r8, #2
 80075dc:	3e01      	subs	r6, #1
 80075de:	4638      	mov	r0, r7
 80075e0:	4621      	mov	r1, r4
 80075e2:	612e      	str	r6, [r5, #16]
 80075e4:	f7ff fddc 	bl	80071a0 <_Bfree>
 80075e8:	4628      	mov	r0, r5
 80075ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075ee:	f842 0f04 	str.w	r0, [r2, #4]!
 80075f2:	3301      	adds	r3, #1
 80075f4:	e7c5      	b.n	8007582 <__lshift+0x4a>
 80075f6:	3904      	subs	r1, #4
 80075f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80075fc:	459c      	cmp	ip, r3
 80075fe:	f841 2f04 	str.w	r2, [r1, #4]!
 8007602:	d8f9      	bhi.n	80075f8 <__lshift+0xc0>
 8007604:	e7ea      	b.n	80075dc <__lshift+0xa4>
 8007606:	bf00      	nop
 8007608:	08008ac5 	.word	0x08008ac5
 800760c:	08008ad6 	.word	0x08008ad6

08007610 <__mcmp>:
 8007610:	4603      	mov	r3, r0
 8007612:	690a      	ldr	r2, [r1, #16]
 8007614:	6900      	ldr	r0, [r0, #16]
 8007616:	b530      	push	{r4, r5, lr}
 8007618:	1a80      	subs	r0, r0, r2
 800761a:	d10e      	bne.n	800763a <__mcmp+0x2a>
 800761c:	3314      	adds	r3, #20
 800761e:	3114      	adds	r1, #20
 8007620:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007624:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007628:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800762c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007630:	4295      	cmp	r5, r2
 8007632:	d003      	beq.n	800763c <__mcmp+0x2c>
 8007634:	d205      	bcs.n	8007642 <__mcmp+0x32>
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	bd30      	pop	{r4, r5, pc}
 800763c:	42a3      	cmp	r3, r4
 800763e:	d3f3      	bcc.n	8007628 <__mcmp+0x18>
 8007640:	e7fb      	b.n	800763a <__mcmp+0x2a>
 8007642:	2001      	movs	r0, #1
 8007644:	e7f9      	b.n	800763a <__mcmp+0x2a>
	...

08007648 <__mdiff>:
 8007648:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800764c:	4689      	mov	r9, r1
 800764e:	4606      	mov	r6, r0
 8007650:	4611      	mov	r1, r2
 8007652:	4648      	mov	r0, r9
 8007654:	4614      	mov	r4, r2
 8007656:	f7ff ffdb 	bl	8007610 <__mcmp>
 800765a:	1e05      	subs	r5, r0, #0
 800765c:	d112      	bne.n	8007684 <__mdiff+0x3c>
 800765e:	4629      	mov	r1, r5
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff fd5d 	bl	8007120 <_Balloc>
 8007666:	4602      	mov	r2, r0
 8007668:	b928      	cbnz	r0, 8007676 <__mdiff+0x2e>
 800766a:	f240 2137 	movw	r1, #567	@ 0x237
 800766e:	4b3e      	ldr	r3, [pc, #248]	@ (8007768 <__mdiff+0x120>)
 8007670:	483e      	ldr	r0, [pc, #248]	@ (800776c <__mdiff+0x124>)
 8007672:	f7fd fcbb 	bl	8004fec <__assert_func>
 8007676:	2301      	movs	r3, #1
 8007678:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800767c:	4610      	mov	r0, r2
 800767e:	b003      	add	sp, #12
 8007680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007684:	bfbc      	itt	lt
 8007686:	464b      	movlt	r3, r9
 8007688:	46a1      	movlt	r9, r4
 800768a:	4630      	mov	r0, r6
 800768c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007690:	bfba      	itte	lt
 8007692:	461c      	movlt	r4, r3
 8007694:	2501      	movlt	r5, #1
 8007696:	2500      	movge	r5, #0
 8007698:	f7ff fd42 	bl	8007120 <_Balloc>
 800769c:	4602      	mov	r2, r0
 800769e:	b918      	cbnz	r0, 80076a8 <__mdiff+0x60>
 80076a0:	f240 2145 	movw	r1, #581	@ 0x245
 80076a4:	4b30      	ldr	r3, [pc, #192]	@ (8007768 <__mdiff+0x120>)
 80076a6:	e7e3      	b.n	8007670 <__mdiff+0x28>
 80076a8:	f100 0b14 	add.w	fp, r0, #20
 80076ac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80076b0:	f109 0310 	add.w	r3, r9, #16
 80076b4:	60c5      	str	r5, [r0, #12]
 80076b6:	f04f 0c00 	mov.w	ip, #0
 80076ba:	f109 0514 	add.w	r5, r9, #20
 80076be:	46d9      	mov	r9, fp
 80076c0:	6926      	ldr	r6, [r4, #16]
 80076c2:	f104 0e14 	add.w	lr, r4, #20
 80076c6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80076ca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80076ce:	9301      	str	r3, [sp, #4]
 80076d0:	9b01      	ldr	r3, [sp, #4]
 80076d2:	f85e 0b04 	ldr.w	r0, [lr], #4
 80076d6:	f853 af04 	ldr.w	sl, [r3, #4]!
 80076da:	b281      	uxth	r1, r0
 80076dc:	9301      	str	r3, [sp, #4]
 80076de:	fa1f f38a 	uxth.w	r3, sl
 80076e2:	1a5b      	subs	r3, r3, r1
 80076e4:	0c00      	lsrs	r0, r0, #16
 80076e6:	4463      	add	r3, ip
 80076e8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80076ec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80076f6:	4576      	cmp	r6, lr
 80076f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076fc:	f849 3b04 	str.w	r3, [r9], #4
 8007700:	d8e6      	bhi.n	80076d0 <__mdiff+0x88>
 8007702:	1b33      	subs	r3, r6, r4
 8007704:	3b15      	subs	r3, #21
 8007706:	f023 0303 	bic.w	r3, r3, #3
 800770a:	3415      	adds	r4, #21
 800770c:	3304      	adds	r3, #4
 800770e:	42a6      	cmp	r6, r4
 8007710:	bf38      	it	cc
 8007712:	2304      	movcc	r3, #4
 8007714:	441d      	add	r5, r3
 8007716:	445b      	add	r3, fp
 8007718:	461e      	mov	r6, r3
 800771a:	462c      	mov	r4, r5
 800771c:	4544      	cmp	r4, r8
 800771e:	d30e      	bcc.n	800773e <__mdiff+0xf6>
 8007720:	f108 0103 	add.w	r1, r8, #3
 8007724:	1b49      	subs	r1, r1, r5
 8007726:	f021 0103 	bic.w	r1, r1, #3
 800772a:	3d03      	subs	r5, #3
 800772c:	45a8      	cmp	r8, r5
 800772e:	bf38      	it	cc
 8007730:	2100      	movcc	r1, #0
 8007732:	440b      	add	r3, r1
 8007734:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007738:	b199      	cbz	r1, 8007762 <__mdiff+0x11a>
 800773a:	6117      	str	r7, [r2, #16]
 800773c:	e79e      	b.n	800767c <__mdiff+0x34>
 800773e:	46e6      	mov	lr, ip
 8007740:	f854 1b04 	ldr.w	r1, [r4], #4
 8007744:	fa1f fc81 	uxth.w	ip, r1
 8007748:	44f4      	add	ip, lr
 800774a:	0c08      	lsrs	r0, r1, #16
 800774c:	4471      	add	r1, lr
 800774e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007752:	b289      	uxth	r1, r1
 8007754:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007758:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800775c:	f846 1b04 	str.w	r1, [r6], #4
 8007760:	e7dc      	b.n	800771c <__mdiff+0xd4>
 8007762:	3f01      	subs	r7, #1
 8007764:	e7e6      	b.n	8007734 <__mdiff+0xec>
 8007766:	bf00      	nop
 8007768:	08008ac5 	.word	0x08008ac5
 800776c:	08008ad6 	.word	0x08008ad6

08007770 <__d2b>:
 8007770:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007774:	2101      	movs	r1, #1
 8007776:	4690      	mov	r8, r2
 8007778:	4699      	mov	r9, r3
 800777a:	9e08      	ldr	r6, [sp, #32]
 800777c:	f7ff fcd0 	bl	8007120 <_Balloc>
 8007780:	4604      	mov	r4, r0
 8007782:	b930      	cbnz	r0, 8007792 <__d2b+0x22>
 8007784:	4602      	mov	r2, r0
 8007786:	f240 310f 	movw	r1, #783	@ 0x30f
 800778a:	4b23      	ldr	r3, [pc, #140]	@ (8007818 <__d2b+0xa8>)
 800778c:	4823      	ldr	r0, [pc, #140]	@ (800781c <__d2b+0xac>)
 800778e:	f7fd fc2d 	bl	8004fec <__assert_func>
 8007792:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007796:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800779a:	b10d      	cbz	r5, 80077a0 <__d2b+0x30>
 800779c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80077a0:	9301      	str	r3, [sp, #4]
 80077a2:	f1b8 0300 	subs.w	r3, r8, #0
 80077a6:	d024      	beq.n	80077f2 <__d2b+0x82>
 80077a8:	4668      	mov	r0, sp
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	f7ff fd7f 	bl	80072ae <__lo0bits>
 80077b0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80077b4:	b1d8      	cbz	r0, 80077ee <__d2b+0x7e>
 80077b6:	f1c0 0320 	rsb	r3, r0, #32
 80077ba:	fa02 f303 	lsl.w	r3, r2, r3
 80077be:	430b      	orrs	r3, r1
 80077c0:	40c2      	lsrs	r2, r0
 80077c2:	6163      	str	r3, [r4, #20]
 80077c4:	9201      	str	r2, [sp, #4]
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	bf0c      	ite	eq
 80077cc:	2201      	moveq	r2, #1
 80077ce:	2202      	movne	r2, #2
 80077d0:	61a3      	str	r3, [r4, #24]
 80077d2:	6122      	str	r2, [r4, #16]
 80077d4:	b1ad      	cbz	r5, 8007802 <__d2b+0x92>
 80077d6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80077da:	4405      	add	r5, r0
 80077dc:	6035      	str	r5, [r6, #0]
 80077de:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80077e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e4:	6018      	str	r0, [r3, #0]
 80077e6:	4620      	mov	r0, r4
 80077e8:	b002      	add	sp, #8
 80077ea:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 80077ee:	6161      	str	r1, [r4, #20]
 80077f0:	e7e9      	b.n	80077c6 <__d2b+0x56>
 80077f2:	a801      	add	r0, sp, #4
 80077f4:	f7ff fd5b 	bl	80072ae <__lo0bits>
 80077f8:	9b01      	ldr	r3, [sp, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	6163      	str	r3, [r4, #20]
 80077fe:	3020      	adds	r0, #32
 8007800:	e7e7      	b.n	80077d2 <__d2b+0x62>
 8007802:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007806:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800780a:	6030      	str	r0, [r6, #0]
 800780c:	6918      	ldr	r0, [r3, #16]
 800780e:	f7ff fd2f 	bl	8007270 <__hi0bits>
 8007812:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007816:	e7e4      	b.n	80077e2 <__d2b+0x72>
 8007818:	08008ac5 	.word	0x08008ac5
 800781c:	08008ad6 	.word	0x08008ad6

08007820 <__swhatbuf_r>:
 8007820:	b570      	push	{r4, r5, r6, lr}
 8007822:	460c      	mov	r4, r1
 8007824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007828:	4615      	mov	r5, r2
 800782a:	2900      	cmp	r1, #0
 800782c:	461e      	mov	r6, r3
 800782e:	b096      	sub	sp, #88	@ 0x58
 8007830:	da0c      	bge.n	800784c <__swhatbuf_r+0x2c>
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	2100      	movs	r1, #0
 8007836:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800783a:	bf14      	ite	ne
 800783c:	2340      	movne	r3, #64	@ 0x40
 800783e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007842:	2000      	movs	r0, #0
 8007844:	6031      	str	r1, [r6, #0]
 8007846:	602b      	str	r3, [r5, #0]
 8007848:	b016      	add	sp, #88	@ 0x58
 800784a:	bd70      	pop	{r4, r5, r6, pc}
 800784c:	466a      	mov	r2, sp
 800784e:	f000 f849 	bl	80078e4 <_fstat_r>
 8007852:	2800      	cmp	r0, #0
 8007854:	dbed      	blt.n	8007832 <__swhatbuf_r+0x12>
 8007856:	9901      	ldr	r1, [sp, #4]
 8007858:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800785c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007860:	4259      	negs	r1, r3
 8007862:	4159      	adcs	r1, r3
 8007864:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007868:	e7eb      	b.n	8007842 <__swhatbuf_r+0x22>

0800786a <__smakebuf_r>:
 800786a:	898b      	ldrh	r3, [r1, #12]
 800786c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800786e:	079d      	lsls	r5, r3, #30
 8007870:	4606      	mov	r6, r0
 8007872:	460c      	mov	r4, r1
 8007874:	d507      	bpl.n	8007886 <__smakebuf_r+0x1c>
 8007876:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800787a:	6023      	str	r3, [r4, #0]
 800787c:	6123      	str	r3, [r4, #16]
 800787e:	2301      	movs	r3, #1
 8007880:	6163      	str	r3, [r4, #20]
 8007882:	b003      	add	sp, #12
 8007884:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007886:	466a      	mov	r2, sp
 8007888:	ab01      	add	r3, sp, #4
 800788a:	f7ff ffc9 	bl	8007820 <__swhatbuf_r>
 800788e:	9f00      	ldr	r7, [sp, #0]
 8007890:	4605      	mov	r5, r0
 8007892:	4639      	mov	r1, r7
 8007894:	4630      	mov	r0, r6
 8007896:	f7fd fc15 	bl	80050c4 <_malloc_r>
 800789a:	b948      	cbnz	r0, 80078b0 <__smakebuf_r+0x46>
 800789c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a0:	059a      	lsls	r2, r3, #22
 80078a2:	d4ee      	bmi.n	8007882 <__smakebuf_r+0x18>
 80078a4:	f023 0303 	bic.w	r3, r3, #3
 80078a8:	f043 0302 	orr.w	r3, r3, #2
 80078ac:	81a3      	strh	r3, [r4, #12]
 80078ae:	e7e2      	b.n	8007876 <__smakebuf_r+0xc>
 80078b0:	89a3      	ldrh	r3, [r4, #12]
 80078b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80078b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80078ba:	81a3      	strh	r3, [r4, #12]
 80078bc:	9b01      	ldr	r3, [sp, #4]
 80078be:	6020      	str	r0, [r4, #0]
 80078c0:	b15b      	cbz	r3, 80078da <__smakebuf_r+0x70>
 80078c2:	4630      	mov	r0, r6
 80078c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078c8:	f000 f81e 	bl	8007908 <_isatty_r>
 80078cc:	b128      	cbz	r0, 80078da <__smakebuf_r+0x70>
 80078ce:	89a3      	ldrh	r3, [r4, #12]
 80078d0:	f023 0303 	bic.w	r3, r3, #3
 80078d4:	f043 0301 	orr.w	r3, r3, #1
 80078d8:	81a3      	strh	r3, [r4, #12]
 80078da:	89a3      	ldrh	r3, [r4, #12]
 80078dc:	431d      	orrs	r5, r3
 80078de:	81a5      	strh	r5, [r4, #12]
 80078e0:	e7cf      	b.n	8007882 <__smakebuf_r+0x18>
	...

080078e4 <_fstat_r>:
 80078e4:	b538      	push	{r3, r4, r5, lr}
 80078e6:	2300      	movs	r3, #0
 80078e8:	4d06      	ldr	r5, [pc, #24]	@ (8007904 <_fstat_r+0x20>)
 80078ea:	4604      	mov	r4, r0
 80078ec:	4608      	mov	r0, r1
 80078ee:	4611      	mov	r1, r2
 80078f0:	602b      	str	r3, [r5, #0]
 80078f2:	f7f9 fe63 	bl	80015bc <_fstat>
 80078f6:	1c43      	adds	r3, r0, #1
 80078f8:	d102      	bne.n	8007900 <_fstat_r+0x1c>
 80078fa:	682b      	ldr	r3, [r5, #0]
 80078fc:	b103      	cbz	r3, 8007900 <_fstat_r+0x1c>
 80078fe:	6023      	str	r3, [r4, #0]
 8007900:	bd38      	pop	{r3, r4, r5, pc}
 8007902:	bf00      	nop
 8007904:	200004b0 	.word	0x200004b0

08007908 <_isatty_r>:
 8007908:	b538      	push	{r3, r4, r5, lr}
 800790a:	2300      	movs	r3, #0
 800790c:	4d05      	ldr	r5, [pc, #20]	@ (8007924 <_isatty_r+0x1c>)
 800790e:	4604      	mov	r4, r0
 8007910:	4608      	mov	r0, r1
 8007912:	602b      	str	r3, [r5, #0]
 8007914:	f7f9 fe57 	bl	80015c6 <_isatty>
 8007918:	1c43      	adds	r3, r0, #1
 800791a:	d102      	bne.n	8007922 <_isatty_r+0x1a>
 800791c:	682b      	ldr	r3, [r5, #0]
 800791e:	b103      	cbz	r3, 8007922 <_isatty_r+0x1a>
 8007920:	6023      	str	r3, [r4, #0]
 8007922:	bd38      	pop	{r3, r4, r5, pc}
 8007924:	200004b0 	.word	0x200004b0

08007928 <__ascii_mbtowc>:
 8007928:	b082      	sub	sp, #8
 800792a:	b901      	cbnz	r1, 800792e <__ascii_mbtowc+0x6>
 800792c:	a901      	add	r1, sp, #4
 800792e:	b142      	cbz	r2, 8007942 <__ascii_mbtowc+0x1a>
 8007930:	b14b      	cbz	r3, 8007946 <__ascii_mbtowc+0x1e>
 8007932:	7813      	ldrb	r3, [r2, #0]
 8007934:	600b      	str	r3, [r1, #0]
 8007936:	7812      	ldrb	r2, [r2, #0]
 8007938:	1e10      	subs	r0, r2, #0
 800793a:	bf18      	it	ne
 800793c:	2001      	movne	r0, #1
 800793e:	b002      	add	sp, #8
 8007940:	4770      	bx	lr
 8007942:	4610      	mov	r0, r2
 8007944:	e7fb      	b.n	800793e <__ascii_mbtowc+0x16>
 8007946:	f06f 0001 	mvn.w	r0, #1
 800794a:	e7f8      	b.n	800793e <__ascii_mbtowc+0x16>

0800794c <__ascii_wctomb>:
 800794c:	4603      	mov	r3, r0
 800794e:	4608      	mov	r0, r1
 8007950:	b141      	cbz	r1, 8007964 <__ascii_wctomb+0x18>
 8007952:	2aff      	cmp	r2, #255	@ 0xff
 8007954:	d904      	bls.n	8007960 <__ascii_wctomb+0x14>
 8007956:	228a      	movs	r2, #138	@ 0x8a
 8007958:	f04f 30ff 	mov.w	r0, #4294967295
 800795c:	601a      	str	r2, [r3, #0]
 800795e:	4770      	bx	lr
 8007960:	2001      	movs	r0, #1
 8007962:	700a      	strb	r2, [r1, #0]
 8007964:	4770      	bx	lr
	...

08007968 <_init>:
 8007968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800796a:	bf00      	nop
 800796c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800796e:	bc08      	pop	{r3}
 8007970:	469e      	mov	lr, r3
 8007972:	4770      	bx	lr

08007974 <_fini>:
 8007974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007976:	bf00      	nop
 8007978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800797a:	bc08      	pop	{r3}
 800797c:	469e      	mov	lr, r3
 800797e:	4770      	bx	lr
