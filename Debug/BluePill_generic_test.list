
BluePill_generic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f50  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  0800505c  0800505c  0000605c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051e4  080051e4  00007068  2**0
                  CONTENTS
  4 .ARM          00000000  080051e4  080051e4  00007068  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051e4  080051e4  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080051e4  080051e4  000061e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  080051ec  080051ec  000061ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080051f4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000068  0800525c  00007068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002dc  0800525c  000072dc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef22  00000000  00000000  00007091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d2d  00000000  00000000  00015fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  00018ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000090a  00000000  00000000  00019908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b4d6  00000000  00000000  0001a212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f912  00000000  00000000  000356e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008dc2c  00000000  00000000  00044ffa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2c26  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b80  00000000  00000000  000d2c6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  000d67ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08005044 	.word	0x08005044

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08005044 	.word	0x08005044

0800014c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000152:	4b10      	ldr	r3, [pc, #64]	@ (8000194 <MX_DMA_Init+0x48>)
 8000154:	695b      	ldr	r3, [r3, #20]
 8000156:	4a0f      	ldr	r2, [pc, #60]	@ (8000194 <MX_DMA_Init+0x48>)
 8000158:	f043 0301 	orr.w	r3, r3, #1
 800015c:	6153      	str	r3, [r2, #20]
 800015e:	4b0d      	ldr	r3, [pc, #52]	@ (8000194 <MX_DMA_Init+0x48>)
 8000160:	695b      	ldr	r3, [r3, #20]
 8000162:	f003 0301 	and.w	r3, r3, #1
 8000166:	607b      	str	r3, [r7, #4]
 8000168:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 800016a:	2200      	movs	r2, #0
 800016c:	2100      	movs	r1, #0
 800016e:	200e      	movs	r0, #14
 8000170:	f000 fc3f 	bl	80009f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000174:	200e      	movs	r0, #14
 8000176:	f000 fc58 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 800017a:	2200      	movs	r2, #0
 800017c:	2100      	movs	r1, #0
 800017e:	200f      	movs	r0, #15
 8000180:	f000 fc37 	bl	80009f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000184:	200f      	movs	r0, #15
 8000186:	f000 fc50 	bl	8000a2a <HAL_NVIC_EnableIRQ>

}
 800018a:	bf00      	nop
 800018c:	3708      	adds	r7, #8
 800018e:	46bd      	mov	sp, r7
 8000190:	bd80      	pop	{r7, pc}
 8000192:	bf00      	nop
 8000194:	40021000 	.word	0x40021000

08000198 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000198:	b580      	push	{r7, lr}
 800019a:	b088      	sub	sp, #32
 800019c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800019e:	f107 0310 	add.w	r3, r7, #16
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
 80001a6:	605a      	str	r2, [r3, #4]
 80001a8:	609a      	str	r2, [r3, #8]
 80001aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80001ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001b2:	f043 0310 	orr.w	r3, r3, #16
 80001b6:	6193      	str	r3, [r2, #24]
 80001b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	f003 0310 	and.w	r3, r3, #16
 80001c0:	60fb      	str	r3, [r7, #12]
 80001c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80001c4:	4b18      	ldr	r3, [pc, #96]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	4a17      	ldr	r2, [pc, #92]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001ca:	f043 0320 	orr.w	r3, r3, #32
 80001ce:	6193      	str	r3, [r2, #24]
 80001d0:	4b15      	ldr	r3, [pc, #84]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001d2:	699b      	ldr	r3, [r3, #24]
 80001d4:	f003 0320 	and.w	r3, r3, #32
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001dc:	4b12      	ldr	r3, [pc, #72]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001de:	699b      	ldr	r3, [r3, #24]
 80001e0:	4a11      	ldr	r2, [pc, #68]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001e2:	f043 0304 	orr.w	r3, r3, #4
 80001e6:	6193      	str	r3, [r2, #24]
 80001e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000228 <MX_GPIO_Init+0x90>)
 80001ea:	699b      	ldr	r3, [r3, #24]
 80001ec:	f003 0304 	and.w	r3, r3, #4
 80001f0:	607b      	str	r3, [r7, #4]
 80001f2:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80001f4:	2200      	movs	r2, #0
 80001f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80001fa:	480c      	ldr	r0, [pc, #48]	@ (800022c <MX_GPIO_Init+0x94>)
 80001fc:	f001 f860 	bl	80012c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000200:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000204:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000206:	2301      	movs	r3, #1
 8000208:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800020a:	2300      	movs	r3, #0
 800020c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800020e:	2302      	movs	r3, #2
 8000210:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000212:	f107 0310 	add.w	r3, r7, #16
 8000216:	4619      	mov	r1, r3
 8000218:	4804      	ldr	r0, [pc, #16]	@ (800022c <MX_GPIO_Init+0x94>)
 800021a:	f000 fecd 	bl	8000fb8 <HAL_GPIO_Init>

}
 800021e:	bf00      	nop
 8000220:	3720      	adds	r7, #32
 8000222:	46bd      	mov	sp, r7
 8000224:	bd80      	pop	{r7, pc}
 8000226:	bf00      	nop
 8000228:	40021000 	.word	0x40021000
 800022c:	40011000 	.word	0x40011000

08000230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000230:	b580      	push	{r7, lr}
 8000232:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000234:	f000 faa4 	bl	8000780 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000238:	f000 f80a 	bl	8000250 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800023c:	f7ff ffac 	bl	8000198 <MX_GPIO_Init>
  MX_DMA_Init();
 8000240:	f7ff ff84 	bl	800014c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000244:	f000 f9a2 	bl	800058c <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8000248:	f002 fde0 	bl	8002e0c <app_main>
  while (1)
 800024c:	bf00      	nop
 800024e:	e7fd      	b.n	800024c <main+0x1c>

08000250 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b090      	sub	sp, #64	@ 0x40
 8000254:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	f107 0318 	add.w	r3, r7, #24
 800025a:	2228      	movs	r2, #40	@ 0x28
 800025c:	2100      	movs	r1, #0
 800025e:	4618      	mov	r0, r3
 8000260:	f004 f937 	bl	80044d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000264:	1d3b      	adds	r3, r7, #4
 8000266:	2200      	movs	r2, #0
 8000268:	601a      	str	r2, [r3, #0]
 800026a:	605a      	str	r2, [r3, #4]
 800026c:	609a      	str	r2, [r3, #8]
 800026e:	60da      	str	r2, [r3, #12]
 8000270:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000272:	2301      	movs	r3, #1
 8000274:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000276:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800027a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800027c:	2300      	movs	r3, #0
 800027e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000280:	2301      	movs	r3, #1
 8000282:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000284:	2302      	movs	r3, #2
 8000286:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000288:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800028c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800028e:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000292:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000294:	f107 0318 	add.w	r3, r7, #24
 8000298:	4618      	mov	r0, r3
 800029a:	f001 f843 	bl	8001324 <HAL_RCC_OscConfig>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80002a4:	f000 f81b 	bl	80002de <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002a8:	230f      	movs	r3, #15
 80002aa:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002ac:	2302      	movs	r3, #2
 80002ae:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002b0:	2300      	movs	r3, #0
 80002b2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002be:	1d3b      	adds	r3, r7, #4
 80002c0:	2102      	movs	r1, #2
 80002c2:	4618      	mov	r0, r3
 80002c4:	f001 fab0 	bl	8001828 <HAL_RCC_ClockConfig>
 80002c8:	4603      	mov	r3, r0
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d001      	beq.n	80002d2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ce:	f000 f806 	bl	80002de <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80002d2:	f001 fb93 	bl	80019fc <HAL_RCC_EnableCSS>
}
 80002d6:	bf00      	nop
 80002d8:	3740      	adds	r7, #64	@ 0x40
 80002da:	46bd      	mov	sp, r7
 80002dc:	bd80      	pop	{r7, pc}

080002de <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002de:	b480      	push	{r7}
 80002e0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80002e2:	b672      	cpsid	i
}
 80002e4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80002e6:	bf00      	nop
 80002e8:	e7fd      	b.n	80002e6 <Error_Handler+0x8>
	...

080002ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b085      	sub	sp, #20
 80002f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002f2:	4b15      	ldr	r3, [pc, #84]	@ (8000348 <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	4a14      	ldr	r2, [pc, #80]	@ (8000348 <HAL_MspInit+0x5c>)
 80002f8:	f043 0301 	orr.w	r3, r3, #1
 80002fc:	6193      	str	r3, [r2, #24]
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <HAL_MspInit+0x5c>)
 8000300:	699b      	ldr	r3, [r3, #24]
 8000302:	f003 0301 	and.w	r3, r3, #1
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800030a:	4b0f      	ldr	r3, [pc, #60]	@ (8000348 <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	4a0e      	ldr	r2, [pc, #56]	@ (8000348 <HAL_MspInit+0x5c>)
 8000310:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000314:	61d3      	str	r3, [r2, #28]
 8000316:	4b0c      	ldr	r3, [pc, #48]	@ (8000348 <HAL_MspInit+0x5c>)
 8000318:	69db      	ldr	r3, [r3, #28]
 800031a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800031e:	607b      	str	r3, [r7, #4]
 8000320:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000322:	4b0a      	ldr	r3, [pc, #40]	@ (800034c <HAL_MspInit+0x60>)
 8000324:	685b      	ldr	r3, [r3, #4]
 8000326:	60fb      	str	r3, [r7, #12]
 8000328:	68fb      	ldr	r3, [r7, #12]
 800032a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800032e:	60fb      	str	r3, [r7, #12]
 8000330:	68fb      	ldr	r3, [r7, #12]
 8000332:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000336:	60fb      	str	r3, [r7, #12]
 8000338:	4a04      	ldr	r2, [pc, #16]	@ (800034c <HAL_MspInit+0x60>)
 800033a:	68fb      	ldr	r3, [r7, #12]
 800033c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800033e:	bf00      	nop
 8000340:	3714      	adds	r7, #20
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr
 8000348:	40021000 	.word	0x40021000
 800034c:	40010000 	.word	0x40010000

08000350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8000354:	f001 fbe4 	bl	8001b20 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000358:	bf00      	nop
 800035a:	e7fd      	b.n	8000358 <NMI_Handler+0x8>

0800035c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000360:	bf00      	nop
 8000362:	e7fd      	b.n	8000360 <HardFault_Handler+0x4>

08000364 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000364:	b480      	push	{r7}
 8000366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000368:	bf00      	nop
 800036a:	e7fd      	b.n	8000368 <MemManage_Handler+0x4>

0800036c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000370:	bf00      	nop
 8000372:	e7fd      	b.n	8000370 <BusFault_Handler+0x4>

08000374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000378:	bf00      	nop
 800037a:	e7fd      	b.n	8000378 <UsageFault_Handler+0x4>

0800037c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000380:	bf00      	nop
 8000382:	46bd      	mov	sp, r7
 8000384:	bc80      	pop	{r7}
 8000386:	4770      	bx	lr

08000388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	46bd      	mov	sp, r7
 8000390:	bc80      	pop	{r7}
 8000392:	4770      	bx	lr

08000394 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000394:	b480      	push	{r7}
 8000396:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	46bd      	mov	sp, r7
 800039c:	bc80      	pop	{r7}
 800039e:	4770      	bx	lr

080003a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80003a4:	f000 fa32 	bl	800080c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 80003a8:	f002 fe18 	bl	8002fdc <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80003ac:	bf00      	nop
 80003ae:	bd80      	pop	{r7, pc}

080003b0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80003b4:	4802      	ldr	r0, [pc, #8]	@ (80003c0 <DMA1_Channel4_IRQHandler+0x10>)
 80003b6:	f000 fcc1 	bl	8000d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80003ba:	bf00      	nop
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	20000114 	.word	0x20000114

080003c4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80003c8:	4802      	ldr	r0, [pc, #8]	@ (80003d4 <DMA1_Channel5_IRQHandler+0x10>)
 80003ca:	f000 fcb7 	bl	8000d3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80003ce:	bf00      	nop
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	200000d0 	.word	0x200000d0

080003d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b082      	sub	sp, #8
 80003dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80003de:	4806      	ldr	r0, [pc, #24]	@ (80003f8 <USART1_IRQHandler+0x20>)
 80003e0:	f001 fd5e 	bl	8001ea0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getUartInstance();
 80003e4:	f002 fc6c 	bl	8002cc0 <getUartInstance>
 80003e8:	6078      	str	r0, [r7, #4]
  USER_UART_IRQHandler(uart_instance);
 80003ea:	6878      	ldr	r0, [r7, #4]
 80003ec:	f003 fca5 	bl	8003d3a <USER_UART_IRQHandler>

  /* USER CODE END USART1_IRQn 1 */
}
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000088 	.word	0x20000088

080003fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80003fc:	b480      	push	{r7}
 80003fe:	af00      	add	r7, sp, #0
  return 1;
 8000400:	2301      	movs	r3, #1
}
 8000402:	4618      	mov	r0, r3
 8000404:	46bd      	mov	sp, r7
 8000406:	bc80      	pop	{r7}
 8000408:	4770      	bx	lr

0800040a <_kill>:

int _kill(int pid, int sig)
{
 800040a:	b580      	push	{r7, lr}
 800040c:	b082      	sub	sp, #8
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
 8000412:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000414:	f004 f900 	bl	8004618 <__errno>
 8000418:	4603      	mov	r3, r0
 800041a:	2216      	movs	r2, #22
 800041c:	601a      	str	r2, [r3, #0]
  return -1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000422:	4618      	mov	r0, r3
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <_exit>:

void _exit (int status)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	b082      	sub	sp, #8
 800042e:	af00      	add	r7, sp, #0
 8000430:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000432:	f04f 31ff 	mov.w	r1, #4294967295
 8000436:	6878      	ldr	r0, [r7, #4]
 8000438:	f7ff ffe7 	bl	800040a <_kill>
  while (1) {}    /* Make sure we hang here */
 800043c:	bf00      	nop
 800043e:	e7fd      	b.n	800043c <_exit+0x12>

08000440 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	60f8      	str	r0, [r7, #12]
 8000448:	60b9      	str	r1, [r7, #8]
 800044a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]
 8000450:	e00a      	b.n	8000468 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000452:	f3af 8000 	nop.w
 8000456:	4601      	mov	r1, r0
 8000458:	68bb      	ldr	r3, [r7, #8]
 800045a:	1c5a      	adds	r2, r3, #1
 800045c:	60ba      	str	r2, [r7, #8]
 800045e:	b2ca      	uxtb	r2, r1
 8000460:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000462:	697b      	ldr	r3, [r7, #20]
 8000464:	3301      	adds	r3, #1
 8000466:	617b      	str	r3, [r7, #20]
 8000468:	697a      	ldr	r2, [r7, #20]
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	429a      	cmp	r2, r3
 800046e:	dbf0      	blt.n	8000452 <_read+0x12>
  }

  return len;
 8000470:	687b      	ldr	r3, [r7, #4]
}
 8000472:	4618      	mov	r0, r3
 8000474:	3718      	adds	r7, #24
 8000476:	46bd      	mov	sp, r7
 8000478:	bd80      	pop	{r7, pc}

0800047a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800047a:	b580      	push	{r7, lr}
 800047c:	b086      	sub	sp, #24
 800047e:	af00      	add	r7, sp, #0
 8000480:	60f8      	str	r0, [r7, #12]
 8000482:	60b9      	str	r1, [r7, #8]
 8000484:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000486:	2300      	movs	r3, #0
 8000488:	617b      	str	r3, [r7, #20]
 800048a:	e009      	b.n	80004a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800048c:	68bb      	ldr	r3, [r7, #8]
 800048e:	1c5a      	adds	r2, r3, #1
 8000490:	60ba      	str	r2, [r7, #8]
 8000492:	781b      	ldrb	r3, [r3, #0]
 8000494:	4618      	mov	r0, r3
 8000496:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	3301      	adds	r3, #1
 800049e:	617b      	str	r3, [r7, #20]
 80004a0:	697a      	ldr	r2, [r7, #20]
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	429a      	cmp	r2, r3
 80004a6:	dbf1      	blt.n	800048c <_write+0x12>
  }
  return len;
 80004a8:	687b      	ldr	r3, [r7, #4]
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3718      	adds	r7, #24
 80004ae:	46bd      	mov	sp, r7
 80004b0:	bd80      	pop	{r7, pc}

080004b2 <_close>:

int _close(int file)
{
 80004b2:	b480      	push	{r7}
 80004b4:	b083      	sub	sp, #12
 80004b6:	af00      	add	r7, sp, #0
 80004b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80004ba:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004be:	4618      	mov	r0, r3
 80004c0:	370c      	adds	r7, #12
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bc80      	pop	{r7}
 80004c6:	4770      	bx	lr

080004c8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
 80004d0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80004d8:	605a      	str	r2, [r3, #4]
  return 0;
 80004da:	2300      	movs	r3, #0
}
 80004dc:	4618      	mov	r0, r3
 80004de:	370c      	adds	r7, #12
 80004e0:	46bd      	mov	sp, r7
 80004e2:	bc80      	pop	{r7}
 80004e4:	4770      	bx	lr

080004e6 <_isatty>:

int _isatty(int file)
{
 80004e6:	b480      	push	{r7}
 80004e8:	b083      	sub	sp, #12
 80004ea:	af00      	add	r7, sp, #0
 80004ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80004ee:	2301      	movs	r3, #1
}
 80004f0:	4618      	mov	r0, r3
 80004f2:	370c      	adds	r7, #12
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bc80      	pop	{r7}
 80004f8:	4770      	bx	lr

080004fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80004fa:	b480      	push	{r7}
 80004fc:	b085      	sub	sp, #20
 80004fe:	af00      	add	r7, sp, #0
 8000500:	60f8      	str	r0, [r7, #12]
 8000502:	60b9      	str	r1, [r7, #8]
 8000504:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000506:	2300      	movs	r3, #0
}
 8000508:	4618      	mov	r0, r3
 800050a:	3714      	adds	r7, #20
 800050c:	46bd      	mov	sp, r7
 800050e:	bc80      	pop	{r7}
 8000510:	4770      	bx	lr
	...

08000514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b086      	sub	sp, #24
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800051c:	4a14      	ldr	r2, [pc, #80]	@ (8000570 <_sbrk+0x5c>)
 800051e:	4b15      	ldr	r3, [pc, #84]	@ (8000574 <_sbrk+0x60>)
 8000520:	1ad3      	subs	r3, r2, r3
 8000522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000524:	697b      	ldr	r3, [r7, #20]
 8000526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000528:	4b13      	ldr	r3, [pc, #76]	@ (8000578 <_sbrk+0x64>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d102      	bne.n	8000536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000530:	4b11      	ldr	r3, [pc, #68]	@ (8000578 <_sbrk+0x64>)
 8000532:	4a12      	ldr	r2, [pc, #72]	@ (800057c <_sbrk+0x68>)
 8000534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000536:	4b10      	ldr	r3, [pc, #64]	@ (8000578 <_sbrk+0x64>)
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	4413      	add	r3, r2
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	429a      	cmp	r2, r3
 8000542:	d207      	bcs.n	8000554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000544:	f004 f868 	bl	8004618 <__errno>
 8000548:	4603      	mov	r3, r0
 800054a:	220c      	movs	r2, #12
 800054c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800054e:	f04f 33ff 	mov.w	r3, #4294967295
 8000552:	e009      	b.n	8000568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000554:	4b08      	ldr	r3, [pc, #32]	@ (8000578 <_sbrk+0x64>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800055a:	4b07      	ldr	r3, [pc, #28]	@ (8000578 <_sbrk+0x64>)
 800055c:	681a      	ldr	r2, [r3, #0]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	4413      	add	r3, r2
 8000562:	4a05      	ldr	r2, [pc, #20]	@ (8000578 <_sbrk+0x64>)
 8000564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000566:	68fb      	ldr	r3, [r7, #12]
}
 8000568:	4618      	mov	r0, r3
 800056a:	3718      	adds	r7, #24
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20005000 	.word	0x20005000
 8000574:	00000400 	.word	0x00000400
 8000578:	20000084 	.word	0x20000084
 800057c:	200002e0 	.word	0x200002e0

08000580 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000584:	bf00      	nop
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000590:	4b11      	ldr	r3, [pc, #68]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 8000592:	4a12      	ldr	r2, [pc, #72]	@ (80005dc <MX_USART1_UART_Init+0x50>)
 8000594:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000596:	4b10      	ldr	r3, [pc, #64]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 8000598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800059c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b0e      	ldr	r3, [pc, #56]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b0c      	ldr	r3, [pc, #48]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b0b      	ldr	r3, [pc, #44]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b09      	ldr	r3, [pc, #36]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b08      	ldr	r3, [pc, #32]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80005c2:	4805      	ldr	r0, [pc, #20]	@ (80005d8 <MX_USART1_UART_Init+0x4c>)
 80005c4:	f001 fae4 	bl	8001b90 <HAL_UART_Init>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d001      	beq.n	80005d2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80005ce:	f7ff fe86 	bl	80002de <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000088 	.word	0x20000088
 80005dc:	40013800 	.word	0x40013800

080005e0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e8:	f107 0310 	add.w	r3, r7, #16
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a47      	ldr	r2, [pc, #284]	@ (8000718 <HAL_UART_MspInit+0x138>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	f040 8086 	bne.w	800070e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000602:	4b46      	ldr	r3, [pc, #280]	@ (800071c <HAL_UART_MspInit+0x13c>)
 8000604:	699b      	ldr	r3, [r3, #24]
 8000606:	4a45      	ldr	r2, [pc, #276]	@ (800071c <HAL_UART_MspInit+0x13c>)
 8000608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800060c:	6193      	str	r3, [r2, #24]
 800060e:	4b43      	ldr	r3, [pc, #268]	@ (800071c <HAL_UART_MspInit+0x13c>)
 8000610:	699b      	ldr	r3, [r3, #24]
 8000612:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b40      	ldr	r3, [pc, #256]	@ (800071c <HAL_UART_MspInit+0x13c>)
 800061c:	699b      	ldr	r3, [r3, #24]
 800061e:	4a3f      	ldr	r2, [pc, #252]	@ (800071c <HAL_UART_MspInit+0x13c>)
 8000620:	f043 0304 	orr.w	r3, r3, #4
 8000624:	6193      	str	r3, [r2, #24]
 8000626:	4b3d      	ldr	r3, [pc, #244]	@ (800071c <HAL_UART_MspInit+0x13c>)
 8000628:	699b      	ldr	r3, [r3, #24]
 800062a:	f003 0304 	and.w	r3, r3, #4
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000636:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000638:	2302      	movs	r3, #2
 800063a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800063c:	2303      	movs	r3, #3
 800063e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000640:	f107 0310 	add.w	r3, r7, #16
 8000644:	4619      	mov	r1, r3
 8000646:	4836      	ldr	r0, [pc, #216]	@ (8000720 <HAL_UART_MspInit+0x140>)
 8000648:	f000 fcb6 	bl	8000fb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800064c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000650:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000652:	2300      	movs	r3, #0
 8000654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000656:	2300      	movs	r3, #0
 8000658:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800065a:	f107 0310 	add.w	r3, r7, #16
 800065e:	4619      	mov	r1, r3
 8000660:	482f      	ldr	r0, [pc, #188]	@ (8000720 <HAL_UART_MspInit+0x140>)
 8000662:	f000 fca9 	bl	8000fb8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8000666:	4b2f      	ldr	r3, [pc, #188]	@ (8000724 <HAL_UART_MspInit+0x144>)
 8000668:	4a2f      	ldr	r2, [pc, #188]	@ (8000728 <HAL_UART_MspInit+0x148>)
 800066a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800066c:	4b2d      	ldr	r3, [pc, #180]	@ (8000724 <HAL_UART_MspInit+0x144>)
 800066e:	2200      	movs	r2, #0
 8000670:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000672:	4b2c      	ldr	r3, [pc, #176]	@ (8000724 <HAL_UART_MspInit+0x144>)
 8000674:	2200      	movs	r2, #0
 8000676:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000678:	4b2a      	ldr	r3, [pc, #168]	@ (8000724 <HAL_UART_MspInit+0x144>)
 800067a:	2280      	movs	r2, #128	@ 0x80
 800067c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800067e:	4b29      	ldr	r3, [pc, #164]	@ (8000724 <HAL_UART_MspInit+0x144>)
 8000680:	2200      	movs	r2, #0
 8000682:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000684:	4b27      	ldr	r3, [pc, #156]	@ (8000724 <HAL_UART_MspInit+0x144>)
 8000686:	2200      	movs	r2, #0
 8000688:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800068a:	4b26      	ldr	r3, [pc, #152]	@ (8000724 <HAL_UART_MspInit+0x144>)
 800068c:	2200      	movs	r2, #0
 800068e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000690:	4b24      	ldr	r3, [pc, #144]	@ (8000724 <HAL_UART_MspInit+0x144>)
 8000692:	2200      	movs	r2, #0
 8000694:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000696:	4823      	ldr	r0, [pc, #140]	@ (8000724 <HAL_UART_MspInit+0x144>)
 8000698:	f000 f9e2 	bl	8000a60 <HAL_DMA_Init>
 800069c:	4603      	mov	r3, r0
 800069e:	2b00      	cmp	r3, #0
 80006a0:	d001      	beq.n	80006a6 <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80006a2:	f7ff fe1c 	bl	80002de <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000724 <HAL_UART_MspInit+0x144>)
 80006aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006ac:	4a1d      	ldr	r2, [pc, #116]	@ (8000724 <HAL_UART_MspInit+0x144>)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80006b2:	4b1e      	ldr	r3, [pc, #120]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006b4:	4a1e      	ldr	r2, [pc, #120]	@ (8000730 <HAL_UART_MspInit+0x150>)
 80006b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80006b8:	4b1c      	ldr	r3, [pc, #112]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006ba:	2210      	movs	r2, #16
 80006bc:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80006be:	4b1b      	ldr	r3, [pc, #108]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80006c4:	4b19      	ldr	r3, [pc, #100]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006c6:	2280      	movs	r2, #128	@ 0x80
 80006c8:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80006ca:	4b18      	ldr	r3, [pc, #96]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80006d0:	4b16      	ldr	r3, [pc, #88]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80006d6:	4b15      	ldr	r3, [pc, #84]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80006dc:	4b13      	ldr	r3, [pc, #76]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80006e2:	4812      	ldr	r0, [pc, #72]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006e4:	f000 f9bc 	bl	8000a60 <HAL_DMA_Init>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80006ee:	f7ff fdf6 	bl	80002de <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	4a0d      	ldr	r2, [pc, #52]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006f6:	639a      	str	r2, [r3, #56]	@ 0x38
 80006f8:	4a0c      	ldr	r2, [pc, #48]	@ (800072c <HAL_UART_MspInit+0x14c>)
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2025      	movs	r0, #37	@ 0x25
 8000704:	f000 f975 	bl	80009f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000708:	2025      	movs	r0, #37	@ 0x25
 800070a:	f000 f98e 	bl	8000a2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800070e:	bf00      	nop
 8000710:	3720      	adds	r7, #32
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}
 8000716:	bf00      	nop
 8000718:	40013800 	.word	0x40013800
 800071c:	40021000 	.word	0x40021000
 8000720:	40010800 	.word	0x40010800
 8000724:	200000d0 	.word	0x200000d0
 8000728:	40020058 	.word	0x40020058
 800072c:	20000114 	.word	0x20000114
 8000730:	40020044 	.word	0x40020044

08000734 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ff24 	bl	8000580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480b      	ldr	r0, [pc, #44]	@ (8000768 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800073a:	490c      	ldr	r1, [pc, #48]	@ (800076c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800073c:	4a0c      	ldr	r2, [pc, #48]	@ (8000770 <LoopFillZerobss+0x16>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a09      	ldr	r2, [pc, #36]	@ (8000774 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000750:	4c09      	ldr	r4, [pc, #36]	@ (8000778 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f003 ff61 	bl	8004624 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000762:	f7ff fd65 	bl	8000230 <main>
  bx lr
 8000766:	4770      	bx	lr
  ldr r0, =_sdata
 8000768:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800076c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000770:	080051f4 	.word	0x080051f4
  ldr r2, =_sbss
 8000774:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000778:	200002dc 	.word	0x200002dc

0800077c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800077c:	e7fe      	b.n	800077c <ADC1_2_IRQHandler>
	...

08000780 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000784:	4b08      	ldr	r3, [pc, #32]	@ (80007a8 <HAL_Init+0x28>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	4a07      	ldr	r2, [pc, #28]	@ (80007a8 <HAL_Init+0x28>)
 800078a:	f043 0310 	orr.w	r3, r3, #16
 800078e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000790:	2003      	movs	r0, #3
 8000792:	f000 f923 	bl	80009dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000796:	200f      	movs	r0, #15
 8000798:	f000 f808 	bl	80007ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800079c:	f7ff fda6 	bl	80002ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a0:	2300      	movs	r3, #0
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40022000 	.word	0x40022000

080007ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b4:	4b12      	ldr	r3, [pc, #72]	@ (8000800 <HAL_InitTick+0x54>)
 80007b6:	681a      	ldr	r2, [r3, #0]
 80007b8:	4b12      	ldr	r3, [pc, #72]	@ (8000804 <HAL_InitTick+0x58>)
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	4619      	mov	r1, r3
 80007be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80007c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 f93b 	bl	8000a46 <HAL_SYSTICK_Config>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00e      	b.n	80007f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	d80a      	bhi.n	80007f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e0:	2200      	movs	r2, #0
 80007e2:	6879      	ldr	r1, [r7, #4]
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f000 f903 	bl	80009f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007ec:	4a06      	ldr	r2, [pc, #24]	@ (8000808 <HAL_InitTick+0x5c>)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007f2:	2300      	movs	r3, #0
 80007f4:	e000      	b.n	80007f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007f6:	2301      	movs	r3, #1
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3708      	adds	r7, #8
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000000 	.word	0x20000000
 8000804:	20000008 	.word	0x20000008
 8000808:	20000004 	.word	0x20000004

0800080c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000810:	4b05      	ldr	r3, [pc, #20]	@ (8000828 <HAL_IncTick+0x1c>)
 8000812:	781b      	ldrb	r3, [r3, #0]
 8000814:	461a      	mov	r2, r3
 8000816:	4b05      	ldr	r3, [pc, #20]	@ (800082c <HAL_IncTick+0x20>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	4413      	add	r3, r2
 800081c:	4a03      	ldr	r2, [pc, #12]	@ (800082c <HAL_IncTick+0x20>)
 800081e:	6013      	str	r3, [r2, #0]
}
 8000820:	bf00      	nop
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000008 	.word	0x20000008
 800082c:	20000158 	.word	0x20000158

08000830 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  return uwTick;
 8000834:	4b02      	ldr	r3, [pc, #8]	@ (8000840 <HAL_GetTick+0x10>)
 8000836:	681b      	ldr	r3, [r3, #0]
}
 8000838:	4618      	mov	r0, r3
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr
 8000840:	20000158 	.word	0x20000158

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	db0b      	blt.n	80008d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ba:	79fb      	ldrb	r3, [r7, #7]
 80008bc:	f003 021f 	and.w	r2, r3, #31
 80008c0:	4906      	ldr	r1, [pc, #24]	@ (80008dc <__NVIC_EnableIRQ+0x34>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	095b      	lsrs	r3, r3, #5
 80008c8:	2001      	movs	r0, #1
 80008ca:	fa00 f202 	lsl.w	r2, r0, r2
 80008ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008d2:	bf00      	nop
 80008d4:	370c      	adds	r7, #12
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bc80      	pop	{r7}
 80008da:	4770      	bx	lr
 80008dc:	e000e100 	.word	0xe000e100

080008e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	4603      	mov	r3, r0
 80008e8:	6039      	str	r1, [r7, #0]
 80008ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	db0a      	blt.n	800090a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	b2da      	uxtb	r2, r3
 80008f8:	490c      	ldr	r1, [pc, #48]	@ (800092c <__NVIC_SetPriority+0x4c>)
 80008fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fe:	0112      	lsls	r2, r2, #4
 8000900:	b2d2      	uxtb	r2, r2
 8000902:	440b      	add	r3, r1
 8000904:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000908:	e00a      	b.n	8000920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	b2da      	uxtb	r2, r3
 800090e:	4908      	ldr	r1, [pc, #32]	@ (8000930 <__NVIC_SetPriority+0x50>)
 8000910:	79fb      	ldrb	r3, [r7, #7]
 8000912:	f003 030f 	and.w	r3, r3, #15
 8000916:	3b04      	subs	r3, #4
 8000918:	0112      	lsls	r2, r2, #4
 800091a:	b2d2      	uxtb	r2, r2
 800091c:	440b      	add	r3, r1
 800091e:	761a      	strb	r2, [r3, #24]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr
 800092a:	bf00      	nop
 800092c:	e000e100 	.word	0xe000e100
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000934:	b480      	push	{r7}
 8000936:	b089      	sub	sp, #36	@ 0x24
 8000938:	af00      	add	r7, sp, #0
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	f003 0307 	and.w	r3, r3, #7
 8000946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000948:	69fb      	ldr	r3, [r7, #28]
 800094a:	f1c3 0307 	rsb	r3, r3, #7
 800094e:	2b04      	cmp	r3, #4
 8000950:	bf28      	it	cs
 8000952:	2304      	movcs	r3, #4
 8000954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000956:	69fb      	ldr	r3, [r7, #28]
 8000958:	3304      	adds	r3, #4
 800095a:	2b06      	cmp	r3, #6
 800095c:	d902      	bls.n	8000964 <NVIC_EncodePriority+0x30>
 800095e:	69fb      	ldr	r3, [r7, #28]
 8000960:	3b03      	subs	r3, #3
 8000962:	e000      	b.n	8000966 <NVIC_EncodePriority+0x32>
 8000964:	2300      	movs	r3, #0
 8000966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000968:	f04f 32ff 	mov.w	r2, #4294967295
 800096c:	69bb      	ldr	r3, [r7, #24]
 800096e:	fa02 f303 	lsl.w	r3, r2, r3
 8000972:	43da      	mvns	r2, r3
 8000974:	68bb      	ldr	r3, [r7, #8]
 8000976:	401a      	ands	r2, r3
 8000978:	697b      	ldr	r3, [r7, #20]
 800097a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800097c:	f04f 31ff 	mov.w	r1, #4294967295
 8000980:	697b      	ldr	r3, [r7, #20]
 8000982:	fa01 f303 	lsl.w	r3, r1, r3
 8000986:	43d9      	mvns	r1, r3
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800098c:	4313      	orrs	r3, r2
         );
}
 800098e:	4618      	mov	r0, r3
 8000990:	3724      	adds	r7, #36	@ 0x24
 8000992:	46bd      	mov	sp, r7
 8000994:	bc80      	pop	{r7}
 8000996:	4770      	bx	lr

08000998 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	3b01      	subs	r3, #1
 80009a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80009a8:	d301      	bcc.n	80009ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009aa:	2301      	movs	r3, #1
 80009ac:	e00f      	b.n	80009ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009ae:	4a0a      	ldr	r2, [pc, #40]	@ (80009d8 <SysTick_Config+0x40>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009b6:	210f      	movs	r1, #15
 80009b8:	f04f 30ff 	mov.w	r0, #4294967295
 80009bc:	f7ff ff90 	bl	80008e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009c0:	4b05      	ldr	r3, [pc, #20]	@ (80009d8 <SysTick_Config+0x40>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009c6:	4b04      	ldr	r3, [pc, #16]	@ (80009d8 <SysTick_Config+0x40>)
 80009c8:	2207      	movs	r2, #7
 80009ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009cc:	2300      	movs	r3, #0
}
 80009ce:	4618      	mov	r0, r3
 80009d0:	3708      	adds	r7, #8
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	e000e010 	.word	0xe000e010

080009dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009e4:	6878      	ldr	r0, [r7, #4]
 80009e6:	f7ff ff2d 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009ea:	bf00      	nop
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b086      	sub	sp, #24
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	4603      	mov	r3, r0
 80009fa:	60b9      	str	r1, [r7, #8]
 80009fc:	607a      	str	r2, [r7, #4]
 80009fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a00:	2300      	movs	r3, #0
 8000a02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a04:	f7ff ff42 	bl	800088c <__NVIC_GetPriorityGrouping>
 8000a08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a0a:	687a      	ldr	r2, [r7, #4]
 8000a0c:	68b9      	ldr	r1, [r7, #8]
 8000a0e:	6978      	ldr	r0, [r7, #20]
 8000a10:	f7ff ff90 	bl	8000934 <NVIC_EncodePriority>
 8000a14:	4602      	mov	r2, r0
 8000a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a1a:	4611      	mov	r1, r2
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff ff5f 	bl	80008e0 <__NVIC_SetPriority>
}
 8000a22:	bf00      	nop
 8000a24:	3718      	adds	r7, #24
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}

08000a2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2a:	b580      	push	{r7, lr}
 8000a2c:	b082      	sub	sp, #8
 8000a2e:	af00      	add	r7, sp, #0
 8000a30:	4603      	mov	r3, r0
 8000a32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff35 	bl	80008a8 <__NVIC_EnableIRQ>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}

08000a46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ffa2 	bl	8000998 <SysTick_Config>
 8000a54:	4603      	mov	r3, r0
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	3708      	adds	r7, #8
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
	...

08000a60 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a60:	b480      	push	{r7}
 8000a62:	b085      	sub	sp, #20
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000a72:	2301      	movs	r3, #1
 8000a74:	e043      	b.n	8000afe <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	4b22      	ldr	r3, [pc, #136]	@ (8000b08 <HAL_DMA_Init+0xa8>)
 8000a7e:	4413      	add	r3, r2
 8000a80:	4a22      	ldr	r2, [pc, #136]	@ (8000b0c <HAL_DMA_Init+0xac>)
 8000a82:	fba2 2303 	umull	r2, r3, r2, r3
 8000a86:	091b      	lsrs	r3, r3, #4
 8000a88:	009a      	lsls	r2, r3, #2
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	4a1f      	ldr	r2, [pc, #124]	@ (8000b10 <HAL_DMA_Init+0xb0>)
 8000a92:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2202      	movs	r2, #2
 8000a98:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	681b      	ldr	r3, [r3, #0]
 8000aa2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000aaa:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000aae:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000ab8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68db      	ldr	r3, [r3, #12]
 8000abe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ac4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	695b      	ldr	r3, [r3, #20]
 8000aca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000ad0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	69db      	ldr	r3, [r3, #28]
 8000ad6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	2200      	movs	r2, #0
 8000aea:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2201      	movs	r2, #1
 8000af0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	2200      	movs	r2, #0
 8000af8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3714      	adds	r7, #20
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bc80      	pop	{r7}
 8000b06:	4770      	bx	lr
 8000b08:	bffdfff8 	.word	0xbffdfff8
 8000b0c:	cccccccd 	.word	0xcccccccd
 8000b10:	40020000 	.word	0x40020000

08000b14 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b086      	sub	sp, #24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
 8000b20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b22:	2300      	movs	r3, #0
 8000b24:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d101      	bne.n	8000b34 <HAL_DMA_Start_IT+0x20>
 8000b30:	2302      	movs	r3, #2
 8000b32:	e04b      	b.n	8000bcc <HAL_DMA_Start_IT+0xb8>
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	2201      	movs	r2, #1
 8000b38:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d13a      	bne.n	8000bbe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	2202      	movs	r2, #2
 8000b4c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	2200      	movs	r2, #0
 8000b54:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	681a      	ldr	r2, [r3, #0]
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	f022 0201 	bic.w	r2, r2, #1
 8000b64:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	68b9      	ldr	r1, [r7, #8]
 8000b6c:	68f8      	ldr	r0, [r7, #12]
 8000b6e:	f000 f9f6 	bl	8000f5e <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d008      	beq.n	8000b8c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	f042 020e 	orr.w	r2, r2, #14
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	e00f      	b.n	8000bac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	68fb      	ldr	r3, [r7, #12]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f022 0204 	bic.w	r2, r2, #4
 8000b9a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f042 020a 	orr.w	r2, r2, #10
 8000baa:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 0201 	orr.w	r2, r2, #1
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e005      	b.n	8000bca <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	3718      	adds	r7, #24
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b085      	sub	sp, #20
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000be6:	b2db      	uxtb	r3, r3
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d008      	beq.n	8000bfe <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	2204      	movs	r2, #4
 8000bf0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e020      	b.n	8000c40 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	681a      	ldr	r2, [r3, #0]
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f022 020e 	bic.w	r2, r2, #14
 8000c0c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f022 0201 	bic.w	r2, r2, #1
 8000c1c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000c26:	2101      	movs	r1, #1
 8000c28:	fa01 f202 	lsl.w	r2, r1, r2
 8000c2c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	2201      	movs	r2, #1
 8000c32:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	3714      	adds	r7, #20
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bc80      	pop	{r7}
 8000c48:	4770      	bx	lr
	...

08000c4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b084      	sub	sp, #16
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c54:	2300      	movs	r3, #0
 8000c56:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d005      	beq.n	8000c70 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2204      	movs	r2, #4
 8000c68:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	73fb      	strb	r3, [r7, #15]
 8000c6e:	e051      	b.n	8000d14 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	681a      	ldr	r2, [r3, #0]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f022 020e 	bic.w	r2, r2, #14
 8000c7e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	681a      	ldr	r2, [r3, #0]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	f022 0201 	bic.w	r2, r2, #1
 8000c8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a22      	ldr	r2, [pc, #136]	@ (8000d20 <HAL_DMA_Abort_IT+0xd4>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d029      	beq.n	8000cee <HAL_DMA_Abort_IT+0xa2>
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4a21      	ldr	r2, [pc, #132]	@ (8000d24 <HAL_DMA_Abort_IT+0xd8>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d022      	beq.n	8000cea <HAL_DMA_Abort_IT+0x9e>
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a1f      	ldr	r2, [pc, #124]	@ (8000d28 <HAL_DMA_Abort_IT+0xdc>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d01a      	beq.n	8000ce4 <HAL_DMA_Abort_IT+0x98>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8000d2c <HAL_DMA_Abort_IT+0xe0>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d012      	beq.n	8000cde <HAL_DMA_Abort_IT+0x92>
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a1c      	ldr	r2, [pc, #112]	@ (8000d30 <HAL_DMA_Abort_IT+0xe4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d00a      	beq.n	8000cd8 <HAL_DMA_Abort_IT+0x8c>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d34 <HAL_DMA_Abort_IT+0xe8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d102      	bne.n	8000cd2 <HAL_DMA_Abort_IT+0x86>
 8000ccc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000cd0:	e00e      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cd2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000cd6:	e00b      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cdc:	e008      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ce2:	e005      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000ce4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ce8:	e002      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cea:	2310      	movs	r3, #16
 8000cec:	e000      	b.n	8000cf0 <HAL_DMA_Abort_IT+0xa4>
 8000cee:	2301      	movs	r3, #1
 8000cf0:	4a11      	ldr	r2, [pc, #68]	@ (8000d38 <HAL_DMA_Abort_IT+0xec>)
 8000cf2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d10:	6878      	ldr	r0, [r7, #4]
 8000d12:	4798      	blx	r3
    } 
  }
  return status;
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3710      	adds	r7, #16
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	40020008 	.word	0x40020008
 8000d24:	4002001c 	.word	0x4002001c
 8000d28:	40020030 	.word	0x40020030
 8000d2c:	40020044 	.word	0x40020044
 8000d30:	40020058 	.word	0x40020058
 8000d34:	4002006c 	.word	0x4002006c
 8000d38:	40020000 	.word	0x40020000

08000d3c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d58:	2204      	movs	r2, #4
 8000d5a:	409a      	lsls	r2, r3
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	4013      	ands	r3, r2
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d04f      	beq.n	8000e04 <HAL_DMA_IRQHandler+0xc8>
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d04a      	beq.n	8000e04 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f003 0320 	and.w	r3, r3, #32
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d107      	bne.n	8000d8c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f022 0204 	bic.w	r2, r2, #4
 8000d8a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a66      	ldr	r2, [pc, #408]	@ (8000f2c <HAL_DMA_IRQHandler+0x1f0>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d029      	beq.n	8000dea <HAL_DMA_IRQHandler+0xae>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a65      	ldr	r2, [pc, #404]	@ (8000f30 <HAL_DMA_IRQHandler+0x1f4>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d022      	beq.n	8000de6 <HAL_DMA_IRQHandler+0xaa>
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a63      	ldr	r2, [pc, #396]	@ (8000f34 <HAL_DMA_IRQHandler+0x1f8>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d01a      	beq.n	8000de0 <HAL_DMA_IRQHandler+0xa4>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	4a62      	ldr	r2, [pc, #392]	@ (8000f38 <HAL_DMA_IRQHandler+0x1fc>)
 8000db0:	4293      	cmp	r3, r2
 8000db2:	d012      	beq.n	8000dda <HAL_DMA_IRQHandler+0x9e>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a60      	ldr	r2, [pc, #384]	@ (8000f3c <HAL_DMA_IRQHandler+0x200>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d00a      	beq.n	8000dd4 <HAL_DMA_IRQHandler+0x98>
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8000f40 <HAL_DMA_IRQHandler+0x204>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	d102      	bne.n	8000dce <HAL_DMA_IRQHandler+0x92>
 8000dc8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dcc:	e00e      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dce:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8000dd2:	e00b      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dd4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8000dd8:	e008      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dda:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000dde:	e005      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000de0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de4:	e002      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000de6:	2340      	movs	r3, #64	@ 0x40
 8000de8:	e000      	b.n	8000dec <HAL_DMA_IRQHandler+0xb0>
 8000dea:	2304      	movs	r3, #4
 8000dec:	4a55      	ldr	r2, [pc, #340]	@ (8000f44 <HAL_DMA_IRQHandler+0x208>)
 8000dee:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	f000 8094 	beq.w	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000e02:	e08e      	b.n	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e08:	2202      	movs	r2, #2
 8000e0a:	409a      	lsls	r2, r3
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d056      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x186>
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	f003 0302 	and.w	r3, r3, #2
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d051      	beq.n	8000ec2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f003 0320 	and.w	r3, r3, #32
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d10b      	bne.n	8000e44 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020a 	bic.w	r2, r2, #10
 8000e3a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2201      	movs	r2, #1
 8000e40:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a38      	ldr	r2, [pc, #224]	@ (8000f2c <HAL_DMA_IRQHandler+0x1f0>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d029      	beq.n	8000ea2 <HAL_DMA_IRQHandler+0x166>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a37      	ldr	r2, [pc, #220]	@ (8000f30 <HAL_DMA_IRQHandler+0x1f4>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d022      	beq.n	8000e9e <HAL_DMA_IRQHandler+0x162>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a35      	ldr	r2, [pc, #212]	@ (8000f34 <HAL_DMA_IRQHandler+0x1f8>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d01a      	beq.n	8000e98 <HAL_DMA_IRQHandler+0x15c>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a34      	ldr	r2, [pc, #208]	@ (8000f38 <HAL_DMA_IRQHandler+0x1fc>)
 8000e68:	4293      	cmp	r3, r2
 8000e6a:	d012      	beq.n	8000e92 <HAL_DMA_IRQHandler+0x156>
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a32      	ldr	r2, [pc, #200]	@ (8000f3c <HAL_DMA_IRQHandler+0x200>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d00a      	beq.n	8000e8c <HAL_DMA_IRQHandler+0x150>
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a31      	ldr	r2, [pc, #196]	@ (8000f40 <HAL_DMA_IRQHandler+0x204>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d102      	bne.n	8000e86 <HAL_DMA_IRQHandler+0x14a>
 8000e80:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8000e84:	e00e      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e86:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000e8a:	e00b      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e8c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8000e90:	e008      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e92:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e96:	e005      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e98:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e9c:	e002      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000e9e:	2320      	movs	r3, #32
 8000ea0:	e000      	b.n	8000ea4 <HAL_DMA_IRQHandler+0x168>
 8000ea2:	2302      	movs	r3, #2
 8000ea4:	4a27      	ldr	r2, [pc, #156]	@ (8000f44 <HAL_DMA_IRQHandler+0x208>)
 8000ea6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d034      	beq.n	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000ec0:	e02f      	b.n	8000f22 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	409a      	lsls	r2, r3
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d028      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x1e8>
 8000ed2:	68bb      	ldr	r3, [r7, #8]
 8000ed4:	f003 0308 	and.w	r3, r3, #8
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d023      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	681a      	ldr	r2, [r3, #0]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f022 020e 	bic.w	r2, r2, #14
 8000eea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	fa01 f202 	lsl.w	r2, r1, r2
 8000efa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2201      	movs	r2, #1
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	2201      	movs	r2, #1
 8000f06:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d004      	beq.n	8000f24 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	4798      	blx	r3
    }
  }
  return;
 8000f22:	bf00      	nop
 8000f24:	bf00      	nop
}
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	40020008 	.word	0x40020008
 8000f30:	4002001c 	.word	0x4002001c
 8000f34:	40020030 	.word	0x40020030
 8000f38:	40020044 	.word	0x40020044
 8000f3c:	40020058 	.word	0x40020058
 8000f40:	4002006c 	.word	0x4002006c
 8000f44:	40020000 	.word	0x40020000

08000f48 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr

08000f5e <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	b085      	sub	sp, #20
 8000f62:	af00      	add	r7, sp, #0
 8000f64:	60f8      	str	r0, [r7, #12]
 8000f66:	60b9      	str	r1, [r7, #8]
 8000f68:	607a      	str	r2, [r7, #4]
 8000f6a:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000f74:	2101      	movs	r1, #1
 8000f76:	fa01 f202 	lsl.w	r2, r1, r2
 8000f7a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	2b10      	cmp	r3, #16
 8000f8a:	d108      	bne.n	8000f9e <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	687a      	ldr	r2, [r7, #4]
 8000f92:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	68ba      	ldr	r2, [r7, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000f9c:	e007      	b.n	8000fae <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	68ba      	ldr	r2, [r7, #8]
 8000fa4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	687a      	ldr	r2, [r7, #4]
 8000fac:	60da      	str	r2, [r3, #12]
}
 8000fae:	bf00      	nop
 8000fb0:	3714      	adds	r7, #20
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bc80      	pop	{r7}
 8000fb6:	4770      	bx	lr

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b08b      	sub	sp, #44	@ 0x2c
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fca:	e169      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	69fa      	ldr	r2, [r7, #28]
 8000fdc:	4013      	ands	r3, r2
 8000fde:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	429a      	cmp	r2, r3
 8000fe6:	f040 8158 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	4a9a      	ldr	r2, [pc, #616]	@ (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff0:	4293      	cmp	r3, r2
 8000ff2:	d05e      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8000ff4:	4a98      	ldr	r2, [pc, #608]	@ (8001258 <HAL_GPIO_Init+0x2a0>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d875      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8000ffa:	4a98      	ldr	r2, [pc, #608]	@ (800125c <HAL_GPIO_Init+0x2a4>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d058      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001000:	4a96      	ldr	r2, [pc, #600]	@ (800125c <HAL_GPIO_Init+0x2a4>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d86f      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001006:	4a96      	ldr	r2, [pc, #600]	@ (8001260 <HAL_GPIO_Init+0x2a8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d052      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 800100c:	4a94      	ldr	r2, [pc, #592]	@ (8001260 <HAL_GPIO_Init+0x2a8>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d869      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001012:	4a94      	ldr	r2, [pc, #592]	@ (8001264 <HAL_GPIO_Init+0x2ac>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d04c      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001018:	4a92      	ldr	r2, [pc, #584]	@ (8001264 <HAL_GPIO_Init+0x2ac>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d863      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800101e:	4a92      	ldr	r2, [pc, #584]	@ (8001268 <HAL_GPIO_Init+0x2b0>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d046      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
 8001024:	4a90      	ldr	r2, [pc, #576]	@ (8001268 <HAL_GPIO_Init+0x2b0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d85d      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 800102a:	2b12      	cmp	r3, #18
 800102c:	d82a      	bhi.n	8001084 <HAL_GPIO_Init+0xcc>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d859      	bhi.n	80010e6 <HAL_GPIO_Init+0x12e>
 8001032:	a201      	add	r2, pc, #4	@ (adr r2, 8001038 <HAL_GPIO_Init+0x80>)
 8001034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001038:	080010b3 	.word	0x080010b3
 800103c:	0800108d 	.word	0x0800108d
 8001040:	0800109f 	.word	0x0800109f
 8001044:	080010e1 	.word	0x080010e1
 8001048:	080010e7 	.word	0x080010e7
 800104c:	080010e7 	.word	0x080010e7
 8001050:	080010e7 	.word	0x080010e7
 8001054:	080010e7 	.word	0x080010e7
 8001058:	080010e7 	.word	0x080010e7
 800105c:	080010e7 	.word	0x080010e7
 8001060:	080010e7 	.word	0x080010e7
 8001064:	080010e7 	.word	0x080010e7
 8001068:	080010e7 	.word	0x080010e7
 800106c:	080010e7 	.word	0x080010e7
 8001070:	080010e7 	.word	0x080010e7
 8001074:	080010e7 	.word	0x080010e7
 8001078:	080010e7 	.word	0x080010e7
 800107c:	08001095 	.word	0x08001095
 8001080:	080010a9 	.word	0x080010a9
 8001084:	4a79      	ldr	r2, [pc, #484]	@ (800126c <HAL_GPIO_Init+0x2b4>)
 8001086:	4293      	cmp	r3, r2
 8001088:	d013      	beq.n	80010b2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108a:	e02c      	b.n	80010e6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	68db      	ldr	r3, [r3, #12]
 8001090:	623b      	str	r3, [r7, #32]
          break;
 8001092:	e029      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	3304      	adds	r3, #4
 800109a:	623b      	str	r3, [r7, #32]
          break;
 800109c:	e024      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	3308      	adds	r3, #8
 80010a4:	623b      	str	r3, [r7, #32]
          break;
 80010a6:	e01f      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	68db      	ldr	r3, [r3, #12]
 80010ac:	330c      	adds	r3, #12
 80010ae:	623b      	str	r3, [r7, #32]
          break;
 80010b0:	e01a      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d102      	bne.n	80010c0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010ba:	2304      	movs	r3, #4
 80010bc:	623b      	str	r3, [r7, #32]
          break;
 80010be:	e013      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d105      	bne.n	80010d4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010c8:	2308      	movs	r3, #8
 80010ca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	69fa      	ldr	r2, [r7, #28]
 80010d0:	611a      	str	r2, [r3, #16]
          break;
 80010d2:	e009      	b.n	80010e8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d4:	2308      	movs	r3, #8
 80010d6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69fa      	ldr	r2, [r7, #28]
 80010dc:	615a      	str	r2, [r3, #20]
          break;
 80010de:	e003      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e0:	2300      	movs	r3, #0
 80010e2:	623b      	str	r3, [r7, #32]
          break;
 80010e4:	e000      	b.n	80010e8 <HAL_GPIO_Init+0x130>
          break;
 80010e6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010e8:	69bb      	ldr	r3, [r7, #24]
 80010ea:	2bff      	cmp	r3, #255	@ 0xff
 80010ec:	d801      	bhi.n	80010f2 <HAL_GPIO_Init+0x13a>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	e001      	b.n	80010f6 <HAL_GPIO_Init+0x13e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3304      	adds	r3, #4
 80010f6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2bff      	cmp	r3, #255	@ 0xff
 80010fc:	d802      	bhi.n	8001104 <HAL_GPIO_Init+0x14c>
 80010fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	e002      	b.n	800110a <HAL_GPIO_Init+0x152>
 8001104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001106:	3b08      	subs	r3, #8
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	210f      	movs	r1, #15
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	fa01 f303 	lsl.w	r3, r1, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	401a      	ands	r2, r3
 800111c:	6a39      	ldr	r1, [r7, #32]
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	fa01 f303 	lsl.w	r3, r1, r3
 8001124:	431a      	orrs	r2, r3
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001132:	2b00      	cmp	r3, #0
 8001134:	f000 80b1 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001138:	4b4d      	ldr	r3, [pc, #308]	@ (8001270 <HAL_GPIO_Init+0x2b8>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	4a4c      	ldr	r2, [pc, #304]	@ (8001270 <HAL_GPIO_Init+0x2b8>)
 800113e:	f043 0301 	orr.w	r3, r3, #1
 8001142:	6193      	str	r3, [r2, #24]
 8001144:	4b4a      	ldr	r3, [pc, #296]	@ (8001270 <HAL_GPIO_Init+0x2b8>)
 8001146:	699b      	ldr	r3, [r3, #24]
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	60bb      	str	r3, [r7, #8]
 800114e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001150:	4a48      	ldr	r2, [pc, #288]	@ (8001274 <HAL_GPIO_Init+0x2bc>)
 8001152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001154:	089b      	lsrs	r3, r3, #2
 8001156:	3302      	adds	r3, #2
 8001158:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800115c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800115e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001160:	f003 0303 	and.w	r3, r3, #3
 8001164:	009b      	lsls	r3, r3, #2
 8001166:	220f      	movs	r2, #15
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	43db      	mvns	r3, r3
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	4013      	ands	r3, r2
 8001172:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	4a40      	ldr	r2, [pc, #256]	@ (8001278 <HAL_GPIO_Init+0x2c0>)
 8001178:	4293      	cmp	r3, r2
 800117a:	d013      	beq.n	80011a4 <HAL_GPIO_Init+0x1ec>
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a3f      	ldr	r2, [pc, #252]	@ (800127c <HAL_GPIO_Init+0x2c4>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d00d      	beq.n	80011a0 <HAL_GPIO_Init+0x1e8>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3e      	ldr	r2, [pc, #248]	@ (8001280 <HAL_GPIO_Init+0x2c8>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d007      	beq.n	800119c <HAL_GPIO_Init+0x1e4>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a3d      	ldr	r2, [pc, #244]	@ (8001284 <HAL_GPIO_Init+0x2cc>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d101      	bne.n	8001198 <HAL_GPIO_Init+0x1e0>
 8001194:	2303      	movs	r3, #3
 8001196:	e006      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 8001198:	2304      	movs	r3, #4
 800119a:	e004      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 800119c:	2302      	movs	r3, #2
 800119e:	e002      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <HAL_GPIO_Init+0x1ee>
 80011a4:	2300      	movs	r3, #0
 80011a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011a8:	f002 0203 	and.w	r2, r2, #3
 80011ac:	0092      	lsls	r2, r2, #2
 80011ae:	4093      	lsls	r3, r2
 80011b0:	68fa      	ldr	r2, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011b6:	492f      	ldr	r1, [pc, #188]	@ (8001274 <HAL_GPIO_Init+0x2bc>)
 80011b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011ba:	089b      	lsrs	r3, r3, #2
 80011bc:	3302      	adds	r3, #2
 80011be:	68fa      	ldr	r2, [r7, #12]
 80011c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d0:	4b2d      	ldr	r3, [pc, #180]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	492c      	ldr	r1, [pc, #176]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	608b      	str	r3, [r1, #8]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011de:	4b2a      	ldr	r3, [pc, #168]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e0:	689a      	ldr	r2, [r3, #8]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4928      	ldr	r1, [pc, #160]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d006      	beq.n	8001206 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011f8:	4b23      	ldr	r3, [pc, #140]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fa:	68da      	ldr	r2, [r3, #12]
 80011fc:	4922      	ldr	r1, [pc, #136]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	60cb      	str	r3, [r1, #12]
 8001204:	e006      	b.n	8001214 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001206:	4b20      	ldr	r3, [pc, #128]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 8001208:	68da      	ldr	r2, [r3, #12]
 800120a:	69bb      	ldr	r3, [r7, #24]
 800120c:	43db      	mvns	r3, r3
 800120e:	491e      	ldr	r1, [pc, #120]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 8001210:	4013      	ands	r3, r2
 8001212:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d006      	beq.n	800122e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001220:	4b19      	ldr	r3, [pc, #100]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	4918      	ldr	r1, [pc, #96]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 8001226:	69bb      	ldr	r3, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800122e:	4b16      	ldr	r3, [pc, #88]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 8001230:	685a      	ldr	r2, [r3, #4]
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	43db      	mvns	r3, r3
 8001236:	4914      	ldr	r1, [pc, #80]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 8001238:	4013      	ands	r3, r2
 800123a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001244:	2b00      	cmp	r3, #0
 8001246:	d021      	beq.n	800128c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001248:	4b0f      	ldr	r3, [pc, #60]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	490e      	ldr	r1, [pc, #56]	@ (8001288 <HAL_GPIO_Init+0x2d0>)
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	4313      	orrs	r3, r2
 8001252:	600b      	str	r3, [r1, #0]
 8001254:	e021      	b.n	800129a <HAL_GPIO_Init+0x2e2>
 8001256:	bf00      	nop
 8001258:	10320000 	.word	0x10320000
 800125c:	10310000 	.word	0x10310000
 8001260:	10220000 	.word	0x10220000
 8001264:	10210000 	.word	0x10210000
 8001268:	10120000 	.word	0x10120000
 800126c:	10110000 	.word	0x10110000
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000
 8001278:	40010800 	.word	0x40010800
 800127c:	40010c00 	.word	0x40010c00
 8001280:	40011000 	.word	0x40011000
 8001284:	40011400 	.word	0x40011400
 8001288:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800128c:	4b0b      	ldr	r3, [pc, #44]	@ (80012bc <HAL_GPIO_Init+0x304>)
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	43db      	mvns	r3, r3
 8001294:	4909      	ldr	r1, [pc, #36]	@ (80012bc <HAL_GPIO_Init+0x304>)
 8001296:	4013      	ands	r3, r2
 8001298:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800129a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800129c:	3301      	adds	r3, #1
 800129e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a6:	fa22 f303 	lsr.w	r3, r2, r3
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f47f ae8e 	bne.w	8000fcc <HAL_GPIO_Init+0x14>
  }
}
 80012b0:	bf00      	nop
 80012b2:	bf00      	nop
 80012b4:	372c      	adds	r7, #44	@ 0x2c
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr
 80012bc:	40010400 	.word	0x40010400

080012c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b083      	sub	sp, #12
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	460b      	mov	r3, r1
 80012ca:	807b      	strh	r3, [r7, #2]
 80012cc:	4613      	mov	r3, r2
 80012ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d0:	787b      	ldrb	r3, [r7, #1]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012d6:	887a      	ldrh	r2, [r7, #2]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012dc:	e003      	b.n	80012e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012de:	887b      	ldrh	r3, [r7, #2]
 80012e0:	041a      	lsls	r2, r3, #16
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	611a      	str	r2, [r3, #16]
}
 80012e6:	bf00      	nop
 80012e8:	370c      	adds	r7, #12
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bc80      	pop	{r7}
 80012ee:	4770      	bx	lr

080012f0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001302:	887a      	ldrh	r2, [r7, #2]
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	4013      	ands	r3, r2
 8001308:	041a      	lsls	r2, r3, #16
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	43d9      	mvns	r1, r3
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	400b      	ands	r3, r1
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	611a      	str	r2, [r3, #16]
}
 8001318:	bf00      	nop
 800131a:	3714      	adds	r7, #20
 800131c:	46bd      	mov	sp, r7
 800131e:	bc80      	pop	{r7}
 8001320:	4770      	bx	lr
	...

08001324 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b086      	sub	sp, #24
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e272      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b00      	cmp	r3, #0
 8001340:	f000 8087 	beq.w	8001452 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001344:	4b92      	ldr	r3, [pc, #584]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f003 030c 	and.w	r3, r3, #12
 800134c:	2b04      	cmp	r3, #4
 800134e:	d00c      	beq.n	800136a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001350:	4b8f      	ldr	r3, [pc, #572]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 030c 	and.w	r3, r3, #12
 8001358:	2b08      	cmp	r3, #8
 800135a:	d112      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
 800135c:	4b8c      	ldr	r3, [pc, #560]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001368:	d10b      	bne.n	8001382 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800136a:	4b89      	ldr	r3, [pc, #548]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d06c      	beq.n	8001450 <HAL_RCC_OscConfig+0x12c>
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d168      	bne.n	8001450 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e24c      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800138a:	d106      	bne.n	800139a <HAL_RCC_OscConfig+0x76>
 800138c:	4b80      	ldr	r3, [pc, #512]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a7f      	ldr	r2, [pc, #508]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001392:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001396:	6013      	str	r3, [r2, #0]
 8001398:	e02e      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d10c      	bne.n	80013bc <HAL_RCC_OscConfig+0x98>
 80013a2:	4b7b      	ldr	r3, [pc, #492]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a7a      	ldr	r2, [pc, #488]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	4b78      	ldr	r3, [pc, #480]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a77      	ldr	r2, [pc, #476]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e01d      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c4:	d10c      	bne.n	80013e0 <HAL_RCC_OscConfig+0xbc>
 80013c6:	4b72      	ldr	r3, [pc, #456]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a71      	ldr	r2, [pc, #452]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b6f      	ldr	r3, [pc, #444]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a6e      	ldr	r2, [pc, #440]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e00b      	b.n	80013f8 <HAL_RCC_OscConfig+0xd4>
 80013e0:	4b6b      	ldr	r3, [pc, #428]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a6a      	ldr	r2, [pc, #424]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b68      	ldr	r3, [pc, #416]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a67      	ldr	r2, [pc, #412]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80013f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d013      	beq.n	8001428 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001400:	f7ff fa16 	bl	8000830 <HAL_GetTick>
 8001404:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001406:	e008      	b.n	800141a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001408:	f7ff fa12 	bl	8000830 <HAL_GetTick>
 800140c:	4602      	mov	r2, r0
 800140e:	693b      	ldr	r3, [r7, #16]
 8001410:	1ad3      	subs	r3, r2, r3
 8001412:	2b64      	cmp	r3, #100	@ 0x64
 8001414:	d901      	bls.n	800141a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001416:	2303      	movs	r3, #3
 8001418:	e200      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800141a:	4b5d      	ldr	r3, [pc, #372]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d0f0      	beq.n	8001408 <HAL_RCC_OscConfig+0xe4>
 8001426:	e014      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fa02 	bl	8000830 <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001430:	f7ff f9fe 	bl	8000830 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b64      	cmp	r3, #100	@ 0x64
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e1ec      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001442:	4b53      	ldr	r3, [pc, #332]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x10c>
 800144e:	e000      	b.n	8001452 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d063      	beq.n	8001526 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800145e:	4b4c      	ldr	r3, [pc, #304]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f003 030c 	and.w	r3, r3, #12
 8001466:	2b00      	cmp	r3, #0
 8001468:	d00b      	beq.n	8001482 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800146a:	4b49      	ldr	r3, [pc, #292]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	f003 030c 	and.w	r3, r3, #12
 8001472:	2b08      	cmp	r3, #8
 8001474:	d11c      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
 8001476:	4b46      	ldr	r3, [pc, #280]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d116      	bne.n	80014b0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001482:	4b43      	ldr	r3, [pc, #268]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d005      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	691b      	ldr	r3, [r3, #16]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d001      	beq.n	800149a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e1c0      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800149a:	4b3d      	ldr	r3, [pc, #244]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	00db      	lsls	r3, r3, #3
 80014a8:	4939      	ldr	r1, [pc, #228]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	4313      	orrs	r3, r2
 80014ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014ae:	e03a      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d020      	beq.n	80014fa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b8:	4b36      	ldr	r3, [pc, #216]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014ba:	2201      	movs	r2, #1
 80014bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014be:	f7ff f9b7 	bl	8000830 <HAL_GetTick>
 80014c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014c4:	e008      	b.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014c6:	f7ff f9b3 	bl	8000830 <HAL_GetTick>
 80014ca:	4602      	mov	r2, r0
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	2b02      	cmp	r3, #2
 80014d2:	d901      	bls.n	80014d8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014d4:	2303      	movs	r3, #3
 80014d6:	e1a1      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	4b2d      	ldr	r3, [pc, #180]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0302 	and.w	r3, r3, #2
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d0f0      	beq.n	80014c6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e4:	4b2a      	ldr	r3, [pc, #168]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	695b      	ldr	r3, [r3, #20]
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	4927      	ldr	r1, [pc, #156]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	600b      	str	r3, [r1, #0]
 80014f8:	e015      	b.n	8001526 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fa:	4b26      	ldr	r3, [pc, #152]	@ (8001594 <HAL_RCC_OscConfig+0x270>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001500:	f7ff f996 	bl	8000830 <HAL_GetTick>
 8001504:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001506:	e008      	b.n	800151a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001508:	f7ff f992 	bl	8000830 <HAL_GetTick>
 800150c:	4602      	mov	r2, r0
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	1ad3      	subs	r3, r2, r3
 8001512:	2b02      	cmp	r3, #2
 8001514:	d901      	bls.n	800151a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001516:	2303      	movs	r3, #3
 8001518:	e180      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d1f0      	bne.n	8001508 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0308 	and.w	r3, r3, #8
 800152e:	2b00      	cmp	r3, #0
 8001530:	d03a      	beq.n	80015a8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	699b      	ldr	r3, [r3, #24]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d019      	beq.n	800156e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800153a:	4b17      	ldr	r3, [pc, #92]	@ (8001598 <HAL_RCC_OscConfig+0x274>)
 800153c:	2201      	movs	r2, #1
 800153e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001540:	f7ff f976 	bl	8000830 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff f972 	bl	8000830 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e160      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800155a:	4b0d      	ldr	r3, [pc, #52]	@ (8001590 <HAL_RCC_OscConfig+0x26c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0f0      	beq.n	8001548 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001566:	2001      	movs	r0, #1
 8001568:	f000 faee 	bl	8001b48 <RCC_Delay>
 800156c:	e01c      	b.n	80015a8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_RCC_OscConfig+0x274>)
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001574:	f7ff f95c 	bl	8000830 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800157a:	e00f      	b.n	800159c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800157c:	f7ff f958 	bl	8000830 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d908      	bls.n	800159c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e146      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000
 8001594:	42420000 	.word	0x42420000
 8001598:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800159c:	4b92      	ldr	r3, [pc, #584]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800159e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d1e9      	bne.n	800157c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	f000 80a6 	beq.w	8001702 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015ba:	4b8b      	ldr	r3, [pc, #556]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	69db      	ldr	r3, [r3, #28]
 80015be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d10d      	bne.n	80015e2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c6:	4b88      	ldr	r3, [pc, #544]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	69db      	ldr	r3, [r3, #28]
 80015ca:	4a87      	ldr	r2, [pc, #540]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d0:	61d3      	str	r3, [r2, #28]
 80015d2:	4b85      	ldr	r3, [pc, #532]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80015d4:	69db      	ldr	r3, [r3, #28]
 80015d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015da:	60bb      	str	r3, [r7, #8]
 80015dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015de:	2301      	movs	r3, #1
 80015e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e2:	4b82      	ldr	r3, [pc, #520]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015ee:	4b7f      	ldr	r3, [pc, #508]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a7e      	ldr	r2, [pc, #504]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 80015f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015fa:	f7ff f919 	bl	8000830 <HAL_GetTick>
 80015fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001602:	f7ff f915 	bl	8000830 <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	693b      	ldr	r3, [r7, #16]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b64      	cmp	r3, #100	@ 0x64
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e103      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001614:	4b75      	ldr	r3, [pc, #468]	@ (80017ec <HAL_RCC_OscConfig+0x4c8>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800161c:	2b00      	cmp	r3, #0
 800161e:	d0f0      	beq.n	8001602 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	68db      	ldr	r3, [r3, #12]
 8001624:	2b01      	cmp	r3, #1
 8001626:	d106      	bne.n	8001636 <HAL_RCC_OscConfig+0x312>
 8001628:	4b6f      	ldr	r3, [pc, #444]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800162a:	6a1b      	ldr	r3, [r3, #32]
 800162c:	4a6e      	ldr	r2, [pc, #440]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6213      	str	r3, [r2, #32]
 8001634:	e02d      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	68db      	ldr	r3, [r3, #12]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d10c      	bne.n	8001658 <HAL_RCC_OscConfig+0x334>
 800163e:	4b6a      	ldr	r3, [pc, #424]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a69      	ldr	r2, [pc, #420]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001644:	f023 0301 	bic.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	4b67      	ldr	r3, [pc, #412]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a66      	ldr	r2, [pc, #408]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0304 	bic.w	r3, r3, #4
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	e01c      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	2b05      	cmp	r3, #5
 800165e:	d10c      	bne.n	800167a <HAL_RCC_OscConfig+0x356>
 8001660:	4b61      	ldr	r3, [pc, #388]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	4a60      	ldr	r2, [pc, #384]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001666:	f043 0304 	orr.w	r3, r3, #4
 800166a:	6213      	str	r3, [r2, #32]
 800166c:	4b5e      	ldr	r3, [pc, #376]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800166e:	6a1b      	ldr	r3, [r3, #32]
 8001670:	4a5d      	ldr	r2, [pc, #372]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001672:	f043 0301 	orr.w	r3, r3, #1
 8001676:	6213      	str	r3, [r2, #32]
 8001678:	e00b      	b.n	8001692 <HAL_RCC_OscConfig+0x36e>
 800167a:	4b5b      	ldr	r3, [pc, #364]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4a5a      	ldr	r2, [pc, #360]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001680:	f023 0301 	bic.w	r3, r3, #1
 8001684:	6213      	str	r3, [r2, #32]
 8001686:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001688:	6a1b      	ldr	r3, [r3, #32]
 800168a:	4a57      	ldr	r2, [pc, #348]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800168c:	f023 0304 	bic.w	r3, r3, #4
 8001690:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	68db      	ldr	r3, [r3, #12]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d015      	beq.n	80016c6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800169a:	f7ff f8c9 	bl	8000830 <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a0:	e00a      	b.n	80016b8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a2:	f7ff f8c5 	bl	8000830 <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016b0:	4293      	cmp	r3, r2
 80016b2:	d901      	bls.n	80016b8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80016b4:	2303      	movs	r3, #3
 80016b6:	e0b1      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016b8:	4b4b      	ldr	r3, [pc, #300]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d0ee      	beq.n	80016a2 <HAL_RCC_OscConfig+0x37e>
 80016c4:	e014      	b.n	80016f0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c6:	f7ff f8b3 	bl	8000830 <HAL_GetTick>
 80016ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016cc:	e00a      	b.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ce:	f7ff f8af 	bl	8000830 <HAL_GetTick>
 80016d2:	4602      	mov	r2, r0
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	1ad3      	subs	r3, r2, r3
 80016d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016dc:	4293      	cmp	r3, r2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e09b      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016e4:	4b40      	ldr	r3, [pc, #256]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	6a1b      	ldr	r3, [r3, #32]
 80016e8:	f003 0302 	and.w	r3, r3, #2
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d1ee      	bne.n	80016ce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d105      	bne.n	8001702 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f6:	4b3c      	ldr	r3, [pc, #240]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	4a3b      	ldr	r2, [pc, #236]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80016fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001700:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	69db      	ldr	r3, [r3, #28]
 8001706:	2b00      	cmp	r3, #0
 8001708:	f000 8087 	beq.w	800181a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800170c:	4b36      	ldr	r3, [pc, #216]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	2b08      	cmp	r3, #8
 8001716:	d061      	beq.n	80017dc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d146      	bne.n	80017ae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001720:	4b33      	ldr	r3, [pc, #204]	@ (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001726:	f7ff f883 	bl	8000830 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800172c:	e008      	b.n	8001740 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800172e:	f7ff f87f 	bl	8000830 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d901      	bls.n	8001740 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e06d      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001740:	4b29      	ldr	r3, [pc, #164]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001748:	2b00      	cmp	r3, #0
 800174a:	d1f0      	bne.n	800172e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001754:	d108      	bne.n	8001768 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001756:	4b24      	ldr	r3, [pc, #144]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	4921      	ldr	r1, [pc, #132]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 8001764:	4313      	orrs	r3, r2
 8001766:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001768:	4b1f      	ldr	r3, [pc, #124]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a19      	ldr	r1, [r3, #32]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001778:	430b      	orrs	r3, r1
 800177a:	491b      	ldr	r1, [pc, #108]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 800177c:	4313      	orrs	r3, r2
 800177e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001780:	4b1b      	ldr	r3, [pc, #108]	@ (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 8001782:	2201      	movs	r2, #1
 8001784:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001786:	f7ff f853 	bl	8000830 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800178c:	e008      	b.n	80017a0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178e:	f7ff f84f 	bl	8000830 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	2b02      	cmp	r3, #2
 800179a:	d901      	bls.n	80017a0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800179c:	2303      	movs	r3, #3
 800179e:	e03d      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80017a0:	4b11      	ldr	r3, [pc, #68]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d0f0      	beq.n	800178e <HAL_RCC_OscConfig+0x46a>
 80017ac:	e035      	b.n	800181a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ae:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <HAL_RCC_OscConfig+0x4cc>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b4:	f7ff f83c 	bl	8000830 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff f838 	bl	8000830 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e026      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017ce:	4b06      	ldr	r3, [pc, #24]	@ (80017e8 <HAL_RCC_OscConfig+0x4c4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x498>
 80017da:	e01e      	b.n	800181a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	69db      	ldr	r3, [r3, #28]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d107      	bne.n	80017f4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e019      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
 80017e8:	40021000 	.word	0x40021000
 80017ec:	40007000 	.word	0x40007000
 80017f0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001824 <HAL_RCC_OscConfig+0x500>)
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6a1b      	ldr	r3, [r3, #32]
 8001804:	429a      	cmp	r2, r3
 8001806:	d106      	bne.n	8001816 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001812:	429a      	cmp	r2, r3
 8001814:	d001      	beq.n	800181a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3718      	adds	r7, #24
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40021000 	.word	0x40021000

08001828 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d101      	bne.n	800183c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0d0      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800183c:	4b6a      	ldr	r3, [pc, #424]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	683a      	ldr	r2, [r7, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d910      	bls.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800184a:	4b67      	ldr	r3, [pc, #412]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f023 0207 	bic.w	r2, r3, #7
 8001852:	4965      	ldr	r1, [pc, #404]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	4313      	orrs	r3, r2
 8001858:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800185a:	4b63      	ldr	r3, [pc, #396]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	683a      	ldr	r2, [r7, #0]
 8001864:	429a      	cmp	r2, r3
 8001866:	d001      	beq.n	800186c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e0b8      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d020      	beq.n	80018ba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f003 0304 	and.w	r3, r3, #4
 8001880:	2b00      	cmp	r3, #0
 8001882:	d005      	beq.n	8001890 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001884:	4b59      	ldr	r3, [pc, #356]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	4a58      	ldr	r2, [pc, #352]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800188a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800188e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800189c:	4b53      	ldr	r3, [pc, #332]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4a52      	ldr	r2, [pc, #328]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018a2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80018a6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018a8:	4b50      	ldr	r3, [pc, #320]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	494d      	ldr	r1, [pc, #308]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0301 	and.w	r3, r3, #1
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d040      	beq.n	8001948 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	2b01      	cmp	r3, #1
 80018cc:	d107      	bne.n	80018de <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d115      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018da:	2301      	movs	r3, #1
 80018dc:	e07f      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d109      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e073      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b3d      	ldr	r3, [pc, #244]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d101      	bne.n	8001906 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e06b      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001906:	4b39      	ldr	r3, [pc, #228]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f023 0203 	bic.w	r2, r3, #3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	4936      	ldr	r1, [pc, #216]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001914:	4313      	orrs	r3, r2
 8001916:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001918:	f7fe ff8a 	bl	8000830 <HAL_GetTick>
 800191c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191e:	e00a      	b.n	8001936 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001920:	f7fe ff86 	bl	8000830 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e053      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001936:	4b2d      	ldr	r3, [pc, #180]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f003 020c 	and.w	r2, r3, #12
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	009b      	lsls	r3, r3, #2
 8001944:	429a      	cmp	r2, r3
 8001946:	d1eb      	bne.n	8001920 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001948:	4b27      	ldr	r3, [pc, #156]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	683a      	ldr	r2, [r7, #0]
 8001952:	429a      	cmp	r2, r3
 8001954:	d210      	bcs.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001956:	4b24      	ldr	r3, [pc, #144]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f023 0207 	bic.w	r2, r3, #7
 800195e:	4922      	ldr	r1, [pc, #136]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	4313      	orrs	r3, r2
 8001964:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001966:	4b20      	ldr	r3, [pc, #128]	@ (80019e8 <HAL_RCC_ClockConfig+0x1c0>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d001      	beq.n	8001978 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	e032      	b.n	80019de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0304 	and.w	r3, r3, #4
 8001980:	2b00      	cmp	r3, #0
 8001982:	d008      	beq.n	8001996 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001984:	4b19      	ldr	r3, [pc, #100]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	4916      	ldr	r1, [pc, #88]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d009      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80019a2:	4b12      	ldr	r3, [pc, #72]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	691b      	ldr	r3, [r3, #16]
 80019ae:	00db      	lsls	r3, r3, #3
 80019b0:	490e      	ldr	r1, [pc, #56]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019b6:	f000 f82d 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019ba:	4602      	mov	r2, r0
 80019bc:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_ClockConfig+0x1c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	091b      	lsrs	r3, r3, #4
 80019c2:	f003 030f 	and.w	r3, r3, #15
 80019c6:	490a      	ldr	r1, [pc, #40]	@ (80019f0 <HAL_RCC_ClockConfig+0x1c8>)
 80019c8:	5ccb      	ldrb	r3, [r1, r3]
 80019ca:	fa22 f303 	lsr.w	r3, r2, r3
 80019ce:	4a09      	ldr	r2, [pc, #36]	@ (80019f4 <HAL_RCC_ClockConfig+0x1cc>)
 80019d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019d2:	4b09      	ldr	r3, [pc, #36]	@ (80019f8 <HAL_RCC_ClockConfig+0x1d0>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4618      	mov	r0, r3
 80019d8:	f7fe fee8 	bl	80007ac <HAL_InitTick>

  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40022000 	.word	0x40022000
 80019ec:	40021000 	.word	0x40021000
 80019f0:	0800512c 	.word	0x0800512c
 80019f4:	20000000 	.word	0x20000000
 80019f8:	20000004 	.word	0x20000004

080019fc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80019fc:	b480      	push	{r7}
 80019fe:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8001a00:	4b03      	ldr	r3, [pc, #12]	@ (8001a10 <HAL_RCC_EnableCSS+0x14>)
 8001a02:	2201      	movs	r2, #1
 8001a04:	601a      	str	r2, [r3, #0]
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bc80      	pop	{r7}
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	4242004c 	.word	0x4242004c

08001a14 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b087      	sub	sp, #28
 8001a18:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	60fb      	str	r3, [r7, #12]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	60bb      	str	r3, [r7, #8]
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	2300      	movs	r3, #0
 8001a28:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001a2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 030c 	and.w	r3, r3, #12
 8001a3a:	2b04      	cmp	r3, #4
 8001a3c:	d002      	beq.n	8001a44 <HAL_RCC_GetSysClockFreq+0x30>
 8001a3e:	2b08      	cmp	r3, #8
 8001a40:	d003      	beq.n	8001a4a <HAL_RCC_GetSysClockFreq+0x36>
 8001a42:	e027      	b.n	8001a94 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a44:	4b19      	ldr	r3, [pc, #100]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x98>)
 8001a46:	613b      	str	r3, [r7, #16]
      break;
 8001a48:	e027      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	0c9b      	lsrs	r3, r3, #18
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	4a17      	ldr	r2, [pc, #92]	@ (8001ab0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a54:	5cd3      	ldrb	r3, [r2, r3]
 8001a56:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d010      	beq.n	8001a84 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a62:	4b11      	ldr	r3, [pc, #68]	@ (8001aa8 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0c5b      	lsrs	r3, r3, #17
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	4a11      	ldr	r2, [pc, #68]	@ (8001ab4 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	4a0d      	ldr	r2, [pc, #52]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x98>)
 8001a76:	fb03 f202 	mul.w	r2, r3, r2
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	e004      	b.n	8001a8e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a0c      	ldr	r2, [pc, #48]	@ (8001ab8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	613b      	str	r3, [r7, #16]
      break;
 8001a92:	e002      	b.n	8001a9a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a94:	4b05      	ldr	r3, [pc, #20]	@ (8001aac <HAL_RCC_GetSysClockFreq+0x98>)
 8001a96:	613b      	str	r3, [r7, #16]
      break;
 8001a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a9a:	693b      	ldr	r3, [r7, #16]
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	371c      	adds	r7, #28
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bc80      	pop	{r7}
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	007a1200 	.word	0x007a1200
 8001ab0:	08005144 	.word	0x08005144
 8001ab4:	08005154 	.word	0x08005154
 8001ab8:	003d0900 	.word	0x003d0900

08001abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	@ (8001acc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	20000000 	.word	0x20000000

08001ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad4:	f7ff fff2 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	4b05      	ldr	r3, [pc, #20]	@ (8001af0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	4903      	ldr	r1, [pc, #12]	@ (8001af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ae6:	5ccb      	ldrb	r3, [r1, r3]
 8001ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	bd80      	pop	{r7, pc}
 8001af0:	40021000 	.word	0x40021000
 8001af4:	0800513c 	.word	0x0800513c

08001af8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001afc:	f7ff ffde 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001b00:	4602      	mov	r2, r0
 8001b02:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	0adb      	lsrs	r3, r3, #11
 8001b08:	f003 0307 	and.w	r3, r3, #7
 8001b0c:	4903      	ldr	r1, [pc, #12]	@ (8001b1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b0e:	5ccb      	ldrb	r3, [r1, r3]
 8001b10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	0800513c 	.word	0x0800513c

08001b20 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8001b24:	4b06      	ldr	r3, [pc, #24]	@ (8001b40 <HAL_RCC_NMI_IRQHandler+0x20>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b2c:	2b80      	cmp	r3, #128	@ 0x80
 8001b2e:	d104      	bne.n	8001b3a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8001b30:	f000 f828 	bl	8001b84 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8001b34:	4b03      	ldr	r3, [pc, #12]	@ (8001b44 <HAL_RCC_NMI_IRQHandler+0x24>)
 8001b36:	2280      	movs	r2, #128	@ 0x80
 8001b38:	701a      	strb	r2, [r3, #0]
  }
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40021000 	.word	0x40021000
 8001b44:	4002100a 	.word	0x4002100a

08001b48 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b50:	4b0a      	ldr	r3, [pc, #40]	@ (8001b7c <RCC_Delay+0x34>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	@ (8001b80 <RCC_Delay+0x38>)
 8001b56:	fba2 2303 	umull	r2, r3, r2, r3
 8001b5a:	0a5b      	lsrs	r3, r3, #9
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	fb02 f303 	mul.w	r3, r2, r3
 8001b62:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b64:	bf00      	nop
  }
  while (Delay --);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	1e5a      	subs	r2, r3, #1
 8001b6a:	60fa      	str	r2, [r7, #12]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1f9      	bne.n	8001b64 <RCC_Delay+0x1c>
}
 8001b70:	bf00      	nop
 8001b72:	bf00      	nop
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bc80      	pop	{r7}
 8001b7a:	4770      	bx	lr
 8001b7c:	20000000 	.word	0x20000000
 8001b80:	10624dd3 	.word	0x10624dd3

08001b84 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8001b88:	bf00      	nop
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr

08001b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e042      	b.n	8001c28 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d106      	bne.n	8001bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f7fe fd12 	bl	80005e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2224      	movs	r2, #36	@ 0x24
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	68da      	ldr	r2, [r3, #12]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f000 ffc7 	bl	8002b68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	691a      	ldr	r2, [r3, #16]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	695a      	ldr	r2, [r3, #20]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	68da      	ldr	r2, [r3, #12]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2220      	movs	r2, #32
 8001c14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2220      	movs	r2, #32
 8001c1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001c26:	2300      	movs	r3, #0
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b08c      	sub	sp, #48	@ 0x30
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	4613      	mov	r3, r2
 8001c3c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	2b20      	cmp	r3, #32
 8001c48:	d156      	bne.n	8001cf8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d002      	beq.n	8001c56 <HAL_UART_Transmit_DMA+0x26>
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e04f      	b.n	8001cfa <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8001c5a:	68ba      	ldr	r2, [r7, #8]
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88fa      	ldrh	r2, [r7, #6]
 8001c6a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	2200      	movs	r2, #0
 8001c70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2221      	movs	r2, #33	@ 0x21
 8001c76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c7e:	4a21      	ldr	r2, [pc, #132]	@ (8001d04 <HAL_UART_Transmit_DMA+0xd4>)
 8001c80:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c86:	4a20      	ldr	r2, [pc, #128]	@ (8001d08 <HAL_UART_Transmit_DMA+0xd8>)
 8001c88:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8e:	4a1f      	ldr	r2, [pc, #124]	@ (8001d0c <HAL_UART_Transmit_DMA+0xdc>)
 8001c90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c96:	2200      	movs	r2, #0
 8001c98:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8001c9a:	f107 0308 	add.w	r3, r7, #8
 8001c9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8001ca4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca6:	6819      	ldr	r1, [r3, #0]
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	3304      	adds	r3, #4
 8001cae:	461a      	mov	r2, r3
 8001cb0:	88fb      	ldrh	r3, [r7, #6]
 8001cb2:	f7fe ff2f 	bl	8000b14 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001cbe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3314      	adds	r3, #20
 8001cc6:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	e853 3f00 	ldrex	r3, [r3]
 8001cce:	617b      	str	r3, [r7, #20]
   return(result);
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3314      	adds	r3, #20
 8001cde:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001ce0:	627a      	str	r2, [r7, #36]	@ 0x24
 8001ce2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ce4:	6a39      	ldr	r1, [r7, #32]
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce8:	e841 2300 	strex	r3, r2, [r1]
 8001cec:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cee:	69fb      	ldr	r3, [r7, #28]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d1e5      	bne.n	8001cc0 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	e000      	b.n	8001cfa <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8001cf8:	2302      	movs	r3, #2
  }
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3730      	adds	r7, #48	@ 0x30
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	080023ff 	.word	0x080023ff
 8001d08:	08002499 	.word	0x08002499
 8001d0c:	0800261d 	.word	0x0800261d

08001d10 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	60f8      	str	r0, [r7, #12]
 8001d18:	60b9      	str	r1, [r7, #8]
 8001d1a:	4613      	mov	r3, r2
 8001d1c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001d24:	b2db      	uxtb	r3, r3
 8001d26:	2b20      	cmp	r3, #32
 8001d28:	d112      	bne.n	8001d50 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d002      	beq.n	8001d36 <HAL_UART_Receive_DMA+0x26>
 8001d30:	88fb      	ldrh	r3, [r7, #6]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d101      	bne.n	8001d3a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e00b      	b.n	8001d52 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8001d40:	88fb      	ldrh	r3, [r7, #6]
 8001d42:	461a      	mov	r2, r3
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	68f8      	ldr	r0, [r7, #12]
 8001d48:	f000 fcb2 	bl	80026b0 <UART_Start_Receive_DMA>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	e000      	b.n	8001d52 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001d50:	2302      	movs	r3, #2
  }
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3710      	adds	r7, #16
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b09a      	sub	sp, #104	@ 0x68
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	330c      	adds	r3, #12
 8001d68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8001d6c:	e853 3f00 	ldrex	r3, [r3]
 8001d70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8001d72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001d74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8001d78:	667b      	str	r3, [r7, #100]	@ 0x64
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	330c      	adds	r3, #12
 8001d80:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8001d82:	657a      	str	r2, [r7, #84]	@ 0x54
 8001d84:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8001d88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001d8a:	e841 2300 	strex	r3, r2, [r1]
 8001d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8001d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1e5      	bne.n	8001d62 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	3314      	adds	r3, #20
 8001d9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001da0:	e853 3f00 	ldrex	r3, [r3]
 8001da4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8001da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001da8:	f023 0301 	bic.w	r3, r3, #1
 8001dac:	663b      	str	r3, [r7, #96]	@ 0x60
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	3314      	adds	r3, #20
 8001db4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001db6:	643a      	str	r2, [r7, #64]	@ 0x40
 8001db8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001dba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8001dbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8001dbe:	e841 2300 	strex	r3, r2, [r1]
 8001dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8001dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1e5      	bne.n	8001d96 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d119      	bne.n	8001e06 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	330c      	adds	r3, #12
 8001dd8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dda:	6a3b      	ldr	r3, [r7, #32]
 8001ddc:	e853 3f00 	ldrex	r3, [r3]
 8001de0:	61fb      	str	r3, [r7, #28]
   return(result);
 8001de2:	69fb      	ldr	r3, [r7, #28]
 8001de4:	f023 0310 	bic.w	r3, r3, #16
 8001de8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	330c      	adds	r3, #12
 8001df0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001df2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001df4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001df6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001df8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001dfa:	e841 2300 	strex	r3, r2, [r1]
 8001dfe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1e5      	bne.n	8001dd2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	695b      	ldr	r3, [r3, #20]
 8001e0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d036      	beq.n	8001e82 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	3314      	adds	r3, #20
 8001e1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	e853 3f00 	ldrex	r3, [r3]
 8001e22:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e24:	68bb      	ldr	r3, [r7, #8]
 8001e26:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001e2a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	3314      	adds	r3, #20
 8001e32:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001e34:	61ba      	str	r2, [r7, #24]
 8001e36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e38:	6979      	ldr	r1, [r7, #20]
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	e841 2300 	strex	r3, r2, [r1]
 8001e40:	613b      	str	r3, [r7, #16]
   return(result);
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d1e5      	bne.n	8001e14 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d018      	beq.n	8001e82 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e54:	2200      	movs	r2, #0
 8001e56:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	f7fe feb9 	bl	8000bd4 <HAL_DMA_Abort>
 8001e62:	4603      	mov	r3, r0
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d00c      	beq.n	8001e82 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff f86b 	bl	8000f48 <HAL_DMA_GetError>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b20      	cmp	r3, #32
 8001e76:	d104      	bne.n	8001e82 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2210      	movs	r2, #16
 8001e7c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e00a      	b.n	8001e98 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2200      	movs	r2, #0
 8001e86:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2220      	movs	r2, #32
 8001e8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2200      	movs	r2, #0
 8001e94:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3768      	adds	r7, #104	@ 0x68
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	695b      	ldr	r3, [r3, #20]
 8001ec2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10f      	bne.n	8001f06 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d009      	beq.n	8001f06 <HAL_UART_IRQHandler+0x66>
 8001ef2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ef6:	f003 0320 	and.w	r3, r3, #32
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f000 fd74 	bl	80029ec <UART_Receive_IT>
      return;
 8001f04:	e25b      	b.n	80023be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001f06:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80de 	beq.w	80020cc <HAL_UART_IRQHandler+0x22c>
 8001f10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f14:	f003 0301 	and.w	r3, r3, #1
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d106      	bne.n	8001f2a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f20:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80d1 	beq.w	80020cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d00b      	beq.n	8001f4e <HAL_UART_IRQHandler+0xae>
 8001f36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d005      	beq.n	8001f4e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f52:	f003 0304 	and.w	r3, r3, #4
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d00b      	beq.n	8001f72 <HAL_UART_IRQHandler+0xd2>
 8001f5a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f5e:	f003 0301 	and.w	r3, r3, #1
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	f043 0202 	orr.w	r2, r3, #2
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d00b      	beq.n	8001f96 <HAL_UART_IRQHandler+0xf6>
 8001f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d005      	beq.n	8001f96 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8e:	f043 0204 	orr.w	r2, r3, #4
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d011      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x126>
 8001fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fa6:	f003 0320 	and.w	r3, r3, #32
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d105      	bne.n	8001fba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001fae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fbe:	f043 0208 	orr.w	r2, r3, #8
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f000 81f2 	beq.w	80023b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d008      	beq.n	8001fee <HAL_UART_IRQHandler+0x14e>
 8001fdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fe0:	f003 0320 	and.w	r3, r3, #32
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d002      	beq.n	8001fee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f000 fcff 	bl	80029ec <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	695b      	ldr	r3, [r3, #20]
 8001ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf14      	ite	ne
 8001ffc:	2301      	movne	r3, #1
 8001ffe:	2300      	moveq	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f003 0308 	and.w	r3, r3, #8
 800200e:	2b00      	cmp	r3, #0
 8002010:	d103      	bne.n	800201a <HAL_UART_IRQHandler+0x17a>
 8002012:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002016:	2b00      	cmp	r3, #0
 8002018:	d04f      	beq.n	80020ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fc09 	bl	8002832 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800202a:	2b00      	cmp	r3, #0
 800202c:	d041      	beq.n	80020b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	3314      	adds	r3, #20
 8002034:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002038:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800203c:	e853 3f00 	ldrex	r3, [r3]
 8002040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002048:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800204c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	3314      	adds	r3, #20
 8002056:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800205a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800205e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002062:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002066:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800206a:	e841 2300 	strex	r3, r2, [r1]
 800206e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002072:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1d9      	bne.n	800202e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207e:	2b00      	cmp	r3, #0
 8002080:	d013      	beq.n	80020aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002086:	4a7e      	ldr	r2, [pc, #504]	@ (8002280 <HAL_UART_IRQHandler+0x3e0>)
 8002088:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800208e:	4618      	mov	r0, r3
 8002090:	f7fe fddc 	bl	8000c4c <HAL_DMA_Abort_IT>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d016      	beq.n	80020c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800209e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020a0:	687a      	ldr	r2, [r7, #4]
 80020a2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80020a4:	4610      	mov	r0, r2
 80020a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a8:	e00e      	b.n	80020c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fe79 	bl	8002da2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	e00a      	b.n	80020c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f000 fe75 	bl	8002da2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b8:	e006      	b.n	80020c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f000 fe71 	bl	8002da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80020c6:	e175      	b.n	80023b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020c8:	bf00      	nop
    return;
 80020ca:	e173      	b.n	80023b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	f040 814f 	bne.w	8002374 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020da:	f003 0310 	and.w	r3, r3, #16
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f000 8148 	beq.w	8002374 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020e8:	f003 0310 	and.w	r3, r3, #16
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 8141 	beq.w	8002374 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020f2:	2300      	movs	r3, #0
 80020f4:	60bb      	str	r3, [r7, #8]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	60bb      	str	r3, [r7, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	60bb      	str	r3, [r7, #8]
 8002106:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	695b      	ldr	r3, [r3, #20]
 800210e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 80b6 	beq.w	8002284 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002124:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002128:	2b00      	cmp	r3, #0
 800212a:	f000 8145 	beq.w	80023b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002132:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002136:	429a      	cmp	r2, r3
 8002138:	f080 813e 	bcs.w	80023b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002142:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002148:	699b      	ldr	r3, [r3, #24]
 800214a:	2b20      	cmp	r3, #32
 800214c:	f000 8088 	beq.w	8002260 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	330c      	adds	r3, #12
 8002156:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800215a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800215e:	e853 3f00 	ldrex	r3, [r3]
 8002162:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002166:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800216a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800216e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	330c      	adds	r3, #12
 8002178:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800217c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002180:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002184:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002188:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800218c:	e841 2300 	strex	r3, r2, [r1]
 8002190:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002194:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1d9      	bne.n	8002150 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	3314      	adds	r3, #20
 80021a2:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80021a6:	e853 3f00 	ldrex	r3, [r3]
 80021aa:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80021ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	3314      	adds	r3, #20
 80021bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021c0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80021c4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021c6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80021c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021cc:	e841 2300 	strex	r3, r2, [r1]
 80021d0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80021d2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1e1      	bne.n	800219c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	3314      	adds	r3, #20
 80021de:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021e0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021e2:	e853 3f00 	ldrex	r3, [r3]
 80021e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80021e8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021ea:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	3314      	adds	r3, #20
 80021f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80021fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021fe:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002200:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002202:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002204:	e841 2300 	strex	r3, r2, [r1]
 8002208:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800220a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800220c:	2b00      	cmp	r3, #0
 800220e:	d1e3      	bne.n	80021d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2200      	movs	r2, #0
 800221c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	330c      	adds	r3, #12
 8002224:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002226:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002228:	e853 3f00 	ldrex	r3, [r3]
 800222c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800222e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002230:	f023 0310 	bic.w	r3, r3, #16
 8002234:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	330c      	adds	r3, #12
 800223e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002242:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002244:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002246:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002248:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800224a:	e841 2300 	strex	r3, r2, [r1]
 800224e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002250:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1e3      	bne.n	800221e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe fcba 	bl	8000bd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	2202      	movs	r2, #2
 8002264:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800226e:	b29b      	uxth	r3, r3
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	b29b      	uxth	r3, r3
 8002274:	4619      	mov	r1, r3
 8002276:	6878      	ldr	r0, [r7, #4]
 8002278:	f000 f8b6 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800227c:	e09c      	b.n	80023b8 <HAL_UART_IRQHandler+0x518>
 800227e:	bf00      	nop
 8002280:	080028f7 	.word	0x080028f7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800228c:	b29b      	uxth	r3, r3
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002298:	b29b      	uxth	r3, r3
 800229a:	2b00      	cmp	r3, #0
 800229c:	f000 808e 	beq.w	80023bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80022a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	f000 8089 	beq.w	80023bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	330c      	adds	r3, #12
 80022b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80022b4:	e853 3f00 	ldrex	r3, [r3]
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022bc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	330c      	adds	r3, #12
 80022ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80022ce:	647a      	str	r2, [r7, #68]	@ 0x44
 80022d0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022d2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022d4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022d6:	e841 2300 	strex	r3, r2, [r1]
 80022da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d1e3      	bne.n	80022aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	3314      	adds	r3, #20
 80022e8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	e853 3f00 	ldrex	r3, [r3]
 80022f0:	623b      	str	r3, [r7, #32]
   return(result);
 80022f2:	6a3b      	ldr	r3, [r7, #32]
 80022f4:	f023 0301 	bic.w	r3, r3, #1
 80022f8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	3314      	adds	r3, #20
 8002302:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002306:	633a      	str	r2, [r7, #48]	@ 0x30
 8002308:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800230a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800230c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800230e:	e841 2300 	strex	r3, r2, [r1]
 8002312:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002316:	2b00      	cmp	r3, #0
 8002318:	d1e3      	bne.n	80022e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002330:	693b      	ldr	r3, [r7, #16]
 8002332:	e853 3f00 	ldrex	r3, [r3]
 8002336:	60fb      	str	r3, [r7, #12]
   return(result);
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f023 0310 	bic.w	r3, r3, #16
 800233e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	330c      	adds	r3, #12
 8002348:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800234c:	61fa      	str	r2, [r7, #28]
 800234e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002350:	69b9      	ldr	r1, [r7, #24]
 8002352:	69fa      	ldr	r2, [r7, #28]
 8002354:	e841 2300 	strex	r3, r2, [r1]
 8002358:	617b      	str	r3, [r7, #20]
   return(result);
 800235a:	697b      	ldr	r3, [r7, #20]
 800235c:	2b00      	cmp	r3, #0
 800235e:	d1e3      	bne.n	8002328 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002366:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800236a:	4619      	mov	r1, r3
 800236c:	6878      	ldr	r0, [r7, #4]
 800236e:	f000 f83b 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002372:	e023      	b.n	80023bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002374:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002378:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800237c:	2b00      	cmp	r3, #0
 800237e:	d009      	beq.n	8002394 <HAL_UART_IRQHandler+0x4f4>
 8002380:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002384:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002388:	2b00      	cmp	r3, #0
 800238a:	d003      	beq.n	8002394 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 fac6 	bl	800291e <UART_Transmit_IT>
    return;
 8002392:	e014      	b.n	80023be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002394:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002398:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800239c:	2b00      	cmp	r3, #0
 800239e:	d00e      	beq.n	80023be <HAL_UART_IRQHandler+0x51e>
 80023a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d008      	beq.n	80023be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 fb05 	bl	80029bc <UART_EndTransmit_IT>
    return;
 80023b2:	e004      	b.n	80023be <HAL_UART_IRQHandler+0x51e>
    return;
 80023b4:	bf00      	nop
 80023b6:	e002      	b.n	80023be <HAL_UART_IRQHandler+0x51e>
      return;
 80023b8:	bf00      	nop
 80023ba:	e000      	b.n	80023be <HAL_UART_IRQHandler+0x51e>
      return;
 80023bc:	bf00      	nop
  }
}
 80023be:	37e8      	adds	r7, #232	@ 0xe8
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80023cc:	bf00      	nop
 80023ce:	370c      	adds	r7, #12
 80023d0:	46bd      	mov	sp, r7
 80023d2:	bc80      	pop	{r7}
 80023d4:	4770      	bx	lr

080023d6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80023d6:	b480      	push	{r7}
 80023d8:	b083      	sub	sp, #12
 80023da:	af00      	add	r7, sp, #0
 80023dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80023de:	bf00      	nop
 80023e0:	370c      	adds	r7, #12
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	460b      	mov	r3, r1
 80023f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023f4:	bf00      	nop
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bc80      	pop	{r7}
 80023fc:	4770      	bx	lr

080023fe <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b090      	sub	sp, #64	@ 0x40
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b00      	cmp	r3, #0
 8002418:	d137      	bne.n	800248a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800241a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800241c:	2200      	movs	r2, #0
 800241e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	3314      	adds	r3, #20
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800242a:	e853 3f00 	ldrex	r3, [r3]
 800242e:	623b      	str	r3, [r7, #32]
   return(result);
 8002430:	6a3b      	ldr	r3, [r7, #32]
 8002432:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002436:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002438:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3314      	adds	r3, #20
 800243e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002440:	633a      	str	r2, [r7, #48]	@ 0x30
 8002442:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002444:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002446:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002448:	e841 2300 	strex	r3, r2, [r1]
 800244c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800244e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1e5      	bne.n	8002420 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002454:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	e853 3f00 	ldrex	r3, [r3]
 8002462:	60fb      	str	r3, [r7, #12]
   return(result);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800246a:	637b      	str	r3, [r7, #52]	@ 0x34
 800246c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	330c      	adds	r3, #12
 8002472:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002474:	61fa      	str	r2, [r7, #28]
 8002476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002478:	69b9      	ldr	r1, [r7, #24]
 800247a:	69fa      	ldr	r2, [r7, #28]
 800247c:	e841 2300 	strex	r3, r2, [r1]
 8002480:	617b      	str	r3, [r7, #20]
   return(result);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1e5      	bne.n	8002454 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8002488:	e002      	b.n	8002490 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800248a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800248c:	f000 fc65 	bl	8002d5a <HAL_UART_TxCpltCallback>
}
 8002490:	bf00      	nop
 8002492:	3740      	adds	r7, #64	@ 0x40
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024a4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f7ff ff8c 	bl	80023c4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80024ac:	bf00      	nop
 80024ae:	3710      	adds	r7, #16
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}

080024b4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b09c      	sub	sp, #112	@ 0x70
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c0:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0320 	and.w	r3, r3, #32
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d172      	bne.n	80025b6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80024d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d2:	2200      	movs	r2, #0
 80024d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80024d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	330c      	adds	r3, #12
 80024dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80024e0:	e853 3f00 	ldrex	r3, [r3]
 80024e4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80024e6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80024e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80024ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 80024ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	330c      	adds	r3, #12
 80024f4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80024f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80024f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80024fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80024fe:	e841 2300 	strex	r3, r2, [r1]
 8002502:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002504:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002506:	2b00      	cmp	r3, #0
 8002508:	d1e5      	bne.n	80024d6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800250a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	3314      	adds	r3, #20
 8002510:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002514:	e853 3f00 	ldrex	r3, [r3]
 8002518:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800251a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	667b      	str	r3, [r7, #100]	@ 0x64
 8002522:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	3314      	adds	r3, #20
 8002528:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800252a:	647a      	str	r2, [r7, #68]	@ 0x44
 800252c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800252e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002530:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002532:	e841 2300 	strex	r3, r2, [r1]
 8002536:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002538:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800253a:	2b00      	cmp	r3, #0
 800253c:	d1e5      	bne.n	800250a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800253e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	3314      	adds	r3, #20
 8002544:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002548:	e853 3f00 	ldrex	r3, [r3]
 800254c:	623b      	str	r3, [r7, #32]
   return(result);
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002554:	663b      	str	r3, [r7, #96]	@ 0x60
 8002556:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	3314      	adds	r3, #20
 800255c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800255e:	633a      	str	r2, [r7, #48]	@ 0x30
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002562:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002564:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002566:	e841 2300 	strex	r3, r2, [r1]
 800256a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800256c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1e5      	bne.n	800253e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002574:	2220      	movs	r2, #32
 8002576:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800257a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	2b01      	cmp	r3, #1
 8002580:	d119      	bne.n	80025b6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002582:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	330c      	adds	r3, #12
 8002588:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	e853 3f00 	ldrex	r3, [r3]
 8002590:	60fb      	str	r3, [r7, #12]
   return(result);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	f023 0310 	bic.w	r3, r3, #16
 8002598:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800259a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	330c      	adds	r3, #12
 80025a0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80025a2:	61fa      	str	r2, [r7, #28]
 80025a4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a6:	69b9      	ldr	r1, [r7, #24]
 80025a8:	69fa      	ldr	r2, [r7, #28]
 80025aa:	e841 2300 	strex	r3, r2, [r1]
 80025ae:	617b      	str	r3, [r7, #20]
   return(result);
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d1e5      	bne.n	8002582 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80025b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025b8:	2200      	movs	r2, #0
 80025ba:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025bc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d106      	bne.n	80025d2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80025c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80025c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025c8:	4619      	mov	r1, r3
 80025ca:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80025cc:	f7ff ff0c 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80025d0:	e002      	b.n	80025d8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80025d2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80025d4:	f000 fbd3 	bl	8002d7e <HAL_UART_RxCpltCallback>
}
 80025d8:	bf00      	nop
 80025da:	3770      	adds	r7, #112	@ 0x70
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ec:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025f8:	2b01      	cmp	r3, #1
 80025fa:	d108      	bne.n	800260e <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002600:	085b      	lsrs	r3, r3, #1
 8002602:	b29b      	uxth	r3, r3
 8002604:	4619      	mov	r1, r3
 8002606:	68f8      	ldr	r0, [r7, #12]
 8002608:	f7ff feee 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800260c:	e002      	b.n	8002614 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff fee1 	bl	80023d6 <HAL_UART_RxHalfCpltCallback>
}
 8002614:	bf00      	nop
 8002616:	3710      	adds	r7, #16
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8002624:	2300      	movs	r3, #0
 8002626:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800262c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800262e:	68bb      	ldr	r3, [r7, #8]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	695b      	ldr	r3, [r3, #20]
 8002634:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800264a:	b2db      	uxtb	r3, r3
 800264c:	2b21      	cmp	r3, #33	@ 0x21
 800264e:	d108      	bne.n	8002662 <UART_DMAError+0x46>
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d005      	beq.n	8002662 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	2200      	movs	r2, #0
 800265a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800265c:	68b8      	ldr	r0, [r7, #8]
 800265e:	f000 f8c1 	bl	80027e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695b      	ldr	r3, [r3, #20]
 8002668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf14      	ite	ne
 8002670:	2301      	movne	r3, #1
 8002672:	2300      	moveq	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800267e:	b2db      	uxtb	r3, r3
 8002680:	2b22      	cmp	r3, #34	@ 0x22
 8002682:	d108      	bne.n	8002696 <UART_DMAError+0x7a>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2200      	movs	r2, #0
 800268e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8002690:	68b8      	ldr	r0, [r7, #8]
 8002692:	f000 f8ce 	bl	8002832 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800269a:	f043 0210 	orr.w	r2, r3, #16
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80026a2:	68b8      	ldr	r0, [r7, #8]
 80026a4:	f000 fb7d 	bl	8002da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b098      	sub	sp, #96	@ 0x60
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	60b9      	str	r1, [r7, #8]
 80026ba:	4613      	mov	r3, r2
 80026bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80026be:	68ba      	ldr	r2, [r7, #8]
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	88fa      	ldrh	r2, [r7, #6]
 80026c8:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2200      	movs	r2, #0
 80026ce:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2222      	movs	r2, #34	@ 0x22
 80026d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026dc:	4a3e      	ldr	r2, [pc, #248]	@ (80027d8 <UART_Start_Receive_DMA+0x128>)
 80026de:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026e4:	4a3d      	ldr	r2, [pc, #244]	@ (80027dc <UART_Start_Receive_DMA+0x12c>)
 80026e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026ec:	4a3c      	ldr	r2, [pc, #240]	@ (80027e0 <UART_Start_Receive_DMA+0x130>)
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80026f4:	2200      	movs	r2, #0
 80026f6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80026f8:	f107 0308 	add.w	r3, r7, #8
 80026fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	3304      	adds	r3, #4
 8002708:	4619      	mov	r1, r3
 800270a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	88fb      	ldrh	r3, [r7, #6]
 8002710:	f7fe fa00 	bl	8000b14 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	613b      	str	r3, [r7, #16]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	685b      	ldr	r3, [r3, #4]
 8002726:	613b      	str	r3, [r7, #16]
 8002728:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d019      	beq.n	8002766 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002742:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002744:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002748:	65bb      	str	r3, [r7, #88]	@ 0x58
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002752:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002754:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8002758:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002760:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e5      	bne.n	8002732 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3314      	adds	r3, #20
 800276c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	657b      	str	r3, [r7, #84]	@ 0x54
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3314      	adds	r3, #20
 8002784:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002786:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002788:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800278c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e5      	bne.n	8002766 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3314      	adds	r3, #20
 80027a0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027a2:	69bb      	ldr	r3, [r7, #24]
 80027a4:	e853 3f00 	ldrex	r3, [r3]
 80027a8:	617b      	str	r3, [r7, #20]
   return(result);
 80027aa:	697b      	ldr	r3, [r7, #20]
 80027ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027b0:	653b      	str	r3, [r7, #80]	@ 0x50
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	3314      	adds	r3, #20
 80027b8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80027ba:	627a      	str	r2, [r7, #36]	@ 0x24
 80027bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027be:	6a39      	ldr	r1, [r7, #32]
 80027c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027c2:	e841 2300 	strex	r3, r2, [r1]
 80027c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1e5      	bne.n	800279a <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3760      	adds	r7, #96	@ 0x60
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	080024b5 	.word	0x080024b5
 80027dc:	080025e1 	.word	0x080025e1
 80027e0:	0800261d 	.word	0x0800261d

080027e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b089      	sub	sp, #36	@ 0x24
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	330c      	adds	r3, #12
 80027f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	e853 3f00 	ldrex	r3, [r3]
 80027fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80027fc:	68bb      	ldr	r3, [r7, #8]
 80027fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	330c      	adds	r3, #12
 800280a:	69fa      	ldr	r2, [r7, #28]
 800280c:	61ba      	str	r2, [r7, #24]
 800280e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002810:	6979      	ldr	r1, [r7, #20]
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	e841 2300 	strex	r3, r2, [r1]
 8002818:	613b      	str	r3, [r7, #16]
   return(result);
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e5      	bne.n	80027ec <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2220      	movs	r2, #32
 8002824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8002828:	bf00      	nop
 800282a:	3724      	adds	r7, #36	@ 0x24
 800282c:	46bd      	mov	sp, r7
 800282e:	bc80      	pop	{r7}
 8002830:	4770      	bx	lr

08002832 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002832:	b480      	push	{r7}
 8002834:	b095      	sub	sp, #84	@ 0x54
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	330c      	adds	r3, #12
 8002840:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002844:	e853 3f00 	ldrex	r3, [r3]
 8002848:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800284a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800284c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002850:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	330c      	adds	r3, #12
 8002858:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800285a:	643a      	str	r2, [r7, #64]	@ 0x40
 800285c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800285e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002860:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002862:	e841 2300 	strex	r3, r2, [r1]
 8002866:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1e5      	bne.n	800283a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	3314      	adds	r3, #20
 8002874:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	e853 3f00 	ldrex	r3, [r3]
 800287c:	61fb      	str	r3, [r7, #28]
   return(result);
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	f023 0301 	bic.w	r3, r3, #1
 8002884:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3314      	adds	r3, #20
 800288c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800288e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002890:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002892:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002894:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002896:	e841 2300 	strex	r3, r2, [r1]
 800289a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800289c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1e5      	bne.n	800286e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d119      	bne.n	80028de <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	e853 3f00 	ldrex	r3, [r3]
 80028b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	f023 0310 	bic.w	r3, r3, #16
 80028c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	330c      	adds	r3, #12
 80028c8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80028ca:	61ba      	str	r2, [r7, #24]
 80028cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ce:	6979      	ldr	r1, [r7, #20]
 80028d0:	69ba      	ldr	r2, [r7, #24]
 80028d2:	e841 2300 	strex	r3, r2, [r1]
 80028d6:	613b      	str	r3, [r7, #16]
   return(result);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1e5      	bne.n	80028aa <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2220      	movs	r2, #32
 80028e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80028ec:	bf00      	nop
 80028ee:	3754      	adds	r7, #84	@ 0x54
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80028f6:	b580      	push	{r7, lr}
 80028f8:	b084      	sub	sp, #16
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002902:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	2200      	movs	r2, #0
 8002908:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002910:	68f8      	ldr	r0, [r7, #12]
 8002912:	f000 fa46 	bl	8002da2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002916:	bf00      	nop
 8002918:	3710      	adds	r7, #16
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}

0800291e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800291e:	b480      	push	{r7}
 8002920:	b085      	sub	sp, #20
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800292c:	b2db      	uxtb	r3, r3
 800292e:	2b21      	cmp	r3, #33	@ 0x21
 8002930:	d13e      	bne.n	80029b0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800293a:	d114      	bne.n	8002966 <UART_Transmit_IT+0x48>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d110      	bne.n	8002966 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	881b      	ldrh	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002958:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	1c9a      	adds	r2, r3, #2
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	621a      	str	r2, [r3, #32]
 8002964:	e008      	b.n	8002978 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	1c59      	adds	r1, r3, #1
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6211      	str	r1, [r2, #32]
 8002970:	781a      	ldrb	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800297c:	b29b      	uxth	r3, r3
 800297e:	3b01      	subs	r3, #1
 8002980:	b29b      	uxth	r3, r3
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	4619      	mov	r1, r3
 8002986:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10f      	bne.n	80029ac <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800299a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	68da      	ldr	r2, [r3, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80029aa:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ac:	2300      	movs	r3, #0
 80029ae:	e000      	b.n	80029b2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029b0:	2302      	movs	r3, #2
  }
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3714      	adds	r7, #20
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bc80      	pop	{r7}
 80029ba:	4770      	bx	lr

080029bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68da      	ldr	r2, [r3, #12]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80029d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	f000 f9bc 	bl	8002d5a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80029e2:	2300      	movs	r3, #0
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3708      	adds	r7, #8
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b08c      	sub	sp, #48	@ 0x30
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	2b22      	cmp	r3, #34	@ 0x22
 80029fe:	f040 80ae 	bne.w	8002b5e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a0a:	d117      	bne.n	8002a3c <UART_Receive_IT+0x50>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	691b      	ldr	r3, [r3, #16]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d113      	bne.n	8002a3c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a2e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a34:	1c9a      	adds	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a3a:	e026      	b.n	8002a8a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a4e:	d007      	beq.n	8002a60 <UART_Receive_IT+0x74>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d10a      	bne.n	8002a6e <UART_Receive_IT+0x82>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d106      	bne.n	8002a6e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a6a:	701a      	strb	r2, [r3, #0]
 8002a6c:	e008      	b.n	8002a80 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a7e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a84:	1c5a      	adds	r2, r3, #1
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	3b01      	subs	r3, #1
 8002a92:	b29b      	uxth	r3, r3
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	4619      	mov	r1, r3
 8002a98:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d15d      	bne.n	8002b5a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 0220 	bic.w	r2, r2, #32
 8002aac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002abc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f022 0201 	bic.w	r2, r2, #1
 8002acc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d135      	bne.n	8002b50 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	330c      	adds	r3, #12
 8002af0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	e853 3f00 	ldrex	r3, [r3]
 8002af8:	613b      	str	r3, [r7, #16]
   return(result);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	f023 0310 	bic.w	r3, r3, #16
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	330c      	adds	r3, #12
 8002b08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002b0a:	623a      	str	r2, [r7, #32]
 8002b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b0e:	69f9      	ldr	r1, [r7, #28]
 8002b10:	6a3a      	ldr	r2, [r7, #32]
 8002b12:	e841 2300 	strex	r3, r2, [r1]
 8002b16:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1e5      	bne.n	8002aea <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 0310 	and.w	r3, r3, #16
 8002b28:	2b10      	cmp	r3, #16
 8002b2a:	d10a      	bne.n	8002b42 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	60fb      	str	r3, [r7, #12]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	60fb      	str	r3, [r7, #12]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002b46:	4619      	mov	r1, r3
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	f7ff fc4d 	bl	80023e8 <HAL_UARTEx_RxEventCallback>
 8002b4e:	e002      	b.n	8002b56 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f914 	bl	8002d7e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b56:	2300      	movs	r3, #0
 8002b58:	e002      	b.n	8002b60 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e000      	b.n	8002b60 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b5e:	2302      	movs	r3, #2
  }
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3730      	adds	r7, #48	@ 0x30
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	691b      	ldr	r3, [r3, #16]
 8002b76:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	430a      	orrs	r2, r1
 8002b84:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689a      	ldr	r2, [r3, #8]
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	691b      	ldr	r3, [r3, #16]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	695b      	ldr	r3, [r3, #20]
 8002b94:	4313      	orrs	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002ba2:	f023 030c 	bic.w	r3, r3, #12
 8002ba6:	687a      	ldr	r2, [r7, #4]
 8002ba8:	6812      	ldr	r2, [r2, #0]
 8002baa:	68b9      	ldr	r1, [r7, #8]
 8002bac:	430b      	orrs	r3, r1
 8002bae:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	699a      	ldr	r2, [r3, #24]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	430a      	orrs	r2, r1
 8002bc4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a2c      	ldr	r2, [pc, #176]	@ (8002c7c <UART_SetConfig+0x114>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d103      	bne.n	8002bd8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bd0:	f7fe ff92 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 8002bd4:	60f8      	str	r0, [r7, #12]
 8002bd6:	e002      	b.n	8002bde <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bd8:	f7fe ff7a 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
 8002bdc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	009a      	lsls	r2, r3, #2
 8002be8:	441a      	add	r2, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf4:	4a22      	ldr	r2, [pc, #136]	@ (8002c80 <UART_SetConfig+0x118>)
 8002bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	0119      	lsls	r1, r3, #4
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c14:	4b1a      	ldr	r3, [pc, #104]	@ (8002c80 <UART_SetConfig+0x118>)
 8002c16:	fba3 0302 	umull	r0, r3, r3, r2
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	2064      	movs	r0, #100	@ 0x64
 8002c1e:	fb00 f303 	mul.w	r3, r0, r3
 8002c22:	1ad3      	subs	r3, r2, r3
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	3332      	adds	r3, #50	@ 0x32
 8002c28:	4a15      	ldr	r2, [pc, #84]	@ (8002c80 <UART_SetConfig+0x118>)
 8002c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2e:	095b      	lsrs	r3, r3, #5
 8002c30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c34:	4419      	add	r1, r3
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009a      	lsls	r2, r3, #2
 8002c40:	441a      	add	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	009b      	lsls	r3, r3, #2
 8002c48:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002c80 <UART_SetConfig+0x118>)
 8002c4e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2064      	movs	r0, #100	@ 0x64
 8002c56:	fb00 f303 	mul.w	r3, r0, r3
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	3332      	adds	r3, #50	@ 0x32
 8002c60:	4a07      	ldr	r2, [pc, #28]	@ (8002c80 <UART_SetConfig+0x118>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	f003 020f 	and.w	r2, r3, #15
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	440a      	add	r2, r1
 8002c72:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c74:	bf00      	nop
 8002c76:	3710      	adds	r7, #16
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}
 8002c7c:	40013800 	.word	0x40013800
 8002c80:	51eb851f 	.word	0x51eb851f

08002c84 <_ZNK13TimingManager9isExpiredEv>:
                --timer->m_counter;
            }
        }
    }

    inline bool isExpired() const {
 8002c84:	b480      	push	{r7}
 8002c86:	b083      	sub	sp, #12
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
        return m_counter == 0;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	bf0c      	ite	eq
 8002c94:	2301      	moveq	r3, #1
 8002c96:	2300      	movne	r3, #0
 8002c98:	b2db      	uxtb	r3, r3
    }
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bc80      	pop	{r7}
 8002ca2:	4770      	bx	lr

08002ca4 <_ZN13TimingManager5startEm>:

    inline void start(const uint32_t delay) { m_counter = delay; }
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	bf00      	nop
 8002cb6:	370c      	adds	r7, #12
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bc80      	pop	{r7}
 8002cbc:	4770      	bx	lr
	...

08002cc0 <getUartInstance>:
#include "tools/timer/TimingManager.h"



stm32_DMA_uart_t* const getUartInstance()
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	extern UART_HandleTypeDef huart1;
	static stm32_DMA_uart_t* const uart_instance = UART_new(&huart1, 128);
 8002cc4:	4b12      	ldr	r3, [pc, #72]	@ (8002d10 <getUartInstance+0x50>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f3bf 8f5b 	dmb	ish
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	bf0c      	ite	eq
 8002cd4:	2301      	moveq	r3, #1
 8002cd6:	2300      	movne	r3, #0
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d014      	beq.n	8002d08 <getUartInstance+0x48>
 8002cde:	480c      	ldr	r0, [pc, #48]	@ (8002d10 <getUartInstance+0x50>)
 8002ce0:	f001 f9ae 	bl	8004040 <__cxa_guard_acquire>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	bf14      	ite	ne
 8002cea:	2301      	movne	r3, #1
 8002cec:	2300      	moveq	r3, #0
 8002cee:	b2db      	uxtb	r3, r3
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d009      	beq.n	8002d08 <getUartInstance+0x48>
 8002cf4:	2180      	movs	r1, #128	@ 0x80
 8002cf6:	4807      	ldr	r0, [pc, #28]	@ (8002d14 <getUartInstance+0x54>)
 8002cf8:	f000 ff66 	bl	8003bc8 <UART_new>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	4a06      	ldr	r2, [pc, #24]	@ (8002d18 <getUartInstance+0x58>)
 8002d00:	6013      	str	r3, [r2, #0]
 8002d02:	4803      	ldr	r0, [pc, #12]	@ (8002d10 <getUartInstance+0x50>)
 8002d04:	f001 f9a8 	bl	8004058 <__cxa_guard_release>

	return uart_instance;
 8002d08:	4b03      	ldr	r3, [pc, #12]	@ (8002d18 <getUartInstance+0x58>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	bd80      	pop	{r7, pc}
 8002d10:	20000160 	.word	0x20000160
 8002d14:	20000088 	.word	0x20000088
 8002d18:	2000015c 	.word	0x2000015c

08002d1c <_Z16uart_rx_callbackPKhmPv>:

void uart_rx_callback(uint8_t const * data, uint32_t const size, void* const captured)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	60f8      	str	r0, [r7, #12]
 8002d24:	60b9      	str	r1, [r7, #8]
 8002d26:	607a      	str	r2, [r7, #4]

}
 8002d28:	bf00      	nop
 8002d2a:	3714      	adds	r7, #20
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bc80      	pop	{r7}
 8002d30:	4770      	bx	lr

08002d32 <_Z16uart_tx_callbacklPv>:

void uart_tx_callback(const status_t status, void* const captured)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
 8002d3a:	6039      	str	r1, [r7, #0]

}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bc80      	pop	{r7}
 8002d44:	4770      	bx	lr

08002d46 <_Z19uart_error_callbacklPv>:

void uart_error_callback(const status_t status, void* const captured)
{
 8002d46:	b480      	push	{r7}
 8002d48:	b083      	sub	sp, #12
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	6078      	str	r0, [r7, #4]
 8002d4e:	6039      	str	r1, [r7, #0]

}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bc80      	pop	{r7}
 8002d58:	4770      	bx	lr

08002d5a <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d5a:	b580      	push	{r7, lr}
 8002d5c:	b084      	sub	sp, #16
 8002d5e:	af00      	add	r7, sp, #0
 8002d60:	6078      	str	r0, [r7, #4]
	//	stm32_DMA_uart_t* const uart_instance = getUartInstance();
	//
	//	if(uart_instance->huart == huart) {
	//		UART_TXCallback(uart_instance);
	//	}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f001 f91c 	bl	8003fa0 <getContainerUartInstance>
 8002d68:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d002      	beq.n	8002d76 <HAL_UART_TxCpltCallback+0x1c>
		UART_TXCallback(uart_instance);
 8002d70:	68f8      	ldr	r0, [r7, #12]
 8002d72:	f001 f867 	bl	8003e44 <UART_TXCallback>
	}
}
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}

08002d7e <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d7e:	b580      	push	{r7, lr}
 8002d80:	b084      	sub	sp, #16
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
//
//	if(uart_instance->huart == huart) {
//		UART_RXCallback(uart_instance);
//	}

	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f001 f90a 	bl	8003fa0 <getContainerUartInstance>
 8002d8c:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d002      	beq.n	8002d9a <HAL_UART_RxCpltCallback+0x1c>
		UART_RXCallback(uart_instance);
 8002d94:	68f8      	ldr	r0, [r7, #12]
 8002d96:	f000 fff3 	bl	8003d80 <UART_RXCallback>
	}
}
 8002d9a:	bf00      	nop
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002da2:	b580      	push	{r7, lr}
 8002da4:	b084      	sub	sp, #16
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
//
//	if(uart_instance->huart == huart) {
//		UART_ErrorCallback(uart_instance);
//	}

	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f001 f8f8 	bl	8003fa0 <getContainerUartInstance>
 8002db0:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d002      	beq.n	8002dbe <HAL_UART_ErrorCallback+0x1c>
		UART_ErrorCallback(uart_instance);
 8002db8:	68f8      	ldr	r0, [r7, #12]
 8002dba:	f001 f867 	bl	8003e8c <UART_ErrorCallback>
	}
}
 8002dbe:	bf00      	nop
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <_Z8initUartv>:


void initUart()
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b082      	sub	sp, #8
 8002dcc:	af00      	add	r7, sp, #0
	initUartsContainer();
 8002dce:	f001 f8d7 	bl	8003f80 <initUartsContainer>
	stm32_DMA_uart_t* const uart_instance = getUartInstance();
 8002dd2:	f7ff ff75 	bl	8002cc0 <getUartInstance>
 8002dd6:	6078      	str	r0, [r7, #4]
	UART_SetRxCallback(uart_instance, uart_rx_callback, uart_instance);
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	4909      	ldr	r1, [pc, #36]	@ (8002e00 <_Z8initUartv+0x38>)
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 ff61 	bl	8003ca4 <UART_SetRxCallback>
	UART_SetTxcallback(uart_instance, uart_tx_callback, uart_instance);
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	4907      	ldr	r1, [pc, #28]	@ (8002e04 <_Z8initUartv+0x3c>)
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 ff43 	bl	8003c72 <UART_SetTxcallback>
	UART_SetErrorCallback(uart_instance, uart_error_callback, uart_instance);
 8002dec:	687a      	ldr	r2, [r7, #4]
 8002dee:	4906      	ldr	r1, [pc, #24]	@ (8002e08 <_Z8initUartv+0x40>)
 8002df0:	6878      	ldr	r0, [r7, #4]
 8002df2:	f000 ff91 	bl	8003d18 <UART_SetErrorCallback>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	08002d1d 	.word	0x08002d1d
 8002e04:	08002d33 	.word	0x08002d33
 8002e08:	08002d47 	.word	0x08002d47

08002e0c <app_main>:



void app_main(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
	uint8_t txBuff[] =  {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
 8002e12:	4a14      	ldr	r2, [pc, #80]	@ (8002e64 <app_main+0x58>)
 8002e14:	f107 0308 	add.w	r3, r7, #8
 8002e18:	ca07      	ldmia	r2, {r0, r1, r2}
 8002e1a:	c303      	stmia	r3!, {r0, r1}
 8002e1c:	801a      	strh	r2, [r3, #0]
	TimingManager led_timer;
 8002e1e:	1d3b      	adds	r3, r7, #4
 8002e20:	4618      	mov	r0, r3
 8002e22:	f000 f8c1 	bl	8002fa8 <_ZN13TimingManagerC1Ev>
	initUart();
 8002e26:	f7ff ffcf 	bl	8002dc8 <_Z8initUartv>

	while(true) {

		if(led_timer.isExpired()) {
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7ff ff29 	bl	8002c84 <_ZNK13TimingManager9isExpiredEv>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d0f8      	beq.n	8002e2a <app_main+0x1e>
			stm32_DMA_uart_t* const uart_instance = getUartInstance();
 8002e38:	f7ff ff42 	bl	8002cc0 <getUartInstance>
 8002e3c:	6178      	str	r0, [r7, #20]
			UART_SendBuffer(uart_instance, txBuff, sizeof(txBuff));
 8002e3e:	f107 0308 	add.w	r3, r7, #8
 8002e42:	220a      	movs	r2, #10
 8002e44:	4619      	mov	r1, r3
 8002e46:	6978      	ldr	r0, [r7, #20]
 8002e48:	f000 fedf 	bl	8003c0a <UART_SendBuffer>
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8002e4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002e50:	4805      	ldr	r0, [pc, #20]	@ (8002e68 <app_main+0x5c>)
 8002e52:	f7fe fa4d 	bl	80012f0 <HAL_GPIO_TogglePin>

			led_timer.start(100);
 8002e56:	1d3b      	adds	r3, r7, #4
 8002e58:	2164      	movs	r1, #100	@ 0x64
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff22 	bl	8002ca4 <_ZN13TimingManager5startEm>
		}

	}
 8002e60:	e7e3      	b.n	8002e2a <app_main+0x1e>
 8002e62:	bf00      	nop
 8002e64:	0800505c 	.word	0x0800505c
 8002e68:	40011000 	.word	0x40011000

08002e6c <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 8002e70:	4b0b      	ldr	r3, [pc, #44]	@ (8002ea0 <IRQ_UNLOCK+0x34>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	dc05      	bgt.n	8002e84 <IRQ_UNLOCK+0x18>
 8002e78:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea4 <IRQ_UNLOCK+0x38>)
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	@ (8002ea8 <IRQ_UNLOCK+0x3c>)
 8002e7c:	2137      	movs	r1, #55	@ 0x37
 8002e7e:	480b      	ldr	r0, [pc, #44]	@ (8002eac <IRQ_UNLOCK+0x40>)
 8002e80:	f001 f91a 	bl	80040b8 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 8002e84:	4b06      	ldr	r3, [pc, #24]	@ (8002ea0 <IRQ_UNLOCK+0x34>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	3b01      	subs	r3, #1
 8002e8a:	4a05      	ldr	r2, [pc, #20]	@ (8002ea0 <IRQ_UNLOCK+0x34>)
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	dc04      	bgt.n	8002e9c <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 8002e92:	4b03      	ldr	r3, [pc, #12]	@ (8002ea0 <IRQ_UNLOCK+0x34>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002e98:	b662      	cpsie	i
}
 8002e9a:	bf00      	nop
        __enable_irq();
    }
}
 8002e9c:	bf00      	nop
 8002e9e:	bd80      	pop	{r7, pc}
 8002ea0:	20000164 	.word	0x20000164
 8002ea4:	08005068 	.word	0x08005068
 8002ea8:	08005158 	.word	0x08005158
 8002eac:	0800507c 	.word	0x0800507c

08002eb0 <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002eb4:	b672      	cpsid	i
}
 8002eb6:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 8002eb8:	4b04      	ldr	r3, [pc, #16]	@ (8002ecc <IRQ_LOCK+0x1c>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	3301      	adds	r3, #1
 8002ebe:	4a03      	ldr	r2, [pc, #12]	@ (8002ecc <IRQ_LOCK+0x1c>)
 8002ec0:	6013      	str	r3, [r2, #0]
}
 8002ec2:	bf00      	nop
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc80      	pop	{r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	20000164 	.word	0x20000164

08002ed0 <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	370c      	adds	r7, #12
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bc80      	pop	{r7}
 8002ee4:	4770      	bx	lr
	...

08002ee8 <_ZN13TimingManager7proceedEv>:
    static inline void proceed() {
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 8002eee:	4b1a      	ldr	r3, [pc, #104]	@ (8002f58 <_ZN13TimingManager7proceedEv+0x70>)
 8002ef0:	60fb      	str	r3, [r7, #12]
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f000 f878 	bl	8002fe8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 f883 	bl	8003008 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8002f02:	4603      	mov	r3, r0
 8002f04:	603b      	str	r3, [r7, #0]
 8002f06:	e018      	b.n	8002f3a <_ZN13TimingManager7proceedEv+0x52>
 8002f08:	1d3b      	adds	r3, r7, #4
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 f8b4 	bl	8003078 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 8002f10:	4603      	mov	r3, r0
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	bf14      	ite	ne
 8002f1e:	2301      	movne	r3, #1
 8002f20:	2300      	moveq	r3, #0
 8002f22:	b2db      	uxtb	r3, r3
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d004      	beq.n	8002f32 <_ZN13TimingManager7proceedEv+0x4a>
                --timer->m_counter;
 8002f28:	68bb      	ldr	r3, [r7, #8]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	1e5a      	subs	r2, r3, #1
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 8002f32:	1d3b      	adds	r3, r7, #4
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f890 	bl	800305a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 8002f3a:	463a      	mov	r2, r7
 8002f3c:	1d3b      	adds	r3, r7, #4
 8002f3e:	4611      	mov	r1, r2
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f872 	bl	800302a <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d1dd      	bne.n	8002f08 <_ZN13TimingManager7proceedEv+0x20>
    }
 8002f4c:	bf00      	nop
 8002f4e:	bf00      	nop
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	20000168 	.word	0x20000168

08002f5c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6878      	ldr	r0, [r7, #4]
 8002f66:	f000 f8a2 	bl	80030ae <_ZNSaIP13TimingManagerED1Ev>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	3708      	adds	r7, #8
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}

08002f74 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f000 f885 	bl	800308e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7ff ffeb 	bl	8002f74 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <_ZN13TimingManagerC1Ev>:
	if (it != m_timers.end()) {
		m_timers.erase(it);
	}
}

TimingManager::TimingManager()
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
{
	m_counter = 0;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	601a      	str	r2, [r3, #0]
	m_timers.push_back(this);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	f107 030c 	add.w	r3, r7, #12
 8002fc4:	4619      	mov	r1, r3
 8002fc6:	4804      	ldr	r0, [pc, #16]	@ (8002fd8 <_ZN13TimingManagerC1Ev+0x30>)
 8002fc8:	f000 f896 	bl	80030f8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>
}
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3710      	adds	r7, #16
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	20000168 	.word	0x20000168

08002fdc <HAL_SYSTICK_Callback>:


//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 8002fe0:	f7ff ff82 	bl	8002ee8 <_ZN13TimingManager7proceedEv>
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b084      	sub	sp, #16
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	f107 030c 	add.w	r3, r7, #12
 8002ff6:	4611      	mov	r1, r2
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f88e 	bl	800311a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	4618      	mov	r0, r3
 8003002:	3710      	adds	r7, #16
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8003008:	b580      	push	{r7, lr}
 800300a:	b084      	sub	sp, #16
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	1d1a      	adds	r2, r3, #4
 8003014:	f107 030c 	add.w	r3, r7, #12
 8003018:	4611      	mov	r1, r2
 800301a:	4618      	mov	r0, r3
 800301c:	f000 f87d 	bl	800311a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4618      	mov	r0, r3
 8003024:	3710      	adds	r7, #16
 8003026:	46bd      	mov	sp, r7
 8003028:	bd80      	pop	{r7, pc}

0800302a <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800302a:	b590      	push	{r4, r7, lr}
 800302c:	b083      	sub	sp, #12
 800302e:	af00      	add	r7, sp, #0
 8003030:	6078      	str	r0, [r7, #4]
 8003032:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f000 f87f 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800303a:	4603      	mov	r3, r0
 800303c:	681c      	ldr	r4, [r3, #0]
 800303e:	6838      	ldr	r0, [r7, #0]
 8003040:	f000 f87a 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8003044:	4603      	mov	r3, r0
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	429c      	cmp	r4, r3
 800304a:	bf14      	ite	ne
 800304c:	2301      	movne	r3, #1
 800304e:	2300      	moveq	r3, #0
 8003050:	b2db      	uxtb	r3, r3
 8003052:	4618      	mov	r0, r3
 8003054:	370c      	adds	r7, #12
 8003056:	46bd      	mov	sp, r7
 8003058:	bd90      	pop	{r4, r7, pc}

0800305a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 800305a:	b480      	push	{r7}
 800305c:	b083      	sub	sp, #12
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
	++_M_current;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	1d1a      	adds	r2, r3, #4
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	601a      	str	r2, [r3, #0]
	return *this;
 800306c:	687b      	ldr	r3, [r7, #4]
      }
 800306e:	4618      	mov	r0, r3
 8003070:	370c      	adds	r7, #12
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	bc80      	pop	{r7}
 800308c:	4770      	bx	lr

0800308e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800308e:	b580      	push	{r7, lr}
 8003090:	b082      	sub	sp, #8
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f858 	bl	800314c <_ZNSaIP13TimingManagerEC1Ev>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 f860 	bl	8003164 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	4618      	mov	r0, r3
 80030a8:	3708      	adds	r7, #8
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd80      	pop	{r7, pc}

080030ae <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 80030ae:	b580      	push	{r7, lr}
 80030b0:	b082      	sub	sp, #8
 80030b2:	af00      	add	r7, sp, #0
 80030b4:	6078      	str	r0, [r7, #4]
 80030b6:	6878      	ldr	r0, [r7, #4]
 80030b8:	f000 f867 	bl	800318a <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4618      	mov	r0, r3
 80030c0:	3708      	adds	r7, #8
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}

080030c6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80030c6:	b580      	push	{r7, lr}
 80030c8:	b082      	sub	sp, #8
 80030ca:	af00      	add	r7, sp, #0
 80030cc:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689a      	ldr	r2, [r3, #8]
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	1ad3      	subs	r3, r2, r3
 80030dc:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80030de:	461a      	mov	r2, r3
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f85c 	bl	800319e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff ff37 	bl	8002f5c <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	4618      	mov	r0, r3
 80030f2:	3708      	adds	r7, #8
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}

080030f8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8003102:	6838      	ldr	r0, [r7, #0]
 8003104:	f000 f85e 	bl	80031c4 <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>
 8003108:	4603      	mov	r3, r0
 800310a:	4619      	mov	r1, r3
 800310c:	6878      	ldr	r0, [r7, #4]
 800310e:	f000 f863 	bl	80031d8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}

0800311a <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800311a:	b480      	push	{r7}
 800311c:	b083      	sub	sp, #12
 800311e:	af00      	add	r7, sp, #0
 8003120:	6078      	str	r0, [r7, #4]
 8003122:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4618      	mov	r0, r3
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	bc80      	pop	{r7}
 8003136:	4770      	bx	lr

08003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4618      	mov	r0, r3
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f86d 	bl	8003234 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4618      	mov	r0, r3
 800315e:	3708      	adds	r7, #8
 8003160:	46bd      	mov	sp, r7
 8003162:	bd80      	pop	{r7, pc}

08003164 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	605a      	str	r2, [r3, #4]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2200      	movs	r2, #0
 800317c:	609a      	str	r2, [r3, #8]
	{ }
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4618      	mov	r0, r3
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	bc80      	pop	{r7}
 8003188:	4770      	bx	lr

0800318a <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800318a:	b480      	push	{r7}
 800318c:	b083      	sub	sp, #12
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4618      	mov	r0, r3
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	bc80      	pop	{r7}
 800319c:	4770      	bx	lr

0800319e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800319e:	b580      	push	{r7, lr}
 80031a0:	b084      	sub	sp, #16
 80031a2:	af00      	add	r7, sp, #0
 80031a4:	60f8      	str	r0, [r7, #12]
 80031a6:	60b9      	str	r1, [r7, #8]
 80031a8:	607a      	str	r2, [r7, #4]
	if (__p)
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	68b9      	ldr	r1, [r7, #8]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f846 	bl	8003248 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 80031bc:	bf00      	nop
 80031be:	3710      	adds	r7, #16
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4618      	mov	r0, r3
 80031d0:	370c      	adds	r7, #12
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bc80      	pop	{r7}
 80031d6:	4770      	bx	lr

080031d8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 80031d8:	b5b0      	push	{r4, r5, r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
 80031e0:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	685a      	ldr	r2, [r3, #4]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d011      	beq.n	8003212 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80031ee:	687c      	ldr	r4, [r7, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685d      	ldr	r5, [r3, #4]
 80031f4:	6838      	ldr	r0, [r7, #0]
 80031f6:	f000 f836 	bl	8003266 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 80031fa:	4603      	mov	r3, r0
 80031fc:	461a      	mov	r2, r3
 80031fe:	4629      	mov	r1, r5
 8003200:	4620      	mov	r0, r4
 8003202:	f000 f83a 	bl	800327a <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	1d1a      	adds	r2, r3, #4
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8003210:	e00c      	b.n	800322c <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7ff fef8 	bl	8003008 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8003218:	4604      	mov	r4, r0
 800321a:	6838      	ldr	r0, [r7, #0]
 800321c:	f000 f823 	bl	8003266 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8003220:	4603      	mov	r3, r0
 8003222:	461a      	mov	r2, r3
 8003224:	4621      	mov	r1, r4
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f850 	bl	80032cc <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 800322c:	bf00      	nop
 800322e:	3708      	adds	r7, #8
 8003230:	46bd      	mov	sp, r7
 8003232:	bdb0      	pop	{r4, r5, r7, pc}

08003234 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8003234:	b480      	push	{r7}
 8003236:	b083      	sub	sp, #12
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4618      	mov	r0, r3
 8003240:	370c      	adds	r7, #12
 8003242:	46bd      	mov	sp, r7
 8003244:	bc80      	pop	{r7}
 8003246:	4770      	bx	lr

08003248 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	60f8      	str	r0, [r7, #12]
 8003250:	60b9      	str	r1, [r7, #8]
 8003252:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	68b9      	ldr	r1, [r7, #8]
 8003258:	68f8      	ldr	r0, [r7, #12]
 800325a:	f000 f8f3 	bl	8003444 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 800325e:	bf00      	nop
 8003260:	3710      	adds	r7, #16
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}

08003266 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8003266:	b480      	push	{r7}
 8003268:	b083      	sub	sp, #12
 800326a:	af00      	add	r7, sp, #0
 800326c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4618      	mov	r0, r3
 8003272:	370c      	adds	r7, #12
 8003274:	46bd      	mov	sp, r7
 8003276:	bc80      	pop	{r7}
 8003278:	4770      	bx	lr

0800327a <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800327a:	b580      	push	{r7, lr}
 800327c:	b084      	sub	sp, #16
 800327e:	af00      	add	r7, sp, #0
 8003280:	60f8      	str	r0, [r7, #12]
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7ff ffed 	bl	8003266 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 800328c:	4603      	mov	r3, r0
 800328e:	461a      	mov	r2, r3
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f8fb 	bl	800348e <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8003298:	bf00      	nop
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 f805 	bl	80032b6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 80032ac:	4603      	mov	r3, r0
      }
 80032ae:	4618      	mov	r0, r3
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 80032b6:	b480      	push	{r7}
 80032b8:	b083      	sub	sp, #12
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 80032be:	2301      	movs	r3, #1
      }
 80032c0:	4618      	mov	r0, r3
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bc80      	pop	{r7}
 80032c8:	4770      	bx	lr
	...

080032cc <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 80032cc:	b5b0      	push	{r4, r5, r7, lr}
 80032ce:	b08c      	sub	sp, #48	@ 0x30
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	60b9      	str	r1, [r7, #8]
 80032d6:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80032d8:	4a59      	ldr	r2, [pc, #356]	@ (8003440 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80032da:	2101      	movs	r1, #1
 80032dc:	68f8      	ldr	r0, [r7, #12]
 80032de:	f000 f8ec 	bl	80034ba <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>
 80032e2:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80032f0:	68f8      	ldr	r0, [r7, #12]
 80032f2:	f7ff fe79 	bl	8002fe8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 80032f6:	4603      	mov	r3, r0
 80032f8:	617b      	str	r3, [r7, #20]
 80032fa:	f107 0214 	add.w	r2, r7, #20
 80032fe:	f107 0308 	add.w	r3, r7, #8
 8003302:	4611      	mov	r1, r2
 8003304:	4618      	mov	r0, r3
 8003306:	f000 f8ad 	bl	8003464 <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800330a:	4603      	mov	r3, r0
 800330c:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f918 	bl	8003548 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>
 8003318:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 800331e:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	18d5      	adds	r5, r2, r3
 8003328:	6878      	ldr	r0, [r7, #4]
 800332a:	f7ff ff9c 	bl	8003266 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 800332e:	4603      	mov	r3, r0
 8003330:	461a      	mov	r2, r3
 8003332:	4629      	mov	r1, r5
 8003334:	4620      	mov	r0, r4
 8003336:	f7ff ffa0 	bl	800327a <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 800333a:	2300      	movs	r3, #0
 800333c:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800333e:	f7ff ffaf 	bl	80032a0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 8003342:	4603      	mov	r3, r0
 8003344:	2b00      	cmp	r3, #0
 8003346:	d027      	beq.n	8003398 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003348:	f107 0308 	add.w	r3, r7, #8
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fef3 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8003352:	4603      	mov	r3, r0
 8003354:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	4618      	mov	r0, r3
 800335a:	f000 f91d 	bl	8003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 800335e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	4621      	mov	r1, r4
 8003364:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003366:	f000 f903 	bl	8003570 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800336a:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 800336c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800336e:	3304      	adds	r3, #4
 8003370:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003372:	f107 0308 	add.w	r3, r7, #8
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff fede 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800337c:	4603      	mov	r3, r0
 800337e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	4618      	mov	r0, r3
 8003384:	f000 f908 	bl	8003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8003388:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800338a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338c:	6a39      	ldr	r1, [r7, #32]
 800338e:	4620      	mov	r0, r4
 8003390:	f000 f8ee 	bl	8003570 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8003394:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8003396:	e026      	b.n	80033e6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8003398:	f107 0308 	add.w	r3, r7, #8
 800339c:	4618      	mov	r0, r3
 800339e:	f7ff fecb 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80033a2:	4603      	mov	r3, r0
 80033a4:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4618      	mov	r0, r3
 80033aa:	f000 f8f5 	bl	8003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80033ae:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 80033b0:	69ba      	ldr	r2, [r7, #24]
 80033b2:	4621      	mov	r1, r4
 80033b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033b6:	f000 f8f9 	bl	80035ac <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80033ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80033bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80033be:	3304      	adds	r3, #4
 80033c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 80033c2:	f107 0308 	add.w	r3, r7, #8
 80033c6:	4618      	mov	r0, r3
 80033c8:	f7ff feb6 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80033cc:	4603      	mov	r3, r0
 80033ce:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f000 f8e0 	bl	8003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80033d8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80033da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80033dc:	6a39      	ldr	r1, [r7, #32]
 80033de:	4620      	mov	r0, r4
 80033e0:	f000 f8e4 	bl	80035ac <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80033e4:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80033e6:	f7ff ff5b 	bl	80032a0 <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 80033ea:	4603      	mov	r3, r0
 80033ec:	f083 0301 	eor.w	r3, r3, #1
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d009      	beq.n	800340a <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 f8cd 	bl	8003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80033fe:	4603      	mov	r3, r0
 8003400:	461a      	mov	r2, r3
 8003402:	6a39      	ldr	r1, [r7, #32]
 8003404:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003406:	f000 f8ea 	bl	80035de <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 800340a:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	689a      	ldr	r2, [r3, #8]
 8003410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8003416:	461a      	mov	r2, r3
 8003418:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800341a:	f7ff fec0 	bl	800319e <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	69ba      	ldr	r2, [r7, #24]
 8003422:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003428:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	69ba      	ldr	r2, [r7, #24]
 8003430:	441a      	add	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	609a      	str	r2, [r3, #8]
    }
 8003436:	bf00      	nop
 8003438:	3730      	adds	r7, #48	@ 0x30
 800343a:	46bd      	mov	sp, r7
 800343c:	bdb0      	pop	{r4, r5, r7, pc}
 800343e:	bf00      	nop
 8003440:	080050a4 	.word	0x080050a4

08003444 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4619      	mov	r1, r3
 8003456:	68b8      	ldr	r0, [r7, #8]
 8003458:	f000 fdf0 	bl	800403c <_ZdlPvj>
      }
 800345c:	bf00      	nop
 800345e:	3710      	adds	r7, #16
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003464:	b590      	push	{r4, r7, lr}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
 800346c:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff fe62 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8003474:	4603      	mov	r3, r0
 8003476:	681c      	ldr	r4, [r3, #0]
 8003478:	6838      	ldr	r0, [r7, #0]
 800347a:	f7ff fe5d 	bl	8003138 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800347e:	4603      	mov	r3, r0
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	1ae3      	subs	r3, r4, r3
 8003484:	109b      	asrs	r3, r3, #2
 8003486:	4618      	mov	r0, r3
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	bd90      	pop	{r4, r7, pc}

0800348e <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800348e:	b590      	push	{r4, r7, lr}
 8003490:	b085      	sub	sp, #20
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	60b9      	str	r1, [r7, #8]
 8003498:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	4619      	mov	r1, r3
 800349e:	2004      	movs	r0, #4
 80034a0:	f7ff fd16 	bl	8002ed0 <_ZnwjPv>
 80034a4:	4604      	mov	r4, r0
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f7ff fedd 	bl	8003266 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 80034ac:	4603      	mov	r3, r0
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6023      	str	r3, [r4, #0]
 80034b2:	bf00      	nop
 80034b4:	3714      	adds	r7, #20
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd90      	pop	{r4, r7, pc}

080034ba <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80034ba:	b590      	push	{r4, r7, lr}
 80034bc:	b087      	sub	sp, #28
 80034be:	af00      	add	r7, sp, #0
 80034c0:	60f8      	str	r0, [r7, #12]
 80034c2:	60b9      	str	r1, [r7, #8]
 80034c4:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f8a7 	bl	800361a <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 80034cc:	4604      	mov	r4, r0
 80034ce:	68f8      	ldr	r0, [r7, #12]
 80034d0:	f000 f8b4 	bl	800363c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80034d4:	4603      	mov	r3, r0
 80034d6:	1ae2      	subs	r2, r4, r3
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	429a      	cmp	r2, r3
 80034dc:	bf34      	ite	cc
 80034de:	2301      	movcc	r3, #1
 80034e0:	2300      	movcs	r3, #0
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d002      	beq.n	80034ee <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fdcf 	bl	800408c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 f8a4 	bl	800363c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80034f4:	4604      	mov	r4, r0
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8a0 	bl	800363c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80034fc:	4603      	mov	r3, r0
 80034fe:	613b      	str	r3, [r7, #16]
 8003500:	f107 0208 	add.w	r2, r7, #8
 8003504:	f107 0310 	add.w	r3, r7, #16
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f000 f8a5 	bl	800365a <_ZSt3maxIjERKT_S2_S2_>
 8003510:	4603      	mov	r3, r0
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4423      	add	r3, r4
 8003516:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f88f 	bl	800363c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 800351e:	4602      	mov	r2, r0
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	4293      	cmp	r3, r2
 8003524:	d306      	bcc.n	8003534 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8003526:	68f8      	ldr	r0, [r7, #12]
 8003528:	f000 f877 	bl	800361a <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 800352c:	4602      	mov	r2, r0
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4293      	cmp	r3, r2
 8003532:	d904      	bls.n	800353e <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8003534:	68f8      	ldr	r0, [r7, #12]
 8003536:	f000 f870 	bl	800361a <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 800353a:	4603      	mov	r3, r0
 800353c:	e000      	b.n	8003540 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800353e:	697b      	ldr	r3, [r7, #20]
      }
 8003540:	4618      	mov	r0, r3
 8003542:	371c      	adds	r7, #28
 8003544:	46bd      	mov	sp, r7
 8003546:	bd90      	pop	{r4, r7, pc}

08003548 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d006      	beq.n	8003566 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x1e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6839      	ldr	r1, [r7, #0]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 f88f 	bl	8003680 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>
 8003562:	4603      	mov	r3, r0
 8003564:	e000      	b.n	8003568 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x20>
 8003566:	2300      	movs	r3, #0
      }
 8003568:	4618      	mov	r0, r3
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003570:	b590      	push	{r4, r7, lr}
 8003572:	b087      	sub	sp, #28
 8003574:	af02      	add	r7, sp, #8
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800357e:	f88d 4000 	strb.w	r4, [sp]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68b9      	ldr	r1, [r7, #8]
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f000 f888 	bl	800369e <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800358e:	4603      	mov	r3, r0
      }
 8003590:	4618      	mov	r0, r3
 8003592:	3714      	adds	r7, #20
 8003594:	46bd      	mov	sp, r7
 8003596:	bd90      	pop	{r4, r7, pc}

08003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8003598:	b480      	push	{r7}
 800359a:	b083      	sub	sp, #12
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bc80      	pop	{r7}
 80035aa:	4770      	bx	lr

080035ac <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80035ac:	b590      	push	{r4, r7, lr}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
 80035b8:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80035ba:	68f8      	ldr	r0, [r7, #12]
 80035bc:	f000 f881 	bl	80036c2 <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 80035c0:	4604      	mov	r4, r0
 80035c2:	68b8      	ldr	r0, [r7, #8]
 80035c4:	f000 f87d 	bl	80036c2 <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 80035c8:	4601      	mov	r1, r0
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	4620      	mov	r0, r4
 80035d0:	f000 f886 	bl	80036e0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80035d4:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80035d6:	4618      	mov	r0, r3
 80035d8:	3714      	adds	r7, #20
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd90      	pop	{r4, r7, pc}

080035de <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80035de:	b580      	push	{r7, lr}
 80035e0:	b084      	sub	sp, #16
 80035e2:	af00      	add	r7, sp, #0
 80035e4:	60f8      	str	r0, [r7, #12]
 80035e6:	60b9      	str	r1, [r7, #8]
 80035e8:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80035ea:	68b9      	ldr	r1, [r7, #8]
 80035ec:	68f8      	ldr	r0, [r7, #12]
 80035ee:	f000 f888 	bl	8003702 <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 80035f2:	bf00      	nop
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80035fa:	b580      	push	{r7, lr}
 80035fc:	b084      	sub	sp, #16
 80035fe:	af00      	add	r7, sp, #0
 8003600:	60f8      	str	r0, [r7, #12]
 8003602:	60b9      	str	r1, [r7, #8]
 8003604:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	68b9      	ldr	r1, [r7, #8]
 800360a:	68f8      	ldr	r0, [r7, #12]
 800360c:	f000 f886 	bl	800371c <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8003610:	4603      	mov	r3, r0
 8003612:	4618      	mov	r0, r3
 8003614:	3710      	adds	r7, #16
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800361a:	b580      	push	{r7, lr}
 800361c:	b082      	sub	sp, #8
 800361e:	af00      	add	r7, sp, #0
 8003620:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4618      	mov	r0, r3
 8003626:	f000 f8a3 	bl	8003770 <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 800362a:	4603      	mov	r3, r0
 800362c:	4618      	mov	r0, r3
 800362e:	f000 f885 	bl	800373c <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>
 8003632:	4603      	mov	r3, r0
 8003634:	4618      	mov	r0, r3
 8003636:	3708      	adds	r7, #8
 8003638:	46bd      	mov	sp, r7
 800363a:	bd80      	pop	{r7, pc}

0800363c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800363c:	b480      	push	{r7}
 800363e:	b083      	sub	sp, #12
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	109b      	asrs	r3, r3, #2
 8003650:	4618      	mov	r0, r3
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	bc80      	pop	{r7}
 8003658:	4770      	bx	lr

0800365a <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800365a:	b480      	push	{r7}
 800365c:	b083      	sub	sp, #12
 800365e:	af00      	add	r7, sp, #0
 8003660:	6078      	str	r0, [r7, #4]
 8003662:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	429a      	cmp	r2, r3
 800366e:	d201      	bcs.n	8003674 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	e000      	b.n	8003676 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003674:	687b      	ldr	r3, [r7, #4]
    }
 8003676:	4618      	mov	r0, r3
 8003678:	370c      	adds	r7, #12
 800367a:	46bd      	mov	sp, r7
 800367c:	bc80      	pop	{r7}
 800367e:	4770      	bx	lr

08003680 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800368a:	2200      	movs	r2, #0
 800368c:	6839      	ldr	r1, [r7, #0]
 800368e:	6878      	ldr	r0, [r7, #4]
 8003690:	f000 f878 	bl	8003784 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>
 8003694:	4603      	mov	r3, r0
 8003696:	4618      	mov	r0, r3
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}

0800369e <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800369e:	b580      	push	{r7, lr}
 80036a0:	b084      	sub	sp, #16
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	60f8      	str	r0, [r7, #12]
 80036a6:	60b9      	str	r1, [r7, #8]
 80036a8:	607a      	str	r2, [r7, #4]
 80036aa:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68b9      	ldr	r1, [r7, #8]
 80036b2:	68f8      	ldr	r0, [r7, #12]
 80036b4:	f000 f88f 	bl	80037d6 <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80036b8:	4603      	mov	r3, r0
      }
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80036ca:	f107 030c 	add.w	r3, r7, #12
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f000 f89d 	bl	8003810 <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	4618      	mov	r0, r3
 80036da:	3710      	adds	r7, #16
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	607a      	str	r2, [r7, #4]
 80036ec:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	68b9      	ldr	r1, [r7, #8]
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f89e 	bl	8003834 <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 80036f8:	4603      	mov	r3, r0
    }
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8003702:	b580      	push	{r7, lr}
 8003704:	b082      	sub	sp, #8
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f000 f8a4 	bl	800385c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}

0800371c <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	68b9      	ldr	r1, [r7, #8]
 800372c:	68f8      	ldr	r0, [r7, #12]
 800372e:	f000 f89f 	bl	8003870 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>
 8003732:	4603      	mov	r3, r0
    }
 8003734:	4618      	mov	r0, r3
 8003736:	3710      	adds	r7, #16
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800373c:	b580      	push	{r7, lr}
 800373e:	b084      	sub	sp, #16
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003744:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8003748:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f8ad 	bl	80038aa <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>
 8003750:	4603      	mov	r3, r0
 8003752:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003754:	f107 0208 	add.w	r2, r7, #8
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	4611      	mov	r1, r2
 800375e:	4618      	mov	r0, r3
 8003760:	f000 f8af 	bl	80038c2 <_ZSt3minIjERKT_S2_S2_>
 8003764:	4603      	mov	r3, r0
 8003766:	681b      	ldr	r3, [r3, #0]
      }
 8003768:	4618      	mov	r0, r3
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	4618      	mov	r0, r3
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	bc80      	pop	{r7}
 8003782:	4770      	bx	lr

08003784 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003784:	b580      	push	{r7, lr}
 8003786:	b084      	sub	sp, #16
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 8003790:	68f8      	ldr	r0, [r7, #12]
 8003792:	f000 f8a9 	bl	80038e8 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 8003796:	4602      	mov	r2, r0
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4293      	cmp	r3, r2
 800379c:	bf8c      	ite	hi
 800379e:	2301      	movhi	r3, #1
 80037a0:	2300      	movls	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	bf14      	ite	ne
 80037a8:	2301      	movne	r3, #1
 80037aa:	2300      	moveq	r3, #0
 80037ac:	b2db      	uxtb	r3, r3
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d007      	beq.n	80037c2 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037b8:	d301      	bcc.n	80037be <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80037ba:	f000 fc64 	bl	8004086 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80037be:	f000 fc5f 	bl	8004080 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4618      	mov	r0, r3
 80037c8:	f000 fc49 	bl	800405e <_Znwj>
 80037cc:	4603      	mov	r3, r0
      }
 80037ce:	4618      	mov	r0, r3
 80037d0:	3710      	adds	r7, #16
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}

080037d6 <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80037d6:	b5b0      	push	{r4, r5, r7, lr}
 80037d8:	b084      	sub	sp, #16
 80037da:	af00      	add	r7, sp, #0
 80037dc:	60f8      	str	r0, [r7, #12]
 80037de:	60b9      	str	r1, [r7, #8]
 80037e0:	607a      	str	r2, [r7, #4]
 80037e2:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80037e4:	68f8      	ldr	r0, [r7, #12]
 80037e6:	f000 f88a 	bl	80038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80037ea:	4604      	mov	r4, r0
 80037ec:	68b8      	ldr	r0, [r7, #8]
 80037ee:	f000 f886 	bl	80038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80037f2:	4605      	mov	r5, r0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f000 f882 	bl	80038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80037fa:	4602      	mov	r2, r0
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	4629      	mov	r1, r5
 8003800:	4620      	mov	r0, r4
 8003802:	f000 f886 	bl	8003912 <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8003806:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bdb0      	pop	{r4, r5, r7, pc}

08003810 <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>:
      move_iterator(iterator_type __i)
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 800381a:	463b      	mov	r3, r7
 800381c:	4618      	mov	r0, r3
 800381e:	f000 f896 	bl	800394e <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>
 8003822:	4603      	mov	r3, r0
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	601a      	str	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	4618      	mov	r0, r3
 800382e:	3708      	adds	r7, #8
 8003830:	46bd      	mov	sp, r7
 8003832:	bd80      	pop	{r7, pc}

08003834 <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003834:	b580      	push	{r7, lr}
 8003836:	b086      	sub	sp, #24
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 8003840:	2301      	movs	r3, #1
 8003842:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8003844:	2301      	movs	r3, #1
 8003846:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	68b9      	ldr	r1, [r7, #8]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f888 	bl	8003962 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>
 8003852:	4603      	mov	r3, r0
    }
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bc80      	pop	{r7}
 800386e:	4770      	bx	lr

08003870 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003870:	b580      	push	{r7, lr}
 8003872:	b086      	sub	sp, #24
 8003874:	af00      	add	r7, sp, #0
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	60b9      	str	r1, [r7, #8]
 800387a:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800387c:	68ba      	ldr	r2, [r7, #8]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	1ad3      	subs	r3, r2, r3
 8003882:	109b      	asrs	r3, r3, #2
 8003884:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d006      	beq.n	800389a <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	009b      	lsls	r3, r3, #2
 8003890:	461a      	mov	r2, r3
 8003892:	68f9      	ldr	r1, [r7, #12]
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 fe02 	bl	800449e <memmove>
	  return __result + _Num;
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	009b      	lsls	r3, r3, #2
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
	}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3718      	adds	r7, #24
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}

080038aa <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80038aa:	b580      	push	{r7, lr}
 80038ac:	b082      	sub	sp, #8
 80038ae:	af00      	add	r7, sp, #0
 80038b0:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f865 	bl	8003982 <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>
 80038b8:	4603      	mov	r3, r0
      }
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80038c2:	b480      	push	{r7}
 80038c4:	b083      	sub	sp, #12
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	6078      	str	r0, [r7, #4]
 80038ca:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d201      	bcs.n	80038dc <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	e000      	b.n	80038de <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80038dc:	687b      	ldr	r3, [r7, #4]
    }
 80038de:	4618      	mov	r0, r3
 80038e0:	370c      	adds	r7, #12
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bc80      	pop	{r7}
 80038e6:	4770      	bx	lr

080038e8 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80038f0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80038f4:	4618      	mov	r0, r3
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bc80      	pop	{r7}
 80038fc:	4770      	bx	lr

080038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>:
    __niter_base(_Iterator __it)
 80038fe:	b480      	push	{r7}
 8003900:	b083      	sub	sp, #12
 8003902:	af00      	add	r7, sp, #0
 8003904:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4618      	mov	r0, r3
 800390a:	370c      	adds	r7, #12
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8003912:	b580      	push	{r7, lr}
 8003914:	b086      	sub	sp, #24
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
 800391a:	60b9      	str	r1, [r7, #8]
 800391c:	607a      	str	r2, [r7, #4]
 800391e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8003920:	68ba      	ldr	r2, [r7, #8]
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	109b      	asrs	r3, r3, #2
 8003928:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	2b00      	cmp	r3, #0
 800392e:	dd06      	ble.n	800393e <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	461a      	mov	r2, r3
 8003936:	68f9      	ldr	r1, [r7, #12]
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f000 fdb0 	bl	800449e <memmove>
      return __result + __count;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	4413      	add	r3, r2
    }
 8003946:	4618      	mov	r0, r3
 8003948:	3718      	adds	r7, #24
 800394a:	46bd      	mov	sp, r7
 800394c:	bd80      	pop	{r7, pc}

0800394e <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800394e:	b480      	push	{r7}
 8003950:	b083      	sub	sp, #12
 8003952:	af00      	add	r7, sp, #0
 8003954:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	bc80      	pop	{r7}
 8003960:	4770      	bx	lr

08003962 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8003962:	b580      	push	{r7, lr}
 8003964:	b084      	sub	sp, #16
 8003966:	af00      	add	r7, sp, #0
 8003968:	60f8      	str	r0, [r7, #12]
 800396a:	60b9      	str	r1, [r7, #8]
 800396c:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68b9      	ldr	r1, [r7, #8]
 8003972:	68f8      	ldr	r0, [r7, #12]
 8003974:	f000 f811 	bl	800399a <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 8003978:	4603      	mov	r3, r0
 800397a:	4618      	mov	r0, r3
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8003982:	b580      	push	{r7, lr}
 8003984:	b082      	sub	sp, #8
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff ffac 	bl	80038e8 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 8003990:	4603      	mov	r3, r0
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800399a:	b590      	push	{r4, r7, lr}
 800399c:	b085      	sub	sp, #20
 800399e:	af00      	add	r7, sp, #0
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f80f 	bl	80039ca <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80039ac:	4604      	mov	r4, r0
 80039ae:	68b8      	ldr	r0, [r7, #8]
 80039b0:	f000 f80b 	bl	80039ca <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80039b4:	4603      	mov	r3, r0
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	4619      	mov	r1, r3
 80039ba:	4620      	mov	r0, r4
 80039bc:	f000 f816 	bl	80039ec <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 80039c0:	4603      	mov	r3, r0
    }
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd90      	pop	{r4, r7, pc}

080039ca <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b082      	sub	sp, #8
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80039d2:	1d3b      	adds	r3, r7, #4
 80039d4:	4618      	mov	r0, r3
 80039d6:	f000 f82c 	bl	8003a32 <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>
 80039da:	4603      	mov	r3, r0
 80039dc:	4618      	mov	r0, r3
 80039de:	f000 f833 	bl	8003a48 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>
 80039e2:	4603      	mov	r3, r0
 80039e4:	4618      	mov	r0, r3
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}

080039ec <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80039ec:	b5b0      	push	{r4, r5, r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	60f8      	str	r0, [r7, #12]
 80039f4:	60b9      	str	r1, [r7, #8]
 80039f6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f7ff ff80 	bl	80038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80039fe:	4604      	mov	r4, r0
 8003a00:	68b8      	ldr	r0, [r7, #8]
 8003a02:	f7ff ff7c 	bl	80038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8003a06:	4605      	mov	r5, r0
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7ff ff77 	bl	80038fe <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8003a10:	4603      	mov	r3, r0
 8003a12:	461a      	mov	r2, r3
 8003a14:	4629      	mov	r1, r5
 8003a16:	4620      	mov	r0, r4
 8003a18:	f7ff fdef 	bl	80035fa <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	1d3b      	adds	r3, r7, #4
 8003a20:	4611      	mov	r1, r2
 8003a22:	4618      	mov	r0, r3
 8003a24:	f000 f81a 	bl	8003a5c <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>
 8003a28:	4603      	mov	r3, r0
    }
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	3710      	adds	r7, #16
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	bdb0      	pop	{r4, r5, r7, pc}

08003a32 <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>:
      base() const
 8003a32:	b480      	push	{r7}
 8003a34:	b083      	sub	sp, #12
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr

08003a48 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8003a48:	b480      	push	{r7}
 8003a4a:	b083      	sub	sp, #12
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	4618      	mov	r0, r3
 8003a54:	370c      	adds	r7, #12
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
 8003a64:	6039      	str	r1, [r7, #0]
    { return __res; }
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	4618      	mov	r0, r3
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
	...

08003a74 <_Z41__static_initialization_and_destruction_0ii>:
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	6039      	str	r1, [r7, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	d107      	bne.n	8003a94 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d102      	bne.n	8003a94 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 8003a8e:	4809      	ldr	r0, [pc, #36]	@ (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003a90:	f7ff fa7d 	bl	8002f8e <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d107      	bne.n	8003aaa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d102      	bne.n	8003aaa <_Z41__static_initialization_and_destruction_0ii+0x36>
 8003aa4:	4803      	ldr	r0, [pc, #12]	@ (8003ab4 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8003aa6:	f000 f807 	bl	8003ab8 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 8003aaa:	bf00      	nop
 8003aac:	3708      	adds	r7, #8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop
 8003ab4:	20000168 	.word	0x20000168

08003ab8 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8003ab8:	b5b0      	push	{r4, r5, r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7ff fd64 	bl	8003598 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8003ad0:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	4629      	mov	r1, r5
 8003ad6:	4620      	mov	r0, r4
 8003ad8:	f7ff fd81 	bl	80035de <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	4618      	mov	r0, r3
 8003ae0:	f7ff faf1 	bl	80030c6 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	3708      	adds	r7, #8
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bdb0      	pop	{r4, r5, r7, pc}

08003aee <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 8003aee:	b580      	push	{r7, lr}
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003af6:	2001      	movs	r0, #1
 8003af8:	f7ff ffbc 	bl	8003a74 <_Z41__static_initialization_and_destruction_0ii>
 8003afc:	bd80      	pop	{r7, pc}

08003afe <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 8003afe:	b580      	push	{r7, lr}
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8003b06:	2000      	movs	r0, #0
 8003b08:	f7ff ffb4 	bl	8003a74 <_Z41__static_initialization_and_destruction_0ii>
 8003b0c:	bd80      	pop	{r7, pc}

08003b0e <UART_Init>:
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/

status_t UART_Init(stm32_DMA_uart_t* const self, UART_HandleTypeDef * const huart, const uint32_t rxBufferSize)
{
 8003b0e:	b580      	push	{r7, lr}
 8003b10:	b086      	sub	sp, #24
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	60f8      	str	r0, [r7, #12]
 8003b16:	60b9      	str	r1, [r7, #8]
 8003b18:	607a      	str	r2, [r7, #4]
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d006      	beq.n	8003b2e <UART_Init+0x20>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d003      	beq.n	8003b2e <UART_Init+0x20>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b2c:	d902      	bls.n	8003b34 <UART_Init+0x26>
		return ERROR_INVALID_ARGUMENT;
 8003b2e:	f06f 0304 	mvn.w	r3, #4
 8003b32:	e045      	b.n	8003bc0 <UART_Init+0xb2>
	}

	memset(self, 0, sizeof(stm32_DMA_uart_t));
 8003b34:	222c      	movs	r2, #44	@ 0x2c
 8003b36:	2100      	movs	r1, #0
 8003b38:	68f8      	ldr	r0, [r7, #12]
 8003b3a:	f000 fcca 	bl	80044d2 <memset>
	self->huart = huart;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	68ba      	ldr	r2, [r7, #8]
 8003b42:	601a      	str	r2, [r3, #0]
	self->isTxBusy_ = false;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	711a      	strb	r2, [r3, #4]

#ifdef UART_CONTAINER_ENA

	if(pushContainerUartInstance(self) != STATUS_OK) {
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f000 fa50 	bl	8003ff0 <pushContainerUartInstance>
 8003b50:	4603      	mov	r3, r0
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d008      	beq.n	8003b68 <UART_Init+0x5a>
		self->isTxBusy_ = true;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	2201      	movs	r2, #1
 8003b5a:	711a      	strb	r2, [r3, #4]
		self->RX.rxBufferSize = 0;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	619a      	str	r2, [r3, #24]
		return ERROR_FAIL;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
 8003b66:	e02b      	b.n	8003bc0 <UART_Init+0xb2>
	}

#endif /* UART_CONTAINER_ENA */

	void* const buf1 = malloc(rxBufferSize);
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f000 fac3 	bl	80040f4 <malloc>
 8003b6e:	4603      	mov	r3, r0
 8003b70:	617b      	str	r3, [r7, #20]
	if(buf1 == NULL) {
 8003b72:	697b      	ldr	r3, [r7, #20]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <UART_Init+0x70>
		return ERROR_FAIL;
 8003b78:	f04f 33ff 	mov.w	r3, #4294967295
 8003b7c:	e020      	b.n	8003bc0 <UART_Init+0xb2>
	}
	void* const buf2 = malloc(rxBufferSize);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fab8 	bl	80040f4 <malloc>
 8003b84:	4603      	mov	r3, r0
 8003b86:	613b      	str	r3, [r7, #16]
	if(buf2 == NULL) {
 8003b88:	693b      	ldr	r3, [r7, #16]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d105      	bne.n	8003b9a <UART_Init+0x8c>
		free(buf1);
 8003b8e:	6978      	ldr	r0, [r7, #20]
 8003b90:	f000 fab8 	bl	8004104 <free>
		return ERROR_FAIL;
 8003b94:	f04f 33ff 	mov.w	r3, #4294967295
 8003b98:	e012      	b.n	8003bc0 <UART_Init+0xb2>
	}

	self->RX.rxBuffer1 = buf1;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	697a      	ldr	r2, [r7, #20]
 8003b9e:	61da      	str	r2, [r3, #28]
	self->RX.rxBuffer2 = buf2;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	621a      	str	r2, [r3, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]

	//HAL_UART_Receive_DMA(huart, self->RX.rxBuffer1, rxBufferSize);
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	69da      	ldr	r2, [r3, #28]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	629a      	str	r2, [r3, #40]	@ 0x28
	UART_SetRxCallback(self, 0, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f000 f873 	bl	8003ca4 <UART_SetRxCallback>

	return STATUS_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3718      	adds	r7, #24
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_new>:

stm32_DMA_uart_t* const UART_new(UART_HandleTypeDef * const huart, const uint32_t rxBufferSize)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b084      	sub	sp, #16
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
	stm32_DMA_uart_t* const m = malloc(sizeof(stm32_DMA_uart_t));
 8003bd2:	202c      	movs	r0, #44	@ 0x2c
 8003bd4:	f000 fa8e 	bl	80040f4 <malloc>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	60fb      	str	r3, [r7, #12]
	if(m == NULL) {
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d101      	bne.n	8003be6 <UART_new+0x1e>
		return NULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e00d      	b.n	8003c02 <UART_new+0x3a>
	}

	if(UART_Init(m, huart, rxBufferSize) != STATUS_OK) {
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	6879      	ldr	r1, [r7, #4]
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff ff8f 	bl	8003b0e <UART_Init>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d004      	beq.n	8003c00 <UART_new+0x38>
		free(m);
 8003bf6:	68f8      	ldr	r0, [r7, #12]
 8003bf8:	f000 fa84 	bl	8004104 <free>
		return NULL;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	e000      	b.n	8003c02 <UART_new+0x3a>
	}

	return m;
 8003c00:	68fb      	ldr	r3, [r7, #12]
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}

08003c0a <UART_SendBuffer>:

	return STATUS_OK;
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
 8003c0a:	b580      	push	{r7, lr}
 8003c0c:	b086      	sub	sp, #24
 8003c0e:	af00      	add	r7, sp, #0
 8003c10:	60f8      	str	r0, [r7, #12]
 8003c12:	60b9      	str	r1, [r7, #8]
 8003c14:	607a      	str	r2, [r7, #4]
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d002      	beq.n	8003c22 <UART_SendBuffer+0x18>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d102      	bne.n	8003c28 <UART_SendBuffer+0x1e>
		return ERROR_INVALID_ARGUMENT;
 8003c22:	f06f 0304 	mvn.w	r3, #4
 8003c26:	e020      	b.n	8003c6a <UART_SendBuffer+0x60>
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8003c28:	f7ff f942 	bl	8002eb0 <IRQ_LOCK>
	if (self->isTxBusy_) {
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	791b      	ldrb	r3, [r3, #4]
 8003c30:	b2db      	uxtb	r3, r3
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <UART_SendBuffer+0x34>
		IRQ_UNLOCK();
 8003c36:	f7ff f919 	bl	8002e6c <IRQ_UNLOCK>
		return STATUS_BUSY;
 8003c3a:	2302      	movs	r3, #2
 8003c3c:	e015      	b.n	8003c6a <UART_SendBuffer+0x60>
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2201      	movs	r2, #1
 8003c42:	711a      	strb	r2, [r3, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	b292      	uxth	r2, r2
 8003c4c:	68b9      	ldr	r1, [r7, #8]
 8003c4e:	4618      	mov	r0, r3
 8003c50:	f7fd ffee 	bl	8001c30 <HAL_UART_Transmit_DMA>
 8003c54:	4603      	mov	r3, r0
 8003c56:	75fb      	strb	r3, [r7, #23]
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8003c58:	f7ff f908 	bl	8002e6c <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 8003c5c:	7dfb      	ldrb	r3, [r7, #23]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <UART_SendBuffer+0x5e>
		return ERROR_FAIL;
 8003c62:	f04f 33ff 	mov.w	r3, #4294967295
 8003c66:	e000      	b.n	8003c6a <UART_SendBuffer+0x60>
	}

	return STATUS_OK;
 8003c68:	2300      	movs	r3, #0
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3718      	adds	r7, #24
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}

08003c72 <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
 8003c72:	b480      	push	{r7}
 8003c74:	b085      	sub	sp, #20
 8003c76:	af00      	add	r7, sp, #0
 8003c78:	60f8      	str	r0, [r7, #12]
 8003c7a:	60b9      	str	r1, [r7, #8]
 8003c7c:	607a      	str	r2, [r7, #4]
	if (self->isTxBusy_) {
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	791b      	ldrb	r3, [r3, #4]
 8003c82:	b2db      	uxtb	r3, r3
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <UART_SetTxcallback+0x1a>
		return STATUS_BUSY;
 8003c88:	2302      	movs	r3, #2
 8003c8a:	e006      	b.n	8003c9a <UART_SetTxcallback+0x28>
	}

	self->TX.txCallback_ = f;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	68ba      	ldr	r2, [r7, #8]
 8003c90:	609a      	str	r2, [r3, #8]
	self->TX.txCallbackData_ = captured;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	60da      	str	r2, [r3, #12]

	return STATUS_OK;
 8003c98:	2300      	movs	r3, #0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bc80      	pop	{r7}
 8003ca2:	4770      	bx	lr

08003ca4 <UART_SetRxCallback>:


void UART_SetRxCallback(stm32_DMA_uart_t* const self, const uart_rx_callback_t f, void* const captured)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b088      	sub	sp, #32
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	61fb      	str	r3, [r7, #28]

	self->RX.rxCallback_ = f;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	611a      	str	r2, [r3, #16]
	self->RX.rxCallbackData_ = captured;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	615a      	str	r2, [r3, #20]

	/* Start receiving */
	if (f) {
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d015      	beq.n	8003cf4 <UART_SetRxCallback+0x50>
		uint8_t* const r_rxBuffer = self->RX.rxBuffer1;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	69db      	ldr	r3, [r3, #28]
 8003ccc:	61bb      	str	r3, [r7, #24]
		const uint32_t r_buff_size = self->RX.rxBufferSize;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	617b      	str	r3, [r7, #20]

		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 8003cd4:	697b      	ldr	r3, [r7, #20]
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	461a      	mov	r2, r3
 8003cda:	69b9      	ldr	r1, [r7, #24]
 8003cdc:	69f8      	ldr	r0, [r7, #28]
 8003cde:	f7fe f817 	bl	8001d10 <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68da      	ldr	r2, [r3, #12]
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f042 0210 	orr.w	r2, r2, #16
 8003cf0:	60da      	str	r2, [r3, #12]
	} else {
		HAL_UART_AbortReceive(huart);
		UART_RXCallback(self);
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
	}
}
 8003cf2:	e00d      	b.n	8003d10 <UART_SetRxCallback+0x6c>
		HAL_UART_AbortReceive(huart);
 8003cf4:	69f8      	ldr	r0, [r7, #28]
 8003cf6:	f7fe f830 	bl	8001d5a <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8003cfa:	68f8      	ldr	r0, [r7, #12]
 8003cfc:	f000 f840 	bl	8003d80 <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	69fb      	ldr	r3, [r7, #28]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f022 0210 	bic.w	r2, r2, #16
 8003d0e:	60da      	str	r2, [r3, #12]
}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <UART_SetErrorCallback>:

void UART_SetErrorCallback(stm32_DMA_uart_t* const self, const uart_error_callback_t f, void* const captured)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b085      	sub	sp, #20
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	60f8      	str	r0, [r7, #12]
 8003d20:	60b9      	str	r1, [r7, #8]
 8003d22:	607a      	str	r2, [r7, #4]
	self->Error.errorCallback = f;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	68ba      	ldr	r2, [r7, #8]
 8003d28:	625a      	str	r2, [r3, #36]	@ 0x24
	self->Error.errorCallbackData_ = captured;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003d30:	bf00      	nop
 8003d32:	3714      	adds	r7, #20
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bc80      	pop	{r7}
 8003d38:	4770      	bx	lr

08003d3a <USER_UART_IRQHandler>:
* IT Callbacks
 *****************************************************************************/

//general in stm32f1xx_it.c
void USER_UART_IRQHandler(stm32_DMA_uart_t* const self)
{
 8003d3a:	b580      	push	{r7, lr}
 8003d3c:	b084      	sub	sp, #16
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	60fb      	str	r3, [r7, #12]

	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f003 0310 	and.w	r3, r3, #16
 8003d52:	2b10      	cmp	r3, #16
 8003d54:	d110      	bne.n	8003d78 <USER_UART_IRQHandler+0x3e>
		// On idle interruption
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8003d56:	2300      	movs	r3, #0
 8003d58:	60bb      	str	r3, [r7, #8]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_AbortReceive(huart);
 8003d6c:	68f8      	ldr	r0, [r7, #12]
 8003d6e:	f7fd fff4 	bl	8001d5a <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f804 	bl	8003d80 <UART_RXCallback>
	}
}
 8003d78:	bf00      	nop
 8003d7a:	3710      	adds	r7, #16
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <UART_RXCallback>:

// rx callback in void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void UART_RXCallback(stm32_DMA_uart_t* const self)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08c      	sub	sp, #48	@ 0x30
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	699b      	ldr	r3, [r3, #24]
 8003d9e:	623b      	str	r3, [r7, #32]

	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8003da0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003da2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003da6:	429a      	cmp	r2, r3
 8003da8:	d00b      	beq.n	8003dc2 <UART_RXCallback+0x42>
 8003daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d006      	beq.n	8003dc2 <UART_RXCallback+0x42>
 8003db4:	4b20      	ldr	r3, [pc, #128]	@ (8003e38 <UART_RXCallback+0xb8>)
 8003db6:	4a21      	ldr	r2, [pc, #132]	@ (8003e3c <UART_RXCallback+0xbc>)
 8003db8:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8003dbc:	4820      	ldr	r0, [pc, #128]	@ (8003e40 <UART_RXCallback+0xc0>)
 8003dbe:	f000 f97b 	bl	80040b8 <__assert_func>

	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	6a3a      	ldr	r2, [r7, #32]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	61fb      	str	r3, [r7, #28]
	uint8_t* const curr = huart->pRxBuffPtr;
 8003dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dd4:	61bb      	str	r3, [r7, #24]
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dda:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003ddc:	429a      	cmp	r2, r3
 8003dde:	d101      	bne.n	8003de4 <UART_RXCallback+0x64>
 8003de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de2:	e000      	b.n	8003de6 <UART_RXCallback+0x66>
 8003de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003de6:	617b      	str	r3, [r7, #20]

	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8003de8:	6a3b      	ldr	r3, [r7, #32]
 8003dea:	b29b      	uxth	r3, r3
 8003dec:	461a      	mov	r2, r3
 8003dee:	6979      	ldr	r1, [r7, #20]
 8003df0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8003df2:	f7fd ff8d 	bl	8001d10 <HAL_UART_Receive_DMA>
 8003df6:	4603      	mov	r3, r0
 8003df8:	74fb      	strb	r3, [r7, #19]
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 8003dfa:	7cfb      	ldrb	r3, [r7, #19]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d105      	bne.n	8003e0c <UART_RXCallback+0x8c>
 8003e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e06:	b2db      	uxtb	r3, r3
 8003e08:	2be0      	cmp	r3, #224	@ 0xe0
 8003e0a:	d102      	bne.n	8003e12 <UART_RXCallback+0x92>
		UART_ErrorCallback(self);
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 f83d 	bl	8003e8c <UART_ErrorCallback>
	}


	void* const captured = self->RX.rxCallbackData_;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	60fb      	str	r3, [r7, #12]
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	691b      	ldr	r3, [r3, #16]
 8003e1c:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8003e1e:	68bb      	ldr	r3, [r7, #8]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d004      	beq.n	8003e2e <UART_RXCallback+0xae>
		callback(curr, size, captured);
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	68fa      	ldr	r2, [r7, #12]
 8003e28:	69f9      	ldr	r1, [r7, #28]
 8003e2a:	69b8      	ldr	r0, [r7, #24]
 8003e2c:	4798      	blx	r3
	}
}
 8003e2e:	bf00      	nop
 8003e30:	3730      	adds	r7, #48	@ 0x30
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	080050c0 	.word	0x080050c0
 8003e3c:	08005164 	.word	0x08005164
 8003e40:	08005108 	.word	0x08005108

08003e44 <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b086      	sub	sp, #24
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
	void* const captured = self->TX.txCallbackData_;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	617b      	str	r3, [r7, #20]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	613b      	str	r3, [r7, #16]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	2be0      	cmp	r3, #224	@ 0xe0
 8003e64:	d102      	bne.n	8003e6c <UART_TXCallback+0x28>
 8003e66:	f04f 33ff 	mov.w	r3, #4294967295
 8003e6a:	e000      	b.n	8003e6e <UART_TXCallback+0x2a>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]
	self->isTxBusy_ = false;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	711a      	strb	r2, [r3, #4]

	if (callback) {
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d003      	beq.n	8003e84 <UART_TXCallback+0x40>
		callback(status, captured);
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	6979      	ldr	r1, [r7, #20]
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	4798      	blx	r3
	}
}
 8003e84:	bf00      	nop
 8003e86:	3718      	adds	r7, #24
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b086      	sub	sp, #24
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	613b      	str	r3, [r7, #16]
	status_t status = ERROR_FAIL;
 8003e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9e:	617b      	str	r3, [r7, #20]

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea4:	f003 0308 	and.w	r3, r3, #8
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d003      	beq.n	8003eb4 <UART_ErrorCallback+0x28>
		status = ERROR_UART_RX_OVERRUN;
 8003eac:	f06f 0347 	mvn.w	r3, #71	@ 0x47
 8003eb0:	617b      	str	r3, [r7, #20]
 8003eb2:	e054      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <UART_ErrorCallback+0x3c>
		status = ERROR_UART_FRAMING_ERR;
 8003ec0:	f06f 0349 	mvn.w	r3, #73	@ 0x49
 8003ec4:	617b      	str	r3, [r7, #20]
 8003ec6:	e04a      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8003ec8:	693b      	ldr	r3, [r7, #16]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d003      	beq.n	8003edc <UART_ErrorCallback+0x50>
		status = ERROR_UART_RX_NOISE;
 8003ed4:	f06f 0348 	mvn.w	r3, #72	@ 0x48
 8003ed8:	617b      	str	r3, [r7, #20]
 8003eda:	e040      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <UART_ErrorCallback+0x64>
		status = ERROR_UART_TX_DMA_ERR;
 8003ee8:	f06f 034a 	mvn.w	r3, #74	@ 0x4a
 8003eec:	617b      	str	r3, [r7, #20]
 8003eee:	e036      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ef6:	b2db      	uxtb	r3, r3
 8003ef8:	2b24      	cmp	r3, #36	@ 0x24
 8003efa:	d102      	bne.n	8003f02 <UART_ErrorCallback+0x76>
		status = STATUS_BUSY;
 8003efc:	2302      	movs	r3, #2
 8003efe:	617b      	str	r3, [r7, #20]
 8003f00:	e02d      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b22      	cmp	r3, #34	@ 0x22
 8003f0c:	d102      	bne.n	8003f14 <UART_ErrorCallback+0x88>
		status = STATUS_BUSY;
 8003f0e:	2302      	movs	r3, #2
 8003f10:	617b      	str	r3, [r7, #20]
 8003f12:	e024      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b21      	cmp	r3, #33	@ 0x21
 8003f1e:	d102      	bne.n	8003f26 <UART_ErrorCallback+0x9a>
		status = STATUS_BUSY;
 8003f20:	2302      	movs	r3, #2
 8003f22:	617b      	str	r3, [r7, #20]
 8003f24:	e01b      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b23      	cmp	r3, #35	@ 0x23
 8003f30:	d102      	bne.n	8003f38 <UART_ErrorCallback+0xac>
		status = STATUS_BUSY;
 8003f32:	2302      	movs	r3, #2
 8003f34:	617b      	str	r3, [r7, #20]
 8003f36:	e012      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	2be0      	cmp	r3, #224	@ 0xe0
 8003f42:	d103      	bne.n	8003f4c <UART_ErrorCallback+0xc0>
		status = ERROR_FAIL;
 8003f44:	f04f 33ff 	mov.w	r3, #4294967295
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	e008      	b.n	8003f5e <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2ba0      	cmp	r3, #160	@ 0xa0
 8003f56:	d102      	bne.n	8003f5e <UART_ErrorCallback+0xd2>
		status = ERROR_TIMEOUT;
 8003f58:	f06f 0305 	mvn.w	r3, #5
 8003f5c:	617b      	str	r3, [r7, #20]
	}

	void* const captured = self->Error.errorCallbackData_;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f62:	60fb      	str	r3, [r7, #12]
	const uart_error_callback_t callback = self->Error.errorCallback;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d003      	beq.n	8003f78 <UART_ErrorCallback+0xec>
		callback(status, captured);
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	68f9      	ldr	r1, [r7, #12]
 8003f74:	6978      	ldr	r0, [r7, #20]
 8003f76:	4798      	blx	r3
	}
}
 8003f78:	bf00      	nop
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <initUartsContainer>:

stm32_DMA_uart_t* m_instances[UART_CONTAINER_COUNT];
uint8_t m_instance_counter = 0;

void initUartsContainer(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
	memset(m_instances, 0, sizeof(m_instances));
 8003f84:	2214      	movs	r2, #20
 8003f86:	2100      	movs	r1, #0
 8003f88:	4803      	ldr	r0, [pc, #12]	@ (8003f98 <initUartsContainer+0x18>)
 8003f8a:	f000 faa2 	bl	80044d2 <memset>
	m_instance_counter = 0;
 8003f8e:	4b03      	ldr	r3, [pc, #12]	@ (8003f9c <initUartsContainer+0x1c>)
 8003f90:	2200      	movs	r2, #0
 8003f92:	701a      	strb	r2, [r3, #0]
}
 8003f94:	bf00      	nop
 8003f96:	bd80      	pop	{r7, pc}
 8003f98:	20000174 	.word	0x20000174
 8003f9c:	20000188 	.word	0x20000188

08003fa0 <getContainerUartInstance>:

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	const uint8_t r_inst_cnt = m_instance_counter;
 8003fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <getContainerUartInstance+0x48>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	73bb      	strb	r3, [r7, #14]

	for(uint8_t i = 0; i < r_inst_cnt; ++i) {
 8003fae:	2300      	movs	r3, #0
 8003fb0:	73fb      	strb	r3, [r7, #15]
 8003fb2:	e00e      	b.n	8003fd2 <getContainerUartInstance+0x32>
		stm32_DMA_uart_t* const r_inst = m_instances[i];
 8003fb4:	7bfb      	ldrb	r3, [r7, #15]
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8003fec <getContainerUartInstance+0x4c>)
 8003fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fbc:	60bb      	str	r3, [r7, #8]

		//if(r_inst->huart->Instance == huart->Instance) { // must be optimized
		if(r_inst->huart == huart) {
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	687a      	ldr	r2, [r7, #4]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d101      	bne.n	8003fcc <getContainerUartInstance+0x2c>
			return r_inst;
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	e007      	b.n	8003fdc <getContainerUartInstance+0x3c>
	for(uint8_t i = 0; i < r_inst_cnt; ++i) {
 8003fcc:	7bfb      	ldrb	r3, [r7, #15]
 8003fce:	3301      	adds	r3, #1
 8003fd0:	73fb      	strb	r3, [r7, #15]
 8003fd2:	7bfa      	ldrb	r2, [r7, #15]
 8003fd4:	7bbb      	ldrb	r3, [r7, #14]
 8003fd6:	429a      	cmp	r2, r3
 8003fd8:	d3ec      	bcc.n	8003fb4 <getContainerUartInstance+0x14>
		}
	}

	return NULL;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3714      	adds	r7, #20
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	20000188 	.word	0x20000188
 8003fec:	20000174 	.word	0x20000174

08003ff0 <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
	if(inst == NULL || (m_instance_counter == UART_CONTAINER_COUNT)) {
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <pushContainerUartInstance+0x16>
 8003ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8004034 <pushContainerUartInstance+0x44>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b05      	cmp	r3, #5
 8004004:	d102      	bne.n	800400c <pushContainerUartInstance+0x1c>
		return ERROR_FAIL;
 8004006:	f04f 33ff 	mov.w	r3, #4294967295
 800400a:	e00d      	b.n	8004028 <pushContainerUartInstance+0x38>
	}

	m_instances[m_instance_counter] = inst;
 800400c:	4b09      	ldr	r3, [pc, #36]	@ (8004034 <pushContainerUartInstance+0x44>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	4619      	mov	r1, r3
 8004012:	4a09      	ldr	r2, [pc, #36]	@ (8004038 <pushContainerUartInstance+0x48>)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	++m_instance_counter;
 800401a:	4b06      	ldr	r3, [pc, #24]	@ (8004034 <pushContainerUartInstance+0x44>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	3301      	adds	r3, #1
 8004020:	b2da      	uxtb	r2, r3
 8004022:	4b04      	ldr	r3, [pc, #16]	@ (8004034 <pushContainerUartInstance+0x44>)
 8004024:	701a      	strb	r2, [r3, #0]


	return STATUS_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	20000188 	.word	0x20000188
 8004038:	20000174 	.word	0x20000174

0800403c <_ZdlPvj>:
 800403c:	f000 b829 	b.w	8004092 <_ZdlPv>

08004040 <__cxa_guard_acquire>:
 8004040:	6802      	ldr	r2, [r0, #0]
 8004042:	4603      	mov	r3, r0
 8004044:	07d2      	lsls	r2, r2, #31
 8004046:	d405      	bmi.n	8004054 <__cxa_guard_acquire+0x14>
 8004048:	7842      	ldrb	r2, [r0, #1]
 800404a:	b102      	cbz	r2, 800404e <__cxa_guard_acquire+0xe>
 800404c:	deff      	udf	#255	@ 0xff
 800404e:	2001      	movs	r0, #1
 8004050:	7058      	strb	r0, [r3, #1]
 8004052:	4770      	bx	lr
 8004054:	2000      	movs	r0, #0
 8004056:	4770      	bx	lr

08004058 <__cxa_guard_release>:
 8004058:	2301      	movs	r3, #1
 800405a:	6003      	str	r3, [r0, #0]
 800405c:	4770      	bx	lr

0800405e <_Znwj>:
 800405e:	2801      	cmp	r0, #1
 8004060:	bf38      	it	cc
 8004062:	2001      	movcc	r0, #1
 8004064:	b510      	push	{r4, lr}
 8004066:	4604      	mov	r4, r0
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f843 	bl	80040f4 <malloc>
 800406e:	b100      	cbz	r0, 8004072 <_Znwj+0x14>
 8004070:	bd10      	pop	{r4, pc}
 8004072:	f000 f811 	bl	8004098 <_ZSt15get_new_handlerv>
 8004076:	b908      	cbnz	r0, 800407c <_Znwj+0x1e>
 8004078:	f000 f816 	bl	80040a8 <abort>
 800407c:	4780      	blx	r0
 800407e:	e7f3      	b.n	8004068 <_Znwj+0xa>

08004080 <_ZSt17__throw_bad_allocv>:
 8004080:	b508      	push	{r3, lr}
 8004082:	f000 f811 	bl	80040a8 <abort>

08004086 <_ZSt28__throw_bad_array_new_lengthv>:
 8004086:	b508      	push	{r3, lr}
 8004088:	f000 f80e 	bl	80040a8 <abort>

0800408c <_ZSt20__throw_length_errorPKc>:
 800408c:	b508      	push	{r3, lr}
 800408e:	f000 f80b 	bl	80040a8 <abort>

08004092 <_ZdlPv>:
 8004092:	f000 b837 	b.w	8004104 <free>
	...

08004098 <_ZSt15get_new_handlerv>:
 8004098:	4b02      	ldr	r3, [pc, #8]	@ (80040a4 <_ZSt15get_new_handlerv+0xc>)
 800409a:	6818      	ldr	r0, [r3, #0]
 800409c:	f3bf 8f5b 	dmb	ish
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	2000018c 	.word	0x2000018c

080040a8 <abort>:
 80040a8:	2006      	movs	r0, #6
 80040aa:	b508      	push	{r3, lr}
 80040ac:	f000 fa42 	bl	8004534 <raise>
 80040b0:	2001      	movs	r0, #1
 80040b2:	f7fc f9ba 	bl	800042a <_exit>
	...

080040b8 <__assert_func>:
 80040b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040ba:	4614      	mov	r4, r2
 80040bc:	461a      	mov	r2, r3
 80040be:	4b09      	ldr	r3, [pc, #36]	@ (80040e4 <__assert_func+0x2c>)
 80040c0:	4605      	mov	r5, r0
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68d8      	ldr	r0, [r3, #12]
 80040c6:	b954      	cbnz	r4, 80040de <__assert_func+0x26>
 80040c8:	4b07      	ldr	r3, [pc, #28]	@ (80040e8 <__assert_func+0x30>)
 80040ca:	461c      	mov	r4, r3
 80040cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80040d0:	9100      	str	r1, [sp, #0]
 80040d2:	462b      	mov	r3, r5
 80040d4:	4905      	ldr	r1, [pc, #20]	@ (80040ec <__assert_func+0x34>)
 80040d6:	f000 f96f 	bl	80043b8 <fiprintf>
 80040da:	f7ff ffe5 	bl	80040a8 <abort>
 80040de:	4b04      	ldr	r3, [pc, #16]	@ (80040f0 <__assert_func+0x38>)
 80040e0:	e7f4      	b.n	80040cc <__assert_func+0x14>
 80040e2:	bf00      	nop
 80040e4:	20000018 	.word	0x20000018
 80040e8:	080051af 	.word	0x080051af
 80040ec:	08005181 	.word	0x08005181
 80040f0:	08005174 	.word	0x08005174

080040f4 <malloc>:
 80040f4:	4b02      	ldr	r3, [pc, #8]	@ (8004100 <malloc+0xc>)
 80040f6:	4601      	mov	r1, r0
 80040f8:	6818      	ldr	r0, [r3, #0]
 80040fa:	f000 b82d 	b.w	8004158 <_malloc_r>
 80040fe:	bf00      	nop
 8004100:	20000018 	.word	0x20000018

08004104 <free>:
 8004104:	4b02      	ldr	r3, [pc, #8]	@ (8004110 <free+0xc>)
 8004106:	4601      	mov	r1, r0
 8004108:	6818      	ldr	r0, [r3, #0]
 800410a:	f000 bab3 	b.w	8004674 <_free_r>
 800410e:	bf00      	nop
 8004110:	20000018 	.word	0x20000018

08004114 <sbrk_aligned>:
 8004114:	b570      	push	{r4, r5, r6, lr}
 8004116:	4e0f      	ldr	r6, [pc, #60]	@ (8004154 <sbrk_aligned+0x40>)
 8004118:	460c      	mov	r4, r1
 800411a:	6831      	ldr	r1, [r6, #0]
 800411c:	4605      	mov	r5, r0
 800411e:	b911      	cbnz	r1, 8004126 <sbrk_aligned+0x12>
 8004120:	f000 fa58 	bl	80045d4 <_sbrk_r>
 8004124:	6030      	str	r0, [r6, #0]
 8004126:	4621      	mov	r1, r4
 8004128:	4628      	mov	r0, r5
 800412a:	f000 fa53 	bl	80045d4 <_sbrk_r>
 800412e:	1c43      	adds	r3, r0, #1
 8004130:	d103      	bne.n	800413a <sbrk_aligned+0x26>
 8004132:	f04f 34ff 	mov.w	r4, #4294967295
 8004136:	4620      	mov	r0, r4
 8004138:	bd70      	pop	{r4, r5, r6, pc}
 800413a:	1cc4      	adds	r4, r0, #3
 800413c:	f024 0403 	bic.w	r4, r4, #3
 8004140:	42a0      	cmp	r0, r4
 8004142:	d0f8      	beq.n	8004136 <sbrk_aligned+0x22>
 8004144:	1a21      	subs	r1, r4, r0
 8004146:	4628      	mov	r0, r5
 8004148:	f000 fa44 	bl	80045d4 <_sbrk_r>
 800414c:	3001      	adds	r0, #1
 800414e:	d1f2      	bne.n	8004136 <sbrk_aligned+0x22>
 8004150:	e7ef      	b.n	8004132 <sbrk_aligned+0x1e>
 8004152:	bf00      	nop
 8004154:	20000190 	.word	0x20000190

08004158 <_malloc_r>:
 8004158:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800415c:	1ccd      	adds	r5, r1, #3
 800415e:	f025 0503 	bic.w	r5, r5, #3
 8004162:	3508      	adds	r5, #8
 8004164:	2d0c      	cmp	r5, #12
 8004166:	bf38      	it	cc
 8004168:	250c      	movcc	r5, #12
 800416a:	2d00      	cmp	r5, #0
 800416c:	4606      	mov	r6, r0
 800416e:	db01      	blt.n	8004174 <_malloc_r+0x1c>
 8004170:	42a9      	cmp	r1, r5
 8004172:	d904      	bls.n	800417e <_malloc_r+0x26>
 8004174:	230c      	movs	r3, #12
 8004176:	6033      	str	r3, [r6, #0]
 8004178:	2000      	movs	r0, #0
 800417a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800417e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004254 <_malloc_r+0xfc>
 8004182:	f000 f869 	bl	8004258 <__malloc_lock>
 8004186:	f8d8 3000 	ldr.w	r3, [r8]
 800418a:	461c      	mov	r4, r3
 800418c:	bb44      	cbnz	r4, 80041e0 <_malloc_r+0x88>
 800418e:	4629      	mov	r1, r5
 8004190:	4630      	mov	r0, r6
 8004192:	f7ff ffbf 	bl	8004114 <sbrk_aligned>
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	4604      	mov	r4, r0
 800419a:	d158      	bne.n	800424e <_malloc_r+0xf6>
 800419c:	f8d8 4000 	ldr.w	r4, [r8]
 80041a0:	4627      	mov	r7, r4
 80041a2:	2f00      	cmp	r7, #0
 80041a4:	d143      	bne.n	800422e <_malloc_r+0xd6>
 80041a6:	2c00      	cmp	r4, #0
 80041a8:	d04b      	beq.n	8004242 <_malloc_r+0xea>
 80041aa:	6823      	ldr	r3, [r4, #0]
 80041ac:	4639      	mov	r1, r7
 80041ae:	4630      	mov	r0, r6
 80041b0:	eb04 0903 	add.w	r9, r4, r3
 80041b4:	f000 fa0e 	bl	80045d4 <_sbrk_r>
 80041b8:	4581      	cmp	r9, r0
 80041ba:	d142      	bne.n	8004242 <_malloc_r+0xea>
 80041bc:	6821      	ldr	r1, [r4, #0]
 80041be:	4630      	mov	r0, r6
 80041c0:	1a6d      	subs	r5, r5, r1
 80041c2:	4629      	mov	r1, r5
 80041c4:	f7ff ffa6 	bl	8004114 <sbrk_aligned>
 80041c8:	3001      	adds	r0, #1
 80041ca:	d03a      	beq.n	8004242 <_malloc_r+0xea>
 80041cc:	6823      	ldr	r3, [r4, #0]
 80041ce:	442b      	add	r3, r5
 80041d0:	6023      	str	r3, [r4, #0]
 80041d2:	f8d8 3000 	ldr.w	r3, [r8]
 80041d6:	685a      	ldr	r2, [r3, #4]
 80041d8:	bb62      	cbnz	r2, 8004234 <_malloc_r+0xdc>
 80041da:	f8c8 7000 	str.w	r7, [r8]
 80041de:	e00f      	b.n	8004200 <_malloc_r+0xa8>
 80041e0:	6822      	ldr	r2, [r4, #0]
 80041e2:	1b52      	subs	r2, r2, r5
 80041e4:	d420      	bmi.n	8004228 <_malloc_r+0xd0>
 80041e6:	2a0b      	cmp	r2, #11
 80041e8:	d917      	bls.n	800421a <_malloc_r+0xc2>
 80041ea:	1961      	adds	r1, r4, r5
 80041ec:	42a3      	cmp	r3, r4
 80041ee:	6025      	str	r5, [r4, #0]
 80041f0:	bf18      	it	ne
 80041f2:	6059      	strne	r1, [r3, #4]
 80041f4:	6863      	ldr	r3, [r4, #4]
 80041f6:	bf08      	it	eq
 80041f8:	f8c8 1000 	streq.w	r1, [r8]
 80041fc:	5162      	str	r2, [r4, r5]
 80041fe:	604b      	str	r3, [r1, #4]
 8004200:	4630      	mov	r0, r6
 8004202:	f000 f82f 	bl	8004264 <__malloc_unlock>
 8004206:	f104 000b 	add.w	r0, r4, #11
 800420a:	1d23      	adds	r3, r4, #4
 800420c:	f020 0007 	bic.w	r0, r0, #7
 8004210:	1ac2      	subs	r2, r0, r3
 8004212:	bf1c      	itt	ne
 8004214:	1a1b      	subne	r3, r3, r0
 8004216:	50a3      	strne	r3, [r4, r2]
 8004218:	e7af      	b.n	800417a <_malloc_r+0x22>
 800421a:	6862      	ldr	r2, [r4, #4]
 800421c:	42a3      	cmp	r3, r4
 800421e:	bf0c      	ite	eq
 8004220:	f8c8 2000 	streq.w	r2, [r8]
 8004224:	605a      	strne	r2, [r3, #4]
 8004226:	e7eb      	b.n	8004200 <_malloc_r+0xa8>
 8004228:	4623      	mov	r3, r4
 800422a:	6864      	ldr	r4, [r4, #4]
 800422c:	e7ae      	b.n	800418c <_malloc_r+0x34>
 800422e:	463c      	mov	r4, r7
 8004230:	687f      	ldr	r7, [r7, #4]
 8004232:	e7b6      	b.n	80041a2 <_malloc_r+0x4a>
 8004234:	461a      	mov	r2, r3
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	42a3      	cmp	r3, r4
 800423a:	d1fb      	bne.n	8004234 <_malloc_r+0xdc>
 800423c:	2300      	movs	r3, #0
 800423e:	6053      	str	r3, [r2, #4]
 8004240:	e7de      	b.n	8004200 <_malloc_r+0xa8>
 8004242:	230c      	movs	r3, #12
 8004244:	4630      	mov	r0, r6
 8004246:	6033      	str	r3, [r6, #0]
 8004248:	f000 f80c 	bl	8004264 <__malloc_unlock>
 800424c:	e794      	b.n	8004178 <_malloc_r+0x20>
 800424e:	6005      	str	r5, [r0, #0]
 8004250:	e7d6      	b.n	8004200 <_malloc_r+0xa8>
 8004252:	bf00      	nop
 8004254:	20000194 	.word	0x20000194

08004258 <__malloc_lock>:
 8004258:	4801      	ldr	r0, [pc, #4]	@ (8004260 <__malloc_lock+0x8>)
 800425a:	f000 ba08 	b.w	800466e <__retarget_lock_acquire_recursive>
 800425e:	bf00      	nop
 8004260:	200002d8 	.word	0x200002d8

08004264 <__malloc_unlock>:
 8004264:	4801      	ldr	r0, [pc, #4]	@ (800426c <__malloc_unlock+0x8>)
 8004266:	f000 ba03 	b.w	8004670 <__retarget_lock_release_recursive>
 800426a:	bf00      	nop
 800426c:	200002d8 	.word	0x200002d8

08004270 <std>:
 8004270:	2300      	movs	r3, #0
 8004272:	b510      	push	{r4, lr}
 8004274:	4604      	mov	r4, r0
 8004276:	e9c0 3300 	strd	r3, r3, [r0]
 800427a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800427e:	6083      	str	r3, [r0, #8]
 8004280:	8181      	strh	r1, [r0, #12]
 8004282:	6643      	str	r3, [r0, #100]	@ 0x64
 8004284:	81c2      	strh	r2, [r0, #14]
 8004286:	6183      	str	r3, [r0, #24]
 8004288:	4619      	mov	r1, r3
 800428a:	2208      	movs	r2, #8
 800428c:	305c      	adds	r0, #92	@ 0x5c
 800428e:	f000 f920 	bl	80044d2 <memset>
 8004292:	4b0d      	ldr	r3, [pc, #52]	@ (80042c8 <std+0x58>)
 8004294:	6224      	str	r4, [r4, #32]
 8004296:	6263      	str	r3, [r4, #36]	@ 0x24
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <std+0x5c>)
 800429a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800429c:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <std+0x60>)
 800429e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80042a0:	4b0c      	ldr	r3, [pc, #48]	@ (80042d4 <std+0x64>)
 80042a2:	6323      	str	r3, [r4, #48]	@ 0x30
 80042a4:	4b0c      	ldr	r3, [pc, #48]	@ (80042d8 <std+0x68>)
 80042a6:	429c      	cmp	r4, r3
 80042a8:	d006      	beq.n	80042b8 <std+0x48>
 80042aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80042ae:	4294      	cmp	r4, r2
 80042b0:	d002      	beq.n	80042b8 <std+0x48>
 80042b2:	33d0      	adds	r3, #208	@ 0xd0
 80042b4:	429c      	cmp	r4, r3
 80042b6:	d105      	bne.n	80042c4 <std+0x54>
 80042b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80042bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c0:	f000 b9d4 	b.w	800466c <__retarget_lock_init_recursive>
 80042c4:	bd10      	pop	{r4, pc}
 80042c6:	bf00      	nop
 80042c8:	08004419 	.word	0x08004419
 80042cc:	0800443b 	.word	0x0800443b
 80042d0:	08004473 	.word	0x08004473
 80042d4:	08004497 	.word	0x08004497
 80042d8:	20000198 	.word	0x20000198

080042dc <stdio_exit_handler>:
 80042dc:	4a02      	ldr	r2, [pc, #8]	@ (80042e8 <stdio_exit_handler+0xc>)
 80042de:	4903      	ldr	r1, [pc, #12]	@ (80042ec <stdio_exit_handler+0x10>)
 80042e0:	4803      	ldr	r0, [pc, #12]	@ (80042f0 <stdio_exit_handler+0x14>)
 80042e2:	f000 b87b 	b.w	80043dc <_fwalk_sglue>
 80042e6:	bf00      	nop
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	08004da9 	.word	0x08004da9
 80042f0:	2000001c 	.word	0x2000001c

080042f4 <cleanup_stdio>:
 80042f4:	6841      	ldr	r1, [r0, #4]
 80042f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004328 <cleanup_stdio+0x34>)
 80042f8:	b510      	push	{r4, lr}
 80042fa:	4299      	cmp	r1, r3
 80042fc:	4604      	mov	r4, r0
 80042fe:	d001      	beq.n	8004304 <cleanup_stdio+0x10>
 8004300:	f000 fd52 	bl	8004da8 <_fflush_r>
 8004304:	68a1      	ldr	r1, [r4, #8]
 8004306:	4b09      	ldr	r3, [pc, #36]	@ (800432c <cleanup_stdio+0x38>)
 8004308:	4299      	cmp	r1, r3
 800430a:	d002      	beq.n	8004312 <cleanup_stdio+0x1e>
 800430c:	4620      	mov	r0, r4
 800430e:	f000 fd4b 	bl	8004da8 <_fflush_r>
 8004312:	68e1      	ldr	r1, [r4, #12]
 8004314:	4b06      	ldr	r3, [pc, #24]	@ (8004330 <cleanup_stdio+0x3c>)
 8004316:	4299      	cmp	r1, r3
 8004318:	d004      	beq.n	8004324 <cleanup_stdio+0x30>
 800431a:	4620      	mov	r0, r4
 800431c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004320:	f000 bd42 	b.w	8004da8 <_fflush_r>
 8004324:	bd10      	pop	{r4, pc}
 8004326:	bf00      	nop
 8004328:	20000198 	.word	0x20000198
 800432c:	20000200 	.word	0x20000200
 8004330:	20000268 	.word	0x20000268

08004334 <global_stdio_init.part.0>:
 8004334:	b510      	push	{r4, lr}
 8004336:	4b0b      	ldr	r3, [pc, #44]	@ (8004364 <global_stdio_init.part.0+0x30>)
 8004338:	4c0b      	ldr	r4, [pc, #44]	@ (8004368 <global_stdio_init.part.0+0x34>)
 800433a:	4a0c      	ldr	r2, [pc, #48]	@ (800436c <global_stdio_init.part.0+0x38>)
 800433c:	4620      	mov	r0, r4
 800433e:	601a      	str	r2, [r3, #0]
 8004340:	2104      	movs	r1, #4
 8004342:	2200      	movs	r2, #0
 8004344:	f7ff ff94 	bl	8004270 <std>
 8004348:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800434c:	2201      	movs	r2, #1
 800434e:	2109      	movs	r1, #9
 8004350:	f7ff ff8e 	bl	8004270 <std>
 8004354:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004358:	2202      	movs	r2, #2
 800435a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800435e:	2112      	movs	r1, #18
 8004360:	f7ff bf86 	b.w	8004270 <std>
 8004364:	200002d0 	.word	0x200002d0
 8004368:	20000198 	.word	0x20000198
 800436c:	080042dd 	.word	0x080042dd

08004370 <__sfp_lock_acquire>:
 8004370:	4801      	ldr	r0, [pc, #4]	@ (8004378 <__sfp_lock_acquire+0x8>)
 8004372:	f000 b97c 	b.w	800466e <__retarget_lock_acquire_recursive>
 8004376:	bf00      	nop
 8004378:	200002d9 	.word	0x200002d9

0800437c <__sfp_lock_release>:
 800437c:	4801      	ldr	r0, [pc, #4]	@ (8004384 <__sfp_lock_release+0x8>)
 800437e:	f000 b977 	b.w	8004670 <__retarget_lock_release_recursive>
 8004382:	bf00      	nop
 8004384:	200002d9 	.word	0x200002d9

08004388 <__sinit>:
 8004388:	b510      	push	{r4, lr}
 800438a:	4604      	mov	r4, r0
 800438c:	f7ff fff0 	bl	8004370 <__sfp_lock_acquire>
 8004390:	6a23      	ldr	r3, [r4, #32]
 8004392:	b11b      	cbz	r3, 800439c <__sinit+0x14>
 8004394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004398:	f7ff bff0 	b.w	800437c <__sfp_lock_release>
 800439c:	4b04      	ldr	r3, [pc, #16]	@ (80043b0 <__sinit+0x28>)
 800439e:	6223      	str	r3, [r4, #32]
 80043a0:	4b04      	ldr	r3, [pc, #16]	@ (80043b4 <__sinit+0x2c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1f5      	bne.n	8004394 <__sinit+0xc>
 80043a8:	f7ff ffc4 	bl	8004334 <global_stdio_init.part.0>
 80043ac:	e7f2      	b.n	8004394 <__sinit+0xc>
 80043ae:	bf00      	nop
 80043b0:	080042f5 	.word	0x080042f5
 80043b4:	200002d0 	.word	0x200002d0

080043b8 <fiprintf>:
 80043b8:	b40e      	push	{r1, r2, r3}
 80043ba:	b503      	push	{r0, r1, lr}
 80043bc:	4601      	mov	r1, r0
 80043be:	ab03      	add	r3, sp, #12
 80043c0:	4805      	ldr	r0, [pc, #20]	@ (80043d8 <fiprintf+0x20>)
 80043c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80043c6:	6800      	ldr	r0, [r0, #0]
 80043c8:	9301      	str	r3, [sp, #4]
 80043ca:	f000 f9c3 	bl	8004754 <_vfiprintf_r>
 80043ce:	b002      	add	sp, #8
 80043d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80043d4:	b003      	add	sp, #12
 80043d6:	4770      	bx	lr
 80043d8:	20000018 	.word	0x20000018

080043dc <_fwalk_sglue>:
 80043dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043e0:	4607      	mov	r7, r0
 80043e2:	4688      	mov	r8, r1
 80043e4:	4614      	mov	r4, r2
 80043e6:	2600      	movs	r6, #0
 80043e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80043ec:	f1b9 0901 	subs.w	r9, r9, #1
 80043f0:	d505      	bpl.n	80043fe <_fwalk_sglue+0x22>
 80043f2:	6824      	ldr	r4, [r4, #0]
 80043f4:	2c00      	cmp	r4, #0
 80043f6:	d1f7      	bne.n	80043e8 <_fwalk_sglue+0xc>
 80043f8:	4630      	mov	r0, r6
 80043fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043fe:	89ab      	ldrh	r3, [r5, #12]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d907      	bls.n	8004414 <_fwalk_sglue+0x38>
 8004404:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004408:	3301      	adds	r3, #1
 800440a:	d003      	beq.n	8004414 <_fwalk_sglue+0x38>
 800440c:	4629      	mov	r1, r5
 800440e:	4638      	mov	r0, r7
 8004410:	47c0      	blx	r8
 8004412:	4306      	orrs	r6, r0
 8004414:	3568      	adds	r5, #104	@ 0x68
 8004416:	e7e9      	b.n	80043ec <_fwalk_sglue+0x10>

08004418 <__sread>:
 8004418:	b510      	push	{r4, lr}
 800441a:	460c      	mov	r4, r1
 800441c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004420:	f000 f8b2 	bl	8004588 <_read_r>
 8004424:	2800      	cmp	r0, #0
 8004426:	bfab      	itete	ge
 8004428:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800442a:	89a3      	ldrhlt	r3, [r4, #12]
 800442c:	181b      	addge	r3, r3, r0
 800442e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004432:	bfac      	ite	ge
 8004434:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004436:	81a3      	strhlt	r3, [r4, #12]
 8004438:	bd10      	pop	{r4, pc}

0800443a <__swrite>:
 800443a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800443e:	461f      	mov	r7, r3
 8004440:	898b      	ldrh	r3, [r1, #12]
 8004442:	4605      	mov	r5, r0
 8004444:	05db      	lsls	r3, r3, #23
 8004446:	460c      	mov	r4, r1
 8004448:	4616      	mov	r6, r2
 800444a:	d505      	bpl.n	8004458 <__swrite+0x1e>
 800444c:	2302      	movs	r3, #2
 800444e:	2200      	movs	r2, #0
 8004450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004454:	f000 f886 	bl	8004564 <_lseek_r>
 8004458:	89a3      	ldrh	r3, [r4, #12]
 800445a:	4632      	mov	r2, r6
 800445c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004460:	81a3      	strh	r3, [r4, #12]
 8004462:	4628      	mov	r0, r5
 8004464:	463b      	mov	r3, r7
 8004466:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800446a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800446e:	f000 b8c1 	b.w	80045f4 <_write_r>

08004472 <__sseek>:
 8004472:	b510      	push	{r4, lr}
 8004474:	460c      	mov	r4, r1
 8004476:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800447a:	f000 f873 	bl	8004564 <_lseek_r>
 800447e:	1c43      	adds	r3, r0, #1
 8004480:	89a3      	ldrh	r3, [r4, #12]
 8004482:	bf15      	itete	ne
 8004484:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004486:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800448a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800448e:	81a3      	strheq	r3, [r4, #12]
 8004490:	bf18      	it	ne
 8004492:	81a3      	strhne	r3, [r4, #12]
 8004494:	bd10      	pop	{r4, pc}

08004496 <__sclose>:
 8004496:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800449a:	f000 b853 	b.w	8004544 <_close_r>

0800449e <memmove>:
 800449e:	4288      	cmp	r0, r1
 80044a0:	b510      	push	{r4, lr}
 80044a2:	eb01 0402 	add.w	r4, r1, r2
 80044a6:	d902      	bls.n	80044ae <memmove+0x10>
 80044a8:	4284      	cmp	r4, r0
 80044aa:	4623      	mov	r3, r4
 80044ac:	d807      	bhi.n	80044be <memmove+0x20>
 80044ae:	1e43      	subs	r3, r0, #1
 80044b0:	42a1      	cmp	r1, r4
 80044b2:	d008      	beq.n	80044c6 <memmove+0x28>
 80044b4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80044b8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80044bc:	e7f8      	b.n	80044b0 <memmove+0x12>
 80044be:	4601      	mov	r1, r0
 80044c0:	4402      	add	r2, r0
 80044c2:	428a      	cmp	r2, r1
 80044c4:	d100      	bne.n	80044c8 <memmove+0x2a>
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80044cc:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80044d0:	e7f7      	b.n	80044c2 <memmove+0x24>

080044d2 <memset>:
 80044d2:	4603      	mov	r3, r0
 80044d4:	4402      	add	r2, r0
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d100      	bne.n	80044dc <memset+0xa>
 80044da:	4770      	bx	lr
 80044dc:	f803 1b01 	strb.w	r1, [r3], #1
 80044e0:	e7f9      	b.n	80044d6 <memset+0x4>

080044e2 <_raise_r>:
 80044e2:	291f      	cmp	r1, #31
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	4605      	mov	r5, r0
 80044e8:	460c      	mov	r4, r1
 80044ea:	d904      	bls.n	80044f6 <_raise_r+0x14>
 80044ec:	2316      	movs	r3, #22
 80044ee:	6003      	str	r3, [r0, #0]
 80044f0:	f04f 30ff 	mov.w	r0, #4294967295
 80044f4:	bd38      	pop	{r3, r4, r5, pc}
 80044f6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80044f8:	b112      	cbz	r2, 8004500 <_raise_r+0x1e>
 80044fa:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80044fe:	b94b      	cbnz	r3, 8004514 <_raise_r+0x32>
 8004500:	4628      	mov	r0, r5
 8004502:	f000 f865 	bl	80045d0 <_getpid_r>
 8004506:	4622      	mov	r2, r4
 8004508:	4601      	mov	r1, r0
 800450a:	4628      	mov	r0, r5
 800450c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004510:	f000 b84c 	b.w	80045ac <_kill_r>
 8004514:	2b01      	cmp	r3, #1
 8004516:	d00a      	beq.n	800452e <_raise_r+0x4c>
 8004518:	1c59      	adds	r1, r3, #1
 800451a:	d103      	bne.n	8004524 <_raise_r+0x42>
 800451c:	2316      	movs	r3, #22
 800451e:	6003      	str	r3, [r0, #0]
 8004520:	2001      	movs	r0, #1
 8004522:	e7e7      	b.n	80044f4 <_raise_r+0x12>
 8004524:	2100      	movs	r1, #0
 8004526:	4620      	mov	r0, r4
 8004528:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800452c:	4798      	blx	r3
 800452e:	2000      	movs	r0, #0
 8004530:	e7e0      	b.n	80044f4 <_raise_r+0x12>
	...

08004534 <raise>:
 8004534:	4b02      	ldr	r3, [pc, #8]	@ (8004540 <raise+0xc>)
 8004536:	4601      	mov	r1, r0
 8004538:	6818      	ldr	r0, [r3, #0]
 800453a:	f7ff bfd2 	b.w	80044e2 <_raise_r>
 800453e:	bf00      	nop
 8004540:	20000018 	.word	0x20000018

08004544 <_close_r>:
 8004544:	b538      	push	{r3, r4, r5, lr}
 8004546:	2300      	movs	r3, #0
 8004548:	4d05      	ldr	r5, [pc, #20]	@ (8004560 <_close_r+0x1c>)
 800454a:	4604      	mov	r4, r0
 800454c:	4608      	mov	r0, r1
 800454e:	602b      	str	r3, [r5, #0]
 8004550:	f7fb ffaf 	bl	80004b2 <_close>
 8004554:	1c43      	adds	r3, r0, #1
 8004556:	d102      	bne.n	800455e <_close_r+0x1a>
 8004558:	682b      	ldr	r3, [r5, #0]
 800455a:	b103      	cbz	r3, 800455e <_close_r+0x1a>
 800455c:	6023      	str	r3, [r4, #0]
 800455e:	bd38      	pop	{r3, r4, r5, pc}
 8004560:	200002d4 	.word	0x200002d4

08004564 <_lseek_r>:
 8004564:	b538      	push	{r3, r4, r5, lr}
 8004566:	4604      	mov	r4, r0
 8004568:	4608      	mov	r0, r1
 800456a:	4611      	mov	r1, r2
 800456c:	2200      	movs	r2, #0
 800456e:	4d05      	ldr	r5, [pc, #20]	@ (8004584 <_lseek_r+0x20>)
 8004570:	602a      	str	r2, [r5, #0]
 8004572:	461a      	mov	r2, r3
 8004574:	f7fb ffc1 	bl	80004fa <_lseek>
 8004578:	1c43      	adds	r3, r0, #1
 800457a:	d102      	bne.n	8004582 <_lseek_r+0x1e>
 800457c:	682b      	ldr	r3, [r5, #0]
 800457e:	b103      	cbz	r3, 8004582 <_lseek_r+0x1e>
 8004580:	6023      	str	r3, [r4, #0]
 8004582:	bd38      	pop	{r3, r4, r5, pc}
 8004584:	200002d4 	.word	0x200002d4

08004588 <_read_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	4604      	mov	r4, r0
 800458c:	4608      	mov	r0, r1
 800458e:	4611      	mov	r1, r2
 8004590:	2200      	movs	r2, #0
 8004592:	4d05      	ldr	r5, [pc, #20]	@ (80045a8 <_read_r+0x20>)
 8004594:	602a      	str	r2, [r5, #0]
 8004596:	461a      	mov	r2, r3
 8004598:	f7fb ff52 	bl	8000440 <_read>
 800459c:	1c43      	adds	r3, r0, #1
 800459e:	d102      	bne.n	80045a6 <_read_r+0x1e>
 80045a0:	682b      	ldr	r3, [r5, #0]
 80045a2:	b103      	cbz	r3, 80045a6 <_read_r+0x1e>
 80045a4:	6023      	str	r3, [r4, #0]
 80045a6:	bd38      	pop	{r3, r4, r5, pc}
 80045a8:	200002d4 	.word	0x200002d4

080045ac <_kill_r>:
 80045ac:	b538      	push	{r3, r4, r5, lr}
 80045ae:	2300      	movs	r3, #0
 80045b0:	4d06      	ldr	r5, [pc, #24]	@ (80045cc <_kill_r+0x20>)
 80045b2:	4604      	mov	r4, r0
 80045b4:	4608      	mov	r0, r1
 80045b6:	4611      	mov	r1, r2
 80045b8:	602b      	str	r3, [r5, #0]
 80045ba:	f7fb ff26 	bl	800040a <_kill>
 80045be:	1c43      	adds	r3, r0, #1
 80045c0:	d102      	bne.n	80045c8 <_kill_r+0x1c>
 80045c2:	682b      	ldr	r3, [r5, #0]
 80045c4:	b103      	cbz	r3, 80045c8 <_kill_r+0x1c>
 80045c6:	6023      	str	r3, [r4, #0]
 80045c8:	bd38      	pop	{r3, r4, r5, pc}
 80045ca:	bf00      	nop
 80045cc:	200002d4 	.word	0x200002d4

080045d0 <_getpid_r>:
 80045d0:	f7fb bf14 	b.w	80003fc <_getpid>

080045d4 <_sbrk_r>:
 80045d4:	b538      	push	{r3, r4, r5, lr}
 80045d6:	2300      	movs	r3, #0
 80045d8:	4d05      	ldr	r5, [pc, #20]	@ (80045f0 <_sbrk_r+0x1c>)
 80045da:	4604      	mov	r4, r0
 80045dc:	4608      	mov	r0, r1
 80045de:	602b      	str	r3, [r5, #0]
 80045e0:	f7fb ff98 	bl	8000514 <_sbrk>
 80045e4:	1c43      	adds	r3, r0, #1
 80045e6:	d102      	bne.n	80045ee <_sbrk_r+0x1a>
 80045e8:	682b      	ldr	r3, [r5, #0]
 80045ea:	b103      	cbz	r3, 80045ee <_sbrk_r+0x1a>
 80045ec:	6023      	str	r3, [r4, #0]
 80045ee:	bd38      	pop	{r3, r4, r5, pc}
 80045f0:	200002d4 	.word	0x200002d4

080045f4 <_write_r>:
 80045f4:	b538      	push	{r3, r4, r5, lr}
 80045f6:	4604      	mov	r4, r0
 80045f8:	4608      	mov	r0, r1
 80045fa:	4611      	mov	r1, r2
 80045fc:	2200      	movs	r2, #0
 80045fe:	4d05      	ldr	r5, [pc, #20]	@ (8004614 <_write_r+0x20>)
 8004600:	602a      	str	r2, [r5, #0]
 8004602:	461a      	mov	r2, r3
 8004604:	f7fb ff39 	bl	800047a <_write>
 8004608:	1c43      	adds	r3, r0, #1
 800460a:	d102      	bne.n	8004612 <_write_r+0x1e>
 800460c:	682b      	ldr	r3, [r5, #0]
 800460e:	b103      	cbz	r3, 8004612 <_write_r+0x1e>
 8004610:	6023      	str	r3, [r4, #0]
 8004612:	bd38      	pop	{r3, r4, r5, pc}
 8004614:	200002d4 	.word	0x200002d4

08004618 <__errno>:
 8004618:	4b01      	ldr	r3, [pc, #4]	@ (8004620 <__errno+0x8>)
 800461a:	6818      	ldr	r0, [r3, #0]
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000018 	.word	0x20000018

08004624 <__libc_init_array>:
 8004624:	b570      	push	{r4, r5, r6, lr}
 8004626:	2600      	movs	r6, #0
 8004628:	4d0c      	ldr	r5, [pc, #48]	@ (800465c <__libc_init_array+0x38>)
 800462a:	4c0d      	ldr	r4, [pc, #52]	@ (8004660 <__libc_init_array+0x3c>)
 800462c:	1b64      	subs	r4, r4, r5
 800462e:	10a4      	asrs	r4, r4, #2
 8004630:	42a6      	cmp	r6, r4
 8004632:	d109      	bne.n	8004648 <__libc_init_array+0x24>
 8004634:	f000 fd06 	bl	8005044 <_init>
 8004638:	2600      	movs	r6, #0
 800463a:	4d0a      	ldr	r5, [pc, #40]	@ (8004664 <__libc_init_array+0x40>)
 800463c:	4c0a      	ldr	r4, [pc, #40]	@ (8004668 <__libc_init_array+0x44>)
 800463e:	1b64      	subs	r4, r4, r5
 8004640:	10a4      	asrs	r4, r4, #2
 8004642:	42a6      	cmp	r6, r4
 8004644:	d105      	bne.n	8004652 <__libc_init_array+0x2e>
 8004646:	bd70      	pop	{r4, r5, r6, pc}
 8004648:	f855 3b04 	ldr.w	r3, [r5], #4
 800464c:	4798      	blx	r3
 800464e:	3601      	adds	r6, #1
 8004650:	e7ee      	b.n	8004630 <__libc_init_array+0xc>
 8004652:	f855 3b04 	ldr.w	r3, [r5], #4
 8004656:	4798      	blx	r3
 8004658:	3601      	adds	r6, #1
 800465a:	e7f2      	b.n	8004642 <__libc_init_array+0x1e>
 800465c:	080051e4 	.word	0x080051e4
 8004660:	080051e4 	.word	0x080051e4
 8004664:	080051e4 	.word	0x080051e4
 8004668:	080051ec 	.word	0x080051ec

0800466c <__retarget_lock_init_recursive>:
 800466c:	4770      	bx	lr

0800466e <__retarget_lock_acquire_recursive>:
 800466e:	4770      	bx	lr

08004670 <__retarget_lock_release_recursive>:
 8004670:	4770      	bx	lr
	...

08004674 <_free_r>:
 8004674:	b538      	push	{r3, r4, r5, lr}
 8004676:	4605      	mov	r5, r0
 8004678:	2900      	cmp	r1, #0
 800467a:	d040      	beq.n	80046fe <_free_r+0x8a>
 800467c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004680:	1f0c      	subs	r4, r1, #4
 8004682:	2b00      	cmp	r3, #0
 8004684:	bfb8      	it	lt
 8004686:	18e4      	addlt	r4, r4, r3
 8004688:	f7ff fde6 	bl	8004258 <__malloc_lock>
 800468c:	4a1c      	ldr	r2, [pc, #112]	@ (8004700 <_free_r+0x8c>)
 800468e:	6813      	ldr	r3, [r2, #0]
 8004690:	b933      	cbnz	r3, 80046a0 <_free_r+0x2c>
 8004692:	6063      	str	r3, [r4, #4]
 8004694:	6014      	str	r4, [r2, #0]
 8004696:	4628      	mov	r0, r5
 8004698:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800469c:	f7ff bde2 	b.w	8004264 <__malloc_unlock>
 80046a0:	42a3      	cmp	r3, r4
 80046a2:	d908      	bls.n	80046b6 <_free_r+0x42>
 80046a4:	6820      	ldr	r0, [r4, #0]
 80046a6:	1821      	adds	r1, r4, r0
 80046a8:	428b      	cmp	r3, r1
 80046aa:	bf01      	itttt	eq
 80046ac:	6819      	ldreq	r1, [r3, #0]
 80046ae:	685b      	ldreq	r3, [r3, #4]
 80046b0:	1809      	addeq	r1, r1, r0
 80046b2:	6021      	streq	r1, [r4, #0]
 80046b4:	e7ed      	b.n	8004692 <_free_r+0x1e>
 80046b6:	461a      	mov	r2, r3
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	b10b      	cbz	r3, 80046c0 <_free_r+0x4c>
 80046bc:	42a3      	cmp	r3, r4
 80046be:	d9fa      	bls.n	80046b6 <_free_r+0x42>
 80046c0:	6811      	ldr	r1, [r2, #0]
 80046c2:	1850      	adds	r0, r2, r1
 80046c4:	42a0      	cmp	r0, r4
 80046c6:	d10b      	bne.n	80046e0 <_free_r+0x6c>
 80046c8:	6820      	ldr	r0, [r4, #0]
 80046ca:	4401      	add	r1, r0
 80046cc:	1850      	adds	r0, r2, r1
 80046ce:	4283      	cmp	r3, r0
 80046d0:	6011      	str	r1, [r2, #0]
 80046d2:	d1e0      	bne.n	8004696 <_free_r+0x22>
 80046d4:	6818      	ldr	r0, [r3, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	4408      	add	r0, r1
 80046da:	6010      	str	r0, [r2, #0]
 80046dc:	6053      	str	r3, [r2, #4]
 80046de:	e7da      	b.n	8004696 <_free_r+0x22>
 80046e0:	d902      	bls.n	80046e8 <_free_r+0x74>
 80046e2:	230c      	movs	r3, #12
 80046e4:	602b      	str	r3, [r5, #0]
 80046e6:	e7d6      	b.n	8004696 <_free_r+0x22>
 80046e8:	6820      	ldr	r0, [r4, #0]
 80046ea:	1821      	adds	r1, r4, r0
 80046ec:	428b      	cmp	r3, r1
 80046ee:	bf01      	itttt	eq
 80046f0:	6819      	ldreq	r1, [r3, #0]
 80046f2:	685b      	ldreq	r3, [r3, #4]
 80046f4:	1809      	addeq	r1, r1, r0
 80046f6:	6021      	streq	r1, [r4, #0]
 80046f8:	6063      	str	r3, [r4, #4]
 80046fa:	6054      	str	r4, [r2, #4]
 80046fc:	e7cb      	b.n	8004696 <_free_r+0x22>
 80046fe:	bd38      	pop	{r3, r4, r5, pc}
 8004700:	20000194 	.word	0x20000194

08004704 <__sfputc_r>:
 8004704:	6893      	ldr	r3, [r2, #8]
 8004706:	b410      	push	{r4}
 8004708:	3b01      	subs	r3, #1
 800470a:	2b00      	cmp	r3, #0
 800470c:	6093      	str	r3, [r2, #8]
 800470e:	da07      	bge.n	8004720 <__sfputc_r+0x1c>
 8004710:	6994      	ldr	r4, [r2, #24]
 8004712:	42a3      	cmp	r3, r4
 8004714:	db01      	blt.n	800471a <__sfputc_r+0x16>
 8004716:	290a      	cmp	r1, #10
 8004718:	d102      	bne.n	8004720 <__sfputc_r+0x1c>
 800471a:	bc10      	pop	{r4}
 800471c:	f000 bb6c 	b.w	8004df8 <__swbuf_r>
 8004720:	6813      	ldr	r3, [r2, #0]
 8004722:	1c58      	adds	r0, r3, #1
 8004724:	6010      	str	r0, [r2, #0]
 8004726:	7019      	strb	r1, [r3, #0]
 8004728:	4608      	mov	r0, r1
 800472a:	bc10      	pop	{r4}
 800472c:	4770      	bx	lr

0800472e <__sfputs_r>:
 800472e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004730:	4606      	mov	r6, r0
 8004732:	460f      	mov	r7, r1
 8004734:	4614      	mov	r4, r2
 8004736:	18d5      	adds	r5, r2, r3
 8004738:	42ac      	cmp	r4, r5
 800473a:	d101      	bne.n	8004740 <__sfputs_r+0x12>
 800473c:	2000      	movs	r0, #0
 800473e:	e007      	b.n	8004750 <__sfputs_r+0x22>
 8004740:	463a      	mov	r2, r7
 8004742:	4630      	mov	r0, r6
 8004744:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004748:	f7ff ffdc 	bl	8004704 <__sfputc_r>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d1f3      	bne.n	8004738 <__sfputs_r+0xa>
 8004750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004754 <_vfiprintf_r>:
 8004754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004758:	460d      	mov	r5, r1
 800475a:	4614      	mov	r4, r2
 800475c:	4698      	mov	r8, r3
 800475e:	4606      	mov	r6, r0
 8004760:	b09d      	sub	sp, #116	@ 0x74
 8004762:	b118      	cbz	r0, 800476c <_vfiprintf_r+0x18>
 8004764:	6a03      	ldr	r3, [r0, #32]
 8004766:	b90b      	cbnz	r3, 800476c <_vfiprintf_r+0x18>
 8004768:	f7ff fe0e 	bl	8004388 <__sinit>
 800476c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800476e:	07d9      	lsls	r1, r3, #31
 8004770:	d405      	bmi.n	800477e <_vfiprintf_r+0x2a>
 8004772:	89ab      	ldrh	r3, [r5, #12]
 8004774:	059a      	lsls	r2, r3, #22
 8004776:	d402      	bmi.n	800477e <_vfiprintf_r+0x2a>
 8004778:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800477a:	f7ff ff78 	bl	800466e <__retarget_lock_acquire_recursive>
 800477e:	89ab      	ldrh	r3, [r5, #12]
 8004780:	071b      	lsls	r3, r3, #28
 8004782:	d501      	bpl.n	8004788 <_vfiprintf_r+0x34>
 8004784:	692b      	ldr	r3, [r5, #16]
 8004786:	b99b      	cbnz	r3, 80047b0 <_vfiprintf_r+0x5c>
 8004788:	4629      	mov	r1, r5
 800478a:	4630      	mov	r0, r6
 800478c:	f000 fb72 	bl	8004e74 <__swsetup_r>
 8004790:	b170      	cbz	r0, 80047b0 <_vfiprintf_r+0x5c>
 8004792:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004794:	07dc      	lsls	r4, r3, #31
 8004796:	d504      	bpl.n	80047a2 <_vfiprintf_r+0x4e>
 8004798:	f04f 30ff 	mov.w	r0, #4294967295
 800479c:	b01d      	add	sp, #116	@ 0x74
 800479e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047a2:	89ab      	ldrh	r3, [r5, #12]
 80047a4:	0598      	lsls	r0, r3, #22
 80047a6:	d4f7      	bmi.n	8004798 <_vfiprintf_r+0x44>
 80047a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80047aa:	f7ff ff61 	bl	8004670 <__retarget_lock_release_recursive>
 80047ae:	e7f3      	b.n	8004798 <_vfiprintf_r+0x44>
 80047b0:	2300      	movs	r3, #0
 80047b2:	9309      	str	r3, [sp, #36]	@ 0x24
 80047b4:	2320      	movs	r3, #32
 80047b6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80047ba:	2330      	movs	r3, #48	@ 0x30
 80047bc:	f04f 0901 	mov.w	r9, #1
 80047c0:	f8cd 800c 	str.w	r8, [sp, #12]
 80047c4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004970 <_vfiprintf_r+0x21c>
 80047c8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80047cc:	4623      	mov	r3, r4
 80047ce:	469a      	mov	sl, r3
 80047d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80047d4:	b10a      	cbz	r2, 80047da <_vfiprintf_r+0x86>
 80047d6:	2a25      	cmp	r2, #37	@ 0x25
 80047d8:	d1f9      	bne.n	80047ce <_vfiprintf_r+0x7a>
 80047da:	ebba 0b04 	subs.w	fp, sl, r4
 80047de:	d00b      	beq.n	80047f8 <_vfiprintf_r+0xa4>
 80047e0:	465b      	mov	r3, fp
 80047e2:	4622      	mov	r2, r4
 80047e4:	4629      	mov	r1, r5
 80047e6:	4630      	mov	r0, r6
 80047e8:	f7ff ffa1 	bl	800472e <__sfputs_r>
 80047ec:	3001      	adds	r0, #1
 80047ee:	f000 80a7 	beq.w	8004940 <_vfiprintf_r+0x1ec>
 80047f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80047f4:	445a      	add	r2, fp
 80047f6:	9209      	str	r2, [sp, #36]	@ 0x24
 80047f8:	f89a 3000 	ldrb.w	r3, [sl]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	f000 809f 	beq.w	8004940 <_vfiprintf_r+0x1ec>
 8004802:	2300      	movs	r3, #0
 8004804:	f04f 32ff 	mov.w	r2, #4294967295
 8004808:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800480c:	f10a 0a01 	add.w	sl, sl, #1
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	9307      	str	r3, [sp, #28]
 8004814:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004818:	931a      	str	r3, [sp, #104]	@ 0x68
 800481a:	4654      	mov	r4, sl
 800481c:	2205      	movs	r2, #5
 800481e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004822:	4853      	ldr	r0, [pc, #332]	@ (8004970 <_vfiprintf_r+0x21c>)
 8004824:	f000 fb7c 	bl	8004f20 <memchr>
 8004828:	9a04      	ldr	r2, [sp, #16]
 800482a:	b9d8      	cbnz	r0, 8004864 <_vfiprintf_r+0x110>
 800482c:	06d1      	lsls	r1, r2, #27
 800482e:	bf44      	itt	mi
 8004830:	2320      	movmi	r3, #32
 8004832:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004836:	0713      	lsls	r3, r2, #28
 8004838:	bf44      	itt	mi
 800483a:	232b      	movmi	r3, #43	@ 0x2b
 800483c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004840:	f89a 3000 	ldrb.w	r3, [sl]
 8004844:	2b2a      	cmp	r3, #42	@ 0x2a
 8004846:	d015      	beq.n	8004874 <_vfiprintf_r+0x120>
 8004848:	4654      	mov	r4, sl
 800484a:	2000      	movs	r0, #0
 800484c:	f04f 0c0a 	mov.w	ip, #10
 8004850:	9a07      	ldr	r2, [sp, #28]
 8004852:	4621      	mov	r1, r4
 8004854:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004858:	3b30      	subs	r3, #48	@ 0x30
 800485a:	2b09      	cmp	r3, #9
 800485c:	d94b      	bls.n	80048f6 <_vfiprintf_r+0x1a2>
 800485e:	b1b0      	cbz	r0, 800488e <_vfiprintf_r+0x13a>
 8004860:	9207      	str	r2, [sp, #28]
 8004862:	e014      	b.n	800488e <_vfiprintf_r+0x13a>
 8004864:	eba0 0308 	sub.w	r3, r0, r8
 8004868:	fa09 f303 	lsl.w	r3, r9, r3
 800486c:	4313      	orrs	r3, r2
 800486e:	46a2      	mov	sl, r4
 8004870:	9304      	str	r3, [sp, #16]
 8004872:	e7d2      	b.n	800481a <_vfiprintf_r+0xc6>
 8004874:	9b03      	ldr	r3, [sp, #12]
 8004876:	1d19      	adds	r1, r3, #4
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	9103      	str	r1, [sp, #12]
 800487c:	2b00      	cmp	r3, #0
 800487e:	bfbb      	ittet	lt
 8004880:	425b      	neglt	r3, r3
 8004882:	f042 0202 	orrlt.w	r2, r2, #2
 8004886:	9307      	strge	r3, [sp, #28]
 8004888:	9307      	strlt	r3, [sp, #28]
 800488a:	bfb8      	it	lt
 800488c:	9204      	strlt	r2, [sp, #16]
 800488e:	7823      	ldrb	r3, [r4, #0]
 8004890:	2b2e      	cmp	r3, #46	@ 0x2e
 8004892:	d10a      	bne.n	80048aa <_vfiprintf_r+0x156>
 8004894:	7863      	ldrb	r3, [r4, #1]
 8004896:	2b2a      	cmp	r3, #42	@ 0x2a
 8004898:	d132      	bne.n	8004900 <_vfiprintf_r+0x1ac>
 800489a:	9b03      	ldr	r3, [sp, #12]
 800489c:	3402      	adds	r4, #2
 800489e:	1d1a      	adds	r2, r3, #4
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	9203      	str	r2, [sp, #12]
 80048a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80048a8:	9305      	str	r3, [sp, #20]
 80048aa:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004974 <_vfiprintf_r+0x220>
 80048ae:	2203      	movs	r2, #3
 80048b0:	4650      	mov	r0, sl
 80048b2:	7821      	ldrb	r1, [r4, #0]
 80048b4:	f000 fb34 	bl	8004f20 <memchr>
 80048b8:	b138      	cbz	r0, 80048ca <_vfiprintf_r+0x176>
 80048ba:	2240      	movs	r2, #64	@ 0x40
 80048bc:	9b04      	ldr	r3, [sp, #16]
 80048be:	eba0 000a 	sub.w	r0, r0, sl
 80048c2:	4082      	lsls	r2, r0
 80048c4:	4313      	orrs	r3, r2
 80048c6:	3401      	adds	r4, #1
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048ce:	2206      	movs	r2, #6
 80048d0:	4829      	ldr	r0, [pc, #164]	@ (8004978 <_vfiprintf_r+0x224>)
 80048d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80048d6:	f000 fb23 	bl	8004f20 <memchr>
 80048da:	2800      	cmp	r0, #0
 80048dc:	d03f      	beq.n	800495e <_vfiprintf_r+0x20a>
 80048de:	4b27      	ldr	r3, [pc, #156]	@ (800497c <_vfiprintf_r+0x228>)
 80048e0:	bb1b      	cbnz	r3, 800492a <_vfiprintf_r+0x1d6>
 80048e2:	9b03      	ldr	r3, [sp, #12]
 80048e4:	3307      	adds	r3, #7
 80048e6:	f023 0307 	bic.w	r3, r3, #7
 80048ea:	3308      	adds	r3, #8
 80048ec:	9303      	str	r3, [sp, #12]
 80048ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80048f0:	443b      	add	r3, r7
 80048f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80048f4:	e76a      	b.n	80047cc <_vfiprintf_r+0x78>
 80048f6:	460c      	mov	r4, r1
 80048f8:	2001      	movs	r0, #1
 80048fa:	fb0c 3202 	mla	r2, ip, r2, r3
 80048fe:	e7a8      	b.n	8004852 <_vfiprintf_r+0xfe>
 8004900:	2300      	movs	r3, #0
 8004902:	f04f 0c0a 	mov.w	ip, #10
 8004906:	4619      	mov	r1, r3
 8004908:	3401      	adds	r4, #1
 800490a:	9305      	str	r3, [sp, #20]
 800490c:	4620      	mov	r0, r4
 800490e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004912:	3a30      	subs	r2, #48	@ 0x30
 8004914:	2a09      	cmp	r2, #9
 8004916:	d903      	bls.n	8004920 <_vfiprintf_r+0x1cc>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d0c6      	beq.n	80048aa <_vfiprintf_r+0x156>
 800491c:	9105      	str	r1, [sp, #20]
 800491e:	e7c4      	b.n	80048aa <_vfiprintf_r+0x156>
 8004920:	4604      	mov	r4, r0
 8004922:	2301      	movs	r3, #1
 8004924:	fb0c 2101 	mla	r1, ip, r1, r2
 8004928:	e7f0      	b.n	800490c <_vfiprintf_r+0x1b8>
 800492a:	ab03      	add	r3, sp, #12
 800492c:	9300      	str	r3, [sp, #0]
 800492e:	462a      	mov	r2, r5
 8004930:	4630      	mov	r0, r6
 8004932:	4b13      	ldr	r3, [pc, #76]	@ (8004980 <_vfiprintf_r+0x22c>)
 8004934:	a904      	add	r1, sp, #16
 8004936:	f3af 8000 	nop.w
 800493a:	4607      	mov	r7, r0
 800493c:	1c78      	adds	r0, r7, #1
 800493e:	d1d6      	bne.n	80048ee <_vfiprintf_r+0x19a>
 8004940:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004942:	07d9      	lsls	r1, r3, #31
 8004944:	d405      	bmi.n	8004952 <_vfiprintf_r+0x1fe>
 8004946:	89ab      	ldrh	r3, [r5, #12]
 8004948:	059a      	lsls	r2, r3, #22
 800494a:	d402      	bmi.n	8004952 <_vfiprintf_r+0x1fe>
 800494c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800494e:	f7ff fe8f 	bl	8004670 <__retarget_lock_release_recursive>
 8004952:	89ab      	ldrh	r3, [r5, #12]
 8004954:	065b      	lsls	r3, r3, #25
 8004956:	f53f af1f 	bmi.w	8004798 <_vfiprintf_r+0x44>
 800495a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800495c:	e71e      	b.n	800479c <_vfiprintf_r+0x48>
 800495e:	ab03      	add	r3, sp, #12
 8004960:	9300      	str	r3, [sp, #0]
 8004962:	462a      	mov	r2, r5
 8004964:	4630      	mov	r0, r6
 8004966:	4b06      	ldr	r3, [pc, #24]	@ (8004980 <_vfiprintf_r+0x22c>)
 8004968:	a904      	add	r1, sp, #16
 800496a:	f000 f87d 	bl	8004a68 <_printf_i>
 800496e:	e7e4      	b.n	800493a <_vfiprintf_r+0x1e6>
 8004970:	080051b0 	.word	0x080051b0
 8004974:	080051b6 	.word	0x080051b6
 8004978:	080051ba 	.word	0x080051ba
 800497c:	00000000 	.word	0x00000000
 8004980:	0800472f 	.word	0x0800472f

08004984 <_printf_common>:
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	4616      	mov	r6, r2
 800498a:	4698      	mov	r8, r3
 800498c:	688a      	ldr	r2, [r1, #8]
 800498e:	690b      	ldr	r3, [r1, #16]
 8004990:	4607      	mov	r7, r0
 8004992:	4293      	cmp	r3, r2
 8004994:	bfb8      	it	lt
 8004996:	4613      	movlt	r3, r2
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800499e:	460c      	mov	r4, r1
 80049a0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80049a4:	b10a      	cbz	r2, 80049aa <_printf_common+0x26>
 80049a6:	3301      	adds	r3, #1
 80049a8:	6033      	str	r3, [r6, #0]
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	0699      	lsls	r1, r3, #26
 80049ae:	bf42      	ittt	mi
 80049b0:	6833      	ldrmi	r3, [r6, #0]
 80049b2:	3302      	addmi	r3, #2
 80049b4:	6033      	strmi	r3, [r6, #0]
 80049b6:	6825      	ldr	r5, [r4, #0]
 80049b8:	f015 0506 	ands.w	r5, r5, #6
 80049bc:	d106      	bne.n	80049cc <_printf_common+0x48>
 80049be:	f104 0a19 	add.w	sl, r4, #25
 80049c2:	68e3      	ldr	r3, [r4, #12]
 80049c4:	6832      	ldr	r2, [r6, #0]
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	42ab      	cmp	r3, r5
 80049ca:	dc2b      	bgt.n	8004a24 <_printf_common+0xa0>
 80049cc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049d0:	6822      	ldr	r2, [r4, #0]
 80049d2:	3b00      	subs	r3, #0
 80049d4:	bf18      	it	ne
 80049d6:	2301      	movne	r3, #1
 80049d8:	0692      	lsls	r2, r2, #26
 80049da:	d430      	bmi.n	8004a3e <_printf_common+0xba>
 80049dc:	4641      	mov	r1, r8
 80049de:	4638      	mov	r0, r7
 80049e0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049e4:	47c8      	blx	r9
 80049e6:	3001      	adds	r0, #1
 80049e8:	d023      	beq.n	8004a32 <_printf_common+0xae>
 80049ea:	6823      	ldr	r3, [r4, #0]
 80049ec:	6922      	ldr	r2, [r4, #16]
 80049ee:	f003 0306 	and.w	r3, r3, #6
 80049f2:	2b04      	cmp	r3, #4
 80049f4:	bf14      	ite	ne
 80049f6:	2500      	movne	r5, #0
 80049f8:	6833      	ldreq	r3, [r6, #0]
 80049fa:	f04f 0600 	mov.w	r6, #0
 80049fe:	bf08      	it	eq
 8004a00:	68e5      	ldreq	r5, [r4, #12]
 8004a02:	f104 041a 	add.w	r4, r4, #26
 8004a06:	bf08      	it	eq
 8004a08:	1aed      	subeq	r5, r5, r3
 8004a0a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004a0e:	bf08      	it	eq
 8004a10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bfc4      	itt	gt
 8004a18:	1a9b      	subgt	r3, r3, r2
 8004a1a:	18ed      	addgt	r5, r5, r3
 8004a1c:	42b5      	cmp	r5, r6
 8004a1e:	d11a      	bne.n	8004a56 <_printf_common+0xd2>
 8004a20:	2000      	movs	r0, #0
 8004a22:	e008      	b.n	8004a36 <_printf_common+0xb2>
 8004a24:	2301      	movs	r3, #1
 8004a26:	4652      	mov	r2, sl
 8004a28:	4641      	mov	r1, r8
 8004a2a:	4638      	mov	r0, r7
 8004a2c:	47c8      	blx	r9
 8004a2e:	3001      	adds	r0, #1
 8004a30:	d103      	bne.n	8004a3a <_printf_common+0xb6>
 8004a32:	f04f 30ff 	mov.w	r0, #4294967295
 8004a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a3a:	3501      	adds	r5, #1
 8004a3c:	e7c1      	b.n	80049c2 <_printf_common+0x3e>
 8004a3e:	2030      	movs	r0, #48	@ 0x30
 8004a40:	18e1      	adds	r1, r4, r3
 8004a42:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a46:	1c5a      	adds	r2, r3, #1
 8004a48:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a4c:	4422      	add	r2, r4
 8004a4e:	3302      	adds	r3, #2
 8004a50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a54:	e7c2      	b.n	80049dc <_printf_common+0x58>
 8004a56:	2301      	movs	r3, #1
 8004a58:	4622      	mov	r2, r4
 8004a5a:	4641      	mov	r1, r8
 8004a5c:	4638      	mov	r0, r7
 8004a5e:	47c8      	blx	r9
 8004a60:	3001      	adds	r0, #1
 8004a62:	d0e6      	beq.n	8004a32 <_printf_common+0xae>
 8004a64:	3601      	adds	r6, #1
 8004a66:	e7d9      	b.n	8004a1c <_printf_common+0x98>

08004a68 <_printf_i>:
 8004a68:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	7e0f      	ldrb	r7, [r1, #24]
 8004a6e:	4691      	mov	r9, r2
 8004a70:	2f78      	cmp	r7, #120	@ 0x78
 8004a72:	4680      	mov	r8, r0
 8004a74:	460c      	mov	r4, r1
 8004a76:	469a      	mov	sl, r3
 8004a78:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a7a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a7e:	d807      	bhi.n	8004a90 <_printf_i+0x28>
 8004a80:	2f62      	cmp	r7, #98	@ 0x62
 8004a82:	d80a      	bhi.n	8004a9a <_printf_i+0x32>
 8004a84:	2f00      	cmp	r7, #0
 8004a86:	f000 80d3 	beq.w	8004c30 <_printf_i+0x1c8>
 8004a8a:	2f58      	cmp	r7, #88	@ 0x58
 8004a8c:	f000 80ba 	beq.w	8004c04 <_printf_i+0x19c>
 8004a90:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a94:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a98:	e03a      	b.n	8004b10 <_printf_i+0xa8>
 8004a9a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a9e:	2b15      	cmp	r3, #21
 8004aa0:	d8f6      	bhi.n	8004a90 <_printf_i+0x28>
 8004aa2:	a101      	add	r1, pc, #4	@ (adr r1, 8004aa8 <_printf_i+0x40>)
 8004aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004aa8:	08004b01 	.word	0x08004b01
 8004aac:	08004b15 	.word	0x08004b15
 8004ab0:	08004a91 	.word	0x08004a91
 8004ab4:	08004a91 	.word	0x08004a91
 8004ab8:	08004a91 	.word	0x08004a91
 8004abc:	08004a91 	.word	0x08004a91
 8004ac0:	08004b15 	.word	0x08004b15
 8004ac4:	08004a91 	.word	0x08004a91
 8004ac8:	08004a91 	.word	0x08004a91
 8004acc:	08004a91 	.word	0x08004a91
 8004ad0:	08004a91 	.word	0x08004a91
 8004ad4:	08004c17 	.word	0x08004c17
 8004ad8:	08004b3f 	.word	0x08004b3f
 8004adc:	08004bd1 	.word	0x08004bd1
 8004ae0:	08004a91 	.word	0x08004a91
 8004ae4:	08004a91 	.word	0x08004a91
 8004ae8:	08004c39 	.word	0x08004c39
 8004aec:	08004a91 	.word	0x08004a91
 8004af0:	08004b3f 	.word	0x08004b3f
 8004af4:	08004a91 	.word	0x08004a91
 8004af8:	08004a91 	.word	0x08004a91
 8004afc:	08004bd9 	.word	0x08004bd9
 8004b00:	6833      	ldr	r3, [r6, #0]
 8004b02:	1d1a      	adds	r2, r3, #4
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6032      	str	r2, [r6, #0]
 8004b08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b0c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004b10:	2301      	movs	r3, #1
 8004b12:	e09e      	b.n	8004c52 <_printf_i+0x1ea>
 8004b14:	6833      	ldr	r3, [r6, #0]
 8004b16:	6820      	ldr	r0, [r4, #0]
 8004b18:	1d19      	adds	r1, r3, #4
 8004b1a:	6031      	str	r1, [r6, #0]
 8004b1c:	0606      	lsls	r6, r0, #24
 8004b1e:	d501      	bpl.n	8004b24 <_printf_i+0xbc>
 8004b20:	681d      	ldr	r5, [r3, #0]
 8004b22:	e003      	b.n	8004b2c <_printf_i+0xc4>
 8004b24:	0645      	lsls	r5, r0, #25
 8004b26:	d5fb      	bpl.n	8004b20 <_printf_i+0xb8>
 8004b28:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b2c:	2d00      	cmp	r5, #0
 8004b2e:	da03      	bge.n	8004b38 <_printf_i+0xd0>
 8004b30:	232d      	movs	r3, #45	@ 0x2d
 8004b32:	426d      	negs	r5, r5
 8004b34:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b38:	230a      	movs	r3, #10
 8004b3a:	4859      	ldr	r0, [pc, #356]	@ (8004ca0 <_printf_i+0x238>)
 8004b3c:	e011      	b.n	8004b62 <_printf_i+0xfa>
 8004b3e:	6821      	ldr	r1, [r4, #0]
 8004b40:	6833      	ldr	r3, [r6, #0]
 8004b42:	0608      	lsls	r0, r1, #24
 8004b44:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b48:	d402      	bmi.n	8004b50 <_printf_i+0xe8>
 8004b4a:	0649      	lsls	r1, r1, #25
 8004b4c:	bf48      	it	mi
 8004b4e:	b2ad      	uxthmi	r5, r5
 8004b50:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b52:	6033      	str	r3, [r6, #0]
 8004b54:	bf14      	ite	ne
 8004b56:	230a      	movne	r3, #10
 8004b58:	2308      	moveq	r3, #8
 8004b5a:	4851      	ldr	r0, [pc, #324]	@ (8004ca0 <_printf_i+0x238>)
 8004b5c:	2100      	movs	r1, #0
 8004b5e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b62:	6866      	ldr	r6, [r4, #4]
 8004b64:	2e00      	cmp	r6, #0
 8004b66:	bfa8      	it	ge
 8004b68:	6821      	ldrge	r1, [r4, #0]
 8004b6a:	60a6      	str	r6, [r4, #8]
 8004b6c:	bfa4      	itt	ge
 8004b6e:	f021 0104 	bicge.w	r1, r1, #4
 8004b72:	6021      	strge	r1, [r4, #0]
 8004b74:	b90d      	cbnz	r5, 8004b7a <_printf_i+0x112>
 8004b76:	2e00      	cmp	r6, #0
 8004b78:	d04b      	beq.n	8004c12 <_printf_i+0x1aa>
 8004b7a:	4616      	mov	r6, r2
 8004b7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b80:	fb03 5711 	mls	r7, r3, r1, r5
 8004b84:	5dc7      	ldrb	r7, [r0, r7]
 8004b86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b8a:	462f      	mov	r7, r5
 8004b8c:	42bb      	cmp	r3, r7
 8004b8e:	460d      	mov	r5, r1
 8004b90:	d9f4      	bls.n	8004b7c <_printf_i+0x114>
 8004b92:	2b08      	cmp	r3, #8
 8004b94:	d10b      	bne.n	8004bae <_printf_i+0x146>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	07df      	lsls	r7, r3, #31
 8004b9a:	d508      	bpl.n	8004bae <_printf_i+0x146>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	6861      	ldr	r1, [r4, #4]
 8004ba0:	4299      	cmp	r1, r3
 8004ba2:	bfde      	ittt	le
 8004ba4:	2330      	movle	r3, #48	@ 0x30
 8004ba6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004baa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004bae:	1b92      	subs	r2, r2, r6
 8004bb0:	6122      	str	r2, [r4, #16]
 8004bb2:	464b      	mov	r3, r9
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	4640      	mov	r0, r8
 8004bb8:	f8cd a000 	str.w	sl, [sp]
 8004bbc:	aa03      	add	r2, sp, #12
 8004bbe:	f7ff fee1 	bl	8004984 <_printf_common>
 8004bc2:	3001      	adds	r0, #1
 8004bc4:	d14a      	bne.n	8004c5c <_printf_i+0x1f4>
 8004bc6:	f04f 30ff 	mov.w	r0, #4294967295
 8004bca:	b004      	add	sp, #16
 8004bcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd0:	6823      	ldr	r3, [r4, #0]
 8004bd2:	f043 0320 	orr.w	r3, r3, #32
 8004bd6:	6023      	str	r3, [r4, #0]
 8004bd8:	2778      	movs	r7, #120	@ 0x78
 8004bda:	4832      	ldr	r0, [pc, #200]	@ (8004ca4 <_printf_i+0x23c>)
 8004bdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004be0:	6823      	ldr	r3, [r4, #0]
 8004be2:	6831      	ldr	r1, [r6, #0]
 8004be4:	061f      	lsls	r7, r3, #24
 8004be6:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bea:	d402      	bmi.n	8004bf2 <_printf_i+0x18a>
 8004bec:	065f      	lsls	r7, r3, #25
 8004bee:	bf48      	it	mi
 8004bf0:	b2ad      	uxthmi	r5, r5
 8004bf2:	6031      	str	r1, [r6, #0]
 8004bf4:	07d9      	lsls	r1, r3, #31
 8004bf6:	bf44      	itt	mi
 8004bf8:	f043 0320 	orrmi.w	r3, r3, #32
 8004bfc:	6023      	strmi	r3, [r4, #0]
 8004bfe:	b11d      	cbz	r5, 8004c08 <_printf_i+0x1a0>
 8004c00:	2310      	movs	r3, #16
 8004c02:	e7ab      	b.n	8004b5c <_printf_i+0xf4>
 8004c04:	4826      	ldr	r0, [pc, #152]	@ (8004ca0 <_printf_i+0x238>)
 8004c06:	e7e9      	b.n	8004bdc <_printf_i+0x174>
 8004c08:	6823      	ldr	r3, [r4, #0]
 8004c0a:	f023 0320 	bic.w	r3, r3, #32
 8004c0e:	6023      	str	r3, [r4, #0]
 8004c10:	e7f6      	b.n	8004c00 <_printf_i+0x198>
 8004c12:	4616      	mov	r6, r2
 8004c14:	e7bd      	b.n	8004b92 <_printf_i+0x12a>
 8004c16:	6833      	ldr	r3, [r6, #0]
 8004c18:	6825      	ldr	r5, [r4, #0]
 8004c1a:	1d18      	adds	r0, r3, #4
 8004c1c:	6961      	ldr	r1, [r4, #20]
 8004c1e:	6030      	str	r0, [r6, #0]
 8004c20:	062e      	lsls	r6, r5, #24
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	d501      	bpl.n	8004c2a <_printf_i+0x1c2>
 8004c26:	6019      	str	r1, [r3, #0]
 8004c28:	e002      	b.n	8004c30 <_printf_i+0x1c8>
 8004c2a:	0668      	lsls	r0, r5, #25
 8004c2c:	d5fb      	bpl.n	8004c26 <_printf_i+0x1be>
 8004c2e:	8019      	strh	r1, [r3, #0]
 8004c30:	2300      	movs	r3, #0
 8004c32:	4616      	mov	r6, r2
 8004c34:	6123      	str	r3, [r4, #16]
 8004c36:	e7bc      	b.n	8004bb2 <_printf_i+0x14a>
 8004c38:	6833      	ldr	r3, [r6, #0]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	1d1a      	adds	r2, r3, #4
 8004c3e:	6032      	str	r2, [r6, #0]
 8004c40:	681e      	ldr	r6, [r3, #0]
 8004c42:	6862      	ldr	r2, [r4, #4]
 8004c44:	4630      	mov	r0, r6
 8004c46:	f000 f96b 	bl	8004f20 <memchr>
 8004c4a:	b108      	cbz	r0, 8004c50 <_printf_i+0x1e8>
 8004c4c:	1b80      	subs	r0, r0, r6
 8004c4e:	6060      	str	r0, [r4, #4]
 8004c50:	6863      	ldr	r3, [r4, #4]
 8004c52:	6123      	str	r3, [r4, #16]
 8004c54:	2300      	movs	r3, #0
 8004c56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c5a:	e7aa      	b.n	8004bb2 <_printf_i+0x14a>
 8004c5c:	4632      	mov	r2, r6
 8004c5e:	4649      	mov	r1, r9
 8004c60:	4640      	mov	r0, r8
 8004c62:	6923      	ldr	r3, [r4, #16]
 8004c64:	47d0      	blx	sl
 8004c66:	3001      	adds	r0, #1
 8004c68:	d0ad      	beq.n	8004bc6 <_printf_i+0x15e>
 8004c6a:	6823      	ldr	r3, [r4, #0]
 8004c6c:	079b      	lsls	r3, r3, #30
 8004c6e:	d413      	bmi.n	8004c98 <_printf_i+0x230>
 8004c70:	68e0      	ldr	r0, [r4, #12]
 8004c72:	9b03      	ldr	r3, [sp, #12]
 8004c74:	4298      	cmp	r0, r3
 8004c76:	bfb8      	it	lt
 8004c78:	4618      	movlt	r0, r3
 8004c7a:	e7a6      	b.n	8004bca <_printf_i+0x162>
 8004c7c:	2301      	movs	r3, #1
 8004c7e:	4632      	mov	r2, r6
 8004c80:	4649      	mov	r1, r9
 8004c82:	4640      	mov	r0, r8
 8004c84:	47d0      	blx	sl
 8004c86:	3001      	adds	r0, #1
 8004c88:	d09d      	beq.n	8004bc6 <_printf_i+0x15e>
 8004c8a:	3501      	adds	r5, #1
 8004c8c:	68e3      	ldr	r3, [r4, #12]
 8004c8e:	9903      	ldr	r1, [sp, #12]
 8004c90:	1a5b      	subs	r3, r3, r1
 8004c92:	42ab      	cmp	r3, r5
 8004c94:	dcf2      	bgt.n	8004c7c <_printf_i+0x214>
 8004c96:	e7eb      	b.n	8004c70 <_printf_i+0x208>
 8004c98:	2500      	movs	r5, #0
 8004c9a:	f104 0619 	add.w	r6, r4, #25
 8004c9e:	e7f5      	b.n	8004c8c <_printf_i+0x224>
 8004ca0:	080051c1 	.word	0x080051c1
 8004ca4:	080051d2 	.word	0x080051d2

08004ca8 <__sflush_r>:
 8004ca8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cae:	0716      	lsls	r6, r2, #28
 8004cb0:	4605      	mov	r5, r0
 8004cb2:	460c      	mov	r4, r1
 8004cb4:	d454      	bmi.n	8004d60 <__sflush_r+0xb8>
 8004cb6:	684b      	ldr	r3, [r1, #4]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	dc02      	bgt.n	8004cc2 <__sflush_r+0x1a>
 8004cbc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	dd48      	ble.n	8004d54 <__sflush_r+0xac>
 8004cc2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cc4:	2e00      	cmp	r6, #0
 8004cc6:	d045      	beq.n	8004d54 <__sflush_r+0xac>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004cce:	682f      	ldr	r7, [r5, #0]
 8004cd0:	6a21      	ldr	r1, [r4, #32]
 8004cd2:	602b      	str	r3, [r5, #0]
 8004cd4:	d030      	beq.n	8004d38 <__sflush_r+0x90>
 8004cd6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004cd8:	89a3      	ldrh	r3, [r4, #12]
 8004cda:	0759      	lsls	r1, r3, #29
 8004cdc:	d505      	bpl.n	8004cea <__sflush_r+0x42>
 8004cde:	6863      	ldr	r3, [r4, #4]
 8004ce0:	1ad2      	subs	r2, r2, r3
 8004ce2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004ce4:	b10b      	cbz	r3, 8004cea <__sflush_r+0x42>
 8004ce6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	2300      	movs	r3, #0
 8004cec:	4628      	mov	r0, r5
 8004cee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004cf0:	6a21      	ldr	r1, [r4, #32]
 8004cf2:	47b0      	blx	r6
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	89a3      	ldrh	r3, [r4, #12]
 8004cf8:	d106      	bne.n	8004d08 <__sflush_r+0x60>
 8004cfa:	6829      	ldr	r1, [r5, #0]
 8004cfc:	291d      	cmp	r1, #29
 8004cfe:	d82b      	bhi.n	8004d58 <__sflush_r+0xb0>
 8004d00:	4a28      	ldr	r2, [pc, #160]	@ (8004da4 <__sflush_r+0xfc>)
 8004d02:	410a      	asrs	r2, r1
 8004d04:	07d6      	lsls	r6, r2, #31
 8004d06:	d427      	bmi.n	8004d58 <__sflush_r+0xb0>
 8004d08:	2200      	movs	r2, #0
 8004d0a:	6062      	str	r2, [r4, #4]
 8004d0c:	6922      	ldr	r2, [r4, #16]
 8004d0e:	04d9      	lsls	r1, r3, #19
 8004d10:	6022      	str	r2, [r4, #0]
 8004d12:	d504      	bpl.n	8004d1e <__sflush_r+0x76>
 8004d14:	1c42      	adds	r2, r0, #1
 8004d16:	d101      	bne.n	8004d1c <__sflush_r+0x74>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	b903      	cbnz	r3, 8004d1e <__sflush_r+0x76>
 8004d1c:	6560      	str	r0, [r4, #84]	@ 0x54
 8004d1e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004d20:	602f      	str	r7, [r5, #0]
 8004d22:	b1b9      	cbz	r1, 8004d54 <__sflush_r+0xac>
 8004d24:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004d28:	4299      	cmp	r1, r3
 8004d2a:	d002      	beq.n	8004d32 <__sflush_r+0x8a>
 8004d2c:	4628      	mov	r0, r5
 8004d2e:	f7ff fca1 	bl	8004674 <_free_r>
 8004d32:	2300      	movs	r3, #0
 8004d34:	6363      	str	r3, [r4, #52]	@ 0x34
 8004d36:	e00d      	b.n	8004d54 <__sflush_r+0xac>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4628      	mov	r0, r5
 8004d3c:	47b0      	blx	r6
 8004d3e:	4602      	mov	r2, r0
 8004d40:	1c50      	adds	r0, r2, #1
 8004d42:	d1c9      	bne.n	8004cd8 <__sflush_r+0x30>
 8004d44:	682b      	ldr	r3, [r5, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d0c6      	beq.n	8004cd8 <__sflush_r+0x30>
 8004d4a:	2b1d      	cmp	r3, #29
 8004d4c:	d001      	beq.n	8004d52 <__sflush_r+0xaa>
 8004d4e:	2b16      	cmp	r3, #22
 8004d50:	d11d      	bne.n	8004d8e <__sflush_r+0xe6>
 8004d52:	602f      	str	r7, [r5, #0]
 8004d54:	2000      	movs	r0, #0
 8004d56:	e021      	b.n	8004d9c <__sflush_r+0xf4>
 8004d58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d5c:	b21b      	sxth	r3, r3
 8004d5e:	e01a      	b.n	8004d96 <__sflush_r+0xee>
 8004d60:	690f      	ldr	r7, [r1, #16]
 8004d62:	2f00      	cmp	r7, #0
 8004d64:	d0f6      	beq.n	8004d54 <__sflush_r+0xac>
 8004d66:	0793      	lsls	r3, r2, #30
 8004d68:	bf18      	it	ne
 8004d6a:	2300      	movne	r3, #0
 8004d6c:	680e      	ldr	r6, [r1, #0]
 8004d6e:	bf08      	it	eq
 8004d70:	694b      	ldreq	r3, [r1, #20]
 8004d72:	1bf6      	subs	r6, r6, r7
 8004d74:	600f      	str	r7, [r1, #0]
 8004d76:	608b      	str	r3, [r1, #8]
 8004d78:	2e00      	cmp	r6, #0
 8004d7a:	ddeb      	ble.n	8004d54 <__sflush_r+0xac>
 8004d7c:	4633      	mov	r3, r6
 8004d7e:	463a      	mov	r2, r7
 8004d80:	4628      	mov	r0, r5
 8004d82:	6a21      	ldr	r1, [r4, #32]
 8004d84:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004d88:	47e0      	blx	ip
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	dc07      	bgt.n	8004d9e <__sflush_r+0xf6>
 8004d8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d96:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9a:	81a3      	strh	r3, [r4, #12]
 8004d9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d9e:	4407      	add	r7, r0
 8004da0:	1a36      	subs	r6, r6, r0
 8004da2:	e7e9      	b.n	8004d78 <__sflush_r+0xd0>
 8004da4:	dfbffffe 	.word	0xdfbffffe

08004da8 <_fflush_r>:
 8004da8:	b538      	push	{r3, r4, r5, lr}
 8004daa:	690b      	ldr	r3, [r1, #16]
 8004dac:	4605      	mov	r5, r0
 8004dae:	460c      	mov	r4, r1
 8004db0:	b913      	cbnz	r3, 8004db8 <_fflush_r+0x10>
 8004db2:	2500      	movs	r5, #0
 8004db4:	4628      	mov	r0, r5
 8004db6:	bd38      	pop	{r3, r4, r5, pc}
 8004db8:	b118      	cbz	r0, 8004dc2 <_fflush_r+0x1a>
 8004dba:	6a03      	ldr	r3, [r0, #32]
 8004dbc:	b90b      	cbnz	r3, 8004dc2 <_fflush_r+0x1a>
 8004dbe:	f7ff fae3 	bl	8004388 <__sinit>
 8004dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0f3      	beq.n	8004db2 <_fflush_r+0xa>
 8004dca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004dcc:	07d0      	lsls	r0, r2, #31
 8004dce:	d404      	bmi.n	8004dda <_fflush_r+0x32>
 8004dd0:	0599      	lsls	r1, r3, #22
 8004dd2:	d402      	bmi.n	8004dda <_fflush_r+0x32>
 8004dd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004dd6:	f7ff fc4a 	bl	800466e <__retarget_lock_acquire_recursive>
 8004dda:	4628      	mov	r0, r5
 8004ddc:	4621      	mov	r1, r4
 8004dde:	f7ff ff63 	bl	8004ca8 <__sflush_r>
 8004de2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004de4:	4605      	mov	r5, r0
 8004de6:	07da      	lsls	r2, r3, #31
 8004de8:	d4e4      	bmi.n	8004db4 <_fflush_r+0xc>
 8004dea:	89a3      	ldrh	r3, [r4, #12]
 8004dec:	059b      	lsls	r3, r3, #22
 8004dee:	d4e1      	bmi.n	8004db4 <_fflush_r+0xc>
 8004df0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004df2:	f7ff fc3d 	bl	8004670 <__retarget_lock_release_recursive>
 8004df6:	e7dd      	b.n	8004db4 <_fflush_r+0xc>

08004df8 <__swbuf_r>:
 8004df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dfa:	460e      	mov	r6, r1
 8004dfc:	4614      	mov	r4, r2
 8004dfe:	4605      	mov	r5, r0
 8004e00:	b118      	cbz	r0, 8004e0a <__swbuf_r+0x12>
 8004e02:	6a03      	ldr	r3, [r0, #32]
 8004e04:	b90b      	cbnz	r3, 8004e0a <__swbuf_r+0x12>
 8004e06:	f7ff fabf 	bl	8004388 <__sinit>
 8004e0a:	69a3      	ldr	r3, [r4, #24]
 8004e0c:	60a3      	str	r3, [r4, #8]
 8004e0e:	89a3      	ldrh	r3, [r4, #12]
 8004e10:	071a      	lsls	r2, r3, #28
 8004e12:	d501      	bpl.n	8004e18 <__swbuf_r+0x20>
 8004e14:	6923      	ldr	r3, [r4, #16]
 8004e16:	b943      	cbnz	r3, 8004e2a <__swbuf_r+0x32>
 8004e18:	4621      	mov	r1, r4
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	f000 f82a 	bl	8004e74 <__swsetup_r>
 8004e20:	b118      	cbz	r0, 8004e2a <__swbuf_r+0x32>
 8004e22:	f04f 37ff 	mov.w	r7, #4294967295
 8004e26:	4638      	mov	r0, r7
 8004e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004e2a:	6823      	ldr	r3, [r4, #0]
 8004e2c:	6922      	ldr	r2, [r4, #16]
 8004e2e:	b2f6      	uxtb	r6, r6
 8004e30:	1a98      	subs	r0, r3, r2
 8004e32:	6963      	ldr	r3, [r4, #20]
 8004e34:	4637      	mov	r7, r6
 8004e36:	4283      	cmp	r3, r0
 8004e38:	dc05      	bgt.n	8004e46 <__swbuf_r+0x4e>
 8004e3a:	4621      	mov	r1, r4
 8004e3c:	4628      	mov	r0, r5
 8004e3e:	f7ff ffb3 	bl	8004da8 <_fflush_r>
 8004e42:	2800      	cmp	r0, #0
 8004e44:	d1ed      	bne.n	8004e22 <__swbuf_r+0x2a>
 8004e46:	68a3      	ldr	r3, [r4, #8]
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	60a3      	str	r3, [r4, #8]
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	1c5a      	adds	r2, r3, #1
 8004e50:	6022      	str	r2, [r4, #0]
 8004e52:	701e      	strb	r6, [r3, #0]
 8004e54:	6962      	ldr	r2, [r4, #20]
 8004e56:	1c43      	adds	r3, r0, #1
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d004      	beq.n	8004e66 <__swbuf_r+0x6e>
 8004e5c:	89a3      	ldrh	r3, [r4, #12]
 8004e5e:	07db      	lsls	r3, r3, #31
 8004e60:	d5e1      	bpl.n	8004e26 <__swbuf_r+0x2e>
 8004e62:	2e0a      	cmp	r6, #10
 8004e64:	d1df      	bne.n	8004e26 <__swbuf_r+0x2e>
 8004e66:	4621      	mov	r1, r4
 8004e68:	4628      	mov	r0, r5
 8004e6a:	f7ff ff9d 	bl	8004da8 <_fflush_r>
 8004e6e:	2800      	cmp	r0, #0
 8004e70:	d0d9      	beq.n	8004e26 <__swbuf_r+0x2e>
 8004e72:	e7d6      	b.n	8004e22 <__swbuf_r+0x2a>

08004e74 <__swsetup_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4b29      	ldr	r3, [pc, #164]	@ (8004f1c <__swsetup_r+0xa8>)
 8004e78:	4605      	mov	r5, r0
 8004e7a:	6818      	ldr	r0, [r3, #0]
 8004e7c:	460c      	mov	r4, r1
 8004e7e:	b118      	cbz	r0, 8004e88 <__swsetup_r+0x14>
 8004e80:	6a03      	ldr	r3, [r0, #32]
 8004e82:	b90b      	cbnz	r3, 8004e88 <__swsetup_r+0x14>
 8004e84:	f7ff fa80 	bl	8004388 <__sinit>
 8004e88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e8c:	0719      	lsls	r1, r3, #28
 8004e8e:	d422      	bmi.n	8004ed6 <__swsetup_r+0x62>
 8004e90:	06da      	lsls	r2, r3, #27
 8004e92:	d407      	bmi.n	8004ea4 <__swsetup_r+0x30>
 8004e94:	2209      	movs	r2, #9
 8004e96:	602a      	str	r2, [r5, #0]
 8004e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ea0:	81a3      	strh	r3, [r4, #12]
 8004ea2:	e033      	b.n	8004f0c <__swsetup_r+0x98>
 8004ea4:	0758      	lsls	r0, r3, #29
 8004ea6:	d512      	bpl.n	8004ece <__swsetup_r+0x5a>
 8004ea8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004eaa:	b141      	cbz	r1, 8004ebe <__swsetup_r+0x4a>
 8004eac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004eb0:	4299      	cmp	r1, r3
 8004eb2:	d002      	beq.n	8004eba <__swsetup_r+0x46>
 8004eb4:	4628      	mov	r0, r5
 8004eb6:	f7ff fbdd 	bl	8004674 <_free_r>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ebe:	89a3      	ldrh	r3, [r4, #12]
 8004ec0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ec4:	81a3      	strh	r3, [r4, #12]
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	6063      	str	r3, [r4, #4]
 8004eca:	6923      	ldr	r3, [r4, #16]
 8004ecc:	6023      	str	r3, [r4, #0]
 8004ece:	89a3      	ldrh	r3, [r4, #12]
 8004ed0:	f043 0308 	orr.w	r3, r3, #8
 8004ed4:	81a3      	strh	r3, [r4, #12]
 8004ed6:	6923      	ldr	r3, [r4, #16]
 8004ed8:	b94b      	cbnz	r3, 8004eee <__swsetup_r+0x7a>
 8004eda:	89a3      	ldrh	r3, [r4, #12]
 8004edc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004ee0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004ee4:	d003      	beq.n	8004eee <__swsetup_r+0x7a>
 8004ee6:	4621      	mov	r1, r4
 8004ee8:	4628      	mov	r0, r5
 8004eea:	f000 f84c 	bl	8004f86 <__smakebuf_r>
 8004eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ef2:	f013 0201 	ands.w	r2, r3, #1
 8004ef6:	d00a      	beq.n	8004f0e <__swsetup_r+0x9a>
 8004ef8:	2200      	movs	r2, #0
 8004efa:	60a2      	str	r2, [r4, #8]
 8004efc:	6962      	ldr	r2, [r4, #20]
 8004efe:	4252      	negs	r2, r2
 8004f00:	61a2      	str	r2, [r4, #24]
 8004f02:	6922      	ldr	r2, [r4, #16]
 8004f04:	b942      	cbnz	r2, 8004f18 <__swsetup_r+0xa4>
 8004f06:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004f0a:	d1c5      	bne.n	8004e98 <__swsetup_r+0x24>
 8004f0c:	bd38      	pop	{r3, r4, r5, pc}
 8004f0e:	0799      	lsls	r1, r3, #30
 8004f10:	bf58      	it	pl
 8004f12:	6962      	ldrpl	r2, [r4, #20]
 8004f14:	60a2      	str	r2, [r4, #8]
 8004f16:	e7f4      	b.n	8004f02 <__swsetup_r+0x8e>
 8004f18:	2000      	movs	r0, #0
 8004f1a:	e7f7      	b.n	8004f0c <__swsetup_r+0x98>
 8004f1c:	20000018 	.word	0x20000018

08004f20 <memchr>:
 8004f20:	4603      	mov	r3, r0
 8004f22:	b510      	push	{r4, lr}
 8004f24:	b2c9      	uxtb	r1, r1
 8004f26:	4402      	add	r2, r0
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	d101      	bne.n	8004f32 <memchr+0x12>
 8004f2e:	2000      	movs	r0, #0
 8004f30:	e003      	b.n	8004f3a <memchr+0x1a>
 8004f32:	7804      	ldrb	r4, [r0, #0]
 8004f34:	3301      	adds	r3, #1
 8004f36:	428c      	cmp	r4, r1
 8004f38:	d1f6      	bne.n	8004f28 <memchr+0x8>
 8004f3a:	bd10      	pop	{r4, pc}

08004f3c <__swhatbuf_r>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	460c      	mov	r4, r1
 8004f40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f44:	4615      	mov	r5, r2
 8004f46:	2900      	cmp	r1, #0
 8004f48:	461e      	mov	r6, r3
 8004f4a:	b096      	sub	sp, #88	@ 0x58
 8004f4c:	da0c      	bge.n	8004f68 <__swhatbuf_r+0x2c>
 8004f4e:	89a3      	ldrh	r3, [r4, #12]
 8004f50:	2100      	movs	r1, #0
 8004f52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004f56:	bf14      	ite	ne
 8004f58:	2340      	movne	r3, #64	@ 0x40
 8004f5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004f5e:	2000      	movs	r0, #0
 8004f60:	6031      	str	r1, [r6, #0]
 8004f62:	602b      	str	r3, [r5, #0]
 8004f64:	b016      	add	sp, #88	@ 0x58
 8004f66:	bd70      	pop	{r4, r5, r6, pc}
 8004f68:	466a      	mov	r2, sp
 8004f6a:	f000 f849 	bl	8005000 <_fstat_r>
 8004f6e:	2800      	cmp	r0, #0
 8004f70:	dbed      	blt.n	8004f4e <__swhatbuf_r+0x12>
 8004f72:	9901      	ldr	r1, [sp, #4]
 8004f74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004f78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004f7c:	4259      	negs	r1, r3
 8004f7e:	4159      	adcs	r1, r3
 8004f80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f84:	e7eb      	b.n	8004f5e <__swhatbuf_r+0x22>

08004f86 <__smakebuf_r>:
 8004f86:	898b      	ldrh	r3, [r1, #12]
 8004f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f8a:	079d      	lsls	r5, r3, #30
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460c      	mov	r4, r1
 8004f90:	d507      	bpl.n	8004fa2 <__smakebuf_r+0x1c>
 8004f92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004f96:	6023      	str	r3, [r4, #0]
 8004f98:	6123      	str	r3, [r4, #16]
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	6163      	str	r3, [r4, #20]
 8004f9e:	b003      	add	sp, #12
 8004fa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fa2:	466a      	mov	r2, sp
 8004fa4:	ab01      	add	r3, sp, #4
 8004fa6:	f7ff ffc9 	bl	8004f3c <__swhatbuf_r>
 8004faa:	9f00      	ldr	r7, [sp, #0]
 8004fac:	4605      	mov	r5, r0
 8004fae:	4639      	mov	r1, r7
 8004fb0:	4630      	mov	r0, r6
 8004fb2:	f7ff f8d1 	bl	8004158 <_malloc_r>
 8004fb6:	b948      	cbnz	r0, 8004fcc <__smakebuf_r+0x46>
 8004fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004fbc:	059a      	lsls	r2, r3, #22
 8004fbe:	d4ee      	bmi.n	8004f9e <__smakebuf_r+0x18>
 8004fc0:	f023 0303 	bic.w	r3, r3, #3
 8004fc4:	f043 0302 	orr.w	r3, r3, #2
 8004fc8:	81a3      	strh	r3, [r4, #12]
 8004fca:	e7e2      	b.n	8004f92 <__smakebuf_r+0xc>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004fd6:	81a3      	strh	r3, [r4, #12]
 8004fd8:	9b01      	ldr	r3, [sp, #4]
 8004fda:	6020      	str	r0, [r4, #0]
 8004fdc:	b15b      	cbz	r3, 8004ff6 <__smakebuf_r+0x70>
 8004fde:	4630      	mov	r0, r6
 8004fe0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fe4:	f000 f81e 	bl	8005024 <_isatty_r>
 8004fe8:	b128      	cbz	r0, 8004ff6 <__smakebuf_r+0x70>
 8004fea:	89a3      	ldrh	r3, [r4, #12]
 8004fec:	f023 0303 	bic.w	r3, r3, #3
 8004ff0:	f043 0301 	orr.w	r3, r3, #1
 8004ff4:	81a3      	strh	r3, [r4, #12]
 8004ff6:	89a3      	ldrh	r3, [r4, #12]
 8004ff8:	431d      	orrs	r5, r3
 8004ffa:	81a5      	strh	r5, [r4, #12]
 8004ffc:	e7cf      	b.n	8004f9e <__smakebuf_r+0x18>
	...

08005000 <_fstat_r>:
 8005000:	b538      	push	{r3, r4, r5, lr}
 8005002:	2300      	movs	r3, #0
 8005004:	4d06      	ldr	r5, [pc, #24]	@ (8005020 <_fstat_r+0x20>)
 8005006:	4604      	mov	r4, r0
 8005008:	4608      	mov	r0, r1
 800500a:	4611      	mov	r1, r2
 800500c:	602b      	str	r3, [r5, #0]
 800500e:	f7fb fa5b 	bl	80004c8 <_fstat>
 8005012:	1c43      	adds	r3, r0, #1
 8005014:	d102      	bne.n	800501c <_fstat_r+0x1c>
 8005016:	682b      	ldr	r3, [r5, #0]
 8005018:	b103      	cbz	r3, 800501c <_fstat_r+0x1c>
 800501a:	6023      	str	r3, [r4, #0]
 800501c:	bd38      	pop	{r3, r4, r5, pc}
 800501e:	bf00      	nop
 8005020:	200002d4 	.word	0x200002d4

08005024 <_isatty_r>:
 8005024:	b538      	push	{r3, r4, r5, lr}
 8005026:	2300      	movs	r3, #0
 8005028:	4d05      	ldr	r5, [pc, #20]	@ (8005040 <_isatty_r+0x1c>)
 800502a:	4604      	mov	r4, r0
 800502c:	4608      	mov	r0, r1
 800502e:	602b      	str	r3, [r5, #0]
 8005030:	f7fb fa59 	bl	80004e6 <_isatty>
 8005034:	1c43      	adds	r3, r0, #1
 8005036:	d102      	bne.n	800503e <_isatty_r+0x1a>
 8005038:	682b      	ldr	r3, [r5, #0]
 800503a:	b103      	cbz	r3, 800503e <_isatty_r+0x1a>
 800503c:	6023      	str	r3, [r4, #0]
 800503e:	bd38      	pop	{r3, r4, r5, pc}
 8005040:	200002d4 	.word	0x200002d4

08005044 <_init>:
 8005044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005046:	bf00      	nop
 8005048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504a:	bc08      	pop	{r3}
 800504c:	469e      	mov	lr, r3
 800504e:	4770      	bx	lr

08005050 <_fini>:
 8005050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005052:	bf00      	nop
 8005054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005056:	bc08      	pop	{r3}
 8005058:	469e      	mov	lr, r3
 800505a:	4770      	bx	lr
