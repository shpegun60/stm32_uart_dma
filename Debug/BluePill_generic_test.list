
BluePill_generic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097b0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001284  080098c0  080098c0  0000a8c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab44  0800ab44  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab44  0800ab44  0000bb44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab4c  0800ab4c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800ab4c  0800ab4c  0000bb4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800ab54  0800ab54  0000bb54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800ab5c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001d4  0800ad30  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  0800ad30  0000c42c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002568d  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004434  00000000  00000000  0003188a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a40  00000000  00000000  00035cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000148a  00000000  00000000  00037700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021d8d  00000000  00000000  00038b8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000206fe  00000000  00000000  0005a917  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b6ee2  00000000  00000000  0007b015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131ef7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008618  00000000  00000000  00131f3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0013a554  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	080098a8 	.word	0x080098a8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	080098a8 	.word	0x080098a8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f4a:	4b10      	ldr	r3, [pc, #64]	@ (8000f8c <MX_DMA_Init+0x48>)
 8000f4c:	695b      	ldr	r3, [r3, #20]
 8000f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8000f8c <MX_DMA_Init+0x48>)
 8000f50:	f043 0301 	orr.w	r3, r3, #1
 8000f54:	6153      	str	r3, [r2, #20]
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <MX_DMA_Init+0x48>)
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	f003 0301 	and.w	r3, r3, #1
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000f62:	2200      	movs	r2, #0
 8000f64:	2100      	movs	r1, #0
 8000f66:	200e      	movs	r0, #14
 8000f68:	f000 fc27 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8000f6c:	200e      	movs	r0, #14
 8000f6e:	f000 fc40 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8000f72:	2200      	movs	r2, #0
 8000f74:	2100      	movs	r1, #0
 8000f76:	200f      	movs	r0, #15
 8000f78:	f000 fc1f 	bl	80017ba <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 8000f7c:	200f      	movs	r0, #15
 8000f7e:	f000 fc38 	bl	80017f2 <HAL_NVIC_EnableIRQ>

}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40021000 	.word	0x40021000

08000f90 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b088      	sub	sp, #32
 8000f94:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	605a      	str	r2, [r3, #4]
 8000fa0:	609a      	str	r2, [r3, #8]
 8000fa2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fa4:	4b1e      	ldr	r3, [pc, #120]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a1d      	ldr	r2, [pc, #116]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000faa:	f043 0310 	orr.w	r3, r3, #16
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f003 0310 	and.w	r3, r3, #16
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fbc:	4b18      	ldr	r3, [pc, #96]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a17      	ldr	r2, [pc, #92]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fc2:	f043 0320 	orr.w	r3, r3, #32
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0320 	and.w	r3, r3, #32
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fd6:	699b      	ldr	r3, [r3, #24]
 8000fd8:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fda:	f043 0304 	orr.w	r3, r3, #4
 8000fde:	6193      	str	r3, [r2, #24]
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <MX_GPIO_Init+0x90>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	f003 0304 	and.w	r3, r3, #4
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000fec:	2200      	movs	r2, #0
 8000fee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ff2:	480c      	ldr	r0, [pc, #48]	@ (8001024 <MX_GPIO_Init+0x94>)
 8000ff4:	f001 f848 	bl	8002088 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000ff8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ffc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffe:	2301      	movs	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001002:	2300      	movs	r3, #0
 8001004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001006:	2302      	movs	r3, #2
 8001008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4619      	mov	r1, r3
 8001010:	4804      	ldr	r0, [pc, #16]	@ (8001024 <MX_GPIO_Init+0x94>)
 8001012:	f000 feb5 	bl	8001d80 <HAL_GPIO_Init>

}
 8001016:	bf00      	nop
 8001018:	3720      	adds	r7, #32
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000
 8001024:	40011000 	.word	0x40011000

08001028 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800102c:	f000 fa8c 	bl	8001548 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001030:	f000 f80a 	bl	8001048 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001034:	f7ff ffac 	bl	8000f90 <MX_GPIO_Init>
  MX_DMA_Init();
 8001038:	f7ff ff84 	bl	8000f44 <MX_DMA_Init>
  MX_USART1_UART_Init();
 800103c:	f000 f98a 	bl	8001354 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 8001040:	f002 fe14 	bl	8003c6c <app_main>
  while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <main+0x1c>

08001048 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b090      	sub	sp, #64	@ 0x40
 800104c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2228      	movs	r2, #40	@ 0x28
 8001054:	2100      	movs	r1, #0
 8001056:	4618      	mov	r0, r3
 8001058:	f007 f878 	bl	800814c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
 8001068:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800106a:	2301      	movs	r3, #1
 800106c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800106e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001072:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001078:	2301      	movs	r3, #1
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800107c:	2302      	movs	r3, #2
 800107e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001080:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001086:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800108a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800108c:	f107 0318 	add.w	r3, r7, #24
 8001090:	4618      	mov	r0, r3
 8001092:	f001 f82b 	bl	80020ec <HAL_RCC_OscConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800109c:	f000 f81b 	bl	80010d6 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a0:	230f      	movs	r3, #15
 80010a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010a4:	2302      	movs	r3, #2
 80010a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010a8:	2300      	movs	r3, #0
 80010aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80010ac:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2102      	movs	r1, #2
 80010ba:	4618      	mov	r0, r3
 80010bc:	f001 fa98 	bl	80025f0 <HAL_RCC_ClockConfig>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80010c6:	f000 f806 	bl	80010d6 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80010ca:	f001 fb7b 	bl	80027c4 <HAL_RCC_EnableCSS>
}
 80010ce:	bf00      	nop
 80010d0:	3740      	adds	r7, #64	@ 0x40
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}

080010d6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010d6:	b480      	push	{r7}
 80010d8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010da:	b672      	cpsid	i
}
 80010dc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010de:	bf00      	nop
 80010e0:	e7fd      	b.n	80010de <Error_Handler+0x8>
	...

080010e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b085      	sub	sp, #20
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <HAL_MspInit+0x5c>)
 80010ec:	699b      	ldr	r3, [r3, #24]
 80010ee:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <HAL_MspInit+0x5c>)
 80010f0:	f043 0301 	orr.w	r3, r3, #1
 80010f4:	6193      	str	r3, [r2, #24]
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_MspInit+0x5c>)
 80010f8:	699b      	ldr	r3, [r3, #24]
 80010fa:	f003 0301 	and.w	r3, r3, #1
 80010fe:	60bb      	str	r3, [r7, #8]
 8001100:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <HAL_MspInit+0x5c>)
 8001104:	69db      	ldr	r3, [r3, #28]
 8001106:	4a0e      	ldr	r2, [pc, #56]	@ (8001140 <HAL_MspInit+0x5c>)
 8001108:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110c:	61d3      	str	r3, [r2, #28]
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <HAL_MspInit+0x5c>)
 8001110:	69db      	ldr	r3, [r3, #28]
 8001112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001116:	607b      	str	r3, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800111a:	4b0a      	ldr	r3, [pc, #40]	@ (8001144 <HAL_MspInit+0x60>)
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800112e:	60fb      	str	r3, [r7, #12]
 8001130:	4a04      	ldr	r2, [pc, #16]	@ (8001144 <HAL_MspInit+0x60>)
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr
 8001140:	40021000 	.word	0x40021000
 8001144:	40010000 	.word	0x40010000

08001148 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800114c:	f001 fbcc 	bl	80028e8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <NMI_Handler+0x8>

08001154 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001158:	bf00      	nop
 800115a:	e7fd      	b.n	8001158 <HardFault_Handler+0x4>

0800115c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001160:	bf00      	nop
 8001162:	e7fd      	b.n	8001160 <MemManage_Handler+0x4>

08001164 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <BusFault_Handler+0x4>

0800116c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <UsageFault_Handler+0x4>

08001174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001178:	bf00      	nop
 800117a:	46bd      	mov	sp, r7
 800117c:	bc80      	pop	{r7}
 800117e:	4770      	bx	lr

08001180 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001184:	bf00      	nop
 8001186:	46bd      	mov	sp, r7
 8001188:	bc80      	pop	{r7}
 800118a:	4770      	bx	lr

0800118c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	bc80      	pop	{r7}
 8001196:	4770      	bx	lr

08001198 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800119c:	f000 fa1a 	bl	80015d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 80011a0:	f004 fd12 	bl	8005bc8 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80011ac:	4802      	ldr	r0, [pc, #8]	@ (80011b8 <DMA1_Channel4_IRQHandler+0x10>)
 80011ae:	f000 fca9 	bl	8001b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000280 	.word	0x20000280

080011bc <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <DMA1_Channel5_IRQHandler+0x10>)
 80011c2:	f000 fc9f 	bl	8001b04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	2000023c 	.word	0x2000023c

080011d0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b082      	sub	sp, #8
 80011d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80011d6:	4808      	ldr	r0, [pc, #32]	@ (80011f8 <USART1_IRQHandler+0x28>)
 80011d8:	f001 fdca 	bl	8002d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(&huart1);
 80011dc:	4806      	ldr	r0, [pc, #24]	@ (80011f8 <USART1_IRQHandler+0x28>)
 80011de:	f005 fca5 	bl	8006b2c <getContainerUartInstance>
 80011e2:	6078      	str	r0, [r7, #4]
  if(uart_instance) {
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d002      	beq.n	80011f0 <USART1_IRQHandler+0x20>
	  USER_UART_IRQHandler(uart_instance);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f005 fb7a 	bl	80068e4 <USER_UART_IRQHandler>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	200001f4 	.word	0x200001f4

080011fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80011fc:	b480      	push	{r7}
 80011fe:	af00      	add	r7, sp, #0
  return 1;
 8001200:	2301      	movs	r3, #1
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	bc80      	pop	{r7}
 8001208:	4770      	bx	lr

0800120a <_kill>:

int _kill(int pid, int sig)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b082      	sub	sp, #8
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
 8001212:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001214:	f007 f840 	bl	8008298 <__errno>
 8001218:	4603      	mov	r3, r0
 800121a:	2216      	movs	r2, #22
 800121c:	601a      	str	r2, [r3, #0]
  return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}

0800122a <_exit>:

void _exit (int status)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b082      	sub	sp, #8
 800122e:	af00      	add	r7, sp, #0
 8001230:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001232:	f04f 31ff 	mov.w	r1, #4294967295
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff ffe7 	bl	800120a <_kill>
  while (1) {}    /* Make sure we hang here */
 800123c:	bf00      	nop
 800123e:	e7fd      	b.n	800123c <_exit+0x12>

08001240 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
 8001250:	e00a      	b.n	8001268 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001252:	f3af 8000 	nop.w
 8001256:	4601      	mov	r1, r0
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	1c5a      	adds	r2, r3, #1
 800125c:	60ba      	str	r2, [r7, #8]
 800125e:	b2ca      	uxtb	r2, r1
 8001260:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	3301      	adds	r3, #1
 8001266:	617b      	str	r3, [r7, #20]
 8001268:	697a      	ldr	r2, [r7, #20]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	429a      	cmp	r2, r3
 800126e:	dbf0      	blt.n	8001252 <_read+0x12>
  }

  return len;
 8001270:	687b      	ldr	r3, [r7, #4]
}
 8001272:	4618      	mov	r0, r3
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <_close>:
  }
  return len;
}

int _close(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
 8001298:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012a0:	605a      	str	r2, [r3, #4]
  return 0;
 80012a2:	2300      	movs	r3, #0
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	370c      	adds	r7, #12
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <_isatty>:

int _isatty(int file)
{
 80012ae:	b480      	push	{r7}
 80012b0:	b083      	sub	sp, #12
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80012b6:	2301      	movs	r3, #1
}
 80012b8:	4618      	mov	r0, r3
 80012ba:	370c      	adds	r7, #12
 80012bc:	46bd      	mov	sp, r7
 80012be:	bc80      	pop	{r7}
 80012c0:	4770      	bx	lr

080012c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b085      	sub	sp, #20
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bc80      	pop	{r7}
 80012d8:	4770      	bx	lr
	...

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	@ (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	@ (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	@ (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f006 ffc4 	bl	8008298 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20005000 	.word	0x20005000
 800133c:	00000400 	.word	0x00000400
 8001340:	200001f0 	.word	0x200001f0
 8001344:	20000430 	.word	0x20000430

08001348 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800134c:	bf00      	nop
 800134e:	46bd      	mov	sp, r7
 8001350:	bc80      	pop	{r7}
 8001352:	4770      	bx	lr

08001354 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001358:	4b11      	ldr	r3, [pc, #68]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800135a:	4a12      	ldr	r2, [pc, #72]	@ (80013a4 <MX_USART1_UART_Init+0x50>)
 800135c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800135e:	4b10      	ldr	r3, [pc, #64]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001360:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001364:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001366:	4b0e      	ldr	r3, [pc, #56]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800136c:	4b0c      	ldr	r3, [pc, #48]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001372:	4b0b      	ldr	r3, [pc, #44]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001378:	4b09      	ldr	r3, [pc, #36]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800137a:	220c      	movs	r2, #12
 800137c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800137e:	4b08      	ldr	r3, [pc, #32]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800138a:	4805      	ldr	r0, [pc, #20]	@ (80013a0 <MX_USART1_UART_Init+0x4c>)
 800138c:	f001 fae4 	bl	8002958 <HAL_UART_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001396:	f7ff fe9e 	bl	80010d6 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200001f4 	.word	0x200001f4
 80013a4:	40013800 	.word	0x40013800

080013a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b088      	sub	sp, #32
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b0:	f107 0310 	add.w	r3, r7, #16
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a47      	ldr	r2, [pc, #284]	@ (80014e0 <HAL_UART_MspInit+0x138>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	f040 8086 	bne.w	80014d6 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013ca:	4b46      	ldr	r3, [pc, #280]	@ (80014e4 <HAL_UART_MspInit+0x13c>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	4a45      	ldr	r2, [pc, #276]	@ (80014e4 <HAL_UART_MspInit+0x13c>)
 80013d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013d4:	6193      	str	r3, [r2, #24]
 80013d6:	4b43      	ldr	r3, [pc, #268]	@ (80014e4 <HAL_UART_MspInit+0x13c>)
 80013d8:	699b      	ldr	r3, [r3, #24]
 80013da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e2:	4b40      	ldr	r3, [pc, #256]	@ (80014e4 <HAL_UART_MspInit+0x13c>)
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	4a3f      	ldr	r2, [pc, #252]	@ (80014e4 <HAL_UART_MspInit+0x13c>)
 80013e8:	f043 0304 	orr.w	r3, r3, #4
 80013ec:	6193      	str	r3, [r2, #24]
 80013ee:	4b3d      	ldr	r3, [pc, #244]	@ (80014e4 <HAL_UART_MspInit+0x13c>)
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	f003 0304 	and.w	r3, r3, #4
 80013f6:	60bb      	str	r3, [r7, #8]
 80013f8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001404:	2303      	movs	r3, #3
 8001406:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	4619      	mov	r1, r3
 800140e:	4836      	ldr	r0, [pc, #216]	@ (80014e8 <HAL_UART_MspInit+0x140>)
 8001410:	f000 fcb6 	bl	8001d80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001414:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001418:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0310 	add.w	r3, r7, #16
 8001426:	4619      	mov	r1, r3
 8001428:	482f      	ldr	r0, [pc, #188]	@ (80014e8 <HAL_UART_MspInit+0x140>)
 800142a:	f000 fca9 	bl	8001d80 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800142e:	4b2f      	ldr	r3, [pc, #188]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001430:	4a2f      	ldr	r2, [pc, #188]	@ (80014f0 <HAL_UART_MspInit+0x148>)
 8001432:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001434:	4b2d      	ldr	r3, [pc, #180]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001436:	2200      	movs	r2, #0
 8001438:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800143a:	4b2c      	ldr	r3, [pc, #176]	@ (80014ec <HAL_UART_MspInit+0x144>)
 800143c:	2200      	movs	r2, #0
 800143e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001440:	4b2a      	ldr	r3, [pc, #168]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001446:	4b29      	ldr	r3, [pc, #164]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001448:	2200      	movs	r2, #0
 800144a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <HAL_UART_MspInit+0x144>)
 800144e:	2200      	movs	r2, #0
 8001450:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001452:	4b26      	ldr	r3, [pc, #152]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001454:	2200      	movs	r2, #0
 8001456:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001458:	4b24      	ldr	r3, [pc, #144]	@ (80014ec <HAL_UART_MspInit+0x144>)
 800145a:	2200      	movs	r2, #0
 800145c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800145e:	4823      	ldr	r0, [pc, #140]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001460:	f000 f9e2 	bl	8001828 <HAL_DMA_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 800146a:	f7ff fe34 	bl	80010d6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001472:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001474:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <HAL_UART_MspInit+0x144>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800147a:	4b1e      	ldr	r3, [pc, #120]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 800147c:	4a1e      	ldr	r2, [pc, #120]	@ (80014f8 <HAL_UART_MspInit+0x150>)
 800147e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001480:	4b1c      	ldr	r3, [pc, #112]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 8001482:	2210      	movs	r2, #16
 8001484:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001486:	4b1b      	ldr	r3, [pc, #108]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800148c:	4b19      	ldr	r3, [pc, #100]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 800148e:	2280      	movs	r2, #128	@ 0x80
 8001490:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001492:	4b18      	ldr	r3, [pc, #96]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001498:	4b16      	ldr	r3, [pc, #88]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 800149a:	2200      	movs	r2, #0
 800149c:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800149e:	4b15      	ldr	r3, [pc, #84]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80014a4:	4b13      	ldr	r3, [pc, #76]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80014aa:	4812      	ldr	r0, [pc, #72]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 80014ac:	f000 f9bc 	bl	8001828 <HAL_DMA_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80014b6:	f7ff fe0e 	bl	80010d6 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4a0d      	ldr	r2, [pc, #52]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 80014be:	639a      	str	r2, [r3, #56]	@ 0x38
 80014c0:	4a0c      	ldr	r2, [pc, #48]	@ (80014f4 <HAL_UART_MspInit+0x14c>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2025      	movs	r0, #37	@ 0x25
 80014cc:	f000 f975 	bl	80017ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80014d0:	2025      	movs	r0, #37	@ 0x25
 80014d2:	f000 f98e 	bl	80017f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80014d6:	bf00      	nop
 80014d8:	3720      	adds	r7, #32
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40021000 	.word	0x40021000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	2000023c 	.word	0x2000023c
 80014f0:	40020058 	.word	0x40020058
 80014f4:	20000280 	.word	0x20000280
 80014f8:	40020044 	.word	0x40020044

080014fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014fc:	f7ff ff24 	bl	8001348 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001500:	480b      	ldr	r0, [pc, #44]	@ (8001530 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001502:	490c      	ldr	r1, [pc, #48]	@ (8001534 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001504:	4a0c      	ldr	r2, [pc, #48]	@ (8001538 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001508:	e002      	b.n	8001510 <LoopCopyDataInit>

0800150a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800150a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800150c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150e:	3304      	adds	r3, #4

08001510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001514:	d3f9      	bcc.n	800150a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001516:	4a09      	ldr	r2, [pc, #36]	@ (800153c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001518:	4c09      	ldr	r4, [pc, #36]	@ (8001540 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800151a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800151c:	e001      	b.n	8001522 <LoopFillZerobss>

0800151e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001520:	3204      	adds	r2, #4

08001522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001524:	d3fb      	bcc.n	800151e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001526:	f006 febd 	bl	80082a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800152a:	f7ff fd7d 	bl	8001028 <main>
  bx lr
 800152e:	4770      	bx	lr
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001538:	0800ab5c 	.word	0x0800ab5c
  ldr r2, =_sbss
 800153c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001540:	2000042c 	.word	0x2000042c

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>
	...

08001548 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800154c:	4b08      	ldr	r3, [pc, #32]	@ (8001570 <HAL_Init+0x28>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a07      	ldr	r2, [pc, #28]	@ (8001570 <HAL_Init+0x28>)
 8001552:	f043 0310 	orr.w	r3, r3, #16
 8001556:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001558:	2003      	movs	r0, #3
 800155a:	f000 f923 	bl	80017a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800155e:	200f      	movs	r0, #15
 8001560:	f000 f808 	bl	8001574 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001564:	f7ff fdbe 	bl	80010e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	40022000 	.word	0x40022000

08001574 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b082      	sub	sp, #8
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800157c:	4b12      	ldr	r3, [pc, #72]	@ (80015c8 <HAL_InitTick+0x54>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_InitTick+0x58>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f93b 	bl	800180e <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d001      	beq.n	80015a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e00e      	b.n	80015c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	2b0f      	cmp	r3, #15
 80015a6:	d80a      	bhi.n	80015be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a8:	2200      	movs	r2, #0
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	f04f 30ff 	mov.w	r0, #4294967295
 80015b0:	f000 f903 	bl	80017ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b4:	4a06      	ldr	r2, [pc, #24]	@ (80015d0 <HAL_InitTick+0x5c>)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015ba:	2300      	movs	r3, #0
 80015bc:	e000      	b.n	80015c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015be:	2301      	movs	r3, #1
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000000 	.word	0x20000000
 80015cc:	20000008 	.word	0x20000008
 80015d0:	20000004 	.word	0x20000004

080015d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80015d8:	4b05      	ldr	r3, [pc, #20]	@ (80015f0 <HAL_IncTick+0x1c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	461a      	mov	r2, r3
 80015de:	4b05      	ldr	r3, [pc, #20]	@ (80015f4 <HAL_IncTick+0x20>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4413      	add	r3, r2
 80015e4:	4a03      	ldr	r2, [pc, #12]	@ (80015f4 <HAL_IncTick+0x20>)
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr
 80015f0:	20000008 	.word	0x20000008
 80015f4:	200002c4 	.word	0x200002c4

080015f8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return uwTick;
 80015fc:	4b02      	ldr	r3, [pc, #8]	@ (8001608 <HAL_GetTick+0x10>)
 80015fe:	681b      	ldr	r3, [r3, #0]
}
 8001600:	4618      	mov	r0, r3
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr
 8001608:	200002c4 	.word	0x200002c4

0800160c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800160c:	b480      	push	{r7}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	f003 0307 	and.w	r3, r3, #7
 800161a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800161c:	4b0c      	ldr	r3, [pc, #48]	@ (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 800161e:	68db      	ldr	r3, [r3, #12]
 8001620:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001622:	68ba      	ldr	r2, [r7, #8]
 8001624:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001628:	4013      	ands	r3, r2
 800162a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001634:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001638:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800163c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800163e:	4a04      	ldr	r2, [pc, #16]	@ (8001650 <__NVIC_SetPriorityGrouping+0x44>)
 8001640:	68bb      	ldr	r3, [r7, #8]
 8001642:	60d3      	str	r3, [r2, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	bc80      	pop	{r7}
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	e000ed00 	.word	0xe000ed00

08001654 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001658:	4b04      	ldr	r3, [pc, #16]	@ (800166c <__NVIC_GetPriorityGrouping+0x18>)
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	0a1b      	lsrs	r3, r3, #8
 800165e:	f003 0307 	and.w	r3, r3, #7
}
 8001662:	4618      	mov	r0, r3
 8001664:	46bd      	mov	sp, r7
 8001666:	bc80      	pop	{r7}
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	e000ed00 	.word	0xe000ed00

08001670 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800167a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167e:	2b00      	cmp	r3, #0
 8001680:	db0b      	blt.n	800169a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	f003 021f 	and.w	r2, r3, #31
 8001688:	4906      	ldr	r1, [pc, #24]	@ (80016a4 <__NVIC_EnableIRQ+0x34>)
 800168a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800168e:	095b      	lsrs	r3, r3, #5
 8001690:	2001      	movs	r0, #1
 8001692:	fa00 f202 	lsl.w	r2, r0, r2
 8001696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800169a:	bf00      	nop
 800169c:	370c      	adds	r7, #12
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr
 80016a4:	e000e100 	.word	0xe000e100

080016a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	6039      	str	r1, [r7, #0]
 80016b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	db0a      	blt.n	80016d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	b2da      	uxtb	r2, r3
 80016c0:	490c      	ldr	r1, [pc, #48]	@ (80016f4 <__NVIC_SetPriority+0x4c>)
 80016c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016c6:	0112      	lsls	r2, r2, #4
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	440b      	add	r3, r1
 80016cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016d0:	e00a      	b.n	80016e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	b2da      	uxtb	r2, r3
 80016d6:	4908      	ldr	r1, [pc, #32]	@ (80016f8 <__NVIC_SetPriority+0x50>)
 80016d8:	79fb      	ldrb	r3, [r7, #7]
 80016da:	f003 030f 	and.w	r3, r3, #15
 80016de:	3b04      	subs	r3, #4
 80016e0:	0112      	lsls	r2, r2, #4
 80016e2:	b2d2      	uxtb	r2, r2
 80016e4:	440b      	add	r3, r1
 80016e6:	761a      	strb	r2, [r3, #24]
}
 80016e8:	bf00      	nop
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bc80      	pop	{r7}
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000e100 	.word	0xe000e100
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b089      	sub	sp, #36	@ 0x24
 8001700:	af00      	add	r7, sp, #0
 8001702:	60f8      	str	r0, [r7, #12]
 8001704:	60b9      	str	r1, [r7, #8]
 8001706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001710:	69fb      	ldr	r3, [r7, #28]
 8001712:	f1c3 0307 	rsb	r3, r3, #7
 8001716:	2b04      	cmp	r3, #4
 8001718:	bf28      	it	cs
 800171a:	2304      	movcs	r3, #4
 800171c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3304      	adds	r3, #4
 8001722:	2b06      	cmp	r3, #6
 8001724:	d902      	bls.n	800172c <NVIC_EncodePriority+0x30>
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	3b03      	subs	r3, #3
 800172a:	e000      	b.n	800172e <NVIC_EncodePriority+0x32>
 800172c:	2300      	movs	r3, #0
 800172e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001730:	f04f 32ff 	mov.w	r2, #4294967295
 8001734:	69bb      	ldr	r3, [r7, #24]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	43da      	mvns	r2, r3
 800173c:	68bb      	ldr	r3, [r7, #8]
 800173e:	401a      	ands	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001744:	f04f 31ff 	mov.w	r1, #4294967295
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa01 f303 	lsl.w	r3, r1, r3
 800174e:	43d9      	mvns	r1, r3
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001754:	4313      	orrs	r3, r2
         );
}
 8001756:	4618      	mov	r0, r3
 8001758:	3724      	adds	r7, #36	@ 0x24
 800175a:	46bd      	mov	sp, r7
 800175c:	bc80      	pop	{r7}
 800175e:	4770      	bx	lr

08001760 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001770:	d301      	bcc.n	8001776 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001772:	2301      	movs	r3, #1
 8001774:	e00f      	b.n	8001796 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001776:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <SysTick_Config+0x40>)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3b01      	subs	r3, #1
 800177c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800177e:	210f      	movs	r1, #15
 8001780:	f04f 30ff 	mov.w	r0, #4294967295
 8001784:	f7ff ff90 	bl	80016a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001788:	4b05      	ldr	r3, [pc, #20]	@ (80017a0 <SysTick_Config+0x40>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800178e:	4b04      	ldr	r3, [pc, #16]	@ (80017a0 <SysTick_Config+0x40>)
 8001790:	2207      	movs	r2, #7
 8001792:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001794:	2300      	movs	r3, #0
}
 8001796:	4618      	mov	r0, r3
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	e000e010 	.word	0xe000e010

080017a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ff2d 	bl	800160c <__NVIC_SetPriorityGrouping>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}

080017ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017ba:	b580      	push	{r7, lr}
 80017bc:	b086      	sub	sp, #24
 80017be:	af00      	add	r7, sp, #0
 80017c0:	4603      	mov	r3, r0
 80017c2:	60b9      	str	r1, [r7, #8]
 80017c4:	607a      	str	r2, [r7, #4]
 80017c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017c8:	2300      	movs	r3, #0
 80017ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017cc:	f7ff ff42 	bl	8001654 <__NVIC_GetPriorityGrouping>
 80017d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	6978      	ldr	r0, [r7, #20]
 80017d8:	f7ff ff90 	bl	80016fc <NVIC_EncodePriority>
 80017dc:	4602      	mov	r2, r0
 80017de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017e2:	4611      	mov	r1, r2
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7ff ff5f 	bl	80016a8 <__NVIC_SetPriority>
}
 80017ea:	bf00      	nop
 80017ec:	3718      	adds	r7, #24
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}

080017f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f2:	b580      	push	{r7, lr}
 80017f4:	b082      	sub	sp, #8
 80017f6:	af00      	add	r7, sp, #0
 80017f8:	4603      	mov	r3, r0
 80017fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff35 	bl	8001670 <__NVIC_EnableIRQ>
}
 8001806:	bf00      	nop
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f7ff ffa2 	bl	8001760 <SysTick_Config>
 800181c:	4603      	mov	r3, r0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001828:	b480      	push	{r7}
 800182a:	b085      	sub	sp, #20
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001830:	2300      	movs	r3, #0
 8001832:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d101      	bne.n	800183e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e043      	b.n	80018c6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	461a      	mov	r2, r3
 8001844:	4b22      	ldr	r3, [pc, #136]	@ (80018d0 <HAL_DMA_Init+0xa8>)
 8001846:	4413      	add	r3, r2
 8001848:	4a22      	ldr	r2, [pc, #136]	@ (80018d4 <HAL_DMA_Init+0xac>)
 800184a:	fba2 2303 	umull	r2, r3, r2, r3
 800184e:	091b      	lsrs	r3, r3, #4
 8001850:	009a      	lsls	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	4a1f      	ldr	r2, [pc, #124]	@ (80018d8 <HAL_DMA_Init+0xb0>)
 800185a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2202      	movs	r2, #2
 8001860:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001872:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001876:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800188c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80018a0:	68fa      	ldr	r2, [r7, #12]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	68fa      	ldr	r2, [r7, #12]
 80018ac:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	2200      	movs	r2, #0
 80018b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	2201      	movs	r2, #1
 80018b8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2200      	movs	r2, #0
 80018c0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80018c4:	2300      	movs	r3, #0
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bc80      	pop	{r7}
 80018ce:	4770      	bx	lr
 80018d0:	bffdfff8 	.word	0xbffdfff8
 80018d4:	cccccccd 	.word	0xcccccccd
 80018d8:	40020000 	.word	0x40020000

080018dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60f8      	str	r0, [r7, #12]
 80018e4:	60b9      	str	r1, [r7, #8]
 80018e6:	607a      	str	r2, [r7, #4]
 80018e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	d101      	bne.n	80018fc <HAL_DMA_Start_IT+0x20>
 80018f8:	2302      	movs	r3, #2
 80018fa:	e04b      	b.n	8001994 <HAL_DMA_Start_IT+0xb8>
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2201      	movs	r2, #1
 8001900:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d13a      	bne.n	8001986 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	2202      	movs	r2, #2
 8001914:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	2200      	movs	r2, #0
 800191c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	681a      	ldr	r2, [r3, #0]
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f022 0201 	bic.w	r2, r2, #1
 800192c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	687a      	ldr	r2, [r7, #4]
 8001932:	68b9      	ldr	r1, [r7, #8]
 8001934:	68f8      	ldr	r0, [r7, #12]
 8001936:	f000 f9f6 	bl	8001d26 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800193e:	2b00      	cmp	r3, #0
 8001940:	d008      	beq.n	8001954 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f042 020e 	orr.w	r2, r2, #14
 8001950:	601a      	str	r2, [r3, #0]
 8001952:	e00f      	b.n	8001974 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0204 	bic.w	r2, r2, #4
 8001962:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681a      	ldr	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f042 020a 	orr.w	r2, r2, #10
 8001972:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f042 0201 	orr.w	r2, r2, #1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e005      	b.n	8001992 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 800198e:	2302      	movs	r3, #2
 8001990:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001992:	7dfb      	ldrb	r3, [r7, #23]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019a4:	2300      	movs	r3, #0
 80019a6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d008      	beq.n	80019c6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2204      	movs	r2, #4
 80019b8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	e020      	b.n	8001a08 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 020e 	bic.w	r2, r2, #14
 80019d4:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f022 0201 	bic.w	r2, r2, #1
 80019e4:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019ee:	2101      	movs	r1, #1
 80019f0:	fa01 f202 	lsl.w	r2, r1, r2
 80019f4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2201      	movs	r2, #1
 80019fa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3714      	adds	r7, #20
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
	...

08001a14 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b02      	cmp	r3, #2
 8001a2a:	d005      	beq.n	8001a38 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	73fb      	strb	r3, [r7, #15]
 8001a36:	e051      	b.n	8001adc <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f022 020e 	bic.w	r2, r2, #14
 8001a46:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f022 0201 	bic.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a22      	ldr	r2, [pc, #136]	@ (8001ae8 <HAL_DMA_Abort_IT+0xd4>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d029      	beq.n	8001ab6 <HAL_DMA_Abort_IT+0xa2>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a21      	ldr	r2, [pc, #132]	@ (8001aec <HAL_DMA_Abort_IT+0xd8>)
 8001a68:	4293      	cmp	r3, r2
 8001a6a:	d022      	beq.n	8001ab2 <HAL_DMA_Abort_IT+0x9e>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <HAL_DMA_Abort_IT+0xdc>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d01a      	beq.n	8001aac <HAL_DMA_Abort_IT+0x98>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8001af4 <HAL_DMA_Abort_IT+0xe0>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d012      	beq.n	8001aa6 <HAL_DMA_Abort_IT+0x92>
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a1c      	ldr	r2, [pc, #112]	@ (8001af8 <HAL_DMA_Abort_IT+0xe4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d00a      	beq.n	8001aa0 <HAL_DMA_Abort_IT+0x8c>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8001afc <HAL_DMA_Abort_IT+0xe8>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d102      	bne.n	8001a9a <HAL_DMA_Abort_IT+0x86>
 8001a94:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001a98:	e00e      	b.n	8001ab8 <HAL_DMA_Abort_IT+0xa4>
 8001a9a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001a9e:	e00b      	b.n	8001ab8 <HAL_DMA_Abort_IT+0xa4>
 8001aa0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001aa4:	e008      	b.n	8001ab8 <HAL_DMA_Abort_IT+0xa4>
 8001aa6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aaa:	e005      	b.n	8001ab8 <HAL_DMA_Abort_IT+0xa4>
 8001aac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ab0:	e002      	b.n	8001ab8 <HAL_DMA_Abort_IT+0xa4>
 8001ab2:	2310      	movs	r3, #16
 8001ab4:	e000      	b.n	8001ab8 <HAL_DMA_Abort_IT+0xa4>
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	4a11      	ldr	r2, [pc, #68]	@ (8001b00 <HAL_DMA_Abort_IT+0xec>)
 8001aba:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
    } 
  }
  return status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	40020008 	.word	0x40020008
 8001aec:	4002001c 	.word	0x4002001c
 8001af0:	40020030 	.word	0x40020030
 8001af4:	40020044 	.word	0x40020044
 8001af8:	40020058 	.word	0x40020058
 8001afc:	4002006c 	.word	0x4002006c
 8001b00:	40020000 	.word	0x40020000

08001b04 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b20:	2204      	movs	r2, #4
 8001b22:	409a      	lsls	r2, r3
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	4013      	ands	r3, r2
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d04f      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xc8>
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	f003 0304 	and.w	r3, r3, #4
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d04a      	beq.n	8001bcc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d107      	bne.n	8001b54 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681a      	ldr	r2, [r3, #0]
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f022 0204 	bic.w	r2, r2, #4
 8001b52:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a66      	ldr	r2, [pc, #408]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d029      	beq.n	8001bb2 <HAL_DMA_IRQHandler+0xae>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a65      	ldr	r2, [pc, #404]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d022      	beq.n	8001bae <HAL_DMA_IRQHandler+0xaa>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a63      	ldr	r2, [pc, #396]	@ (8001cfc <HAL_DMA_IRQHandler+0x1f8>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d01a      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0xa4>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a62      	ldr	r2, [pc, #392]	@ (8001d00 <HAL_DMA_IRQHandler+0x1fc>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d012      	beq.n	8001ba2 <HAL_DMA_IRQHandler+0x9e>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a60      	ldr	r2, [pc, #384]	@ (8001d04 <HAL_DMA_IRQHandler+0x200>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00a      	beq.n	8001b9c <HAL_DMA_IRQHandler+0x98>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a5f      	ldr	r2, [pc, #380]	@ (8001d08 <HAL_DMA_IRQHandler+0x204>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d102      	bne.n	8001b96 <HAL_DMA_IRQHandler+0x92>
 8001b90:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001b94:	e00e      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001b96:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001b9a:	e00b      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001b9c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8001ba0:	e008      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001ba2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001ba6:	e005      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001ba8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001bac:	e002      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001bae:	2340      	movs	r3, #64	@ 0x40
 8001bb0:	e000      	b.n	8001bb4 <HAL_DMA_IRQHandler+0xb0>
 8001bb2:	2304      	movs	r3, #4
 8001bb4:	4a55      	ldr	r2, [pc, #340]	@ (8001d0c <HAL_DMA_IRQHandler+0x208>)
 8001bb6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 8094 	beq.w	8001cea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001bca:	e08e      	b.n	8001cea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bd0:	2202      	movs	r2, #2
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d056      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x186>
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d051      	beq.n	8001c8a <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d10b      	bne.n	8001c0c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f022 020a 	bic.w	r2, r2, #10
 8001c02:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a38      	ldr	r2, [pc, #224]	@ (8001cf4 <HAL_DMA_IRQHandler+0x1f0>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d029      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x166>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a37      	ldr	r2, [pc, #220]	@ (8001cf8 <HAL_DMA_IRQHandler+0x1f4>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d022      	beq.n	8001c66 <HAL_DMA_IRQHandler+0x162>
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a35      	ldr	r2, [pc, #212]	@ (8001cfc <HAL_DMA_IRQHandler+0x1f8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d01a      	beq.n	8001c60 <HAL_DMA_IRQHandler+0x15c>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a34      	ldr	r2, [pc, #208]	@ (8001d00 <HAL_DMA_IRQHandler+0x1fc>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d012      	beq.n	8001c5a <HAL_DMA_IRQHandler+0x156>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a32      	ldr	r2, [pc, #200]	@ (8001d04 <HAL_DMA_IRQHandler+0x200>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d00a      	beq.n	8001c54 <HAL_DMA_IRQHandler+0x150>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a31      	ldr	r2, [pc, #196]	@ (8001d08 <HAL_DMA_IRQHandler+0x204>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d102      	bne.n	8001c4e <HAL_DMA_IRQHandler+0x14a>
 8001c48:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001c4c:	e00e      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c4e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c52:	e00b      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c54:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001c58:	e008      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c5a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5e:	e005      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001c64:	e002      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c66:	2320      	movs	r3, #32
 8001c68:	e000      	b.n	8001c6c <HAL_DMA_IRQHandler+0x168>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	4a27      	ldr	r2, [pc, #156]	@ (8001d0c <HAL_DMA_IRQHandler+0x208>)
 8001c6e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d034      	beq.n	8001cea <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001c88:	e02f      	b.n	8001cea <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	2208      	movs	r2, #8
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d028      	beq.n	8001cec <HAL_DMA_IRQHandler+0x1e8>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	f003 0308 	and.w	r3, r3, #8
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d023      	beq.n	8001cec <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020e 	bic.w	r2, r2, #14
 8001cb2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d004      	beq.n	8001cec <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	4798      	blx	r3
    }
  }
  return;
 8001cea:	bf00      	nop
 8001cec:	bf00      	nop
}
 8001cee:	3710      	adds	r7, #16
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd80      	pop	{r7, pc}
 8001cf4:	40020008 	.word	0x40020008
 8001cf8:	4002001c 	.word	0x4002001c
 8001cfc:	40020030 	.word	0x40020030
 8001d00:	40020044 	.word	0x40020044
 8001d04:	40020058 	.word	0x40020058
 8001d08:	4002006c 	.word	0x4002006c
 8001d0c:	40020000 	.word	0x40020000

08001d10 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bc80      	pop	{r7}
 8001d24:	4770      	bx	lr

08001d26 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	60f8      	str	r0, [r7, #12]
 8001d2e:	60b9      	str	r1, [r7, #8]
 8001d30:	607a      	str	r2, [r7, #4]
 8001d32:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d3c:	2101      	movs	r1, #1
 8001d3e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d42:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	2b10      	cmp	r3, #16
 8001d52:	d108      	bne.n	8001d66 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	687a      	ldr	r2, [r7, #4]
 8001d5a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	68ba      	ldr	r2, [r7, #8]
 8001d62:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001d64:	e007      	b.n	8001d76 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	68ba      	ldr	r2, [r7, #8]
 8001d6c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	60da      	str	r2, [r3, #12]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b08b      	sub	sp, #44	@ 0x2c
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d92:	e169      	b.n	8002068 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d94:	2201      	movs	r2, #1
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	4013      	ands	r3, r2
 8001da6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001da8:	69ba      	ldr	r2, [r7, #24]
 8001daa:	69fb      	ldr	r3, [r7, #28]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	f040 8158 	bne.w	8002062 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	4a9a      	ldr	r2, [pc, #616]	@ (8002020 <HAL_GPIO_Init+0x2a0>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d05e      	beq.n	8001e7a <HAL_GPIO_Init+0xfa>
 8001dbc:	4a98      	ldr	r2, [pc, #608]	@ (8002020 <HAL_GPIO_Init+0x2a0>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d875      	bhi.n	8001eae <HAL_GPIO_Init+0x12e>
 8001dc2:	4a98      	ldr	r2, [pc, #608]	@ (8002024 <HAL_GPIO_Init+0x2a4>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d058      	beq.n	8001e7a <HAL_GPIO_Init+0xfa>
 8001dc8:	4a96      	ldr	r2, [pc, #600]	@ (8002024 <HAL_GPIO_Init+0x2a4>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d86f      	bhi.n	8001eae <HAL_GPIO_Init+0x12e>
 8001dce:	4a96      	ldr	r2, [pc, #600]	@ (8002028 <HAL_GPIO_Init+0x2a8>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d052      	beq.n	8001e7a <HAL_GPIO_Init+0xfa>
 8001dd4:	4a94      	ldr	r2, [pc, #592]	@ (8002028 <HAL_GPIO_Init+0x2a8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d869      	bhi.n	8001eae <HAL_GPIO_Init+0x12e>
 8001dda:	4a94      	ldr	r2, [pc, #592]	@ (800202c <HAL_GPIO_Init+0x2ac>)
 8001ddc:	4293      	cmp	r3, r2
 8001dde:	d04c      	beq.n	8001e7a <HAL_GPIO_Init+0xfa>
 8001de0:	4a92      	ldr	r2, [pc, #584]	@ (800202c <HAL_GPIO_Init+0x2ac>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d863      	bhi.n	8001eae <HAL_GPIO_Init+0x12e>
 8001de6:	4a92      	ldr	r2, [pc, #584]	@ (8002030 <HAL_GPIO_Init+0x2b0>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d046      	beq.n	8001e7a <HAL_GPIO_Init+0xfa>
 8001dec:	4a90      	ldr	r2, [pc, #576]	@ (8002030 <HAL_GPIO_Init+0x2b0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d85d      	bhi.n	8001eae <HAL_GPIO_Init+0x12e>
 8001df2:	2b12      	cmp	r3, #18
 8001df4:	d82a      	bhi.n	8001e4c <HAL_GPIO_Init+0xcc>
 8001df6:	2b12      	cmp	r3, #18
 8001df8:	d859      	bhi.n	8001eae <HAL_GPIO_Init+0x12e>
 8001dfa:	a201      	add	r2, pc, #4	@ (adr r2, 8001e00 <HAL_GPIO_Init+0x80>)
 8001dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e00:	08001e7b 	.word	0x08001e7b
 8001e04:	08001e55 	.word	0x08001e55
 8001e08:	08001e67 	.word	0x08001e67
 8001e0c:	08001ea9 	.word	0x08001ea9
 8001e10:	08001eaf 	.word	0x08001eaf
 8001e14:	08001eaf 	.word	0x08001eaf
 8001e18:	08001eaf 	.word	0x08001eaf
 8001e1c:	08001eaf 	.word	0x08001eaf
 8001e20:	08001eaf 	.word	0x08001eaf
 8001e24:	08001eaf 	.word	0x08001eaf
 8001e28:	08001eaf 	.word	0x08001eaf
 8001e2c:	08001eaf 	.word	0x08001eaf
 8001e30:	08001eaf 	.word	0x08001eaf
 8001e34:	08001eaf 	.word	0x08001eaf
 8001e38:	08001eaf 	.word	0x08001eaf
 8001e3c:	08001eaf 	.word	0x08001eaf
 8001e40:	08001eaf 	.word	0x08001eaf
 8001e44:	08001e5d 	.word	0x08001e5d
 8001e48:	08001e71 	.word	0x08001e71
 8001e4c:	4a79      	ldr	r2, [pc, #484]	@ (8002034 <HAL_GPIO_Init+0x2b4>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d013      	beq.n	8001e7a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001e52:	e02c      	b.n	8001eae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	623b      	str	r3, [r7, #32]
          break;
 8001e5a:	e029      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	3304      	adds	r3, #4
 8001e62:	623b      	str	r3, [r7, #32]
          break;
 8001e64:	e024      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	68db      	ldr	r3, [r3, #12]
 8001e6a:	3308      	adds	r3, #8
 8001e6c:	623b      	str	r3, [r7, #32]
          break;
 8001e6e:	e01f      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	330c      	adds	r3, #12
 8001e76:	623b      	str	r3, [r7, #32]
          break;
 8001e78:	e01a      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d102      	bne.n	8001e88 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e82:	2304      	movs	r3, #4
 8001e84:	623b      	str	r3, [r7, #32]
          break;
 8001e86:	e013      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d105      	bne.n	8001e9c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e90:	2308      	movs	r3, #8
 8001e92:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69fa      	ldr	r2, [r7, #28]
 8001e98:	611a      	str	r2, [r3, #16]
          break;
 8001e9a:	e009      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e9c:	2308      	movs	r3, #8
 8001e9e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	69fa      	ldr	r2, [r7, #28]
 8001ea4:	615a      	str	r2, [r3, #20]
          break;
 8001ea6:	e003      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	623b      	str	r3, [r7, #32]
          break;
 8001eac:	e000      	b.n	8001eb0 <HAL_GPIO_Init+0x130>
          break;
 8001eae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	2bff      	cmp	r3, #255	@ 0xff
 8001eb4:	d801      	bhi.n	8001eba <HAL_GPIO_Init+0x13a>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	e001      	b.n	8001ebe <HAL_GPIO_Init+0x13e>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ec0:	69bb      	ldr	r3, [r7, #24]
 8001ec2:	2bff      	cmp	r3, #255	@ 0xff
 8001ec4:	d802      	bhi.n	8001ecc <HAL_GPIO_Init+0x14c>
 8001ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	e002      	b.n	8001ed2 <HAL_GPIO_Init+0x152>
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ece:	3b08      	subs	r3, #8
 8001ed0:	009b      	lsls	r3, r3, #2
 8001ed2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	210f      	movs	r1, #15
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	401a      	ands	r2, r3
 8001ee4:	6a39      	ldr	r1, [r7, #32]
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8001eec:	431a      	orrs	r2, r3
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	f000 80b1 	beq.w	8002062 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f00:	4b4d      	ldr	r3, [pc, #308]	@ (8002038 <HAL_GPIO_Init+0x2b8>)
 8001f02:	699b      	ldr	r3, [r3, #24]
 8001f04:	4a4c      	ldr	r2, [pc, #304]	@ (8002038 <HAL_GPIO_Init+0x2b8>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	6193      	str	r3, [r2, #24]
 8001f0c:	4b4a      	ldr	r3, [pc, #296]	@ (8002038 <HAL_GPIO_Init+0x2b8>)
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	60bb      	str	r3, [r7, #8]
 8001f16:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f18:	4a48      	ldr	r2, [pc, #288]	@ (800203c <HAL_GPIO_Init+0x2bc>)
 8001f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f1c:	089b      	lsrs	r3, r3, #2
 8001f1e:	3302      	adds	r3, #2
 8001f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f24:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f28:	f003 0303 	and.w	r3, r3, #3
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	220f      	movs	r2, #15
 8001f30:	fa02 f303 	lsl.w	r3, r2, r3
 8001f34:	43db      	mvns	r3, r3
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	4013      	ands	r3, r2
 8001f3a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a40      	ldr	r2, [pc, #256]	@ (8002040 <HAL_GPIO_Init+0x2c0>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d013      	beq.n	8001f6c <HAL_GPIO_Init+0x1ec>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a3f      	ldr	r2, [pc, #252]	@ (8002044 <HAL_GPIO_Init+0x2c4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d00d      	beq.n	8001f68 <HAL_GPIO_Init+0x1e8>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002048 <HAL_GPIO_Init+0x2c8>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d007      	beq.n	8001f64 <HAL_GPIO_Init+0x1e4>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a3d      	ldr	r2, [pc, #244]	@ (800204c <HAL_GPIO_Init+0x2cc>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d101      	bne.n	8001f60 <HAL_GPIO_Init+0x1e0>
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e006      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f60:	2304      	movs	r3, #4
 8001f62:	e004      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f64:	2302      	movs	r3, #2
 8001f66:	e002      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e000      	b.n	8001f6e <HAL_GPIO_Init+0x1ee>
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f70:	f002 0203 	and.w	r2, r2, #3
 8001f74:	0092      	lsls	r2, r2, #2
 8001f76:	4093      	lsls	r3, r2
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f7e:	492f      	ldr	r1, [pc, #188]	@ (800203c <HAL_GPIO_Init+0x2bc>)
 8001f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f98:	4b2d      	ldr	r3, [pc, #180]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f9a:	689a      	ldr	r2, [r3, #8]
 8001f9c:	492c      	ldr	r1, [pc, #176]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	608b      	str	r3, [r1, #8]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	689a      	ldr	r2, [r3, #8]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4928      	ldr	r1, [pc, #160]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001fc0:	4b23      	ldr	r3, [pc, #140]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fc2:	68da      	ldr	r2, [r3, #12]
 8001fc4:	4922      	ldr	r1, [pc, #136]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	60cb      	str	r3, [r1, #12]
 8001fcc:	e006      	b.n	8001fdc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fd0:	68da      	ldr	r2, [r3, #12]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
 8001fd4:	43db      	mvns	r3, r3
 8001fd6:	491e      	ldr	r1, [pc, #120]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d006      	beq.n	8001ff6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001fe8:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	4918      	ldr	r1, [pc, #96]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001fee:	69bb      	ldr	r3, [r7, #24]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	604b      	str	r3, [r1, #4]
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8001ff8:	685a      	ldr	r2, [r3, #4]
 8001ffa:	69bb      	ldr	r3, [r7, #24]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	4914      	ldr	r1, [pc, #80]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8002000:	4013      	ands	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d021      	beq.n	8002054 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002010:	4b0f      	ldr	r3, [pc, #60]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	490e      	ldr	r1, [pc, #56]	@ (8002050 <HAL_GPIO_Init+0x2d0>)
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]
 800201c:	e021      	b.n	8002062 <HAL_GPIO_Init+0x2e2>
 800201e:	bf00      	nop
 8002020:	10320000 	.word	0x10320000
 8002024:	10310000 	.word	0x10310000
 8002028:	10220000 	.word	0x10220000
 800202c:	10210000 	.word	0x10210000
 8002030:	10120000 	.word	0x10120000
 8002034:	10110000 	.word	0x10110000
 8002038:	40021000 	.word	0x40021000
 800203c:	40010000 	.word	0x40010000
 8002040:	40010800 	.word	0x40010800
 8002044:	40010c00 	.word	0x40010c00
 8002048:	40011000 	.word	0x40011000
 800204c:	40011400 	.word	0x40011400
 8002050:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002054:	4b0b      	ldr	r3, [pc, #44]	@ (8002084 <HAL_GPIO_Init+0x304>)
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	43db      	mvns	r3, r3
 800205c:	4909      	ldr	r1, [pc, #36]	@ (8002084 <HAL_GPIO_Init+0x304>)
 800205e:	4013      	ands	r3, r2
 8002060:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002062:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002064:	3301      	adds	r3, #1
 8002066:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002068:	683b      	ldr	r3, [r7, #0]
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206e:	fa22 f303 	lsr.w	r3, r2, r3
 8002072:	2b00      	cmp	r3, #0
 8002074:	f47f ae8e 	bne.w	8001d94 <HAL_GPIO_Init+0x14>
  }
}
 8002078:	bf00      	nop
 800207a:	bf00      	nop
 800207c:	372c      	adds	r7, #44	@ 0x2c
 800207e:	46bd      	mov	sp, r7
 8002080:	bc80      	pop	{r7}
 8002082:	4770      	bx	lr
 8002084:	40010400 	.word	0x40010400

08002088 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	807b      	strh	r3, [r7, #2]
 8002094:	4613      	mov	r3, r2
 8002096:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002098:	787b      	ldrb	r3, [r7, #1]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d003      	beq.n	80020a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800209e:	887a      	ldrh	r2, [r7, #2]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80020a4:	e003      	b.n	80020ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80020a6:	887b      	ldrh	r3, [r7, #2]
 80020a8:	041a      	lsls	r2, r3, #16
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	611a      	str	r2, [r3, #16]
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr

080020b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80020ca:	887a      	ldrh	r2, [r7, #2]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	041a      	lsls	r2, r3, #16
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	43d9      	mvns	r1, r3
 80020d6:	887b      	ldrh	r3, [r7, #2]
 80020d8:	400b      	ands	r3, r1
 80020da:	431a      	orrs	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	611a      	str	r2, [r3, #16]
}
 80020e0:	bf00      	nop
 80020e2:	3714      	adds	r7, #20
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bc80      	pop	{r7}
 80020e8:	4770      	bx	lr
	...

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b086      	sub	sp, #24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d101      	bne.n	80020fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	e272      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f003 0301 	and.w	r3, r3, #1
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 8087 	beq.w	800221a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800210c:	4b92      	ldr	r3, [pc, #584]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800210e:	685b      	ldr	r3, [r3, #4]
 8002110:	f003 030c 	and.w	r3, r3, #12
 8002114:	2b04      	cmp	r3, #4
 8002116:	d00c      	beq.n	8002132 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002118:	4b8f      	ldr	r3, [pc, #572]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d112      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
 8002124:	4b8c      	ldr	r3, [pc, #560]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800212c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002130:	d10b      	bne.n	800214a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002132:	4b89      	ldr	r3, [pc, #548]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d06c      	beq.n	8002218 <HAL_RCC_OscConfig+0x12c>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d168      	bne.n	8002218 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	e24c      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002152:	d106      	bne.n	8002162 <HAL_RCC_OscConfig+0x76>
 8002154:	4b80      	ldr	r3, [pc, #512]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a7f      	ldr	r2, [pc, #508]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e02e      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10c      	bne.n	8002184 <HAL_RCC_OscConfig+0x98>
 800216a:	4b7b      	ldr	r3, [pc, #492]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a7a      	ldr	r2, [pc, #488]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002170:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	4b78      	ldr	r3, [pc, #480]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a77      	ldr	r2, [pc, #476]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800217c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002180:	6013      	str	r3, [r2, #0]
 8002182:	e01d      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0xbc>
 800218e:	4b72      	ldr	r3, [pc, #456]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a71      	ldr	r2, [pc, #452]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002194:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b6f      	ldr	r3, [pc, #444]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a6e      	ldr	r2, [pc, #440]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021a4:	6013      	str	r3, [r2, #0]
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0xd4>
 80021a8:	4b6b      	ldr	r3, [pc, #428]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a6a      	ldr	r2, [pc, #424]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b2:	6013      	str	r3, [r2, #0]
 80021b4:	4b68      	ldr	r3, [pc, #416]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a67      	ldr	r2, [pc, #412]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021be:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d013      	beq.n	80021f0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7ff fa16 	bl	80015f8 <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021ce:	e008      	b.n	80021e2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d0:	f7ff fa12 	bl	80015f8 <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	2b64      	cmp	r3, #100	@ 0x64
 80021dc:	d901      	bls.n	80021e2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80021de:	2303      	movs	r3, #3
 80021e0:	e200      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d0f0      	beq.n	80021d0 <HAL_RCC_OscConfig+0xe4>
 80021ee:	e014      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fa02 	bl	80015f8 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021f8:	f7ff f9fe 	bl	80015f8 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b64      	cmp	r3, #100	@ 0x64
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e1ec      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800220a:	4b53      	ldr	r3, [pc, #332]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x10c>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	2b00      	cmp	r3, #0
 8002224:	d063      	beq.n	80022ee <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002226:	4b4c      	ldr	r3, [pc, #304]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 030c 	and.w	r3, r3, #12
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002232:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 030c 	and.w	r3, r3, #12
 800223a:	2b08      	cmp	r3, #8
 800223c:	d11c      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
 800223e:	4b46      	ldr	r3, [pc, #280]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002240:	685b      	ldr	r3, [r3, #4]
 8002242:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002246:	2b00      	cmp	r3, #0
 8002248:	d116      	bne.n	8002278 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800224a:	4b43      	ldr	r3, [pc, #268]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 0302 	and.w	r3, r3, #2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	2b01      	cmp	r3, #1
 800225c:	d001      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e1c0      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002262:	4b3d      	ldr	r3, [pc, #244]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4939      	ldr	r1, [pc, #228]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002276:	e03a      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002280:	4b36      	ldr	r3, [pc, #216]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 8002282:	2201      	movs	r2, #1
 8002284:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002286:	f7ff f9b7 	bl	80015f8 <HAL_GetTick>
 800228a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800228c:	e008      	b.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800228e:	f7ff f9b3 	bl	80015f8 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d901      	bls.n	80022a0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	e1a1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022a0:	4b2d      	ldr	r3, [pc, #180]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0302 	and.w	r3, r3, #2
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d0f0      	beq.n	800228e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ac:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	695b      	ldr	r3, [r3, #20]
 80022b8:	00db      	lsls	r3, r3, #3
 80022ba:	4927      	ldr	r1, [pc, #156]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	600b      	str	r3, [r1, #0]
 80022c0:	e015      	b.n	80022ee <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022c2:	4b26      	ldr	r3, [pc, #152]	@ (800235c <HAL_RCC_OscConfig+0x270>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c8:	f7ff f996 	bl	80015f8 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022d0:	f7ff f992 	bl	80015f8 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e180      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022e2:	4b1d      	ldr	r3, [pc, #116]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d03a      	beq.n	8002370 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	699b      	ldr	r3, [r3, #24]
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d019      	beq.n	8002336 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002302:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_RCC_OscConfig+0x274>)
 8002304:	2201      	movs	r2, #1
 8002306:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002308:	f7ff f976 	bl	80015f8 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002310:	f7ff f972 	bl	80015f8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e160      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002322:	4b0d      	ldr	r3, [pc, #52]	@ (8002358 <HAL_RCC_OscConfig+0x26c>)
 8002324:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800232e:	2001      	movs	r0, #1
 8002330:	f000 faee 	bl	8002910 <RCC_Delay>
 8002334:	e01c      	b.n	8002370 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002336:	4b0a      	ldr	r3, [pc, #40]	@ (8002360 <HAL_RCC_OscConfig+0x274>)
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800233c:	f7ff f95c 	bl	80015f8 <HAL_GetTick>
 8002340:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002342:	e00f      	b.n	8002364 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002344:	f7ff f958 	bl	80015f8 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d908      	bls.n	8002364 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e146      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000
 800235c:	42420000 	.word	0x42420000
 8002360:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002364:	4b92      	ldr	r3, [pc, #584]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d1e9      	bne.n	8002344 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	f000 80a6 	beq.w	80024ca <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800237e:	2300      	movs	r3, #0
 8002380:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002382:	4b8b      	ldr	r3, [pc, #556]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10d      	bne.n	80023aa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b88      	ldr	r3, [pc, #544]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002390:	69db      	ldr	r3, [r3, #28]
 8002392:	4a87      	ldr	r2, [pc, #540]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	61d3      	str	r3, [r2, #28]
 800239a:	4b85      	ldr	r3, [pc, #532]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800239c:	69db      	ldr	r3, [r3, #28]
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023aa:	4b82      	ldr	r3, [pc, #520]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023b6:	4b7f      	ldr	r3, [pc, #508]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a7e      	ldr	r2, [pc, #504]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7ff f919 	bl	80015f8 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7ff f915 	bl	80015f8 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b64      	cmp	r3, #100	@ 0x64
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e103      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023dc:	4b75      	ldr	r3, [pc, #468]	@ (80025b4 <HAL_RCC_OscConfig+0x4c8>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d106      	bne.n	80023fe <HAL_RCC_OscConfig+0x312>
 80023f0:	4b6f      	ldr	r3, [pc, #444]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	4a6e      	ldr	r2, [pc, #440]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80023f6:	f043 0301 	orr.w	r3, r3, #1
 80023fa:	6213      	str	r3, [r2, #32]
 80023fc:	e02d      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10c      	bne.n	8002420 <HAL_RCC_OscConfig+0x334>
 8002406:	4b6a      	ldr	r3, [pc, #424]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002408:	6a1b      	ldr	r3, [r3, #32]
 800240a:	4a69      	ldr	r2, [pc, #420]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	6213      	str	r3, [r2, #32]
 8002412:	4b67      	ldr	r3, [pc, #412]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002414:	6a1b      	ldr	r3, [r3, #32]
 8002416:	4a66      	ldr	r2, [pc, #408]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002418:	f023 0304 	bic.w	r3, r3, #4
 800241c:	6213      	str	r3, [r2, #32]
 800241e:	e01c      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b05      	cmp	r3, #5
 8002426:	d10c      	bne.n	8002442 <HAL_RCC_OscConfig+0x356>
 8002428:	4b61      	ldr	r3, [pc, #388]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a60      	ldr	r2, [pc, #384]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800242e:	f043 0304 	orr.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
 8002434:	4b5e      	ldr	r3, [pc, #376]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	6a1b      	ldr	r3, [r3, #32]
 8002438:	4a5d      	ldr	r2, [pc, #372]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	f043 0301 	orr.w	r3, r3, #1
 800243e:	6213      	str	r3, [r2, #32]
 8002440:	e00b      	b.n	800245a <HAL_RCC_OscConfig+0x36e>
 8002442:	4b5b      	ldr	r3, [pc, #364]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	4a5a      	ldr	r2, [pc, #360]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	f023 0301 	bic.w	r3, r3, #1
 800244c:	6213      	str	r3, [r2, #32]
 800244e:	4b58      	ldr	r3, [pc, #352]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	6a1b      	ldr	r3, [r3, #32]
 8002452:	4a57      	ldr	r2, [pc, #348]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	f023 0304 	bic.w	r3, r3, #4
 8002458:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d015      	beq.n	800248e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002462:	f7ff f8c9 	bl	80015f8 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002468:	e00a      	b.n	8002480 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800246a:	f7ff f8c5 	bl	80015f8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002478:	4293      	cmp	r3, r2
 800247a:	d901      	bls.n	8002480 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e0b1      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002480:	4b4b      	ldr	r3, [pc, #300]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002482:	6a1b      	ldr	r3, [r3, #32]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d0ee      	beq.n	800246a <HAL_RCC_OscConfig+0x37e>
 800248c:	e014      	b.n	80024b8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800248e:	f7ff f8b3 	bl	80015f8 <HAL_GetTick>
 8002492:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002494:	e00a      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002496:	f7ff f8af 	bl	80015f8 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d901      	bls.n	80024ac <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024a8:	2303      	movs	r3, #3
 80024aa:	e09b      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ac:	4b40      	ldr	r3, [pc, #256]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	f003 0302 	and.w	r3, r3, #2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d1ee      	bne.n	8002496 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024b8:	7dfb      	ldrb	r3, [r7, #23]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d105      	bne.n	80024ca <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024be:	4b3c      	ldr	r3, [pc, #240]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c0:	69db      	ldr	r3, [r3, #28]
 80024c2:	4a3b      	ldr	r2, [pc, #236]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024c8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	f000 8087 	beq.w	80025e2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024d4:	4b36      	ldr	r3, [pc, #216]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 030c 	and.w	r3, r3, #12
 80024dc:	2b08      	cmp	r3, #8
 80024de:	d061      	beq.n	80025a4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d146      	bne.n	8002576 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024e8:	4b33      	ldr	r3, [pc, #204]	@ (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ee:	f7ff f883 	bl	80015f8 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024f4:	e008      	b.n	8002508 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024f6:	f7ff f87f 	bl	80015f8 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	2b02      	cmp	r3, #2
 8002502:	d901      	bls.n	8002508 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002504:	2303      	movs	r3, #3
 8002506:	e06d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002508:	4b29      	ldr	r3, [pc, #164]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1f0      	bne.n	80024f6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800251c:	d108      	bne.n	8002530 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800251e:	4b24      	ldr	r3, [pc, #144]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	4921      	ldr	r1, [pc, #132]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800252c:	4313      	orrs	r3, r2
 800252e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002530:	4b1f      	ldr	r3, [pc, #124]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a19      	ldr	r1, [r3, #32]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	430b      	orrs	r3, r1
 8002542:	491b      	ldr	r1, [pc, #108]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002544:	4313      	orrs	r3, r2
 8002546:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002548:	4b1b      	ldr	r3, [pc, #108]	@ (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 800254a:	2201      	movs	r2, #1
 800254c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800254e:	f7ff f853 	bl	80015f8 <HAL_GetTick>
 8002552:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002554:	e008      	b.n	8002568 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002556:	f7ff f84f 	bl	80015f8 <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d901      	bls.n	8002568 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	e03d      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002568:	4b11      	ldr	r3, [pc, #68]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d0f0      	beq.n	8002556 <HAL_RCC_OscConfig+0x46a>
 8002574:	e035      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_RCC_OscConfig+0x4cc>)
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff f83c 	bl	80015f8 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002584:	f7ff f838 	bl	80015f8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b02      	cmp	r3, #2
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e026      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002596:	4b06      	ldr	r3, [pc, #24]	@ (80025b0 <HAL_RCC_OscConfig+0x4c4>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1f0      	bne.n	8002584 <HAL_RCC_OscConfig+0x498>
 80025a2:	e01e      	b.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	69db      	ldr	r3, [r3, #28]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e019      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40007000 	.word	0x40007000
 80025b8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025bc:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <HAL_RCC_OscConfig+0x500>)
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025da:	429a      	cmp	r2, r3
 80025dc:	d001      	beq.n	80025e2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80025e2:	2300      	movs	r3, #0
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3718      	adds	r7, #24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd80      	pop	{r7, pc}
 80025ec:	40021000 	.word	0x40021000

080025f0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b084      	sub	sp, #16
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d101      	bne.n	8002604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e0d0      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002604:	4b6a      	ldr	r3, [pc, #424]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0307 	and.w	r3, r3, #7
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	429a      	cmp	r2, r3
 8002610:	d910      	bls.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002612:	4b67      	ldr	r3, [pc, #412]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 0207 	bic.w	r2, r3, #7
 800261a:	4965      	ldr	r1, [pc, #404]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	4313      	orrs	r3, r2
 8002620:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002622:	4b63      	ldr	r3, [pc, #396]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 0307 	and.w	r3, r3, #7
 800262a:	683a      	ldr	r2, [r7, #0]
 800262c:	429a      	cmp	r2, r3
 800262e:	d001      	beq.n	8002634 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e0b8      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d020      	beq.n	8002682 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0304 	and.w	r3, r3, #4
 8002648:	2b00      	cmp	r3, #0
 800264a:	d005      	beq.n	8002658 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800264c:	4b59      	ldr	r3, [pc, #356]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	4a58      	ldr	r2, [pc, #352]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002652:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002656:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d005      	beq.n	8002670 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002664:	4b53      	ldr	r3, [pc, #332]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	4a52      	ldr	r2, [pc, #328]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800266a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800266e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002670:	4b50      	ldr	r3, [pc, #320]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	494d      	ldr	r1, [pc, #308]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	4313      	orrs	r3, r2
 8002680:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0301 	and.w	r3, r3, #1
 800268a:	2b00      	cmp	r3, #0
 800268c:	d040      	beq.n	8002710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d107      	bne.n	80026a6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002696:	4b47      	ldr	r3, [pc, #284]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d115      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07f      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d107      	bne.n	80026be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ae:	4b41      	ldr	r3, [pc, #260]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d109      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	e073      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026be:	4b3d      	ldr	r3, [pc, #244]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80026ce:	4b39      	ldr	r3, [pc, #228]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	f023 0203 	bic.w	r2, r3, #3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4936      	ldr	r1, [pc, #216]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80026e0:	f7fe ff8a 	bl	80015f8 <HAL_GetTick>
 80026e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026e6:	e00a      	b.n	80026fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e8:	f7fe ff86 	bl	80015f8 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026f6:	4293      	cmp	r3, r2
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e053      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026fe:	4b2d      	ldr	r3, [pc, #180]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 020c 	and.w	r2, r3, #12
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	685b      	ldr	r3, [r3, #4]
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	429a      	cmp	r2, r3
 800270e:	d1eb      	bne.n	80026e8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002710:	4b27      	ldr	r3, [pc, #156]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d210      	bcs.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b24      	ldr	r3, [pc, #144]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 0207 	bic.w	r2, r3, #7
 8002726:	4922      	ldr	r1, [pc, #136]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b20      	ldr	r3, [pc, #128]	@ (80027b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0307 	and.w	r3, r3, #7
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0304 	and.w	r3, r3, #4
 8002748:	2b00      	cmp	r3, #0
 800274a:	d008      	beq.n	800275e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800274c:	4b19      	ldr	r3, [pc, #100]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	68db      	ldr	r3, [r3, #12]
 8002758:	4916      	ldr	r1, [pc, #88]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800275a:	4313      	orrs	r3, r2
 800275c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f003 0308 	and.w	r3, r3, #8
 8002766:	2b00      	cmp	r3, #0
 8002768:	d009      	beq.n	800277e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800276a:	4b12      	ldr	r3, [pc, #72]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	00db      	lsls	r3, r3, #3
 8002778:	490e      	ldr	r1, [pc, #56]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 800277a:	4313      	orrs	r3, r2
 800277c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800277e:	f000 f82d 	bl	80027dc <HAL_RCC_GetSysClockFreq>
 8002782:	4602      	mov	r2, r0
 8002784:	4b0b      	ldr	r3, [pc, #44]	@ (80027b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	091b      	lsrs	r3, r3, #4
 800278a:	f003 030f 	and.w	r3, r3, #15
 800278e:	490a      	ldr	r1, [pc, #40]	@ (80027b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	5ccb      	ldrb	r3, [r1, r3]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	4a09      	ldr	r2, [pc, #36]	@ (80027bc <HAL_RCC_ClockConfig+0x1cc>)
 8002798:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800279a:	4b09      	ldr	r3, [pc, #36]	@ (80027c0 <HAL_RCC_ClockConfig+0x1d0>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe fee8 	bl	8001574 <HAL_InitTick>

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	40022000 	.word	0x40022000
 80027b4:	40021000 	.word	0x40021000
 80027b8:	0800a520 	.word	0x0800a520
 80027bc:	20000000 	.word	0x20000000
 80027c0:	20000004 	.word	0x20000004

080027c4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_RCC_EnableCSS+0x14>)
 80027ca:	2201      	movs	r2, #1
 80027cc:	601a      	str	r2, [r3, #0]
}
 80027ce:	bf00      	nop
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	4242004c 	.word	0x4242004c

080027dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80027dc:	b480      	push	{r7}
 80027de:	b087      	sub	sp, #28
 80027e0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	2300      	movs	r3, #0
 80027e8:	60bb      	str	r3, [r7, #8]
 80027ea:	2300      	movs	r3, #0
 80027ec:	617b      	str	r3, [r7, #20]
 80027ee:	2300      	movs	r3, #0
 80027f0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80027f2:	2300      	movs	r3, #0
 80027f4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80027f6:	4b1e      	ldr	r3, [pc, #120]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x94>)
 80027f8:	685b      	ldr	r3, [r3, #4]
 80027fa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b04      	cmp	r3, #4
 8002804:	d002      	beq.n	800280c <HAL_RCC_GetSysClockFreq+0x30>
 8002806:	2b08      	cmp	r3, #8
 8002808:	d003      	beq.n	8002812 <HAL_RCC_GetSysClockFreq+0x36>
 800280a:	e027      	b.n	800285c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800280c:	4b19      	ldr	r3, [pc, #100]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x98>)
 800280e:	613b      	str	r3, [r7, #16]
      break;
 8002810:	e027      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	0c9b      	lsrs	r3, r3, #18
 8002816:	f003 030f 	and.w	r3, r3, #15
 800281a:	4a17      	ldr	r2, [pc, #92]	@ (8002878 <HAL_RCC_GetSysClockFreq+0x9c>)
 800281c:	5cd3      	ldrb	r3, [r2, r3]
 800281e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d010      	beq.n	800284c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800282a:	4b11      	ldr	r3, [pc, #68]	@ (8002870 <HAL_RCC_GetSysClockFreq+0x94>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	0c5b      	lsrs	r3, r3, #17
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	4a11      	ldr	r2, [pc, #68]	@ (800287c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002836:	5cd3      	ldrb	r3, [r2, r3]
 8002838:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a0d      	ldr	r2, [pc, #52]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x98>)
 800283e:	fb03 f202 	mul.w	r2, r3, r2
 8002842:	68bb      	ldr	r3, [r7, #8]
 8002844:	fbb2 f3f3 	udiv	r3, r2, r3
 8002848:	617b      	str	r3, [r7, #20]
 800284a:	e004      	b.n	8002856 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0c      	ldr	r2, [pc, #48]	@ (8002880 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002850:	fb02 f303 	mul.w	r3, r2, r3
 8002854:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	613b      	str	r3, [r7, #16]
      break;
 800285a:	e002      	b.n	8002862 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800285c:	4b05      	ldr	r3, [pc, #20]	@ (8002874 <HAL_RCC_GetSysClockFreq+0x98>)
 800285e:	613b      	str	r3, [r7, #16]
      break;
 8002860:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002862:	693b      	ldr	r3, [r7, #16]
}
 8002864:	4618      	mov	r0, r3
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	007a1200 	.word	0x007a1200
 8002878:	0800a538 	.word	0x0800a538
 800287c:	0800a548 	.word	0x0800a548
 8002880:	003d0900 	.word	0x003d0900

08002884 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002888:	4b02      	ldr	r3, [pc, #8]	@ (8002894 <HAL_RCC_GetHCLKFreq+0x10>)
 800288a:	681b      	ldr	r3, [r3, #0]
}
 800288c:	4618      	mov	r0, r3
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr
 8002894:	20000000 	.word	0x20000000

08002898 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800289c:	f7ff fff2 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028a0:	4602      	mov	r2, r0
 80028a2:	4b05      	ldr	r3, [pc, #20]	@ (80028b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	4903      	ldr	r1, [pc, #12]	@ (80028bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ae:	5ccb      	ldrb	r3, [r1, r3]
 80028b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40021000 	.word	0x40021000
 80028bc:	0800a530 	.word	0x0800a530

080028c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028c4:	f7ff ffde 	bl	8002884 <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0adb      	lsrs	r3, r3, #11
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	@ (80028e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	0800a530 	.word	0x0800a530

080028e8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80028ec:	4b06      	ldr	r3, [pc, #24]	@ (8002908 <HAL_RCC_NMI_IRQHandler+0x20>)
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f4:	2b80      	cmp	r3, #128	@ 0x80
 80028f6:	d104      	bne.n	8002902 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80028f8:	f000 f828 	bl	800294c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80028fc:	4b03      	ldr	r3, [pc, #12]	@ (800290c <HAL_RCC_NMI_IRQHandler+0x24>)
 80028fe:	2280      	movs	r2, #128	@ 0x80
 8002900:	701a      	strb	r2, [r3, #0]
  }
}
 8002902:	bf00      	nop
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	40021000 	.word	0x40021000
 800290c:	4002100a 	.word	0x4002100a

08002910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <RCC_Delay+0x34>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <RCC_Delay+0x38>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800292c:	bf00      	nop
  }
  while (Delay --);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	60fa      	str	r2, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f9      	bne.n	800292c <RCC_Delay+0x1c>
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000000 	.word	0x20000000
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8002950:	bf00      	nop
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr

08002958 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d101      	bne.n	800296a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	e042      	b.n	80029f0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b00      	cmp	r3, #0
 8002974:	d106      	bne.n	8002984 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2200      	movs	r2, #0
 800297a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fd12 	bl	80013a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2224      	movs	r2, #36	@ 0x24
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68da      	ldr	r2, [r3, #12]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800299a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f001 f8b9 	bl	8003b14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	691a      	ldr	r2, [r3, #16]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80029b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80029c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	68da      	ldr	r2, [r3, #12]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80029d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2220      	movs	r2, #32
 80029dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2220      	movs	r2, #32
 80029e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b08a      	sub	sp, #40	@ 0x28
 80029fc:	af02      	add	r7, sp, #8
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	603b      	str	r3, [r7, #0]
 8002a04:	4613      	mov	r3, r2
 8002a06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b20      	cmp	r3, #32
 8002a16:	d16d      	bne.n	8002af4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d002      	beq.n	8002a24 <HAL_UART_Transmit+0x2c>
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d101      	bne.n	8002a28 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e066      	b.n	8002af6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	2221      	movs	r2, #33	@ 0x21
 8002a32:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002a36:	f7fe fddf 	bl	80015f8 <HAL_GetTick>
 8002a3a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	88fa      	ldrh	r2, [r7, #6]
 8002a40:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	88fa      	ldrh	r2, [r7, #6]
 8002a46:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a50:	d108      	bne.n	8002a64 <HAL_UART_Transmit+0x6c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d104      	bne.n	8002a64 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	61bb      	str	r3, [r7, #24]
 8002a62:	e003      	b.n	8002a6c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002a6c:	e02a      	b.n	8002ac4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	9300      	str	r3, [sp, #0]
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	2200      	movs	r2, #0
 8002a76:	2180      	movs	r1, #128	@ 0x80
 8002a78:	68f8      	ldr	r0, [r7, #12]
 8002a7a:	f000 fd81 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d001      	beq.n	8002a88 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	e036      	b.n	8002af6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	881b      	ldrh	r3, [r3, #0]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002a9e:	69bb      	ldr	r3, [r7, #24]
 8002aa0:	3302      	adds	r3, #2
 8002aa2:	61bb      	str	r3, [r7, #24]
 8002aa4:	e007      	b.n	8002ab6 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	3301      	adds	r3, #1
 8002ab4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3b01      	subs	r3, #1
 8002abe:	b29a      	uxth	r2, r3
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1cf      	bne.n	8002a6e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2140      	movs	r1, #64	@ 0x40
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 fd51 	bl	8003580 <UART_WaitOnFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d001      	beq.n	8002ae8 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e006      	b.n	8002af6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	2220      	movs	r2, #32
 8002aec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002af0:	2300      	movs	r3, #0
 8002af2:	e000      	b.n	8002af6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002af4:	2302      	movs	r3, #2
  }
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3720      	adds	r7, #32
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
	...

08002b00 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b08c      	sub	sp, #48	@ 0x30
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b20      	cmp	r3, #32
 8002b18:	d156      	bne.n	8002bc8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d002      	beq.n	8002b26 <HAL_UART_Transmit_DMA+0x26>
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e04f      	b.n	8002bca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8002b2a:	68ba      	ldr	r2, [r7, #8]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	88fa      	ldrh	r2, [r7, #6]
 8002b34:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	88fa      	ldrh	r2, [r7, #6]
 8002b3a:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	2221      	movs	r2, #33	@ 0x21
 8002b46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b4e:	4a21      	ldr	r2, [pc, #132]	@ (8002bd4 <HAL_UART_Transmit_DMA+0xd4>)
 8002b50:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b56:	4a20      	ldr	r2, [pc, #128]	@ (8002bd8 <HAL_UART_Transmit_DMA+0xd8>)
 8002b58:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8002bdc <HAL_UART_Transmit_DMA+0xdc>)
 8002b60:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b66:	2200      	movs	r2, #0
 8002b68:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8002b6a:	f107 0308 	add.w	r3, r7, #8
 8002b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8002b74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b76:	6819      	ldr	r1, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	461a      	mov	r2, r3
 8002b80:	88fb      	ldrh	r3, [r7, #6]
 8002b82:	f7fe feab 	bl	80018dc <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002b8e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	3314      	adds	r3, #20
 8002b96:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b98:	69bb      	ldr	r3, [r7, #24]
 8002b9a:	e853 3f00 	ldrex	r3, [r3]
 8002b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	3314      	adds	r3, #20
 8002bae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002bb0:	627a      	str	r2, [r7, #36]	@ 0x24
 8002bb2:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bb4:	6a39      	ldr	r1, [r7, #32]
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002bb8:	e841 2300 	strex	r3, r2, [r1]
 8002bbc:	61fb      	str	r3, [r7, #28]
   return(result);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e5      	bne.n	8002b90 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	e000      	b.n	8002bca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8002bc8:	2302      	movs	r3, #2
  }
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3730      	adds	r7, #48	@ 0x30
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	080032cf 	.word	0x080032cf
 8002bd8:	08003369 	.word	0x08003369
 8002bdc:	080034ed 	.word	0x080034ed

08002be0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	4613      	mov	r3, r2
 8002bec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b20      	cmp	r3, #32
 8002bf8:	d112      	bne.n	8002c20 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d002      	beq.n	8002c06 <HAL_UART_Receive_DMA+0x26>
 8002c00:	88fb      	ldrh	r3, [r7, #6]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d101      	bne.n	8002c0a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e00b      	b.n	8002c22 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002c10:	88fb      	ldrh	r3, [r7, #6]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68b9      	ldr	r1, [r7, #8]
 8002c16:	68f8      	ldr	r0, [r7, #12]
 8002c18:	f000 fd20 	bl	800365c <UART_Start_Receive_DMA>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	e000      	b.n	8002c22 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002c20:	2302      	movs	r3, #2
  }
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b09a      	sub	sp, #104	@ 0x68
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	330c      	adds	r3, #12
 8002c38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c3c:	e853 3f00 	ldrex	r3, [r3]
 8002c40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8002c42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c48:	667b      	str	r3, [r7, #100]	@ 0x64
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	330c      	adds	r3, #12
 8002c50:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002c52:	657a      	str	r2, [r7, #84]	@ 0x54
 8002c54:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8002c58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002c5a:	e841 2300 	strex	r3, r2, [r1]
 8002c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8002c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1e5      	bne.n	8002c32 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	3314      	adds	r3, #20
 8002c6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c70:	e853 3f00 	ldrex	r3, [r3]
 8002c74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002c76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c78:	f023 0301 	bic.w	r3, r3, #1
 8002c7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002c86:	643a      	str	r2, [r7, #64]	@ 0x40
 8002c88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002c8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002c8e:	e841 2300 	strex	r3, r2, [r1]
 8002c92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d1e5      	bne.n	8002c66 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d119      	bne.n	8002cd6 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	330c      	adds	r3, #12
 8002ca8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	e853 3f00 	ldrex	r3, [r3]
 8002cb0:	61fb      	str	r3, [r7, #28]
   return(result);
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	f023 0310 	bic.w	r3, r3, #16
 8002cb8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	330c      	adds	r3, #12
 8002cc0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8002cc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002cc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002cca:	e841 2300 	strex	r3, r2, [r1]
 8002cce:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1e5      	bne.n	8002ca2 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	695b      	ldr	r3, [r3, #20]
 8002cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d036      	beq.n	8002d52 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	3314      	adds	r3, #20
 8002cea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	e853 3f00 	ldrex	r3, [r3]
 8002cf2:	60bb      	str	r3, [r7, #8]
   return(result);
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cfa:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	3314      	adds	r3, #20
 8002d02:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d04:	61ba      	str	r2, [r7, #24]
 8002d06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d08:	6979      	ldr	r1, [r7, #20]
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	e841 2300 	strex	r3, r2, [r1]
 8002d10:	613b      	str	r3, [r7, #16]
   return(result);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d1e5      	bne.n	8002ce4 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d018      	beq.n	8002d52 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d24:	2200      	movs	r2, #0
 8002d26:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fe35 	bl	800199c <HAL_DMA_Abort>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d00c      	beq.n	8002d52 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe ffe7 	bl	8001d10 <HAL_DMA_GetError>
 8002d42:	4603      	mov	r3, r0
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d104      	bne.n	8002d52 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2210      	movs	r2, #16
 8002d4c:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8002d4e:	2303      	movs	r3, #3
 8002d50:	e00a      	b.n	8002d68 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2220      	movs	r2, #32
 8002d5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3768      	adds	r7, #104	@ 0x68
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b0ba      	sub	sp, #232	@ 0xe8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68db      	ldr	r3, [r3, #12]
 8002d88:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002da6:	f003 030f 	and.w	r3, r3, #15
 8002daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002dae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d10f      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002db6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dba:	f003 0320 	and.w	r3, r3, #32
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
 8002dc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002dc6:	f003 0320 	and.w	r3, r3, #32
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d003      	beq.n	8002dd6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fde2 	bl	8003998 <UART_Receive_IT>
      return;
 8002dd4:	e25b      	b.n	800328e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002dd6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80de 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
 8002de0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002de4:	f003 0301 	and.w	r3, r3, #1
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002df0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	f000 80d1 	beq.w	8002f9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002dfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002dfe:	f003 0301 	and.w	r3, r3, #1
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
 8002e06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e16:	f043 0201 	orr.w	r2, r3, #1
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
 8002e2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00b      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
 8002e4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e52:	f003 0301 	and.w	r3, r3, #1
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d005      	beq.n	8002e66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e5e:	f043 0204 	orr.w	r2, r3, #4
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002e66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d011      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
 8002e72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e76:	f003 0320 	and.w	r3, r3, #32
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d105      	bne.n	8002e8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e82:	f003 0301 	and.w	r3, r3, #1
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d005      	beq.n	8002e96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e8e:	f043 0208 	orr.w	r2, r3, #8
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	f000 81f2 	beq.w	8003284 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
 8002eac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002eb0:	f003 0320 	and.w	r3, r3, #32
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d002      	beq.n	8002ebe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002eb8:	6878      	ldr	r0, [r7, #4]
 8002eba:	f000 fd6d 	bl	8003998 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	695b      	ldr	r3, [r3, #20]
 8002ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eda:	f003 0308 	and.w	r3, r3, #8
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d103      	bne.n	8002eea <HAL_UART_IRQHandler+0x17a>
 8002ee2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d04f      	beq.n	8002f8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f000 fc77 	bl	80037de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d041      	beq.n	8002f82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3314      	adds	r3, #20
 8002f04:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f08:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002f14:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f18:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f1c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3314      	adds	r3, #20
 8002f26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002f2a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002f36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002f3a:	e841 2300 	strex	r3, r2, [r1]
 8002f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1d9      	bne.n	8002efe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d013      	beq.n	8002f7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f56:	4a7e      	ldr	r2, [pc, #504]	@ (8003150 <HAL_UART_IRQHandler+0x3e0>)
 8002f58:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f7fe fd58 	bl	8001a14 <HAL_DMA_Abort_IT>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d016      	beq.n	8002f98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f70:	687a      	ldr	r2, [r7, #4]
 8002f72:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002f74:	4610      	mov	r0, r2
 8002f76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f78:	e00e      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f001 f80d 	bl	8003f9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	e00a      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f001 f809 	bl	8003f9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f88:	e006      	b.n	8002f98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f001 f805 	bl	8003f9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002f96:	e175      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f98:	bf00      	nop
    return;
 8002f9a:	e173      	b.n	8003284 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	f040 814f 	bne.w	8003244 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8148 	beq.w	8003244 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002fb8:	f003 0310 	and.w	r3, r3, #16
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8141 	beq.w	8003244 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	60bb      	str	r3, [r7, #8]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f000 80b6 	beq.w	8003154 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ff4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	f000 8145 	beq.w	8003288 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003002:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003006:	429a      	cmp	r2, r3
 8003008:	f080 813e 	bcs.w	8003288 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003012:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	2b20      	cmp	r3, #32
 800301c:	f000 8088 	beq.w	8003130 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	330c      	adds	r3, #12
 8003026:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800302a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800302e:	e853 3f00 	ldrex	r3, [r3]
 8003032:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003036:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800303a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800303e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	330c      	adds	r3, #12
 8003048:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800304c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003050:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003054:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003058:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800305c:	e841 2300 	strex	r3, r2, [r1]
 8003060:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003064:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1d9      	bne.n	8003020 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	3314      	adds	r3, #20
 8003072:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003074:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003076:	e853 3f00 	ldrex	r3, [r3]
 800307a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800307c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800307e:	f023 0301 	bic.w	r3, r3, #1
 8003082:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003090:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003094:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003096:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003098:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800309c:	e841 2300 	strex	r3, r2, [r1]
 80030a0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80030a2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d1e1      	bne.n	800306c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80030b2:	e853 3f00 	ldrex	r3, [r3]
 80030b6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80030b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80030ba:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030be:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	3314      	adds	r3, #20
 80030c8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80030cc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80030ce:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030d0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80030d2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80030d4:	e841 2300 	strex	r3, r2, [r1]
 80030d8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80030da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1e3      	bne.n	80030a8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2200      	movs	r2, #0
 80030ec:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	330c      	adds	r3, #12
 80030f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80030f8:	e853 3f00 	ldrex	r3, [r3]
 80030fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80030fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003100:	f023 0310 	bic.w	r3, r3, #16
 8003104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	330c      	adds	r3, #12
 800310e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003112:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003114:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800311a:	e841 2300 	strex	r3, r2, [r1]
 800311e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003122:	2b00      	cmp	r3, #0
 8003124:	d1e3      	bne.n	80030ee <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800312a:	4618      	mov	r0, r3
 800312c:	f7fe fc36 	bl	800199c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800313e:	b29b      	uxth	r3, r3
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	b29b      	uxth	r3, r3
 8003144:	4619      	mov	r1, r3
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 f8b6 	bl	80032b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800314c:	e09c      	b.n	8003288 <HAL_UART_IRQHandler+0x518>
 800314e:	bf00      	nop
 8003150:	080038a3 	.word	0x080038a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800315c:	b29b      	uxth	r3, r3
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 808e 	beq.w	800328c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003170:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 8089 	beq.w	800328c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	330c      	adds	r3, #12
 8003180:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003184:	e853 3f00 	ldrex	r3, [r3]
 8003188:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800318a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800318c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003190:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	330c      	adds	r3, #12
 800319a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800319e:	647a      	str	r2, [r7, #68]	@ 0x44
 80031a0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80031a4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80031a6:	e841 2300 	strex	r3, r2, [r1]
 80031aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80031ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1e3      	bne.n	800317a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	3314      	adds	r3, #20
 80031b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031bc:	e853 3f00 	ldrex	r3, [r3]
 80031c0:	623b      	str	r3, [r7, #32]
   return(result);
 80031c2:	6a3b      	ldr	r3, [r7, #32]
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3314      	adds	r3, #20
 80031d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80031d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80031d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031de:	e841 2300 	strex	r3, r2, [r1]
 80031e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80031e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d1e3      	bne.n	80031b2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	330c      	adds	r3, #12
 80031fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	e853 3f00 	ldrex	r3, [r3]
 8003206:	60fb      	str	r3, [r7, #12]
   return(result);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0310 	bic.w	r3, r3, #16
 800320e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	330c      	adds	r3, #12
 8003218:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800321c:	61fa      	str	r2, [r7, #28]
 800321e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003220:	69b9      	ldr	r1, [r7, #24]
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	617b      	str	r3, [r7, #20]
   return(result);
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e3      	bne.n	80031f8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003236:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800323a:	4619      	mov	r1, r3
 800323c:	6878      	ldr	r0, [r7, #4]
 800323e:	f000 f83b 	bl	80032b8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003242:	e023      	b.n	800328c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003248:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800324c:	2b00      	cmp	r3, #0
 800324e:	d009      	beq.n	8003264 <HAL_UART_IRQHandler+0x4f4>
 8003250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003254:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003258:	2b00      	cmp	r3, #0
 800325a:	d003      	beq.n	8003264 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	f000 fb34 	bl	80038ca <UART_Transmit_IT>
    return;
 8003262:	e014      	b.n	800328e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003268:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00e      	beq.n	800328e <HAL_UART_IRQHandler+0x51e>
 8003270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d008      	beq.n	800328e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fb73 	bl	8003968 <UART_EndTransmit_IT>
    return;
 8003282:	e004      	b.n	800328e <HAL_UART_IRQHandler+0x51e>
    return;
 8003284:	bf00      	nop
 8003286:	e002      	b.n	800328e <HAL_UART_IRQHandler+0x51e>
      return;
 8003288:	bf00      	nop
 800328a:	e000      	b.n	800328e <HAL_UART_IRQHandler+0x51e>
      return;
 800328c:	bf00      	nop
  }
}
 800328e:	37e8      	adds	r7, #232	@ 0xe8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr

080032a6 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80032a6:	b480      	push	{r7}
 80032a8:	b083      	sub	sp, #12
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80032ae:	bf00      	nop
 80032b0:	370c      	adds	r7, #12
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bc80      	pop	{r7}
 80032b6:	4770      	bx	lr

080032b8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr

080032ce <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b090      	sub	sp, #64	@ 0x40
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0320 	and.w	r3, r3, #32
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d137      	bne.n	800335a <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80032ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032ec:	2200      	movs	r2, #0
 80032ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80032f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	3314      	adds	r3, #20
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032fa:	e853 3f00 	ldrex	r3, [r3]
 80032fe:	623b      	str	r3, [r7, #32]
   return(result);
 8003300:	6a3b      	ldr	r3, [r7, #32]
 8003302:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003306:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003308:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	3314      	adds	r3, #20
 800330e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003310:	633a      	str	r2, [r7, #48]	@ 0x30
 8003312:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003314:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003316:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003318:	e841 2300 	strex	r3, r2, [r1]
 800331c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003320:	2b00      	cmp	r3, #0
 8003322:	d1e5      	bne.n	80032f0 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003324:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	330c      	adds	r3, #12
 800332a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800332c:	693b      	ldr	r3, [r7, #16]
 800332e:	e853 3f00 	ldrex	r3, [r3]
 8003332:	60fb      	str	r3, [r7, #12]
   return(result);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800333a:	637b      	str	r3, [r7, #52]	@ 0x34
 800333c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	330c      	adds	r3, #12
 8003342:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003344:	61fa      	str	r2, [r7, #28]
 8003346:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003348:	69b9      	ldr	r1, [r7, #24]
 800334a:	69fa      	ldr	r2, [r7, #28]
 800334c:	e841 2300 	strex	r3, r2, [r1]
 8003350:	617b      	str	r3, [r7, #20]
   return(result);
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003358:	e002      	b.n	8003360 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800335a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800335c:	f000 fdf9 	bl	8003f52 <HAL_UART_TxCpltCallback>
}
 8003360:	bf00      	nop
 8003362:	3740      	adds	r7, #64	@ 0x40
 8003364:	46bd      	mov	sp, r7
 8003366:	bd80      	pop	{r7, pc}

08003368 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f7ff ff8c 	bl	8003294 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800337c:	bf00      	nop
 800337e:	3710      	adds	r7, #16
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b09c      	sub	sp, #112	@ 0x70
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d172      	bne.n	8003486 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80033a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a2:	2200      	movs	r2, #0
 80033a4:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	330c      	adds	r3, #12
 80033ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033b0:	e853 3f00 	ldrex	r3, [r3]
 80033b4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80033b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80033bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80033be:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	330c      	adds	r3, #12
 80033c4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80033c6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80033c8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80033cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80033ce:	e841 2300 	strex	r3, r2, [r1]
 80033d2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80033d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d1e5      	bne.n	80033a6 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	3314      	adds	r3, #20
 80033e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80033ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033ec:	f023 0301 	bic.w	r3, r3, #1
 80033f0:	667b      	str	r3, [r7, #100]	@ 0x64
 80033f2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	3314      	adds	r3, #20
 80033f8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80033fa:	647a      	str	r2, [r7, #68]	@ 0x44
 80033fc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033fe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003400:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003402:	e841 2300 	strex	r3, r2, [r1]
 8003406:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003408:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1e5      	bne.n	80033da <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	3314      	adds	r3, #20
 8003414:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003418:	e853 3f00 	ldrex	r3, [r3]
 800341c:	623b      	str	r3, [r7, #32]
   return(result);
 800341e:	6a3b      	ldr	r3, [r7, #32]
 8003420:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003424:	663b      	str	r3, [r7, #96]	@ 0x60
 8003426:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	3314      	adds	r3, #20
 800342c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800342e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003430:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003432:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003434:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003436:	e841 2300 	strex	r3, r2, [r1]
 800343a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800343c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1e5      	bne.n	800340e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003442:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800344a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800344c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800344e:	2b01      	cmp	r3, #1
 8003450:	d119      	bne.n	8003486 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	330c      	adds	r3, #12
 8003458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	60fb      	str	r3, [r7, #12]
   return(result);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	f023 0310 	bic.w	r3, r3, #16
 8003468:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800346a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	330c      	adds	r3, #12
 8003470:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003472:	61fa      	str	r2, [r7, #28]
 8003474:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	69b9      	ldr	r1, [r7, #24]
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	617b      	str	r3, [r7, #20]
   return(result);
 8003480:	697b      	ldr	r3, [r7, #20]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003486:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003488:	2200      	movs	r2, #0
 800348a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800348c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800348e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003490:	2b01      	cmp	r3, #1
 8003492:	d106      	bne.n	80034a2 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003494:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003496:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003498:	4619      	mov	r1, r3
 800349a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800349c:	f7ff ff0c 	bl	80032b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034a0:	e002      	b.n	80034a8 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80034a2:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80034a4:	f000 fd67 	bl	8003f76 <HAL_UART_RxCpltCallback>
}
 80034a8:	bf00      	nop
 80034aa:	3770      	adds	r7, #112	@ 0x70
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034bc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	2201      	movs	r2, #1
 80034c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d108      	bne.n	80034de <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	4619      	mov	r1, r3
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f7ff feee 	bl	80032b8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80034dc:	e002      	b.n	80034e4 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f7ff fee1 	bl	80032a6 <HAL_UART_RxHalfCpltCallback>
}
 80034e4:	bf00      	nop
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b084      	sub	sp, #16
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80034fe:	68bb      	ldr	r3, [r7, #8]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	bf14      	ite	ne
 800350c:	2301      	movne	r3, #1
 800350e:	2300      	moveq	r3, #0
 8003510:	b2db      	uxtb	r3, r3
 8003512:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b21      	cmp	r3, #33	@ 0x21
 800351e:	d108      	bne.n	8003532 <UART_DMAError+0x46>
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d005      	beq.n	8003532 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2200      	movs	r2, #0
 800352a:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800352c:	68b8      	ldr	r0, [r7, #8]
 800352e:	f000 f92f 	bl	8003790 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003532:	68bb      	ldr	r3, [r7, #8]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003548:	68bb      	ldr	r3, [r7, #8]
 800354a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b22      	cmp	r3, #34	@ 0x22
 8003552:	d108      	bne.n	8003566 <UART_DMAError+0x7a>
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d005      	beq.n	8003566 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	2200      	movs	r2, #0
 800355e:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8003560:	68b8      	ldr	r0, [r7, #8]
 8003562:	f000 f93c 	bl	80037de <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800356a:	f043 0210 	orr.w	r2, r3, #16
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003572:	68b8      	ldr	r0, [r7, #8]
 8003574:	f000 fd11 	bl	8003f9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}

08003580 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b090      	sub	sp, #64	@ 0x40
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	4613      	mov	r3, r2
 800358e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003590:	e050      	b.n	8003634 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003598:	d04c      	beq.n	8003634 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800359a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80035a0:	f7fe f82a 	bl	80015f8 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d241      	bcs.n	8003634 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	330c      	adds	r3, #12
 80035b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035ba:	e853 3f00 	ldrex	r3, [r3]
 80035be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035c2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80035c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	330c      	adds	r3, #12
 80035ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80035d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035d8:	e841 2300 	strex	r3, r2, [r1]
 80035dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1e5      	bne.n	80035b0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3314      	adds	r3, #20
 80035ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	e853 3f00 	ldrex	r3, [r3]
 80035f2:	613b      	str	r3, [r7, #16]
   return(result);
 80035f4:	693b      	ldr	r3, [r7, #16]
 80035f6:	f023 0301 	bic.w	r3, r3, #1
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3314      	adds	r3, #20
 8003602:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003604:	623a      	str	r2, [r7, #32]
 8003606:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003608:	69f9      	ldr	r1, [r7, #28]
 800360a:	6a3a      	ldr	r2, [r7, #32]
 800360c:	e841 2300 	strex	r3, r2, [r1]
 8003610:	61bb      	str	r3, [r7, #24]
   return(result);
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d1e5      	bne.n	80035e4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2220      	movs	r2, #32
 800361c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	2220      	movs	r2, #32
 8003624:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e00f      	b.n	8003654 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	4013      	ands	r3, r2
 800363e:	68ba      	ldr	r2, [r7, #8]
 8003640:	429a      	cmp	r2, r3
 8003642:	bf0c      	ite	eq
 8003644:	2301      	moveq	r3, #1
 8003646:	2300      	movne	r3, #0
 8003648:	b2db      	uxtb	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	79fb      	ldrb	r3, [r7, #7]
 800364e:	429a      	cmp	r2, r3
 8003650:	d09f      	beq.n	8003592 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003652:	2300      	movs	r3, #0
}
 8003654:	4618      	mov	r0, r3
 8003656:	3740      	adds	r7, #64	@ 0x40
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}

0800365c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b098      	sub	sp, #96	@ 0x60
 8003660:	af00      	add	r7, sp, #0
 8003662:	60f8      	str	r0, [r7, #12]
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	4613      	mov	r3, r2
 8003668:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800366a:	68ba      	ldr	r2, [r7, #8]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2222      	movs	r2, #34	@ 0x22
 8003680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	4a3e      	ldr	r2, [pc, #248]	@ (8003784 <UART_Start_Receive_DMA+0x128>)
 800368a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003690:	4a3d      	ldr	r2, [pc, #244]	@ (8003788 <UART_Start_Receive_DMA+0x12c>)
 8003692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003698:	4a3c      	ldr	r2, [pc, #240]	@ (800378c <UART_Start_Receive_DMA+0x130>)
 800369a:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80036a0:	2200      	movs	r2, #0
 80036a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80036a4:	f107 0308 	add.w	r3, r7, #8
 80036a8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	3304      	adds	r3, #4
 80036b4:	4619      	mov	r1, r3
 80036b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80036b8:	681a      	ldr	r2, [r3, #0]
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	f7fe f90e 	bl	80018dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80036c0:	2300      	movs	r3, #0
 80036c2:	613b      	str	r3, [r7, #16]
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	613b      	str	r3, [r7, #16]
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	613b      	str	r3, [r7, #16]
 80036d4:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80036ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036f4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	330c      	adds	r3, #12
 80036fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036fe:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8003700:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003702:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8003704:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003706:	e841 2300 	strex	r3, r2, [r1]
 800370a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800370c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800370e:	2b00      	cmp	r3, #0
 8003710:	d1e5      	bne.n	80036de <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3314      	adds	r3, #20
 8003718:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800371c:	e853 3f00 	ldrex	r3, [r3]
 8003720:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003722:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	657b      	str	r3, [r7, #84]	@ 0x54
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	3314      	adds	r3, #20
 8003730:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003732:	63ba      	str	r2, [r7, #56]	@ 0x38
 8003734:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003736:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003738:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800373a:	e841 2300 	strex	r3, r2, [r1]
 800373e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003740:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003742:	2b00      	cmp	r3, #0
 8003744:	d1e5      	bne.n	8003712 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	3314      	adds	r3, #20
 800374c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	e853 3f00 	ldrex	r3, [r3]
 8003754:	617b      	str	r3, [r7, #20]
   return(result);
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800375c:	653b      	str	r3, [r7, #80]	@ 0x50
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	3314      	adds	r3, #20
 8003764:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003766:	627a      	str	r2, [r7, #36]	@ 0x24
 8003768:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800376a:	6a39      	ldr	r1, [r7, #32]
 800376c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800376e:	e841 2300 	strex	r3, r2, [r1]
 8003772:	61fb      	str	r3, [r7, #28]
   return(result);
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1e5      	bne.n	8003746 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3760      	adds	r7, #96	@ 0x60
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}
 8003784:	08003385 	.word	0x08003385
 8003788:	080034b1 	.word	0x080034b1
 800378c:	080034ed 	.word	0x080034ed

08003790 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003790:	b480      	push	{r7}
 8003792:	b089      	sub	sp, #36	@ 0x24
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	330c      	adds	r3, #12
 800379e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	e853 3f00 	ldrex	r3, [r3]
 80037a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	330c      	adds	r3, #12
 80037b6:	69fa      	ldr	r2, [r7, #28]
 80037b8:	61ba      	str	r2, [r7, #24]
 80037ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037bc:	6979      	ldr	r1, [r7, #20]
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	613b      	str	r3, [r7, #16]
   return(result);
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d1e5      	bne.n	8003798 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2220      	movs	r2, #32
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80037d4:	bf00      	nop
 80037d6:	3724      	adds	r7, #36	@ 0x24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bc80      	pop	{r7}
 80037dc:	4770      	bx	lr

080037de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037de:	b480      	push	{r7}
 80037e0:	b095      	sub	sp, #84	@ 0x54
 80037e2:	af00      	add	r7, sp, #0
 80037e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037f0:	e853 3f00 	ldrex	r3, [r3]
 80037f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003806:	643a      	str	r2, [r7, #64]	@ 0x40
 8003808:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800380a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800380c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800380e:	e841 2300 	strex	r3, r2, [r1]
 8003812:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e5      	bne.n	80037e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	3314      	adds	r3, #20
 8003820:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003822:	6a3b      	ldr	r3, [r7, #32]
 8003824:	e853 3f00 	ldrex	r3, [r3]
 8003828:	61fb      	str	r3, [r7, #28]
   return(result);
 800382a:	69fb      	ldr	r3, [r7, #28]
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	3314      	adds	r3, #20
 8003838:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800383a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800383c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800383e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003840:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003842:	e841 2300 	strex	r3, r2, [r1]
 8003846:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800384a:	2b00      	cmp	r3, #0
 800384c:	d1e5      	bne.n	800381a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003852:	2b01      	cmp	r3, #1
 8003854:	d119      	bne.n	800388a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	330c      	adds	r3, #12
 800385c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	e853 3f00 	ldrex	r3, [r3]
 8003864:	60bb      	str	r3, [r7, #8]
   return(result);
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f023 0310 	bic.w	r3, r3, #16
 800386c:	647b      	str	r3, [r7, #68]	@ 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	330c      	adds	r3, #12
 8003874:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003876:	61ba      	str	r2, [r7, #24]
 8003878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800387a:	6979      	ldr	r1, [r7, #20]
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	e841 2300 	strex	r3, r2, [r1]
 8003882:	613b      	str	r3, [r7, #16]
   return(result);
 8003884:	693b      	ldr	r3, [r7, #16]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d1e5      	bne.n	8003856 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003898:	bf00      	nop
 800389a:	3754      	adds	r7, #84	@ 0x54
 800389c:	46bd      	mov	sp, r7
 800389e:	bc80      	pop	{r7}
 80038a0:	4770      	bx	lr

080038a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80038a2:	b580      	push	{r7, lr}
 80038a4:	b084      	sub	sp, #16
 80038a6:	af00      	add	r7, sp, #0
 80038a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	2200      	movs	r2, #0
 80038b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2200      	movs	r2, #0
 80038ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	f000 fb6c 	bl	8003f9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038c2:	bf00      	nop
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038ca:	b480      	push	{r7}
 80038cc:	b085      	sub	sp, #20
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b21      	cmp	r3, #33	@ 0x21
 80038dc:	d13e      	bne.n	800395c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038e6:	d114      	bne.n	8003912 <UART_Transmit_IT+0x48>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d110      	bne.n	8003912 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6a1b      	ldr	r3, [r3, #32]
 80038f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	881b      	ldrh	r3, [r3, #0]
 80038fa:	461a      	mov	r2, r3
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003904:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	1c9a      	adds	r2, r3, #2
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	621a      	str	r2, [r3, #32]
 8003910:	e008      	b.n	8003924 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	1c59      	adds	r1, r3, #1
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6211      	str	r1, [r2, #32]
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003928:	b29b      	uxth	r3, r3
 800392a:	3b01      	subs	r3, #1
 800392c:	b29b      	uxth	r3, r3
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	4619      	mov	r1, r3
 8003932:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003934:	2b00      	cmp	r3, #0
 8003936:	d10f      	bne.n	8003958 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	68da      	ldr	r2, [r3, #12]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003946:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	68da      	ldr	r2, [r3, #12]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003956:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003958:	2300      	movs	r3, #0
 800395a:	e000      	b.n	800395e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800395c:	2302      	movs	r3, #2
  }
}
 800395e:	4618      	mov	r0, r3
 8003960:	3714      	adds	r7, #20
 8003962:	46bd      	mov	sp, r7
 8003964:	bc80      	pop	{r7}
 8003966:	4770      	bx	lr

08003968 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b082      	sub	sp, #8
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68da      	ldr	r2, [r3, #12]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800397e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	f000 fae2 	bl	8003f52 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3708      	adds	r7, #8
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08c      	sub	sp, #48	@ 0x30
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b22      	cmp	r3, #34	@ 0x22
 80039aa:	f040 80ae 	bne.w	8003b0a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039b6:	d117      	bne.n	80039e8 <UART_Receive_IT+0x50>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	b29b      	uxth	r3, r3
 80039d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e0:	1c9a      	adds	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80039e6:	e026      	b.n	8003a36 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039ee:	2300      	movs	r3, #0
 80039f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039fa:	d007      	beq.n	8003a0c <UART_Receive_IT+0x74>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d10a      	bne.n	8003a1a <UART_Receive_IT+0x82>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	691b      	ldr	r3, [r3, #16]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d106      	bne.n	8003a1a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	b2da      	uxtb	r2, r3
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a16:	701a      	strb	r2, [r3, #0]
 8003a18:	e008      	b.n	8003a2c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003a26:	b2da      	uxtb	r2, r3
 8003a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a2a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a30:	1c5a      	adds	r2, r3, #1
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	4619      	mov	r1, r3
 8003a44:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d15d      	bne.n	8003b06 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68da      	ldr	r2, [r3, #12]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f022 0220 	bic.w	r2, r2, #32
 8003a58:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68da      	ldr	r2, [r3, #12]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a68:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695a      	ldr	r2, [r3, #20]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0201 	bic.w	r2, r2, #1
 8003a78:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2200      	movs	r2, #0
 8003a86:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d135      	bne.n	8003afc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	330c      	adds	r3, #12
 8003a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	e853 3f00 	ldrex	r3, [r3]
 8003aa4:	613b      	str	r3, [r7, #16]
   return(result);
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	f023 0310 	bic.w	r3, r3, #16
 8003aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	330c      	adds	r3, #12
 8003ab4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ab6:	623a      	str	r2, [r7, #32]
 8003ab8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aba:	69f9      	ldr	r1, [r7, #28]
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	e841 2300 	strex	r3, r2, [r1]
 8003ac2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1e5      	bne.n	8003a96 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0310 	and.w	r3, r3, #16
 8003ad4:	2b10      	cmp	r3, #16
 8003ad6:	d10a      	bne.n	8003aee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	60fb      	str	r3, [r7, #12]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	60fb      	str	r3, [r7, #12]
 8003aec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003af2:	4619      	mov	r1, r3
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	f7ff fbdf 	bl	80032b8 <HAL_UARTEx_RxEventCallback>
 8003afa:	e002      	b.n	8003b02 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa3a 	bl	8003f76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003b02:	2300      	movs	r3, #0
 8003b04:	e002      	b.n	8003b0c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003b06:	2300      	movs	r3, #0
 8003b08:	e000      	b.n	8003b0c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003b0a:	2302      	movs	r3, #2
  }
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3730      	adds	r7, #48	@ 0x30
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68da      	ldr	r2, [r3, #12]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	689a      	ldr	r2, [r3, #8]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	691b      	ldr	r3, [r3, #16]
 8003b3a:	431a      	orrs	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	695b      	ldr	r3, [r3, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b4e:	f023 030c 	bic.w	r3, r3, #12
 8003b52:	687a      	ldr	r2, [r7, #4]
 8003b54:	6812      	ldr	r2, [r2, #0]
 8003b56:	68b9      	ldr	r1, [r7, #8]
 8003b58:	430b      	orrs	r3, r1
 8003b5a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	430a      	orrs	r2, r1
 8003b70:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a2c      	ldr	r2, [pc, #176]	@ (8003c28 <UART_SetConfig+0x114>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d103      	bne.n	8003b84 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b7c:	f7fe fea0 	bl	80028c0 <HAL_RCC_GetPCLK2Freq>
 8003b80:	60f8      	str	r0, [r7, #12]
 8003b82:	e002      	b.n	8003b8a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b84:	f7fe fe88 	bl	8002898 <HAL_RCC_GetPCLK1Freq>
 8003b88:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4413      	add	r3, r2
 8003b92:	009a      	lsls	r2, r3, #2
 8003b94:	441a      	add	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	4a22      	ldr	r2, [pc, #136]	@ (8003c2c <UART_SetConfig+0x118>)
 8003ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	0119      	lsls	r1, r3, #4
 8003baa:	68fa      	ldr	r2, [r7, #12]
 8003bac:	4613      	mov	r3, r2
 8003bae:	009b      	lsls	r3, r3, #2
 8003bb0:	4413      	add	r3, r2
 8003bb2:	009a      	lsls	r2, r3, #2
 8003bb4:	441a      	add	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bc0:	4b1a      	ldr	r3, [pc, #104]	@ (8003c2c <UART_SetConfig+0x118>)
 8003bc2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bc6:	095b      	lsrs	r3, r3, #5
 8003bc8:	2064      	movs	r0, #100	@ 0x64
 8003bca:	fb00 f303 	mul.w	r3, r0, r3
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	011b      	lsls	r3, r3, #4
 8003bd2:	3332      	adds	r3, #50	@ 0x32
 8003bd4:	4a15      	ldr	r2, [pc, #84]	@ (8003c2c <UART_SetConfig+0x118>)
 8003bd6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bda:	095b      	lsrs	r3, r3, #5
 8003bdc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003be0:	4419      	add	r1, r3
 8003be2:	68fa      	ldr	r2, [r7, #12]
 8003be4:	4613      	mov	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	009a      	lsls	r2, r3, #2
 8003bec:	441a      	add	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8003c2c <UART_SetConfig+0x118>)
 8003bfa:	fba3 0302 	umull	r0, r3, r3, r2
 8003bfe:	095b      	lsrs	r3, r3, #5
 8003c00:	2064      	movs	r0, #100	@ 0x64
 8003c02:	fb00 f303 	mul.w	r3, r0, r3
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	011b      	lsls	r3, r3, #4
 8003c0a:	3332      	adds	r3, #50	@ 0x32
 8003c0c:	4a07      	ldr	r2, [pc, #28]	@ (8003c2c <UART_SetConfig+0x118>)
 8003c0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c12:	095b      	lsrs	r3, r3, #5
 8003c14:	f003 020f 	and.w	r2, r3, #15
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	440a      	add	r2, r1
 8003c1e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003c20:	bf00      	nop
 8003c22:	3710      	adds	r7, #16
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}
 8003c28:	40013800 	.word	0x40013800
 8003c2c:	51eb851f 	.word	0x51eb851f

08003c30 <_ZNK13TimingManager9isExpiredEv>:
                --timer->m_counter;
            }
        }
    }

    inline bool isExpired() const {
 8003c30:	b480      	push	{r7}
 8003c32:	b083      	sub	sp, #12
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
        return m_counter == 0;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
    }
 8003c46:	4618      	mov	r0, r3
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bc80      	pop	{r7}
 8003c4e:	4770      	bx	lr

08003c50 <_ZN13TimingManager5startEm>:

    inline void start(const uint32_t delay) { m_counter = delay; }
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	6039      	str	r1, [r7, #0]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	683a      	ldr	r2, [r7, #0]
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	bf00      	nop
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bc80      	pop	{r7}
 8003c68:	4770      	bx	lr
	...

08003c6c <app_main>:


extern UART_HandleTypeDef huart1;

void app_main(void)
{
 8003c6c:	b5b0      	push	{r4, r5, r7, lr}
 8003c6e:	f5ad 7d64 	sub.w	sp, sp, #912	@ 0x390
 8003c72:	af00      	add	r7, sp, #0
	stm32_uart_communicator_t m_comm;
	char txBuff[] =  "hello from stm!!!\r\n";
 8003c74:	f507 7364 	add.w	r3, r7, #912	@ 0x390
 8003c78:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 8003c7c:	4a15      	ldr	r2, [pc, #84]	@ (8003cd4 <app_main+0x68>)
 8003c7e:	461c      	mov	r4, r3
 8003c80:	4615      	mov	r5, r2
 8003c82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003c84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003c86:	682b      	ldr	r3, [r5, #0]
 8003c88:	6023      	str	r3, [r4, #0]
	TimingManager led_timer;
 8003c8a:	463b      	mov	r3, r7
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f001 ff81 	bl	8005b94 <_ZN13TimingManagerC1Ev>

	init_communicator(&m_comm, &huart1);
 8003c92:	f107 0318 	add.w	r3, r7, #24
 8003c96:	4910      	ldr	r1, [pc, #64]	@ (8003cd8 <app_main+0x6c>)
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f000 f887 	bl	8003dac <init_communicator>

	while(1) {

		proceed_communicator(&m_comm, HAL_GetTick());
 8003c9e:	f7fd fcab 	bl	80015f8 <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	f107 0318 	add.w	r3, r7, #24
 8003ca8:	4611      	mov	r1, r2
 8003caa:	4618      	mov	r0, r3
 8003cac:	f000 f924 	bl	8003ef8 <proceed_communicator>

		if(led_timer.isExpired()) {
 8003cb0:	463b      	mov	r3, r7
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7ff ffbc 	bl	8003c30 <_ZNK13TimingManager9isExpiredEv>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d0ef      	beq.n	8003c9e <app_main+0x32>
			//UART_SendBuffer(&m_comm.stm32_uart, (uint8_t*)txBuff, sizeof(txBuff) - 1);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8003cbe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cc2:	4806      	ldr	r0, [pc, #24]	@ (8003cdc <app_main+0x70>)
 8003cc4:	f7fe f9f8 	bl	80020b8 <HAL_GPIO_TogglePin>

			led_timer.start(100);
 8003cc8:	463b      	mov	r3, r7
 8003cca:	2164      	movs	r1, #100	@ 0x64
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f7ff ffbf 	bl	8003c50 <_ZN13TimingManager5startEm>
		proceed_communicator(&m_comm, HAL_GetTick());
 8003cd2:	e7e4      	b.n	8003c9e <app_main+0x32>
 8003cd4:	080098c0 	.word	0x080098c0
 8003cd8:	200001f4 	.word	0x200001f4
 8003cdc:	40011000 	.word	0x40011000

08003ce0 <uart_rx_callback>:

#include "raw_parser/raw_parser_dma/raw_parser_dma_test.h"


static void uart_rx_callback(uint8_t const * data, uint32_t const size, void* const captured)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b08e      	sub	sp, #56	@ 0x38
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
	stm32_uart_communicator_t* const self = captured;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	637b      	str	r3, [r7, #52]	@ 0x34
	RawParser_dma_receiveArray(&self->raw_p, data, size);
 8003cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003cf2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
    self->m_receivePos = m_receivePos + 1U;
}

STATIC_FORCEINLINE void RawParser_dma_receiveArray(RawParser_dma_t* const self, const u8* const arr, const reg size)
{
    if(size > D_RAW_P_RX_BUF_SIZE) {
 8003cfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cfe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d02:	d835      	bhi.n	8003d70 <uart_rx_callback+0x90>
    	return;
    }

    // save to register ------------------------------------------------------------------------------
    u8* const m_receiveBuffer		= self->m_receiveBuffer;						// store pointer to register
 8003d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d06:	3308      	adds	r3, #8
 8003d08:	627b      	str	r3, [r7, #36]	@ 0x24

    const reg m_receivePosReg		= self->m_receivePos;							// store head
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d0c:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 8003d10:	623b      	str	r3, [r7, #32]
    const reg m_receivePosReg_msk	= m_receivePosReg & (D_RAW_P_RX_BUF_SIZE - 1U); // get head position
 8003d12:	6a3b      	ldr	r3, [r7, #32]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	61fb      	str	r3, [r7, #28]
    const reg remaining_to_end 		= D_RAW_P_RX_BUF_SIZE - m_receivePosReg_msk; 	// get remaining from head to end
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8003d1e:	61bb      	str	r3, [r7, #24]

    // do logic --------------------------------------------------------------------------------------
    if(size > remaining_to_end) {
 8003d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d22:	69bb      	ldr	r3, [r7, #24]
 8003d24:	429a      	cmp	r2, r3
 8003d26:	d914      	bls.n	8003d52 <uart_rx_callback+0x72>
    	const reg remaining_n		= size - remaining_to_end;
 8003d28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	617b      	str	r3, [r7, #20]
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, remaining_to_end);
 8003d30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	4413      	add	r3, r2
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f004 fae7 	bl	800830e <memcpy>
    	memcpy(m_receiveBuffer, arr + remaining_to_end, remaining_n);
 8003d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	4413      	add	r3, r2
 8003d46:	697a      	ldr	r2, [r7, #20]
 8003d48:	4619      	mov	r1, r3
 8003d4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003d4c:	f004 fadf 	bl	800830e <memcpy>
 8003d50:	e007      	b.n	8003d62 <uart_rx_callback+0x82>
    } else {
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, size);
 8003d52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d54:	69fb      	ldr	r3, [r7, #28]
 8003d56:	4413      	add	r3, r2
 8003d58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fad6 	bl	800830e <memcpy>
    }

    // save position to memory ------------------------------------------------------------------------
    self->m_receivePos = (m_receivePosReg + size);
 8003d62:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	441a      	add	r2, r3
 8003d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d6a:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 8003d6e:	e000      	b.n	8003d72 <uart_rx_callback+0x92>
    	return;
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	3738      	adds	r7, #56	@ 0x38
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <uart_tx_callback>:

static void uart_tx_callback(const status_t status, void* const captured)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af00      	add	r7, sp, #0
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
	stm32_uart_communicator_t* const self = captured;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	60fb      	str	r3, [r7, #12]
}
 8003d88:	bf00      	nop
 8003d8a:	3714      	adds	r7, #20
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bc80      	pop	{r7}
 8003d90:	4770      	bx	lr

08003d92 <uart_error_callback>:

static void uart_error_callback(const status_t status, void* const captured)
{
 8003d92:	b480      	push	{r7}
 8003d94:	b085      	sub	sp, #20
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
 8003d9a:	6039      	str	r1, [r7, #0]
	stm32_uart_communicator_t* const self = captured;
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	60fb      	str	r3, [r7, #12]
}
 8003da0:	bf00      	nop
 8003da2:	3714      	adds	r7, #20
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bc80      	pop	{r7}
 8003da8:	4770      	bx	lr
	...

08003dac <init_communicator>:




status_t init_communicator(stm32_uart_communicator_t* const self, UART_HandleTypeDef* const huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b086      	sub	sp, #24
 8003db0:	af02      	add	r7, sp, #8
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
	M_Assert_BreakSaveCheck(self == NULL || huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d002      	beq.n	8003dc2 <init_communicator+0x16>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10c      	bne.n	8003ddc <init_communicator+0x30>
 8003dc2:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec0 <init_communicator+0x114>)
 8003dc4:	9301      	str	r3, [sp, #4]
 8003dc6:	4b3f      	ldr	r3, [pc, #252]	@ (8003ec4 <init_communicator+0x118>)
 8003dc8:	9300      	str	r3, [sp, #0]
 8003dca:	2326      	movs	r3, #38	@ 0x26
 8003dcc:	4a3e      	ldr	r2, [pc, #248]	@ (8003ec8 <init_communicator+0x11c>)
 8003dce:	2101      	movs	r1, #1
 8003dd0:	483e      	ldr	r0, [pc, #248]	@ (8003ecc <init_communicator+0x120>)
 8003dd2:	f000 f9ff 	bl	80041d4 <__M_Error>
 8003dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8003dda:	e06d      	b.n	8003eb8 <init_communicator+0x10c>

	M_Assert_BreakSaveCheck(UART_Init(&self->stm32_uart, huart, 128) != STATUS_OK,
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003de2:	2280      	movs	r2, #128	@ 0x80
 8003de4:	6839      	ldr	r1, [r7, #0]
 8003de6:	4618      	mov	r0, r3
 8003de8:	f002 fc87 	bl	80066fa <UART_Init>
 8003dec:	4603      	mov	r3, r0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d00c      	beq.n	8003e0c <init_communicator+0x60>
 8003df2:	4b37      	ldr	r3, [pc, #220]	@ (8003ed0 <init_communicator+0x124>)
 8003df4:	9301      	str	r3, [sp, #4]
 8003df6:	4b33      	ldr	r3, [pc, #204]	@ (8003ec4 <init_communicator+0x118>)
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2328      	movs	r3, #40	@ 0x28
 8003dfc:	4a32      	ldr	r2, [pc, #200]	@ (8003ec8 <init_communicator+0x11c>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	4834      	ldr	r0, [pc, #208]	@ (8003ed4 <init_communicator+0x128>)
 8003e02:	f000 f9e7 	bl	80041d4 <__M_Error>
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	e055      	b.n	8003eb8 <init_communicator+0x10c>
			M_EMPTY, return ERROR_FAIL,
					"uart init fail");

	UART_SetRxCallback(&self->stm32_uart, uart_rx_callback, self);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	4930      	ldr	r1, [pc, #192]	@ (8003ed8 <init_communicator+0x12c>)
 8003e16:	4618      	mov	r0, r3
 8003e18:	f002 fd19 	bl	800684e <UART_SetRxCallback>
	UART_SetTxcallback(&self->stm32_uart, uart_tx_callback, self);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003e22:	687a      	ldr	r2, [r7, #4]
 8003e24:	492d      	ldr	r1, [pc, #180]	@ (8003edc <init_communicator+0x130>)
 8003e26:	4618      	mov	r0, r3
 8003e28:	f002 fcf8 	bl	800681c <UART_SetTxcallback>
	UART_SetErrorCallback(&self->stm32_uart, uart_error_callback, self);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f503 734d 	add.w	r3, r3, #820	@ 0x334
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	492a      	ldr	r1, [pc, #168]	@ (8003ee0 <init_communicator+0x134>)
 8003e36:	4618      	mov	r0, r3
 8003e38:	f002 fd43 	bl	80068c2 <UART_SetErrorCallback>

	M_Assert_BreakSaveCheck(rawParser_dma_init(&self->raw_p, 0x1a) != D_RAW_P_OK,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	211a      	movs	r1, #26
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 fa61 	bl	8005308 <rawParser_dma_init>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d00c      	beq.n	8003e66 <init_communicator+0xba>
 8003e4c:	4b25      	ldr	r3, [pc, #148]	@ (8003ee4 <init_communicator+0x138>)
 8003e4e:	9301      	str	r3, [sp, #4]
 8003e50:	4b1c      	ldr	r3, [pc, #112]	@ (8003ec4 <init_communicator+0x118>)
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2330      	movs	r3, #48	@ 0x30
 8003e56:	4a1c      	ldr	r2, [pc, #112]	@ (8003ec8 <init_communicator+0x11c>)
 8003e58:	2101      	movs	r1, #1
 8003e5a:	4823      	ldr	r0, [pc, #140]	@ (8003ee8 <init_communicator+0x13c>)
 8003e5c:	f000 f9ba 	bl	80041d4 <__M_Error>
 8003e60:	f04f 33ff 	mov.w	r3, #4294967295
 8003e64:	e028      	b.n	8003eb8 <init_communicator+0x10c>
			M_EMPTY, return ERROR_FAIL,
					"kbus init fail");

	M_Assert_BreakSaveCheck(CallbackManager_init(&self->callb) != 0,
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f503 7358 	add.w	r3, r3, #864	@ 0x360
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f000 f9f1 	bl	8004254 <CallbackManager_init>
 8003e72:	4603      	mov	r3, r0
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00c      	beq.n	8003e92 <init_communicator+0xe6>
 8003e78:	4b1c      	ldr	r3, [pc, #112]	@ (8003eec <init_communicator+0x140>)
 8003e7a:	9301      	str	r3, [sp, #4]
 8003e7c:	4b11      	ldr	r3, [pc, #68]	@ (8003ec4 <init_communicator+0x118>)
 8003e7e:	9300      	str	r3, [sp, #0]
 8003e80:	2334      	movs	r3, #52	@ 0x34
 8003e82:	4a11      	ldr	r2, [pc, #68]	@ (8003ec8 <init_communicator+0x11c>)
 8003e84:	2101      	movs	r1, #1
 8003e86:	481a      	ldr	r0, [pc, #104]	@ (8003ef0 <init_communicator+0x144>)
 8003e88:	f000 f9a4 	bl	80041d4 <__M_Error>
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	e012      	b.n	8003eb8 <init_communicator+0x10c>
			M_EMPTY, return ERROR_FAIL,
					"callback manager init fail");

	CallbackManager_subscribe(&self->callb, 0x01, pingWorker, PREPROCESSOR_CTX_TYPE_CAST(self));
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a16      	ldr	r2, [pc, #88]	@ (8003ef4 <init_communicator+0x148>)
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	f000 fa05 	bl	80042ac <CallbackManager_subscribe>

	int a = rawParserDmaTest(rand(), 1000, 1);
 8003ea2:	f002 ffc3 	bl	8006e2c <rand>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f8fe 	bl	80050b0 <rawParserDmaTest>
 8003eb4:	60f8      	str	r0, [r7, #12]

	return STATUS_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	08009914 	.word	0x08009914
 8003ec4:	0800a54c 	.word	0x0800a54c
 8003ec8:	080098d4 	.word	0x080098d4
 8003ecc:	080098f4 	.word	0x080098f4
 8003ed0:	08009958 	.word	0x08009958
 8003ed4:	08009920 	.word	0x08009920
 8003ed8:	08003ce1 	.word	0x08003ce1
 8003edc:	08003d7b 	.word	0x08003d7b
 8003ee0:	08003d93 	.word	0x08003d93
 8003ee4:	080099a0 	.word	0x080099a0
 8003ee8:	08009968 	.word	0x08009968
 8003eec:	080099d8 	.word	0x080099d8
 8003ef0:	080099b0 	.word	0x080099b0
 8003ef4:	08003fbf 	.word	0x08003fbf

08003ef8 <proceed_communicator>:

void proceed_communicator(stm32_uart_communicator_t* const self, const uint32_t current_time)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b088      	sub	sp, #32
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
 8003f00:	6039      	str	r1, [r7, #0]
	RawParser_Frame_t* const frame = RawParser_dma_proceed(&self->raw_p);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f001 fb53 	bl	80055b0 <RawParser_dma_proceed>
 8003f0a:	6178      	str	r0, [r7, #20]
	u8* const data = frame->data;
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	613b      	str	r3, [r7, #16]
	reg size = frame->size;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	685b      	ldr	r3, [r3, #4]
 8003f16:	60bb      	str	r3, [r7, #8]

	if(size == 0) {
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d015      	beq.n	8003f4a <proceed_communicator+0x52>
		return;
	}

	const u8 cmd = data[0];
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	73fb      	strb	r3, [r7, #15]
	--size;
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	3b01      	subs	r3, #1
 8003f28:	60bb      	str	r3, [r7, #8]

	CallbackManager_proceed(&self->callb, cmd,
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	f503 7058 	add.w	r0, r3, #864	@ 0x360
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	7bf9      	ldrb	r1, [r7, #15]
 8003f36:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f3a:	9301      	str	r3, [sp, #4]
 8003f3c:	f107 0308 	add.w	r3, r7, #8
 8003f40:	9300      	str	r3, [sp, #0]
 8003f42:	2300      	movs	r3, #0
 8003f44:	f000 f9e4 	bl	8004310 <CallbackManager_proceed>
 8003f48:	e000      	b.n	8003f4c <proceed_communicator+0x54>
		return;
 8003f4a:	bf00      	nop
			(data + 1), NULL, &size, D_RAW_P_TX_BUF_SIZE);
}
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}

08003f52 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f52:	b580      	push	{r7, lr}
 8003f54:	b084      	sub	sp, #16
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f002 fde6 	bl	8006b2c <getContainerUartInstance>
 8003f60:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d002      	beq.n	8003f6e <HAL_UART_TxCpltCallback+0x1c>
		UART_TXCallback(uart_instance);
 8003f68:	68f8      	ldr	r0, [r7, #12]
 8003f6a:	f002 fd41 	bl	80069f0 <UART_TXCallback>
	}
}
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}

08003f76 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f76:	b580      	push	{r7, lr}
 8003f78:	b084      	sub	sp, #16
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f002 fdd4 	bl	8006b2c <getContainerUartInstance>
 8003f84:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d002      	beq.n	8003f92 <HAL_UART_RxCpltCallback+0x1c>
		UART_RXCallback(uart_instance);
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f002 fccd 	bl	800692c <UART_RXCallback>
	}
}
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}

08003f9a <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f9a:	b580      	push	{r7, lr}
 8003f9c:	b084      	sub	sp, #16
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f002 fdc2 	bl	8006b2c <getContainerUartInstance>
 8003fa8:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d002      	beq.n	8003fb6 <HAL_UART_ErrorCallback+0x1c>
		UART_ErrorCallback(uart_instance);
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f002 fd41 	bl	8006a38 <UART_ErrorCallback>
	}
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <pingWorker>:
 */
#include "uart_workers.h"
#include "uart_communicator.h"

void pingWorker(u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize, PREPROCESSOR_CTX_TYPE(ctx))
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b08a      	sub	sp, #40	@ 0x28
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	60f8      	str	r0, [r7, #12]
 8003fc6:	60b9      	str	r1, [r7, #8]
 8003fc8:	607a      	str	r2, [r7, #4]
 8003fca:	603b      	str	r3, [r7, #0]
    stm32_uart_communicator_t* const parrent = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 8003fcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fce:	627b      	str	r3, [r7, #36]	@ 0x24
    RawParser_dma_t* const parser = &parrent->raw_p;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	623b      	str	r3, [r7, #32]

    u8 t1 = 0x01;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	76fb      	strb	r3, [r7, #27]
    u8 t2 = 0x11;
 8003fd8:	2311      	movs	r3, #17
 8003fda:	76bb      	strb	r3, [r7, #26]
    u8 t3 = 0x22;
 8003fdc:	2322      	movs	r3, #34	@ 0x22
 8003fde:	767b      	strb	r3, [r7, #25]
    u8 t4 = 0x33;
 8003fe0:	2333      	movs	r3, #51	@ 0x33
 8003fe2:	763b      	strb	r3, [r7, #24]
    u16 t5 = 0xAA55;
 8003fe4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8003fe8:	82fb      	strh	r3, [r7, #22]

    RawParser_dma_startTransmittPacket(parser, 10);
 8003fea:	210a      	movs	r1, #10
 8003fec:	6a38      	ldr	r0, [r7, #32]
 8003fee:	f001 fbe9 	bl	80057c4 <RawParser_dma_startTransmittPacket>
    RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t1);
 8003ff2:	f107 031b 	add.w	r3, r7, #27
 8003ff6:	2201      	movs	r2, #1
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	6a38      	ldr	r0, [r7, #32]
 8003ffc:	f001 fc94 	bl	8005928 <RawParser_dma_universalWrite>
    RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t2);
 8004000:	f107 031a 	add.w	r3, r7, #26
 8004004:	2201      	movs	r2, #1
 8004006:	2101      	movs	r1, #1
 8004008:	6a38      	ldr	r0, [r7, #32]
 800400a:	f001 fc8d 	bl	8005928 <RawParser_dma_universalWrite>
    RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t3);
 800400e:	f107 0319 	add.w	r3, r7, #25
 8004012:	2201      	movs	r2, #1
 8004014:	2101      	movs	r1, #1
 8004016:	6a38      	ldr	r0, [r7, #32]
 8004018:	f001 fc86 	bl	8005928 <RawParser_dma_universalWrite>
    RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t4);
 800401c:	f107 0318 	add.w	r3, r7, #24
 8004020:	2201      	movs	r2, #1
 8004022:	2101      	movs	r1, #1
 8004024:	6a38      	ldr	r0, [r7, #32]
 8004026:	f001 fc7f 	bl	8005928 <RawParser_dma_universalWrite>
    RawParser_dma_universalWrite(parser, sizeof(u16), sizeof(u16), (u8*)&t5);
 800402a:	f107 0316 	add.w	r3, r7, #22
 800402e:	2202      	movs	r2, #2
 8004030:	2102      	movs	r1, #2
 8004032:	6a38      	ldr	r0, [r7, #32]
 8004034:	f001 fc78 	bl	8005928 <RawParser_dma_universalWrite>

    RawParser_Frame_t*const frame = RawParser_dma_finishTransmittPacket(parser);
 8004038:	6a38      	ldr	r0, [r7, #32]
 800403a:	f001 fc39 	bl	80058b0 <RawParser_dma_finishTransmittPacket>
 800403e:	61f8      	str	r0, [r7, #28]
    UART_SendBuffer(&parrent->stm32_uart, frame->data, frame->size);
 8004040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004042:	f503 704d 	add.w	r0, r3, #820	@ 0x334
 8004046:	69fb      	ldr	r3, [r7, #28]
 8004048:	6819      	ldr	r1, [r3, #0]
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	461a      	mov	r2, r3
 8004050:	f002 fbb0 	bl	80067b4 <UART_SendBuffer>
}
 8004054:	bf00      	nop
 8004056:	3728      	adds	r7, #40	@ 0x28
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <__M_SEND_ASSERT_MSG>:

static inline void __M_SEND_ASSERT_MSG(const char* const header,
                                const char* const expr_str, const unsigned char expr,
                                const char* const file, const int line, const char* const func_name,
                                const char* const msg, va_list args)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	603b      	str	r3, [r7, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	71fb      	strb	r3, [r7, #7]
#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
    int assertEna 	= 1;
 800406c:	2301      	movs	r3, #1
 800406e:	61fb      	str	r3, [r7, #28]
    char* descr 	= 0;
 8004070:	2300      	movs	r3, #0
 8004072:	61bb      	str	r3, [r7, #24]
    const int _additional_data_ex = __M_IF_ASSERT_ADDITION_DATA(msg);
 8004074:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	2b5b      	cmp	r3, #91	@ 0x5b
 800407a:	d106      	bne.n	800408a <__M_SEND_ASSERT_MSG+0x2e>
 800407c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800407e:	3302      	adds	r3, #2
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	2b5d      	cmp	r3, #93	@ 0x5d
 8004084:	d101      	bne.n	800408a <__M_SEND_ASSERT_MSG+0x2e>
 8004086:	2301      	movs	r3, #1
 8004088:	e000      	b.n	800408c <__M_SEND_ASSERT_MSG+0x30>
 800408a:	2300      	movs	r3, #0
 800408c:	617b      	str	r3, [r7, #20]

    if(_additional_data_ex) {
 800408e:	697b      	ldr	r3, [r7, #20]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d035      	beq.n	8004100 <__M_SEND_ASSERT_MSG+0xa4>

        switch(__M_ASSERT_DATA(msg)) {
 8004094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004096:	3301      	adds	r3, #1
 8004098:	781b      	ldrb	r3, [r3, #0]
 800409a:	2b73      	cmp	r3, #115	@ 0x73
 800409c:	d014      	beq.n	80040c8 <__M_SEND_ASSERT_MSG+0x6c>
 800409e:	2b73      	cmp	r3, #115	@ 0x73
 80040a0:	dc28      	bgt.n	80040f4 <__M_SEND_ASSERT_MSG+0x98>
 80040a2:	2b65      	cmp	r3, #101	@ 0x65
 80040a4:	d018      	beq.n	80040d8 <__M_SEND_ASSERT_MSG+0x7c>
 80040a6:	2b65      	cmp	r3, #101	@ 0x65
 80040a8:	dc24      	bgt.n	80040f4 <__M_SEND_ASSERT_MSG+0x98>
 80040aa:	2b30      	cmp	r3, #48	@ 0x30
 80040ac:	d01c      	beq.n	80040e8 <__M_SEND_ASSERT_MSG+0x8c>
 80040ae:	2b64      	cmp	r3, #100	@ 0x64
 80040b0:	d120      	bne.n	80040f4 <__M_SEND_ASSERT_MSG+0x98>

        case 'd':
            // get library info
            assertEna = va_arg(args, const int);
 80040b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040b4:	1d1a      	adds	r2, r3, #4
 80040b6:	637a      	str	r2, [r7, #52]	@ 0x34
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	61fb      	str	r3, [r7, #28]
            descr = va_arg(args, char*);
 80040bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040be:	1d1a      	adds	r2, r3, #4
 80040c0:	637a      	str	r2, [r7, #52]	@ 0x34
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	61bb      	str	r3, [r7, #24]
            break;
 80040c6:	e01b      	b.n	8004100 <__M_SEND_ASSERT_MSG+0xa4>

        case 's':
            // get library info
            assertEna = 1;
 80040c8:	2301      	movs	r3, #1
 80040ca:	61fb      	str	r3, [r7, #28]
            descr = va_arg(args, char*);
 80040cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ce:	1d1a      	adds	r2, r3, #4
 80040d0:	637a      	str	r2, [r7, #52]	@ 0x34
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	61bb      	str	r3, [r7, #24]
            break;
 80040d6:	e013      	b.n	8004100 <__M_SEND_ASSERT_MSG+0xa4>

        case 'e':
            // get library info
            assertEna   = va_arg(args, const int);
 80040d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040da:	1d1a      	adds	r2, r3, #4
 80040dc:	637a      	str	r2, [r7, #52]	@ 0x34
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61fb      	str	r3, [r7, #28]
            descr       = 0;
 80040e2:	2300      	movs	r3, #0
 80040e4:	61bb      	str	r3, [r7, #24]
            break;
 80040e6:	e00b      	b.n	8004100 <__M_SEND_ASSERT_MSG+0xa4>

        case '0':
            descr = va_arg(args, char*);
 80040e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040ea:	1d1a      	adds	r2, r3, #4
 80040ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	61bb      	str	r3, [r7, #24]
#	if !defined(M_MESSAGE_ALWAYS_ENABLE)
            (void)descr;
            return;
 80040f2:	e05d      	b.n	80041b0 <__M_SEND_ASSERT_MSG+0x154>
#   endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) */
            break;

        default:  descr = va_arg(args, char*); break;
 80040f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f6:	1d1a      	adds	r2, r3, #4
 80040f8:	637a      	str	r2, [r7, #52]	@ 0x34
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	61bb      	str	r3, [r7, #24]
 80040fe:	bf00      	nop
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */


#if !defined(M_MESSAGE_ALWAYS_ENABLE) && !defined(M_ASSERT_MSG_TEXT_DISABLE)
    // send message if enabled message
    if(assertEna) {
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d054      	beq.n	80041b0 <__M_SEND_ASSERT_MSG+0x154>
#endif /* !defined(M_MESSAGE_ALWAYS_ENABLE) && !defined(M_ASSERT_MSG_TEXT_DISABLE) */

        // print header-------------------------------------------------------
        fprintf(stderr, "\n%s\n", header);
 8004106:	4b2c      	ldr	r3, [pc, #176]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	68fa      	ldr	r2, [r7, #12]
 800410e:	492b      	ldr	r1, [pc, #172]	@ (80041bc <__M_SEND_ASSERT_MSG+0x160>)
 8004110:	4618      	mov	r0, r3
 8004112:	f003 fdcf 	bl	8007cb4 <fiprintf>
        // print function if enable ------------------------------------------
#if !defined(M_ASSERT_FUNCTION_NAME_TEXT_DISABLE)
        fprintf(stderr, "Function:\t%s\n", func_name);
 8004116:	4b28      	ldr	r3, [pc, #160]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800411e:	4928      	ldr	r1, [pc, #160]	@ (80041c0 <__M_SEND_ASSERT_MSG+0x164>)
 8004120:	4618      	mov	r0, r3
 8004122:	f003 fdc7 	bl	8007cb4 <fiprintf>
#endif /* !defined(M_ASSERT_FUNCTION_NAME_TEXT_DISABLE) */

#if !defined(M_ASSERT_MSG_TEXT_DISABLE)
        // print library name if exists and enable ------------------------------------------
        if(descr) {
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <__M_SEND_ASSERT_MSG+0xe0>
            fprintf(stderr, "Library Name:\t%s\n", descr);
 800412c:	4b22      	ldr	r3, [pc, #136]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	69ba      	ldr	r2, [r7, #24]
 8004134:	4923      	ldr	r1, [pc, #140]	@ (80041c4 <__M_SEND_ASSERT_MSG+0x168>)
 8004136:	4618      	mov	r0, r3
 8004138:	f003 fdbc 	bl	8007cb4 <fiprintf>
        }
        // print msg text if enable ------------------------------------------
        fprintf(stderr, "Assert failed:\t");
 800413c:	4b1e      	ldr	r3, [pc, #120]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	68db      	ldr	r3, [r3, #12]
 8004142:	220f      	movs	r2, #15
 8004144:	2101      	movs	r1, #1
 8004146:	4820      	ldr	r0, [pc, #128]	@ (80041c8 <__M_SEND_ASSERT_MSG+0x16c>)
 8004148:	f003 fe5c 	bl	8007e04 <fwrite>
        if(_additional_data_ex) {
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d009      	beq.n	8004166 <__M_SEND_ASSERT_MSG+0x10a>
            vfprintf(stderr, &msg[3], args);
 8004152:	4b19      	ldr	r3, [pc, #100]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68d8      	ldr	r0, [r3, #12]
 8004158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415a:	3303      	adds	r3, #3
 800415c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800415e:	4619      	mov	r1, r3
 8004160:	f003 faac 	bl	80076bc <vfiprintf>
 8004164:	e007      	b.n	8004176 <__M_SEND_ASSERT_MSG+0x11a>
        } else {
            vfprintf(stderr, msg, args);
 8004166:	4b14      	ldr	r3, [pc, #80]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800416e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004170:	4618      	mov	r0, r3
 8004172:	f003 faa3 	bl	80076bc <vfiprintf>
        }
        fprintf(stderr, "\n");
 8004176:	4b10      	ldr	r3, [pc, #64]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	68db      	ldr	r3, [r3, #12]
 800417c:	4619      	mov	r1, r3
 800417e:	200a      	movs	r0, #10
 8004180:	f003 fdce 	bl	8007d20 <fputc>
#endif /* defined(M_ASSERT_MSG_TEXT_DISABLE) */

        // print expression text if enable ------------------------------------------
#if !defined(M_ASSERT_EXPR_DISABLE)
        fprintf(stderr, "Expression:\t%s, value: %d\n", expr_str, expr);
 8004184:	4b0c      	ldr	r3, [pc, #48]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68d8      	ldr	r0, [r3, #12]
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	490f      	ldr	r1, [pc, #60]	@ (80041cc <__M_SEND_ASSERT_MSG+0x170>)
 8004190:	f003 fd90 	bl	8007cb4 <fiprintf>
#endif /* defined(M_ASSERT_EXPR_TEXT_DISABLE) */

        // print file & line if enable ------------------------------------------
#if !defined(M_ASSERT_FILE_LINE_TEXT_DISABLE)
            fprintf(stderr, "Source:\t\t%s, line: %d\n", file, line);
 8004194:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	68d8      	ldr	r0, [r3, #12]
 800419a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800419c:	683a      	ldr	r2, [r7, #0]
 800419e:	490c      	ldr	r1, [pc, #48]	@ (80041d0 <__M_SEND_ASSERT_MSG+0x174>)
 80041a0:	f003 fd88 	bl	8007cb4 <fiprintf>
#endif /* defined(M_ASSERT_FILE_LINE_TEXT_DISABLE) */

        fflush(stderr);
 80041a4:	4b04      	ldr	r3, [pc, #16]	@ (80041b8 <__M_SEND_ASSERT_MSG+0x15c>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68db      	ldr	r3, [r3, #12]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f003 fcca 	bl	8007b44 <fflush>
    (void)file;
    (void)line;
    (void)func_name;
    (void)msg;
    (void)args;
}
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	20000018 	.word	0x20000018
 80041bc:	080099f4 	.word	0x080099f4
 80041c0:	080099fc 	.word	0x080099fc
 80041c4:	08009a0c 	.word	0x08009a0c
 80041c8:	08009a20 	.word	0x08009a20
 80041cc:	08009a30 	.word	0x08009a30
 80041d0:	08009a4c 	.word	0x08009a4c

080041d4 <__M_Error>:
static bool _m_chaos_exit_en = false;
void __M_Chaos_exit_set(const bool en) {_m_chaos_exit_en = en;}
void __M_Error(const char* const expr_str, const unsigned char expr,
                            const char* const file, const int line, const char* const func_name,
                            const char* const msg, ...)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	@ 0x28
 80041d8:	af04      	add	r7, sp, #16
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	460b      	mov	r3, r1
 80041e2:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 80041e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041e8:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("PROGRAMM EXIT WITH ERROR!!!", expr_str, expr, file, line, func_name, msg, args);
 80041ea:	7afa      	ldrb	r2, [r7, #11]
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	9303      	str	r3, [sp, #12]
 80041f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041f2:	9302      	str	r3, [sp, #8]
 80041f4:	6a3b      	ldr	r3, [r7, #32]
 80041f6:	9301      	str	r3, [sp, #4]
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	9300      	str	r3, [sp, #0]
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68f9      	ldr	r1, [r7, #12]
 8004200:	4803      	ldr	r0, [pc, #12]	@ (8004210 <__M_Error+0x3c>)
 8004202:	f7ff ff2b 	bl	800405c <__M_SEND_ASSERT_MSG>
    va_end(args);

//    if(_m_chaos_exit_en) {
//    	abort(); /* exit programm */
//    }
}
 8004206:	bf00      	nop
 8004208:	3718      	adds	r7, #24
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	08009a64 	.word	0x08009a64

08004214 <__M_Warning>:

void __M_Warning(const char* const expr_str, const unsigned char expr,
                            const char* const file, const int line, const char* const func_name,
                            const char* const msg, ...)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b08a      	sub	sp, #40	@ 0x28
 8004218:	af04      	add	r7, sp, #16
 800421a:	60f8      	str	r0, [r7, #12]
 800421c:	607a      	str	r2, [r7, #4]
 800421e:	603b      	str	r3, [r7, #0]
 8004220:	460b      	mov	r3, r1
 8004222:	72fb      	strb	r3, [r7, #11]
    va_list args;
    va_start(args, msg);
 8004224:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004228:	617b      	str	r3, [r7, #20]
    __M_SEND_ASSERT_MSG("WARNING!!!", expr_str, expr, file, line, func_name, msg, args);
 800422a:	7afa      	ldrb	r2, [r7, #11]
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	9303      	str	r3, [sp, #12]
 8004230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004232:	9302      	str	r3, [sp, #8]
 8004234:	6a3b      	ldr	r3, [r7, #32]
 8004236:	9301      	str	r3, [sp, #4]
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	9300      	str	r3, [sp, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	68f9      	ldr	r1, [r7, #12]
 8004240:	4803      	ldr	r0, [pc, #12]	@ (8004250 <__M_Warning+0x3c>)
 8004242:	f7ff ff0b 	bl	800405c <__M_SEND_ASSERT_MSG>
    va_end(args);
}
 8004246:	bf00      	nop
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	08009a80 	.word	0x08009a80

08004254 <CallbackManager_init>:
    CallbackManager_init(m_manager);
    return m_manager;
}

int CallbackManager_init(CallbackManager_t * const self)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b086      	sub	sp, #24
 8004258:	af04      	add	r7, sp, #16
 800425a:	6078      	str	r0, [r7, #4]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return 1, M_LIB_DATA_DEF "CallbackManager_init: no valid input data", ENA, LIB);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10f      	bne.n	8004282 <CallbackManager_init+0x2e>
 8004262:	4b0d      	ldr	r3, [pc, #52]	@ (8004298 <CallbackManager_init+0x44>)
 8004264:	9303      	str	r3, [sp, #12]
 8004266:	2301      	movs	r3, #1
 8004268:	9302      	str	r3, [sp, #8]
 800426a:	4b0c      	ldr	r3, [pc, #48]	@ (800429c <CallbackManager_init+0x48>)
 800426c:	9301      	str	r3, [sp, #4]
 800426e:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <CallbackManager_init+0x4c>)
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	2315      	movs	r3, #21
 8004274:	4a0b      	ldr	r2, [pc, #44]	@ (80042a4 <CallbackManager_init+0x50>)
 8004276:	2101      	movs	r1, #1
 8004278:	480b      	ldr	r0, [pc, #44]	@ (80042a8 <CallbackManager_init+0x54>)
 800427a:	f7ff ffab 	bl	80041d4 <__M_Error>
 800427e:	2301      	movs	r3, #1
 8004280:	e005      	b.n	800428e <CallbackManager_init+0x3a>
    memset(self, 0, sizeof(CallbackManager_t));
 8004282:	2218      	movs	r2, #24
 8004284:	2100      	movs	r1, #0
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f003 ff60 	bl	800814c <memset>
    return 0;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	08009d1c 	.word	0x08009d1c
 800429c:	08009d88 	.word	0x08009d88
 80042a0:	0800a560 	.word	0x0800a560
 80042a4:	08009cb8 	.word	0x08009cb8
 80042a8:	08009d64 	.word	0x08009d64

080042ac <CallbackManager_subscribe>:

    return 0;
}

int CallbackManager_subscribe(CallbackManager_t * const self, const CallBManIdType id, const CallbackWorker worker, PREPROCESSOR_CTX_TYPE(ctx))
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af04      	add	r7, sp, #16
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	607a      	str	r2, [r7, #4]
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	460b      	mov	r3, r1
 80042ba:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 1, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 1, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input id", ENA, LIB);
 80042bc:	7afb      	ldrb	r3, [r7, #11]
 80042be:	2b04      	cmp	r3, #4
 80042c0:	d90f      	bls.n	80042e2 <CallbackManager_subscribe+0x36>
 80042c2:	4b0e      	ldr	r3, [pc, #56]	@ (80042fc <CallbackManager_subscribe+0x50>)
 80042c4:	9303      	str	r3, [sp, #12]
 80042c6:	2301      	movs	r3, #1
 80042c8:	9302      	str	r3, [sp, #8]
 80042ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004300 <CallbackManager_subscribe+0x54>)
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004304 <CallbackManager_subscribe+0x58>)
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2328      	movs	r3, #40	@ 0x28
 80042d4:	4a0c      	ldr	r2, [pc, #48]	@ (8004308 <CallbackManager_subscribe+0x5c>)
 80042d6:	2101      	movs	r1, #1
 80042d8:	480c      	ldr	r0, [pc, #48]	@ (800430c <CallbackManager_subscribe+0x60>)
 80042da:	f7ff ff9b 	bl	8004214 <__M_Warning>
 80042de:	2301      	movs	r3, #1
 80042e0:	e008      	b.n	80042f4 <CallbackManager_subscribe+0x48>
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    self->workers[id] = worker;
 80042e2:	7afa      	ldrb	r2, [r7, #11]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	6879      	ldr	r1, [r7, #4]
 80042e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    self->ctx[id] = PREPROCESSOR_CTX_TYPE_CAST(ctx);
#else
    self->ctx = PREPROCESSOR_CTX_TYPE_CAST(ctx);
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	615a      	str	r2, [r3, #20]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    return 0;
 80042f2:	2300      	movs	r3, #0
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}
 80042fc:	08009d1c 	.word	0x08009d1c
 8004300:	08009e38 	.word	0x08009e38
 8004304:	0800a578 	.word	0x0800a578
 8004308:	08009cb8 	.word	0x08009cb8
 800430c:	08009e0c 	.word	0x08009e0c

08004310 <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
int CallbackManager_proceed(const CallbackManager_t* const self, const CallBManIdType id,
                            u8* const inputData, u8* const outputData, reg* const size, const reg maxOutBufferSize)
{
 8004310:	b590      	push	{r4, r7, lr}
 8004312:	b08b      	sub	sp, #44	@ 0x2c
 8004314:	af04      	add	r7, sp, #16
 8004316:	60f8      	str	r0, [r7, #12]
 8004318:	607a      	str	r2, [r7, #4]
 800431a:	603b      	str	r3, [r7, #0]
 800431c:	460b      	mov	r3, r1
 800431e:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input data", ENA, LIB);

#if !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL))
    M_Assert_WarningSaveCheck(id > (CALL_B_MAN_MAX_COMMAND_FUNCTIONS - 1), M_EMPTY, return 0, M_LIB_DATA_DEF "CallbackManager_proceed: no valid input id", ENA, LIB);
 8004320:	7afb      	ldrb	r3, [r7, #11]
 8004322:	2b04      	cmp	r3, #4
 8004324:	d90f      	bls.n	8004346 <CallbackManager_proceed+0x36>
 8004326:	4b15      	ldr	r3, [pc, #84]	@ (800437c <CallbackManager_proceed+0x6c>)
 8004328:	9303      	str	r3, [sp, #12]
 800432a:	2301      	movs	r3, #1
 800432c:	9302      	str	r3, [sp, #8]
 800432e:	4b14      	ldr	r3, [pc, #80]	@ (8004380 <CallbackManager_proceed+0x70>)
 8004330:	9301      	str	r3, [sp, #4]
 8004332:	4b14      	ldr	r3, [pc, #80]	@ (8004384 <CallbackManager_proceed+0x74>)
 8004334:	9300      	str	r3, [sp, #0]
 8004336:	233e      	movs	r3, #62	@ 0x3e
 8004338:	4a13      	ldr	r2, [pc, #76]	@ (8004388 <CallbackManager_proceed+0x78>)
 800433a:	2101      	movs	r1, #1
 800433c:	4813      	ldr	r0, [pc, #76]	@ (800438c <CallbackManager_proceed+0x7c>)
 800433e:	f7ff ff69 	bl	8004214 <__M_Warning>
 8004342:	2300      	movs	r3, #0
 8004344:	e015      	b.n	8004372 <CallbackManager_proceed+0x62>
#endif /* !((CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 256U) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 65536UL) || (CALL_B_MAN_MAX_COMMAND_FUNCTIONS == 4294967296UL)) */

    // move to cash
    const CallbackWorker worker = self->workers[id];
 8004346:	7afa      	ldrb	r2, [r7, #11]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800434e:	617b      	str	r3, [r7, #20]

#ifdef CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx[id];
#else
    PREPROCESSOR_CTX_TYPE(ctx) = self->ctx;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	613b      	str	r3, [r7, #16]
#endif /* CALL_B_MAN_ENABLE_DIFFERENCE_CONTEXT */

    // do logic
    M_Assert_SafeFunctionCall((worker != (CallbackWorker)NULL), {
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d009      	beq.n	8004370 <CallbackManager_proceed+0x60>
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	697c      	ldr	r4, [r7, #20]
 8004362:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004366:	6839      	ldr	r1, [r7, #0]
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	47a0      	blx	r4
 800436c:	2301      	movs	r3, #1
 800436e:	e000      	b.n	8004372 <CallbackManager_proceed+0x62>
                                  worker(inputData, outputData, size, maxOutBufferSize, ctx);
                                  return 1;
                              });
    return 0;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	371c      	adds	r7, #28
 8004376:	46bd      	mov	sp, r7
 8004378:	bd90      	pop	{r4, r7, pc}
 800437a:	bf00      	nop
 800437c:	08009d1c 	.word	0x08009d1c
 8004380:	08009e68 	.word	0x08009e68
 8004384:	0800a594 	.word	0x0800a594
 8004388:	08009cb8 	.word	0x08009cb8
 800438c:	08009e0c 	.word	0x08009e0c

08004390 <convertRead_LSB_u8>:
 * ******************************************
 * LSB - first
 * ******************************************
 */
T TEMPLATE(convertRead_LSB, T) (u8* data, reg * pos)
{
 8004390:	b480      	push	{r7}
 8004392:	b085      	sub	sp, #20
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
    reg posInternal = (*pos);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	60fb      	str	r3, [r7, #12]
    T value;
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), (data + posInternal), (&value));
 80043a0:	687a      	ldr	r2, [r7, #4]
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	781b      	ldrb	r3, [r3, #0]
 80043a8:	72fb      	strb	r3, [r7, #11]
    posInternal += sizeof(T);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	3301      	adds	r3, #1
 80043ae:	60fb      	str	r3, [r7, #12]
    (*pos) = posInternal;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	601a      	str	r2, [r3, #0]
    return value;
 80043b6:	7afb      	ldrb	r3, [r7, #11]
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3714      	adds	r7, #20
 80043bc:	46bd      	mov	sp, r7
 80043be:	bc80      	pop	{r7}
 80043c0:	4770      	bx	lr

080043c2 <convertWrite_LSB_u8>:

void TEMPLATE(convertWrite_LSB, T) (u8* data, reg* pos, T value)
{
 80043c2:	b480      	push	{r7}
 80043c4:	b087      	sub	sp, #28
 80043c6:	af00      	add	r7, sp, #0
 80043c8:	60f8      	str	r0, [r7, #12]
 80043ca:	60b9      	str	r1, [r7, #8]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
    reg posInternal = (*pos);
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	617b      	str	r3, [r7, #20]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), &value, data + posInternal);
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	4413      	add	r3, r2
 80043dc:	79fa      	ldrb	r2, [r7, #7]
 80043de:	701a      	strb	r2, [r3, #0]
    posInternal += sizeof(T);
 80043e0:	697b      	ldr	r3, [r7, #20]
 80043e2:	3301      	adds	r3, #1
 80043e4:	617b      	str	r3, [r7, #20]
    (*pos) = posInternal;
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	697a      	ldr	r2, [r7, #20]
 80043ea:	601a      	str	r2, [r3, #0]
}
 80043ec:	bf00      	nop
 80043ee:	371c      	adds	r7, #28
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bc80      	pop	{r7}
 80043f4:	4770      	bx	lr

080043f6 <convertRead_LSB_u16>:
{
 80043f6:	b480      	push	{r7}
 80043f8:	b085      	sub	sp, #20
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
 80043fe:	6039      	str	r1, [r7, #0]
    reg posInternal = (*pos);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), (data + posInternal), (&value));
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	4413      	add	r3, r2
 800440c:	881b      	ldrh	r3, [r3, #0]
 800440e:	b29b      	uxth	r3, r3
 8004410:	817b      	strh	r3, [r7, #10]
    posInternal += sizeof(T);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	3302      	adds	r3, #2
 8004416:	60fb      	str	r3, [r7, #12]
    (*pos) = posInternal;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	601a      	str	r2, [r3, #0]
    return value;
 800441e:	897b      	ldrh	r3, [r7, #10]
}
 8004420:	4618      	mov	r0, r3
 8004422:	3714      	adds	r7, #20
 8004424:	46bd      	mov	sp, r7
 8004426:	bc80      	pop	{r7}
 8004428:	4770      	bx	lr

0800442a <convertWrite_LSB_u16>:
{
 800442a:	b480      	push	{r7}
 800442c:	b087      	sub	sp, #28
 800442e:	af00      	add	r7, sp, #0
 8004430:	60f8      	str	r0, [r7, #12]
 8004432:	60b9      	str	r1, [r7, #8]
 8004434:	4613      	mov	r3, r2
 8004436:	80fb      	strh	r3, [r7, #6]
    reg posInternal = (*pos);
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	617b      	str	r3, [r7, #20]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), &value, data + posInternal);
 800443e:	68fa      	ldr	r2, [r7, #12]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	4413      	add	r3, r2
 8004444:	88fa      	ldrh	r2, [r7, #6]
 8004446:	801a      	strh	r2, [r3, #0]
    posInternal += sizeof(T);
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3302      	adds	r3, #2
 800444c:	617b      	str	r3, [r7, #20]
    (*pos) = posInternal;
 800444e:	68bb      	ldr	r3, [r7, #8]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	601a      	str	r2, [r3, #0]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	bc80      	pop	{r7}
 800445c:	4770      	bx	lr

0800445e <convertRead_LSB_u32>:
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
    reg posInternal = (*pos);
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	60fb      	str	r3, [r7, #12]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), (data + posInternal), (&value));
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	4413      	add	r3, r2
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	60bb      	str	r3, [r7, #8]
    posInternal += sizeof(T);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	3304      	adds	r3, #4
 800447c:	60fb      	str	r3, [r7, #12]
    (*pos) = posInternal;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	601a      	str	r2, [r3, #0]
    return value;
 8004484:	68bb      	ldr	r3, [r7, #8]
}
 8004486:	4618      	mov	r0, r3
 8004488:	3714      	adds	r7, #20
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <convertWrite_LSB_u32>:
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	60f8      	str	r0, [r7, #12]
 8004498:	60b9      	str	r1, [r7, #8]
 800449a:	607a      	str	r2, [r7, #4]
    reg posInternal = (*pos);
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	617b      	str	r3, [r7, #20]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), &value, data + posInternal);
 80044a2:	68fa      	ldr	r2, [r7, #12]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	4413      	add	r3, r2
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	601a      	str	r2, [r3, #0]
    posInternal += sizeof(T);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	3304      	adds	r3, #4
 80044b0:	617b      	str	r3, [r7, #20]
    (*pos) = posInternal;
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	601a      	str	r2, [r3, #0]
}
 80044b8:	bf00      	nop
 80044ba:	371c      	adds	r7, #28
 80044bc:	46bd      	mov	sp, r7
 80044be:	bc80      	pop	{r7}
 80044c0:	4770      	bx	lr

080044c2 <convertRead_LSB_i32>:
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
 80044ca:	6039      	str	r1, [r7, #0]
    reg posInternal = (*pos);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60fb      	str	r3, [r7, #12]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), (data + posInternal), (&value));
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	4413      	add	r3, r2
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	60bb      	str	r3, [r7, #8]
    posInternal += sizeof(T);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	3304      	adds	r3, #4
 80044e0:	60fb      	str	r3, [r7, #12]
    (*pos) = posInternal;
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	601a      	str	r2, [r3, #0]
    return value;
 80044e8:	68bb      	ldr	r3, [r7, #8]
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bc80      	pop	{r7}
 80044f2:	4770      	bx	lr

080044f4 <convertWrite_LSB_i32>:
{
 80044f4:	b480      	push	{r7}
 80044f6:	b087      	sub	sp, #28
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
    reg posInternal = (*pos);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	617b      	str	r3, [r7, #20]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), &value, data + posInternal);
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	697b      	ldr	r3, [r7, #20]
 800450a:	4413      	add	r3, r2
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	601a      	str	r2, [r3, #0]
    posInternal += sizeof(T);
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	3304      	adds	r3, #4
 8004514:	617b      	str	r3, [r7, #20]
    (*pos) = posInternal;
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	601a      	str	r2, [r3, #0]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	bc80      	pop	{r7}
 8004524:	4770      	bx	lr

08004526 <convertRead_LSB_reg>:
{
 8004526:	b480      	push	{r7}
 8004528:	b085      	sub	sp, #20
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	6039      	str	r1, [r7, #0]
    reg posInternal = (*pos);
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	60fb      	str	r3, [r7, #12]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), (data + posInternal), (&value));
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4413      	add	r3, r2
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60bb      	str	r3, [r7, #8]
    posInternal += sizeof(T);
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	3304      	adds	r3, #4
 8004544:	60fb      	str	r3, [r7, #12]
    (*pos) = posInternal;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	601a      	str	r2, [r3, #0]
    return value;
 800454c:	68bb      	ldr	r3, [r7, #8]
}
 800454e:	4618      	mov	r0, r3
 8004550:	3714      	adds	r7, #20
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <convertWrite_LSB_reg>:
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]
    reg posInternal = (*pos);
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]
    MY_CTYPE_USER_DATA_MEMCPY(sizeof(T), &value, data + posInternal);
 800456a:	68fa      	ldr	r2, [r7, #12]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	4413      	add	r3, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	601a      	str	r2, [r3, #0]
    posInternal += sizeof(T);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	3304      	adds	r3, #4
 8004578:	617b      	str	r3, [r7, #20]
    (*pos) = posInternal;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	601a      	str	r2, [r3, #0]
}
 8004580:	bf00      	nop
 8004582:	371c      	adds	r7, #28
 8004584:	46bd      	mov	sp, r7
 8004586:	bc80      	pop	{r7}
 8004588:	4770      	bx	lr
	...

0800458c <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	460a      	mov	r2, r1
 8004596:	71fb      	strb	r3, [r7, #7]
 8004598:	4613      	mov	r3, r2
 800459a:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 800459c:	79fa      	ldrb	r2, [r7, #7]
 800459e:	79bb      	ldrb	r3, [r7, #6]
 80045a0:	4053      	eors	r3, r2
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	461a      	mov	r2, r3
 80045a6:	4b03      	ldr	r3, [pc, #12]	@ (80045b4 <fast_crc8_maxim_byte+0x28>)
 80045a8:	5c9b      	ldrb	r3, [r3, r2]
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	370c      	adds	r7, #12
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bc80      	pop	{r7}
 80045b2:	4770      	bx	lr
 80045b4:	0800a5ac 	.word	0x0800a5ac

080045b8 <cTypeStrnCmp>:
}


// string compleate------------------------------------------
int cTypeStrnCmp(reg n, const c8* str1, const c8* str2)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	60f8      	str	r0, [r7, #12]
 80045c0:	60b9      	str	r1, [r7, #8]
 80045c2:	607a      	str	r2, [r7, #4]
	if(n == 0 || str1 == NULL || str2 == NULL) {
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d005      	beq.n	80045d6 <cTypeStrnCmp+0x1e>
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d002      	beq.n	80045d6 <cTypeStrnCmp+0x1e>
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d101      	bne.n	80045da <cTypeStrnCmp+0x22>
		return 0;
 80045d6:	2300      	movs	r3, #0
 80045d8:	e012      	b.n	8004600 <cTypeStrnCmp+0x48>
	}

	do {
		if(*str1++ != *str2++) {
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	60ba      	str	r2, [r7, #8]
 80045e0:	781a      	ldrb	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	1c59      	adds	r1, r3, #1
 80045e6:	6079      	str	r1, [r7, #4]
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d001      	beq.n	80045f2 <cTypeStrnCmp+0x3a>
			return 1;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e006      	b.n	8004600 <cTypeStrnCmp+0x48>
		}

	} while (--n);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	3b01      	subs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d1ed      	bne.n	80045da <cTypeStrnCmp+0x22>

	return 0;
 80045fe:	2300      	movs	r3, #0
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	bc80      	pop	{r7}
 8004608:	4770      	bx	lr

0800460a <receiveTransmittSimpleDmaTest>:
 * SIMPLE RANDOM TRANSMITT/RECEIVE TEST
 *
 */

static int receiveTransmittSimpleDmaTest(RawParser_dma_t* desc, u8 * data, reg size)
{
 800460a:	b580      	push	{r7, lr}
 800460c:	b096      	sub	sp, #88	@ 0x58
 800460e:	af00      	add	r7, sp, #0
 8004610:	60f8      	str	r0, [r7, #12]
 8004612:	60b9      	str	r1, [r7, #8]
 8004614:	607a      	str	r2, [r7, #4]
    int byteReceiveCompl = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	657b      	str	r3, [r7, #84]	@ 0x54
    int arrReceiveCompl = 0;
 800461a:	2300      	movs	r3, #0
 800461c:	653b      	str	r3, [r7, #80]	@ 0x50

    RawParser_Frame_t* Txframe = RawParser_dma_shieldFrame(desc, data, size);
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f001 f886 	bl	8005734 <RawParser_dma_shieldFrame>
 8004628:	6478      	str	r0, [r7, #68]	@ 0x44

    if(Txframe == NULL) {
 800462a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800462c:	2b00      	cmp	r3, #0
 800462e:	d101      	bne.n	8004634 <receiveTransmittSimpleDmaTest+0x2a>
        return 1;
 8004630:	2301      	movs	r3, #1
 8004632:	e0d0      	b.n	80047d6 <receiveTransmittSimpleDmaTest+0x1cc>
    }

    for(reg i = 0; i < Txframe->size; ++i) {
 8004634:	2300      	movs	r3, #0
 8004636:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004638:	e020      	b.n	800467c <receiveTransmittSimpleDmaTest+0x72>
        RawParser_dma_receiveByte(desc, Txframe->data[i]);
 800463a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004640:	4413      	add	r3, r2
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004648:	4613      	mov	r3, r2
 800464a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

// receive functions-----------------------------------------------------------------------------------------
STATIC_FORCEINLINE void RawParser_dma_receiveByte(RawParser_dma_t* const self, const u8 byte)
{
    // save to register ------------------------------------------------------------------------------
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 800464e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004650:	3308      	adds	r3, #8
 8004652:	637b      	str	r3, [r7, #52]	@ 0x34
    const reg m_receivePos      = self->m_receivePos;
 8004654:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004656:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 800465a:	633b      	str	r3, [r7, #48]	@ 0x30
    // do logic --------------------------------------------------------------------------------------
    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 800465c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800465e:	b2db      	uxtb	r3, r3
 8004660:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004662:	4413      	add	r3, r2
 8004664:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 8004668:	701a      	strb	r2, [r3, #0]
    // save position to memory ------------------------------------------------------------------------
    self->m_receivePos = m_receivePos + 1U;
 800466a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004670:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 8004674:	bf00      	nop
    for(reg i = 0; i < Txframe->size; ++i) {
 8004676:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004678:	3301      	adds	r3, #1
 800467a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004682:	429a      	cmp	r2, r3
 8004684:	d3d9      	bcc.n	800463a <receiveTransmittSimpleDmaTest+0x30>
    }


    // ------------- one byte pushing test---------------------------------------
    RawParser_Frame_t* Rxframe = RawParser_dma_proceed(desc);
 8004686:	68f8      	ldr	r0, [r7, #12]
 8004688:	f000 ff92 	bl	80055b0 <RawParser_dma_proceed>
 800468c:	6438      	str	r0, [r7, #64]	@ 0x40

    if(Rxframe && Rxframe->size != 0) {
 800468e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d018      	beq.n	80046c6 <receiveTransmittSimpleDmaTest+0xbc>
 8004694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d014      	beq.n	80046c6 <receiveTransmittSimpleDmaTest+0xbc>
        if(Rxframe->size != size) {
 800469c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d003      	beq.n	80046ae <receiveTransmittSimpleDmaTest+0xa4>
            byteReceiveCompl++;
 80046a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046a8:	3301      	adds	r3, #1
 80046aa:	657b      	str	r3, [r7, #84]	@ 0x54
        if(Rxframe->size != size) {
 80046ac:	e00e      	b.n	80046cc <receiveTransmittSimpleDmaTest+0xc2>
        } else {
            byteReceiveCompl += cTypeStrnCmp(size, (c8*)data, (c8*)Rxframe->data);
 80046ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	461a      	mov	r2, r3
 80046b4:	68b9      	ldr	r1, [r7, #8]
 80046b6:	6878      	ldr	r0, [r7, #4]
 80046b8:	f7ff ff7e 	bl	80045b8 <cTypeStrnCmp>
 80046bc:	4602      	mov	r2, r0
 80046be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c0:	4413      	add	r3, r2
 80046c2:	657b      	str	r3, [r7, #84]	@ 0x54
        if(Rxframe->size != size) {
 80046c4:	e002      	b.n	80046cc <receiveTransmittSimpleDmaTest+0xc2>
        }
    } else {
        byteReceiveCompl++;
 80046c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046c8:	3301      	adds	r3, #1
 80046ca:	657b      	str	r3, [r7, #84]	@ 0x54
    }

    Txframe->size = 0;
 80046cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ce:	2200      	movs	r2, #0
 80046d0:	605a      	str	r2, [r3, #4]



    // ------------- all byte pushing test---------------------------------------
    Txframe = RawParser_dma_shieldFrame(desc, data, size);
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f001 f82c 	bl	8005734 <RawParser_dma_shieldFrame>
 80046dc:	6478      	str	r0, [r7, #68]	@ 0x44

    if(Txframe == NULL) {
 80046de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <receiveTransmittSimpleDmaTest+0xe0>
        return byteReceiveCompl + 1;
 80046e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80046e6:	3301      	adds	r3, #1
 80046e8:	e075      	b.n	80047d6 <receiveTransmittSimpleDmaTest+0x1cc>
    }

    RawParser_dma_receiveArray(desc, Txframe->data, Txframe->size);
 80046ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	68f9      	ldr	r1, [r7, #12]
 80046f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80046f6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80046f8:	627b      	str	r3, [r7, #36]	@ 0x24

STATIC_FORCEINLINE void RawParser_dma_receiveArray(RawParser_dma_t* const self, const u8* const arr, const reg size)
{
    if(size > D_RAW_P_RX_BUF_SIZE) {
 80046fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004700:	d835      	bhi.n	800476e <receiveTransmittSimpleDmaTest+0x164>
    	return;
    }

    // save to register ------------------------------------------------------------------------------
    u8* const m_receiveBuffer		= self->m_receiveBuffer;						// store pointer to register
 8004702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004704:	3308      	adds	r3, #8
 8004706:	623b      	str	r3, [r7, #32]

    const reg m_receivePosReg		= self->m_receivePos;							// store head
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 800470e:	61fb      	str	r3, [r7, #28]
    const reg m_receivePosReg_msk	= m_receivePosReg & (D_RAW_P_RX_BUF_SIZE - 1U); // get head position
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	b2db      	uxtb	r3, r3
 8004714:	61bb      	str	r3, [r7, #24]
    const reg remaining_to_end 		= D_RAW_P_RX_BUF_SIZE - m_receivePosReg_msk; 	// get remaining from head to end
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 800471c:	617b      	str	r3, [r7, #20]

    // do logic --------------------------------------------------------------------------------------
    if(size > remaining_to_end) {
 800471e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	429a      	cmp	r2, r3
 8004724:	d914      	bls.n	8004750 <receiveTransmittSimpleDmaTest+0x146>
    	const reg remaining_n		= size - remaining_to_end;
 8004726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	613b      	str	r3, [r7, #16]
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, remaining_to_end);
 800472e:	6a3a      	ldr	r2, [r7, #32]
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	4413      	add	r3, r2
 8004734:	697a      	ldr	r2, [r7, #20]
 8004736:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004738:	4618      	mov	r0, r3
 800473a:	f003 fde8 	bl	800830e <memcpy>
    	memcpy(m_receiveBuffer, arr + remaining_to_end, remaining_n);
 800473e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	4413      	add	r3, r2
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4619      	mov	r1, r3
 8004748:	6a38      	ldr	r0, [r7, #32]
 800474a:	f003 fde0 	bl	800830e <memcpy>
 800474e:	e007      	b.n	8004760 <receiveTransmittSimpleDmaTest+0x156>
    } else {
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, size);
 8004750:	6a3a      	ldr	r2, [r7, #32]
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	4413      	add	r3, r2
 8004756:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004758:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800475a:	4618      	mov	r0, r3
 800475c:	f003 fdd7 	bl	800830e <memcpy>
    }

    // save position to memory ------------------------------------------------------------------------
    self->m_receivePos = (m_receivePosReg + size);
 8004760:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	441a      	add	r2, r3
 8004766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004768:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
 800476c:	e000      	b.n	8004770 <receiveTransmittSimpleDmaTest+0x166>
    	return;
 800476e:	bf00      	nop

    Rxframe = RawParser_dma_proceed(desc);
 8004770:	68f8      	ldr	r0, [r7, #12]
 8004772:	f000 ff1d 	bl	80055b0 <RawParser_dma_proceed>
 8004776:	6438      	str	r0, [r7, #64]	@ 0x40
    if(Rxframe && Rxframe->size != 0) {
 8004778:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800477a:	2b00      	cmp	r3, #0
 800477c:	d018      	beq.n	80047b0 <receiveTransmittSimpleDmaTest+0x1a6>
 800477e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d014      	beq.n	80047b0 <receiveTransmittSimpleDmaTest+0x1a6>
        if(Rxframe->size != size) {
 8004786:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	687a      	ldr	r2, [r7, #4]
 800478c:	429a      	cmp	r2, r3
 800478e:	d003      	beq.n	8004798 <receiveTransmittSimpleDmaTest+0x18e>
            byteReceiveCompl++;
 8004790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004792:	3301      	adds	r3, #1
 8004794:	657b      	str	r3, [r7, #84]	@ 0x54
        if(Rxframe->size != size) {
 8004796:	e00e      	b.n	80047b6 <receiveTransmittSimpleDmaTest+0x1ac>
        } else {
            arrReceiveCompl += cTypeStrnCmp(size, (c8*)data, (c8*)Rxframe->data);
 8004798:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	461a      	mov	r2, r3
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f7ff ff09 	bl	80045b8 <cTypeStrnCmp>
 80047a6:	4602      	mov	r2, r0
 80047a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047aa:	4413      	add	r3, r2
 80047ac:	653b      	str	r3, [r7, #80]	@ 0x50
        if(Rxframe->size != size) {
 80047ae:	e002      	b.n	80047b6 <receiveTransmittSimpleDmaTest+0x1ac>
        }
    } else {
        arrReceiveCompl++;
 80047b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047b2:	3301      	adds	r3, #1
 80047b4:	653b      	str	r3, [r7, #80]	@ 0x50
    }

    reg last = 0;
 80047b6:	2300      	movs	r3, #0
 80047b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (last < size) {
 80047ba:	e005      	b.n	80047c8 <receiveTransmittSimpleDmaTest+0x1be>
        RawParser_dma_proceed(desc);
 80047bc:	68f8      	ldr	r0, [r7, #12]
 80047be:	f000 fef7 	bl	80055b0 <RawParser_dma_proceed>
        ++last;
 80047c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80047c4:	3301      	adds	r3, #1
 80047c6:	64bb      	str	r3, [r7, #72]	@ 0x48
    while (last < size) {
 80047c8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d3f5      	bcc.n	80047bc <receiveTransmittSimpleDmaTest+0x1b2>
    }

    return byteReceiveCompl + arrReceiveCompl;
 80047d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80047d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80047d4:	4413      	add	r3, r2
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3758      	adds	r7, #88	@ 0x58
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <receiveTransmittCollisionsDmaTest>:
 * SIMPLE COLLISION TEST (MAY BE DISABLE SMART ASSERSTS ???)
 *
 */

static int receiveTransmittCollisionsDmaTest(RawParser_dma_t* desc, u8 * data, reg size)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b098      	sub	sp, #96	@ 0x60
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	60f8      	str	r0, [r7, #12]
 80047e6:	60b9      	str	r1, [r7, #8]
 80047e8:	607a      	str	r2, [r7, #4]
    int byteCollisisons = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    int arrCollisisons = 0;
 80047ee:	2300      	movs	r3, #0
 80047f0:	65bb      	str	r3, [r7, #88]	@ 0x58

    RawParser_Frame_t* Txframe = RawParser_dma_shieldFrame(desc, data, size);
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	68b9      	ldr	r1, [r7, #8]
 80047f6:	68f8      	ldr	r0, [r7, #12]
 80047f8:	f000 ff9c 	bl	8005734 <RawParser_dma_shieldFrame>
 80047fc:	64b8      	str	r0, [r7, #72]	@ 0x48

    if(Txframe == NULL) {
 80047fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004800:	2b00      	cmp	r3, #0
 8004802:	d101      	bne.n	8004808 <receiveTransmittCollisionsDmaTest+0x2a>
        return 1;
 8004804:	2301      	movs	r3, #1
 8004806:	e105      	b.n	8004a14 <receiveTransmittCollisionsDmaTest+0x236>
    }

    reg lenBreak = rand() % size;
 8004808:	f002 fb10 	bl	8006e2c <rand>
 800480c:	4603      	mov	r3, r0
 800480e:	687a      	ldr	r2, [r7, #4]
 8004810:	fbb3 f2f2 	udiv	r2, r3, r2
 8004814:	6879      	ldr	r1, [r7, #4]
 8004816:	fb01 f202 	mul.w	r2, r1, r2
 800481a:	1a9b      	subs	r3, r3, r2
 800481c:	647b      	str	r3, [r7, #68]	@ 0x44

    // replace data (emulate real glitches)
    c8 b_rand = rand() % 256;
 800481e:	f002 fb05 	bl	8006e2c <rand>
 8004822:	4603      	mov	r3, r0
 8004824:	425a      	negs	r2, r3
 8004826:	b2db      	uxtb	r3, r3
 8004828:	b2d2      	uxtb	r2, r2
 800482a:	bf58      	it	pl
 800482c:	4253      	negpl	r3, r2
 800482e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    while(Txframe->data[lenBreak] == b_rand) {
 8004832:	e009      	b.n	8004848 <receiveTransmittCollisionsDmaTest+0x6a>
        b_rand = rand() % 256;
 8004834:	f002 fafa 	bl	8006e2c <rand>
 8004838:	4603      	mov	r3, r0
 800483a:	425a      	negs	r2, r3
 800483c:	b2db      	uxtb	r3, r3
 800483e:	b2d2      	uxtb	r2, r2
 8004840:	bf58      	it	pl
 8004842:	4253      	negpl	r3, r2
 8004844:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    while(Txframe->data[lenBreak] == b_rand) {
 8004848:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800484e:	4413      	add	r3, r2
 8004850:	781b      	ldrb	r3, [r3, #0]
 8004852:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004856:	429a      	cmp	r2, r3
 8004858:	d0ec      	beq.n	8004834 <receiveTransmittCollisionsDmaTest+0x56>
    }
    Txframe->data[lenBreak] = b_rand;
 800485a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004860:	4413      	add	r3, r2
 8004862:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004866:	701a      	strb	r2, [r3, #0]


    for(reg i = 0; i < Txframe->size; ++i) {
 8004868:	2300      	movs	r3, #0
 800486a:	653b      	str	r3, [r7, #80]	@ 0x50
 800486c:	e020      	b.n	80048b0 <receiveTransmittCollisionsDmaTest+0xd2>
        RawParser_dma_receiveByte(desc, Txframe->data[i]);
 800486e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004874:	4413      	add	r3, r2
 8004876:	781a      	ldrb	r2, [r3, #0]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487c:	4613      	mov	r3, r2
 800487e:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8004882:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004884:	3308      	adds	r3, #8
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
    const reg m_receivePos      = self->m_receivePos;
 8004888:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800488a:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 800488e:	633b      	str	r3, [r7, #48]	@ 0x30
    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	b2db      	uxtb	r3, r3
 8004894:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004896:	4413      	add	r3, r2
 8004898:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800489c:	701a      	strb	r2, [r3, #0]
    self->m_receivePos = m_receivePos + 1U;
 800489e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a0:	1c5a      	adds	r2, r3, #1
 80048a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a4:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 80048a8:	bf00      	nop
    for(reg i = 0; i < Txframe->size; ++i) {
 80048aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80048ac:	3301      	adds	r3, #1
 80048ae:	653b      	str	r3, [r7, #80]	@ 0x50
 80048b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048b2:	685b      	ldr	r3, [r3, #4]
 80048b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d3d9      	bcc.n	800486e <receiveTransmittCollisionsDmaTest+0x90>
    }


    // ------------- one byte pushing test---------------------------------------
    RawParser_Frame_t* Rxframe = RawParser_dma_proceed(desc);
 80048ba:	68f8      	ldr	r0, [r7, #12]
 80048bc:	f000 fe78 	bl	80055b0 <RawParser_dma_proceed>
 80048c0:	6438      	str	r0, [r7, #64]	@ 0x40

    if(Rxframe && Rxframe->size != 0) {
 80048c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d006      	beq.n	80048d6 <receiveTransmittCollisionsDmaTest+0xf8>
 80048c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d002      	beq.n	80048d6 <receiveTransmittCollisionsDmaTest+0xf8>
        byteCollisisons++;
 80048d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80048d2:	3301      	adds	r3, #1
 80048d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    }

    Txframe->size = 0;
 80048d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048d8:	2200      	movs	r2, #0
 80048da:	605a      	str	r2, [r3, #4]

    // ------------- all byte pushing test---------------------------------------
    Txframe = RawParser_dma_shieldFrame(desc, data, size);
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	68b9      	ldr	r1, [r7, #8]
 80048e0:	68f8      	ldr	r0, [r7, #12]
 80048e2:	f000 ff27 	bl	8005734 <RawParser_dma_shieldFrame>
 80048e6:	64b8      	str	r0, [r7, #72]	@ 0x48

    if(Txframe == NULL) {
 80048e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <receiveTransmittCollisionsDmaTest+0x114>
        return 1;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e090      	b.n	8004a14 <receiveTransmittCollisionsDmaTest+0x236>
    }

    lenBreak = rand() % size;
 80048f2:	f002 fa9b 	bl	8006e2c <rand>
 80048f6:	4603      	mov	r3, r0
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80048fe:	6879      	ldr	r1, [r7, #4]
 8004900:	fb01 f202 	mul.w	r2, r1, r2
 8004904:	1a9b      	subs	r3, r3, r2
 8004906:	647b      	str	r3, [r7, #68]	@ 0x44

    b_rand = rand() % 256;
 8004908:	f002 fa90 	bl	8006e2c <rand>
 800490c:	4603      	mov	r3, r0
 800490e:	425a      	negs	r2, r3
 8004910:	b2db      	uxtb	r3, r3
 8004912:	b2d2      	uxtb	r2, r2
 8004914:	bf58      	it	pl
 8004916:	4253      	negpl	r3, r2
 8004918:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    while(Txframe->data[lenBreak] == b_rand) {
 800491c:	e009      	b.n	8004932 <receiveTransmittCollisionsDmaTest+0x154>
        b_rand = rand() % 256;
 800491e:	f002 fa85 	bl	8006e2c <rand>
 8004922:	4603      	mov	r3, r0
 8004924:	425a      	negs	r2, r3
 8004926:	b2db      	uxtb	r3, r3
 8004928:	b2d2      	uxtb	r2, r2
 800492a:	bf58      	it	pl
 800492c:	4253      	negpl	r3, r2
 800492e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    while(Txframe->data[lenBreak] == b_rand) {
 8004932:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004934:	681a      	ldr	r2, [r3, #0]
 8004936:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004938:	4413      	add	r3, r2
 800493a:	781b      	ldrb	r3, [r3, #0]
 800493c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004940:	429a      	cmp	r2, r3
 8004942:	d0ec      	beq.n	800491e <receiveTransmittCollisionsDmaTest+0x140>
    }
    Txframe->data[lenBreak] = b_rand;
 8004944:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800494a:	4413      	add	r3, r2
 800494c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8004950:	701a      	strb	r2, [r3, #0]


    RawParser_dma_receiveArray(desc, Txframe->data, Txframe->size);
 8004952:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800495e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004960:	627b      	str	r3, [r7, #36]	@ 0x24
    if(size > D_RAW_P_RX_BUF_SIZE) {
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004968:	d835      	bhi.n	80049d6 <receiveTransmittCollisionsDmaTest+0x1f8>
    u8* const m_receiveBuffer		= self->m_receiveBuffer;						// store pointer to register
 800496a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800496c:	3308      	adds	r3, #8
 800496e:	623b      	str	r3, [r7, #32]
    const reg m_receivePosReg		= self->m_receivePos;							// store head
 8004970:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004972:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 8004976:	61fb      	str	r3, [r7, #28]
    const reg m_receivePosReg_msk	= m_receivePosReg & (D_RAW_P_RX_BUF_SIZE - 1U); // get head position
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	61bb      	str	r3, [r7, #24]
    const reg remaining_to_end 		= D_RAW_P_RX_BUF_SIZE - m_receivePosReg_msk; 	// get remaining from head to end
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004984:	617b      	str	r3, [r7, #20]
    if(size > remaining_to_end) {
 8004986:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004988:	697b      	ldr	r3, [r7, #20]
 800498a:	429a      	cmp	r2, r3
 800498c:	d914      	bls.n	80049b8 <receiveTransmittCollisionsDmaTest+0x1da>
    	const reg remaining_n		= size - remaining_to_end;
 800498e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004990:	697b      	ldr	r3, [r7, #20]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	613b      	str	r3, [r7, #16]
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, remaining_to_end);
 8004996:	6a3a      	ldr	r2, [r7, #32]
 8004998:	69bb      	ldr	r3, [r7, #24]
 800499a:	4413      	add	r3, r2
 800499c:	697a      	ldr	r2, [r7, #20]
 800499e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049a0:	4618      	mov	r0, r3
 80049a2:	f003 fcb4 	bl	800830e <memcpy>
    	memcpy(m_receiveBuffer, arr + remaining_to_end, remaining_n);
 80049a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	4413      	add	r3, r2
 80049ac:	693a      	ldr	r2, [r7, #16]
 80049ae:	4619      	mov	r1, r3
 80049b0:	6a38      	ldr	r0, [r7, #32]
 80049b2:	f003 fcac 	bl	800830e <memcpy>
 80049b6:	e007      	b.n	80049c8 <receiveTransmittCollisionsDmaTest+0x1ea>
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, size);
 80049b8:	6a3a      	ldr	r2, [r7, #32]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	4413      	add	r3, r2
 80049be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049c2:	4618      	mov	r0, r3
 80049c4:	f003 fca3 	bl	800830e <memcpy>
    self->m_receivePos = (m_receivePosReg + size);
 80049c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	441a      	add	r2, r3
 80049ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049d0:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
 80049d4:	e000      	b.n	80049d8 <receiveTransmittCollisionsDmaTest+0x1fa>
    	return;
 80049d6:	bf00      	nop

    Rxframe = RawParser_dma_proceed(desc);
 80049d8:	68f8      	ldr	r0, [r7, #12]
 80049da:	f000 fde9 	bl	80055b0 <RawParser_dma_proceed>
 80049de:	6438      	str	r0, [r7, #64]	@ 0x40
    if(Rxframe && Rxframe->size != 0) {
 80049e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <receiveTransmittCollisionsDmaTest+0x216>
 80049e6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d002      	beq.n	80049f4 <receiveTransmittCollisionsDmaTest+0x216>
        arrCollisisons++;
 80049ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80049f0:	3301      	adds	r3, #1
 80049f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    }

    reg last = 0;
 80049f4:	2300      	movs	r3, #0
 80049f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (last < size) {
 80049f8:	e005      	b.n	8004a06 <receiveTransmittCollisionsDmaTest+0x228>
        RawParser_dma_proceed(desc);
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fdd8 	bl	80055b0 <RawParser_dma_proceed>
        ++last;
 8004a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a02:	3301      	adds	r3, #1
 8004a04:	64fb      	str	r3, [r7, #76]	@ 0x4c
    while (last < size) {
 8004a06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d3f5      	bcc.n	80049fa <receiveTransmittCollisionsDmaTest+0x21c>
    }

    return byteCollisisons + arrCollisisons;
 8004a0e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004a10:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004a12:	4413      	add	r3, r2
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3760      	adds	r7, #96	@ 0x60
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <receiveTransmittMacroWriteReadDmaTest>:
 * MACRO WRITE / READ TEST
 *
 */

static int receiveTransmittMacroWriteReadDmaTest(RawParser_dma_t* desc, int randTestCount)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b0b4      	sub	sp, #208	@ 0xd0
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
 8004a24:	6039      	str	r1, [r7, #0]
#define RAW_P_DMA_TEST_ARR_SIZE 10
    int byteReceiveCompl = 0;
 8004a26:	2300      	movs	r3, #0
 8004a28:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc

    printf("\n\n ---------------------------RAW PARSER DMA MACRO (FAST) ------------------------\n");
 8004a2c:	48c5      	ldr	r0, [pc, #788]	@ (8004d44 <receiveTransmittMacroWriteReadDmaTest+0x328>)
 8004a2e:	f003 fa93 	bl	8007f58 <puts>

    while(randTestCount--) {
 8004a32:	e175      	b.n	8004d20 <receiveTransmittMacroWriteReadDmaTest+0x304>


        // randomization --------------------------------------------------------------------------------------
        i32 a = rand();
 8004a34:	f002 f9fa 	bl	8006e2c <rand>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
        reg b = rand();
 8004a3e:	f002 f9f5 	bl	8006e2c <rand>
 8004a42:	4603      	mov	r3, r0
 8004a44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        u16 c = rand();
 8004a48:	f002 f9f0 	bl	8006e2c <rand>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
        u8  d = rand();
 8004a54:	f002 f9ea 	bl	8006e2c <rand>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	f887 3085 	strb.w	r3, [r7, #133]	@ 0x85
        i32 inner = rand();
 8004a60:	f002 f9e4 	bl	8006e2c <rand>
 8004a64:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0
        u32 arr1[RAW_P_DMA_TEST_ARR_SIZE];

        u8 arr2[RAW_P_DMA_TEST_ARR_SIZE];
        u8 * arr3_ptr = arr2;
 8004a68:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8004a6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

        for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004a70:	2300      	movs	r3, #0
 8004a72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a76:	e01a      	b.n	8004aae <receiveTransmittMacroWriteReadDmaTest+0x92>
            arr1[i] = rand();
 8004a78:	f002 f9d8 	bl	8006e2c <rand>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	461a      	mov	r2, r3
 8004a80:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	33d0      	adds	r3, #208	@ 0xd0
 8004a88:	443b      	add	r3, r7
 8004a8a:	f843 2cc8 	str.w	r2, [r3, #-200]
            arr2[i] = rand();
 8004a8e:	f002 f9cd 	bl	8006e2c <rand>
 8004a92:	4603      	mov	r3, r0
 8004a94:	b2d9      	uxtb	r1, r3
 8004a96:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 8004a9a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004a9e:	4413      	add	r3, r2
 8004aa0:	460a      	mov	r2, r1
 8004aa2:	701a      	strb	r2, [r3, #0]
        for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004aa4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004aae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004ab2:	2b09      	cmp	r3, #9
 8004ab4:	dde0      	ble.n	8004a78 <receiveTransmittMacroWriteReadDmaTest+0x5c>
        }



        // transmitting packet -------------------------------------------------------------------------------
        RawParser_Frame_t* Txframe = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
        reg totSize;

        WRITE_PAYLOAD_MACRO(RawParser_dma_universalWrite, desc, {
 8004abc:	2341      	movs	r3, #65	@ 0x41
 8004abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ac2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 fe7c 	bl	80057c4 <RawParser_dma_startTransmittPacket>
 8004acc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ad0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ad4:	f107 038c 	add.w	r3, r7, #140	@ 0x8c
 8004ad8:	2204      	movs	r2, #4
 8004ada:	2104      	movs	r1, #4
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 ff23 	bl	8005928 <RawParser_dma_universalWrite>
 8004ae2:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004ae6:	2204      	movs	r2, #4
 8004ae8:	2104      	movs	r1, #4
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f000 ff1c 	bl	8005928 <RawParser_dma_universalWrite>
 8004af0:	f107 0386 	add.w	r3, r7, #134	@ 0x86
 8004af4:	2202      	movs	r2, #2
 8004af6:	2102      	movs	r1, #2
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f000 ff15 	bl	8005928 <RawParser_dma_universalWrite>
 8004afe:	f107 0385 	add.w	r3, r7, #133	@ 0x85
 8004b02:	2201      	movs	r2, #1
 8004b04:	2101      	movs	r1, #1
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f000 ff0e 	bl	8005928 <RawParser_dma_universalWrite>
 8004b0c:	f107 0308 	add.w	r3, r7, #8
 8004b10:	2204      	movs	r2, #4
 8004b12:	2128      	movs	r1, #40	@ 0x28
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f000 ff07 	bl	8005928 <RawParser_dma_universalWrite>
 8004b1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004b1e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b20:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8004b24:	2204      	movs	r2, #4
 8004b26:	2104      	movs	r1, #4
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 fefd 	bl	8005928 <RawParser_dma_universalWrite>
 8004b2e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8004b32:	2201      	movs	r2, #1
 8004b34:	210a      	movs	r1, #10
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 fef6 	bl	8005928 <RawParser_dma_universalWrite>
 8004b3c:	6878      	ldr	r0, [r7, #4]
 8004b3e:	f000 feb7 	bl	80058b0 <RawParser_dma_finishTransmittPacket>
 8004b42:	f8c7 00b8 	str.w	r0, [r7, #184]	@ 0xb8
                                totSize = totalSize;
                            }, {
                                Txframe = RawParser_dma_finishTransmittPacket(desc);
                            }, a, b, c, d, $STATIC_ARRAY, arr1, $CONST, inner, i32, $POINTER, 10, arr3_ptr);

        if(Txframe == NULL) {
 8004b46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d101      	bne.n	8004b52 <receiveTransmittMacroWriteReadDmaTest+0x136>
            return 1;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e0f3      	b.n	8004d3a <receiveTransmittMacroWriteReadDmaTest+0x31e>
        }

        for(reg i = 0; i < Txframe->size; ++i) {
 8004b52:	2300      	movs	r3, #0
 8004b54:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004b58:	e02d      	b.n	8004bb6 <receiveTransmittMacroWriteReadDmaTest+0x19a>
            RawParser_dma_receiveByte(desc, Txframe->data[i]);
 8004b5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004b64:	4413      	add	r3, r2
 8004b66:	781a      	ldrb	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b6e:	4613      	mov	r3, r2
 8004b70:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8004b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b78:	3308      	adds	r3, #8
 8004b7a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const reg m_receivePos      = self->m_receivePos;
 8004b7e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004b82:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 8004b86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8004b8a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004b94:	4413      	add	r3, r2
 8004b96:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8004b9a:	701a      	strb	r2, [r3, #0]
    self->m_receivePos = m_receivePos + 1U;
 8004b9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8004ba0:	1c5a      	adds	r2, r3, #1
 8004ba2:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004ba6:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 8004baa:	bf00      	nop
        for(reg i = 0; i < Txframe->size; ++i) {
 8004bac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004bb0:	3301      	adds	r3, #1
 8004bb2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d3ca      	bcc.n	8004b5a <receiveTransmittMacroWriteReadDmaTest+0x13e>
        }

        // receiving packet -------------------------------------------------------------------------------
        i32 CHK_a = 0;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	677b      	str	r3, [r7, #116]	@ 0x74
        reg CHK_b = 0;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	673b      	str	r3, [r7, #112]	@ 0x70
        u16 CHK_c = 0;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
        u8  CHK_d = 0;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	f887 306d 	strb.w	r3, [r7, #109]	@ 0x6d
        i32 CHK_inner = 0;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
        u32 CHK_arr1[RAW_P_DMA_TEST_ARR_SIZE];

        u8 CHK_arr2[RAW_P_DMA_TEST_ARR_SIZE];
        u8 * CHK_arr3_ptr = CHK_arr2;
 8004bde:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8004be2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

        RawParser_Frame_t* Rxframe = RawParser_dma_proceed(desc);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 fce2 	bl	80055b0 <RawParser_dma_proceed>
 8004bec:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4

        if(Rxframe && Rxframe->size != 0) {
 8004bf0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f000 808e 	beq.w	8004d16 <receiveTransmittMacroWriteReadDmaTest+0x2fa>
 8004bfa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	f000 8088 	beq.w	8004d16 <receiveTransmittMacroWriteReadDmaTest+0x2fa>
            if(totSize != Rxframe->size) {
 8004c06:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d005      	beq.n	8004c20 <receiveTransmittMacroWriteReadDmaTest+0x204>
                byteReceiveCompl++;
 8004c14:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004c18:	3301      	adds	r3, #1
 8004c1a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            if(totSize != Rxframe->size) {
 8004c1e:	e07f      	b.n	8004d20 <receiveTransmittMacroWriteReadDmaTest+0x304>
            } else {
                READ_PAYLOAD_MACRO(RawParser_dma_universalRead, desc, {
 8004c20:	2341      	movs	r3, #65	@ 0x41
 8004c22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
 8004c2e:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8004c32:	2204      	movs	r2, #4
 8004c34:	2104      	movs	r1, #4
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 feb8 	bl	80059ac <RawParser_dma_universalRead>
 8004c3c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8004c40:	2204      	movs	r2, #4
 8004c42:	2104      	movs	r1, #4
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f000 feb1 	bl	80059ac <RawParser_dma_universalRead>
 8004c4a:	f107 036e 	add.w	r3, r7, #110	@ 0x6e
 8004c4e:	2202      	movs	r2, #2
 8004c50:	2102      	movs	r1, #2
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 feaa 	bl	80059ac <RawParser_dma_universalRead>
 8004c58:	f107 036d 	add.w	r3, r7, #109	@ 0x6d
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	2101      	movs	r1, #1
 8004c60:	6878      	ldr	r0, [r7, #4]
 8004c62:	f000 fea3 	bl	80059ac <RawParser_dma_universalRead>
 8004c66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004c6a:	2204      	movs	r2, #4
 8004c6c:	2128      	movs	r1, #40	@ 0x28
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 fe9c 	bl	80059ac <RawParser_dma_universalRead>
 8004c74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c78:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004c7a:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004c7e:	2204      	movs	r2, #4
 8004c80:	2104      	movs	r1, #4
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 fe92 	bl	80059ac <RawParser_dma_universalRead>
 8004c88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	210a      	movs	r1, #10
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 fe8b 	bl	80059ac <RawParser_dma_universalRead>
 8004c96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
                                       desc->uniRXPosition = 0;
                                   }, {
                                       CHK_inner = const_5;
                                   }, CHK_a, CHK_b, CHK_c, CHK_d, $STATIC_ARRAY, CHK_arr1, $CONST, inner, i32, $POINTER, RAW_P_DMA_TEST_ARR_SIZE, CHK_arr3_ptr);

                if(CHK_a != a || CHK_b != b || CHK_c != c || CHK_d != d || CHK_inner != inner) {
 8004c9c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004c9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	d116      	bne.n	8004cd4 <receiveTransmittMacroWriteReadDmaTest+0x2b8>
 8004ca6:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8004ca8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d111      	bne.n	8004cd4 <receiveTransmittMacroWriteReadDmaTest+0x2b8>
 8004cb0:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8004cb4:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d10b      	bne.n	8004cd4 <receiveTransmittMacroWriteReadDmaTest+0x2b8>
 8004cbc:	f897 206d 	ldrb.w	r2, [r7, #109]	@ 0x6d
 8004cc0:	f897 3085 	ldrb.w	r3, [r7, #133]	@ 0x85
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d105      	bne.n	8004cd4 <receiveTransmittMacroWriteReadDmaTest+0x2b8>
 8004cc8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ccc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d004      	beq.n	8004cde <receiveTransmittMacroWriteReadDmaTest+0x2c2>
                    byteReceiveCompl++;
 8004cd4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cd8:	3301      	adds	r3, #1
 8004cda:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                }

                byteReceiveCompl += cTypeStrnCmp(RAW_P_DMA_TEST_ARR_SIZE, (c8*)CHK_arr1, (c8*)arr1);
 8004cde:	f107 0208 	add.w	r2, r7, #8
 8004ce2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8004ce6:	4619      	mov	r1, r3
 8004ce8:	200a      	movs	r0, #10
 8004cea:	f7ff fc65 	bl	80045b8 <cTypeStrnCmp>
 8004cee:	4602      	mov	r2, r0
 8004cf0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
                byteReceiveCompl += cTypeStrnCmp(RAW_P_DMA_TEST_ARR_SIZE, (c8*)CHK_arr3_ptr, (c8*)arr3_ptr);
 8004cfa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8004cfe:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 8004d02:	200a      	movs	r0, #10
 8004d04:	f7ff fc58 	bl	80045b8 <cTypeStrnCmp>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d0e:	4413      	add	r3, r2
 8004d10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            if(totSize != Rxframe->size) {
 8004d14:	e004      	b.n	8004d20 <receiveTransmittMacroWriteReadDmaTest+0x304>
            }


        } else {
            byteReceiveCompl++;
 8004d16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    while(randTestCount--) {
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	1e5a      	subs	r2, r3, #1
 8004d24:	603a      	str	r2, [r7, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	f47f ae84 	bne.w	8004a34 <receiveTransmittMacroWriteReadDmaTest+0x18>
        }
    }

#undef RAW_P_DMA_TEST_ARR_SIZE

    printf("\ntest exit with error: %d\n---------------------------RAW PARSER DMA MACRO (FAST) END ------------------------\n", byteReceiveCompl);
 8004d2c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	@ 0xcc
 8004d30:	4805      	ldr	r0, [pc, #20]	@ (8004d48 <receiveTransmittMacroWriteReadDmaTest+0x32c>)
 8004d32:	f003 f875 	bl	8007e20 <iprintf>
    return byteReceiveCompl;
 8004d36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	37d0      	adds	r7, #208	@ 0xd0
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	08009e98 	.word	0x08009e98
 8004d48:	08009eec 	.word	0x08009eec

08004d4c <receiveTransmittConvertDmaTest>:
 * CONVERT WRITE / READ TEST
 *
 */

static int receiveTransmittConvertDmaTest(RawParser_dma_t* desc, int randTestCount)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b0ea      	sub	sp, #424	@ 0x1a8
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004d56:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004d5a:	6018      	str	r0, [r3, #0]
 8004d5c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004d60:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8004d64:	6019      	str	r1, [r3, #0]
#define RAW_P_DMA_TEST_ARR_SIZE 10
    int byteReceiveCompl = 0;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

    printf("\n\n ---------------------------RAW PARSER DMA CONVERT (SLOW) ------------------------\n");
 8004d6c:	48ce      	ldr	r0, [pc, #824]	@ (80050a8 <receiveTransmittConvertDmaTest+0x35c>)
 8004d6e:	f003 f8f3 	bl	8007f58 <puts>

    while(randTestCount--) {
 8004d72:	e17e      	b.n	8005072 <receiveTransmittConvertDmaTest+0x326>
        // randomization --------------------------------------------------------------------------------------
        i32 a = rand();
 8004d74:	f002 f85a 	bl	8006e2c <rand>
 8004d78:	f8c7 0190 	str.w	r0, [r7, #400]	@ 0x190
        reg b = rand();
 8004d7c:	f002 f856 	bl	8006e2c <rand>
 8004d80:	4603      	mov	r3, r0
 8004d82:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
        u16 c = rand();
 8004d86:	f002 f851 	bl	8006e2c <rand>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	f8a7 318a 	strh.w	r3, [r7, #394]	@ 0x18a
        u8  d = rand();
 8004d90:	f002 f84c 	bl	8006e2c <rand>
 8004d94:	4603      	mov	r3, r0
 8004d96:	f887 3189 	strb.w	r3, [r7, #393]	@ 0x189
        i32 inner = rand();
 8004d9a:	f002 f847 	bl	8006e2c <rand>
 8004d9e:	f8c7 0184 	str.w	r0, [r7, #388]	@ 0x184
        u32 arr1[RAW_P_DMA_TEST_ARR_SIZE];

        for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004da2:	2300      	movs	r3, #0
 8004da4:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004da8:	e010      	b.n	8004dcc <receiveTransmittConvertDmaTest+0x80>
            arr1[i] = rand();
 8004daa:	f002 f83f 	bl	8006e2c <rand>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4619      	mov	r1, r3
 8004db2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004db6:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004dba:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8004dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004dc2:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8004dcc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8004dd0:	2b09      	cmp	r3, #9
 8004dd2:	ddea      	ble.n	8004daa <receiveTransmittConvertDmaTest+0x5e>
        }


        // transmitting packet -------------------------------------------------------------------------------
        u8 buffdata [D_RAW_P_TX_BUF_SIZE];
        reg pos = 0;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
        TEMPLATE(CAT_ENDIAN(convertWrite), i32)(buffdata, &pos, a);
 8004dda:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004dde:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004de2:	f8d7 2190 	ldr.w	r2, [r7, #400]	@ 0x190
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7ff fb84 	bl	80044f4 <convertWrite_LSB_i32>
        TEMPLATE(CAT_ENDIAN(convertWrite), reg)(buffdata, &pos, b);
 8004dec:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004df0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004df4:	f8d7 218c 	ldr.w	r2, [r7, #396]	@ 0x18c
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f7ff fbad 	bl	8004558 <convertWrite_LSB_reg>
        TEMPLATE(CAT_ENDIAN(convertWrite), u16)(buffdata, &pos, c);
 8004dfe:	f8b7 218a 	ldrh.w	r2, [r7, #394]	@ 0x18a
 8004e02:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004e06:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f7ff fb0d 	bl	800442a <convertWrite_LSB_u16>
        TEMPLATE(CAT_ENDIAN(convertWrite), u8 )(buffdata, &pos, d);
 8004e10:	f897 2189 	ldrb.w	r2, [r7, #393]	@ 0x189
 8004e14:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004e18:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff fad0 	bl	80043c2 <convertWrite_LSB_u8>
        TEMPLATE(CAT_ENDIAN(convertWrite), i32)(buffdata, &pos, inner);
 8004e22:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004e26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004e2a:	f8d7 2184 	ldr.w	r2, [r7, #388]	@ 0x184
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f7ff fb60 	bl	80044f4 <convertWrite_LSB_i32>

        for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004e34:	2300      	movs	r3, #0
 8004e36:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004e3a:	e013      	b.n	8004e64 <receiveTransmittConvertDmaTest+0x118>
            TEMPLATE(CAT_ENDIAN(convertWrite), u32)(buffdata, &pos, arr1[i]);
 8004e3c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004e40:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8004e44:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8004e48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004e4c:	f507 71ac 	add.w	r1, r7, #344	@ 0x158
 8004e50:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8004e54:	4618      	mov	r0, r3
 8004e56:	f7ff fb1b 	bl	8004490 <convertWrite_LSB_u32>
        for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004e5a:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004e5e:	3301      	adds	r3, #1
 8004e60:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8004e64:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8004e68:	2b09      	cmp	r3, #9
 8004e6a:	dde7      	ble.n	8004e3c <receiveTransmittConvertDmaTest+0xf0>
        }

        RawParser_Frame_t* Txframe = RawParser_dma_shieldFrame(desc, buffdata, pos);
 8004e6c:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8004e70:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8004e74:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004e78:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	f000 fc59 	bl	8005734 <RawParser_dma_shieldFrame>
 8004e82:	f8c7 0180 	str.w	r0, [r7, #384]	@ 0x180

        if(Txframe == NULL) {
 8004e86:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <receiveTransmittConvertDmaTest+0x146>
            return 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e104      	b.n	800509c <receiveTransmittConvertDmaTest+0x350>
        }

        for(reg i = 0; i < Txframe->size; ++i) {
 8004e92:	2300      	movs	r3, #0
 8004e94:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004e98:	e031      	b.n	8004efe <receiveTransmittConvertDmaTest+0x1b2>
            RawParser_dma_receiveByte(desc, Txframe->data[i]);
 8004e9a:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004ea4:	4413      	add	r3, r2
 8004ea6:	781a      	ldrb	r2, [r3, #0]
 8004ea8:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004eac:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	f887 3167 	strb.w	r3, [r7, #359]	@ 0x167
    u8* const m_receiveBuffer   = self->m_receiveBuffer;
 8004ebc:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004ec0:	3308      	adds	r3, #8
 8004ec2:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
    const reg m_receivePos      = self->m_receivePos;
 8004ec6:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004eca:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 8004ece:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
    m_receiveBuffer[m_receivePos & (D_RAW_P_RX_BUF_SIZE - 1U)] = byte;
 8004ed2:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f8d7 2160 	ldr.w	r2, [r7, #352]	@ 0x160
 8004edc:	4413      	add	r3, r2
 8004ede:	f897 2167 	ldrb.w	r2, [r7, #359]	@ 0x167
 8004ee2:	701a      	strb	r2, [r3, #0]
    self->m_receivePos = m_receivePos + 1U;
 8004ee4:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8004eee:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
}
 8004ef2:	bf00      	nop
        for(reg i = 0; i < Txframe->size; ++i) {
 8004ef4:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8004ef8:	3301      	adds	r3, #1
 8004efa:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198
 8004efe:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d3c6      	bcc.n	8004e9a <receiveTransmittConvertDmaTest+0x14e>
        }

        // receiving packet -------------------------------------------------------------------------------
        RawParser_Frame_t* Rxframe = RawParser_dma_proceed(desc);
 8004f0c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004f10:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8004f14:	6818      	ldr	r0, [r3, #0]
 8004f16:	f000 fb4b 	bl	80055b0 <RawParser_dma_proceed>
 8004f1a:	f8c7 017c 	str.w	r0, [r7, #380]	@ 0x17c

        if(Rxframe && Rxframe->size != 0) {
 8004f1e:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	f000 80a0 	beq.w	8005068 <receiveTransmittConvertDmaTest+0x31c>
 8004f28:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	f000 809a 	beq.w	8005068 <receiveTransmittConvertDmaTest+0x31c>

            if(pos != Rxframe->size) {
 8004f34:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d005      	beq.n	8004f4e <receiveTransmittConvertDmaTest+0x202>
                byteReceiveCompl++;
 8004f42:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8004f46:	3301      	adds	r3, #1
 8004f48:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
            if(pos != Rxframe->size) {
 8004f4c:	e091      	b.n	8005072 <receiveTransmittConvertDmaTest+0x326>
            } else {

                pos = 0;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158

                i32 CHK_a = TEMPLATE(CAT_ENDIAN(convertRead), i32)(Rxframe->data, &pos);
 8004f54:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f7ff faae 	bl	80044c2 <convertRead_LSB_i32>
 8004f66:	f8c7 0178 	str.w	r0, [r7, #376]	@ 0x178
                reg CHK_b = TEMPLATE(CAT_ENDIAN(convertRead), reg)(Rxframe->data, &pos);
 8004f6a:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004f74:	4611      	mov	r1, r2
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7ff fad5 	bl	8004526 <convertRead_LSB_reg>
 8004f7c:	f8c7 0174 	str.w	r0, [r7, #372]	@ 0x174
                u16 CHK_c = TEMPLATE(CAT_ENDIAN(convertRead), u16)(Rxframe->data, &pos);
 8004f80:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7ff fa32 	bl	80043f6 <convertRead_LSB_u16>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f8a7 3172 	strh.w	r3, [r7, #370]	@ 0x172
                u8  CHK_d = TEMPLATE(CAT_ENDIAN(convertRead), u8 )(Rxframe->data, &pos);
 8004f98:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004fa2:	4611      	mov	r1, r2
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f9f3 	bl	8004390 <convertRead_LSB_u8>
 8004faa:	4603      	mov	r3, r0
 8004fac:	f887 3171 	strb.w	r3, [r7, #369]	@ 0x171
                i32 CHK_inner = TEMPLATE(CAT_ENDIAN(convertRead), i32)(Rxframe->data, &pos);
 8004fb0:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f7ff fa80 	bl	80044c2 <convertRead_LSB_i32>
 8004fc2:	f8c7 016c 	str.w	r0, [r7, #364]	@ 0x16c
                u32 CHK_arr1[RAW_P_DMA_TEST_ARR_SIZE];

                for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004fcc:	e016      	b.n	8004ffc <receiveTransmittConvertDmaTest+0x2b0>
                    CHK_arr1[i] = TEMPLATE(CAT_ENDIAN(convertRead), u32)(Rxframe->data, &pos);
 8004fce:	f8d7 317c 	ldr.w	r3, [r7, #380]	@ 0x17c
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8004fd8:	4611      	mov	r1, r2
 8004fda:	4618      	mov	r0, r3
 8004fdc:	f7ff fa3f 	bl	800445e <convertRead_LSB_u32>
 8004fe0:	4601      	mov	r1, r0
 8004fe2:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8004fe6:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8004fea:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8004fee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                for(int i = 0; i < RAW_P_DMA_TEST_ARR_SIZE; ++i) {
 8004ff2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
 8004ffc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8005000:	2b09      	cmp	r3, #9
 8005002:	dde4      	ble.n	8004fce <receiveTransmittConvertDmaTest+0x282>
                }

                if(CHK_a != a || CHK_b != b || CHK_c != c || CHK_d != d || CHK_inner != inner) {
 8005004:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8005008:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 800500c:	429a      	cmp	r2, r3
 800500e:	d117      	bne.n	8005040 <receiveTransmittConvertDmaTest+0x2f4>
 8005010:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8005014:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8005018:	429a      	cmp	r2, r3
 800501a:	d111      	bne.n	8005040 <receiveTransmittConvertDmaTest+0x2f4>
 800501c:	f8b7 2172 	ldrh.w	r2, [r7, #370]	@ 0x172
 8005020:	f8b7 318a 	ldrh.w	r3, [r7, #394]	@ 0x18a
 8005024:	429a      	cmp	r2, r3
 8005026:	d10b      	bne.n	8005040 <receiveTransmittConvertDmaTest+0x2f4>
 8005028:	f897 2171 	ldrb.w	r2, [r7, #369]	@ 0x171
 800502c:	f897 3189 	ldrb.w	r3, [r7, #393]	@ 0x189
 8005030:	429a      	cmp	r2, r3
 8005032:	d105      	bne.n	8005040 <receiveTransmittConvertDmaTest+0x2f4>
 8005034:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8005038:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800503c:	429a      	cmp	r2, r3
 800503e:	d004      	beq.n	800504a <receiveTransmittConvertDmaTest+0x2fe>
                    byteReceiveCompl++;
 8005040:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005044:	3301      	adds	r3, #1
 8005046:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
                }

                byteReceiveCompl += cTypeStrnCmp(RAW_P_DMA_TEST_ARR_SIZE, (c8*)CHK_arr1, (c8*)arr1);
 800504a:	f107 0208 	add.w	r2, r7, #8
 800504e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8005052:	4619      	mov	r1, r3
 8005054:	200a      	movs	r0, #10
 8005056:	f7ff faaf 	bl	80045b8 <cTypeStrnCmp>
 800505a:	4602      	mov	r2, r0
 800505c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8005060:	4413      	add	r3, r2
 8005062:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
            if(pos != Rxframe->size) {
 8005066:	e004      	b.n	8005072 <receiveTransmittConvertDmaTest+0x326>
            }
        } else {
            byteReceiveCompl++;
 8005068:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800506c:	3301      	adds	r3, #1
 800506e:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
    while(randTestCount--) {
 8005072:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8005076:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f507 72d4 	add.w	r2, r7, #424	@ 0x1a8
 8005080:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8005084:	1e59      	subs	r1, r3, #1
 8005086:	6011      	str	r1, [r2, #0]
 8005088:	2b00      	cmp	r3, #0
 800508a:	f47f ae73 	bne.w	8004d74 <receiveTransmittConvertDmaTest+0x28>
        }
    }

#undef RAW_P_DMA_TEST_ARR_SIZE

    printf("\ntest exit with error: %d\n---------------------------RAW PARSER DMA CONVERT (SLOW) END ------------------------\n", byteReceiveCompl);
 800508e:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8005092:	4806      	ldr	r0, [pc, #24]	@ (80050ac <receiveTransmittConvertDmaTest+0x360>)
 8005094:	f002 fec4 	bl	8007e20 <iprintf>
    return byteReceiveCompl;
 8005098:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
}
 800509c:	4618      	mov	r0, r3
 800509e:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	08009f5c 	.word	0x08009f5c
 80050ac:	08009fb4 	.word	0x08009fb4

080050b0 <rawParserDmaTest>:

int rawParserDmaTest(unsigned int randomSeed, int randTestCount, int collisionTestEna)
{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b08d      	sub	sp, #52	@ 0x34
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
    int errorCounter = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    int collisionCounter = 0;
 80050c0:	2300      	movs	r3, #0
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
    u8 * data = (u8*)calloc(D_RAW_P_TX_BUF_SIZE, sizeof(u8));
 80050c4:	2101      	movs	r1, #1
 80050c6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80050ca:	f001 fda7 	bl	8006c1c <calloc>
 80050ce:	4603      	mov	r3, r0
 80050d0:	617b      	str	r3, [r7, #20]

    for(u32 i = 0; i < D_RAW_P_TX_BUF_SIZE; ++i) {
 80050d2:	2300      	movs	r3, #0
 80050d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050d6:	e008      	b.n	80050ea <rawParserDmaTest+0x3a>
        data[i] = i;
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050dc:	4413      	add	r3, r2
 80050de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050e0:	b2d2      	uxtb	r2, r2
 80050e2:	701a      	strb	r2, [r3, #0]
    for(u32 i = 0; i < D_RAW_P_TX_BUF_SIZE; ++i) {
 80050e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e6:	3301      	adds	r3, #1
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80050ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ec:	2bff      	cmp	r3, #255	@ 0xff
 80050ee:	d9f3      	bls.n	80050d8 <rawParserDmaTest+0x28>
    }

    RawParser_dma_t * prot = rawParser_dma_new(0x1A);
 80050f0:	201a      	movs	r0, #26
 80050f2:	f000 f8d3 	bl	800529c <rawParser_dma_new>
 80050f6:	4603      	mov	r3, r0
 80050f8:	613b      	str	r3, [r7, #16]

    if(prot == NULL) {
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d101      	bne.n	8005104 <rawParserDmaTest+0x54>
        return 1;
 8005100:	2301      	movs	r3, #1
 8005102:	e0b6      	b.n	8005272 <rawParserDmaTest+0x1c2>
    rawParser_dma_setUserBufferTX(prot, m_sendBuffer_external);

#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */


    errorCounter += receiveTransmittSimpleDmaTest(prot, data, 30);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	221e      	movs	r2, #30
 8005108:	6979      	ldr	r1, [r7, #20]
 800510a:	4618      	mov	r0, r3
 800510c:	f7ff fa7d 	bl	800460a <receiveTransmittSimpleDmaTest>
 8005110:	4602      	mov	r2, r0
 8005112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005114:	4413      	add	r3, r2
 8005116:	62fb      	str	r3, [r7, #44]	@ 0x2c

    srand(randomSeed); // use current time as seed for random generator
 8005118:	68f8      	ldr	r0, [r7, #12]
 800511a:	f001 fe59 	bl	8006dd0 <srand>

    // simple random rx/tx test----------------------------------------------------------
    for(int i = 0; i < randTestCount; ++i) {
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]
 8005122:	e046      	b.n	80051b2 <rawParserDmaTest+0x102>
        reg len = 0;
 8005124:	2300      	movs	r3, #0
 8005126:	61fb      	str	r3, [r7, #28]

        while(len == 0) {
 8005128:	e00f      	b.n	800514a <rawParserDmaTest+0x9a>
        	len = rand() % (D_RAW_P_CHECK_LEN >> 1);
 800512a:	f001 fe7f 	bl	8006e2c <rand>
 800512e:	4603      	mov	r3, r0
 8005130:	461a      	mov	r2, r3
 8005132:	4b52      	ldr	r3, [pc, #328]	@ (800527c <rawParserDmaTest+0x1cc>)
 8005134:	fba3 1302 	umull	r1, r3, r3, r2
 8005138:	1ad1      	subs	r1, r2, r3
 800513a:	0849      	lsrs	r1, r1, #1
 800513c:	440b      	add	r3, r1
 800513e:	0999      	lsrs	r1, r3, #6
 8005140:	460b      	mov	r3, r1
 8005142:	01db      	lsls	r3, r3, #7
 8005144:	1a5b      	subs	r3, r3, r1
 8005146:	1ad3      	subs	r3, r2, r3
 8005148:	61fb      	str	r3, [r7, #28]
        while(len == 0) {
 800514a:	69fb      	ldr	r3, [r7, #28]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d0ec      	beq.n	800512a <rawParserDmaTest+0x7a>

        }


        for(reg j = 0; j < len; ++j) {
 8005150:	2300      	movs	r3, #0
 8005152:	61bb      	str	r3, [r7, #24]
 8005154:	e00f      	b.n	8005176 <rawParserDmaTest+0xc6>
            data[j] = rand() % 256;
 8005156:	f001 fe69 	bl	8006e2c <rand>
 800515a:	4603      	mov	r3, r0
 800515c:	425a      	negs	r2, r3
 800515e:	b2db      	uxtb	r3, r3
 8005160:	b2d2      	uxtb	r2, r2
 8005162:	bf58      	it	pl
 8005164:	4253      	negpl	r3, r2
 8005166:	6979      	ldr	r1, [r7, #20]
 8005168:	69ba      	ldr	r2, [r7, #24]
 800516a:	440a      	add	r2, r1
 800516c:	b2db      	uxtb	r3, r3
 800516e:	7013      	strb	r3, [r2, #0]
        for(reg j = 0; j < len; ++j) {
 8005170:	69bb      	ldr	r3, [r7, #24]
 8005172:	3301      	adds	r3, #1
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	69ba      	ldr	r2, [r7, #24]
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	429a      	cmp	r2, r3
 800517c:	d3eb      	bcc.n	8005156 <rawParserDmaTest+0xa6>
        }
        errorCounter += receiveTransmittSimpleDmaTest(prot, data, len);
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	6979      	ldr	r1, [r7, #20]
 8005184:	4618      	mov	r0, r3
 8005186:	f7ff fa40 	bl	800460a <receiveTransmittSimpleDmaTest>
 800518a:	4602      	mov	r2, r0
 800518c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800518e:	4413      	add	r3, r2
 8005190:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if(collisionTestEna) {
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d009      	beq.n	80051ac <rawParserDmaTest+0xfc>
            collisionCounter+= receiveTransmittCollisionsDmaTest(prot, data, len);
 8005198:	693b      	ldr	r3, [r7, #16]
 800519a:	69fa      	ldr	r2, [r7, #28]
 800519c:	6979      	ldr	r1, [r7, #20]
 800519e:	4618      	mov	r0, r3
 80051a0:	f7ff fb1d 	bl	80047de <receiveTransmittCollisionsDmaTest>
 80051a4:	4602      	mov	r2, r0
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	4413      	add	r3, r2
 80051aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    for(int i = 0; i < randTestCount; ++i) {
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	3301      	adds	r3, #1
 80051b0:	623b      	str	r3, [r7, #32]
 80051b2:	6a3a      	ldr	r2, [r7, #32]
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	429a      	cmp	r2, r3
 80051b8:	dbb4      	blt.n	8005124 <rawParserDmaTest+0x74>
        }
    }

    errorCounter += receiveTransmittMacroWriteReadDmaTest(prot, randTestCount);
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	68b9      	ldr	r1, [r7, #8]
 80051be:	4618      	mov	r0, r3
 80051c0:	f7ff fc2c 	bl	8004a1c <receiveTransmittMacroWriteReadDmaTest>
 80051c4:	4602      	mov	r2, r0
 80051c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051c8:	4413      	add	r3, r2
 80051ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    errorCounter += receiveTransmittConvertDmaTest(prot, randTestCount);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fdbb 	bl	8004d4c <receiveTransmittConvertDmaTest>
 80051d6:	4602      	mov	r2, r0
 80051d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051da:	4413      	add	r3, r2
 80051dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    printf("\n----------RAW PARSER DMA TEST FINISHED!!!-------------------------\nRAW_PARSER_DMA EXIT WITH ERROR: %d\n", errorCounter);
 80051de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051e0:	4827      	ldr	r0, [pc, #156]	@ (8005280 <rawParserDmaTest+0x1d0>)
 80051e2:	f002 fe1d 	bl	8007e20 <iprintf>
    printf("PACKET COUNTER: %d\n", randTestCount * 2);
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4619      	mov	r1, r3
 80051ec:	4825      	ldr	r0, [pc, #148]	@ (8005284 <rawParserDmaTest+0x1d4>)
 80051ee:	f002 fe17 	bl	8007e20 <iprintf>
    if(collisionTestEna) {
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d023      	beq.n	8005240 <rawParserDmaTest+0x190>
        printf("WITH COLLISIONS: %d\n", collisionCounter);
 80051f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051fa:	4823      	ldr	r0, [pc, #140]	@ (8005288 <rawParserDmaTest+0x1d8>)
 80051fc:	f002 fe10 	bl	8007e20 <iprintf>
        printf("PACKED CRC LOOSE percents: %f\n", (f32)((f32)collisionCounter / (f32)randTestCount) * 100.0f * 0.5f);
 8005200:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005202:	f7fb fcfb 	bl	8000bfc <__aeabi_i2f>
 8005206:	4604      	mov	r4, r0
 8005208:	68b8      	ldr	r0, [r7, #8]
 800520a:	f7fb fcf7 	bl	8000bfc <__aeabi_i2f>
 800520e:	4603      	mov	r3, r0
 8005210:	4619      	mov	r1, r3
 8005212:	4620      	mov	r0, r4
 8005214:	f7fb fdfa 	bl	8000e0c <__aeabi_fdiv>
 8005218:	4603      	mov	r3, r0
 800521a:	491c      	ldr	r1, [pc, #112]	@ (800528c <rawParserDmaTest+0x1dc>)
 800521c:	4618      	mov	r0, r3
 800521e:	f7fb fd41 	bl	8000ca4 <__aeabi_fmul>
 8005222:	4603      	mov	r3, r0
 8005224:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb fd3b 	bl	8000ca4 <__aeabi_fmul>
 800522e:	4603      	mov	r3, r0
 8005230:	4618      	mov	r0, r3
 8005232:	f7fb f8f9 	bl	8000428 <__aeabi_f2d>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4815      	ldr	r0, [pc, #84]	@ (8005290 <rawParserDmaTest+0x1e0>)
 800523c:	f002 fdf0 	bl	8007e20 <iprintf>
    }

    free(data);
 8005240:	6978      	ldr	r0, [r7, #20]
 8005242:	f001 fd0f 	bl	8006c64 <free>
    printf("RawParser_dma deleted error: %d\n", rawParser_dma_delete(&prot) != D_RAW_P_OK);
 8005246:	f107 0310 	add.w	r3, r7, #16
 800524a:	4618      	mov	r0, r3
 800524c:	f000 f8bc 	bl	80053c8 <rawParser_dma_delete>
 8005250:	4603      	mov	r3, r0
 8005252:	2b01      	cmp	r3, #1
 8005254:	bf14      	ite	ne
 8005256:	2301      	movne	r3, #1
 8005258:	2300      	moveq	r3, #0
 800525a:	b2db      	uxtb	r3, r3
 800525c:	4619      	mov	r1, r3
 800525e:	480d      	ldr	r0, [pc, #52]	@ (8005294 <rawParserDmaTest+0x1e4>)
 8005260:	f002 fdde 	bl	8007e20 <iprintf>
    fflush(stdout);
 8005264:	4b0c      	ldr	r3, [pc, #48]	@ (8005298 <rawParserDmaTest+0x1e8>)
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	689b      	ldr	r3, [r3, #8]
 800526a:	4618      	mov	r0, r3
 800526c:	f002 fc6a 	bl	8007b44 <fflush>

    return errorCounter;
 8005270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005272:	4618      	mov	r0, r3
 8005274:	3734      	adds	r7, #52	@ 0x34
 8005276:	46bd      	mov	sp, r7
 8005278:	bd90      	pop	{r4, r7, pc}
 800527a:	bf00      	nop
 800527c:	02040811 	.word	0x02040811
 8005280:	0800a028 	.word	0x0800a028
 8005284:	0800a090 	.word	0x0800a090
 8005288:	0800a0a4 	.word	0x0800a0a4
 800528c:	42c80000 	.word	0x42c80000
 8005290:	0800a0bc 	.word	0x0800a0bc
 8005294:	0800a0dc 	.word	0x0800a0dc
 8005298:	20000018 	.word	0x20000018

0800529c <rawParser_dma_new>:

/* CREATE/DELETE FUNCTIONS *************************************************************************************************
 *
 */
RawParser_dma_t* rawParser_dma_new(const u8 packStart)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af02      	add	r7, sp, #8
 80052a2:	4603      	mov	r3, r0
 80052a4:	71fb      	strb	r3, [r7, #7]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return (RawParser_dma_t*)NULL, "rawParser_dma_new: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	RawParser_dma_t* self = (RawParser_dma_t *)calloc(1, sizeof(RawParser_dma_t));
 80052a6:	f44f 714d 	mov.w	r1, #820	@ 0x334
 80052aa:	2001      	movs	r0, #1
 80052ac:	f001 fcb6 	bl	8006c1c <calloc>
 80052b0:	4603      	mov	r3, r0
 80052b2:	60fb      	str	r3, [r7, #12]
	M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return self, "rawParser_dma_new: No memory for allocation ");
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10b      	bne.n	80052d2 <rawParser_dma_new+0x36>
 80052ba:	4b0f      	ldr	r3, [pc, #60]	@ (80052f8 <rawParser_dma_new+0x5c>)
 80052bc:	9301      	str	r3, [sp, #4]
 80052be:	4b0f      	ldr	r3, [pc, #60]	@ (80052fc <rawParser_dma_new+0x60>)
 80052c0:	9300      	str	r3, [sp, #0]
 80052c2:	233a      	movs	r3, #58	@ 0x3a
 80052c4:	4a0e      	ldr	r2, [pc, #56]	@ (8005300 <rawParser_dma_new+0x64>)
 80052c6:	2101      	movs	r1, #1
 80052c8:	480e      	ldr	r0, [pc, #56]	@ (8005304 <rawParser_dma_new+0x68>)
 80052ca:	f7fe ff83 	bl	80041d4 <__M_Error>
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	e00d      	b.n	80052ee <rawParser_dma_new+0x52>

	if(rawParser_dma_init(self, packStart) == D_RAW_P_ERROR) {
 80052d2:	79fb      	ldrb	r3, [r7, #7]
 80052d4:	4619      	mov	r1, r3
 80052d6:	68f8      	ldr	r0, [r7, #12]
 80052d8:	f000 f816 	bl	8005308 <rawParser_dma_init>
 80052dc:	4603      	mov	r3, r0
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d104      	bne.n	80052ec <rawParser_dma_new+0x50>
		free(self);
 80052e2:	68f8      	ldr	r0, [r7, #12]
 80052e4:	f001 fcbe 	bl	8006c64 <free>
		self = NULL;
 80052e8:	2300      	movs	r3, #0
 80052ea:	60fb      	str	r3, [r7, #12]
	}
	return self;
 80052ec:	68fb      	ldr	r3, [r7, #12]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	0800a160 	.word	0x0800a160
 80052fc:	0800a6ac 	.word	0x0800a6ac
 8005300:	0800a100 	.word	0x0800a100
 8005304:	0800a140 	.word	0x0800a140

08005308 <rawParser_dma_init>:

int rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b084      	sub	sp, #16
 800530c:	af02      	add	r7, sp, #8
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_init: No input data valid ");
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10b      	bne.n	8005332 <rawParser_dma_init+0x2a>
 800531a:	4b27      	ldr	r3, [pc, #156]	@ (80053b8 <rawParser_dma_init+0xb0>)
 800531c:	9301      	str	r3, [sp, #4]
 800531e:	4b27      	ldr	r3, [pc, #156]	@ (80053bc <rawParser_dma_init+0xb4>)
 8005320:	9300      	str	r3, [sp, #0]
 8005322:	2349      	movs	r3, #73	@ 0x49
 8005324:	4a26      	ldr	r2, [pc, #152]	@ (80053c0 <rawParser_dma_init+0xb8>)
 8005326:	2101      	movs	r1, #1
 8005328:	4826      	ldr	r0, [pc, #152]	@ (80053c4 <rawParser_dma_init+0xbc>)
 800532a:	f7fe ff53 	bl	80041d4 <__M_Error>
 800532e:	2300      	movs	r3, #0
 8005330:	e03e      	b.n	80053b0 <rawParser_dma_init+0xa8>

	self->m_startByte = packStart;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	78fa      	ldrb	r2, [r7, #3]
 8005336:	701a      	strb	r2, [r3, #0]
	self->m_receivePackLen = 0;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2200      	movs	r2, #0
 800533c:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	22ff      	movs	r2, #255	@ 0xff
 8005342:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
	self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	22ff      	movs	r2, #255	@ 0xff
 800534a:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309
	self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

	self->m_triggerSB = 0;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
	self->m_receivePos = 0;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c3 230c 	str.w	r2, [r3, #780]	@ 0x30c
	self->m_receiveReadPos = 0;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	self->m_receiveHandlePos = 0;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314

	self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	self->TX.data = self->m_sendBuffer;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	f503 7202 	add.w	r2, r3, #520	@ 0x208
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f8c3 231c 	str.w	r2, [r3, #796]	@ 0x31c
#else
	self->TX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	self->TX.size = 0;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
	self->RX.data = self->m_receiveFrameBuffer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f8c3 2324 	str.w	r2, [r3, #804]	@ 0x324
#else
	self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

	self->RX.size = 0;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328

	self->uniRXPosition = 0;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
	self->length_write_control = 0;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
	rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

	return D_RAW_P_OK;
 80053ae:	2301      	movs	r3, #1
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	0800a190 	.word	0x0800a190
 80053bc:	0800a6c0 	.word	0x0800a6c0
 80053c0:	0800a100 	.word	0x0800a100
 80053c4:	0800a140 	.word	0x0800a140

080053c8 <rawParser_dma_delete>:
	self->RX.size = 0;
}
#endif /* defined(D_RAW_P_DISABLE_INTERNAL_TX_BUFFER) || defined(D_RAW_P_DISABLE_INTERNAL_RX_BUFFER) */

int rawParser_dma_delete(RawParser_dma_t** data)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b084      	sub	sp, #16
 80053cc:	af02      	add	r7, sp, #8
 80053ce:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck((data == NULL) || (*data == NULL), M_EMPTY, return D_RAW_P_ERROR, "rawParser_dma_delete: No allocated memory");
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d003      	beq.n	80053de <rawParser_dma_delete+0x16>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10b      	bne.n	80053f6 <rawParser_dma_delete+0x2e>
 80053de:	4b0c      	ldr	r3, [pc, #48]	@ (8005410 <rawParser_dma_delete+0x48>)
 80053e0:	9301      	str	r3, [sp, #4]
 80053e2:	4b0c      	ldr	r3, [pc, #48]	@ (8005414 <rawParser_dma_delete+0x4c>)
 80053e4:	9300      	str	r3, [sp, #0]
 80053e6:	23a2      	movs	r3, #162	@ 0xa2
 80053e8:	4a0b      	ldr	r2, [pc, #44]	@ (8005418 <rawParser_dma_delete+0x50>)
 80053ea:	2101      	movs	r1, #1
 80053ec:	480b      	ldr	r0, [pc, #44]	@ (800541c <rawParser_dma_delete+0x54>)
 80053ee:	f7fe fef1 	bl	80041d4 <__M_Error>
 80053f2:	2300      	movs	r3, #0
 80053f4:	e008      	b.n	8005408 <rawParser_dma_delete+0x40>
	free(*data);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 fc32 	bl	8006c64 <free>
	*data = NULL;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	601a      	str	r2, [r3, #0]

	return D_RAW_P_OK;
 8005406:	2301      	movs	r3, #1
}
 8005408:	4618      	mov	r0, r3
 800540a:	3708      	adds	r7, #8
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	0800a1e0 	.word	0x0800a1e0
 8005414:	0800a6d4 	.word	0x0800a6d4
 8005418:	0800a100 	.word	0x0800a100
 800541c:	0800a1bc 	.word	0x0800a1bc

08005420 <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b088      	sub	sp, #32
 8005424:	af04      	add	r7, sp, #16
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	460b      	mov	r3, r1
 800542a:	70fb      	strb	r3, [r7, #3]
 800542c:	4613      	mov	r3, r2
 800542e:	70bb      	strb	r3, [r7, #2]
	if (newFrame) {
 8005430:	78bb      	ldrb	r3, [r7, #2]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
		//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: last packet error!!!");

		self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	22ff      	movs	r2, #255	@ 0xff
 800543a:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
		D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

		self->m_receiveHandlePos = 0;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
		self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
	}

	switch(self->receiveState) {
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	f893 3318 	ldrb.w	r3, [r3, #792]	@ 0x318
 8005454:	2b0d      	cmp	r3, #13
 8005456:	f200 809b 	bhi.w	8005590 <RawParser_dma_proceedByte+0x170>
 800545a:	a201      	add	r2, pc, #4	@ (adr r2, 8005460 <RawParser_dma_proceedByte+0x40>)
 800545c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005460:	08005499 	.word	0x08005499
 8005464:	08005591 	.word	0x08005591
 8005468:	08005591 	.word	0x08005591
 800546c:	08005515 	.word	0x08005515
 8005470:	08005567 	.word	0x08005567
 8005474:	08005591 	.word	0x08005591
 8005478:	08005591 	.word	0x08005591
 800547c:	08005591 	.word	0x08005591
 8005480:	08005591 	.word	0x08005591
 8005484:	08005591 	.word	0x08005591
 8005488:	08005591 	.word	0x08005591
 800548c:	08005591 	.word	0x08005591
 8005490:	08005591 	.word	0x08005591
 8005494:	08005591 	.word	0x08005591

	case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
		self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 800549e:	78fa      	ldrb	r2, [r7, #3]
 80054a0:	4611      	mov	r1, r2
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7ff f872 	bl	800458c <fast_crc8_maxim_byte>
 80054a8:	4603      	mov	r3, r0
 80054aa:	461a      	mov	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
		if(RECEIVE_EXTENDED_LEN_CMD == ch) {
			self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
		} else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

			const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	78fa      	ldrb	r2, [r7, #3]
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d902      	bls.n	80054c2 <RawParser_dma_proceedByte+0xa2>
 80054bc:	78fb      	ldrb	r3, [r7, #3]
 80054be:	3b01      	subs	r3, #1
 80054c0:	e000      	b.n	80054c4 <RawParser_dma_proceedByte+0xa4>
 80054c2:	78fb      	ldrb	r3, [r7, #3]
 80054c4:	687a      	ldr	r2, [r7, #4]
 80054c6:	6053      	str	r3, [r2, #4]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	60bb      	str	r3, [r7, #8]
			self->m_receiveHandlePos = 0;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
			self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2203      	movs	r2, #3
 80054da:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318

			M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80054e4:	d802      	bhi.n	80054ec <RawParser_dma_proceedByte+0xcc>
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d153      	bne.n	8005594 <RawParser_dma_proceedByte+0x174>
 80054ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80054f0:	9303      	str	r3, [sp, #12]
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	9302      	str	r3, [sp, #8]
 80054f6:	4b2a      	ldr	r3, [pc, #168]	@ (80055a0 <RawParser_dma_proceedByte+0x180>)
 80054f8:	9301      	str	r3, [sp, #4]
 80054fa:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <RawParser_dma_proceedByte+0x184>)
 80054fc:	9300      	str	r3, [sp, #0]
 80054fe:	23cf      	movs	r3, #207	@ 0xcf
 8005500:	4a29      	ldr	r2, [pc, #164]	@ (80055a8 <RawParser_dma_proceedByte+0x188>)
 8005502:	2101      	movs	r1, #1
 8005504:	4829      	ldr	r0, [pc, #164]	@ (80055ac <RawParser_dma_proceedByte+0x18c>)
 8005506:	f7fe fe85 	bl	8004214 <__M_Warning>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	220c      	movs	r2, #12
 800550e:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
		}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

		break;}
 8005512:	e03f      	b.n	8005594 <RawParser_dma_proceedByte+0x174>

		break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	case RAW_P_DMA_RECEIVE_DATA: {
		reg rx_pos = self->m_receiveHandlePos;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f8d3 3314 	ldr.w	r3, [r3, #788]	@ 0x314
 800551a:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
		self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 8005522:	78fa      	ldrb	r2, [r7, #3]
 8005524:	4611      	mov	r1, r2
 8005526:	4618      	mov	r0, r3
 8005528:	f7ff f830 	bl	800458c <fast_crc8_maxim_byte>
 800552c:	4603      	mov	r3, r0
 800552e:	461a      	mov	r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f883 2308 	strb.w	r2, [r3, #776]	@ 0x308
#endif /* D_RAW_P_CRC_ENA */

		self->RX.data[rx_pos] = ch;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	f8d3 2324 	ldr.w	r2, [r3, #804]	@ 0x324
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	78fa      	ldrb	r2, [r7, #3]
 8005542:	701a      	strb	r2, [r3, #0]
		++rx_pos;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3301      	adds	r3, #1
 8005548:	60fb      	str	r3, [r7, #12]

		if (rx_pos == self->m_receivePackLen) {
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	685b      	ldr	r3, [r3, #4]
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	429a      	cmp	r2, r3
 8005552:	d103      	bne.n	800555c <RawParser_dma_proceedByte+0x13c>

#ifdef D_RAW_P_CRC_ENA
			D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
			self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2204      	movs	r2, #4
 8005558:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
			self->RX.size = self->m_receivePackLen;
			self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
		}

		self->m_receiveHandlePos = rx_pos;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f8c3 2314 	str.w	r2, [r3, #788]	@ 0x314
		break;}
 8005564:	e017      	b.n	8005596 <RawParser_dma_proceedByte+0x176>

	case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

		if(self->m_receiveCalcCRC == ch) {
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	f893 3308 	ldrb.w	r3, [r3, #776]	@ 0x308
 800556c:	78fa      	ldrb	r2, [r7, #3]
 800556e:	429a      	cmp	r2, r3
 8005570:	d109      	bne.n	8005586 <RawParser_dma_proceedByte+0x166>
			self->RX.size = self->m_receivePackLen;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685a      	ldr	r2, [r3, #4]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328
			self->receiveState = RAW_P_DMA_RECEIVE_OK;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	220d      	movs	r2, #13
 8005580:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
		self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
		self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

		break;}
 8005584:	e007      	b.n	8005596 <RawParser_dma_proceedByte+0x176>
			self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	220c      	movs	r2, #12
 800558a:	f883 2318 	strb.w	r2, [r3, #792]	@ 0x318
		break;}
 800558e:	e002      	b.n	8005596 <RawParser_dma_proceedByte+0x176>
	case RAW_P_DMA_RECEIVE_OK:
		M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "RawParser_dma_proceedByte: LAST Received OK, byte: %d is not received because no SB", ch);
		break;

	default:
		break;
 8005590:	bf00      	nop
 8005592:	e000      	b.n	8005596 <RawParser_dma_proceedByte+0x176>
		break;}
 8005594:	bf00      	nop
	}
}
 8005596:	bf00      	nop
 8005598:	3710      	adds	r7, #16
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	0800a23c 	.word	0x0800a23c
 80055a4:	0800a6ec 	.word	0x0800a6ec
 80055a8:	0800a100 	.word	0x0800a100
 80055ac:	0800a20c 	.word	0x0800a20c

080055b0 <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b086      	sub	sp, #24
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_proceed: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	f8d3 330c 	ldr.w	r3, [r3, #780]	@ 0x30c
 80055be:	b2db      	uxtb	r3, r3
 80055c0:	613b      	str	r3, [r7, #16]
	reg   receiveReadPos      = self->m_receiveReadPos    & (D_RAW_P_RX_BUF_SIZE - 1U);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f8d3 3310 	ldr.w	r3, [r3, #784]	@ 0x310
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	617b      	str	r3, [r7, #20]
	self->RX.size = 0;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	f8c3 2328 	str.w	r2, [r3, #808]	@ 0x328

	//    if(receivePos_saved == receiveReadPos) { // may be needed
	//        return &self->RX;
	//    }

	while (receivePos_saved != receiveReadPos) {
 80055d4:	e03f      	b.n	8005656 <RawParser_dma_proceed+0xa6>

		const u8 ch = self->m_receiveBuffer[receiveReadPos];
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	697b      	ldr	r3, [r7, #20]
 80055da:	4413      	add	r3, r2
 80055dc:	3308      	adds	r3, #8
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	73fb      	strb	r3, [r7, #15]

		if (self->m_triggerSB) {
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 330a 	ldrb.w	r3, [r3, #778]	@ 0x30a
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d016      	beq.n	800561a <RawParser_dma_proceed+0x6a>
			if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	7bfa      	ldrb	r2, [r7, #15]
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d106      	bne.n	8005604 <RawParser_dma_proceed+0x54>
				RawParser_dma_proceedByte(self, ch, 0);
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	2200      	movs	r2, #0
 80055fa:	4619      	mov	r1, r3
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7ff ff0f 	bl	8005420 <RawParser_dma_proceedByte>
 8005602:	e005      	b.n	8005610 <RawParser_dma_proceed+0x60>
			} else { //{SB}{!SB} -> {SB} and newframe
				RawParser_dma_proceedByte(self, ch, 1);
 8005604:	7bfb      	ldrb	r3, [r7, #15]
 8005606:	2201      	movs	r2, #1
 8005608:	4619      	mov	r1, r3
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7ff ff08 	bl	8005420 <RawParser_dma_proceedByte>
			}
			self->m_triggerSB = 0;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2200      	movs	r2, #0
 8005614:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
 8005618:	e00f      	b.n	800563a <RawParser_dma_proceed+0x8a>
		} else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	7bfa      	ldrb	r2, [r7, #15]
 8005620:	429a      	cmp	r2, r3
 8005622:	d104      	bne.n	800562e <RawParser_dma_proceed+0x7e>
			self->m_triggerSB = 1;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
 800562c:	e005      	b.n	800563a <RawParser_dma_proceed+0x8a>
		} else { //{!SB}{!SB} -> {!SB}
			RawParser_dma_proceedByte(self, ch, 0);
 800562e:	7bfb      	ldrb	r3, [r7, #15]
 8005630:	2200      	movs	r2, #0
 8005632:	4619      	mov	r1, r3
 8005634:	6878      	ldr	r0, [r7, #4]
 8005636:	f7ff fef3 	bl	8005420 <RawParser_dma_proceedByte>
		}

		receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	3301      	adds	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	617b      	str	r3, [r7, #20]

		if(self->RX.size != 0) {
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 8005648:	2b00      	cmp	r3, #0
 800564a:	d004      	beq.n	8005656 <RawParser_dma_proceed+0xa6>
			self->uniRXPosition = 0;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
			break;
 8005654:	e003      	b.n	800565e <RawParser_dma_proceed+0xae>
	while (receivePos_saved != receiveReadPos) {
 8005656:	693a      	ldr	r2, [r7, #16]
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	429a      	cmp	r2, r3
 800565c:	d1bb      	bne.n	80055d6 <RawParser_dma_proceed+0x26>
		}
	}

	self->m_receiveReadPos = receiveReadPos;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	f8c3 2310 	str.w	r2, [r3, #784]	@ 0x310
	return &self->RX;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f503 7349 	add.w	r3, r3, #804	@ 0x324
}
 800566c:	4618      	mov	r0, r3
 800566e:	3718      	adds	r7, #24
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <RawParser_dma_addTxByte>:


// elementary byte adding functions ----------------------------------------------------------------------------
static inline int RawParser_dma_addTxByte(RawParser_dma_t* const self, const u8 byte)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b08a      	sub	sp, #40	@ 0x28
 8005678:	af04      	add	r7, sp, #16
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	460b      	mov	r3, r1
 800567e:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_addTxByte: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	// move to cash
	u8* const   TX_data   	= self->TX.data;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	f8d3 331c 	ldr.w	r3, [r3, #796]	@ 0x31c
 8005686:	613b      	str	r3, [r7, #16]
	reg         TX_size   	= self->TX.size;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8d3 3320 	ldr.w	r3, [r3, #800]	@ 0x320
 800568e:	617b      	str	r3, [r7, #20]
	const u8 startByte_reg 	= self->m_startByte;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	781b      	ldrb	r3, [r3, #0]
 8005694:	73fb      	strb	r3, [r7, #15]

	M_Assert_BreakSaveCheck(TX_size == (D_RAW_P_CHECK_LEN - 1), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_CHECK_LEN - 1);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	2bfd      	cmp	r3, #253	@ 0xfd
 800569a:	d111      	bne.n	80056c0 <RawParser_dma_addTxByte+0x4c>
 800569c:	697b      	ldr	r3, [r7, #20]
 800569e:	3301      	adds	r3, #1
 80056a0:	22fd      	movs	r2, #253	@ 0xfd
 80056a2:	9203      	str	r2, [sp, #12]
 80056a4:	9302      	str	r3, [sp, #8]
 80056a6:	4b1e      	ldr	r3, [pc, #120]	@ (8005720 <RawParser_dma_addTxByte+0xac>)
 80056a8:	9301      	str	r3, [sp, #4]
 80056aa:	4b1e      	ldr	r3, [pc, #120]	@ (8005724 <RawParser_dma_addTxByte+0xb0>)
 80056ac:	9300      	str	r3, [sp, #0]
 80056ae:	f44f 73ed 	mov.w	r3, #474	@ 0x1da
 80056b2:	4a1d      	ldr	r2, [pc, #116]	@ (8005728 <RawParser_dma_addTxByte+0xb4>)
 80056b4:	2101      	movs	r1, #1
 80056b6:	481d      	ldr	r0, [pc, #116]	@ (800572c <RawParser_dma_addTxByte+0xb8>)
 80056b8:	f7fe fd8c 	bl	80041d4 <__M_Error>
 80056bc:	2300      	movs	r3, #0
 80056be:	e02b      	b.n	8005718 <RawParser_dma_addTxByte+0xa4>

	TX_data[TX_size++] = byte;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	617a      	str	r2, [r7, #20]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	4413      	add	r3, r2
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	701a      	strb	r2, [r3, #0]

	if(byte == startByte_reg) {
 80056ce:	78fa      	ldrb	r2, [r7, #3]
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	d11b      	bne.n	800570e <RawParser_dma_addTxByte+0x9a>
		M_Assert_BreakSaveCheck((TX_size == (D_RAW_P_CHECK_LEN - 1)), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_addTxByte: LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_CHECK_LEN - 1);
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	2bfd      	cmp	r3, #253	@ 0xfd
 80056da:	d111      	bne.n	8005700 <RawParser_dma_addTxByte+0x8c>
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3301      	adds	r3, #1
 80056e0:	22fd      	movs	r2, #253	@ 0xfd
 80056e2:	9203      	str	r2, [sp, #12]
 80056e4:	9302      	str	r3, [sp, #8]
 80056e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005720 <RawParser_dma_addTxByte+0xac>)
 80056e8:	9301      	str	r3, [sp, #4]
 80056ea:	4b0e      	ldr	r3, [pc, #56]	@ (8005724 <RawParser_dma_addTxByte+0xb0>)
 80056ec:	9300      	str	r3, [sp, #0]
 80056ee:	f240 13df 	movw	r3, #479	@ 0x1df
 80056f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005728 <RawParser_dma_addTxByte+0xb4>)
 80056f4:	2101      	movs	r1, #1
 80056f6:	480e      	ldr	r0, [pc, #56]	@ (8005730 <RawParser_dma_addTxByte+0xbc>)
 80056f8:	f7fe fd6c 	bl	80041d4 <__M_Error>
 80056fc:	2300      	movs	r3, #0
 80056fe:	e00b      	b.n	8005718 <RawParser_dma_addTxByte+0xa4>
		TX_data[TX_size++] = byte;
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	617a      	str	r2, [r7, #20]
 8005706:	693a      	ldr	r2, [r7, #16]
 8005708:	4413      	add	r3, r2
 800570a:	78fa      	ldrb	r2, [r7, #3]
 800570c:	701a      	strb	r2, [r3, #0]
	}

	self->TX.size = TX_size;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	697a      	ldr	r2, [r7, #20]
 8005712:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	return D_RAW_P_OK;
 8005716:	2301      	movs	r3, #1
}
 8005718:	4618      	mov	r0, r3
 800571a:	3718      	adds	r7, #24
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}
 8005720:	0800a2b0 	.word	0x0800a2b0
 8005724:	0800a708 	.word	0x0800a708
 8005728:	0800a100 	.word	0x0800a100
 800572c:	0800a28c 	.word	0x0800a28c
 8005730:	0800a308 	.word	0x0800a308

08005734 <RawParser_dma_shieldFrame>:

// slow shield functions (slow & more copy)-----------------------------------------------------------------------------------------
RawParser_Frame_t* RawParser_dma_shieldFrame(RawParser_dma_t* const self, const u8* data, reg len)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b086      	sub	sp, #24
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
	M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "RawParser_dma_shieldFrame: No valid input");
	M_Assert_Break((data == (u8*)NULL) || len == 0, M_EMPTY, {
			goto error;
	}, "RawParser_dma_shieldFrame: No valid input");

	if(RawParser_dma_startTransmittPacket(self, len) != D_RAW_P_OK) {
 8005740:	6879      	ldr	r1, [r7, #4]
 8005742:	68f8      	ldr	r0, [r7, #12]
 8005744:	f000 f83e 	bl	80057c4 <RawParser_dma_startTransmittPacket>
 8005748:	4603      	mov	r3, r0
 800574a:	2b01      	cmp	r3, #1
 800574c:	d12b      	bne.n	80057a6 <RawParser_dma_shieldFrame+0x72>
		goto error;
	}

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f893 3309 	ldrb.w	r3, [r3, #777]	@ 0x309
 8005754:	75fb      	strb	r3, [r7, #23]
#endif /* D_RAW_P_CRC_ENA */

	while(len--) {
 8005756:	e014      	b.n	8005782 <RawParser_dma_shieldFrame+0x4e>
		const u8 b = *data++;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	60ba      	str	r2, [r7, #8]
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	75bb      	strb	r3, [r7, #22]

		if(RawParser_dma_addTxByte(self, b) != D_RAW_P_OK) {
 8005762:	7dbb      	ldrb	r3, [r7, #22]
 8005764:	4619      	mov	r1, r3
 8005766:	68f8      	ldr	r0, [r7, #12]
 8005768:	f7ff ff84 	bl	8005674 <RawParser_dma_addTxByte>
 800576c:	4603      	mov	r3, r0
 800576e:	2b01      	cmp	r3, #1
 8005770:	d11b      	bne.n	80057aa <RawParser_dma_shieldFrame+0x76>
			goto error;
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, b);
 8005772:	7dba      	ldrb	r2, [r7, #22]
 8005774:	7dfb      	ldrb	r3, [r7, #23]
 8005776:	4611      	mov	r1, r2
 8005778:	4618      	mov	r0, r3
 800577a:	f7fe ff07 	bl	800458c <fast_crc8_maxim_byte>
 800577e:	4603      	mov	r3, r0
 8005780:	75fb      	strb	r3, [r7, #23]
	while(len--) {
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	1e5a      	subs	r2, r3, #1
 8005786:	607a      	str	r2, [r7, #4]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d1e5      	bne.n	8005758 <RawParser_dma_shieldFrame+0x24>
#endif /* D_RAW_P_CRC_ENA */

	}

#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	7dfa      	ldrb	r2, [r7, #23]
 8005790:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309
#endif /* D_RAW_P_CRC_ENA */


	self->length_write_control = 0;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	2200      	movs	r2, #0
 8005798:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
	return RawParser_dma_finishTransmittPacket(self);
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f887 	bl	80058b0 <RawParser_dma_finishTransmittPacket>
 80057a2:	4603      	mov	r3, r0
 80057a4:	e009      	b.n	80057ba <RawParser_dma_shieldFrame+0x86>
		goto error;
 80057a6:	bf00      	nop
 80057a8:	e000      	b.n	80057ac <RawParser_dma_shieldFrame+0x78>
			goto error;
 80057aa:	bf00      	nop

	error:
	self->TX.size = 0;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	return &self->TX;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3718      	adds	r7, #24
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}
	...

080057c4 <RawParser_dma_startTransmittPacket>:

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
int RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b088      	sub	sp, #32
 80057c8:	af04      	add	r7, sp, #16
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	6039      	str	r1, [r7, #0]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break(self->TX.data == NULL, M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_startTransmittPacket: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	M_Assert_WarningSaveCheck(predictedLen == 0, M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_startTransmittPacket: No valid input length");
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10c      	bne.n	80057ee <RawParser_dma_startTransmittPacket+0x2a>
 80057d4:	4b30      	ldr	r3, [pc, #192]	@ (8005898 <RawParser_dma_startTransmittPacket+0xd4>)
 80057d6:	9301      	str	r3, [sp, #4]
 80057d8:	4b30      	ldr	r3, [pc, #192]	@ (800589c <RawParser_dma_startTransmittPacket+0xd8>)
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	f240 231e 	movw	r3, #542	@ 0x21e
 80057e0:	4a2f      	ldr	r2, [pc, #188]	@ (80058a0 <RawParser_dma_startTransmittPacket+0xdc>)
 80057e2:	2101      	movs	r1, #1
 80057e4:	482f      	ldr	r0, [pc, #188]	@ (80058a4 <RawParser_dma_startTransmittPacket+0xe0>)
 80057e6:	f7fe fd15 	bl	8004214 <__M_Warning>
 80057ea:	2300      	movs	r3, #0
 80057ec:	e04f      	b.n	800588e <RawParser_dma_startTransmittPacket+0xca>

	// control undefined behavior
	M_Assert_BreakSaveCheck( predictedLen > (D_RAW_P_CHECK_LEN - 5), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_startTransmittPacket: No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_CHECK_LEN);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2bf9      	cmp	r3, #249	@ 0xf9
 80057f2:	d910      	bls.n	8005816 <RawParser_dma_startTransmittPacket+0x52>
 80057f4:	23fe      	movs	r3, #254	@ 0xfe
 80057f6:	9303      	str	r3, [sp, #12]
 80057f8:	683b      	ldr	r3, [r7, #0]
 80057fa:	9302      	str	r3, [sp, #8]
 80057fc:	4b2a      	ldr	r3, [pc, #168]	@ (80058a8 <RawParser_dma_startTransmittPacket+0xe4>)
 80057fe:	9301      	str	r3, [sp, #4]
 8005800:	4b26      	ldr	r3, [pc, #152]	@ (800589c <RawParser_dma_startTransmittPacket+0xd8>)
 8005802:	9300      	str	r3, [sp, #0]
 8005804:	f240 2321 	movw	r3, #545	@ 0x221
 8005808:	4a25      	ldr	r2, [pc, #148]	@ (80058a0 <RawParser_dma_startTransmittPacket+0xdc>)
 800580a:	2101      	movs	r1, #1
 800580c:	4827      	ldr	r0, [pc, #156]	@ (80058ac <RawParser_dma_startTransmittPacket+0xe8>)
 800580e:	f7fe fce1 	bl	80041d4 <__M_Error>
 8005812:	2300      	movs	r3, #0
 8005814:	e03b      	b.n	800588e <RawParser_dma_startTransmittPacket+0xca>
	M_Assert_Warning(predictedLen > (D_RAW_P_CHECK_LEN >> 1), M_EMPTY, M_EMPTY, "RawParser_dma_startTransmittPacket: UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_CHECK_LEN >> 1));


#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = D_RAW_P_CRC_INIT;
 8005816:	23ff      	movs	r3, #255	@ 0xff
 8005818:	73fb      	strb	r3, [r7, #15]
	D_RAW_P_CRC_START(r_crc);
#endif /* D_RAW_P_CRC_ENA */

	const u8 startByte = self->m_startByte;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	73bb      	strb	r3, [r7, #14]
	self->length_write_control = predictedLen;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	683a      	ldr	r2, [r7, #0]
 8005824:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330

	self->TX.size = 0;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	self->TX.data[self->TX.size++] = startByte;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	f8d3 231c 	ldr.w	r2, [r3, #796]	@ 0x31c
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	f8d3 3320 	ldr.w	r3, [r3, #800]	@ 0x320
 800583c:	1c58      	adds	r0, r3, #1
 800583e:	6879      	ldr	r1, [r7, #4]
 8005840:	f8c1 0320 	str.w	r0, [r1, #800]	@ 0x320
 8005844:	4413      	add	r3, r2
 8005846:	7bba      	ldrb	r2, [r7, #14]
 8005848:	701a      	strb	r2, [r3, #0]
#	endif /* D_RAW_P_CRC_ENA */

	} else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

		const reg r_len = (predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen;
 800584a:	7bbb      	ldrb	r3, [r7, #14]
 800584c:	683a      	ldr	r2, [r7, #0]
 800584e:	429a      	cmp	r2, r3
 8005850:	d302      	bcc.n	8005858 <RawParser_dma_startTransmittPacket+0x94>
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	3301      	adds	r3, #1
 8005856:	e000      	b.n	800585a <RawParser_dma_startTransmittPacket+0x96>
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	60bb      	str	r3, [r7, #8]

		if(RawParser_dma_addTxByte(self, r_len) != D_RAW_P_OK) {
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff ff06 	bl	8005674 <RawParser_dma_addTxByte>
 8005868:	4603      	mov	r3, r0
 800586a:	2b01      	cmp	r3, #1
 800586c:	d001      	beq.n	8005872 <RawParser_dma_startTransmittPacket+0xae>
			return D_RAW_P_ERROR;
 800586e:	2300      	movs	r3, #0
 8005870:	e00d      	b.n	800588e <RawParser_dma_startTransmittPacket+0xca>
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, r_len);
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	b2da      	uxtb	r2, r3
 8005876:	7bfb      	ldrb	r3, [r7, #15]
 8005878:	4611      	mov	r1, r2
 800587a:	4618      	mov	r0, r3
 800587c:	f7fe fe86 	bl	800458c <fast_crc8_maxim_byte>
 8005880:	4603      	mov	r3, r0
 8005882:	73fb      	strb	r3, [r7, #15]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	7bfa      	ldrb	r2, [r7, #15]
 8005888:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309
#endif /* D_RAW_P_CRC_ENA */

	return D_RAW_P_OK;
 800588c:	2301      	movs	r3, #1
}
 800588e:	4618      	mov	r0, r3
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	0800a344 	.word	0x0800a344
 800589c:	0800a720 	.word	0x0800a720
 80058a0:	0800a100 	.word	0x0800a100
 80058a4:	0800a330 	.word	0x0800a330
 80058a8:	0800a3a8 	.word	0x0800a3a8
 80058ac:	0800a380 	.word	0x0800a380

080058b0 <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b084      	sub	sp, #16
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	6078      	str	r0, [r7, #4]
		if(RawParser_dma_addTxByte(self, byte) != D_RAW_P_OK) {		\
			goto error;												\
		}

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f893 3309 	ldrb.w	r3, [r3, #777]	@ 0x309
 80058be:	73fb      	strb	r3, [r7, #15]
#endif /* D_RAW_P_CRC_ENA */

	reg ramained_len = self->length_write_control;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	f8d3 3330 	ldr.w	r3, [r3, #816]	@ 0x330
 80058c6:	60bb      	str	r3, [r7, #8]
	while(ramained_len) { 							// fill remaining len
 80058c8:	e010      	b.n	80058ec <RawParser_dma_finishTransmittPacket+0x3c>
		WRITE_CHECK_BYTE(0x00);
 80058ca:	2100      	movs	r1, #0
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f7ff fed1 	bl	8005674 <RawParser_dma_addTxByte>
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d11c      	bne.n	8005912 <RawParser_dma_finishTransmittPacket+0x62>

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, 0x00);
 80058d8:	7bfb      	ldrb	r3, [r7, #15]
 80058da:	2100      	movs	r1, #0
 80058dc:	4618      	mov	r0, r3
 80058de:	f7fe fe55 	bl	800458c <fast_crc8_maxim_byte>
 80058e2:	4603      	mov	r3, r0
 80058e4:	73fb      	strb	r3, [r7, #15]
#endif /* D_RAW_P_CRC_ENA */

		--ramained_len;
 80058e6:	68bb      	ldr	r3, [r7, #8]
 80058e8:	3b01      	subs	r3, #1
 80058ea:	60bb      	str	r3, [r7, #8]
	while(ramained_len) { 							// fill remaining len
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d1eb      	bne.n	80058ca <RawParser_dma_finishTransmittPacket+0x1a>
	D_RAW_P_CRC_FINAL(r_crc);


#   ifdef D_RAW_P_USE_CRC8

	WRITE_CHECK_BYTE(r_crc);
 80058f2:	7bfb      	ldrb	r3, [r7, #15]
 80058f4:	4619      	mov	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f7ff febc 	bl	8005674 <RawParser_dma_addTxByte>
 80058fc:	4603      	mov	r3, r0
 80058fe:	2b01      	cmp	r3, #1
 8005900:	d107      	bne.n	8005912 <RawParser_dma_finishTransmittPacket+0x62>
	WRITE_CHECK_BYTE((u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

	self->length_write_control = 0;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
	return &self->TX;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c
 8005910:	e006      	b.n	8005920 <RawParser_dma_finishTransmittPacket+0x70>

	error:
	self->TX.size = 0;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	f8c3 2320 	str.w	r2, [r3, #800]	@ 0x320
	return &self->TX;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f503 7347 	add.w	r3, r3, #796	@ 0x31c

#undef WRITE_CHECK_BYTE
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <RawParser_dma_universalWrite>:


// function for use universal macro ---------------------------------------------------------------------------------------------------------
int RawParser_dma_universalWrite(RawParser_dma_t* const self, reg totalLenInByte, const reg typelenInByte, const u8 *data)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b086      	sub	sp, #24
 800592c:	af00      	add	r7, sp, #0
 800592e:	60f8      	str	r0, [r7, #12]
 8005930:	60b9      	str	r1, [r7, #8]
 8005932:	607a      	str	r2, [r7, #4]
 8005934:	603b      	str	r3, [r7, #0]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_universalWrite: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	reg r_remaining_len = self->length_write_control;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f8d3 3330 	ldr.w	r3, [r3, #816]	@ 0x330
 800593c:	617b      	str	r3, [r7, #20]

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	f893 3309 	ldrb.w	r3, [r3, #777]	@ 0x309
 8005944:	74fb      	strb	r3, [r7, #19]
#endif /* D_RAW_P_CRC_ENA */

#if defined(__LITTLE_ENDIAN__)

	while(totalLenInByte && r_remaining_len) {
 8005946:	e01d      	b.n	8005984 <RawParser_dma_universalWrite+0x5c>
		const u8 b = *data;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	74bb      	strb	r3, [r7, #18]

		if(RawParser_dma_addTxByte(self, b) != D_RAW_P_OK) {
 800594e:	7cbb      	ldrb	r3, [r7, #18]
 8005950:	4619      	mov	r1, r3
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff fe8e 	bl	8005674 <RawParser_dma_addTxByte>
 8005958:	4603      	mov	r3, r0
 800595a:	2b01      	cmp	r3, #1
 800595c:	d001      	beq.n	8005962 <RawParser_dma_universalWrite+0x3a>
			return D_RAW_P_ERROR;
 800595e:	2300      	movs	r3, #0
 8005960:	e01f      	b.n	80059a2 <RawParser_dma_universalWrite+0x7a>
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, b);
 8005962:	7cba      	ldrb	r2, [r7, #18]
 8005964:	7cfb      	ldrb	r3, [r7, #19]
 8005966:	4611      	mov	r1, r2
 8005968:	4618      	mov	r0, r3
 800596a:	f7fe fe0f 	bl	800458c <fast_crc8_maxim_byte>
 800596e:	4603      	mov	r3, r0
 8005970:	74fb      	strb	r3, [r7, #19]
#endif /* D_RAW_P_CRC_ENA */

		--totalLenInByte;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3b01      	subs	r3, #1
 8005976:	60bb      	str	r3, [r7, #8]
		--r_remaining_len;
 8005978:	697b      	ldr	r3, [r7, #20]
 800597a:	3b01      	subs	r3, #1
 800597c:	617b      	str	r3, [r7, #20]
		++data;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	3301      	adds	r3, #1
 8005982:	603b      	str	r3, [r7, #0]
	while(totalLenInByte && r_remaining_len) {
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d002      	beq.n	8005990 <RawParser_dma_universalWrite+0x68>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1db      	bne.n	8005948 <RawParser_dma_universalWrite+0x20>
			}
		}
	}
#endif /* ORDER SELECTION */

	self->length_write_control = r_remaining_len;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	f8c3 2330 	str.w	r2, [r3, #816]	@ 0x330
#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	7cfa      	ldrb	r2, [r7, #19]
 800599c:	f883 2309 	strb.w	r2, [r3, #777]	@ 0x309
#endif /* D_RAW_P_CRC_ENA */

	return D_RAW_P_OK;
 80059a0:	2301      	movs	r3, #1
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3718      	adds	r7, #24
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}
	...

080059ac <RawParser_dma_universalRead>:

int RawParser_dma_universalRead(RawParser_dma_t* const self, reg totalLenInByte, const reg typelenInByte, u8 *data)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b088      	sub	sp, #32
 80059b0:	af02      	add	r7, sp, #8
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	60b9      	str	r1, [r7, #8]
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	603b      	str	r3, [r7, #0]
#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_universalRead: No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	// move to cash
	const u8* const RX_data = self->RX.data;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f8d3 3324 	ldr.w	r3, [r3, #804]	@ 0x324
 80059c0:	617b      	str	r3, [r7, #20]
	reg uniRXPosition = self->uniRXPosition;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	f8d3 332c 	ldr.w	r3, [r3, #812]	@ 0x32c
 80059c8:	613b      	str	r3, [r7, #16]

	M_Assert_BreakSaveCheck(((uniRXPosition + totalLenInByte) > self->RX.size), M_EMPTY, return D_RAW_P_ERROR, "RawParser_dma_universalRead: no length for reading");
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	441a      	add	r2, r3
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f8d3 3328 	ldr.w	r3, [r3, #808]	@ 0x328
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d90c      	bls.n	80059f4 <RawParser_dma_universalRead+0x48>
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <RawParser_dma_universalRead+0x70>)
 80059dc:	9301      	str	r3, [sp, #4]
 80059de:	4b10      	ldr	r3, [pc, #64]	@ (8005a20 <RawParser_dma_universalRead+0x74>)
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	f44f 7342 	mov.w	r3, #776	@ 0x308
 80059e6:	4a0f      	ldr	r2, [pc, #60]	@ (8005a24 <RawParser_dma_universalRead+0x78>)
 80059e8:	2101      	movs	r1, #1
 80059ea:	480f      	ldr	r0, [pc, #60]	@ (8005a28 <RawParser_dma_universalRead+0x7c>)
 80059ec:	f7fe fbf2 	bl	80041d4 <__M_Error>
 80059f0:	2300      	movs	r3, #0
 80059f2:	e00e      	b.n	8005a12 <RawParser_dma_universalRead+0x66>

#if defined(__LITTLE_ENDIAN__)

	// do logic
	memcpy(data, &RX_data[uniRXPosition], totalLenInByte);
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	4413      	add	r3, r2
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	4619      	mov	r1, r3
 80059fe:	6838      	ldr	r0, [r7, #0]
 8005a00:	f002 fc85 	bl	800830e <memcpy>
	self->uniRXPosition = uniRXPosition + totalLenInByte;
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	441a      	add	r2, r3
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f8c3 232c 	str.w	r2, [r3, #812]	@ 0x32c
		uniRXPosition += n;
	}
	self->uniRXPosition = uniRXPosition;
#endif /* ORDER SELECTION */

	return D_RAW_P_OK;
 8005a10:	2301      	movs	r3, #1
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	0800a428 	.word	0x0800a428
 8005a20:	0800a744 	.word	0x0800a744
 8005a24:	0800a100 	.word	0x0800a100
 8005a28:	0800a3f4 	.word	0x0800a3f4

08005a2c <_write>:

extern UART_HandleTypeDef huart1;
#define UART_PRINTF	huart1

int _write(int file, char *ptr, int len)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b084      	sub	sp, #16
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&UART_PRINTF, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	b29a      	uxth	r2, r3
 8005a3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005a40:	68b9      	ldr	r1, [r7, #8]
 8005a42:	4804      	ldr	r0, [pc, #16]	@ (8005a54 <_write+0x28>)
 8005a44:	f7fc ffd8 	bl	80029f8 <HAL_UART_Transmit>
	return len;
 8005a48:	687b      	ldr	r3, [r7, #4]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop
 8005a54:	200001f4 	.word	0x200001f4

08005a58 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 8005a5c:	4b0b      	ldr	r3, [pc, #44]	@ (8005a8c <IRQ_UNLOCK+0x34>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	dc05      	bgt.n	8005a70 <IRQ_UNLOCK+0x18>
 8005a64:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <IRQ_UNLOCK+0x38>)
 8005a66:	4a0b      	ldr	r2, [pc, #44]	@ (8005a94 <IRQ_UNLOCK+0x3c>)
 8005a68:	2137      	movs	r1, #55	@ 0x37
 8005a6a:	480b      	ldr	r0, [pc, #44]	@ (8005a98 <IRQ_UNLOCK+0x40>)
 8005a6c:	f001 f8b8 	bl	8006be0 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 8005a70:	4b06      	ldr	r3, [pc, #24]	@ (8005a8c <IRQ_UNLOCK+0x34>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	3b01      	subs	r3, #1
 8005a76:	4a05      	ldr	r2, [pc, #20]	@ (8005a8c <IRQ_UNLOCK+0x34>)
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	dc04      	bgt.n	8005a88 <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 8005a7e:	4b03      	ldr	r3, [pc, #12]	@ (8005a8c <IRQ_UNLOCK+0x34>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005a84:	b662      	cpsie	i
}
 8005a86:	bf00      	nop
        __enable_irq();
    }
}
 8005a88:	bf00      	nop
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	200002c8 	.word	0x200002c8
 8005a90:	0800a45c 	.word	0x0800a45c
 8005a94:	0800a760 	.word	0x0800a760
 8005a98:	0800a470 	.word	0x0800a470

08005a9c <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005aa0:	b672      	cpsid	i
}
 8005aa2:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 8005aa4:	4b04      	ldr	r3, [pc, #16]	@ (8005ab8 <IRQ_LOCK+0x1c>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	4a03      	ldr	r2, [pc, #12]	@ (8005ab8 <IRQ_LOCK+0x1c>)
 8005aac:	6013      	str	r3, [r2, #0]
}
 8005aae:	bf00      	nop
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bc80      	pop	{r7}
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	200002c8 	.word	0x200002c8

08005abc <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005abc:	b480      	push	{r7}
 8005abe:	b083      	sub	sp, #12
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	bc80      	pop	{r7}
 8005ad0:	4770      	bx	lr
	...

08005ad4 <_ZN13TimingManager7proceedEv>:
    static inline void proceed() {
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 8005ada:	4b1a      	ldr	r3, [pc, #104]	@ (8005b44 <_ZN13TimingManager7proceedEv+0x70>)
 8005adc:	60fb      	str	r3, [r7, #12]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 f878 	bl	8005bd4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8005ae4:	4603      	mov	r3, r0
 8005ae6:	607b      	str	r3, [r7, #4]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f883 	bl	8005bf4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8005aee:	4603      	mov	r3, r0
 8005af0:	603b      	str	r3, [r7, #0]
 8005af2:	e018      	b.n	8005b26 <_ZN13TimingManager7proceedEv+0x52>
 8005af4:	1d3b      	adds	r3, r7, #4
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 f8b4 	bl	8005c64 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 8005afc:	4603      	mov	r3, r0
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 8005b02:	68bb      	ldr	r3, [r7, #8]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d004      	beq.n	8005b1e <_ZN13TimingManager7proceedEv+0x4a>
                --timer->m_counter;
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	1e5a      	subs	r2, r3, #1
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f890 	bl	8005c46 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 8005b26:	463a      	mov	r2, r7
 8005b28:	1d3b      	adds	r3, r7, #4
 8005b2a:	4611      	mov	r1, r2
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f000 f872 	bl	8005c16 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d1dd      	bne.n	8005af4 <_ZN13TimingManager7proceedEv+0x20>
    }
 8005b38:	bf00      	nop
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}
 8005b42:	bf00      	nop
 8005b44:	200002cc 	.word	0x200002cc

08005b48 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 f8a2 	bl	8005c9a <_ZNSaIP13TimingManagerED1Ev>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	4618      	mov	r0, r3
 8005b5a:	3708      	adds	r7, #8
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	bd80      	pop	{r7, pc}

08005b60 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b082      	sub	sp, #8
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	6078      	str	r0, [r7, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f000 f885 	bl	8005c7a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	3708      	adds	r7, #8
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	4618      	mov	r0, r3
 8005b86:	f7ff ffeb 	bl	8005b60 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3708      	adds	r7, #8
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <_ZN13TimingManagerC1Ev>:
	if (it != m_timers.end()) {
		m_timers.erase(it);
	}
}

TimingManager::TimingManager()
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b084      	sub	sp, #16
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]
{
	m_counter = 0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
	m_timers.push_back(this);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60fb      	str	r3, [r7, #12]
 8005bac:	f107 030c 	add.w	r3, r7, #12
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	4804      	ldr	r0, [pc, #16]	@ (8005bc4 <_ZN13TimingManagerC1Ev+0x30>)
 8005bb4:	f000 f896 	bl	8005ce4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>
}
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3710      	adds	r7, #16
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
 8005bc2:	bf00      	nop
 8005bc4:	200002cc 	.word	0x200002cc

08005bc8 <HAL_SYSTICK_Callback>:


//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 8005bcc:	f7ff ff82 	bl	8005ad4 <_ZN13TimingManager7proceedEv>
}
 8005bd0:	bf00      	nop
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b084      	sub	sp, #16
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005bdc:	687a      	ldr	r2, [r7, #4]
 8005bde:	f107 030c 	add.w	r3, r7, #12
 8005be2:	4611      	mov	r1, r2
 8005be4:	4618      	mov	r0, r3
 8005be6:	f000 f88e 	bl	8005d06 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	4618      	mov	r0, r3
 8005bee:	3710      	adds	r7, #16
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b084      	sub	sp, #16
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	1d1a      	adds	r2, r3, #4
 8005c00:	f107 030c 	add.w	r3, r7, #12
 8005c04:	4611      	mov	r1, r2
 8005c06:	4618      	mov	r0, r3
 8005c08:	f000 f87d 	bl	8005d06 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3710      	adds	r7, #16
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}

08005c16 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005c16:	b590      	push	{r4, r7, lr}
 8005c18:	b083      	sub	sp, #12
 8005c1a:	af00      	add	r7, sp, #0
 8005c1c:	6078      	str	r0, [r7, #4]
 8005c1e:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f87f 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c26:	4603      	mov	r3, r0
 8005c28:	681c      	ldr	r4, [r3, #0]
 8005c2a:	6838      	ldr	r0, [r7, #0]
 8005c2c:	f000 f87a 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8005c30:	4603      	mov	r3, r0
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	429c      	cmp	r4, r3
 8005c36:	bf14      	ite	ne
 8005c38:	2301      	movne	r3, #1
 8005c3a:	2300      	moveq	r3, #0
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd90      	pop	{r4, r7, pc}

08005c46 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8005c46:	b480      	push	{r7}
 8005c48:	b083      	sub	sp, #12
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
	++_M_current;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	1d1a      	adds	r2, r3, #4
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	601a      	str	r2, [r3, #0]
	return *this;
 8005c58:	687b      	ldr	r3, [r7, #4]
      }
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	370c      	adds	r7, #12
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bc80      	pop	{r7}
 8005c62:	4770      	bx	lr

08005c64 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	bc80      	pop	{r7}
 8005c78:	4770      	bx	lr

08005c7a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b082      	sub	sp, #8
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f000 f858 	bl	8005d38 <_ZNSaIP13TimingManagerEC1Ev>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 f860 	bl	8005d50 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4618      	mov	r0, r3
 8005c94:	3708      	adds	r7, #8
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6878      	ldr	r0, [r7, #4]
 8005ca4:	f000 f867 	bl	8005d76 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4618      	mov	r0, r3
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b082      	sub	sp, #8
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689a      	ldr	r2, [r3, #8]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	1ad3      	subs	r3, r2, r3
 8005cc8:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005cca:	461a      	mov	r2, r3
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 f85c 	bl	8005d8a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7ff ff37 	bl	8005b48 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3708      	adds	r7, #8
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b082      	sub	sp, #8
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	6078      	str	r0, [r7, #4]
 8005cec:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 8005cee:	6838      	ldr	r0, [r7, #0]
 8005cf0:	f000 f85e 	bl	8005db0 <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f863 	bl	8005dc4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 8005cfe:	bf00      	nop
 8005d00:	3708      	adds	r7, #8
 8005d02:	46bd      	mov	sp, r7
 8005d04:	bd80      	pop	{r7, pc}

08005d06 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005d06:	b480      	push	{r7}
 8005d08:	b083      	sub	sp, #12
 8005d0a:	af00      	add	r7, sp, #0
 8005d0c:	6078      	str	r0, [r7, #4]
 8005d0e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	601a      	str	r2, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	370c      	adds	r7, #12
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bc80      	pop	{r7}
 8005d22:	4770      	bx	lr

08005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	4618      	mov	r0, r3
 8005d30:	370c      	adds	r7, #12
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f86d 	bl	8005e20 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3708      	adds	r7, #8
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005d50:	b480      	push	{r7}
 8005d52:	b083      	sub	sp, #12
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	605a      	str	r2, [r3, #4]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	609a      	str	r2, [r3, #8]
	{ }
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	370c      	adds	r7, #12
 8005d70:	46bd      	mov	sp, r7
 8005d72:	bc80      	pop	{r7}
 8005d74:	4770      	bx	lr

08005d76 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005d76:	b480      	push	{r7}
 8005d78:	b083      	sub	sp, #12
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	4618      	mov	r0, r3
 8005d82:	370c      	adds	r7, #12
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr

08005d8a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	60f8      	str	r0, [r7, #12]
 8005d92:	60b9      	str	r1, [r7, #8]
 8005d94:	607a      	str	r2, [r7, #4]
	if (__p)
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d005      	beq.n	8005da8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 f846 	bl	8005e34 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 8005da8:	bf00      	nop
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}

08005db0 <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005db0:	b480      	push	{r7}
 8005db2:	b083      	sub	sp, #12
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4618      	mov	r0, r3
 8005dbc:	370c      	adds	r7, #12
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bc80      	pop	{r7}
 8005dc2:	4770      	bx	lr

08005dc4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8005dc4:	b5b0      	push	{r4, r5, r7, lr}
 8005dc6:	b082      	sub	sp, #8
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	429a      	cmp	r2, r3
 8005dd8:	d011      	beq.n	8005dfe <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8005dda:	687c      	ldr	r4, [r7, #4]
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	685d      	ldr	r5, [r3, #4]
 8005de0:	6838      	ldr	r0, [r7, #0]
 8005de2:	f000 f836 	bl	8005e52 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8005de6:	4603      	mov	r3, r0
 8005de8:	461a      	mov	r2, r3
 8005dea:	4629      	mov	r1, r5
 8005dec:	4620      	mov	r0, r4
 8005dee:	f000 f83a 	bl	8005e66 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	1d1a      	adds	r2, r3, #4
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 8005dfc:	e00c      	b.n	8005e18 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f7ff fef8 	bl	8005bf4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8005e04:	4604      	mov	r4, r0
 8005e06:	6838      	ldr	r0, [r7, #0]
 8005e08:	f000 f823 	bl	8005e52 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4621      	mov	r1, r4
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 f850 	bl	8005eb8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8005e18:	bf00      	nop
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bdb0      	pop	{r4, r5, r7, pc}

08005e20 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005e20:	b480      	push	{r7}
 8005e22:	b083      	sub	sp, #12
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bc80      	pop	{r7}
 8005e32:	4770      	bx	lr

08005e34 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005e40:	687a      	ldr	r2, [r7, #4]
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	68f8      	ldr	r0, [r7, #12]
 8005e46:	f000 f8f3 	bl	8006030 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 8005e4a:	bf00      	nop
 8005e4c:	3710      	adds	r7, #16
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}

08005e52 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005e52:	b480      	push	{r7}
 8005e54:	b083      	sub	sp, #12
 8005e56:	af00      	add	r7, sp, #0
 8005e58:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	bc80      	pop	{r7}
 8005e64:	4770      	bx	lr

08005e66 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005e66:	b580      	push	{r7, lr}
 8005e68:	b084      	sub	sp, #16
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f7ff ffed 	bl	8005e52 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	68b9      	ldr	r1, [r7, #8]
 8005e7e:	68f8      	ldr	r0, [r7, #12]
 8005e80:	f000 f8fb 	bl	800607a <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 f805 	bl	8005ea2 <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005e98:	4603      	mov	r3, r0
      }
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3708      	adds	r7, #8
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}

08005ea2 <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8005ea2:	b480      	push	{r7}
 8005ea4:	b083      	sub	sp, #12
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8005eaa:	2301      	movs	r3, #1
      }
 8005eac:	4618      	mov	r0, r3
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bc80      	pop	{r7}
 8005eb4:	4770      	bx	lr
	...

08005eb8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8005eb8:	b5b0      	push	{r4, r5, r7, lr}
 8005eba:	b08c      	sub	sp, #48	@ 0x30
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005ec4:	4a59      	ldr	r2, [pc, #356]	@ (800602c <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8005ec6:	2101      	movs	r1, #1
 8005ec8:	68f8      	ldr	r0, [r7, #12]
 8005eca:	f000 f8ec 	bl	80060a6 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>
 8005ece:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005edc:	68f8      	ldr	r0, [r7, #12]
 8005ede:	f7ff fe79 	bl	8005bd4 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	f107 0214 	add.w	r2, r7, #20
 8005eea:	f107 0308 	add.w	r3, r7, #8
 8005eee:	4611      	mov	r1, r2
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 f8ad 	bl	8006050 <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005efe:	4618      	mov	r0, r3
 8005f00:	f000 f918 	bl	8006134 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>
 8005f04:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8005f0a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005f10:	69ba      	ldr	r2, [r7, #24]
 8005f12:	18d5      	adds	r5, r2, r3
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f7ff ff9c 	bl	8005e52 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	4629      	mov	r1, r5
 8005f20:	4620      	mov	r0, r4
 8005f22:	f7ff ffa0 	bl	8005e66 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8005f26:	2300      	movs	r3, #0
 8005f28:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005f2a:	f7ff ffaf 	bl	8005e8c <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d027      	beq.n	8005f84 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005f34:	f107 0308 	add.w	r3, r7, #8
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f7ff fef3 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f000 f91d 	bl	8006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8005f4a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	4621      	mov	r1, r4
 8005f50:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f52:	f000 f903 	bl	800615c <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005f56:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8005f58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005f5e:	f107 0308 	add.w	r3, r7, #8
 8005f62:	4618      	mov	r0, r3
 8005f64:	f7ff fede 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 f908 	bl	8006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8005f74:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005f76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f78:	6a39      	ldr	r1, [r7, #32]
 8005f7a:	4620      	mov	r0, r4
 8005f7c:	f000 f8ee 	bl	800615c <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8005f80:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8005f82:	e026      	b.n	8005fd2 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8005f84:	f107 0308 	add.w	r3, r7, #8
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f7ff fecb 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	4618      	mov	r0, r3
 8005f96:	f000 f8f5 	bl	8006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8005f9a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005f9c:	69ba      	ldr	r2, [r7, #24]
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005fa2:	f000 f8f9 	bl	8006198 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005fa6:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8005fa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005faa:	3304      	adds	r3, #4
 8005fac:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8005fae:	f107 0308 	add.w	r3, r7, #8
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	f7ff feb6 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 f8e0 	bl	8006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8005fc4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005fc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005fc8:	6a39      	ldr	r1, [r7, #32]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f8e4 	bl	8006198 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8005fd0:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8005fd2:	f7ff ff5b 	bl	8005e8c <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	f083 0301 	eor.w	r3, r3, #1
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d009      	beq.n	8005ff6 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f000 f8cd 	bl	8006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8005fea:	4603      	mov	r3, r0
 8005fec:	461a      	mov	r2, r3
 8005fee:	6a39      	ldr	r1, [r7, #32]
 8005ff0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005ff2:	f000 f8ea 	bl	80061ca <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8005ff6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	1ad3      	subs	r3, r2, r3
 8006000:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8006002:	461a      	mov	r2, r3
 8006004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006006:	f7ff fec0 	bl	8005d8a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	69ba      	ldr	r2, [r7, #24]
 800600e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006014:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006018:	009b      	lsls	r3, r3, #2
 800601a:	69ba      	ldr	r2, [r7, #24]
 800601c:	441a      	add	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	609a      	str	r2, [r3, #8]
    }
 8006022:	bf00      	nop
 8006024:	3730      	adds	r7, #48	@ 0x30
 8006026:	46bd      	mov	sp, r7
 8006028:	bdb0      	pop	{r4, r5, r7, pc}
 800602a:	bf00      	nop
 800602c:	0800a498 	.word	0x0800a498

08006030 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	009b      	lsls	r3, r3, #2
 8006040:	4619      	mov	r1, r3
 8006042:	68b8      	ldr	r0, [r7, #8]
 8006044:	f000 fd9e 	bl	8006b84 <_ZdlPvj>
      }
 8006048:	bf00      	nop
 800604a:	3710      	adds	r7, #16
 800604c:	46bd      	mov	sp, r7
 800604e:	bd80      	pop	{r7, pc}

08006050 <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006050:	b590      	push	{r4, r7, lr}
 8006052:	b083      	sub	sp, #12
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
 8006058:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f7ff fe62 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8006060:	4603      	mov	r3, r0
 8006062:	681c      	ldr	r4, [r3, #0]
 8006064:	6838      	ldr	r0, [r7, #0]
 8006066:	f7ff fe5d 	bl	8005d24 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800606a:	4603      	mov	r3, r0
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	1ae3      	subs	r3, r4, r3
 8006070:	109b      	asrs	r3, r3, #2
 8006072:	4618      	mov	r0, r3
 8006074:	370c      	adds	r7, #12
 8006076:	46bd      	mov	sp, r7
 8006078:	bd90      	pop	{r4, r7, pc}

0800607a <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800607a:	b590      	push	{r4, r7, lr}
 800607c:	b085      	sub	sp, #20
 800607e:	af00      	add	r7, sp, #0
 8006080:	60f8      	str	r0, [r7, #12]
 8006082:	60b9      	str	r1, [r7, #8]
 8006084:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	4619      	mov	r1, r3
 800608a:	2004      	movs	r0, #4
 800608c:	f7ff fd16 	bl	8005abc <_ZnwjPv>
 8006090:	4604      	mov	r4, r0
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7ff fedd 	bl	8005e52 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8006098:	4603      	mov	r3, r0
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	6023      	str	r3, [r4, #0]
 800609e:	bf00      	nop
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	bd90      	pop	{r4, r7, pc}

080060a6 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80060a6:	b590      	push	{r4, r7, lr}
 80060a8:	b087      	sub	sp, #28
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	60f8      	str	r0, [r7, #12]
 80060ae:	60b9      	str	r1, [r7, #8]
 80060b0:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80060b2:	68f8      	ldr	r0, [r7, #12]
 80060b4:	f000 f8a7 	bl	8006206 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 80060b8:	4604      	mov	r4, r0
 80060ba:	68f8      	ldr	r0, [r7, #12]
 80060bc:	f000 f8b4 	bl	8006228 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80060c0:	4603      	mov	r3, r0
 80060c2:	1ae2      	subs	r2, r4, r3
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	bf34      	ite	cc
 80060ca:	2301      	movcc	r3, #1
 80060cc:	2300      	movcs	r3, #0
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d002      	beq.n	80060da <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80060d4:	6878      	ldr	r0, [r7, #4]
 80060d6:	f000 fd6e 	bl	8006bb6 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f000 f8a4 	bl	8006228 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80060e0:	4604      	mov	r4, r0
 80060e2:	68f8      	ldr	r0, [r7, #12]
 80060e4:	f000 f8a0 	bl	8006228 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80060e8:	4603      	mov	r3, r0
 80060ea:	613b      	str	r3, [r7, #16]
 80060ec:	f107 0208 	add.w	r2, r7, #8
 80060f0:	f107 0310 	add.w	r3, r7, #16
 80060f4:	4611      	mov	r1, r2
 80060f6:	4618      	mov	r0, r3
 80060f8:	f000 f8a5 	bl	8006246 <_ZSt3maxIjERKT_S2_S2_>
 80060fc:	4603      	mov	r3, r0
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4423      	add	r3, r4
 8006102:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	f000 f88f 	bl	8006228 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 800610a:	4602      	mov	r2, r0
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	4293      	cmp	r3, r2
 8006110:	d306      	bcc.n	8006120 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8006112:	68f8      	ldr	r0, [r7, #12]
 8006114:	f000 f877 	bl	8006206 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 8006118:	4602      	mov	r2, r0
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	4293      	cmp	r3, r2
 800611e:	d904      	bls.n	800612a <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x84>
 8006120:	68f8      	ldr	r0, [r7, #12]
 8006122:	f000 f870 	bl	8006206 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 8006126:	4603      	mov	r3, r0
 8006128:	e000      	b.n	800612c <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x86>
 800612a:	697b      	ldr	r3, [r7, #20]
      }
 800612c:	4618      	mov	r0, r3
 800612e:	371c      	adds	r7, #28
 8006130:	46bd      	mov	sp, r7
 8006132:	bd90      	pop	{r4, r7, pc}

08006134 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d006      	beq.n	8006152 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x1e>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6839      	ldr	r1, [r7, #0]
 8006148:	4618      	mov	r0, r3
 800614a:	f000 f88f 	bl	800626c <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>
 800614e:	4603      	mov	r3, r0
 8006150:	e000      	b.n	8006154 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x20>
 8006152:	2300      	movs	r3, #0
      }
 8006154:	4618      	mov	r0, r3
 8006156:	3708      	adds	r7, #8
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 800615c:	b590      	push	{r4, r7, lr}
 800615e:	b087      	sub	sp, #28
 8006160:	af02      	add	r7, sp, #8
 8006162:	60f8      	str	r0, [r7, #12]
 8006164:	60b9      	str	r1, [r7, #8]
 8006166:	607a      	str	r2, [r7, #4]
 8006168:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800616a:	f88d 4000 	strb.w	r4, [sp]
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	68b9      	ldr	r1, [r7, #8]
 8006174:	68f8      	ldr	r0, [r7, #12]
 8006176:	f000 f888 	bl	800628a <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800617a:	4603      	mov	r3, r0
      }
 800617c:	4618      	mov	r0, r3
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	bd90      	pop	{r4, r7, pc}

08006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006184:	b480      	push	{r7}
 8006186:	b083      	sub	sp, #12
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	4618      	mov	r0, r3
 8006190:	370c      	adds	r7, #12
 8006192:	46bd      	mov	sp, r7
 8006194:	bc80      	pop	{r7}
 8006196:	4770      	bx	lr

08006198 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006198:	b590      	push	{r4, r7, lr}
 800619a:	b085      	sub	sp, #20
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80061a6:	68f8      	ldr	r0, [r7, #12]
 80061a8:	f000 f881 	bl	80062ae <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 80061ac:	4604      	mov	r4, r0
 80061ae:	68b8      	ldr	r0, [r7, #8]
 80061b0:	f000 f87d 	bl	80062ae <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 80061b4:	4601      	mov	r1, r0
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f886 	bl	80062cc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80061c0:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 80061c2:	4618      	mov	r0, r3
 80061c4:	3714      	adds	r7, #20
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd90      	pop	{r4, r7, pc}

080061ca <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80061ca:	b580      	push	{r7, lr}
 80061cc:	b084      	sub	sp, #16
 80061ce:	af00      	add	r7, sp, #0
 80061d0:	60f8      	str	r0, [r7, #12]
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80061d6:	68b9      	ldr	r1, [r7, #8]
 80061d8:	68f8      	ldr	r0, [r7, #12]
 80061da:	f000 f888 	bl	80062ee <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 80061de:	bf00      	nop
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b084      	sub	sp, #16
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	60f8      	str	r0, [r7, #12]
 80061ee:	60b9      	str	r1, [r7, #8]
 80061f0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 f886 	bl	8006308 <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 80061fc:	4603      	mov	r3, r0
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}

08006206 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006206:	b580      	push	{r7, lr}
 8006208:	b082      	sub	sp, #8
 800620a:	af00      	add	r7, sp, #0
 800620c:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4618      	mov	r0, r3
 8006212:	f000 f8a3 	bl	800635c <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8006216:	4603      	mov	r3, r0
 8006218:	4618      	mov	r0, r3
 800621a:	f000 f885 	bl	8006328 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>
 800621e:	4603      	mov	r3, r0
 8006220:	4618      	mov	r0, r3
 8006222:	3708      	adds	r7, #8
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	1ad3      	subs	r3, r2, r3
 800623a:	109b      	asrs	r3, r3, #2
 800623c:	4618      	mov	r0, r3
 800623e:	370c      	adds	r7, #12
 8006240:	46bd      	mov	sp, r7
 8006242:	bc80      	pop	{r7}
 8006244:	4770      	bx	lr

08006246 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8006246:	b480      	push	{r7}
 8006248:	b083      	sub	sp, #12
 800624a:	af00      	add	r7, sp, #0
 800624c:	6078      	str	r0, [r7, #4]
 800624e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681a      	ldr	r2, [r3, #0]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	429a      	cmp	r2, r3
 800625a:	d201      	bcs.n	8006260 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	e000      	b.n	8006262 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006260:	687b      	ldr	r3, [r7, #4]
    }
 8006262:	4618      	mov	r0, r3
 8006264:	370c      	adds	r7, #12
 8006266:	46bd      	mov	sp, r7
 8006268:	bc80      	pop	{r7}
 800626a:	4770      	bx	lr

0800626c <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006276:	2200      	movs	r2, #0
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f878 	bl	8006370 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>
 8006280:	4603      	mov	r3, r0
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800628a:	b580      	push	{r7, lr}
 800628c:	b084      	sub	sp, #16
 800628e:	af00      	add	r7, sp, #0
 8006290:	60f8      	str	r0, [r7, #12]
 8006292:	60b9      	str	r1, [r7, #8]
 8006294:	607a      	str	r2, [r7, #4]
 8006296:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68b9      	ldr	r1, [r7, #8]
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f000 f88f 	bl	80063c2 <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 80062a4:	4603      	mov	r3, r0
      }
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80062b6:	f107 030c 	add.w	r3, r7, #12
 80062ba:	6879      	ldr	r1, [r7, #4]
 80062bc:	4618      	mov	r0, r3
 80062be:	f000 f89d 	bl	80063fc <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4618      	mov	r0, r3
 80062c6:	3710      	adds	r7, #16
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	607a      	str	r2, [r7, #4]
 80062d8:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f000 f89e 	bl	8006420 <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 80062e4:	4603      	mov	r3, r0
    }
 80062e6:	4618      	mov	r0, r3
 80062e8:	3710      	adds	r7, #16
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 80062f8:	6839      	ldr	r1, [r7, #0]
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f8a4 	bl	8006448 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 8006300:	bf00      	nop
 8006302:	3708      	adds	r7, #8
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	60f8      	str	r0, [r7, #12]
 8006310:	60b9      	str	r1, [r7, #8]
 8006312:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8006314:	687a      	ldr	r2, [r7, #4]
 8006316:	68b9      	ldr	r1, [r7, #8]
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f000 f89f 	bl	800645c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>
 800631e:	4603      	mov	r3, r0
    }
 8006320:	4618      	mov	r0, r3
 8006322:	3710      	adds	r7, #16
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}

08006328 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8006328:	b580      	push	{r7, lr}
 800632a:	b084      	sub	sp, #16
 800632c:	af00      	add	r7, sp, #0
 800632e:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006330:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 8006334:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f8ad 	bl	8006496 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>
 800633c:	4603      	mov	r3, r0
 800633e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006340:	f107 0208 	add.w	r2, r7, #8
 8006344:	f107 030c 	add.w	r3, r7, #12
 8006348:	4611      	mov	r1, r2
 800634a:	4618      	mov	r0, r3
 800634c:	f000 f8af 	bl	80064ae <_ZSt3minIjERKT_S2_S2_>
 8006350:	4603      	mov	r3, r0
 8006352:	681b      	ldr	r3, [r3, #0]
      }
 8006354:	4618      	mov	r0, r3
 8006356:	3710      	adds	r7, #16
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	4618      	mov	r0, r3
 8006368:	370c      	adds	r7, #12
 800636a:	46bd      	mov	sp, r7
 800636c:	bc80      	pop	{r7}
 800636e:	4770      	bx	lr

08006370 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006370:	b580      	push	{r7, lr}
 8006372:	b084      	sub	sp, #16
 8006374:	af00      	add	r7, sp, #0
 8006376:	60f8      	str	r0, [r7, #12]
 8006378:	60b9      	str	r1, [r7, #8]
 800637a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f000 f8a9 	bl	80064d4 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 8006382:	4602      	mov	r2, r0
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	4293      	cmp	r3, r2
 8006388:	bf8c      	ite	hi
 800638a:	2301      	movhi	r3, #1
 800638c:	2300      	movls	r3, #0
 800638e:	b2db      	uxtb	r3, r3
 8006390:	2b00      	cmp	r3, #0
 8006392:	bf14      	ite	ne
 8006394:	2301      	movne	r3, #1
 8006396:	2300      	moveq	r3, #0
 8006398:	b2db      	uxtb	r3, r3
 800639a:	2b00      	cmp	r3, #0
 800639c:	d007      	beq.n	80063ae <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a4:	d301      	bcc.n	80063aa <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 80063a6:	f000 fc03 	bl	8006bb0 <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 80063aa:	f000 fbfe 	bl	8006baa <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4618      	mov	r0, r3
 80063b4:	f000 fbe8 	bl	8006b88 <_Znwj>
 80063b8:	4603      	mov	r3, r0
      }
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}

080063c2 <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80063c2:	b5b0      	push	{r4, r5, r7, lr}
 80063c4:	b084      	sub	sp, #16
 80063c6:	af00      	add	r7, sp, #0
 80063c8:	60f8      	str	r0, [r7, #12]
 80063ca:	60b9      	str	r1, [r7, #8]
 80063cc:	607a      	str	r2, [r7, #4]
 80063ce:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 80063d0:	68f8      	ldr	r0, [r7, #12]
 80063d2:	f000 f88a 	bl	80064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80063d6:	4604      	mov	r4, r0
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	f000 f886 	bl	80064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80063de:	4605      	mov	r5, r0
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f882 	bl	80064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80063e6:	4602      	mov	r2, r0
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	4629      	mov	r1, r5
 80063ec:	4620      	mov	r0, r4
 80063ee:	f000 f886 	bl	80064fe <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 80063f2:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 80063f4:	4618      	mov	r0, r3
 80063f6:	3710      	adds	r7, #16
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bdb0      	pop	{r4, r5, r7, pc}

080063fc <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>:
      move_iterator(iterator_type __i)
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b082      	sub	sp, #8
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006406:	463b      	mov	r3, r7
 8006408:	4618      	mov	r0, r3
 800640a:	f000 f896 	bl	800653a <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>
 800640e:	4603      	mov	r3, r0
 8006410:	681a      	ldr	r2, [r3, #0]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4618      	mov	r0, r3
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 800642c:	2301      	movs	r3, #1
 800642e:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 8006430:	2301      	movs	r3, #1
 8006432:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	68b9      	ldr	r1, [r7, #8]
 8006438:	68f8      	ldr	r0, [r7, #12]
 800643a:	f000 f888 	bl	800654e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>
 800643e:	4603      	mov	r3, r0
    }
 8006440:	4618      	mov	r0, r3
 8006442:	3718      	adds	r7, #24
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
 8006452:	bf00      	nop
 8006454:	370c      	adds	r7, #12
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr

0800645c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	1ad3      	subs	r3, r2, r3
 800646e:	109b      	asrs	r3, r3, #2
 8006470:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d006      	beq.n	8006486 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	461a      	mov	r2, r3
 800647e:	68f9      	ldr	r1, [r7, #12]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 fe49 	bl	8008118 <memmove>
	  return __result + _Num;
 8006486:	697b      	ldr	r3, [r7, #20]
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	687a      	ldr	r2, [r7, #4]
 800648c:	4413      	add	r3, r2
	}
 800648e:	4618      	mov	r0, r3
 8006490:	3718      	adds	r7, #24
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}

08006496 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006496:	b580      	push	{r7, lr}
 8006498:	b082      	sub	sp, #8
 800649a:	af00      	add	r7, sp, #0
 800649c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f865 	bl	800656e <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>
 80064a4:	4603      	mov	r3, r0
      }
 80064a6:	4618      	mov	r0, r3
 80064a8:	3708      	adds	r7, #8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d201      	bcs.n	80064c8 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	e000      	b.n	80064ca <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80064c8:	687b      	ldr	r3, [r7, #4]
    }
 80064ca:	4618      	mov	r0, r3
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	bc80      	pop	{r7}
 80064d2:	4770      	bx	lr

080064d4 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80064dc:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 80064e0:	4618      	mov	r0, r3
 80064e2:	370c      	adds	r7, #12
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bc80      	pop	{r7}
 80064e8:	4770      	bx	lr

080064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>:
    __niter_base(_Iterator __it)
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	370c      	adds	r7, #12
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bc80      	pop	{r7}
 80064fc:	4770      	bx	lr

080064fe <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80064fe:	b580      	push	{r7, lr}
 8006500:	b086      	sub	sp, #24
 8006502:	af00      	add	r7, sp, #0
 8006504:	60f8      	str	r0, [r7, #12]
 8006506:	60b9      	str	r1, [r7, #8]
 8006508:	607a      	str	r2, [r7, #4]
 800650a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800650c:	68ba      	ldr	r2, [r7, #8]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	109b      	asrs	r3, r3, #2
 8006514:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	dd06      	ble.n	800652a <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	009b      	lsls	r3, r3, #2
 8006520:	461a      	mov	r2, r3
 8006522:	68f9      	ldr	r1, [r7, #12]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f001 fdf7 	bl	8008118 <memmove>
      return __result + __count;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	009b      	lsls	r3, r3, #2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	4413      	add	r3, r2
    }
 8006532:	4618      	mov	r0, r3
 8006534:	3718      	adds	r7, #24
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 800653a:	b480      	push	{r7}
 800653c:	b083      	sub	sp, #12
 800653e:	af00      	add	r7, sp, #0
 8006540:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4618      	mov	r0, r3
 8006546:	370c      	adds	r7, #12
 8006548:	46bd      	mov	sp, r7
 800654a:	bc80      	pop	{r7}
 800654c:	4770      	bx	lr

0800654e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800654e:	b580      	push	{r7, lr}
 8006550:	b084      	sub	sp, #16
 8006552:	af00      	add	r7, sp, #0
 8006554:	60f8      	str	r0, [r7, #12]
 8006556:	60b9      	str	r1, [r7, #8]
 8006558:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f811 	bl	8006586 <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 8006564:	4603      	mov	r3, r0
 8006566:	4618      	mov	r0, r3
 8006568:	3710      	adds	r7, #16
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800656e:	b580      	push	{r7, lr}
 8006570:	b082      	sub	sp, #8
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f7ff ffac 	bl	80064d4 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 800657c:	4603      	mov	r3, r0
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006586:	b590      	push	{r4, r7, lr}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f80f 	bl	80065b6 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006598:	4604      	mov	r4, r0
 800659a:	68b8      	ldr	r0, [r7, #8]
 800659c:	f000 f80b 	bl	80065b6 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80065a0:	4603      	mov	r3, r0
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	4619      	mov	r1, r3
 80065a6:	4620      	mov	r0, r4
 80065a8:	f000 f816 	bl	80065d8 <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 80065ac:	4603      	mov	r3, r0
    }
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	bd90      	pop	{r4, r7, pc}

080065b6 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80065b6:	b580      	push	{r7, lr}
 80065b8:	b082      	sub	sp, #8
 80065ba:	af00      	add	r7, sp, #0
 80065bc:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80065be:	1d3b      	adds	r3, r7, #4
 80065c0:	4618      	mov	r0, r3
 80065c2:	f000 f82c 	bl	800661e <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>
 80065c6:	4603      	mov	r3, r0
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 f833 	bl	8006634 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>
 80065ce:	4603      	mov	r3, r0
 80065d0:	4618      	mov	r0, r3
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 80065d8:	b5b0      	push	{r4, r5, r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80065e4:	68f8      	ldr	r0, [r7, #12]
 80065e6:	f7ff ff80 	bl	80064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80065ea:	4604      	mov	r4, r0
 80065ec:	68b8      	ldr	r0, [r7, #8]
 80065ee:	f7ff ff7c 	bl	80064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80065f2:	4605      	mov	r5, r0
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7ff ff77 	bl	80064ea <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 80065fc:	4603      	mov	r3, r0
 80065fe:	461a      	mov	r2, r3
 8006600:	4629      	mov	r1, r5
 8006602:	4620      	mov	r0, r4
 8006604:	f7ff fdef 	bl	80061e6 <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8006608:	4602      	mov	r2, r0
 800660a:	1d3b      	adds	r3, r7, #4
 800660c:	4611      	mov	r1, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f81a 	bl	8006648 <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>
 8006614:	4603      	mov	r3, r0
    }
 8006616:	4618      	mov	r0, r3
 8006618:	3710      	adds	r7, #16
 800661a:	46bd      	mov	sp, r7
 800661c:	bdb0      	pop	{r4, r5, r7, pc}

0800661e <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>:
      base() const
 800661e:	b480      	push	{r7}
 8006620:	b083      	sub	sp, #12
 8006622:	af00      	add	r7, sp, #0
 8006624:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	4618      	mov	r0, r3
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	bc80      	pop	{r7}
 8006632:	4770      	bx	lr

08006634 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	4618      	mov	r0, r3
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	bc80      	pop	{r7}
 8006646:	4770      	bx	lr

08006648 <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006648:	b480      	push	{r7}
 800664a:	b083      	sub	sp, #12
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
 8006650:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006652:	683b      	ldr	r3, [r7, #0]
 8006654:	4618      	mov	r0, r3
 8006656:	370c      	adds	r7, #12
 8006658:	46bd      	mov	sp, r7
 800665a:	bc80      	pop	{r7}
 800665c:	4770      	bx	lr
	...

08006660 <_Z41__static_initialization_and_destruction_0ii>:
 8006660:	b580      	push	{r7, lr}
 8006662:	b082      	sub	sp, #8
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d107      	bne.n	8006680 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006670:	683b      	ldr	r3, [r7, #0]
 8006672:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006676:	4293      	cmp	r3, r2
 8006678:	d102      	bne.n	8006680 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 800667a:	4809      	ldr	r0, [pc, #36]	@ (80066a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800667c:	f7ff fa7d 	bl	8005b7a <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d107      	bne.n	8006696 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800668c:	4293      	cmp	r3, r2
 800668e:	d102      	bne.n	8006696 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006690:	4803      	ldr	r0, [pc, #12]	@ (80066a0 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006692:	f000 f807 	bl	80066a4 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 8006696:	bf00      	nop
 8006698:	3708      	adds	r7, #8
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	200002cc 	.word	0x200002cc

080066a4 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80066a4:	b5b0      	push	{r4, r5, r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681c      	ldr	r4, [r3, #0]
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	4618      	mov	r0, r3
 80066b8:	f7ff fd64 	bl	8006184 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80066bc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80066be:	461a      	mov	r2, r3
 80066c0:	4629      	mov	r1, r5
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7ff fd81 	bl	80061ca <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f7ff faf1 	bl	8005cb2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	4618      	mov	r0, r3
 80066d4:	3708      	adds	r7, #8
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bdb0      	pop	{r4, r5, r7, pc}

080066da <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 80066da:	b580      	push	{r7, lr}
 80066dc:	af00      	add	r7, sp, #0
 80066de:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80066e2:	2001      	movs	r0, #1
 80066e4:	f7ff ffbc 	bl	8006660 <_Z41__static_initialization_and_destruction_0ii>
 80066e8:	bd80      	pop	{r7, pc}

080066ea <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 80066ea:	b580      	push	{r7, lr}
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80066f2:	2000      	movs	r0, #0
 80066f4:	f7ff ffb4 	bl	8006660 <_Z41__static_initialization_and_destruction_0ii>
 80066f8:	bd80      	pop	{r7, pc}

080066fa <UART_Init>:
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/

status_t UART_Init(stm32_DMA_uart_t* const self, UART_HandleTypeDef * const huart, const uint32_t rxBufferSize)
{
 80066fa:	b580      	push	{r7, lr}
 80066fc:	b086      	sub	sp, #24
 80066fe:	af00      	add	r7, sp, #0
 8006700:	60f8      	str	r0, [r7, #12]
 8006702:	60b9      	str	r1, [r7, #8]
 8006704:	607a      	str	r2, [r7, #4]
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d006      	beq.n	800671a <UART_Init+0x20>
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d003      	beq.n	800671a <UART_Init+0x20>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006718:	d902      	bls.n	8006720 <UART_Init+0x26>
		return ERROR_INVALID_ARGUMENT;
 800671a:	f06f 0304 	mvn.w	r3, #4
 800671e:	e045      	b.n	80067ac <UART_Init+0xb2>
	}

	memset(self, 0, sizeof(stm32_DMA_uart_t));
 8006720:	222c      	movs	r2, #44	@ 0x2c
 8006722:	2100      	movs	r1, #0
 8006724:	68f8      	ldr	r0, [r7, #12]
 8006726:	f001 fd11 	bl	800814c <memset>
	self->huart = huart;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	68ba      	ldr	r2, [r7, #8]
 800672e:	601a      	str	r2, [r3, #0]
	self->isTxBusy_ = false;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	711a      	strb	r2, [r3, #4]

#ifdef UART_CONTAINER_ENA

	if(pushContainerUartInstance(self) != STATUS_OK) {
 8006736:	68f8      	ldr	r0, [r7, #12]
 8006738:	f000 fa0e 	bl	8006b58 <pushContainerUartInstance>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d008      	beq.n	8006754 <UART_Init+0x5a>
		self->isTxBusy_ = true;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2201      	movs	r2, #1
 8006746:	711a      	strb	r2, [r3, #4]
		self->RX.rxBufferSize = 0;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	619a      	str	r2, [r3, #24]
		return ERROR_FAIL;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	e02b      	b.n	80067ac <UART_Init+0xb2>
	}

#endif /* UART_CONTAINER_ENA */

	void* const buf1 = malloc(rxBufferSize);
 8006754:	6878      	ldr	r0, [r7, #4]
 8006756:	f000 fa7d 	bl	8006c54 <malloc>
 800675a:	4603      	mov	r3, r0
 800675c:	617b      	str	r3, [r7, #20]
	if(buf1 == NULL) {
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d102      	bne.n	800676a <UART_Init+0x70>
		return ERROR_FAIL;
 8006764:	f04f 33ff 	mov.w	r3, #4294967295
 8006768:	e020      	b.n	80067ac <UART_Init+0xb2>
	}
	void* const buf2 = malloc(rxBufferSize);
 800676a:	6878      	ldr	r0, [r7, #4]
 800676c:	f000 fa72 	bl	8006c54 <malloc>
 8006770:	4603      	mov	r3, r0
 8006772:	613b      	str	r3, [r7, #16]
	if(buf2 == NULL) {
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d105      	bne.n	8006786 <UART_Init+0x8c>
		free(buf1);
 800677a:	6978      	ldr	r0, [r7, #20]
 800677c:	f000 fa72 	bl	8006c64 <free>
		return ERROR_FAIL;
 8006780:	f04f 33ff 	mov.w	r3, #4294967295
 8006784:	e012      	b.n	80067ac <UART_Init+0xb2>
	}

	self->RX.rxBuffer1 = buf1;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	61da      	str	r2, [r3, #28]
	self->RX.rxBuffer2 = buf2;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	621a      	str	r2, [r3, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	687a      	ldr	r2, [r7, #4]
 8006796:	619a      	str	r2, [r3, #24]

	//HAL_UART_Receive_DMA(huart, self->RX.rxBuffer1, rxBufferSize);
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	69da      	ldr	r2, [r3, #28]
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	629a      	str	r2, [r3, #40]	@ 0x28
	UART_SetRxCallback(self, 0, 0);
 80067a0:	2200      	movs	r2, #0
 80067a2:	2100      	movs	r1, #0
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	f000 f852 	bl	800684e <UART_SetRxCallback>

	return STATUS_OK;
 80067aa:	2300      	movs	r3, #0
}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3718      	adds	r7, #24
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <UART_SendBuffer>:

	return STATUS_OK;
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b086      	sub	sp, #24
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	60f8      	str	r0, [r7, #12]
 80067bc:	60b9      	str	r1, [r7, #8]
 80067be:	607a      	str	r2, [r7, #4]
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 80067c0:	68bb      	ldr	r3, [r7, #8]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d002      	beq.n	80067cc <UART_SendBuffer+0x18>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d102      	bne.n	80067d2 <UART_SendBuffer+0x1e>
		return ERROR_INVALID_ARGUMENT;
 80067cc:	f06f 0304 	mvn.w	r3, #4
 80067d0:	e020      	b.n	8006814 <UART_SendBuffer+0x60>
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 80067d2:	f7ff f963 	bl	8005a9c <IRQ_LOCK>
	if (self->isTxBusy_) {
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	791b      	ldrb	r3, [r3, #4]
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d003      	beq.n	80067e8 <UART_SendBuffer+0x34>
		IRQ_UNLOCK();
 80067e0:	f7ff f93a 	bl	8005a58 <IRQ_UNLOCK>
		return STATUS_BUSY;
 80067e4:	2302      	movs	r3, #2
 80067e6:	e015      	b.n	8006814 <UART_SendBuffer+0x60>
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2201      	movs	r2, #1
 80067ec:	711a      	strb	r2, [r3, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	b292      	uxth	r2, r2
 80067f6:	68b9      	ldr	r1, [r7, #8]
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fc f981 	bl	8002b00 <HAL_UART_Transmit_DMA>
 80067fe:	4603      	mov	r3, r0
 8006800:	75fb      	strb	r3, [r7, #23]
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8006802:	f7ff f929 	bl	8005a58 <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d002      	beq.n	8006812 <UART_SendBuffer+0x5e>
		return ERROR_FAIL;
 800680c:	f04f 33ff 	mov.w	r3, #4294967295
 8006810:	e000      	b.n	8006814 <UART_SendBuffer+0x60>
	}

	return STATUS_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
 800681c:	b480      	push	{r7}
 800681e:	b085      	sub	sp, #20
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	if (self->isTxBusy_) {
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	791b      	ldrb	r3, [r3, #4]
 800682c:	b2db      	uxtb	r3, r3
 800682e:	2b00      	cmp	r3, #0
 8006830:	d001      	beq.n	8006836 <UART_SetTxcallback+0x1a>
		return STATUS_BUSY;
 8006832:	2302      	movs	r3, #2
 8006834:	e006      	b.n	8006844 <UART_SetTxcallback+0x28>
	}

	self->TX.txCallback_ = f;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	609a      	str	r2, [r3, #8]
	self->TX.txCallbackData_ = captured;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	687a      	ldr	r2, [r7, #4]
 8006840:	60da      	str	r2, [r3, #12]

	return STATUS_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3714      	adds	r7, #20
 8006848:	46bd      	mov	sp, r7
 800684a:	bc80      	pop	{r7}
 800684c:	4770      	bx	lr

0800684e <UART_SetRxCallback>:


void UART_SetRxCallback(stm32_DMA_uart_t* const self, const uart_rx_callback_t f, void* const captured)
{
 800684e:	b580      	push	{r7, lr}
 8006850:	b088      	sub	sp, #32
 8006852:	af00      	add	r7, sp, #0
 8006854:	60f8      	str	r0, [r7, #12]
 8006856:	60b9      	str	r1, [r7, #8]
 8006858:	607a      	str	r2, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	61fb      	str	r3, [r7, #28]

	self->RX.rxCallback_ = f;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	68ba      	ldr	r2, [r7, #8]
 8006864:	611a      	str	r2, [r3, #16]
	self->RX.rxCallbackData_ = captured;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	615a      	str	r2, [r3, #20]

	/* Start receiving */
	if (f) {
 800686c:	68bb      	ldr	r3, [r7, #8]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d015      	beq.n	800689e <UART_SetRxCallback+0x50>
		uint8_t* const r_rxBuffer = self->RX.rxBuffer1;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	69db      	ldr	r3, [r3, #28]
 8006876:	61bb      	str	r3, [r7, #24]
		const uint32_t r_buff_size = self->RX.rxBufferSize;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	699b      	ldr	r3, [r3, #24]
 800687c:	617b      	str	r3, [r7, #20]

		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	b29b      	uxth	r3, r3
 8006882:	461a      	mov	r2, r3
 8006884:	69b9      	ldr	r1, [r7, #24]
 8006886:	69f8      	ldr	r0, [r7, #28]
 8006888:	f7fc f9aa 	bl	8002be0 <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	68da      	ldr	r2, [r3, #12]
 8006892:	69fb      	ldr	r3, [r7, #28]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f042 0210 	orr.w	r2, r2, #16
 800689a:	60da      	str	r2, [r3, #12]
	} else {
		HAL_UART_AbortReceive(huart);
		UART_RXCallback(self);
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
	}
}
 800689c:	e00d      	b.n	80068ba <UART_SetRxCallback+0x6c>
		HAL_UART_AbortReceive(huart);
 800689e:	69f8      	ldr	r0, [r7, #28]
 80068a0:	f7fc f9c3 	bl	8002c2a <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f841 	bl	800692c <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	68da      	ldr	r2, [r3, #12]
 80068b0:	69fb      	ldr	r3, [r7, #28]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 0210 	bic.w	r2, r2, #16
 80068b8:	60da      	str	r2, [r3, #12]
}
 80068ba:	bf00      	nop
 80068bc:	3720      	adds	r7, #32
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}

080068c2 <UART_SetErrorCallback>:

void UART_SetErrorCallback(stm32_DMA_uart_t* const self, const uart_error_callback_t f, void* const captured)
{
 80068c2:	b480      	push	{r7}
 80068c4:	b085      	sub	sp, #20
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	60f8      	str	r0, [r7, #12]
 80068ca:	60b9      	str	r1, [r7, #8]
 80068cc:	607a      	str	r2, [r7, #4]
	self->Error.errorCallback = f;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	625a      	str	r2, [r3, #36]	@ 0x24
	self->Error.errorCallbackData_ = captured;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80068da:	bf00      	nop
 80068dc:	3714      	adds	r7, #20
 80068de:	46bd      	mov	sp, r7
 80068e0:	bc80      	pop	{r7}
 80068e2:	4770      	bx	lr

080068e4 <USER_UART_IRQHandler>:
* IT Callbacks
 *****************************************************************************/

//general in stm32f1xx_it.c
void USER_UART_IRQHandler(stm32_DMA_uart_t* const self)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]

	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	f003 0310 	and.w	r3, r3, #16
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d110      	bne.n	8006922 <USER_UART_IRQHandler+0x3e>
		// On idle interruption
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8006900:	2300      	movs	r3, #0
 8006902:	60bb      	str	r3, [r7, #8]
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	60bb      	str	r3, [r7, #8]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	60bb      	str	r3, [r7, #8]
 8006914:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_AbortReceive(huart);
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7fc f987 	bl	8002c2a <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 800691c:	6878      	ldr	r0, [r7, #4]
 800691e:	f000 f805 	bl	800692c <UART_RXCallback>
	}
}
 8006922:	bf00      	nop
 8006924:	3710      	adds	r7, #16
 8006926:	46bd      	mov	sp, r7
 8006928:	bd80      	pop	{r7, pc}
	...

0800692c <UART_RXCallback>:

// rx callback in void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void UART_RXCallback(stm32_DMA_uart_t* const self)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b08c      	sub	sp, #48	@ 0x30
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	699b      	ldr	r3, [r3, #24]
 800694a:	623b      	str	r3, [r7, #32]

	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 800694c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800694e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006950:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006952:	429a      	cmp	r2, r3
 8006954:	d00b      	beq.n	800696e <UART_RXCallback+0x42>
 8006956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006958:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800695a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800695c:	429a      	cmp	r2, r3
 800695e:	d006      	beq.n	800696e <UART_RXCallback+0x42>
 8006960:	4b20      	ldr	r3, [pc, #128]	@ (80069e4 <UART_RXCallback+0xb8>)
 8006962:	4a21      	ldr	r2, [pc, #132]	@ (80069e8 <UART_RXCallback+0xbc>)
 8006964:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8006968:	4820      	ldr	r0, [pc, #128]	@ (80069ec <UART_RXCallback+0xc0>)
 800696a:	f000 f939 	bl	8006be0 <__assert_func>

	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800696e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006970:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	6a3a      	ldr	r2, [r7, #32]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	61fb      	str	r3, [r7, #28]
	uint8_t* const curr = huart->pRxBuffPtr;
 800697c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800697e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006980:	61bb      	str	r3, [r7, #24]
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8006982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006988:	429a      	cmp	r2, r3
 800698a:	d101      	bne.n	8006990 <UART_RXCallback+0x64>
 800698c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698e:	e000      	b.n	8006992 <UART_RXCallback+0x66>
 8006990:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006992:	617b      	str	r3, [r7, #20]

	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8006994:	6a3b      	ldr	r3, [r7, #32]
 8006996:	b29b      	uxth	r3, r3
 8006998:	461a      	mov	r2, r3
 800699a:	6979      	ldr	r1, [r7, #20]
 800699c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800699e:	f7fc f91f 	bl	8002be0 <HAL_UART_Receive_DMA>
 80069a2:	4603      	mov	r3, r0
 80069a4:	74fb      	strb	r3, [r7, #19]
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 80069a6:	7cfb      	ldrb	r3, [r7, #19]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d105      	bne.n	80069b8 <UART_RXCallback+0x8c>
 80069ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	2be0      	cmp	r3, #224	@ 0xe0
 80069b6:	d102      	bne.n	80069be <UART_RXCallback+0x92>
		UART_ErrorCallback(self);
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f000 f83d 	bl	8006a38 <UART_ErrorCallback>
	}


	void* const captured = self->RX.rxCallbackData_;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	60fb      	str	r3, [r7, #12]
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	60bb      	str	r3, [r7, #8]
	if (callback) {
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d004      	beq.n	80069da <UART_RXCallback+0xae>
		callback(curr, size, captured);
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	68fa      	ldr	r2, [r7, #12]
 80069d4:	69f9      	ldr	r1, [r7, #28]
 80069d6:	69b8      	ldr	r0, [r7, #24]
 80069d8:	4798      	blx	r3
	}
}
 80069da:	bf00      	nop
 80069dc:	3730      	adds	r7, #48	@ 0x30
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	0800a4b4 	.word	0x0800a4b4
 80069e8:	0800a76c 	.word	0x0800a76c
 80069ec:	0800a4fc 	.word	0x0800a4fc

080069f0 <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
	void* const captured = self->TX.txCallbackData_;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	617b      	str	r3, [r7, #20]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	613b      	str	r3, [r7, #16]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2be0      	cmp	r3, #224	@ 0xe0
 8006a10:	d102      	bne.n	8006a18 <UART_TXCallback+0x28>
 8006a12:	f04f 33ff 	mov.w	r3, #4294967295
 8006a16:	e000      	b.n	8006a1a <UART_TXCallback+0x2a>
 8006a18:	2300      	movs	r3, #0
 8006a1a:	60fb      	str	r3, [r7, #12]
	self->isTxBusy_ = false;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	711a      	strb	r2, [r3, #4]

	if (callback) {
 8006a22:	693b      	ldr	r3, [r7, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d003      	beq.n	8006a30 <UART_TXCallback+0x40>
		callback(status, captured);
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	6979      	ldr	r1, [r7, #20]
 8006a2c:	68f8      	ldr	r0, [r7, #12]
 8006a2e:	4798      	blx	r3
	}
}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}

08006a38 <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
 8006a3e:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	613b      	str	r3, [r7, #16]
	status_t status = ERROR_FAIL;
 8006a46:	f04f 33ff 	mov.w	r3, #4294967295
 8006a4a:	617b      	str	r3, [r7, #20]

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a50:	f003 0308 	and.w	r3, r3, #8
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d003      	beq.n	8006a60 <UART_ErrorCallback+0x28>
		status = ERROR_UART_RX_OVERRUN;
 8006a58:	f06f 0347 	mvn.w	r3, #71	@ 0x47
 8006a5c:	617b      	str	r3, [r7, #20]
 8006a5e:	e054      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a64:	f003 0304 	and.w	r3, r3, #4
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d003      	beq.n	8006a74 <UART_ErrorCallback+0x3c>
		status = ERROR_UART_FRAMING_ERR;
 8006a6c:	f06f 0349 	mvn.w	r3, #73	@ 0x49
 8006a70:	617b      	str	r3, [r7, #20]
 8006a72:	e04a      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a78:	f003 0302 	and.w	r3, r3, #2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d003      	beq.n	8006a88 <UART_ErrorCallback+0x50>
		status = ERROR_UART_RX_NOISE;
 8006a80:	f06f 0348 	mvn.w	r3, #72	@ 0x48
 8006a84:	617b      	str	r3, [r7, #20]
 8006a86:	e040      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d003      	beq.n	8006a9c <UART_ErrorCallback+0x64>
		status = ERROR_UART_TX_DMA_ERR;
 8006a94:	f06f 034a 	mvn.w	r3, #74	@ 0x4a
 8006a98:	617b      	str	r3, [r7, #20]
 8006a9a:	e036      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b24      	cmp	r3, #36	@ 0x24
 8006aa6:	d102      	bne.n	8006aae <UART_ErrorCallback+0x76>
		status = STATUS_BUSY;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	617b      	str	r3, [r7, #20]
 8006aac:	e02d      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ab4:	b2db      	uxtb	r3, r3
 8006ab6:	2b22      	cmp	r3, #34	@ 0x22
 8006ab8:	d102      	bne.n	8006ac0 <UART_ErrorCallback+0x88>
		status = STATUS_BUSY;
 8006aba:	2302      	movs	r3, #2
 8006abc:	617b      	str	r3, [r7, #20]
 8006abe:	e024      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b21      	cmp	r3, #33	@ 0x21
 8006aca:	d102      	bne.n	8006ad2 <UART_ErrorCallback+0x9a>
		status = STATUS_BUSY;
 8006acc:	2302      	movs	r3, #2
 8006ace:	617b      	str	r3, [r7, #20]
 8006ad0:	e01b      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006ad8:	b2db      	uxtb	r3, r3
 8006ada:	2b23      	cmp	r3, #35	@ 0x23
 8006adc:	d102      	bne.n	8006ae4 <UART_ErrorCallback+0xac>
		status = STATUS_BUSY;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	617b      	str	r3, [r7, #20]
 8006ae2:	e012      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006aea:	b2db      	uxtb	r3, r3
 8006aec:	2be0      	cmp	r3, #224	@ 0xe0
 8006aee:	d103      	bne.n	8006af8 <UART_ErrorCallback+0xc0>
		status = ERROR_FAIL;
 8006af0:	f04f 33ff 	mov.w	r3, #4294967295
 8006af4:	617b      	str	r3, [r7, #20]
 8006af6:	e008      	b.n	8006b0a <UART_ErrorCallback+0xd2>
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	2ba0      	cmp	r3, #160	@ 0xa0
 8006b02:	d102      	bne.n	8006b0a <UART_ErrorCallback+0xd2>
		status = ERROR_TIMEOUT;
 8006b04:	f06f 0305 	mvn.w	r3, #5
 8006b08:	617b      	str	r3, [r7, #20]
	}

	void* const captured = self->Error.errorCallbackData_;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	60fb      	str	r3, [r7, #12]
	const uart_error_callback_t callback = self->Error.errorCallback;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b14:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d003      	beq.n	8006b24 <UART_ErrorCallback+0xec>
		callback(status, captured);
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	68f9      	ldr	r1, [r7, #12]
 8006b20:	6978      	ldr	r0, [r7, #20]
 8006b22:	4798      	blx	r3
	}
}
 8006b24:	bf00      	nop
 8006b26:	3718      	adds	r7, #24
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}

08006b2c <getContainerUartInstance>:
	m_instance_counter = 0;
#endif /* (UART_CONTAINER_COUNT > 1) */
}

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
#if (UART_CONTAINER_COUNT == 1)

	stm32_DMA_uart_t* const r_inst = m_instances[0];
 8006b34:	4b07      	ldr	r3, [pc, #28]	@ (8006b54 <getContainerUartInstance+0x28>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	60fb      	str	r3, [r7, #12]
	if(r_inst->huart == huart) {
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d101      	bne.n	8006b48 <getContainerUartInstance+0x1c>
		return r_inst;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	e000      	b.n	8006b4a <getContainerUartInstance+0x1e>
			return r_inst;
		}
	}
#endif /* (UART_CONTAINER_COUNT == 1) */

	return NULL;
 8006b48:	2300      	movs	r3, #0
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bc80      	pop	{r7}
 8006b52:	4770      	bx	lr
 8006b54:	200002d8 	.word	0x200002d8

08006b58 <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
#if (UART_CONTAINER_COUNT == 1)
	if(inst == NULL) {
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d102      	bne.n	8006b6c <pushContainerUartInstance+0x14>
		return ERROR_FAIL;
 8006b66:	f04f 33ff 	mov.w	r3, #4294967295
 8006b6a:	e003      	b.n	8006b74 <pushContainerUartInstance+0x1c>
	}

	m_instances[0] = inst;
 8006b6c:	4a04      	ldr	r2, [pc, #16]	@ (8006b80 <pushContainerUartInstance+0x28>)
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6013      	str	r3, [r2, #0]
	}
	m_instances[m_instance_counter] = inst;
	++m_instance_counter;
#endif /* (UART_CONTAINER_COUNT == 1) */

	return STATUS_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bc80      	pop	{r7}
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	200002d8 	.word	0x200002d8

08006b84 <_ZdlPvj>:
 8006b84:	f000 b81a 	b.w	8006bbc <_ZdlPv>

08006b88 <_Znwj>:
 8006b88:	2801      	cmp	r0, #1
 8006b8a:	bf38      	it	cc
 8006b8c:	2001      	movcc	r0, #1
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	4604      	mov	r4, r0
 8006b92:	4620      	mov	r0, r4
 8006b94:	f000 f85e 	bl	8006c54 <malloc>
 8006b98:	b100      	cbz	r0, 8006b9c <_Znwj+0x14>
 8006b9a:	bd10      	pop	{r4, pc}
 8006b9c:	f000 f810 	bl	8006bc0 <_ZSt15get_new_handlerv>
 8006ba0:	b908      	cbnz	r0, 8006ba6 <_Znwj+0x1e>
 8006ba2:	f000 f815 	bl	8006bd0 <abort>
 8006ba6:	4780      	blx	r0
 8006ba8:	e7f3      	b.n	8006b92 <_Znwj+0xa>

08006baa <_ZSt17__throw_bad_allocv>:
 8006baa:	b508      	push	{r3, lr}
 8006bac:	f000 f810 	bl	8006bd0 <abort>

08006bb0 <_ZSt28__throw_bad_array_new_lengthv>:
 8006bb0:	b508      	push	{r3, lr}
 8006bb2:	f000 f80d 	bl	8006bd0 <abort>

08006bb6 <_ZSt20__throw_length_errorPKc>:
 8006bb6:	b508      	push	{r3, lr}
 8006bb8:	f000 f80a 	bl	8006bd0 <abort>

08006bbc <_ZdlPv>:
 8006bbc:	f000 b852 	b.w	8006c64 <free>

08006bc0 <_ZSt15get_new_handlerv>:
 8006bc0:	4b02      	ldr	r3, [pc, #8]	@ (8006bcc <_ZSt15get_new_handlerv+0xc>)
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	f3bf 8f5b 	dmb	ish
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	200002dc 	.word	0x200002dc

08006bd0 <abort>:
 8006bd0:	2006      	movs	r0, #6
 8006bd2:	b508      	push	{r3, lr}
 8006bd4:	f001 faea 	bl	80081ac <raise>
 8006bd8:	2001      	movs	r0, #1
 8006bda:	f7fa fb26 	bl	800122a <_exit>
	...

08006be0 <__assert_func>:
 8006be0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006be2:	4614      	mov	r4, r2
 8006be4:	461a      	mov	r2, r3
 8006be6:	4b09      	ldr	r3, [pc, #36]	@ (8006c0c <__assert_func+0x2c>)
 8006be8:	4605      	mov	r5, r0
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68d8      	ldr	r0, [r3, #12]
 8006bee:	b954      	cbnz	r4, 8006c06 <__assert_func+0x26>
 8006bf0:	4b07      	ldr	r3, [pc, #28]	@ (8006c10 <__assert_func+0x30>)
 8006bf2:	461c      	mov	r4, r3
 8006bf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006bf8:	9100      	str	r1, [sp, #0]
 8006bfa:	462b      	mov	r3, r5
 8006bfc:	4905      	ldr	r1, [pc, #20]	@ (8006c14 <__assert_func+0x34>)
 8006bfe:	f001 f859 	bl	8007cb4 <fiprintf>
 8006c02:	f7ff ffe5 	bl	8006bd0 <abort>
 8006c06:	4b04      	ldr	r3, [pc, #16]	@ (8006c18 <__assert_func+0x38>)
 8006c08:	e7f4      	b.n	8006bf4 <__assert_func+0x14>
 8006c0a:	bf00      	nop
 8006c0c:	20000018 	.word	0x20000018
 8006c10:	0800a7b7 	.word	0x0800a7b7
 8006c14:	0800a789 	.word	0x0800a789
 8006c18:	0800a77c 	.word	0x0800a77c

08006c1c <calloc>:
 8006c1c:	4b02      	ldr	r3, [pc, #8]	@ (8006c28 <calloc+0xc>)
 8006c1e:	460a      	mov	r2, r1
 8006c20:	4601      	mov	r1, r0
 8006c22:	6818      	ldr	r0, [r3, #0]
 8006c24:	f000 b802 	b.w	8006c2c <_calloc_r>
 8006c28:	20000018 	.word	0x20000018

08006c2c <_calloc_r>:
 8006c2c:	b570      	push	{r4, r5, r6, lr}
 8006c2e:	fba1 5402 	umull	r5, r4, r1, r2
 8006c32:	b93c      	cbnz	r4, 8006c44 <_calloc_r+0x18>
 8006c34:	4629      	mov	r1, r5
 8006c36:	f000 f83f 	bl	8006cb8 <_malloc_r>
 8006c3a:	4606      	mov	r6, r0
 8006c3c:	b928      	cbnz	r0, 8006c4a <_calloc_r+0x1e>
 8006c3e:	2600      	movs	r6, #0
 8006c40:	4630      	mov	r0, r6
 8006c42:	bd70      	pop	{r4, r5, r6, pc}
 8006c44:	220c      	movs	r2, #12
 8006c46:	6002      	str	r2, [r0, #0]
 8006c48:	e7f9      	b.n	8006c3e <_calloc_r+0x12>
 8006c4a:	462a      	mov	r2, r5
 8006c4c:	4621      	mov	r1, r4
 8006c4e:	f001 fa7d 	bl	800814c <memset>
 8006c52:	e7f5      	b.n	8006c40 <_calloc_r+0x14>

08006c54 <malloc>:
 8006c54:	4b02      	ldr	r3, [pc, #8]	@ (8006c60 <malloc+0xc>)
 8006c56:	4601      	mov	r1, r0
 8006c58:	6818      	ldr	r0, [r3, #0]
 8006c5a:	f000 b82d 	b.w	8006cb8 <_malloc_r>
 8006c5e:	bf00      	nop
 8006c60:	20000018 	.word	0x20000018

08006c64 <free>:
 8006c64:	4b02      	ldr	r3, [pc, #8]	@ (8006c70 <free+0xc>)
 8006c66:	4601      	mov	r1, r0
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f002 b9b1 	b.w	8008fd0 <_free_r>
 8006c6e:	bf00      	nop
 8006c70:	20000018 	.word	0x20000018

08006c74 <sbrk_aligned>:
 8006c74:	b570      	push	{r4, r5, r6, lr}
 8006c76:	4e0f      	ldr	r6, [pc, #60]	@ (8006cb4 <sbrk_aligned+0x40>)
 8006c78:	460c      	mov	r4, r1
 8006c7a:	6831      	ldr	r1, [r6, #0]
 8006c7c:	4605      	mov	r5, r0
 8006c7e:	b911      	cbnz	r1, 8006c86 <sbrk_aligned+0x12>
 8006c80:	f001 fae8 	bl	8008254 <_sbrk_r>
 8006c84:	6030      	str	r0, [r6, #0]
 8006c86:	4621      	mov	r1, r4
 8006c88:	4628      	mov	r0, r5
 8006c8a:	f001 fae3 	bl	8008254 <_sbrk_r>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	d103      	bne.n	8006c9a <sbrk_aligned+0x26>
 8006c92:	f04f 34ff 	mov.w	r4, #4294967295
 8006c96:	4620      	mov	r0, r4
 8006c98:	bd70      	pop	{r4, r5, r6, pc}
 8006c9a:	1cc4      	adds	r4, r0, #3
 8006c9c:	f024 0403 	bic.w	r4, r4, #3
 8006ca0:	42a0      	cmp	r0, r4
 8006ca2:	d0f8      	beq.n	8006c96 <sbrk_aligned+0x22>
 8006ca4:	1a21      	subs	r1, r4, r0
 8006ca6:	4628      	mov	r0, r5
 8006ca8:	f001 fad4 	bl	8008254 <_sbrk_r>
 8006cac:	3001      	adds	r0, #1
 8006cae:	d1f2      	bne.n	8006c96 <sbrk_aligned+0x22>
 8006cb0:	e7ef      	b.n	8006c92 <sbrk_aligned+0x1e>
 8006cb2:	bf00      	nop
 8006cb4:	200002e0 	.word	0x200002e0

08006cb8 <_malloc_r>:
 8006cb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006cbc:	1ccd      	adds	r5, r1, #3
 8006cbe:	f025 0503 	bic.w	r5, r5, #3
 8006cc2:	3508      	adds	r5, #8
 8006cc4:	2d0c      	cmp	r5, #12
 8006cc6:	bf38      	it	cc
 8006cc8:	250c      	movcc	r5, #12
 8006cca:	2d00      	cmp	r5, #0
 8006ccc:	4606      	mov	r6, r0
 8006cce:	db01      	blt.n	8006cd4 <_malloc_r+0x1c>
 8006cd0:	42a9      	cmp	r1, r5
 8006cd2:	d904      	bls.n	8006cde <_malloc_r+0x26>
 8006cd4:	230c      	movs	r3, #12
 8006cd6:	6033      	str	r3, [r6, #0]
 8006cd8:	2000      	movs	r0, #0
 8006cda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006cde:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006db4 <_malloc_r+0xfc>
 8006ce2:	f000 f869 	bl	8006db8 <__malloc_lock>
 8006ce6:	f8d8 3000 	ldr.w	r3, [r8]
 8006cea:	461c      	mov	r4, r3
 8006cec:	bb44      	cbnz	r4, 8006d40 <_malloc_r+0x88>
 8006cee:	4629      	mov	r1, r5
 8006cf0:	4630      	mov	r0, r6
 8006cf2:	f7ff ffbf 	bl	8006c74 <sbrk_aligned>
 8006cf6:	1c43      	adds	r3, r0, #1
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	d158      	bne.n	8006dae <_malloc_r+0xf6>
 8006cfc:	f8d8 4000 	ldr.w	r4, [r8]
 8006d00:	4627      	mov	r7, r4
 8006d02:	2f00      	cmp	r7, #0
 8006d04:	d143      	bne.n	8006d8e <_malloc_r+0xd6>
 8006d06:	2c00      	cmp	r4, #0
 8006d08:	d04b      	beq.n	8006da2 <_malloc_r+0xea>
 8006d0a:	6823      	ldr	r3, [r4, #0]
 8006d0c:	4639      	mov	r1, r7
 8006d0e:	4630      	mov	r0, r6
 8006d10:	eb04 0903 	add.w	r9, r4, r3
 8006d14:	f001 fa9e 	bl	8008254 <_sbrk_r>
 8006d18:	4581      	cmp	r9, r0
 8006d1a:	d142      	bne.n	8006da2 <_malloc_r+0xea>
 8006d1c:	6821      	ldr	r1, [r4, #0]
 8006d1e:	4630      	mov	r0, r6
 8006d20:	1a6d      	subs	r5, r5, r1
 8006d22:	4629      	mov	r1, r5
 8006d24:	f7ff ffa6 	bl	8006c74 <sbrk_aligned>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d03a      	beq.n	8006da2 <_malloc_r+0xea>
 8006d2c:	6823      	ldr	r3, [r4, #0]
 8006d2e:	442b      	add	r3, r5
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	f8d8 3000 	ldr.w	r3, [r8]
 8006d36:	685a      	ldr	r2, [r3, #4]
 8006d38:	bb62      	cbnz	r2, 8006d94 <_malloc_r+0xdc>
 8006d3a:	f8c8 7000 	str.w	r7, [r8]
 8006d3e:	e00f      	b.n	8006d60 <_malloc_r+0xa8>
 8006d40:	6822      	ldr	r2, [r4, #0]
 8006d42:	1b52      	subs	r2, r2, r5
 8006d44:	d420      	bmi.n	8006d88 <_malloc_r+0xd0>
 8006d46:	2a0b      	cmp	r2, #11
 8006d48:	d917      	bls.n	8006d7a <_malloc_r+0xc2>
 8006d4a:	1961      	adds	r1, r4, r5
 8006d4c:	42a3      	cmp	r3, r4
 8006d4e:	6025      	str	r5, [r4, #0]
 8006d50:	bf18      	it	ne
 8006d52:	6059      	strne	r1, [r3, #4]
 8006d54:	6863      	ldr	r3, [r4, #4]
 8006d56:	bf08      	it	eq
 8006d58:	f8c8 1000 	streq.w	r1, [r8]
 8006d5c:	5162      	str	r2, [r4, r5]
 8006d5e:	604b      	str	r3, [r1, #4]
 8006d60:	4630      	mov	r0, r6
 8006d62:	f000 f82f 	bl	8006dc4 <__malloc_unlock>
 8006d66:	f104 000b 	add.w	r0, r4, #11
 8006d6a:	1d23      	adds	r3, r4, #4
 8006d6c:	f020 0007 	bic.w	r0, r0, #7
 8006d70:	1ac2      	subs	r2, r0, r3
 8006d72:	bf1c      	itt	ne
 8006d74:	1a1b      	subne	r3, r3, r0
 8006d76:	50a3      	strne	r3, [r4, r2]
 8006d78:	e7af      	b.n	8006cda <_malloc_r+0x22>
 8006d7a:	6862      	ldr	r2, [r4, #4]
 8006d7c:	42a3      	cmp	r3, r4
 8006d7e:	bf0c      	ite	eq
 8006d80:	f8c8 2000 	streq.w	r2, [r8]
 8006d84:	605a      	strne	r2, [r3, #4]
 8006d86:	e7eb      	b.n	8006d60 <_malloc_r+0xa8>
 8006d88:	4623      	mov	r3, r4
 8006d8a:	6864      	ldr	r4, [r4, #4]
 8006d8c:	e7ae      	b.n	8006cec <_malloc_r+0x34>
 8006d8e:	463c      	mov	r4, r7
 8006d90:	687f      	ldr	r7, [r7, #4]
 8006d92:	e7b6      	b.n	8006d02 <_malloc_r+0x4a>
 8006d94:	461a      	mov	r2, r3
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	42a3      	cmp	r3, r4
 8006d9a:	d1fb      	bne.n	8006d94 <_malloc_r+0xdc>
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	6053      	str	r3, [r2, #4]
 8006da0:	e7de      	b.n	8006d60 <_malloc_r+0xa8>
 8006da2:	230c      	movs	r3, #12
 8006da4:	4630      	mov	r0, r6
 8006da6:	6033      	str	r3, [r6, #0]
 8006da8:	f000 f80c 	bl	8006dc4 <__malloc_unlock>
 8006dac:	e794      	b.n	8006cd8 <_malloc_r+0x20>
 8006dae:	6005      	str	r5, [r0, #0]
 8006db0:	e7d6      	b.n	8006d60 <_malloc_r+0xa8>
 8006db2:	bf00      	nop
 8006db4:	200002e4 	.word	0x200002e4

08006db8 <__malloc_lock>:
 8006db8:	4801      	ldr	r0, [pc, #4]	@ (8006dc0 <__malloc_lock+0x8>)
 8006dba:	f001 ba98 	b.w	80082ee <__retarget_lock_acquire_recursive>
 8006dbe:	bf00      	nop
 8006dc0:	20000428 	.word	0x20000428

08006dc4 <__malloc_unlock>:
 8006dc4:	4801      	ldr	r0, [pc, #4]	@ (8006dcc <__malloc_unlock+0x8>)
 8006dc6:	f001 ba93 	b.w	80082f0 <__retarget_lock_release_recursive>
 8006dca:	bf00      	nop
 8006dcc:	20000428 	.word	0x20000428

08006dd0 <srand>:
 8006dd0:	b538      	push	{r3, r4, r5, lr}
 8006dd2:	4b10      	ldr	r3, [pc, #64]	@ (8006e14 <srand+0x44>)
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	681d      	ldr	r5, [r3, #0]
 8006dd8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006dda:	b9b3      	cbnz	r3, 8006e0a <srand+0x3a>
 8006ddc:	2018      	movs	r0, #24
 8006dde:	f7ff ff39 	bl	8006c54 <malloc>
 8006de2:	4602      	mov	r2, r0
 8006de4:	6328      	str	r0, [r5, #48]	@ 0x30
 8006de6:	b920      	cbnz	r0, 8006df2 <srand+0x22>
 8006de8:	2146      	movs	r1, #70	@ 0x46
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <srand+0x48>)
 8006dec:	480b      	ldr	r0, [pc, #44]	@ (8006e1c <srand+0x4c>)
 8006dee:	f7ff fef7 	bl	8006be0 <__assert_func>
 8006df2:	490b      	ldr	r1, [pc, #44]	@ (8006e20 <srand+0x50>)
 8006df4:	4b0b      	ldr	r3, [pc, #44]	@ (8006e24 <srand+0x54>)
 8006df6:	e9c0 1300 	strd	r1, r3, [r0]
 8006dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8006e28 <srand+0x58>)
 8006dfc:	2100      	movs	r1, #0
 8006dfe:	6083      	str	r3, [r0, #8]
 8006e00:	230b      	movs	r3, #11
 8006e02:	8183      	strh	r3, [r0, #12]
 8006e04:	2001      	movs	r0, #1
 8006e06:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8006e0e:	611c      	str	r4, [r3, #16]
 8006e10:	615a      	str	r2, [r3, #20]
 8006e12:	bd38      	pop	{r3, r4, r5, pc}
 8006e14:	20000018 	.word	0x20000018
 8006e18:	0800a7b8 	.word	0x0800a7b8
 8006e1c:	0800a7cf 	.word	0x0800a7cf
 8006e20:	abcd330e 	.word	0xabcd330e
 8006e24:	e66d1234 	.word	0xe66d1234
 8006e28:	0005deec 	.word	0x0005deec

08006e2c <rand>:
 8006e2c:	4b16      	ldr	r3, [pc, #88]	@ (8006e88 <rand+0x5c>)
 8006e2e:	b510      	push	{r4, lr}
 8006e30:	681c      	ldr	r4, [r3, #0]
 8006e32:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8006e34:	b9b3      	cbnz	r3, 8006e64 <rand+0x38>
 8006e36:	2018      	movs	r0, #24
 8006e38:	f7ff ff0c 	bl	8006c54 <malloc>
 8006e3c:	4602      	mov	r2, r0
 8006e3e:	6320      	str	r0, [r4, #48]	@ 0x30
 8006e40:	b920      	cbnz	r0, 8006e4c <rand+0x20>
 8006e42:	2152      	movs	r1, #82	@ 0x52
 8006e44:	4b11      	ldr	r3, [pc, #68]	@ (8006e8c <rand+0x60>)
 8006e46:	4812      	ldr	r0, [pc, #72]	@ (8006e90 <rand+0x64>)
 8006e48:	f7ff feca 	bl	8006be0 <__assert_func>
 8006e4c:	4911      	ldr	r1, [pc, #68]	@ (8006e94 <rand+0x68>)
 8006e4e:	4b12      	ldr	r3, [pc, #72]	@ (8006e98 <rand+0x6c>)
 8006e50:	e9c0 1300 	strd	r1, r3, [r0]
 8006e54:	4b11      	ldr	r3, [pc, #68]	@ (8006e9c <rand+0x70>)
 8006e56:	2100      	movs	r1, #0
 8006e58:	6083      	str	r3, [r0, #8]
 8006e5a:	230b      	movs	r3, #11
 8006e5c:	8183      	strh	r3, [r0, #12]
 8006e5e:	2001      	movs	r0, #1
 8006e60:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006e64:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006e66:	480e      	ldr	r0, [pc, #56]	@ (8006ea0 <rand+0x74>)
 8006e68:	690b      	ldr	r3, [r1, #16]
 8006e6a:	694c      	ldr	r4, [r1, #20]
 8006e6c:	4358      	muls	r0, r3
 8006e6e:	4a0d      	ldr	r2, [pc, #52]	@ (8006ea4 <rand+0x78>)
 8006e70:	fb02 0004 	mla	r0, r2, r4, r0
 8006e74:	fba3 3202 	umull	r3, r2, r3, r2
 8006e78:	3301      	adds	r3, #1
 8006e7a:	eb40 0002 	adc.w	r0, r0, r2
 8006e7e:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8006e82:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8006e86:	bd10      	pop	{r4, pc}
 8006e88:	20000018 	.word	0x20000018
 8006e8c:	0800a7b8 	.word	0x0800a7b8
 8006e90:	0800a7cf 	.word	0x0800a7cf
 8006e94:	abcd330e 	.word	0xabcd330e
 8006e98:	e66d1234 	.word	0xe66d1234
 8006e9c:	0005deec 	.word	0x0005deec
 8006ea0:	5851f42d 	.word	0x5851f42d
 8006ea4:	4c957f2d 	.word	0x4c957f2d

08006ea8 <__cvt>:
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006eae:	461d      	mov	r5, r3
 8006eb0:	bfbb      	ittet	lt
 8006eb2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8006eb6:	461d      	movlt	r5, r3
 8006eb8:	2300      	movge	r3, #0
 8006eba:	232d      	movlt	r3, #45	@ 0x2d
 8006ebc:	b088      	sub	sp, #32
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	bfb8      	it	lt
 8006ec2:	4614      	movlt	r4, r2
 8006ec4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006ec6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8006ec8:	7013      	strb	r3, [r2, #0]
 8006eca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006ecc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8006ed0:	f023 0820 	bic.w	r8, r3, #32
 8006ed4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006ed8:	d005      	beq.n	8006ee6 <__cvt+0x3e>
 8006eda:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006ede:	d100      	bne.n	8006ee2 <__cvt+0x3a>
 8006ee0:	3601      	adds	r6, #1
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	e000      	b.n	8006ee8 <__cvt+0x40>
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	aa07      	add	r2, sp, #28
 8006eea:	9204      	str	r2, [sp, #16]
 8006eec:	aa06      	add	r2, sp, #24
 8006eee:	e9cd a202 	strd	sl, r2, [sp, #8]
 8006ef2:	e9cd 3600 	strd	r3, r6, [sp]
 8006ef6:	4622      	mov	r2, r4
 8006ef8:	462b      	mov	r3, r5
 8006efa:	f001 faa1 	bl	8008440 <_dtoa_r>
 8006efe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f02:	4607      	mov	r7, r0
 8006f04:	d119      	bne.n	8006f3a <__cvt+0x92>
 8006f06:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006f08:	07db      	lsls	r3, r3, #31
 8006f0a:	d50e      	bpl.n	8006f2a <__cvt+0x82>
 8006f0c:	eb00 0906 	add.w	r9, r0, r6
 8006f10:	2200      	movs	r2, #0
 8006f12:	2300      	movs	r3, #0
 8006f14:	4620      	mov	r0, r4
 8006f16:	4629      	mov	r1, r5
 8006f18:	f7f9 fd46 	bl	80009a8 <__aeabi_dcmpeq>
 8006f1c:	b108      	cbz	r0, 8006f22 <__cvt+0x7a>
 8006f1e:	f8cd 901c 	str.w	r9, [sp, #28]
 8006f22:	2230      	movs	r2, #48	@ 0x30
 8006f24:	9b07      	ldr	r3, [sp, #28]
 8006f26:	454b      	cmp	r3, r9
 8006f28:	d31e      	bcc.n	8006f68 <__cvt+0xc0>
 8006f2a:	4638      	mov	r0, r7
 8006f2c:	9b07      	ldr	r3, [sp, #28]
 8006f2e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006f30:	1bdb      	subs	r3, r3, r7
 8006f32:	6013      	str	r3, [r2, #0]
 8006f34:	b008      	add	sp, #32
 8006f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f3a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f3e:	eb00 0906 	add.w	r9, r0, r6
 8006f42:	d1e5      	bne.n	8006f10 <__cvt+0x68>
 8006f44:	7803      	ldrb	r3, [r0, #0]
 8006f46:	2b30      	cmp	r3, #48	@ 0x30
 8006f48:	d10a      	bne.n	8006f60 <__cvt+0xb8>
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	2300      	movs	r3, #0
 8006f4e:	4620      	mov	r0, r4
 8006f50:	4629      	mov	r1, r5
 8006f52:	f7f9 fd29 	bl	80009a8 <__aeabi_dcmpeq>
 8006f56:	b918      	cbnz	r0, 8006f60 <__cvt+0xb8>
 8006f58:	f1c6 0601 	rsb	r6, r6, #1
 8006f5c:	f8ca 6000 	str.w	r6, [sl]
 8006f60:	f8da 3000 	ldr.w	r3, [sl]
 8006f64:	4499      	add	r9, r3
 8006f66:	e7d3      	b.n	8006f10 <__cvt+0x68>
 8006f68:	1c59      	adds	r1, r3, #1
 8006f6a:	9107      	str	r1, [sp, #28]
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	e7d9      	b.n	8006f24 <__cvt+0x7c>

08006f70 <__exponent>:
 8006f70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006f72:	2900      	cmp	r1, #0
 8006f74:	bfb6      	itet	lt
 8006f76:	232d      	movlt	r3, #45	@ 0x2d
 8006f78:	232b      	movge	r3, #43	@ 0x2b
 8006f7a:	4249      	neglt	r1, r1
 8006f7c:	2909      	cmp	r1, #9
 8006f7e:	7002      	strb	r2, [r0, #0]
 8006f80:	7043      	strb	r3, [r0, #1]
 8006f82:	dd29      	ble.n	8006fd8 <__exponent+0x68>
 8006f84:	f10d 0307 	add.w	r3, sp, #7
 8006f88:	461d      	mov	r5, r3
 8006f8a:	270a      	movs	r7, #10
 8006f8c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006f90:	461a      	mov	r2, r3
 8006f92:	fb07 1416 	mls	r4, r7, r6, r1
 8006f96:	3430      	adds	r4, #48	@ 0x30
 8006f98:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	2c63      	cmp	r4, #99	@ 0x63
 8006fa0:	4631      	mov	r1, r6
 8006fa2:	f103 33ff 	add.w	r3, r3, #4294967295
 8006fa6:	dcf1      	bgt.n	8006f8c <__exponent+0x1c>
 8006fa8:	3130      	adds	r1, #48	@ 0x30
 8006faa:	1e94      	subs	r4, r2, #2
 8006fac:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006fb0:	4623      	mov	r3, r4
 8006fb2:	1c41      	adds	r1, r0, #1
 8006fb4:	42ab      	cmp	r3, r5
 8006fb6:	d30a      	bcc.n	8006fce <__exponent+0x5e>
 8006fb8:	f10d 0309 	add.w	r3, sp, #9
 8006fbc:	1a9b      	subs	r3, r3, r2
 8006fbe:	42ac      	cmp	r4, r5
 8006fc0:	bf88      	it	hi
 8006fc2:	2300      	movhi	r3, #0
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	4403      	add	r3, r0
 8006fc8:	1a18      	subs	r0, r3, r0
 8006fca:	b003      	add	sp, #12
 8006fcc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006fce:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006fd2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006fd6:	e7ed      	b.n	8006fb4 <__exponent+0x44>
 8006fd8:	2330      	movs	r3, #48	@ 0x30
 8006fda:	3130      	adds	r1, #48	@ 0x30
 8006fdc:	7083      	strb	r3, [r0, #2]
 8006fde:	70c1      	strb	r1, [r0, #3]
 8006fe0:	1d03      	adds	r3, r0, #4
 8006fe2:	e7f1      	b.n	8006fc8 <__exponent+0x58>

08006fe4 <_printf_float>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	b091      	sub	sp, #68	@ 0x44
 8006fea:	460c      	mov	r4, r1
 8006fec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8006ff0:	4616      	mov	r6, r2
 8006ff2:	461f      	mov	r7, r3
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	f001 f8e1 	bl	80081bc <_localeconv_r>
 8006ffa:	6803      	ldr	r3, [r0, #0]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	9308      	str	r3, [sp, #32]
 8007000:	f7f9 f8a6 	bl	8000150 <strlen>
 8007004:	2300      	movs	r3, #0
 8007006:	930e      	str	r3, [sp, #56]	@ 0x38
 8007008:	f8d8 3000 	ldr.w	r3, [r8]
 800700c:	9009      	str	r0, [sp, #36]	@ 0x24
 800700e:	3307      	adds	r3, #7
 8007010:	f023 0307 	bic.w	r3, r3, #7
 8007014:	f103 0208 	add.w	r2, r3, #8
 8007018:	f894 a018 	ldrb.w	sl, [r4, #24]
 800701c:	f8d4 b000 	ldr.w	fp, [r4]
 8007020:	f8c8 2000 	str.w	r2, [r8]
 8007024:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007028:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800702c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800702e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007032:	f04f 32ff 	mov.w	r2, #4294967295
 8007036:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800703a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800703e:	4b9c      	ldr	r3, [pc, #624]	@ (80072b0 <_printf_float+0x2cc>)
 8007040:	f7f9 fce4 	bl	8000a0c <__aeabi_dcmpun>
 8007044:	bb70      	cbnz	r0, 80070a4 <_printf_float+0xc0>
 8007046:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800704a:	f04f 32ff 	mov.w	r2, #4294967295
 800704e:	4b98      	ldr	r3, [pc, #608]	@ (80072b0 <_printf_float+0x2cc>)
 8007050:	f7f9 fcbe 	bl	80009d0 <__aeabi_dcmple>
 8007054:	bb30      	cbnz	r0, 80070a4 <_printf_float+0xc0>
 8007056:	2200      	movs	r2, #0
 8007058:	2300      	movs	r3, #0
 800705a:	4640      	mov	r0, r8
 800705c:	4649      	mov	r1, r9
 800705e:	f7f9 fcad 	bl	80009bc <__aeabi_dcmplt>
 8007062:	b110      	cbz	r0, 800706a <_printf_float+0x86>
 8007064:	232d      	movs	r3, #45	@ 0x2d
 8007066:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800706a:	4a92      	ldr	r2, [pc, #584]	@ (80072b4 <_printf_float+0x2d0>)
 800706c:	4b92      	ldr	r3, [pc, #584]	@ (80072b8 <_printf_float+0x2d4>)
 800706e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007072:	bf94      	ite	ls
 8007074:	4690      	movls	r8, r2
 8007076:	4698      	movhi	r8, r3
 8007078:	2303      	movs	r3, #3
 800707a:	f04f 0900 	mov.w	r9, #0
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	f02b 0304 	bic.w	r3, fp, #4
 8007084:	6023      	str	r3, [r4, #0]
 8007086:	4633      	mov	r3, r6
 8007088:	4621      	mov	r1, r4
 800708a:	4628      	mov	r0, r5
 800708c:	9700      	str	r7, [sp, #0]
 800708e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007090:	f000 fb1e 	bl	80076d0 <_printf_common>
 8007094:	3001      	adds	r0, #1
 8007096:	f040 8090 	bne.w	80071ba <_printf_float+0x1d6>
 800709a:	f04f 30ff 	mov.w	r0, #4294967295
 800709e:	b011      	add	sp, #68	@ 0x44
 80070a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a4:	4642      	mov	r2, r8
 80070a6:	464b      	mov	r3, r9
 80070a8:	4640      	mov	r0, r8
 80070aa:	4649      	mov	r1, r9
 80070ac:	f7f9 fcae 	bl	8000a0c <__aeabi_dcmpun>
 80070b0:	b148      	cbz	r0, 80070c6 <_printf_float+0xe2>
 80070b2:	464b      	mov	r3, r9
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfb8      	it	lt
 80070b8:	232d      	movlt	r3, #45	@ 0x2d
 80070ba:	4a80      	ldr	r2, [pc, #512]	@ (80072bc <_printf_float+0x2d8>)
 80070bc:	bfb8      	it	lt
 80070be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80070c2:	4b7f      	ldr	r3, [pc, #508]	@ (80072c0 <_printf_float+0x2dc>)
 80070c4:	e7d3      	b.n	800706e <_printf_float+0x8a>
 80070c6:	6863      	ldr	r3, [r4, #4]
 80070c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	d13f      	bne.n	8007150 <_printf_float+0x16c>
 80070d0:	2306      	movs	r3, #6
 80070d2:	6063      	str	r3, [r4, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80070da:	6023      	str	r3, [r4, #0]
 80070dc:	9206      	str	r2, [sp, #24]
 80070de:	aa0e      	add	r2, sp, #56	@ 0x38
 80070e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80070e4:	aa0d      	add	r2, sp, #52	@ 0x34
 80070e6:	9203      	str	r2, [sp, #12]
 80070e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80070ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80070f0:	6863      	ldr	r3, [r4, #4]
 80070f2:	4642      	mov	r2, r8
 80070f4:	9300      	str	r3, [sp, #0]
 80070f6:	4628      	mov	r0, r5
 80070f8:	464b      	mov	r3, r9
 80070fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80070fc:	f7ff fed4 	bl	8006ea8 <__cvt>
 8007100:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007102:	4680      	mov	r8, r0
 8007104:	2947      	cmp	r1, #71	@ 0x47
 8007106:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007108:	d128      	bne.n	800715c <_printf_float+0x178>
 800710a:	1cc8      	adds	r0, r1, #3
 800710c:	db02      	blt.n	8007114 <_printf_float+0x130>
 800710e:	6863      	ldr	r3, [r4, #4]
 8007110:	4299      	cmp	r1, r3
 8007112:	dd40      	ble.n	8007196 <_printf_float+0x1b2>
 8007114:	f1aa 0a02 	sub.w	sl, sl, #2
 8007118:	fa5f fa8a 	uxtb.w	sl, sl
 800711c:	4652      	mov	r2, sl
 800711e:	3901      	subs	r1, #1
 8007120:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007124:	910d      	str	r1, [sp, #52]	@ 0x34
 8007126:	f7ff ff23 	bl	8006f70 <__exponent>
 800712a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800712c:	4681      	mov	r9, r0
 800712e:	1813      	adds	r3, r2, r0
 8007130:	2a01      	cmp	r2, #1
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	dc02      	bgt.n	800713c <_printf_float+0x158>
 8007136:	6822      	ldr	r2, [r4, #0]
 8007138:	07d2      	lsls	r2, r2, #31
 800713a:	d501      	bpl.n	8007140 <_printf_float+0x15c>
 800713c:	3301      	adds	r3, #1
 800713e:	6123      	str	r3, [r4, #16]
 8007140:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007144:	2b00      	cmp	r3, #0
 8007146:	d09e      	beq.n	8007086 <_printf_float+0xa2>
 8007148:	232d      	movs	r3, #45	@ 0x2d
 800714a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800714e:	e79a      	b.n	8007086 <_printf_float+0xa2>
 8007150:	2947      	cmp	r1, #71	@ 0x47
 8007152:	d1bf      	bne.n	80070d4 <_printf_float+0xf0>
 8007154:	2b00      	cmp	r3, #0
 8007156:	d1bd      	bne.n	80070d4 <_printf_float+0xf0>
 8007158:	2301      	movs	r3, #1
 800715a:	e7ba      	b.n	80070d2 <_printf_float+0xee>
 800715c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007160:	d9dc      	bls.n	800711c <_printf_float+0x138>
 8007162:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007166:	d118      	bne.n	800719a <_printf_float+0x1b6>
 8007168:	2900      	cmp	r1, #0
 800716a:	6863      	ldr	r3, [r4, #4]
 800716c:	dd0b      	ble.n	8007186 <_printf_float+0x1a2>
 800716e:	6121      	str	r1, [r4, #16]
 8007170:	b913      	cbnz	r3, 8007178 <_printf_float+0x194>
 8007172:	6822      	ldr	r2, [r4, #0]
 8007174:	07d0      	lsls	r0, r2, #31
 8007176:	d502      	bpl.n	800717e <_printf_float+0x19a>
 8007178:	3301      	adds	r3, #1
 800717a:	440b      	add	r3, r1
 800717c:	6123      	str	r3, [r4, #16]
 800717e:	f04f 0900 	mov.w	r9, #0
 8007182:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007184:	e7dc      	b.n	8007140 <_printf_float+0x15c>
 8007186:	b913      	cbnz	r3, 800718e <_printf_float+0x1aa>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	07d2      	lsls	r2, r2, #31
 800718c:	d501      	bpl.n	8007192 <_printf_float+0x1ae>
 800718e:	3302      	adds	r3, #2
 8007190:	e7f4      	b.n	800717c <_printf_float+0x198>
 8007192:	2301      	movs	r3, #1
 8007194:	e7f2      	b.n	800717c <_printf_float+0x198>
 8007196:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800719a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800719c:	4299      	cmp	r1, r3
 800719e:	db05      	blt.n	80071ac <_printf_float+0x1c8>
 80071a0:	6823      	ldr	r3, [r4, #0]
 80071a2:	6121      	str	r1, [r4, #16]
 80071a4:	07d8      	lsls	r0, r3, #31
 80071a6:	d5ea      	bpl.n	800717e <_printf_float+0x19a>
 80071a8:	1c4b      	adds	r3, r1, #1
 80071aa:	e7e7      	b.n	800717c <_printf_float+0x198>
 80071ac:	2900      	cmp	r1, #0
 80071ae:	bfcc      	ite	gt
 80071b0:	2201      	movgt	r2, #1
 80071b2:	f1c1 0202 	rsble	r2, r1, #2
 80071b6:	4413      	add	r3, r2
 80071b8:	e7e0      	b.n	800717c <_printf_float+0x198>
 80071ba:	6823      	ldr	r3, [r4, #0]
 80071bc:	055a      	lsls	r2, r3, #21
 80071be:	d407      	bmi.n	80071d0 <_printf_float+0x1ec>
 80071c0:	6923      	ldr	r3, [r4, #16]
 80071c2:	4642      	mov	r2, r8
 80071c4:	4631      	mov	r1, r6
 80071c6:	4628      	mov	r0, r5
 80071c8:	47b8      	blx	r7
 80071ca:	3001      	adds	r0, #1
 80071cc:	d12b      	bne.n	8007226 <_printf_float+0x242>
 80071ce:	e764      	b.n	800709a <_printf_float+0xb6>
 80071d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071d4:	f240 80dc 	bls.w	8007390 <_printf_float+0x3ac>
 80071d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80071dc:	2200      	movs	r2, #0
 80071de:	2300      	movs	r3, #0
 80071e0:	f7f9 fbe2 	bl	80009a8 <__aeabi_dcmpeq>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d033      	beq.n	8007250 <_printf_float+0x26c>
 80071e8:	2301      	movs	r3, #1
 80071ea:	4631      	mov	r1, r6
 80071ec:	4628      	mov	r0, r5
 80071ee:	4a35      	ldr	r2, [pc, #212]	@ (80072c4 <_printf_float+0x2e0>)
 80071f0:	47b8      	blx	r7
 80071f2:	3001      	adds	r0, #1
 80071f4:	f43f af51 	beq.w	800709a <_printf_float+0xb6>
 80071f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80071fc:	4543      	cmp	r3, r8
 80071fe:	db02      	blt.n	8007206 <_printf_float+0x222>
 8007200:	6823      	ldr	r3, [r4, #0]
 8007202:	07d8      	lsls	r0, r3, #31
 8007204:	d50f      	bpl.n	8007226 <_printf_float+0x242>
 8007206:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800720a:	4631      	mov	r1, r6
 800720c:	4628      	mov	r0, r5
 800720e:	47b8      	blx	r7
 8007210:	3001      	adds	r0, #1
 8007212:	f43f af42 	beq.w	800709a <_printf_float+0xb6>
 8007216:	f04f 0900 	mov.w	r9, #0
 800721a:	f108 38ff 	add.w	r8, r8, #4294967295
 800721e:	f104 0a1a 	add.w	sl, r4, #26
 8007222:	45c8      	cmp	r8, r9
 8007224:	dc09      	bgt.n	800723a <_printf_float+0x256>
 8007226:	6823      	ldr	r3, [r4, #0]
 8007228:	079b      	lsls	r3, r3, #30
 800722a:	f100 8102 	bmi.w	8007432 <_printf_float+0x44e>
 800722e:	68e0      	ldr	r0, [r4, #12]
 8007230:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007232:	4298      	cmp	r0, r3
 8007234:	bfb8      	it	lt
 8007236:	4618      	movlt	r0, r3
 8007238:	e731      	b.n	800709e <_printf_float+0xba>
 800723a:	2301      	movs	r3, #1
 800723c:	4652      	mov	r2, sl
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	f43f af28 	beq.w	800709a <_printf_float+0xb6>
 800724a:	f109 0901 	add.w	r9, r9, #1
 800724e:	e7e8      	b.n	8007222 <_printf_float+0x23e>
 8007250:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007252:	2b00      	cmp	r3, #0
 8007254:	dc38      	bgt.n	80072c8 <_printf_float+0x2e4>
 8007256:	2301      	movs	r3, #1
 8007258:	4631      	mov	r1, r6
 800725a:	4628      	mov	r0, r5
 800725c:	4a19      	ldr	r2, [pc, #100]	@ (80072c4 <_printf_float+0x2e0>)
 800725e:	47b8      	blx	r7
 8007260:	3001      	adds	r0, #1
 8007262:	f43f af1a 	beq.w	800709a <_printf_float+0xb6>
 8007266:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800726a:	ea59 0303 	orrs.w	r3, r9, r3
 800726e:	d102      	bne.n	8007276 <_printf_float+0x292>
 8007270:	6823      	ldr	r3, [r4, #0]
 8007272:	07d9      	lsls	r1, r3, #31
 8007274:	d5d7      	bpl.n	8007226 <_printf_float+0x242>
 8007276:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800727a:	4631      	mov	r1, r6
 800727c:	4628      	mov	r0, r5
 800727e:	47b8      	blx	r7
 8007280:	3001      	adds	r0, #1
 8007282:	f43f af0a 	beq.w	800709a <_printf_float+0xb6>
 8007286:	f04f 0a00 	mov.w	sl, #0
 800728a:	f104 0b1a 	add.w	fp, r4, #26
 800728e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007290:	425b      	negs	r3, r3
 8007292:	4553      	cmp	r3, sl
 8007294:	dc01      	bgt.n	800729a <_printf_float+0x2b6>
 8007296:	464b      	mov	r3, r9
 8007298:	e793      	b.n	80071c2 <_printf_float+0x1de>
 800729a:	2301      	movs	r3, #1
 800729c:	465a      	mov	r2, fp
 800729e:	4631      	mov	r1, r6
 80072a0:	4628      	mov	r0, r5
 80072a2:	47b8      	blx	r7
 80072a4:	3001      	adds	r0, #1
 80072a6:	f43f aef8 	beq.w	800709a <_printf_float+0xb6>
 80072aa:	f10a 0a01 	add.w	sl, sl, #1
 80072ae:	e7ee      	b.n	800728e <_printf_float+0x2aa>
 80072b0:	7fefffff 	.word	0x7fefffff
 80072b4:	0800a827 	.word	0x0800a827
 80072b8:	0800a82b 	.word	0x0800a82b
 80072bc:	0800a82f 	.word	0x0800a82f
 80072c0:	0800a833 	.word	0x0800a833
 80072c4:	0800a837 	.word	0x0800a837
 80072c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80072ce:	4553      	cmp	r3, sl
 80072d0:	bfa8      	it	ge
 80072d2:	4653      	movge	r3, sl
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	4699      	mov	r9, r3
 80072d8:	dc36      	bgt.n	8007348 <_printf_float+0x364>
 80072da:	f04f 0b00 	mov.w	fp, #0
 80072de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80072e2:	f104 021a 	add.w	r2, r4, #26
 80072e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80072e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80072ea:	eba3 0309 	sub.w	r3, r3, r9
 80072ee:	455b      	cmp	r3, fp
 80072f0:	dc31      	bgt.n	8007356 <_printf_float+0x372>
 80072f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80072f4:	459a      	cmp	sl, r3
 80072f6:	dc3a      	bgt.n	800736e <_printf_float+0x38a>
 80072f8:	6823      	ldr	r3, [r4, #0]
 80072fa:	07da      	lsls	r2, r3, #31
 80072fc:	d437      	bmi.n	800736e <_printf_float+0x38a>
 80072fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007300:	ebaa 0903 	sub.w	r9, sl, r3
 8007304:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007306:	ebaa 0303 	sub.w	r3, sl, r3
 800730a:	4599      	cmp	r9, r3
 800730c:	bfa8      	it	ge
 800730e:	4699      	movge	r9, r3
 8007310:	f1b9 0f00 	cmp.w	r9, #0
 8007314:	dc33      	bgt.n	800737e <_printf_float+0x39a>
 8007316:	f04f 0800 	mov.w	r8, #0
 800731a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800731e:	f104 0b1a 	add.w	fp, r4, #26
 8007322:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007324:	ebaa 0303 	sub.w	r3, sl, r3
 8007328:	eba3 0309 	sub.w	r3, r3, r9
 800732c:	4543      	cmp	r3, r8
 800732e:	f77f af7a 	ble.w	8007226 <_printf_float+0x242>
 8007332:	2301      	movs	r3, #1
 8007334:	465a      	mov	r2, fp
 8007336:	4631      	mov	r1, r6
 8007338:	4628      	mov	r0, r5
 800733a:	47b8      	blx	r7
 800733c:	3001      	adds	r0, #1
 800733e:	f43f aeac 	beq.w	800709a <_printf_float+0xb6>
 8007342:	f108 0801 	add.w	r8, r8, #1
 8007346:	e7ec      	b.n	8007322 <_printf_float+0x33e>
 8007348:	4642      	mov	r2, r8
 800734a:	4631      	mov	r1, r6
 800734c:	4628      	mov	r0, r5
 800734e:	47b8      	blx	r7
 8007350:	3001      	adds	r0, #1
 8007352:	d1c2      	bne.n	80072da <_printf_float+0x2f6>
 8007354:	e6a1      	b.n	800709a <_printf_float+0xb6>
 8007356:	2301      	movs	r3, #1
 8007358:	4631      	mov	r1, r6
 800735a:	4628      	mov	r0, r5
 800735c:	920a      	str	r2, [sp, #40]	@ 0x28
 800735e:	47b8      	blx	r7
 8007360:	3001      	adds	r0, #1
 8007362:	f43f ae9a 	beq.w	800709a <_printf_float+0xb6>
 8007366:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007368:	f10b 0b01 	add.w	fp, fp, #1
 800736c:	e7bb      	b.n	80072e6 <_printf_float+0x302>
 800736e:	4631      	mov	r1, r6
 8007370:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007374:	4628      	mov	r0, r5
 8007376:	47b8      	blx	r7
 8007378:	3001      	adds	r0, #1
 800737a:	d1c0      	bne.n	80072fe <_printf_float+0x31a>
 800737c:	e68d      	b.n	800709a <_printf_float+0xb6>
 800737e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007380:	464b      	mov	r3, r9
 8007382:	4631      	mov	r1, r6
 8007384:	4628      	mov	r0, r5
 8007386:	4442      	add	r2, r8
 8007388:	47b8      	blx	r7
 800738a:	3001      	adds	r0, #1
 800738c:	d1c3      	bne.n	8007316 <_printf_float+0x332>
 800738e:	e684      	b.n	800709a <_printf_float+0xb6>
 8007390:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007394:	f1ba 0f01 	cmp.w	sl, #1
 8007398:	dc01      	bgt.n	800739e <_printf_float+0x3ba>
 800739a:	07db      	lsls	r3, r3, #31
 800739c:	d536      	bpl.n	800740c <_printf_float+0x428>
 800739e:	2301      	movs	r3, #1
 80073a0:	4642      	mov	r2, r8
 80073a2:	4631      	mov	r1, r6
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b8      	blx	r7
 80073a8:	3001      	adds	r0, #1
 80073aa:	f43f ae76 	beq.w	800709a <_printf_float+0xb6>
 80073ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f ae6e 	beq.w	800709a <_printf_float+0xb6>
 80073be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80073c2:	2200      	movs	r2, #0
 80073c4:	2300      	movs	r3, #0
 80073c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80073ca:	f7f9 faed 	bl	80009a8 <__aeabi_dcmpeq>
 80073ce:	b9c0      	cbnz	r0, 8007402 <_printf_float+0x41e>
 80073d0:	4653      	mov	r3, sl
 80073d2:	f108 0201 	add.w	r2, r8, #1
 80073d6:	4631      	mov	r1, r6
 80073d8:	4628      	mov	r0, r5
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	d10c      	bne.n	80073fa <_printf_float+0x416>
 80073e0:	e65b      	b.n	800709a <_printf_float+0xb6>
 80073e2:	2301      	movs	r3, #1
 80073e4:	465a      	mov	r2, fp
 80073e6:	4631      	mov	r1, r6
 80073e8:	4628      	mov	r0, r5
 80073ea:	47b8      	blx	r7
 80073ec:	3001      	adds	r0, #1
 80073ee:	f43f ae54 	beq.w	800709a <_printf_float+0xb6>
 80073f2:	f108 0801 	add.w	r8, r8, #1
 80073f6:	45d0      	cmp	r8, sl
 80073f8:	dbf3      	blt.n	80073e2 <_printf_float+0x3fe>
 80073fa:	464b      	mov	r3, r9
 80073fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007400:	e6e0      	b.n	80071c4 <_printf_float+0x1e0>
 8007402:	f04f 0800 	mov.w	r8, #0
 8007406:	f104 0b1a 	add.w	fp, r4, #26
 800740a:	e7f4      	b.n	80073f6 <_printf_float+0x412>
 800740c:	2301      	movs	r3, #1
 800740e:	4642      	mov	r2, r8
 8007410:	e7e1      	b.n	80073d6 <_printf_float+0x3f2>
 8007412:	2301      	movs	r3, #1
 8007414:	464a      	mov	r2, r9
 8007416:	4631      	mov	r1, r6
 8007418:	4628      	mov	r0, r5
 800741a:	47b8      	blx	r7
 800741c:	3001      	adds	r0, #1
 800741e:	f43f ae3c 	beq.w	800709a <_printf_float+0xb6>
 8007422:	f108 0801 	add.w	r8, r8, #1
 8007426:	68e3      	ldr	r3, [r4, #12]
 8007428:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800742a:	1a5b      	subs	r3, r3, r1
 800742c:	4543      	cmp	r3, r8
 800742e:	dcf0      	bgt.n	8007412 <_printf_float+0x42e>
 8007430:	e6fd      	b.n	800722e <_printf_float+0x24a>
 8007432:	f04f 0800 	mov.w	r8, #0
 8007436:	f104 0919 	add.w	r9, r4, #25
 800743a:	e7f4      	b.n	8007426 <_printf_float+0x442>

0800743c <__sfputc_r>:
 800743c:	6893      	ldr	r3, [r2, #8]
 800743e:	b410      	push	{r4}
 8007440:	3b01      	subs	r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	6093      	str	r3, [r2, #8]
 8007446:	da07      	bge.n	8007458 <__sfputc_r+0x1c>
 8007448:	6994      	ldr	r4, [r2, #24]
 800744a:	42a3      	cmp	r3, r4
 800744c:	db01      	blt.n	8007452 <__sfputc_r+0x16>
 800744e:	290a      	cmp	r1, #10
 8007450:	d102      	bne.n	8007458 <__sfputc_r+0x1c>
 8007452:	bc10      	pop	{r4}
 8007454:	f000 bdcb 	b.w	8007fee <__swbuf_r>
 8007458:	6813      	ldr	r3, [r2, #0]
 800745a:	1c58      	adds	r0, r3, #1
 800745c:	6010      	str	r0, [r2, #0]
 800745e:	7019      	strb	r1, [r3, #0]
 8007460:	4608      	mov	r0, r1
 8007462:	bc10      	pop	{r4}
 8007464:	4770      	bx	lr

08007466 <__sfputs_r>:
 8007466:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007468:	4606      	mov	r6, r0
 800746a:	460f      	mov	r7, r1
 800746c:	4614      	mov	r4, r2
 800746e:	18d5      	adds	r5, r2, r3
 8007470:	42ac      	cmp	r4, r5
 8007472:	d101      	bne.n	8007478 <__sfputs_r+0x12>
 8007474:	2000      	movs	r0, #0
 8007476:	e007      	b.n	8007488 <__sfputs_r+0x22>
 8007478:	463a      	mov	r2, r7
 800747a:	4630      	mov	r0, r6
 800747c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007480:	f7ff ffdc 	bl	800743c <__sfputc_r>
 8007484:	1c43      	adds	r3, r0, #1
 8007486:	d1f3      	bne.n	8007470 <__sfputs_r+0xa>
 8007488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800748c <_vfiprintf_r>:
 800748c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007490:	460d      	mov	r5, r1
 8007492:	4614      	mov	r4, r2
 8007494:	4698      	mov	r8, r3
 8007496:	4606      	mov	r6, r0
 8007498:	b09d      	sub	sp, #116	@ 0x74
 800749a:	b118      	cbz	r0, 80074a4 <_vfiprintf_r+0x18>
 800749c:	6a03      	ldr	r3, [r0, #32]
 800749e:	b90b      	cbnz	r3, 80074a4 <_vfiprintf_r+0x18>
 80074a0:	f000 fbf0 	bl	8007c84 <__sinit>
 80074a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074a6:	07d9      	lsls	r1, r3, #31
 80074a8:	d405      	bmi.n	80074b6 <_vfiprintf_r+0x2a>
 80074aa:	89ab      	ldrh	r3, [r5, #12]
 80074ac:	059a      	lsls	r2, r3, #22
 80074ae:	d402      	bmi.n	80074b6 <_vfiprintf_r+0x2a>
 80074b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074b2:	f000 ff1c 	bl	80082ee <__retarget_lock_acquire_recursive>
 80074b6:	89ab      	ldrh	r3, [r5, #12]
 80074b8:	071b      	lsls	r3, r3, #28
 80074ba:	d501      	bpl.n	80074c0 <_vfiprintf_r+0x34>
 80074bc:	692b      	ldr	r3, [r5, #16]
 80074be:	b99b      	cbnz	r3, 80074e8 <_vfiprintf_r+0x5c>
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f000 fdd2 	bl	800806c <__swsetup_r>
 80074c8:	b170      	cbz	r0, 80074e8 <_vfiprintf_r+0x5c>
 80074ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074cc:	07dc      	lsls	r4, r3, #31
 80074ce:	d504      	bpl.n	80074da <_vfiprintf_r+0x4e>
 80074d0:	f04f 30ff 	mov.w	r0, #4294967295
 80074d4:	b01d      	add	sp, #116	@ 0x74
 80074d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074da:	89ab      	ldrh	r3, [r5, #12]
 80074dc:	0598      	lsls	r0, r3, #22
 80074de:	d4f7      	bmi.n	80074d0 <_vfiprintf_r+0x44>
 80074e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80074e2:	f000 ff05 	bl	80082f0 <__retarget_lock_release_recursive>
 80074e6:	e7f3      	b.n	80074d0 <_vfiprintf_r+0x44>
 80074e8:	2300      	movs	r3, #0
 80074ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80074ec:	2320      	movs	r3, #32
 80074ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80074f2:	2330      	movs	r3, #48	@ 0x30
 80074f4:	f04f 0901 	mov.w	r9, #1
 80074f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80074fc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 80076a8 <_vfiprintf_r+0x21c>
 8007500:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007504:	4623      	mov	r3, r4
 8007506:	469a      	mov	sl, r3
 8007508:	f813 2b01 	ldrb.w	r2, [r3], #1
 800750c:	b10a      	cbz	r2, 8007512 <_vfiprintf_r+0x86>
 800750e:	2a25      	cmp	r2, #37	@ 0x25
 8007510:	d1f9      	bne.n	8007506 <_vfiprintf_r+0x7a>
 8007512:	ebba 0b04 	subs.w	fp, sl, r4
 8007516:	d00b      	beq.n	8007530 <_vfiprintf_r+0xa4>
 8007518:	465b      	mov	r3, fp
 800751a:	4622      	mov	r2, r4
 800751c:	4629      	mov	r1, r5
 800751e:	4630      	mov	r0, r6
 8007520:	f7ff ffa1 	bl	8007466 <__sfputs_r>
 8007524:	3001      	adds	r0, #1
 8007526:	f000 80a7 	beq.w	8007678 <_vfiprintf_r+0x1ec>
 800752a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800752c:	445a      	add	r2, fp
 800752e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007530:	f89a 3000 	ldrb.w	r3, [sl]
 8007534:	2b00      	cmp	r3, #0
 8007536:	f000 809f 	beq.w	8007678 <_vfiprintf_r+0x1ec>
 800753a:	2300      	movs	r3, #0
 800753c:	f04f 32ff 	mov.w	r2, #4294967295
 8007540:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007544:	f10a 0a01 	add.w	sl, sl, #1
 8007548:	9304      	str	r3, [sp, #16]
 800754a:	9307      	str	r3, [sp, #28]
 800754c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007550:	931a      	str	r3, [sp, #104]	@ 0x68
 8007552:	4654      	mov	r4, sl
 8007554:	2205      	movs	r2, #5
 8007556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755a:	4853      	ldr	r0, [pc, #332]	@ (80076a8 <_vfiprintf_r+0x21c>)
 800755c:	f000 fec9 	bl	80082f2 <memchr>
 8007560:	9a04      	ldr	r2, [sp, #16]
 8007562:	b9d8      	cbnz	r0, 800759c <_vfiprintf_r+0x110>
 8007564:	06d1      	lsls	r1, r2, #27
 8007566:	bf44      	itt	mi
 8007568:	2320      	movmi	r3, #32
 800756a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800756e:	0713      	lsls	r3, r2, #28
 8007570:	bf44      	itt	mi
 8007572:	232b      	movmi	r3, #43	@ 0x2b
 8007574:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007578:	f89a 3000 	ldrb.w	r3, [sl]
 800757c:	2b2a      	cmp	r3, #42	@ 0x2a
 800757e:	d015      	beq.n	80075ac <_vfiprintf_r+0x120>
 8007580:	4654      	mov	r4, sl
 8007582:	2000      	movs	r0, #0
 8007584:	f04f 0c0a 	mov.w	ip, #10
 8007588:	9a07      	ldr	r2, [sp, #28]
 800758a:	4621      	mov	r1, r4
 800758c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007590:	3b30      	subs	r3, #48	@ 0x30
 8007592:	2b09      	cmp	r3, #9
 8007594:	d94b      	bls.n	800762e <_vfiprintf_r+0x1a2>
 8007596:	b1b0      	cbz	r0, 80075c6 <_vfiprintf_r+0x13a>
 8007598:	9207      	str	r2, [sp, #28]
 800759a:	e014      	b.n	80075c6 <_vfiprintf_r+0x13a>
 800759c:	eba0 0308 	sub.w	r3, r0, r8
 80075a0:	fa09 f303 	lsl.w	r3, r9, r3
 80075a4:	4313      	orrs	r3, r2
 80075a6:	46a2      	mov	sl, r4
 80075a8:	9304      	str	r3, [sp, #16]
 80075aa:	e7d2      	b.n	8007552 <_vfiprintf_r+0xc6>
 80075ac:	9b03      	ldr	r3, [sp, #12]
 80075ae:	1d19      	adds	r1, r3, #4
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	9103      	str	r1, [sp, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	bfbb      	ittet	lt
 80075b8:	425b      	neglt	r3, r3
 80075ba:	f042 0202 	orrlt.w	r2, r2, #2
 80075be:	9307      	strge	r3, [sp, #28]
 80075c0:	9307      	strlt	r3, [sp, #28]
 80075c2:	bfb8      	it	lt
 80075c4:	9204      	strlt	r2, [sp, #16]
 80075c6:	7823      	ldrb	r3, [r4, #0]
 80075c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80075ca:	d10a      	bne.n	80075e2 <_vfiprintf_r+0x156>
 80075cc:	7863      	ldrb	r3, [r4, #1]
 80075ce:	2b2a      	cmp	r3, #42	@ 0x2a
 80075d0:	d132      	bne.n	8007638 <_vfiprintf_r+0x1ac>
 80075d2:	9b03      	ldr	r3, [sp, #12]
 80075d4:	3402      	adds	r4, #2
 80075d6:	1d1a      	adds	r2, r3, #4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	9203      	str	r2, [sp, #12]
 80075dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 80076ac <_vfiprintf_r+0x220>
 80075e6:	2203      	movs	r2, #3
 80075e8:	4650      	mov	r0, sl
 80075ea:	7821      	ldrb	r1, [r4, #0]
 80075ec:	f000 fe81 	bl	80082f2 <memchr>
 80075f0:	b138      	cbz	r0, 8007602 <_vfiprintf_r+0x176>
 80075f2:	2240      	movs	r2, #64	@ 0x40
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	eba0 000a 	sub.w	r0, r0, sl
 80075fa:	4082      	lsls	r2, r0
 80075fc:	4313      	orrs	r3, r2
 80075fe:	3401      	adds	r4, #1
 8007600:	9304      	str	r3, [sp, #16]
 8007602:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007606:	2206      	movs	r2, #6
 8007608:	4829      	ldr	r0, [pc, #164]	@ (80076b0 <_vfiprintf_r+0x224>)
 800760a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800760e:	f000 fe70 	bl	80082f2 <memchr>
 8007612:	2800      	cmp	r0, #0
 8007614:	d03f      	beq.n	8007696 <_vfiprintf_r+0x20a>
 8007616:	4b27      	ldr	r3, [pc, #156]	@ (80076b4 <_vfiprintf_r+0x228>)
 8007618:	bb1b      	cbnz	r3, 8007662 <_vfiprintf_r+0x1d6>
 800761a:	9b03      	ldr	r3, [sp, #12]
 800761c:	3307      	adds	r3, #7
 800761e:	f023 0307 	bic.w	r3, r3, #7
 8007622:	3308      	adds	r3, #8
 8007624:	9303      	str	r3, [sp, #12]
 8007626:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007628:	443b      	add	r3, r7
 800762a:	9309      	str	r3, [sp, #36]	@ 0x24
 800762c:	e76a      	b.n	8007504 <_vfiprintf_r+0x78>
 800762e:	460c      	mov	r4, r1
 8007630:	2001      	movs	r0, #1
 8007632:	fb0c 3202 	mla	r2, ip, r2, r3
 8007636:	e7a8      	b.n	800758a <_vfiprintf_r+0xfe>
 8007638:	2300      	movs	r3, #0
 800763a:	f04f 0c0a 	mov.w	ip, #10
 800763e:	4619      	mov	r1, r3
 8007640:	3401      	adds	r4, #1
 8007642:	9305      	str	r3, [sp, #20]
 8007644:	4620      	mov	r0, r4
 8007646:	f810 2b01 	ldrb.w	r2, [r0], #1
 800764a:	3a30      	subs	r2, #48	@ 0x30
 800764c:	2a09      	cmp	r2, #9
 800764e:	d903      	bls.n	8007658 <_vfiprintf_r+0x1cc>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d0c6      	beq.n	80075e2 <_vfiprintf_r+0x156>
 8007654:	9105      	str	r1, [sp, #20]
 8007656:	e7c4      	b.n	80075e2 <_vfiprintf_r+0x156>
 8007658:	4604      	mov	r4, r0
 800765a:	2301      	movs	r3, #1
 800765c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007660:	e7f0      	b.n	8007644 <_vfiprintf_r+0x1b8>
 8007662:	ab03      	add	r3, sp, #12
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	462a      	mov	r2, r5
 8007668:	4630      	mov	r0, r6
 800766a:	4b13      	ldr	r3, [pc, #76]	@ (80076b8 <_vfiprintf_r+0x22c>)
 800766c:	a904      	add	r1, sp, #16
 800766e:	f7ff fcb9 	bl	8006fe4 <_printf_float>
 8007672:	4607      	mov	r7, r0
 8007674:	1c78      	adds	r0, r7, #1
 8007676:	d1d6      	bne.n	8007626 <_vfiprintf_r+0x19a>
 8007678:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800767a:	07d9      	lsls	r1, r3, #31
 800767c:	d405      	bmi.n	800768a <_vfiprintf_r+0x1fe>
 800767e:	89ab      	ldrh	r3, [r5, #12]
 8007680:	059a      	lsls	r2, r3, #22
 8007682:	d402      	bmi.n	800768a <_vfiprintf_r+0x1fe>
 8007684:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007686:	f000 fe33 	bl	80082f0 <__retarget_lock_release_recursive>
 800768a:	89ab      	ldrh	r3, [r5, #12]
 800768c:	065b      	lsls	r3, r3, #25
 800768e:	f53f af1f 	bmi.w	80074d0 <_vfiprintf_r+0x44>
 8007692:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007694:	e71e      	b.n	80074d4 <_vfiprintf_r+0x48>
 8007696:	ab03      	add	r3, sp, #12
 8007698:	9300      	str	r3, [sp, #0]
 800769a:	462a      	mov	r2, r5
 800769c:	4630      	mov	r0, r6
 800769e:	4b06      	ldr	r3, [pc, #24]	@ (80076b8 <_vfiprintf_r+0x22c>)
 80076a0:	a904      	add	r1, sp, #16
 80076a2:	f000 f887 	bl	80077b4 <_printf_i>
 80076a6:	e7e4      	b.n	8007672 <_vfiprintf_r+0x1e6>
 80076a8:	0800a839 	.word	0x0800a839
 80076ac:	0800a83f 	.word	0x0800a83f
 80076b0:	0800a843 	.word	0x0800a843
 80076b4:	08006fe5 	.word	0x08006fe5
 80076b8:	08007467 	.word	0x08007467

080076bc <vfiprintf>:
 80076bc:	4613      	mov	r3, r2
 80076be:	460a      	mov	r2, r1
 80076c0:	4601      	mov	r1, r0
 80076c2:	4802      	ldr	r0, [pc, #8]	@ (80076cc <vfiprintf+0x10>)
 80076c4:	6800      	ldr	r0, [r0, #0]
 80076c6:	f7ff bee1 	b.w	800748c <_vfiprintf_r>
 80076ca:	bf00      	nop
 80076cc:	20000018 	.word	0x20000018

080076d0 <_printf_common>:
 80076d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076d4:	4616      	mov	r6, r2
 80076d6:	4698      	mov	r8, r3
 80076d8:	688a      	ldr	r2, [r1, #8]
 80076da:	690b      	ldr	r3, [r1, #16]
 80076dc:	4607      	mov	r7, r0
 80076de:	4293      	cmp	r3, r2
 80076e0:	bfb8      	it	lt
 80076e2:	4613      	movlt	r3, r2
 80076e4:	6033      	str	r3, [r6, #0]
 80076e6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80076ea:	460c      	mov	r4, r1
 80076ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80076f0:	b10a      	cbz	r2, 80076f6 <_printf_common+0x26>
 80076f2:	3301      	adds	r3, #1
 80076f4:	6033      	str	r3, [r6, #0]
 80076f6:	6823      	ldr	r3, [r4, #0]
 80076f8:	0699      	lsls	r1, r3, #26
 80076fa:	bf42      	ittt	mi
 80076fc:	6833      	ldrmi	r3, [r6, #0]
 80076fe:	3302      	addmi	r3, #2
 8007700:	6033      	strmi	r3, [r6, #0]
 8007702:	6825      	ldr	r5, [r4, #0]
 8007704:	f015 0506 	ands.w	r5, r5, #6
 8007708:	d106      	bne.n	8007718 <_printf_common+0x48>
 800770a:	f104 0a19 	add.w	sl, r4, #25
 800770e:	68e3      	ldr	r3, [r4, #12]
 8007710:	6832      	ldr	r2, [r6, #0]
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	42ab      	cmp	r3, r5
 8007716:	dc2b      	bgt.n	8007770 <_printf_common+0xa0>
 8007718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800771c:	6822      	ldr	r2, [r4, #0]
 800771e:	3b00      	subs	r3, #0
 8007720:	bf18      	it	ne
 8007722:	2301      	movne	r3, #1
 8007724:	0692      	lsls	r2, r2, #26
 8007726:	d430      	bmi.n	800778a <_printf_common+0xba>
 8007728:	4641      	mov	r1, r8
 800772a:	4638      	mov	r0, r7
 800772c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007730:	47c8      	blx	r9
 8007732:	3001      	adds	r0, #1
 8007734:	d023      	beq.n	800777e <_printf_common+0xae>
 8007736:	6823      	ldr	r3, [r4, #0]
 8007738:	6922      	ldr	r2, [r4, #16]
 800773a:	f003 0306 	and.w	r3, r3, #6
 800773e:	2b04      	cmp	r3, #4
 8007740:	bf14      	ite	ne
 8007742:	2500      	movne	r5, #0
 8007744:	6833      	ldreq	r3, [r6, #0]
 8007746:	f04f 0600 	mov.w	r6, #0
 800774a:	bf08      	it	eq
 800774c:	68e5      	ldreq	r5, [r4, #12]
 800774e:	f104 041a 	add.w	r4, r4, #26
 8007752:	bf08      	it	eq
 8007754:	1aed      	subeq	r5, r5, r3
 8007756:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800775a:	bf08      	it	eq
 800775c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007760:	4293      	cmp	r3, r2
 8007762:	bfc4      	itt	gt
 8007764:	1a9b      	subgt	r3, r3, r2
 8007766:	18ed      	addgt	r5, r5, r3
 8007768:	42b5      	cmp	r5, r6
 800776a:	d11a      	bne.n	80077a2 <_printf_common+0xd2>
 800776c:	2000      	movs	r0, #0
 800776e:	e008      	b.n	8007782 <_printf_common+0xb2>
 8007770:	2301      	movs	r3, #1
 8007772:	4652      	mov	r2, sl
 8007774:	4641      	mov	r1, r8
 8007776:	4638      	mov	r0, r7
 8007778:	47c8      	blx	r9
 800777a:	3001      	adds	r0, #1
 800777c:	d103      	bne.n	8007786 <_printf_common+0xb6>
 800777e:	f04f 30ff 	mov.w	r0, #4294967295
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	3501      	adds	r5, #1
 8007788:	e7c1      	b.n	800770e <_printf_common+0x3e>
 800778a:	2030      	movs	r0, #48	@ 0x30
 800778c:	18e1      	adds	r1, r4, r3
 800778e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007792:	1c5a      	adds	r2, r3, #1
 8007794:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007798:	4422      	add	r2, r4
 800779a:	3302      	adds	r3, #2
 800779c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077a0:	e7c2      	b.n	8007728 <_printf_common+0x58>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4622      	mov	r2, r4
 80077a6:	4641      	mov	r1, r8
 80077a8:	4638      	mov	r0, r7
 80077aa:	47c8      	blx	r9
 80077ac:	3001      	adds	r0, #1
 80077ae:	d0e6      	beq.n	800777e <_printf_common+0xae>
 80077b0:	3601      	adds	r6, #1
 80077b2:	e7d9      	b.n	8007768 <_printf_common+0x98>

080077b4 <_printf_i>:
 80077b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077b8:	7e0f      	ldrb	r7, [r1, #24]
 80077ba:	4691      	mov	r9, r2
 80077bc:	2f78      	cmp	r7, #120	@ 0x78
 80077be:	4680      	mov	r8, r0
 80077c0:	460c      	mov	r4, r1
 80077c2:	469a      	mov	sl, r3
 80077c4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077c6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077ca:	d807      	bhi.n	80077dc <_printf_i+0x28>
 80077cc:	2f62      	cmp	r7, #98	@ 0x62
 80077ce:	d80a      	bhi.n	80077e6 <_printf_i+0x32>
 80077d0:	2f00      	cmp	r7, #0
 80077d2:	f000 80d3 	beq.w	800797c <_printf_i+0x1c8>
 80077d6:	2f58      	cmp	r7, #88	@ 0x58
 80077d8:	f000 80ba 	beq.w	8007950 <_printf_i+0x19c>
 80077dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80077e0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80077e4:	e03a      	b.n	800785c <_printf_i+0xa8>
 80077e6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80077ea:	2b15      	cmp	r3, #21
 80077ec:	d8f6      	bhi.n	80077dc <_printf_i+0x28>
 80077ee:	a101      	add	r1, pc, #4	@ (adr r1, 80077f4 <_printf_i+0x40>)
 80077f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80077f4:	0800784d 	.word	0x0800784d
 80077f8:	08007861 	.word	0x08007861
 80077fc:	080077dd 	.word	0x080077dd
 8007800:	080077dd 	.word	0x080077dd
 8007804:	080077dd 	.word	0x080077dd
 8007808:	080077dd 	.word	0x080077dd
 800780c:	08007861 	.word	0x08007861
 8007810:	080077dd 	.word	0x080077dd
 8007814:	080077dd 	.word	0x080077dd
 8007818:	080077dd 	.word	0x080077dd
 800781c:	080077dd 	.word	0x080077dd
 8007820:	08007963 	.word	0x08007963
 8007824:	0800788b 	.word	0x0800788b
 8007828:	0800791d 	.word	0x0800791d
 800782c:	080077dd 	.word	0x080077dd
 8007830:	080077dd 	.word	0x080077dd
 8007834:	08007985 	.word	0x08007985
 8007838:	080077dd 	.word	0x080077dd
 800783c:	0800788b 	.word	0x0800788b
 8007840:	080077dd 	.word	0x080077dd
 8007844:	080077dd 	.word	0x080077dd
 8007848:	08007925 	.word	0x08007925
 800784c:	6833      	ldr	r3, [r6, #0]
 800784e:	1d1a      	adds	r2, r3, #4
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	6032      	str	r2, [r6, #0]
 8007854:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007858:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800785c:	2301      	movs	r3, #1
 800785e:	e09e      	b.n	800799e <_printf_i+0x1ea>
 8007860:	6833      	ldr	r3, [r6, #0]
 8007862:	6820      	ldr	r0, [r4, #0]
 8007864:	1d19      	adds	r1, r3, #4
 8007866:	6031      	str	r1, [r6, #0]
 8007868:	0606      	lsls	r6, r0, #24
 800786a:	d501      	bpl.n	8007870 <_printf_i+0xbc>
 800786c:	681d      	ldr	r5, [r3, #0]
 800786e:	e003      	b.n	8007878 <_printf_i+0xc4>
 8007870:	0645      	lsls	r5, r0, #25
 8007872:	d5fb      	bpl.n	800786c <_printf_i+0xb8>
 8007874:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007878:	2d00      	cmp	r5, #0
 800787a:	da03      	bge.n	8007884 <_printf_i+0xd0>
 800787c:	232d      	movs	r3, #45	@ 0x2d
 800787e:	426d      	negs	r5, r5
 8007880:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007884:	230a      	movs	r3, #10
 8007886:	4859      	ldr	r0, [pc, #356]	@ (80079ec <_printf_i+0x238>)
 8007888:	e011      	b.n	80078ae <_printf_i+0xfa>
 800788a:	6821      	ldr	r1, [r4, #0]
 800788c:	6833      	ldr	r3, [r6, #0]
 800788e:	0608      	lsls	r0, r1, #24
 8007890:	f853 5b04 	ldr.w	r5, [r3], #4
 8007894:	d402      	bmi.n	800789c <_printf_i+0xe8>
 8007896:	0649      	lsls	r1, r1, #25
 8007898:	bf48      	it	mi
 800789a:	b2ad      	uxthmi	r5, r5
 800789c:	2f6f      	cmp	r7, #111	@ 0x6f
 800789e:	6033      	str	r3, [r6, #0]
 80078a0:	bf14      	ite	ne
 80078a2:	230a      	movne	r3, #10
 80078a4:	2308      	moveq	r3, #8
 80078a6:	4851      	ldr	r0, [pc, #324]	@ (80079ec <_printf_i+0x238>)
 80078a8:	2100      	movs	r1, #0
 80078aa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078ae:	6866      	ldr	r6, [r4, #4]
 80078b0:	2e00      	cmp	r6, #0
 80078b2:	bfa8      	it	ge
 80078b4:	6821      	ldrge	r1, [r4, #0]
 80078b6:	60a6      	str	r6, [r4, #8]
 80078b8:	bfa4      	itt	ge
 80078ba:	f021 0104 	bicge.w	r1, r1, #4
 80078be:	6021      	strge	r1, [r4, #0]
 80078c0:	b90d      	cbnz	r5, 80078c6 <_printf_i+0x112>
 80078c2:	2e00      	cmp	r6, #0
 80078c4:	d04b      	beq.n	800795e <_printf_i+0x1aa>
 80078c6:	4616      	mov	r6, r2
 80078c8:	fbb5 f1f3 	udiv	r1, r5, r3
 80078cc:	fb03 5711 	mls	r7, r3, r1, r5
 80078d0:	5dc7      	ldrb	r7, [r0, r7]
 80078d2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80078d6:	462f      	mov	r7, r5
 80078d8:	42bb      	cmp	r3, r7
 80078da:	460d      	mov	r5, r1
 80078dc:	d9f4      	bls.n	80078c8 <_printf_i+0x114>
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d10b      	bne.n	80078fa <_printf_i+0x146>
 80078e2:	6823      	ldr	r3, [r4, #0]
 80078e4:	07df      	lsls	r7, r3, #31
 80078e6:	d508      	bpl.n	80078fa <_printf_i+0x146>
 80078e8:	6923      	ldr	r3, [r4, #16]
 80078ea:	6861      	ldr	r1, [r4, #4]
 80078ec:	4299      	cmp	r1, r3
 80078ee:	bfde      	ittt	le
 80078f0:	2330      	movle	r3, #48	@ 0x30
 80078f2:	f806 3c01 	strble.w	r3, [r6, #-1]
 80078f6:	f106 36ff 	addle.w	r6, r6, #4294967295
 80078fa:	1b92      	subs	r2, r2, r6
 80078fc:	6122      	str	r2, [r4, #16]
 80078fe:	464b      	mov	r3, r9
 8007900:	4621      	mov	r1, r4
 8007902:	4640      	mov	r0, r8
 8007904:	f8cd a000 	str.w	sl, [sp]
 8007908:	aa03      	add	r2, sp, #12
 800790a:	f7ff fee1 	bl	80076d0 <_printf_common>
 800790e:	3001      	adds	r0, #1
 8007910:	d14a      	bne.n	80079a8 <_printf_i+0x1f4>
 8007912:	f04f 30ff 	mov.w	r0, #4294967295
 8007916:	b004      	add	sp, #16
 8007918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800791c:	6823      	ldr	r3, [r4, #0]
 800791e:	f043 0320 	orr.w	r3, r3, #32
 8007922:	6023      	str	r3, [r4, #0]
 8007924:	2778      	movs	r7, #120	@ 0x78
 8007926:	4832      	ldr	r0, [pc, #200]	@ (80079f0 <_printf_i+0x23c>)
 8007928:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800792c:	6823      	ldr	r3, [r4, #0]
 800792e:	6831      	ldr	r1, [r6, #0]
 8007930:	061f      	lsls	r7, r3, #24
 8007932:	f851 5b04 	ldr.w	r5, [r1], #4
 8007936:	d402      	bmi.n	800793e <_printf_i+0x18a>
 8007938:	065f      	lsls	r7, r3, #25
 800793a:	bf48      	it	mi
 800793c:	b2ad      	uxthmi	r5, r5
 800793e:	6031      	str	r1, [r6, #0]
 8007940:	07d9      	lsls	r1, r3, #31
 8007942:	bf44      	itt	mi
 8007944:	f043 0320 	orrmi.w	r3, r3, #32
 8007948:	6023      	strmi	r3, [r4, #0]
 800794a:	b11d      	cbz	r5, 8007954 <_printf_i+0x1a0>
 800794c:	2310      	movs	r3, #16
 800794e:	e7ab      	b.n	80078a8 <_printf_i+0xf4>
 8007950:	4826      	ldr	r0, [pc, #152]	@ (80079ec <_printf_i+0x238>)
 8007952:	e7e9      	b.n	8007928 <_printf_i+0x174>
 8007954:	6823      	ldr	r3, [r4, #0]
 8007956:	f023 0320 	bic.w	r3, r3, #32
 800795a:	6023      	str	r3, [r4, #0]
 800795c:	e7f6      	b.n	800794c <_printf_i+0x198>
 800795e:	4616      	mov	r6, r2
 8007960:	e7bd      	b.n	80078de <_printf_i+0x12a>
 8007962:	6833      	ldr	r3, [r6, #0]
 8007964:	6825      	ldr	r5, [r4, #0]
 8007966:	1d18      	adds	r0, r3, #4
 8007968:	6961      	ldr	r1, [r4, #20]
 800796a:	6030      	str	r0, [r6, #0]
 800796c:	062e      	lsls	r6, r5, #24
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	d501      	bpl.n	8007976 <_printf_i+0x1c2>
 8007972:	6019      	str	r1, [r3, #0]
 8007974:	e002      	b.n	800797c <_printf_i+0x1c8>
 8007976:	0668      	lsls	r0, r5, #25
 8007978:	d5fb      	bpl.n	8007972 <_printf_i+0x1be>
 800797a:	8019      	strh	r1, [r3, #0]
 800797c:	2300      	movs	r3, #0
 800797e:	4616      	mov	r6, r2
 8007980:	6123      	str	r3, [r4, #16]
 8007982:	e7bc      	b.n	80078fe <_printf_i+0x14a>
 8007984:	6833      	ldr	r3, [r6, #0]
 8007986:	2100      	movs	r1, #0
 8007988:	1d1a      	adds	r2, r3, #4
 800798a:	6032      	str	r2, [r6, #0]
 800798c:	681e      	ldr	r6, [r3, #0]
 800798e:	6862      	ldr	r2, [r4, #4]
 8007990:	4630      	mov	r0, r6
 8007992:	f000 fcae 	bl	80082f2 <memchr>
 8007996:	b108      	cbz	r0, 800799c <_printf_i+0x1e8>
 8007998:	1b80      	subs	r0, r0, r6
 800799a:	6060      	str	r0, [r4, #4]
 800799c:	6863      	ldr	r3, [r4, #4]
 800799e:	6123      	str	r3, [r4, #16]
 80079a0:	2300      	movs	r3, #0
 80079a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079a6:	e7aa      	b.n	80078fe <_printf_i+0x14a>
 80079a8:	4632      	mov	r2, r6
 80079aa:	4649      	mov	r1, r9
 80079ac:	4640      	mov	r0, r8
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	47d0      	blx	sl
 80079b2:	3001      	adds	r0, #1
 80079b4:	d0ad      	beq.n	8007912 <_printf_i+0x15e>
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	079b      	lsls	r3, r3, #30
 80079ba:	d413      	bmi.n	80079e4 <_printf_i+0x230>
 80079bc:	68e0      	ldr	r0, [r4, #12]
 80079be:	9b03      	ldr	r3, [sp, #12]
 80079c0:	4298      	cmp	r0, r3
 80079c2:	bfb8      	it	lt
 80079c4:	4618      	movlt	r0, r3
 80079c6:	e7a6      	b.n	8007916 <_printf_i+0x162>
 80079c8:	2301      	movs	r3, #1
 80079ca:	4632      	mov	r2, r6
 80079cc:	4649      	mov	r1, r9
 80079ce:	4640      	mov	r0, r8
 80079d0:	47d0      	blx	sl
 80079d2:	3001      	adds	r0, #1
 80079d4:	d09d      	beq.n	8007912 <_printf_i+0x15e>
 80079d6:	3501      	adds	r5, #1
 80079d8:	68e3      	ldr	r3, [r4, #12]
 80079da:	9903      	ldr	r1, [sp, #12]
 80079dc:	1a5b      	subs	r3, r3, r1
 80079de:	42ab      	cmp	r3, r5
 80079e0:	dcf2      	bgt.n	80079c8 <_printf_i+0x214>
 80079e2:	e7eb      	b.n	80079bc <_printf_i+0x208>
 80079e4:	2500      	movs	r5, #0
 80079e6:	f104 0619 	add.w	r6, r4, #25
 80079ea:	e7f5      	b.n	80079d8 <_printf_i+0x224>
 80079ec:	0800a84a 	.word	0x0800a84a
 80079f0:	0800a85b 	.word	0x0800a85b

080079f4 <__sflush_r>:
 80079f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80079f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fa:	0716      	lsls	r6, r2, #28
 80079fc:	4605      	mov	r5, r0
 80079fe:	460c      	mov	r4, r1
 8007a00:	d454      	bmi.n	8007aac <__sflush_r+0xb8>
 8007a02:	684b      	ldr	r3, [r1, #4]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dc02      	bgt.n	8007a0e <__sflush_r+0x1a>
 8007a08:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dd48      	ble.n	8007aa0 <__sflush_r+0xac>
 8007a0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a10:	2e00      	cmp	r6, #0
 8007a12:	d045      	beq.n	8007aa0 <__sflush_r+0xac>
 8007a14:	2300      	movs	r3, #0
 8007a16:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a1a:	682f      	ldr	r7, [r5, #0]
 8007a1c:	6a21      	ldr	r1, [r4, #32]
 8007a1e:	602b      	str	r3, [r5, #0]
 8007a20:	d030      	beq.n	8007a84 <__sflush_r+0x90>
 8007a22:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a24:	89a3      	ldrh	r3, [r4, #12]
 8007a26:	0759      	lsls	r1, r3, #29
 8007a28:	d505      	bpl.n	8007a36 <__sflush_r+0x42>
 8007a2a:	6863      	ldr	r3, [r4, #4]
 8007a2c:	1ad2      	subs	r2, r2, r3
 8007a2e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a30:	b10b      	cbz	r3, 8007a36 <__sflush_r+0x42>
 8007a32:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a34:	1ad2      	subs	r2, r2, r3
 8007a36:	2300      	movs	r3, #0
 8007a38:	4628      	mov	r0, r5
 8007a3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a3c:	6a21      	ldr	r1, [r4, #32]
 8007a3e:	47b0      	blx	r6
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	89a3      	ldrh	r3, [r4, #12]
 8007a44:	d106      	bne.n	8007a54 <__sflush_r+0x60>
 8007a46:	6829      	ldr	r1, [r5, #0]
 8007a48:	291d      	cmp	r1, #29
 8007a4a:	d82b      	bhi.n	8007aa4 <__sflush_r+0xb0>
 8007a4c:	4a28      	ldr	r2, [pc, #160]	@ (8007af0 <__sflush_r+0xfc>)
 8007a4e:	410a      	asrs	r2, r1
 8007a50:	07d6      	lsls	r6, r2, #31
 8007a52:	d427      	bmi.n	8007aa4 <__sflush_r+0xb0>
 8007a54:	2200      	movs	r2, #0
 8007a56:	6062      	str	r2, [r4, #4]
 8007a58:	6922      	ldr	r2, [r4, #16]
 8007a5a:	04d9      	lsls	r1, r3, #19
 8007a5c:	6022      	str	r2, [r4, #0]
 8007a5e:	d504      	bpl.n	8007a6a <__sflush_r+0x76>
 8007a60:	1c42      	adds	r2, r0, #1
 8007a62:	d101      	bne.n	8007a68 <__sflush_r+0x74>
 8007a64:	682b      	ldr	r3, [r5, #0]
 8007a66:	b903      	cbnz	r3, 8007a6a <__sflush_r+0x76>
 8007a68:	6560      	str	r0, [r4, #84]	@ 0x54
 8007a6a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a6c:	602f      	str	r7, [r5, #0]
 8007a6e:	b1b9      	cbz	r1, 8007aa0 <__sflush_r+0xac>
 8007a70:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a74:	4299      	cmp	r1, r3
 8007a76:	d002      	beq.n	8007a7e <__sflush_r+0x8a>
 8007a78:	4628      	mov	r0, r5
 8007a7a:	f001 faa9 	bl	8008fd0 <_free_r>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a82:	e00d      	b.n	8007aa0 <__sflush_r+0xac>
 8007a84:	2301      	movs	r3, #1
 8007a86:	4628      	mov	r0, r5
 8007a88:	47b0      	blx	r6
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	1c50      	adds	r0, r2, #1
 8007a8e:	d1c9      	bne.n	8007a24 <__sflush_r+0x30>
 8007a90:	682b      	ldr	r3, [r5, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d0c6      	beq.n	8007a24 <__sflush_r+0x30>
 8007a96:	2b1d      	cmp	r3, #29
 8007a98:	d001      	beq.n	8007a9e <__sflush_r+0xaa>
 8007a9a:	2b16      	cmp	r3, #22
 8007a9c:	d11d      	bne.n	8007ada <__sflush_r+0xe6>
 8007a9e:	602f      	str	r7, [r5, #0]
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	e021      	b.n	8007ae8 <__sflush_r+0xf4>
 8007aa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007aa8:	b21b      	sxth	r3, r3
 8007aaa:	e01a      	b.n	8007ae2 <__sflush_r+0xee>
 8007aac:	690f      	ldr	r7, [r1, #16]
 8007aae:	2f00      	cmp	r7, #0
 8007ab0:	d0f6      	beq.n	8007aa0 <__sflush_r+0xac>
 8007ab2:	0793      	lsls	r3, r2, #30
 8007ab4:	bf18      	it	ne
 8007ab6:	2300      	movne	r3, #0
 8007ab8:	680e      	ldr	r6, [r1, #0]
 8007aba:	bf08      	it	eq
 8007abc:	694b      	ldreq	r3, [r1, #20]
 8007abe:	1bf6      	subs	r6, r6, r7
 8007ac0:	600f      	str	r7, [r1, #0]
 8007ac2:	608b      	str	r3, [r1, #8]
 8007ac4:	2e00      	cmp	r6, #0
 8007ac6:	ddeb      	ble.n	8007aa0 <__sflush_r+0xac>
 8007ac8:	4633      	mov	r3, r6
 8007aca:	463a      	mov	r2, r7
 8007acc:	4628      	mov	r0, r5
 8007ace:	6a21      	ldr	r1, [r4, #32]
 8007ad0:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8007ad4:	47e0      	blx	ip
 8007ad6:	2800      	cmp	r0, #0
 8007ad8:	dc07      	bgt.n	8007aea <__sflush_r+0xf6>
 8007ada:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ade:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8007ae6:	81a3      	strh	r3, [r4, #12]
 8007ae8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007aea:	4407      	add	r7, r0
 8007aec:	1a36      	subs	r6, r6, r0
 8007aee:	e7e9      	b.n	8007ac4 <__sflush_r+0xd0>
 8007af0:	dfbffffe 	.word	0xdfbffffe

08007af4 <_fflush_r>:
 8007af4:	b538      	push	{r3, r4, r5, lr}
 8007af6:	690b      	ldr	r3, [r1, #16]
 8007af8:	4605      	mov	r5, r0
 8007afa:	460c      	mov	r4, r1
 8007afc:	b913      	cbnz	r3, 8007b04 <_fflush_r+0x10>
 8007afe:	2500      	movs	r5, #0
 8007b00:	4628      	mov	r0, r5
 8007b02:	bd38      	pop	{r3, r4, r5, pc}
 8007b04:	b118      	cbz	r0, 8007b0e <_fflush_r+0x1a>
 8007b06:	6a03      	ldr	r3, [r0, #32]
 8007b08:	b90b      	cbnz	r3, 8007b0e <_fflush_r+0x1a>
 8007b0a:	f000 f8bb 	bl	8007c84 <__sinit>
 8007b0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d0f3      	beq.n	8007afe <_fflush_r+0xa>
 8007b16:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b18:	07d0      	lsls	r0, r2, #31
 8007b1a:	d404      	bmi.n	8007b26 <_fflush_r+0x32>
 8007b1c:	0599      	lsls	r1, r3, #22
 8007b1e:	d402      	bmi.n	8007b26 <_fflush_r+0x32>
 8007b20:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b22:	f000 fbe4 	bl	80082ee <__retarget_lock_acquire_recursive>
 8007b26:	4628      	mov	r0, r5
 8007b28:	4621      	mov	r1, r4
 8007b2a:	f7ff ff63 	bl	80079f4 <__sflush_r>
 8007b2e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b30:	4605      	mov	r5, r0
 8007b32:	07da      	lsls	r2, r3, #31
 8007b34:	d4e4      	bmi.n	8007b00 <_fflush_r+0xc>
 8007b36:	89a3      	ldrh	r3, [r4, #12]
 8007b38:	059b      	lsls	r3, r3, #22
 8007b3a:	d4e1      	bmi.n	8007b00 <_fflush_r+0xc>
 8007b3c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b3e:	f000 fbd7 	bl	80082f0 <__retarget_lock_release_recursive>
 8007b42:	e7dd      	b.n	8007b00 <_fflush_r+0xc>

08007b44 <fflush>:
 8007b44:	4601      	mov	r1, r0
 8007b46:	b920      	cbnz	r0, 8007b52 <fflush+0xe>
 8007b48:	4a04      	ldr	r2, [pc, #16]	@ (8007b5c <fflush+0x18>)
 8007b4a:	4905      	ldr	r1, [pc, #20]	@ (8007b60 <fflush+0x1c>)
 8007b4c:	4805      	ldr	r0, [pc, #20]	@ (8007b64 <fflush+0x20>)
 8007b4e:	f000 b8ef 	b.w	8007d30 <_fwalk_sglue>
 8007b52:	4b05      	ldr	r3, [pc, #20]	@ (8007b68 <fflush+0x24>)
 8007b54:	6818      	ldr	r0, [r3, #0]
 8007b56:	f7ff bfcd 	b.w	8007af4 <_fflush_r>
 8007b5a:	bf00      	nop
 8007b5c:	2000000c 	.word	0x2000000c
 8007b60:	08007af5 	.word	0x08007af5
 8007b64:	2000001c 	.word	0x2000001c
 8007b68:	20000018 	.word	0x20000018

08007b6c <std>:
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	b510      	push	{r4, lr}
 8007b70:	4604      	mov	r4, r0
 8007b72:	e9c0 3300 	strd	r3, r3, [r0]
 8007b76:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b7a:	6083      	str	r3, [r0, #8]
 8007b7c:	8181      	strh	r1, [r0, #12]
 8007b7e:	6643      	str	r3, [r0, #100]	@ 0x64
 8007b80:	81c2      	strh	r2, [r0, #14]
 8007b82:	6183      	str	r3, [r0, #24]
 8007b84:	4619      	mov	r1, r3
 8007b86:	2208      	movs	r2, #8
 8007b88:	305c      	adds	r0, #92	@ 0x5c
 8007b8a:	f000 fadf 	bl	800814c <memset>
 8007b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bc4 <std+0x58>)
 8007b90:	6224      	str	r4, [r4, #32]
 8007b92:	6263      	str	r3, [r4, #36]	@ 0x24
 8007b94:	4b0c      	ldr	r3, [pc, #48]	@ (8007bc8 <std+0x5c>)
 8007b96:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007b98:	4b0c      	ldr	r3, [pc, #48]	@ (8007bcc <std+0x60>)
 8007b9a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd0 <std+0x64>)
 8007b9e:	6323      	str	r3, [r4, #48]	@ 0x30
 8007ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8007bd4 <std+0x68>)
 8007ba2:	429c      	cmp	r4, r3
 8007ba4:	d006      	beq.n	8007bb4 <std+0x48>
 8007ba6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007baa:	4294      	cmp	r4, r2
 8007bac:	d002      	beq.n	8007bb4 <std+0x48>
 8007bae:	33d0      	adds	r3, #208	@ 0xd0
 8007bb0:	429c      	cmp	r4, r3
 8007bb2:	d105      	bne.n	8007bc0 <std+0x54>
 8007bb4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007bb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bbc:	f000 bb96 	b.w	80082ec <__retarget_lock_init_recursive>
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08007f69 	.word	0x08007f69
 8007bc8:	08007f8b 	.word	0x08007f8b
 8007bcc:	08007fc3 	.word	0x08007fc3
 8007bd0:	08007fe7 	.word	0x08007fe7
 8007bd4:	200002e8 	.word	0x200002e8

08007bd8 <stdio_exit_handler>:
 8007bd8:	4a02      	ldr	r2, [pc, #8]	@ (8007be4 <stdio_exit_handler+0xc>)
 8007bda:	4903      	ldr	r1, [pc, #12]	@ (8007be8 <stdio_exit_handler+0x10>)
 8007bdc:	4803      	ldr	r0, [pc, #12]	@ (8007bec <stdio_exit_handler+0x14>)
 8007bde:	f000 b8a7 	b.w	8007d30 <_fwalk_sglue>
 8007be2:	bf00      	nop
 8007be4:	2000000c 	.word	0x2000000c
 8007be8:	08007af5 	.word	0x08007af5
 8007bec:	2000001c 	.word	0x2000001c

08007bf0 <cleanup_stdio>:
 8007bf0:	6841      	ldr	r1, [r0, #4]
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	@ (8007c24 <cleanup_stdio+0x34>)
 8007bf4:	b510      	push	{r4, lr}
 8007bf6:	4299      	cmp	r1, r3
 8007bf8:	4604      	mov	r4, r0
 8007bfa:	d001      	beq.n	8007c00 <cleanup_stdio+0x10>
 8007bfc:	f7ff ff7a 	bl	8007af4 <_fflush_r>
 8007c00:	68a1      	ldr	r1, [r4, #8]
 8007c02:	4b09      	ldr	r3, [pc, #36]	@ (8007c28 <cleanup_stdio+0x38>)
 8007c04:	4299      	cmp	r1, r3
 8007c06:	d002      	beq.n	8007c0e <cleanup_stdio+0x1e>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	f7ff ff73 	bl	8007af4 <_fflush_r>
 8007c0e:	68e1      	ldr	r1, [r4, #12]
 8007c10:	4b06      	ldr	r3, [pc, #24]	@ (8007c2c <cleanup_stdio+0x3c>)
 8007c12:	4299      	cmp	r1, r3
 8007c14:	d004      	beq.n	8007c20 <cleanup_stdio+0x30>
 8007c16:	4620      	mov	r0, r4
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f7ff bf6a 	b.w	8007af4 <_fflush_r>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	200002e8 	.word	0x200002e8
 8007c28:	20000350 	.word	0x20000350
 8007c2c:	200003b8 	.word	0x200003b8

08007c30 <global_stdio_init.part.0>:
 8007c30:	b510      	push	{r4, lr}
 8007c32:	4b0b      	ldr	r3, [pc, #44]	@ (8007c60 <global_stdio_init.part.0+0x30>)
 8007c34:	4c0b      	ldr	r4, [pc, #44]	@ (8007c64 <global_stdio_init.part.0+0x34>)
 8007c36:	4a0c      	ldr	r2, [pc, #48]	@ (8007c68 <global_stdio_init.part.0+0x38>)
 8007c38:	4620      	mov	r0, r4
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	2104      	movs	r1, #4
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f7ff ff94 	bl	8007b6c <std>
 8007c44:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007c48:	2201      	movs	r2, #1
 8007c4a:	2109      	movs	r1, #9
 8007c4c:	f7ff ff8e 	bl	8007b6c <std>
 8007c50:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007c54:	2202      	movs	r2, #2
 8007c56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c5a:	2112      	movs	r1, #18
 8007c5c:	f7ff bf86 	b.w	8007b6c <std>
 8007c60:	20000420 	.word	0x20000420
 8007c64:	200002e8 	.word	0x200002e8
 8007c68:	08007bd9 	.word	0x08007bd9

08007c6c <__sfp_lock_acquire>:
 8007c6c:	4801      	ldr	r0, [pc, #4]	@ (8007c74 <__sfp_lock_acquire+0x8>)
 8007c6e:	f000 bb3e 	b.w	80082ee <__retarget_lock_acquire_recursive>
 8007c72:	bf00      	nop
 8007c74:	20000429 	.word	0x20000429

08007c78 <__sfp_lock_release>:
 8007c78:	4801      	ldr	r0, [pc, #4]	@ (8007c80 <__sfp_lock_release+0x8>)
 8007c7a:	f000 bb39 	b.w	80082f0 <__retarget_lock_release_recursive>
 8007c7e:	bf00      	nop
 8007c80:	20000429 	.word	0x20000429

08007c84 <__sinit>:
 8007c84:	b510      	push	{r4, lr}
 8007c86:	4604      	mov	r4, r0
 8007c88:	f7ff fff0 	bl	8007c6c <__sfp_lock_acquire>
 8007c8c:	6a23      	ldr	r3, [r4, #32]
 8007c8e:	b11b      	cbz	r3, 8007c98 <__sinit+0x14>
 8007c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c94:	f7ff bff0 	b.w	8007c78 <__sfp_lock_release>
 8007c98:	4b04      	ldr	r3, [pc, #16]	@ (8007cac <__sinit+0x28>)
 8007c9a:	6223      	str	r3, [r4, #32]
 8007c9c:	4b04      	ldr	r3, [pc, #16]	@ (8007cb0 <__sinit+0x2c>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d1f5      	bne.n	8007c90 <__sinit+0xc>
 8007ca4:	f7ff ffc4 	bl	8007c30 <global_stdio_init.part.0>
 8007ca8:	e7f2      	b.n	8007c90 <__sinit+0xc>
 8007caa:	bf00      	nop
 8007cac:	08007bf1 	.word	0x08007bf1
 8007cb0:	20000420 	.word	0x20000420

08007cb4 <fiprintf>:
 8007cb4:	b40e      	push	{r1, r2, r3}
 8007cb6:	b503      	push	{r0, r1, lr}
 8007cb8:	4601      	mov	r1, r0
 8007cba:	ab03      	add	r3, sp, #12
 8007cbc:	4805      	ldr	r0, [pc, #20]	@ (8007cd4 <fiprintf+0x20>)
 8007cbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cc2:	6800      	ldr	r0, [r0, #0]
 8007cc4:	9301      	str	r3, [sp, #4]
 8007cc6:	f7ff fbe1 	bl	800748c <_vfiprintf_r>
 8007cca:	b002      	add	sp, #8
 8007ccc:	f85d eb04 	ldr.w	lr, [sp], #4
 8007cd0:	b003      	add	sp, #12
 8007cd2:	4770      	bx	lr
 8007cd4:	20000018 	.word	0x20000018

08007cd8 <_fputc_r>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	460e      	mov	r6, r1
 8007cdc:	4614      	mov	r4, r2
 8007cde:	4605      	mov	r5, r0
 8007ce0:	b118      	cbz	r0, 8007cea <_fputc_r+0x12>
 8007ce2:	6a03      	ldr	r3, [r0, #32]
 8007ce4:	b90b      	cbnz	r3, 8007cea <_fputc_r+0x12>
 8007ce6:	f7ff ffcd 	bl	8007c84 <__sinit>
 8007cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007cec:	07d8      	lsls	r0, r3, #31
 8007cee:	d405      	bmi.n	8007cfc <_fputc_r+0x24>
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	0599      	lsls	r1, r3, #22
 8007cf4:	d402      	bmi.n	8007cfc <_fputc_r+0x24>
 8007cf6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007cf8:	f000 faf9 	bl	80082ee <__retarget_lock_acquire_recursive>
 8007cfc:	4622      	mov	r2, r4
 8007cfe:	4628      	mov	r0, r5
 8007d00:	4631      	mov	r1, r6
 8007d02:	f000 f89f 	bl	8007e44 <_putc_r>
 8007d06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d08:	4605      	mov	r5, r0
 8007d0a:	07da      	lsls	r2, r3, #31
 8007d0c:	d405      	bmi.n	8007d1a <_fputc_r+0x42>
 8007d0e:	89a3      	ldrh	r3, [r4, #12]
 8007d10:	059b      	lsls	r3, r3, #22
 8007d12:	d402      	bmi.n	8007d1a <_fputc_r+0x42>
 8007d14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d16:	f000 faeb 	bl	80082f0 <__retarget_lock_release_recursive>
 8007d1a:	4628      	mov	r0, r5
 8007d1c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007d20 <fputc>:
 8007d20:	4b02      	ldr	r3, [pc, #8]	@ (8007d2c <fputc+0xc>)
 8007d22:	460a      	mov	r2, r1
 8007d24:	4601      	mov	r1, r0
 8007d26:	6818      	ldr	r0, [r3, #0]
 8007d28:	f7ff bfd6 	b.w	8007cd8 <_fputc_r>
 8007d2c:	20000018 	.word	0x20000018

08007d30 <_fwalk_sglue>:
 8007d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d34:	4607      	mov	r7, r0
 8007d36:	4688      	mov	r8, r1
 8007d38:	4614      	mov	r4, r2
 8007d3a:	2600      	movs	r6, #0
 8007d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d40:	f1b9 0901 	subs.w	r9, r9, #1
 8007d44:	d505      	bpl.n	8007d52 <_fwalk_sglue+0x22>
 8007d46:	6824      	ldr	r4, [r4, #0]
 8007d48:	2c00      	cmp	r4, #0
 8007d4a:	d1f7      	bne.n	8007d3c <_fwalk_sglue+0xc>
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d52:	89ab      	ldrh	r3, [r5, #12]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d907      	bls.n	8007d68 <_fwalk_sglue+0x38>
 8007d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d5c:	3301      	adds	r3, #1
 8007d5e:	d003      	beq.n	8007d68 <_fwalk_sglue+0x38>
 8007d60:	4629      	mov	r1, r5
 8007d62:	4638      	mov	r0, r7
 8007d64:	47c0      	blx	r8
 8007d66:	4306      	orrs	r6, r0
 8007d68:	3568      	adds	r5, #104	@ 0x68
 8007d6a:	e7e9      	b.n	8007d40 <_fwalk_sglue+0x10>

08007d6c <_fwrite_r>:
 8007d6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	9c08      	ldr	r4, [sp, #32]
 8007d72:	468a      	mov	sl, r1
 8007d74:	4690      	mov	r8, r2
 8007d76:	4606      	mov	r6, r0
 8007d78:	fb02 f903 	mul.w	r9, r2, r3
 8007d7c:	b118      	cbz	r0, 8007d86 <_fwrite_r+0x1a>
 8007d7e:	6a03      	ldr	r3, [r0, #32]
 8007d80:	b90b      	cbnz	r3, 8007d86 <_fwrite_r+0x1a>
 8007d82:	f7ff ff7f 	bl	8007c84 <__sinit>
 8007d86:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d88:	07dd      	lsls	r5, r3, #31
 8007d8a:	d405      	bmi.n	8007d98 <_fwrite_r+0x2c>
 8007d8c:	89a3      	ldrh	r3, [r4, #12]
 8007d8e:	0598      	lsls	r0, r3, #22
 8007d90:	d402      	bmi.n	8007d98 <_fwrite_r+0x2c>
 8007d92:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d94:	f000 faab 	bl	80082ee <__retarget_lock_acquire_recursive>
 8007d98:	89a3      	ldrh	r3, [r4, #12]
 8007d9a:	0719      	lsls	r1, r3, #28
 8007d9c:	d516      	bpl.n	8007dcc <_fwrite_r+0x60>
 8007d9e:	6923      	ldr	r3, [r4, #16]
 8007da0:	b1a3      	cbz	r3, 8007dcc <_fwrite_r+0x60>
 8007da2:	2500      	movs	r5, #0
 8007da4:	454d      	cmp	r5, r9
 8007da6:	d01f      	beq.n	8007de8 <_fwrite_r+0x7c>
 8007da8:	68a7      	ldr	r7, [r4, #8]
 8007daa:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8007dae:	3f01      	subs	r7, #1
 8007db0:	2f00      	cmp	r7, #0
 8007db2:	60a7      	str	r7, [r4, #8]
 8007db4:	da04      	bge.n	8007dc0 <_fwrite_r+0x54>
 8007db6:	69a3      	ldr	r3, [r4, #24]
 8007db8:	429f      	cmp	r7, r3
 8007dba:	db0f      	blt.n	8007ddc <_fwrite_r+0x70>
 8007dbc:	290a      	cmp	r1, #10
 8007dbe:	d00d      	beq.n	8007ddc <_fwrite_r+0x70>
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	6022      	str	r2, [r4, #0]
 8007dc6:	7019      	strb	r1, [r3, #0]
 8007dc8:	3501      	adds	r5, #1
 8007dca:	e7eb      	b.n	8007da4 <_fwrite_r+0x38>
 8007dcc:	4621      	mov	r1, r4
 8007dce:	4630      	mov	r0, r6
 8007dd0:	f000 f94c 	bl	800806c <__swsetup_r>
 8007dd4:	2800      	cmp	r0, #0
 8007dd6:	d0e4      	beq.n	8007da2 <_fwrite_r+0x36>
 8007dd8:	2500      	movs	r5, #0
 8007dda:	e005      	b.n	8007de8 <_fwrite_r+0x7c>
 8007ddc:	4622      	mov	r2, r4
 8007dde:	4630      	mov	r0, r6
 8007de0:	f000 f905 	bl	8007fee <__swbuf_r>
 8007de4:	3001      	adds	r0, #1
 8007de6:	d1ef      	bne.n	8007dc8 <_fwrite_r+0x5c>
 8007de8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dea:	07da      	lsls	r2, r3, #31
 8007dec:	d405      	bmi.n	8007dfa <_fwrite_r+0x8e>
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	059b      	lsls	r3, r3, #22
 8007df2:	d402      	bmi.n	8007dfa <_fwrite_r+0x8e>
 8007df4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007df6:	f000 fa7b 	bl	80082f0 <__retarget_lock_release_recursive>
 8007dfa:	fbb5 f0f8 	udiv	r0, r5, r8
 8007dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08007e04 <fwrite>:
 8007e04:	b507      	push	{r0, r1, r2, lr}
 8007e06:	9300      	str	r3, [sp, #0]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	460a      	mov	r2, r1
 8007e0c:	4601      	mov	r1, r0
 8007e0e:	4803      	ldr	r0, [pc, #12]	@ (8007e1c <fwrite+0x18>)
 8007e10:	6800      	ldr	r0, [r0, #0]
 8007e12:	f7ff ffab 	bl	8007d6c <_fwrite_r>
 8007e16:	b003      	add	sp, #12
 8007e18:	f85d fb04 	ldr.w	pc, [sp], #4
 8007e1c:	20000018 	.word	0x20000018

08007e20 <iprintf>:
 8007e20:	b40f      	push	{r0, r1, r2, r3}
 8007e22:	b507      	push	{r0, r1, r2, lr}
 8007e24:	4906      	ldr	r1, [pc, #24]	@ (8007e40 <iprintf+0x20>)
 8007e26:	ab04      	add	r3, sp, #16
 8007e28:	6808      	ldr	r0, [r1, #0]
 8007e2a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e2e:	6881      	ldr	r1, [r0, #8]
 8007e30:	9301      	str	r3, [sp, #4]
 8007e32:	f7ff fb2b 	bl	800748c <_vfiprintf_r>
 8007e36:	b003      	add	sp, #12
 8007e38:	f85d eb04 	ldr.w	lr, [sp], #4
 8007e3c:	b004      	add	sp, #16
 8007e3e:	4770      	bx	lr
 8007e40:	20000018 	.word	0x20000018

08007e44 <_putc_r>:
 8007e44:	b570      	push	{r4, r5, r6, lr}
 8007e46:	460d      	mov	r5, r1
 8007e48:	4614      	mov	r4, r2
 8007e4a:	4606      	mov	r6, r0
 8007e4c:	b118      	cbz	r0, 8007e56 <_putc_r+0x12>
 8007e4e:	6a03      	ldr	r3, [r0, #32]
 8007e50:	b90b      	cbnz	r3, 8007e56 <_putc_r+0x12>
 8007e52:	f7ff ff17 	bl	8007c84 <__sinit>
 8007e56:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e58:	07d8      	lsls	r0, r3, #31
 8007e5a:	d405      	bmi.n	8007e68 <_putc_r+0x24>
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	0599      	lsls	r1, r3, #22
 8007e60:	d402      	bmi.n	8007e68 <_putc_r+0x24>
 8007e62:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e64:	f000 fa43 	bl	80082ee <__retarget_lock_acquire_recursive>
 8007e68:	68a3      	ldr	r3, [r4, #8]
 8007e6a:	3b01      	subs	r3, #1
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	60a3      	str	r3, [r4, #8]
 8007e70:	da05      	bge.n	8007e7e <_putc_r+0x3a>
 8007e72:	69a2      	ldr	r2, [r4, #24]
 8007e74:	4293      	cmp	r3, r2
 8007e76:	db12      	blt.n	8007e9e <_putc_r+0x5a>
 8007e78:	b2eb      	uxtb	r3, r5
 8007e7a:	2b0a      	cmp	r3, #10
 8007e7c:	d00f      	beq.n	8007e9e <_putc_r+0x5a>
 8007e7e:	6823      	ldr	r3, [r4, #0]
 8007e80:	1c5a      	adds	r2, r3, #1
 8007e82:	6022      	str	r2, [r4, #0]
 8007e84:	701d      	strb	r5, [r3, #0]
 8007e86:	b2ed      	uxtb	r5, r5
 8007e88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e8a:	07da      	lsls	r2, r3, #31
 8007e8c:	d405      	bmi.n	8007e9a <_putc_r+0x56>
 8007e8e:	89a3      	ldrh	r3, [r4, #12]
 8007e90:	059b      	lsls	r3, r3, #22
 8007e92:	d402      	bmi.n	8007e9a <_putc_r+0x56>
 8007e94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007e96:	f000 fa2b 	bl	80082f0 <__retarget_lock_release_recursive>
 8007e9a:	4628      	mov	r0, r5
 8007e9c:	bd70      	pop	{r4, r5, r6, pc}
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f000 f8a3 	bl	8007fee <__swbuf_r>
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	e7ed      	b.n	8007e88 <_putc_r+0x44>

08007eac <_puts_r>:
 8007eac:	6a03      	ldr	r3, [r0, #32]
 8007eae:	b570      	push	{r4, r5, r6, lr}
 8007eb0:	4605      	mov	r5, r0
 8007eb2:	460e      	mov	r6, r1
 8007eb4:	6884      	ldr	r4, [r0, #8]
 8007eb6:	b90b      	cbnz	r3, 8007ebc <_puts_r+0x10>
 8007eb8:	f7ff fee4 	bl	8007c84 <__sinit>
 8007ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ebe:	07db      	lsls	r3, r3, #31
 8007ec0:	d405      	bmi.n	8007ece <_puts_r+0x22>
 8007ec2:	89a3      	ldrh	r3, [r4, #12]
 8007ec4:	0598      	lsls	r0, r3, #22
 8007ec6:	d402      	bmi.n	8007ece <_puts_r+0x22>
 8007ec8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007eca:	f000 fa10 	bl	80082ee <__retarget_lock_acquire_recursive>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	0719      	lsls	r1, r3, #28
 8007ed2:	d502      	bpl.n	8007eda <_puts_r+0x2e>
 8007ed4:	6923      	ldr	r3, [r4, #16]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d135      	bne.n	8007f46 <_puts_r+0x9a>
 8007eda:	4621      	mov	r1, r4
 8007edc:	4628      	mov	r0, r5
 8007ede:	f000 f8c5 	bl	800806c <__swsetup_r>
 8007ee2:	b380      	cbz	r0, 8007f46 <_puts_r+0x9a>
 8007ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8007ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eea:	07da      	lsls	r2, r3, #31
 8007eec:	d405      	bmi.n	8007efa <_puts_r+0x4e>
 8007eee:	89a3      	ldrh	r3, [r4, #12]
 8007ef0:	059b      	lsls	r3, r3, #22
 8007ef2:	d402      	bmi.n	8007efa <_puts_r+0x4e>
 8007ef4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007ef6:	f000 f9fb 	bl	80082f0 <__retarget_lock_release_recursive>
 8007efa:	4628      	mov	r0, r5
 8007efc:	bd70      	pop	{r4, r5, r6, pc}
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	da04      	bge.n	8007f0c <_puts_r+0x60>
 8007f02:	69a2      	ldr	r2, [r4, #24]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	dc17      	bgt.n	8007f38 <_puts_r+0x8c>
 8007f08:	290a      	cmp	r1, #10
 8007f0a:	d015      	beq.n	8007f38 <_puts_r+0x8c>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	1c5a      	adds	r2, r3, #1
 8007f10:	6022      	str	r2, [r4, #0]
 8007f12:	7019      	strb	r1, [r3, #0]
 8007f14:	68a3      	ldr	r3, [r4, #8]
 8007f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	60a3      	str	r3, [r4, #8]
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d1ed      	bne.n	8007efe <_puts_r+0x52>
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	da11      	bge.n	8007f4a <_puts_r+0x9e>
 8007f26:	4622      	mov	r2, r4
 8007f28:	210a      	movs	r1, #10
 8007f2a:	4628      	mov	r0, r5
 8007f2c:	f000 f85f 	bl	8007fee <__swbuf_r>
 8007f30:	3001      	adds	r0, #1
 8007f32:	d0d7      	beq.n	8007ee4 <_puts_r+0x38>
 8007f34:	250a      	movs	r5, #10
 8007f36:	e7d7      	b.n	8007ee8 <_puts_r+0x3c>
 8007f38:	4622      	mov	r2, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f000 f857 	bl	8007fee <__swbuf_r>
 8007f40:	3001      	adds	r0, #1
 8007f42:	d1e7      	bne.n	8007f14 <_puts_r+0x68>
 8007f44:	e7ce      	b.n	8007ee4 <_puts_r+0x38>
 8007f46:	3e01      	subs	r6, #1
 8007f48:	e7e4      	b.n	8007f14 <_puts_r+0x68>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	6022      	str	r2, [r4, #0]
 8007f50:	220a      	movs	r2, #10
 8007f52:	701a      	strb	r2, [r3, #0]
 8007f54:	e7ee      	b.n	8007f34 <_puts_r+0x88>
	...

08007f58 <puts>:
 8007f58:	4b02      	ldr	r3, [pc, #8]	@ (8007f64 <puts+0xc>)
 8007f5a:	4601      	mov	r1, r0
 8007f5c:	6818      	ldr	r0, [r3, #0]
 8007f5e:	f7ff bfa5 	b.w	8007eac <_puts_r>
 8007f62:	bf00      	nop
 8007f64:	20000018 	.word	0x20000018

08007f68 <__sread>:
 8007f68:	b510      	push	{r4, lr}
 8007f6a:	460c      	mov	r4, r1
 8007f6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f70:	f000 f94a 	bl	8008208 <_read_r>
 8007f74:	2800      	cmp	r0, #0
 8007f76:	bfab      	itete	ge
 8007f78:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007f7a:	89a3      	ldrhlt	r3, [r4, #12]
 8007f7c:	181b      	addge	r3, r3, r0
 8007f7e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007f82:	bfac      	ite	ge
 8007f84:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007f86:	81a3      	strhlt	r3, [r4, #12]
 8007f88:	bd10      	pop	{r4, pc}

08007f8a <__swrite>:
 8007f8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f8e:	461f      	mov	r7, r3
 8007f90:	898b      	ldrh	r3, [r1, #12]
 8007f92:	4605      	mov	r5, r0
 8007f94:	05db      	lsls	r3, r3, #23
 8007f96:	460c      	mov	r4, r1
 8007f98:	4616      	mov	r6, r2
 8007f9a:	d505      	bpl.n	8007fa8 <__swrite+0x1e>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fa4:	f000 f91e 	bl	80081e4 <_lseek_r>
 8007fa8:	89a3      	ldrh	r3, [r4, #12]
 8007faa:	4632      	mov	r2, r6
 8007fac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007fb0:	81a3      	strh	r3, [r4, #12]
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	463b      	mov	r3, r7
 8007fb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007fba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007fbe:	f000 b959 	b.w	8008274 <_write_r>

08007fc2 <__sseek>:
 8007fc2:	b510      	push	{r4, lr}
 8007fc4:	460c      	mov	r4, r1
 8007fc6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fca:	f000 f90b 	bl	80081e4 <_lseek_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	bf15      	itete	ne
 8007fd4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007fd6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007fda:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007fde:	81a3      	strheq	r3, [r4, #12]
 8007fe0:	bf18      	it	ne
 8007fe2:	81a3      	strhne	r3, [r4, #12]
 8007fe4:	bd10      	pop	{r4, pc}

08007fe6 <__sclose>:
 8007fe6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fea:	f000 b8eb 	b.w	80081c4 <_close_r>

08007fee <__swbuf_r>:
 8007fee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ff0:	460e      	mov	r6, r1
 8007ff2:	4614      	mov	r4, r2
 8007ff4:	4605      	mov	r5, r0
 8007ff6:	b118      	cbz	r0, 8008000 <__swbuf_r+0x12>
 8007ff8:	6a03      	ldr	r3, [r0, #32]
 8007ffa:	b90b      	cbnz	r3, 8008000 <__swbuf_r+0x12>
 8007ffc:	f7ff fe42 	bl	8007c84 <__sinit>
 8008000:	69a3      	ldr	r3, [r4, #24]
 8008002:	60a3      	str	r3, [r4, #8]
 8008004:	89a3      	ldrh	r3, [r4, #12]
 8008006:	071a      	lsls	r2, r3, #28
 8008008:	d501      	bpl.n	800800e <__swbuf_r+0x20>
 800800a:	6923      	ldr	r3, [r4, #16]
 800800c:	b943      	cbnz	r3, 8008020 <__swbuf_r+0x32>
 800800e:	4621      	mov	r1, r4
 8008010:	4628      	mov	r0, r5
 8008012:	f000 f82b 	bl	800806c <__swsetup_r>
 8008016:	b118      	cbz	r0, 8008020 <__swbuf_r+0x32>
 8008018:	f04f 37ff 	mov.w	r7, #4294967295
 800801c:	4638      	mov	r0, r7
 800801e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008020:	6823      	ldr	r3, [r4, #0]
 8008022:	6922      	ldr	r2, [r4, #16]
 8008024:	b2f6      	uxtb	r6, r6
 8008026:	1a98      	subs	r0, r3, r2
 8008028:	6963      	ldr	r3, [r4, #20]
 800802a:	4637      	mov	r7, r6
 800802c:	4283      	cmp	r3, r0
 800802e:	dc05      	bgt.n	800803c <__swbuf_r+0x4e>
 8008030:	4621      	mov	r1, r4
 8008032:	4628      	mov	r0, r5
 8008034:	f7ff fd5e 	bl	8007af4 <_fflush_r>
 8008038:	2800      	cmp	r0, #0
 800803a:	d1ed      	bne.n	8008018 <__swbuf_r+0x2a>
 800803c:	68a3      	ldr	r3, [r4, #8]
 800803e:	3b01      	subs	r3, #1
 8008040:	60a3      	str	r3, [r4, #8]
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	1c5a      	adds	r2, r3, #1
 8008046:	6022      	str	r2, [r4, #0]
 8008048:	701e      	strb	r6, [r3, #0]
 800804a:	6962      	ldr	r2, [r4, #20]
 800804c:	1c43      	adds	r3, r0, #1
 800804e:	429a      	cmp	r2, r3
 8008050:	d004      	beq.n	800805c <__swbuf_r+0x6e>
 8008052:	89a3      	ldrh	r3, [r4, #12]
 8008054:	07db      	lsls	r3, r3, #31
 8008056:	d5e1      	bpl.n	800801c <__swbuf_r+0x2e>
 8008058:	2e0a      	cmp	r6, #10
 800805a:	d1df      	bne.n	800801c <__swbuf_r+0x2e>
 800805c:	4621      	mov	r1, r4
 800805e:	4628      	mov	r0, r5
 8008060:	f7ff fd48 	bl	8007af4 <_fflush_r>
 8008064:	2800      	cmp	r0, #0
 8008066:	d0d9      	beq.n	800801c <__swbuf_r+0x2e>
 8008068:	e7d6      	b.n	8008018 <__swbuf_r+0x2a>
	...

0800806c <__swsetup_r>:
 800806c:	b538      	push	{r3, r4, r5, lr}
 800806e:	4b29      	ldr	r3, [pc, #164]	@ (8008114 <__swsetup_r+0xa8>)
 8008070:	4605      	mov	r5, r0
 8008072:	6818      	ldr	r0, [r3, #0]
 8008074:	460c      	mov	r4, r1
 8008076:	b118      	cbz	r0, 8008080 <__swsetup_r+0x14>
 8008078:	6a03      	ldr	r3, [r0, #32]
 800807a:	b90b      	cbnz	r3, 8008080 <__swsetup_r+0x14>
 800807c:	f7ff fe02 	bl	8007c84 <__sinit>
 8008080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008084:	0719      	lsls	r1, r3, #28
 8008086:	d422      	bmi.n	80080ce <__swsetup_r+0x62>
 8008088:	06da      	lsls	r2, r3, #27
 800808a:	d407      	bmi.n	800809c <__swsetup_r+0x30>
 800808c:	2209      	movs	r2, #9
 800808e:	602a      	str	r2, [r5, #0]
 8008090:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008094:	f04f 30ff 	mov.w	r0, #4294967295
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	e033      	b.n	8008104 <__swsetup_r+0x98>
 800809c:	0758      	lsls	r0, r3, #29
 800809e:	d512      	bpl.n	80080c6 <__swsetup_r+0x5a>
 80080a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080a2:	b141      	cbz	r1, 80080b6 <__swsetup_r+0x4a>
 80080a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080a8:	4299      	cmp	r1, r3
 80080aa:	d002      	beq.n	80080b2 <__swsetup_r+0x46>
 80080ac:	4628      	mov	r0, r5
 80080ae:	f000 ff8f 	bl	8008fd0 <_free_r>
 80080b2:	2300      	movs	r3, #0
 80080b4:	6363      	str	r3, [r4, #52]	@ 0x34
 80080b6:	89a3      	ldrh	r3, [r4, #12]
 80080b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080bc:	81a3      	strh	r3, [r4, #12]
 80080be:	2300      	movs	r3, #0
 80080c0:	6063      	str	r3, [r4, #4]
 80080c2:	6923      	ldr	r3, [r4, #16]
 80080c4:	6023      	str	r3, [r4, #0]
 80080c6:	89a3      	ldrh	r3, [r4, #12]
 80080c8:	f043 0308 	orr.w	r3, r3, #8
 80080cc:	81a3      	strh	r3, [r4, #12]
 80080ce:	6923      	ldr	r3, [r4, #16]
 80080d0:	b94b      	cbnz	r3, 80080e6 <__swsetup_r+0x7a>
 80080d2:	89a3      	ldrh	r3, [r4, #12]
 80080d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080dc:	d003      	beq.n	80080e6 <__swsetup_r+0x7a>
 80080de:	4621      	mov	r1, r4
 80080e0:	4628      	mov	r0, r5
 80080e2:	f001 fb62 	bl	80097aa <__smakebuf_r>
 80080e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ea:	f013 0201 	ands.w	r2, r3, #1
 80080ee:	d00a      	beq.n	8008106 <__swsetup_r+0x9a>
 80080f0:	2200      	movs	r2, #0
 80080f2:	60a2      	str	r2, [r4, #8]
 80080f4:	6962      	ldr	r2, [r4, #20]
 80080f6:	4252      	negs	r2, r2
 80080f8:	61a2      	str	r2, [r4, #24]
 80080fa:	6922      	ldr	r2, [r4, #16]
 80080fc:	b942      	cbnz	r2, 8008110 <__swsetup_r+0xa4>
 80080fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008102:	d1c5      	bne.n	8008090 <__swsetup_r+0x24>
 8008104:	bd38      	pop	{r3, r4, r5, pc}
 8008106:	0799      	lsls	r1, r3, #30
 8008108:	bf58      	it	pl
 800810a:	6962      	ldrpl	r2, [r4, #20]
 800810c:	60a2      	str	r2, [r4, #8]
 800810e:	e7f4      	b.n	80080fa <__swsetup_r+0x8e>
 8008110:	2000      	movs	r0, #0
 8008112:	e7f7      	b.n	8008104 <__swsetup_r+0x98>
 8008114:	20000018 	.word	0x20000018

08008118 <memmove>:
 8008118:	4288      	cmp	r0, r1
 800811a:	b510      	push	{r4, lr}
 800811c:	eb01 0402 	add.w	r4, r1, r2
 8008120:	d902      	bls.n	8008128 <memmove+0x10>
 8008122:	4284      	cmp	r4, r0
 8008124:	4623      	mov	r3, r4
 8008126:	d807      	bhi.n	8008138 <memmove+0x20>
 8008128:	1e43      	subs	r3, r0, #1
 800812a:	42a1      	cmp	r1, r4
 800812c:	d008      	beq.n	8008140 <memmove+0x28>
 800812e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008132:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008136:	e7f8      	b.n	800812a <memmove+0x12>
 8008138:	4601      	mov	r1, r0
 800813a:	4402      	add	r2, r0
 800813c:	428a      	cmp	r2, r1
 800813e:	d100      	bne.n	8008142 <memmove+0x2a>
 8008140:	bd10      	pop	{r4, pc}
 8008142:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008146:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800814a:	e7f7      	b.n	800813c <memmove+0x24>

0800814c <memset>:
 800814c:	4603      	mov	r3, r0
 800814e:	4402      	add	r2, r0
 8008150:	4293      	cmp	r3, r2
 8008152:	d100      	bne.n	8008156 <memset+0xa>
 8008154:	4770      	bx	lr
 8008156:	f803 1b01 	strb.w	r1, [r3], #1
 800815a:	e7f9      	b.n	8008150 <memset+0x4>

0800815c <_raise_r>:
 800815c:	291f      	cmp	r1, #31
 800815e:	b538      	push	{r3, r4, r5, lr}
 8008160:	4605      	mov	r5, r0
 8008162:	460c      	mov	r4, r1
 8008164:	d904      	bls.n	8008170 <_raise_r+0x14>
 8008166:	2316      	movs	r3, #22
 8008168:	6003      	str	r3, [r0, #0]
 800816a:	f04f 30ff 	mov.w	r0, #4294967295
 800816e:	bd38      	pop	{r3, r4, r5, pc}
 8008170:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008172:	b112      	cbz	r2, 800817a <_raise_r+0x1e>
 8008174:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008178:	b94b      	cbnz	r3, 800818e <_raise_r+0x32>
 800817a:	4628      	mov	r0, r5
 800817c:	f000 f868 	bl	8008250 <_getpid_r>
 8008180:	4622      	mov	r2, r4
 8008182:	4601      	mov	r1, r0
 8008184:	4628      	mov	r0, r5
 8008186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800818a:	f000 b84f 	b.w	800822c <_kill_r>
 800818e:	2b01      	cmp	r3, #1
 8008190:	d00a      	beq.n	80081a8 <_raise_r+0x4c>
 8008192:	1c59      	adds	r1, r3, #1
 8008194:	d103      	bne.n	800819e <_raise_r+0x42>
 8008196:	2316      	movs	r3, #22
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	2001      	movs	r0, #1
 800819c:	e7e7      	b.n	800816e <_raise_r+0x12>
 800819e:	2100      	movs	r1, #0
 80081a0:	4620      	mov	r0, r4
 80081a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80081a6:	4798      	blx	r3
 80081a8:	2000      	movs	r0, #0
 80081aa:	e7e0      	b.n	800816e <_raise_r+0x12>

080081ac <raise>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	@ (80081b8 <raise+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f7ff bfd3 	b.w	800815c <_raise_r>
 80081b6:	bf00      	nop
 80081b8:	20000018 	.word	0x20000018

080081bc <_localeconv_r>:
 80081bc:	4800      	ldr	r0, [pc, #0]	@ (80081c0 <_localeconv_r+0x4>)
 80081be:	4770      	bx	lr
 80081c0:	20000158 	.word	0x20000158

080081c4 <_close_r>:
 80081c4:	b538      	push	{r3, r4, r5, lr}
 80081c6:	2300      	movs	r3, #0
 80081c8:	4d05      	ldr	r5, [pc, #20]	@ (80081e0 <_close_r+0x1c>)
 80081ca:	4604      	mov	r4, r0
 80081cc:	4608      	mov	r0, r1
 80081ce:	602b      	str	r3, [r5, #0]
 80081d0:	f7f9 f853 	bl	800127a <_close>
 80081d4:	1c43      	adds	r3, r0, #1
 80081d6:	d102      	bne.n	80081de <_close_r+0x1a>
 80081d8:	682b      	ldr	r3, [r5, #0]
 80081da:	b103      	cbz	r3, 80081de <_close_r+0x1a>
 80081dc:	6023      	str	r3, [r4, #0]
 80081de:	bd38      	pop	{r3, r4, r5, pc}
 80081e0:	20000424 	.word	0x20000424

080081e4 <_lseek_r>:
 80081e4:	b538      	push	{r3, r4, r5, lr}
 80081e6:	4604      	mov	r4, r0
 80081e8:	4608      	mov	r0, r1
 80081ea:	4611      	mov	r1, r2
 80081ec:	2200      	movs	r2, #0
 80081ee:	4d05      	ldr	r5, [pc, #20]	@ (8008204 <_lseek_r+0x20>)
 80081f0:	602a      	str	r2, [r5, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	f7f9 f865 	bl	80012c2 <_lseek>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d102      	bne.n	8008202 <_lseek_r+0x1e>
 80081fc:	682b      	ldr	r3, [r5, #0]
 80081fe:	b103      	cbz	r3, 8008202 <_lseek_r+0x1e>
 8008200:	6023      	str	r3, [r4, #0]
 8008202:	bd38      	pop	{r3, r4, r5, pc}
 8008204:	20000424 	.word	0x20000424

08008208 <_read_r>:
 8008208:	b538      	push	{r3, r4, r5, lr}
 800820a:	4604      	mov	r4, r0
 800820c:	4608      	mov	r0, r1
 800820e:	4611      	mov	r1, r2
 8008210:	2200      	movs	r2, #0
 8008212:	4d05      	ldr	r5, [pc, #20]	@ (8008228 <_read_r+0x20>)
 8008214:	602a      	str	r2, [r5, #0]
 8008216:	461a      	mov	r2, r3
 8008218:	f7f9 f812 	bl	8001240 <_read>
 800821c:	1c43      	adds	r3, r0, #1
 800821e:	d102      	bne.n	8008226 <_read_r+0x1e>
 8008220:	682b      	ldr	r3, [r5, #0]
 8008222:	b103      	cbz	r3, 8008226 <_read_r+0x1e>
 8008224:	6023      	str	r3, [r4, #0]
 8008226:	bd38      	pop	{r3, r4, r5, pc}
 8008228:	20000424 	.word	0x20000424

0800822c <_kill_r>:
 800822c:	b538      	push	{r3, r4, r5, lr}
 800822e:	2300      	movs	r3, #0
 8008230:	4d06      	ldr	r5, [pc, #24]	@ (800824c <_kill_r+0x20>)
 8008232:	4604      	mov	r4, r0
 8008234:	4608      	mov	r0, r1
 8008236:	4611      	mov	r1, r2
 8008238:	602b      	str	r3, [r5, #0]
 800823a:	f7f8 ffe6 	bl	800120a <_kill>
 800823e:	1c43      	adds	r3, r0, #1
 8008240:	d102      	bne.n	8008248 <_kill_r+0x1c>
 8008242:	682b      	ldr	r3, [r5, #0]
 8008244:	b103      	cbz	r3, 8008248 <_kill_r+0x1c>
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	bd38      	pop	{r3, r4, r5, pc}
 800824a:	bf00      	nop
 800824c:	20000424 	.word	0x20000424

08008250 <_getpid_r>:
 8008250:	f7f8 bfd4 	b.w	80011fc <_getpid>

08008254 <_sbrk_r>:
 8008254:	b538      	push	{r3, r4, r5, lr}
 8008256:	2300      	movs	r3, #0
 8008258:	4d05      	ldr	r5, [pc, #20]	@ (8008270 <_sbrk_r+0x1c>)
 800825a:	4604      	mov	r4, r0
 800825c:	4608      	mov	r0, r1
 800825e:	602b      	str	r3, [r5, #0]
 8008260:	f7f9 f83c 	bl	80012dc <_sbrk>
 8008264:	1c43      	adds	r3, r0, #1
 8008266:	d102      	bne.n	800826e <_sbrk_r+0x1a>
 8008268:	682b      	ldr	r3, [r5, #0]
 800826a:	b103      	cbz	r3, 800826e <_sbrk_r+0x1a>
 800826c:	6023      	str	r3, [r4, #0]
 800826e:	bd38      	pop	{r3, r4, r5, pc}
 8008270:	20000424 	.word	0x20000424

08008274 <_write_r>:
 8008274:	b538      	push	{r3, r4, r5, lr}
 8008276:	4604      	mov	r4, r0
 8008278:	4608      	mov	r0, r1
 800827a:	4611      	mov	r1, r2
 800827c:	2200      	movs	r2, #0
 800827e:	4d05      	ldr	r5, [pc, #20]	@ (8008294 <_write_r+0x20>)
 8008280:	602a      	str	r2, [r5, #0]
 8008282:	461a      	mov	r2, r3
 8008284:	f7fd fbd2 	bl	8005a2c <_write>
 8008288:	1c43      	adds	r3, r0, #1
 800828a:	d102      	bne.n	8008292 <_write_r+0x1e>
 800828c:	682b      	ldr	r3, [r5, #0]
 800828e:	b103      	cbz	r3, 8008292 <_write_r+0x1e>
 8008290:	6023      	str	r3, [r4, #0]
 8008292:	bd38      	pop	{r3, r4, r5, pc}
 8008294:	20000424 	.word	0x20000424

08008298 <__errno>:
 8008298:	4b01      	ldr	r3, [pc, #4]	@ (80082a0 <__errno+0x8>)
 800829a:	6818      	ldr	r0, [r3, #0]
 800829c:	4770      	bx	lr
 800829e:	bf00      	nop
 80082a0:	20000018 	.word	0x20000018

080082a4 <__libc_init_array>:
 80082a4:	b570      	push	{r4, r5, r6, lr}
 80082a6:	2600      	movs	r6, #0
 80082a8:	4d0c      	ldr	r5, [pc, #48]	@ (80082dc <__libc_init_array+0x38>)
 80082aa:	4c0d      	ldr	r4, [pc, #52]	@ (80082e0 <__libc_init_array+0x3c>)
 80082ac:	1b64      	subs	r4, r4, r5
 80082ae:	10a4      	asrs	r4, r4, #2
 80082b0:	42a6      	cmp	r6, r4
 80082b2:	d109      	bne.n	80082c8 <__libc_init_array+0x24>
 80082b4:	f001 faf8 	bl	80098a8 <_init>
 80082b8:	2600      	movs	r6, #0
 80082ba:	4d0a      	ldr	r5, [pc, #40]	@ (80082e4 <__libc_init_array+0x40>)
 80082bc:	4c0a      	ldr	r4, [pc, #40]	@ (80082e8 <__libc_init_array+0x44>)
 80082be:	1b64      	subs	r4, r4, r5
 80082c0:	10a4      	asrs	r4, r4, #2
 80082c2:	42a6      	cmp	r6, r4
 80082c4:	d105      	bne.n	80082d2 <__libc_init_array+0x2e>
 80082c6:	bd70      	pop	{r4, r5, r6, pc}
 80082c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80082cc:	4798      	blx	r3
 80082ce:	3601      	adds	r6, #1
 80082d0:	e7ee      	b.n	80082b0 <__libc_init_array+0xc>
 80082d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80082d6:	4798      	blx	r3
 80082d8:	3601      	adds	r6, #1
 80082da:	e7f2      	b.n	80082c2 <__libc_init_array+0x1e>
 80082dc:	0800ab4c 	.word	0x0800ab4c
 80082e0:	0800ab4c 	.word	0x0800ab4c
 80082e4:	0800ab4c 	.word	0x0800ab4c
 80082e8:	0800ab54 	.word	0x0800ab54

080082ec <__retarget_lock_init_recursive>:
 80082ec:	4770      	bx	lr

080082ee <__retarget_lock_acquire_recursive>:
 80082ee:	4770      	bx	lr

080082f0 <__retarget_lock_release_recursive>:
 80082f0:	4770      	bx	lr

080082f2 <memchr>:
 80082f2:	4603      	mov	r3, r0
 80082f4:	b510      	push	{r4, lr}
 80082f6:	b2c9      	uxtb	r1, r1
 80082f8:	4402      	add	r2, r0
 80082fa:	4293      	cmp	r3, r2
 80082fc:	4618      	mov	r0, r3
 80082fe:	d101      	bne.n	8008304 <memchr+0x12>
 8008300:	2000      	movs	r0, #0
 8008302:	e003      	b.n	800830c <memchr+0x1a>
 8008304:	7804      	ldrb	r4, [r0, #0]
 8008306:	3301      	adds	r3, #1
 8008308:	428c      	cmp	r4, r1
 800830a:	d1f6      	bne.n	80082fa <memchr+0x8>
 800830c:	bd10      	pop	{r4, pc}

0800830e <memcpy>:
 800830e:	440a      	add	r2, r1
 8008310:	4291      	cmp	r1, r2
 8008312:	f100 33ff 	add.w	r3, r0, #4294967295
 8008316:	d100      	bne.n	800831a <memcpy+0xc>
 8008318:	4770      	bx	lr
 800831a:	b510      	push	{r4, lr}
 800831c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008320:	4291      	cmp	r1, r2
 8008322:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008326:	d1f9      	bne.n	800831c <memcpy+0xe>
 8008328:	bd10      	pop	{r4, pc}

0800832a <quorem>:
 800832a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800832e:	6903      	ldr	r3, [r0, #16]
 8008330:	690c      	ldr	r4, [r1, #16]
 8008332:	4607      	mov	r7, r0
 8008334:	42a3      	cmp	r3, r4
 8008336:	db7e      	blt.n	8008436 <quorem+0x10c>
 8008338:	3c01      	subs	r4, #1
 800833a:	00a3      	lsls	r3, r4, #2
 800833c:	f100 0514 	add.w	r5, r0, #20
 8008340:	f101 0814 	add.w	r8, r1, #20
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800834a:	9301      	str	r3, [sp, #4]
 800834c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008350:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008354:	3301      	adds	r3, #1
 8008356:	429a      	cmp	r2, r3
 8008358:	fbb2 f6f3 	udiv	r6, r2, r3
 800835c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008360:	d32e      	bcc.n	80083c0 <quorem+0x96>
 8008362:	f04f 0a00 	mov.w	sl, #0
 8008366:	46c4      	mov	ip, r8
 8008368:	46ae      	mov	lr, r5
 800836a:	46d3      	mov	fp, sl
 800836c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008370:	b298      	uxth	r0, r3
 8008372:	fb06 a000 	mla	r0, r6, r0, sl
 8008376:	0c1b      	lsrs	r3, r3, #16
 8008378:	0c02      	lsrs	r2, r0, #16
 800837a:	fb06 2303 	mla	r3, r6, r3, r2
 800837e:	f8de 2000 	ldr.w	r2, [lr]
 8008382:	b280      	uxth	r0, r0
 8008384:	b292      	uxth	r2, r2
 8008386:	1a12      	subs	r2, r2, r0
 8008388:	445a      	add	r2, fp
 800838a:	f8de 0000 	ldr.w	r0, [lr]
 800838e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008392:	b29b      	uxth	r3, r3
 8008394:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008398:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800839c:	b292      	uxth	r2, r2
 800839e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80083a2:	45e1      	cmp	r9, ip
 80083a4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80083a8:	f84e 2b04 	str.w	r2, [lr], #4
 80083ac:	d2de      	bcs.n	800836c <quorem+0x42>
 80083ae:	9b00      	ldr	r3, [sp, #0]
 80083b0:	58eb      	ldr	r3, [r5, r3]
 80083b2:	b92b      	cbnz	r3, 80083c0 <quorem+0x96>
 80083b4:	9b01      	ldr	r3, [sp, #4]
 80083b6:	3b04      	subs	r3, #4
 80083b8:	429d      	cmp	r5, r3
 80083ba:	461a      	mov	r2, r3
 80083bc:	d32f      	bcc.n	800841e <quorem+0xf4>
 80083be:	613c      	str	r4, [r7, #16]
 80083c0:	4638      	mov	r0, r7
 80083c2:	f001 f8c5 	bl	8009550 <__mcmp>
 80083c6:	2800      	cmp	r0, #0
 80083c8:	db25      	blt.n	8008416 <quorem+0xec>
 80083ca:	4629      	mov	r1, r5
 80083cc:	2000      	movs	r0, #0
 80083ce:	f858 2b04 	ldr.w	r2, [r8], #4
 80083d2:	f8d1 c000 	ldr.w	ip, [r1]
 80083d6:	fa1f fe82 	uxth.w	lr, r2
 80083da:	fa1f f38c 	uxth.w	r3, ip
 80083de:	eba3 030e 	sub.w	r3, r3, lr
 80083e2:	4403      	add	r3, r0
 80083e4:	0c12      	lsrs	r2, r2, #16
 80083e6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80083ea:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80083ee:	b29b      	uxth	r3, r3
 80083f0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083f4:	45c1      	cmp	r9, r8
 80083f6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80083fa:	f841 3b04 	str.w	r3, [r1], #4
 80083fe:	d2e6      	bcs.n	80083ce <quorem+0xa4>
 8008400:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008408:	b922      	cbnz	r2, 8008414 <quorem+0xea>
 800840a:	3b04      	subs	r3, #4
 800840c:	429d      	cmp	r5, r3
 800840e:	461a      	mov	r2, r3
 8008410:	d30b      	bcc.n	800842a <quorem+0x100>
 8008412:	613c      	str	r4, [r7, #16]
 8008414:	3601      	adds	r6, #1
 8008416:	4630      	mov	r0, r6
 8008418:	b003      	add	sp, #12
 800841a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800841e:	6812      	ldr	r2, [r2, #0]
 8008420:	3b04      	subs	r3, #4
 8008422:	2a00      	cmp	r2, #0
 8008424:	d1cb      	bne.n	80083be <quorem+0x94>
 8008426:	3c01      	subs	r4, #1
 8008428:	e7c6      	b.n	80083b8 <quorem+0x8e>
 800842a:	6812      	ldr	r2, [r2, #0]
 800842c:	3b04      	subs	r3, #4
 800842e:	2a00      	cmp	r2, #0
 8008430:	d1ef      	bne.n	8008412 <quorem+0xe8>
 8008432:	3c01      	subs	r4, #1
 8008434:	e7ea      	b.n	800840c <quorem+0xe2>
 8008436:	2000      	movs	r0, #0
 8008438:	e7ee      	b.n	8008418 <quorem+0xee>
 800843a:	0000      	movs	r0, r0
 800843c:	0000      	movs	r0, r0
	...

08008440 <_dtoa_r>:
 8008440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008444:	4614      	mov	r4, r2
 8008446:	461d      	mov	r5, r3
 8008448:	69c7      	ldr	r7, [r0, #28]
 800844a:	b097      	sub	sp, #92	@ 0x5c
 800844c:	4683      	mov	fp, r0
 800844e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008452:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008454:	b97f      	cbnz	r7, 8008476 <_dtoa_r+0x36>
 8008456:	2010      	movs	r0, #16
 8008458:	f7fe fbfc 	bl	8006c54 <malloc>
 800845c:	4602      	mov	r2, r0
 800845e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008462:	b920      	cbnz	r0, 800846e <_dtoa_r+0x2e>
 8008464:	21ef      	movs	r1, #239	@ 0xef
 8008466:	4ba8      	ldr	r3, [pc, #672]	@ (8008708 <_dtoa_r+0x2c8>)
 8008468:	48a8      	ldr	r0, [pc, #672]	@ (800870c <_dtoa_r+0x2cc>)
 800846a:	f7fe fbb9 	bl	8006be0 <__assert_func>
 800846e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008472:	6007      	str	r7, [r0, #0]
 8008474:	60c7      	str	r7, [r0, #12]
 8008476:	f8db 301c 	ldr.w	r3, [fp, #28]
 800847a:	6819      	ldr	r1, [r3, #0]
 800847c:	b159      	cbz	r1, 8008496 <_dtoa_r+0x56>
 800847e:	685a      	ldr	r2, [r3, #4]
 8008480:	2301      	movs	r3, #1
 8008482:	4093      	lsls	r3, r2
 8008484:	604a      	str	r2, [r1, #4]
 8008486:	608b      	str	r3, [r1, #8]
 8008488:	4658      	mov	r0, fp
 800848a:	f000 fe29 	bl	80090e0 <_Bfree>
 800848e:	2200      	movs	r2, #0
 8008490:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008494:	601a      	str	r2, [r3, #0]
 8008496:	1e2b      	subs	r3, r5, #0
 8008498:	bfaf      	iteee	ge
 800849a:	2300      	movge	r3, #0
 800849c:	2201      	movlt	r2, #1
 800849e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80084a2:	9303      	strlt	r3, [sp, #12]
 80084a4:	bfa8      	it	ge
 80084a6:	6033      	strge	r3, [r6, #0]
 80084a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80084ac:	4b98      	ldr	r3, [pc, #608]	@ (8008710 <_dtoa_r+0x2d0>)
 80084ae:	bfb8      	it	lt
 80084b0:	6032      	strlt	r2, [r6, #0]
 80084b2:	ea33 0308 	bics.w	r3, r3, r8
 80084b6:	d112      	bne.n	80084de <_dtoa_r+0x9e>
 80084b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80084bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80084be:	6013      	str	r3, [r2, #0]
 80084c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80084c4:	4323      	orrs	r3, r4
 80084c6:	f000 8550 	beq.w	8008f6a <_dtoa_r+0xb2a>
 80084ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008714 <_dtoa_r+0x2d4>
 80084d0:	2b00      	cmp	r3, #0
 80084d2:	f000 8552 	beq.w	8008f7a <_dtoa_r+0xb3a>
 80084d6:	f10a 0303 	add.w	r3, sl, #3
 80084da:	f000 bd4c 	b.w	8008f76 <_dtoa_r+0xb36>
 80084de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80084e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80084e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80084ea:	2200      	movs	r2, #0
 80084ec:	2300      	movs	r3, #0
 80084ee:	f7f8 fa5b 	bl	80009a8 <__aeabi_dcmpeq>
 80084f2:	4607      	mov	r7, r0
 80084f4:	b158      	cbz	r0, 800850e <_dtoa_r+0xce>
 80084f6:	2301      	movs	r3, #1
 80084f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80084fa:	6013      	str	r3, [r2, #0]
 80084fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80084fe:	b113      	cbz	r3, 8008506 <_dtoa_r+0xc6>
 8008500:	4b85      	ldr	r3, [pc, #532]	@ (8008718 <_dtoa_r+0x2d8>)
 8008502:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008504:	6013      	str	r3, [r2, #0]
 8008506:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800871c <_dtoa_r+0x2dc>
 800850a:	f000 bd36 	b.w	8008f7a <_dtoa_r+0xb3a>
 800850e:	ab14      	add	r3, sp, #80	@ 0x50
 8008510:	9301      	str	r3, [sp, #4]
 8008512:	ab15      	add	r3, sp, #84	@ 0x54
 8008514:	9300      	str	r3, [sp, #0]
 8008516:	4658      	mov	r0, fp
 8008518:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800851c:	f001 f8c8 	bl	80096b0 <__d2b>
 8008520:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008524:	4681      	mov	r9, r0
 8008526:	2e00      	cmp	r6, #0
 8008528:	d077      	beq.n	800861a <_dtoa_r+0x1da>
 800852a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800852e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008530:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008534:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008538:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800853c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008540:	9712      	str	r7, [sp, #72]	@ 0x48
 8008542:	4619      	mov	r1, r3
 8008544:	2200      	movs	r2, #0
 8008546:	4b76      	ldr	r3, [pc, #472]	@ (8008720 <_dtoa_r+0x2e0>)
 8008548:	f7f7 fe0e 	bl	8000168 <__aeabi_dsub>
 800854c:	a368      	add	r3, pc, #416	@ (adr r3, 80086f0 <_dtoa_r+0x2b0>)
 800854e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008552:	f7f7 ffc1 	bl	80004d8 <__aeabi_dmul>
 8008556:	a368      	add	r3, pc, #416	@ (adr r3, 80086f8 <_dtoa_r+0x2b8>)
 8008558:	e9d3 2300 	ldrd	r2, r3, [r3]
 800855c:	f7f7 fe06 	bl	800016c <__adddf3>
 8008560:	4604      	mov	r4, r0
 8008562:	4630      	mov	r0, r6
 8008564:	460d      	mov	r5, r1
 8008566:	f7f7 ff4d 	bl	8000404 <__aeabi_i2d>
 800856a:	a365      	add	r3, pc, #404	@ (adr r3, 8008700 <_dtoa_r+0x2c0>)
 800856c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008570:	f7f7 ffb2 	bl	80004d8 <__aeabi_dmul>
 8008574:	4602      	mov	r2, r0
 8008576:	460b      	mov	r3, r1
 8008578:	4620      	mov	r0, r4
 800857a:	4629      	mov	r1, r5
 800857c:	f7f7 fdf6 	bl	800016c <__adddf3>
 8008580:	4604      	mov	r4, r0
 8008582:	460d      	mov	r5, r1
 8008584:	f7f8 fa58 	bl	8000a38 <__aeabi_d2iz>
 8008588:	2200      	movs	r2, #0
 800858a:	4607      	mov	r7, r0
 800858c:	2300      	movs	r3, #0
 800858e:	4620      	mov	r0, r4
 8008590:	4629      	mov	r1, r5
 8008592:	f7f8 fa13 	bl	80009bc <__aeabi_dcmplt>
 8008596:	b140      	cbz	r0, 80085aa <_dtoa_r+0x16a>
 8008598:	4638      	mov	r0, r7
 800859a:	f7f7 ff33 	bl	8000404 <__aeabi_i2d>
 800859e:	4622      	mov	r2, r4
 80085a0:	462b      	mov	r3, r5
 80085a2:	f7f8 fa01 	bl	80009a8 <__aeabi_dcmpeq>
 80085a6:	b900      	cbnz	r0, 80085aa <_dtoa_r+0x16a>
 80085a8:	3f01      	subs	r7, #1
 80085aa:	2f16      	cmp	r7, #22
 80085ac:	d853      	bhi.n	8008656 <_dtoa_r+0x216>
 80085ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008724 <_dtoa_r+0x2e4>)
 80085b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80085b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085bc:	f7f8 f9fe 	bl	80009bc <__aeabi_dcmplt>
 80085c0:	2800      	cmp	r0, #0
 80085c2:	d04a      	beq.n	800865a <_dtoa_r+0x21a>
 80085c4:	2300      	movs	r3, #0
 80085c6:	3f01      	subs	r7, #1
 80085c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80085ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80085cc:	1b9b      	subs	r3, r3, r6
 80085ce:	1e5a      	subs	r2, r3, #1
 80085d0:	bf46      	itte	mi
 80085d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80085d6:	2300      	movmi	r3, #0
 80085d8:	f04f 0800 	movpl.w	r8, #0
 80085dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80085de:	bf48      	it	mi
 80085e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80085e2:	2f00      	cmp	r7, #0
 80085e4:	db3b      	blt.n	800865e <_dtoa_r+0x21e>
 80085e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085e8:	970e      	str	r7, [sp, #56]	@ 0x38
 80085ea:	443b      	add	r3, r7
 80085ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80085ee:	2300      	movs	r3, #0
 80085f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80085f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80085f4:	2b09      	cmp	r3, #9
 80085f6:	d866      	bhi.n	80086c6 <_dtoa_r+0x286>
 80085f8:	2b05      	cmp	r3, #5
 80085fa:	bfc4      	itt	gt
 80085fc:	3b04      	subgt	r3, #4
 80085fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008600:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008602:	bfc8      	it	gt
 8008604:	2400      	movgt	r4, #0
 8008606:	f1a3 0302 	sub.w	r3, r3, #2
 800860a:	bfd8      	it	le
 800860c:	2401      	movle	r4, #1
 800860e:	2b03      	cmp	r3, #3
 8008610:	d864      	bhi.n	80086dc <_dtoa_r+0x29c>
 8008612:	e8df f003 	tbb	[pc, r3]
 8008616:	382b      	.short	0x382b
 8008618:	5636      	.short	0x5636
 800861a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800861e:	441e      	add	r6, r3
 8008620:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008624:	2b20      	cmp	r3, #32
 8008626:	bfc1      	itttt	gt
 8008628:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800862c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008630:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008634:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008638:	bfd6      	itet	le
 800863a:	f1c3 0320 	rsble	r3, r3, #32
 800863e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008642:	fa04 f003 	lslle.w	r0, r4, r3
 8008646:	f7f7 fecd 	bl	80003e4 <__aeabi_ui2d>
 800864a:	2201      	movs	r2, #1
 800864c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008650:	3e01      	subs	r6, #1
 8008652:	9212      	str	r2, [sp, #72]	@ 0x48
 8008654:	e775      	b.n	8008542 <_dtoa_r+0x102>
 8008656:	2301      	movs	r3, #1
 8008658:	e7b6      	b.n	80085c8 <_dtoa_r+0x188>
 800865a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800865c:	e7b5      	b.n	80085ca <_dtoa_r+0x18a>
 800865e:	427b      	negs	r3, r7
 8008660:	930a      	str	r3, [sp, #40]	@ 0x28
 8008662:	2300      	movs	r3, #0
 8008664:	eba8 0807 	sub.w	r8, r8, r7
 8008668:	930e      	str	r3, [sp, #56]	@ 0x38
 800866a:	e7c2      	b.n	80085f2 <_dtoa_r+0x1b2>
 800866c:	2300      	movs	r3, #0
 800866e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008670:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008672:	2b00      	cmp	r3, #0
 8008674:	dc35      	bgt.n	80086e2 <_dtoa_r+0x2a2>
 8008676:	2301      	movs	r3, #1
 8008678:	461a      	mov	r2, r3
 800867a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800867e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008680:	e00b      	b.n	800869a <_dtoa_r+0x25a>
 8008682:	2301      	movs	r3, #1
 8008684:	e7f3      	b.n	800866e <_dtoa_r+0x22e>
 8008686:	2300      	movs	r3, #0
 8008688:	930b      	str	r3, [sp, #44]	@ 0x2c
 800868a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800868c:	18fb      	adds	r3, r7, r3
 800868e:	9308      	str	r3, [sp, #32]
 8008690:	3301      	adds	r3, #1
 8008692:	2b01      	cmp	r3, #1
 8008694:	9307      	str	r3, [sp, #28]
 8008696:	bfb8      	it	lt
 8008698:	2301      	movlt	r3, #1
 800869a:	2100      	movs	r1, #0
 800869c:	2204      	movs	r2, #4
 800869e:	f8db 001c 	ldr.w	r0, [fp, #28]
 80086a2:	f102 0514 	add.w	r5, r2, #20
 80086a6:	429d      	cmp	r5, r3
 80086a8:	d91f      	bls.n	80086ea <_dtoa_r+0x2aa>
 80086aa:	6041      	str	r1, [r0, #4]
 80086ac:	4658      	mov	r0, fp
 80086ae:	f000 fcd7 	bl	8009060 <_Balloc>
 80086b2:	4682      	mov	sl, r0
 80086b4:	2800      	cmp	r0, #0
 80086b6:	d139      	bne.n	800872c <_dtoa_r+0x2ec>
 80086b8:	4602      	mov	r2, r0
 80086ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80086be:	4b1a      	ldr	r3, [pc, #104]	@ (8008728 <_dtoa_r+0x2e8>)
 80086c0:	e6d2      	b.n	8008468 <_dtoa_r+0x28>
 80086c2:	2301      	movs	r3, #1
 80086c4:	e7e0      	b.n	8008688 <_dtoa_r+0x248>
 80086c6:	2401      	movs	r4, #1
 80086c8:	2300      	movs	r3, #0
 80086ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80086cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80086ce:	f04f 33ff 	mov.w	r3, #4294967295
 80086d2:	2200      	movs	r2, #0
 80086d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80086d8:	2312      	movs	r3, #18
 80086da:	e7d0      	b.n	800867e <_dtoa_r+0x23e>
 80086dc:	2301      	movs	r3, #1
 80086de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80086e0:	e7f5      	b.n	80086ce <_dtoa_r+0x28e>
 80086e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80086e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80086e8:	e7d7      	b.n	800869a <_dtoa_r+0x25a>
 80086ea:	3101      	adds	r1, #1
 80086ec:	0052      	lsls	r2, r2, #1
 80086ee:	e7d8      	b.n	80086a2 <_dtoa_r+0x262>
 80086f0:	636f4361 	.word	0x636f4361
 80086f4:	3fd287a7 	.word	0x3fd287a7
 80086f8:	8b60c8b3 	.word	0x8b60c8b3
 80086fc:	3fc68a28 	.word	0x3fc68a28
 8008700:	509f79fb 	.word	0x509f79fb
 8008704:	3fd34413 	.word	0x3fd34413
 8008708:	0800a7b8 	.word	0x0800a7b8
 800870c:	0800a879 	.word	0x0800a879
 8008710:	7ff00000 	.word	0x7ff00000
 8008714:	0800a875 	.word	0x0800a875
 8008718:	0800a838 	.word	0x0800a838
 800871c:	0800a837 	.word	0x0800a837
 8008720:	3ff80000 	.word	0x3ff80000
 8008724:	0800a970 	.word	0x0800a970
 8008728:	0800a8d1 	.word	0x0800a8d1
 800872c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008730:	6018      	str	r0, [r3, #0]
 8008732:	9b07      	ldr	r3, [sp, #28]
 8008734:	2b0e      	cmp	r3, #14
 8008736:	f200 80a4 	bhi.w	8008882 <_dtoa_r+0x442>
 800873a:	2c00      	cmp	r4, #0
 800873c:	f000 80a1 	beq.w	8008882 <_dtoa_r+0x442>
 8008740:	2f00      	cmp	r7, #0
 8008742:	dd33      	ble.n	80087ac <_dtoa_r+0x36c>
 8008744:	4b86      	ldr	r3, [pc, #536]	@ (8008960 <_dtoa_r+0x520>)
 8008746:	f007 020f 	and.w	r2, r7, #15
 800874a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800874e:	05f8      	lsls	r0, r7, #23
 8008750:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008754:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008758:	ea4f 1427 	mov.w	r4, r7, asr #4
 800875c:	d516      	bpl.n	800878c <_dtoa_r+0x34c>
 800875e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008762:	4b80      	ldr	r3, [pc, #512]	@ (8008964 <_dtoa_r+0x524>)
 8008764:	2603      	movs	r6, #3
 8008766:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800876a:	f7f7 ffdf 	bl	800072c <__aeabi_ddiv>
 800876e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008772:	f004 040f 	and.w	r4, r4, #15
 8008776:	4d7b      	ldr	r5, [pc, #492]	@ (8008964 <_dtoa_r+0x524>)
 8008778:	b954      	cbnz	r4, 8008790 <_dtoa_r+0x350>
 800877a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800877e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008782:	f7f7 ffd3 	bl	800072c <__aeabi_ddiv>
 8008786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800878a:	e028      	b.n	80087de <_dtoa_r+0x39e>
 800878c:	2602      	movs	r6, #2
 800878e:	e7f2      	b.n	8008776 <_dtoa_r+0x336>
 8008790:	07e1      	lsls	r1, r4, #31
 8008792:	d508      	bpl.n	80087a6 <_dtoa_r+0x366>
 8008794:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008798:	e9d5 2300 	ldrd	r2, r3, [r5]
 800879c:	f7f7 fe9c 	bl	80004d8 <__aeabi_dmul>
 80087a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087a4:	3601      	adds	r6, #1
 80087a6:	1064      	asrs	r4, r4, #1
 80087a8:	3508      	adds	r5, #8
 80087aa:	e7e5      	b.n	8008778 <_dtoa_r+0x338>
 80087ac:	f000 80d2 	beq.w	8008954 <_dtoa_r+0x514>
 80087b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80087b4:	427c      	negs	r4, r7
 80087b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008960 <_dtoa_r+0x520>)
 80087b8:	f004 020f 	and.w	r2, r4, #15
 80087bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80087c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80087c4:	f7f7 fe88 	bl	80004d8 <__aeabi_dmul>
 80087c8:	2602      	movs	r6, #2
 80087ca:	2300      	movs	r3, #0
 80087cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087d0:	4d64      	ldr	r5, [pc, #400]	@ (8008964 <_dtoa_r+0x524>)
 80087d2:	1124      	asrs	r4, r4, #4
 80087d4:	2c00      	cmp	r4, #0
 80087d6:	f040 80b2 	bne.w	800893e <_dtoa_r+0x4fe>
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d1d3      	bne.n	8008786 <_dtoa_r+0x346>
 80087de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80087e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	f000 80b7 	beq.w	8008958 <_dtoa_r+0x518>
 80087ea:	2200      	movs	r2, #0
 80087ec:	4620      	mov	r0, r4
 80087ee:	4629      	mov	r1, r5
 80087f0:	4b5d      	ldr	r3, [pc, #372]	@ (8008968 <_dtoa_r+0x528>)
 80087f2:	f7f8 f8e3 	bl	80009bc <__aeabi_dcmplt>
 80087f6:	2800      	cmp	r0, #0
 80087f8:	f000 80ae 	beq.w	8008958 <_dtoa_r+0x518>
 80087fc:	9b07      	ldr	r3, [sp, #28]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f000 80aa 	beq.w	8008958 <_dtoa_r+0x518>
 8008804:	9b08      	ldr	r3, [sp, #32]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dd37      	ble.n	800887a <_dtoa_r+0x43a>
 800880a:	1e7b      	subs	r3, r7, #1
 800880c:	4620      	mov	r0, r4
 800880e:	9304      	str	r3, [sp, #16]
 8008810:	2200      	movs	r2, #0
 8008812:	4629      	mov	r1, r5
 8008814:	4b55      	ldr	r3, [pc, #340]	@ (800896c <_dtoa_r+0x52c>)
 8008816:	f7f7 fe5f 	bl	80004d8 <__aeabi_dmul>
 800881a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800881e:	9c08      	ldr	r4, [sp, #32]
 8008820:	3601      	adds	r6, #1
 8008822:	4630      	mov	r0, r6
 8008824:	f7f7 fdee 	bl	8000404 <__aeabi_i2d>
 8008828:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800882c:	f7f7 fe54 	bl	80004d8 <__aeabi_dmul>
 8008830:	2200      	movs	r2, #0
 8008832:	4b4f      	ldr	r3, [pc, #316]	@ (8008970 <_dtoa_r+0x530>)
 8008834:	f7f7 fc9a 	bl	800016c <__adddf3>
 8008838:	4605      	mov	r5, r0
 800883a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800883e:	2c00      	cmp	r4, #0
 8008840:	f040 809a 	bne.w	8008978 <_dtoa_r+0x538>
 8008844:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008848:	2200      	movs	r2, #0
 800884a:	4b4a      	ldr	r3, [pc, #296]	@ (8008974 <_dtoa_r+0x534>)
 800884c:	f7f7 fc8c 	bl	8000168 <__aeabi_dsub>
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008858:	462a      	mov	r2, r5
 800885a:	4633      	mov	r3, r6
 800885c:	f7f8 f8cc 	bl	80009f8 <__aeabi_dcmpgt>
 8008860:	2800      	cmp	r0, #0
 8008862:	f040 828e 	bne.w	8008d82 <_dtoa_r+0x942>
 8008866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800886a:	462a      	mov	r2, r5
 800886c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008870:	f7f8 f8a4 	bl	80009bc <__aeabi_dcmplt>
 8008874:	2800      	cmp	r0, #0
 8008876:	f040 8127 	bne.w	8008ac8 <_dtoa_r+0x688>
 800887a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800887e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008882:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008884:	2b00      	cmp	r3, #0
 8008886:	f2c0 8163 	blt.w	8008b50 <_dtoa_r+0x710>
 800888a:	2f0e      	cmp	r7, #14
 800888c:	f300 8160 	bgt.w	8008b50 <_dtoa_r+0x710>
 8008890:	4b33      	ldr	r3, [pc, #204]	@ (8008960 <_dtoa_r+0x520>)
 8008892:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008896:	e9d3 3400 	ldrd	r3, r4, [r3]
 800889a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800889e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	da03      	bge.n	80088ac <_dtoa_r+0x46c>
 80088a4:	9b07      	ldr	r3, [sp, #28]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	f340 8100 	ble.w	8008aac <_dtoa_r+0x66c>
 80088ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088b0:	4656      	mov	r6, sl
 80088b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b6:	4620      	mov	r0, r4
 80088b8:	4629      	mov	r1, r5
 80088ba:	f7f7 ff37 	bl	800072c <__aeabi_ddiv>
 80088be:	f7f8 f8bb 	bl	8000a38 <__aeabi_d2iz>
 80088c2:	4680      	mov	r8, r0
 80088c4:	f7f7 fd9e 	bl	8000404 <__aeabi_i2d>
 80088c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088cc:	f7f7 fe04 	bl	80004d8 <__aeabi_dmul>
 80088d0:	4602      	mov	r2, r0
 80088d2:	460b      	mov	r3, r1
 80088d4:	4620      	mov	r0, r4
 80088d6:	4629      	mov	r1, r5
 80088d8:	f7f7 fc46 	bl	8000168 <__aeabi_dsub>
 80088dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80088e0:	9d07      	ldr	r5, [sp, #28]
 80088e2:	f806 4b01 	strb.w	r4, [r6], #1
 80088e6:	eba6 040a 	sub.w	r4, r6, sl
 80088ea:	42a5      	cmp	r5, r4
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	f040 8116 	bne.w	8008b20 <_dtoa_r+0x6e0>
 80088f4:	f7f7 fc3a 	bl	800016c <__adddf3>
 80088f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088fc:	4604      	mov	r4, r0
 80088fe:	460d      	mov	r5, r1
 8008900:	f7f8 f87a 	bl	80009f8 <__aeabi_dcmpgt>
 8008904:	2800      	cmp	r0, #0
 8008906:	f040 80f8 	bne.w	8008afa <_dtoa_r+0x6ba>
 800890a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800890e:	4620      	mov	r0, r4
 8008910:	4629      	mov	r1, r5
 8008912:	f7f8 f849 	bl	80009a8 <__aeabi_dcmpeq>
 8008916:	b118      	cbz	r0, 8008920 <_dtoa_r+0x4e0>
 8008918:	f018 0f01 	tst.w	r8, #1
 800891c:	f040 80ed 	bne.w	8008afa <_dtoa_r+0x6ba>
 8008920:	4649      	mov	r1, r9
 8008922:	4658      	mov	r0, fp
 8008924:	f000 fbdc 	bl	80090e0 <_Bfree>
 8008928:	2300      	movs	r3, #0
 800892a:	7033      	strb	r3, [r6, #0]
 800892c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800892e:	3701      	adds	r7, #1
 8008930:	601f      	str	r7, [r3, #0]
 8008932:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008934:	2b00      	cmp	r3, #0
 8008936:	f000 8320 	beq.w	8008f7a <_dtoa_r+0xb3a>
 800893a:	601e      	str	r6, [r3, #0]
 800893c:	e31d      	b.n	8008f7a <_dtoa_r+0xb3a>
 800893e:	07e2      	lsls	r2, r4, #31
 8008940:	d505      	bpl.n	800894e <_dtoa_r+0x50e>
 8008942:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008946:	f7f7 fdc7 	bl	80004d8 <__aeabi_dmul>
 800894a:	2301      	movs	r3, #1
 800894c:	3601      	adds	r6, #1
 800894e:	1064      	asrs	r4, r4, #1
 8008950:	3508      	adds	r5, #8
 8008952:	e73f      	b.n	80087d4 <_dtoa_r+0x394>
 8008954:	2602      	movs	r6, #2
 8008956:	e742      	b.n	80087de <_dtoa_r+0x39e>
 8008958:	9c07      	ldr	r4, [sp, #28]
 800895a:	9704      	str	r7, [sp, #16]
 800895c:	e761      	b.n	8008822 <_dtoa_r+0x3e2>
 800895e:	bf00      	nop
 8008960:	0800a970 	.word	0x0800a970
 8008964:	0800a948 	.word	0x0800a948
 8008968:	3ff00000 	.word	0x3ff00000
 800896c:	40240000 	.word	0x40240000
 8008970:	401c0000 	.word	0x401c0000
 8008974:	40140000 	.word	0x40140000
 8008978:	4b70      	ldr	r3, [pc, #448]	@ (8008b3c <_dtoa_r+0x6fc>)
 800897a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800897c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008980:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008984:	4454      	add	r4, sl
 8008986:	2900      	cmp	r1, #0
 8008988:	d045      	beq.n	8008a16 <_dtoa_r+0x5d6>
 800898a:	2000      	movs	r0, #0
 800898c:	496c      	ldr	r1, [pc, #432]	@ (8008b40 <_dtoa_r+0x700>)
 800898e:	f7f7 fecd 	bl	800072c <__aeabi_ddiv>
 8008992:	4633      	mov	r3, r6
 8008994:	462a      	mov	r2, r5
 8008996:	f7f7 fbe7 	bl	8000168 <__aeabi_dsub>
 800899a:	4656      	mov	r6, sl
 800899c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80089a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089a4:	f7f8 f848 	bl	8000a38 <__aeabi_d2iz>
 80089a8:	4605      	mov	r5, r0
 80089aa:	f7f7 fd2b 	bl	8000404 <__aeabi_i2d>
 80089ae:	4602      	mov	r2, r0
 80089b0:	460b      	mov	r3, r1
 80089b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80089b6:	f7f7 fbd7 	bl	8000168 <__aeabi_dsub>
 80089ba:	4602      	mov	r2, r0
 80089bc:	460b      	mov	r3, r1
 80089be:	3530      	adds	r5, #48	@ 0x30
 80089c0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80089c4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089c8:	f806 5b01 	strb.w	r5, [r6], #1
 80089cc:	f7f7 fff6 	bl	80009bc <__aeabi_dcmplt>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d163      	bne.n	8008a9c <_dtoa_r+0x65c>
 80089d4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80089d8:	2000      	movs	r0, #0
 80089da:	495a      	ldr	r1, [pc, #360]	@ (8008b44 <_dtoa_r+0x704>)
 80089dc:	f7f7 fbc4 	bl	8000168 <__aeabi_dsub>
 80089e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80089e4:	f7f7 ffea 	bl	80009bc <__aeabi_dcmplt>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	f040 8087 	bne.w	8008afc <_dtoa_r+0x6bc>
 80089ee:	42a6      	cmp	r6, r4
 80089f0:	f43f af43 	beq.w	800887a <_dtoa_r+0x43a>
 80089f4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80089f8:	2200      	movs	r2, #0
 80089fa:	4b53      	ldr	r3, [pc, #332]	@ (8008b48 <_dtoa_r+0x708>)
 80089fc:	f7f7 fd6c 	bl	80004d8 <__aeabi_dmul>
 8008a00:	2200      	movs	r2, #0
 8008a02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a0a:	4b4f      	ldr	r3, [pc, #316]	@ (8008b48 <_dtoa_r+0x708>)
 8008a0c:	f7f7 fd64 	bl	80004d8 <__aeabi_dmul>
 8008a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008a14:	e7c4      	b.n	80089a0 <_dtoa_r+0x560>
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	f7f7 fd5d 	bl	80004d8 <__aeabi_dmul>
 8008a1e:	4656      	mov	r6, sl
 8008a20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008a24:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008a26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a2a:	f7f8 f805 	bl	8000a38 <__aeabi_d2iz>
 8008a2e:	4605      	mov	r5, r0
 8008a30:	f7f7 fce8 	bl	8000404 <__aeabi_i2d>
 8008a34:	4602      	mov	r2, r0
 8008a36:	460b      	mov	r3, r1
 8008a38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a3c:	f7f7 fb94 	bl	8000168 <__aeabi_dsub>
 8008a40:	4602      	mov	r2, r0
 8008a42:	460b      	mov	r3, r1
 8008a44:	3530      	adds	r5, #48	@ 0x30
 8008a46:	f806 5b01 	strb.w	r5, [r6], #1
 8008a4a:	42a6      	cmp	r6, r4
 8008a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	d124      	bne.n	8008aa0 <_dtoa_r+0x660>
 8008a56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008a5a:	4b39      	ldr	r3, [pc, #228]	@ (8008b40 <_dtoa_r+0x700>)
 8008a5c:	f7f7 fb86 	bl	800016c <__adddf3>
 8008a60:	4602      	mov	r2, r0
 8008a62:	460b      	mov	r3, r1
 8008a64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a68:	f7f7 ffc6 	bl	80009f8 <__aeabi_dcmpgt>
 8008a6c:	2800      	cmp	r0, #0
 8008a6e:	d145      	bne.n	8008afc <_dtoa_r+0x6bc>
 8008a70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008a74:	2000      	movs	r0, #0
 8008a76:	4932      	ldr	r1, [pc, #200]	@ (8008b40 <_dtoa_r+0x700>)
 8008a78:	f7f7 fb76 	bl	8000168 <__aeabi_dsub>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	460b      	mov	r3, r1
 8008a80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a84:	f7f7 ff9a 	bl	80009bc <__aeabi_dcmplt>
 8008a88:	2800      	cmp	r0, #0
 8008a8a:	f43f aef6 	beq.w	800887a <_dtoa_r+0x43a>
 8008a8e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008a90:	1e73      	subs	r3, r6, #1
 8008a92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008a94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008a98:	2b30      	cmp	r3, #48	@ 0x30
 8008a9a:	d0f8      	beq.n	8008a8e <_dtoa_r+0x64e>
 8008a9c:	9f04      	ldr	r7, [sp, #16]
 8008a9e:	e73f      	b.n	8008920 <_dtoa_r+0x4e0>
 8008aa0:	4b29      	ldr	r3, [pc, #164]	@ (8008b48 <_dtoa_r+0x708>)
 8008aa2:	f7f7 fd19 	bl	80004d8 <__aeabi_dmul>
 8008aa6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008aaa:	e7bc      	b.n	8008a26 <_dtoa_r+0x5e6>
 8008aac:	d10c      	bne.n	8008ac8 <_dtoa_r+0x688>
 8008aae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	4b25      	ldr	r3, [pc, #148]	@ (8008b4c <_dtoa_r+0x70c>)
 8008ab6:	f7f7 fd0f 	bl	80004d8 <__aeabi_dmul>
 8008aba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008abe:	f7f7 ff91 	bl	80009e4 <__aeabi_dcmpge>
 8008ac2:	2800      	cmp	r0, #0
 8008ac4:	f000 815b 	beq.w	8008d7e <_dtoa_r+0x93e>
 8008ac8:	2400      	movs	r4, #0
 8008aca:	4625      	mov	r5, r4
 8008acc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ace:	4656      	mov	r6, sl
 8008ad0:	43db      	mvns	r3, r3
 8008ad2:	9304      	str	r3, [sp, #16]
 8008ad4:	2700      	movs	r7, #0
 8008ad6:	4621      	mov	r1, r4
 8008ad8:	4658      	mov	r0, fp
 8008ada:	f000 fb01 	bl	80090e0 <_Bfree>
 8008ade:	2d00      	cmp	r5, #0
 8008ae0:	d0dc      	beq.n	8008a9c <_dtoa_r+0x65c>
 8008ae2:	b12f      	cbz	r7, 8008af0 <_dtoa_r+0x6b0>
 8008ae4:	42af      	cmp	r7, r5
 8008ae6:	d003      	beq.n	8008af0 <_dtoa_r+0x6b0>
 8008ae8:	4639      	mov	r1, r7
 8008aea:	4658      	mov	r0, fp
 8008aec:	f000 faf8 	bl	80090e0 <_Bfree>
 8008af0:	4629      	mov	r1, r5
 8008af2:	4658      	mov	r0, fp
 8008af4:	f000 faf4 	bl	80090e0 <_Bfree>
 8008af8:	e7d0      	b.n	8008a9c <_dtoa_r+0x65c>
 8008afa:	9704      	str	r7, [sp, #16]
 8008afc:	4633      	mov	r3, r6
 8008afe:	461e      	mov	r6, r3
 8008b00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008b04:	2a39      	cmp	r2, #57	@ 0x39
 8008b06:	d107      	bne.n	8008b18 <_dtoa_r+0x6d8>
 8008b08:	459a      	cmp	sl, r3
 8008b0a:	d1f8      	bne.n	8008afe <_dtoa_r+0x6be>
 8008b0c:	9a04      	ldr	r2, [sp, #16]
 8008b0e:	3201      	adds	r2, #1
 8008b10:	9204      	str	r2, [sp, #16]
 8008b12:	2230      	movs	r2, #48	@ 0x30
 8008b14:	f88a 2000 	strb.w	r2, [sl]
 8008b18:	781a      	ldrb	r2, [r3, #0]
 8008b1a:	3201      	adds	r2, #1
 8008b1c:	701a      	strb	r2, [r3, #0]
 8008b1e:	e7bd      	b.n	8008a9c <_dtoa_r+0x65c>
 8008b20:	2200      	movs	r2, #0
 8008b22:	4b09      	ldr	r3, [pc, #36]	@ (8008b48 <_dtoa_r+0x708>)
 8008b24:	f7f7 fcd8 	bl	80004d8 <__aeabi_dmul>
 8008b28:	2200      	movs	r2, #0
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	4604      	mov	r4, r0
 8008b2e:	460d      	mov	r5, r1
 8008b30:	f7f7 ff3a 	bl	80009a8 <__aeabi_dcmpeq>
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f43f aebc 	beq.w	80088b2 <_dtoa_r+0x472>
 8008b3a:	e6f1      	b.n	8008920 <_dtoa_r+0x4e0>
 8008b3c:	0800a970 	.word	0x0800a970
 8008b40:	3fe00000 	.word	0x3fe00000
 8008b44:	3ff00000 	.word	0x3ff00000
 8008b48:	40240000 	.word	0x40240000
 8008b4c:	40140000 	.word	0x40140000
 8008b50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008b52:	2a00      	cmp	r2, #0
 8008b54:	f000 80db 	beq.w	8008d0e <_dtoa_r+0x8ce>
 8008b58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008b5a:	2a01      	cmp	r2, #1
 8008b5c:	f300 80bf 	bgt.w	8008cde <_dtoa_r+0x89e>
 8008b60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008b62:	2a00      	cmp	r2, #0
 8008b64:	f000 80b7 	beq.w	8008cd6 <_dtoa_r+0x896>
 8008b68:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008b6c:	4646      	mov	r6, r8
 8008b6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008b70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b72:	2101      	movs	r1, #1
 8008b74:	441a      	add	r2, r3
 8008b76:	4658      	mov	r0, fp
 8008b78:	4498      	add	r8, r3
 8008b7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008b7c:	f000 fb64 	bl	8009248 <__i2b>
 8008b80:	4605      	mov	r5, r0
 8008b82:	b15e      	cbz	r6, 8008b9c <_dtoa_r+0x75c>
 8008b84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	dd08      	ble.n	8008b9c <_dtoa_r+0x75c>
 8008b8a:	42b3      	cmp	r3, r6
 8008b8c:	bfa8      	it	ge
 8008b8e:	4633      	movge	r3, r6
 8008b90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008b92:	eba8 0803 	sub.w	r8, r8, r3
 8008b96:	1af6      	subs	r6, r6, r3
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008b9e:	b1f3      	cbz	r3, 8008bde <_dtoa_r+0x79e>
 8008ba0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	f000 80b7 	beq.w	8008d16 <_dtoa_r+0x8d6>
 8008ba8:	b18c      	cbz	r4, 8008bce <_dtoa_r+0x78e>
 8008baa:	4629      	mov	r1, r5
 8008bac:	4622      	mov	r2, r4
 8008bae:	4658      	mov	r0, fp
 8008bb0:	f000 fc08 	bl	80093c4 <__pow5mult>
 8008bb4:	464a      	mov	r2, r9
 8008bb6:	4601      	mov	r1, r0
 8008bb8:	4605      	mov	r5, r0
 8008bba:	4658      	mov	r0, fp
 8008bbc:	f000 fb5a 	bl	8009274 <__multiply>
 8008bc0:	4649      	mov	r1, r9
 8008bc2:	9004      	str	r0, [sp, #16]
 8008bc4:	4658      	mov	r0, fp
 8008bc6:	f000 fa8b 	bl	80090e0 <_Bfree>
 8008bca:	9b04      	ldr	r3, [sp, #16]
 8008bcc:	4699      	mov	r9, r3
 8008bce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008bd0:	1b1a      	subs	r2, r3, r4
 8008bd2:	d004      	beq.n	8008bde <_dtoa_r+0x79e>
 8008bd4:	4649      	mov	r1, r9
 8008bd6:	4658      	mov	r0, fp
 8008bd8:	f000 fbf4 	bl	80093c4 <__pow5mult>
 8008bdc:	4681      	mov	r9, r0
 8008bde:	2101      	movs	r1, #1
 8008be0:	4658      	mov	r0, fp
 8008be2:	f000 fb31 	bl	8009248 <__i2b>
 8008be6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be8:	4604      	mov	r4, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	f000 81c9 	beq.w	8008f82 <_dtoa_r+0xb42>
 8008bf0:	461a      	mov	r2, r3
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	4658      	mov	r0, fp
 8008bf6:	f000 fbe5 	bl	80093c4 <__pow5mult>
 8008bfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	2b01      	cmp	r3, #1
 8008c00:	f300 808f 	bgt.w	8008d22 <_dtoa_r+0x8e2>
 8008c04:	9b02      	ldr	r3, [sp, #8]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f040 8087 	bne.w	8008d1a <_dtoa_r+0x8da>
 8008c0c:	9b03      	ldr	r3, [sp, #12]
 8008c0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	f040 8083 	bne.w	8008d1e <_dtoa_r+0x8de>
 8008c18:	9b03      	ldr	r3, [sp, #12]
 8008c1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c1e:	0d1b      	lsrs	r3, r3, #20
 8008c20:	051b      	lsls	r3, r3, #20
 8008c22:	b12b      	cbz	r3, 8008c30 <_dtoa_r+0x7f0>
 8008c24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c26:	f108 0801 	add.w	r8, r8, #1
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c2e:	2301      	movs	r3, #1
 8008c30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 81aa 	beq.w	8008f8e <_dtoa_r+0xb4e>
 8008c3a:	6923      	ldr	r3, [r4, #16]
 8008c3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008c40:	6918      	ldr	r0, [r3, #16]
 8008c42:	f000 fab5 	bl	80091b0 <__hi0bits>
 8008c46:	f1c0 0020 	rsb	r0, r0, #32
 8008c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c4c:	4418      	add	r0, r3
 8008c4e:	f010 001f 	ands.w	r0, r0, #31
 8008c52:	d071      	beq.n	8008d38 <_dtoa_r+0x8f8>
 8008c54:	f1c0 0320 	rsb	r3, r0, #32
 8008c58:	2b04      	cmp	r3, #4
 8008c5a:	dd65      	ble.n	8008d28 <_dtoa_r+0x8e8>
 8008c5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c5e:	f1c0 001c 	rsb	r0, r0, #28
 8008c62:	4403      	add	r3, r0
 8008c64:	4480      	add	r8, r0
 8008c66:	4406      	add	r6, r0
 8008c68:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c6a:	f1b8 0f00 	cmp.w	r8, #0
 8008c6e:	dd05      	ble.n	8008c7c <_dtoa_r+0x83c>
 8008c70:	4649      	mov	r1, r9
 8008c72:	4642      	mov	r2, r8
 8008c74:	4658      	mov	r0, fp
 8008c76:	f000 fbff 	bl	8009478 <__lshift>
 8008c7a:	4681      	mov	r9, r0
 8008c7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	dd05      	ble.n	8008c8e <_dtoa_r+0x84e>
 8008c82:	4621      	mov	r1, r4
 8008c84:	461a      	mov	r2, r3
 8008c86:	4658      	mov	r0, fp
 8008c88:	f000 fbf6 	bl	8009478 <__lshift>
 8008c8c:	4604      	mov	r4, r0
 8008c8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d053      	beq.n	8008d3c <_dtoa_r+0x8fc>
 8008c94:	4621      	mov	r1, r4
 8008c96:	4648      	mov	r0, r9
 8008c98:	f000 fc5a 	bl	8009550 <__mcmp>
 8008c9c:	2800      	cmp	r0, #0
 8008c9e:	da4d      	bge.n	8008d3c <_dtoa_r+0x8fc>
 8008ca0:	1e7b      	subs	r3, r7, #1
 8008ca2:	4649      	mov	r1, r9
 8008ca4:	9304      	str	r3, [sp, #16]
 8008ca6:	220a      	movs	r2, #10
 8008ca8:	2300      	movs	r3, #0
 8008caa:	4658      	mov	r0, fp
 8008cac:	f000 fa3a 	bl	8009124 <__multadd>
 8008cb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008cb2:	4681      	mov	r9, r0
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	f000 816c 	beq.w	8008f92 <_dtoa_r+0xb52>
 8008cba:	2300      	movs	r3, #0
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	220a      	movs	r2, #10
 8008cc0:	4658      	mov	r0, fp
 8008cc2:	f000 fa2f 	bl	8009124 <__multadd>
 8008cc6:	9b08      	ldr	r3, [sp, #32]
 8008cc8:	4605      	mov	r5, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	dc61      	bgt.n	8008d92 <_dtoa_r+0x952>
 8008cce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008cd0:	2b02      	cmp	r3, #2
 8008cd2:	dc3b      	bgt.n	8008d4c <_dtoa_r+0x90c>
 8008cd4:	e05d      	b.n	8008d92 <_dtoa_r+0x952>
 8008cd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008cd8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008cdc:	e746      	b.n	8008b6c <_dtoa_r+0x72c>
 8008cde:	9b07      	ldr	r3, [sp, #28]
 8008ce0:	1e5c      	subs	r4, r3, #1
 8008ce2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	bfbf      	itttt	lt
 8008ce8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008cea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008cec:	1ae3      	sublt	r3, r4, r3
 8008cee:	18d2      	addlt	r2, r2, r3
 8008cf0:	bfa8      	it	ge
 8008cf2:	1b1c      	subge	r4, r3, r4
 8008cf4:	9b07      	ldr	r3, [sp, #28]
 8008cf6:	bfbe      	ittt	lt
 8008cf8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008cfa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008cfc:	2400      	movlt	r4, #0
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	bfb5      	itete	lt
 8008d02:	eba8 0603 	sublt.w	r6, r8, r3
 8008d06:	4646      	movge	r6, r8
 8008d08:	2300      	movlt	r3, #0
 8008d0a:	9b07      	ldrge	r3, [sp, #28]
 8008d0c:	e730      	b.n	8008b70 <_dtoa_r+0x730>
 8008d0e:	4646      	mov	r6, r8
 8008d10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008d12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008d14:	e735      	b.n	8008b82 <_dtoa_r+0x742>
 8008d16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d18:	e75c      	b.n	8008bd4 <_dtoa_r+0x794>
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	e788      	b.n	8008c30 <_dtoa_r+0x7f0>
 8008d1e:	9b02      	ldr	r3, [sp, #8]
 8008d20:	e786      	b.n	8008c30 <_dtoa_r+0x7f0>
 8008d22:	2300      	movs	r3, #0
 8008d24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d26:	e788      	b.n	8008c3a <_dtoa_r+0x7fa>
 8008d28:	d09f      	beq.n	8008c6a <_dtoa_r+0x82a>
 8008d2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008d2c:	331c      	adds	r3, #28
 8008d2e:	441a      	add	r2, r3
 8008d30:	4498      	add	r8, r3
 8008d32:	441e      	add	r6, r3
 8008d34:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d36:	e798      	b.n	8008c6a <_dtoa_r+0x82a>
 8008d38:	4603      	mov	r3, r0
 8008d3a:	e7f6      	b.n	8008d2a <_dtoa_r+0x8ea>
 8008d3c:	9b07      	ldr	r3, [sp, #28]
 8008d3e:	9704      	str	r7, [sp, #16]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	dc20      	bgt.n	8008d86 <_dtoa_r+0x946>
 8008d44:	9308      	str	r3, [sp, #32]
 8008d46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	dd1e      	ble.n	8008d8a <_dtoa_r+0x94a>
 8008d4c:	9b08      	ldr	r3, [sp, #32]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	f47f aebc 	bne.w	8008acc <_dtoa_r+0x68c>
 8008d54:	4621      	mov	r1, r4
 8008d56:	2205      	movs	r2, #5
 8008d58:	4658      	mov	r0, fp
 8008d5a:	f000 f9e3 	bl	8009124 <__multadd>
 8008d5e:	4601      	mov	r1, r0
 8008d60:	4604      	mov	r4, r0
 8008d62:	4648      	mov	r0, r9
 8008d64:	f000 fbf4 	bl	8009550 <__mcmp>
 8008d68:	2800      	cmp	r0, #0
 8008d6a:	f77f aeaf 	ble.w	8008acc <_dtoa_r+0x68c>
 8008d6e:	2331      	movs	r3, #49	@ 0x31
 8008d70:	4656      	mov	r6, sl
 8008d72:	f806 3b01 	strb.w	r3, [r6], #1
 8008d76:	9b04      	ldr	r3, [sp, #16]
 8008d78:	3301      	adds	r3, #1
 8008d7a:	9304      	str	r3, [sp, #16]
 8008d7c:	e6aa      	b.n	8008ad4 <_dtoa_r+0x694>
 8008d7e:	9c07      	ldr	r4, [sp, #28]
 8008d80:	9704      	str	r7, [sp, #16]
 8008d82:	4625      	mov	r5, r4
 8008d84:	e7f3      	b.n	8008d6e <_dtoa_r+0x92e>
 8008d86:	9b07      	ldr	r3, [sp, #28]
 8008d88:	9308      	str	r3, [sp, #32]
 8008d8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	f000 8104 	beq.w	8008f9a <_dtoa_r+0xb5a>
 8008d92:	2e00      	cmp	r6, #0
 8008d94:	dd05      	ble.n	8008da2 <_dtoa_r+0x962>
 8008d96:	4629      	mov	r1, r5
 8008d98:	4632      	mov	r2, r6
 8008d9a:	4658      	mov	r0, fp
 8008d9c:	f000 fb6c 	bl	8009478 <__lshift>
 8008da0:	4605      	mov	r5, r0
 8008da2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d05a      	beq.n	8008e5e <_dtoa_r+0xa1e>
 8008da8:	4658      	mov	r0, fp
 8008daa:	6869      	ldr	r1, [r5, #4]
 8008dac:	f000 f958 	bl	8009060 <_Balloc>
 8008db0:	4606      	mov	r6, r0
 8008db2:	b928      	cbnz	r0, 8008dc0 <_dtoa_r+0x980>
 8008db4:	4602      	mov	r2, r0
 8008db6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008dba:	4b83      	ldr	r3, [pc, #524]	@ (8008fc8 <_dtoa_r+0xb88>)
 8008dbc:	f7ff bb54 	b.w	8008468 <_dtoa_r+0x28>
 8008dc0:	692a      	ldr	r2, [r5, #16]
 8008dc2:	f105 010c 	add.w	r1, r5, #12
 8008dc6:	3202      	adds	r2, #2
 8008dc8:	0092      	lsls	r2, r2, #2
 8008dca:	300c      	adds	r0, #12
 8008dcc:	f7ff fa9f 	bl	800830e <memcpy>
 8008dd0:	2201      	movs	r2, #1
 8008dd2:	4631      	mov	r1, r6
 8008dd4:	4658      	mov	r0, fp
 8008dd6:	f000 fb4f 	bl	8009478 <__lshift>
 8008dda:	462f      	mov	r7, r5
 8008ddc:	4605      	mov	r5, r0
 8008dde:	f10a 0301 	add.w	r3, sl, #1
 8008de2:	9307      	str	r3, [sp, #28]
 8008de4:	9b08      	ldr	r3, [sp, #32]
 8008de6:	4453      	add	r3, sl
 8008de8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008dea:	9b02      	ldr	r3, [sp, #8]
 8008dec:	f003 0301 	and.w	r3, r3, #1
 8008df0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008df2:	9b07      	ldr	r3, [sp, #28]
 8008df4:	4621      	mov	r1, r4
 8008df6:	3b01      	subs	r3, #1
 8008df8:	4648      	mov	r0, r9
 8008dfa:	9302      	str	r3, [sp, #8]
 8008dfc:	f7ff fa95 	bl	800832a <quorem>
 8008e00:	4639      	mov	r1, r7
 8008e02:	9008      	str	r0, [sp, #32]
 8008e04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008e08:	4648      	mov	r0, r9
 8008e0a:	f000 fba1 	bl	8009550 <__mcmp>
 8008e0e:	462a      	mov	r2, r5
 8008e10:	9009      	str	r0, [sp, #36]	@ 0x24
 8008e12:	4621      	mov	r1, r4
 8008e14:	4658      	mov	r0, fp
 8008e16:	f000 fbb7 	bl	8009588 <__mdiff>
 8008e1a:	68c2      	ldr	r2, [r0, #12]
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	bb02      	cbnz	r2, 8008e62 <_dtoa_r+0xa22>
 8008e20:	4601      	mov	r1, r0
 8008e22:	4648      	mov	r0, r9
 8008e24:	f000 fb94 	bl	8009550 <__mcmp>
 8008e28:	4602      	mov	r2, r0
 8008e2a:	4631      	mov	r1, r6
 8008e2c:	4658      	mov	r0, fp
 8008e2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008e30:	f000 f956 	bl	80090e0 <_Bfree>
 8008e34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008e38:	9e07      	ldr	r6, [sp, #28]
 8008e3a:	ea43 0102 	orr.w	r1, r3, r2
 8008e3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008e40:	4319      	orrs	r1, r3
 8008e42:	d110      	bne.n	8008e66 <_dtoa_r+0xa26>
 8008e44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e48:	d029      	beq.n	8008e9e <_dtoa_r+0xa5e>
 8008e4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dd02      	ble.n	8008e56 <_dtoa_r+0xa16>
 8008e50:	9b08      	ldr	r3, [sp, #32]
 8008e52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008e56:	9b02      	ldr	r3, [sp, #8]
 8008e58:	f883 8000 	strb.w	r8, [r3]
 8008e5c:	e63b      	b.n	8008ad6 <_dtoa_r+0x696>
 8008e5e:	4628      	mov	r0, r5
 8008e60:	e7bb      	b.n	8008dda <_dtoa_r+0x99a>
 8008e62:	2201      	movs	r2, #1
 8008e64:	e7e1      	b.n	8008e2a <_dtoa_r+0x9ea>
 8008e66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	db04      	blt.n	8008e76 <_dtoa_r+0xa36>
 8008e6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008e6e:	430b      	orrs	r3, r1
 8008e70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008e72:	430b      	orrs	r3, r1
 8008e74:	d120      	bne.n	8008eb8 <_dtoa_r+0xa78>
 8008e76:	2a00      	cmp	r2, #0
 8008e78:	dded      	ble.n	8008e56 <_dtoa_r+0xa16>
 8008e7a:	4649      	mov	r1, r9
 8008e7c:	2201      	movs	r2, #1
 8008e7e:	4658      	mov	r0, fp
 8008e80:	f000 fafa 	bl	8009478 <__lshift>
 8008e84:	4621      	mov	r1, r4
 8008e86:	4681      	mov	r9, r0
 8008e88:	f000 fb62 	bl	8009550 <__mcmp>
 8008e8c:	2800      	cmp	r0, #0
 8008e8e:	dc03      	bgt.n	8008e98 <_dtoa_r+0xa58>
 8008e90:	d1e1      	bne.n	8008e56 <_dtoa_r+0xa16>
 8008e92:	f018 0f01 	tst.w	r8, #1
 8008e96:	d0de      	beq.n	8008e56 <_dtoa_r+0xa16>
 8008e98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008e9c:	d1d8      	bne.n	8008e50 <_dtoa_r+0xa10>
 8008e9e:	2339      	movs	r3, #57	@ 0x39
 8008ea0:	9a02      	ldr	r2, [sp, #8]
 8008ea2:	7013      	strb	r3, [r2, #0]
 8008ea4:	4633      	mov	r3, r6
 8008ea6:	461e      	mov	r6, r3
 8008ea8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008eac:	3b01      	subs	r3, #1
 8008eae:	2a39      	cmp	r2, #57	@ 0x39
 8008eb0:	d052      	beq.n	8008f58 <_dtoa_r+0xb18>
 8008eb2:	3201      	adds	r2, #1
 8008eb4:	701a      	strb	r2, [r3, #0]
 8008eb6:	e60e      	b.n	8008ad6 <_dtoa_r+0x696>
 8008eb8:	2a00      	cmp	r2, #0
 8008eba:	dd07      	ble.n	8008ecc <_dtoa_r+0xa8c>
 8008ebc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008ec0:	d0ed      	beq.n	8008e9e <_dtoa_r+0xa5e>
 8008ec2:	9a02      	ldr	r2, [sp, #8]
 8008ec4:	f108 0301 	add.w	r3, r8, #1
 8008ec8:	7013      	strb	r3, [r2, #0]
 8008eca:	e604      	b.n	8008ad6 <_dtoa_r+0x696>
 8008ecc:	9b07      	ldr	r3, [sp, #28]
 8008ece:	9a07      	ldr	r2, [sp, #28]
 8008ed0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008ed4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d028      	beq.n	8008f2c <_dtoa_r+0xaec>
 8008eda:	4649      	mov	r1, r9
 8008edc:	2300      	movs	r3, #0
 8008ede:	220a      	movs	r2, #10
 8008ee0:	4658      	mov	r0, fp
 8008ee2:	f000 f91f 	bl	8009124 <__multadd>
 8008ee6:	42af      	cmp	r7, r5
 8008ee8:	4681      	mov	r9, r0
 8008eea:	f04f 0300 	mov.w	r3, #0
 8008eee:	f04f 020a 	mov.w	r2, #10
 8008ef2:	4639      	mov	r1, r7
 8008ef4:	4658      	mov	r0, fp
 8008ef6:	d107      	bne.n	8008f08 <_dtoa_r+0xac8>
 8008ef8:	f000 f914 	bl	8009124 <__multadd>
 8008efc:	4607      	mov	r7, r0
 8008efe:	4605      	mov	r5, r0
 8008f00:	9b07      	ldr	r3, [sp, #28]
 8008f02:	3301      	adds	r3, #1
 8008f04:	9307      	str	r3, [sp, #28]
 8008f06:	e774      	b.n	8008df2 <_dtoa_r+0x9b2>
 8008f08:	f000 f90c 	bl	8009124 <__multadd>
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	4607      	mov	r7, r0
 8008f10:	2300      	movs	r3, #0
 8008f12:	220a      	movs	r2, #10
 8008f14:	4658      	mov	r0, fp
 8008f16:	f000 f905 	bl	8009124 <__multadd>
 8008f1a:	4605      	mov	r5, r0
 8008f1c:	e7f0      	b.n	8008f00 <_dtoa_r+0xac0>
 8008f1e:	9b08      	ldr	r3, [sp, #32]
 8008f20:	2700      	movs	r7, #0
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	bfcc      	ite	gt
 8008f26:	461e      	movgt	r6, r3
 8008f28:	2601      	movle	r6, #1
 8008f2a:	4456      	add	r6, sl
 8008f2c:	4649      	mov	r1, r9
 8008f2e:	2201      	movs	r2, #1
 8008f30:	4658      	mov	r0, fp
 8008f32:	f000 faa1 	bl	8009478 <__lshift>
 8008f36:	4621      	mov	r1, r4
 8008f38:	4681      	mov	r9, r0
 8008f3a:	f000 fb09 	bl	8009550 <__mcmp>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	dcb0      	bgt.n	8008ea4 <_dtoa_r+0xa64>
 8008f42:	d102      	bne.n	8008f4a <_dtoa_r+0xb0a>
 8008f44:	f018 0f01 	tst.w	r8, #1
 8008f48:	d1ac      	bne.n	8008ea4 <_dtoa_r+0xa64>
 8008f4a:	4633      	mov	r3, r6
 8008f4c:	461e      	mov	r6, r3
 8008f4e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f52:	2a30      	cmp	r2, #48	@ 0x30
 8008f54:	d0fa      	beq.n	8008f4c <_dtoa_r+0xb0c>
 8008f56:	e5be      	b.n	8008ad6 <_dtoa_r+0x696>
 8008f58:	459a      	cmp	sl, r3
 8008f5a:	d1a4      	bne.n	8008ea6 <_dtoa_r+0xa66>
 8008f5c:	9b04      	ldr	r3, [sp, #16]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	9304      	str	r3, [sp, #16]
 8008f62:	2331      	movs	r3, #49	@ 0x31
 8008f64:	f88a 3000 	strb.w	r3, [sl]
 8008f68:	e5b5      	b.n	8008ad6 <_dtoa_r+0x696>
 8008f6a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008f6c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8008fcc <_dtoa_r+0xb8c>
 8008f70:	b11b      	cbz	r3, 8008f7a <_dtoa_r+0xb3a>
 8008f72:	f10a 0308 	add.w	r3, sl, #8
 8008f76:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	4650      	mov	r0, sl
 8008f7c:	b017      	add	sp, #92	@ 0x5c
 8008f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f82:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f84:	2b01      	cmp	r3, #1
 8008f86:	f77f ae3d 	ble.w	8008c04 <_dtoa_r+0x7c4>
 8008f8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008f8c:	930a      	str	r3, [sp, #40]	@ 0x28
 8008f8e:	2001      	movs	r0, #1
 8008f90:	e65b      	b.n	8008c4a <_dtoa_r+0x80a>
 8008f92:	9b08      	ldr	r3, [sp, #32]
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	f77f aed6 	ble.w	8008d46 <_dtoa_r+0x906>
 8008f9a:	4656      	mov	r6, sl
 8008f9c:	4621      	mov	r1, r4
 8008f9e:	4648      	mov	r0, r9
 8008fa0:	f7ff f9c3 	bl	800832a <quorem>
 8008fa4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008fa8:	9b08      	ldr	r3, [sp, #32]
 8008faa:	f806 8b01 	strb.w	r8, [r6], #1
 8008fae:	eba6 020a 	sub.w	r2, r6, sl
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	ddb3      	ble.n	8008f1e <_dtoa_r+0xade>
 8008fb6:	4649      	mov	r1, r9
 8008fb8:	2300      	movs	r3, #0
 8008fba:	220a      	movs	r2, #10
 8008fbc:	4658      	mov	r0, fp
 8008fbe:	f000 f8b1 	bl	8009124 <__multadd>
 8008fc2:	4681      	mov	r9, r0
 8008fc4:	e7ea      	b.n	8008f9c <_dtoa_r+0xb5c>
 8008fc6:	bf00      	nop
 8008fc8:	0800a8d1 	.word	0x0800a8d1
 8008fcc:	0800a86c 	.word	0x0800a86c

08008fd0 <_free_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4605      	mov	r5, r0
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	d040      	beq.n	800905a <_free_r+0x8a>
 8008fd8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fdc:	1f0c      	subs	r4, r1, #4
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	bfb8      	it	lt
 8008fe2:	18e4      	addlt	r4, r4, r3
 8008fe4:	f7fd fee8 	bl	8006db8 <__malloc_lock>
 8008fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800905c <_free_r+0x8c>)
 8008fea:	6813      	ldr	r3, [r2, #0]
 8008fec:	b933      	cbnz	r3, 8008ffc <_free_r+0x2c>
 8008fee:	6063      	str	r3, [r4, #4]
 8008ff0:	6014      	str	r4, [r2, #0]
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ff8:	f7fd bee4 	b.w	8006dc4 <__malloc_unlock>
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	d908      	bls.n	8009012 <_free_r+0x42>
 8009000:	6820      	ldr	r0, [r4, #0]
 8009002:	1821      	adds	r1, r4, r0
 8009004:	428b      	cmp	r3, r1
 8009006:	bf01      	itttt	eq
 8009008:	6819      	ldreq	r1, [r3, #0]
 800900a:	685b      	ldreq	r3, [r3, #4]
 800900c:	1809      	addeq	r1, r1, r0
 800900e:	6021      	streq	r1, [r4, #0]
 8009010:	e7ed      	b.n	8008fee <_free_r+0x1e>
 8009012:	461a      	mov	r2, r3
 8009014:	685b      	ldr	r3, [r3, #4]
 8009016:	b10b      	cbz	r3, 800901c <_free_r+0x4c>
 8009018:	42a3      	cmp	r3, r4
 800901a:	d9fa      	bls.n	8009012 <_free_r+0x42>
 800901c:	6811      	ldr	r1, [r2, #0]
 800901e:	1850      	adds	r0, r2, r1
 8009020:	42a0      	cmp	r0, r4
 8009022:	d10b      	bne.n	800903c <_free_r+0x6c>
 8009024:	6820      	ldr	r0, [r4, #0]
 8009026:	4401      	add	r1, r0
 8009028:	1850      	adds	r0, r2, r1
 800902a:	4283      	cmp	r3, r0
 800902c:	6011      	str	r1, [r2, #0]
 800902e:	d1e0      	bne.n	8008ff2 <_free_r+0x22>
 8009030:	6818      	ldr	r0, [r3, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	4408      	add	r0, r1
 8009036:	6010      	str	r0, [r2, #0]
 8009038:	6053      	str	r3, [r2, #4]
 800903a:	e7da      	b.n	8008ff2 <_free_r+0x22>
 800903c:	d902      	bls.n	8009044 <_free_r+0x74>
 800903e:	230c      	movs	r3, #12
 8009040:	602b      	str	r3, [r5, #0]
 8009042:	e7d6      	b.n	8008ff2 <_free_r+0x22>
 8009044:	6820      	ldr	r0, [r4, #0]
 8009046:	1821      	adds	r1, r4, r0
 8009048:	428b      	cmp	r3, r1
 800904a:	bf01      	itttt	eq
 800904c:	6819      	ldreq	r1, [r3, #0]
 800904e:	685b      	ldreq	r3, [r3, #4]
 8009050:	1809      	addeq	r1, r1, r0
 8009052:	6021      	streq	r1, [r4, #0]
 8009054:	6063      	str	r3, [r4, #4]
 8009056:	6054      	str	r4, [r2, #4]
 8009058:	e7cb      	b.n	8008ff2 <_free_r+0x22>
 800905a:	bd38      	pop	{r3, r4, r5, pc}
 800905c:	200002e4 	.word	0x200002e4

08009060 <_Balloc>:
 8009060:	b570      	push	{r4, r5, r6, lr}
 8009062:	69c6      	ldr	r6, [r0, #28]
 8009064:	4604      	mov	r4, r0
 8009066:	460d      	mov	r5, r1
 8009068:	b976      	cbnz	r6, 8009088 <_Balloc+0x28>
 800906a:	2010      	movs	r0, #16
 800906c:	f7fd fdf2 	bl	8006c54 <malloc>
 8009070:	4602      	mov	r2, r0
 8009072:	61e0      	str	r0, [r4, #28]
 8009074:	b920      	cbnz	r0, 8009080 <_Balloc+0x20>
 8009076:	216b      	movs	r1, #107	@ 0x6b
 8009078:	4b17      	ldr	r3, [pc, #92]	@ (80090d8 <_Balloc+0x78>)
 800907a:	4818      	ldr	r0, [pc, #96]	@ (80090dc <_Balloc+0x7c>)
 800907c:	f7fd fdb0 	bl	8006be0 <__assert_func>
 8009080:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009084:	6006      	str	r6, [r0, #0]
 8009086:	60c6      	str	r6, [r0, #12]
 8009088:	69e6      	ldr	r6, [r4, #28]
 800908a:	68f3      	ldr	r3, [r6, #12]
 800908c:	b183      	cbz	r3, 80090b0 <_Balloc+0x50>
 800908e:	69e3      	ldr	r3, [r4, #28]
 8009090:	68db      	ldr	r3, [r3, #12]
 8009092:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009096:	b9b8      	cbnz	r0, 80090c8 <_Balloc+0x68>
 8009098:	2101      	movs	r1, #1
 800909a:	fa01 f605 	lsl.w	r6, r1, r5
 800909e:	1d72      	adds	r2, r6, #5
 80090a0:	4620      	mov	r0, r4
 80090a2:	0092      	lsls	r2, r2, #2
 80090a4:	f7fd fdc2 	bl	8006c2c <_calloc_r>
 80090a8:	b160      	cbz	r0, 80090c4 <_Balloc+0x64>
 80090aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090ae:	e00e      	b.n	80090ce <_Balloc+0x6e>
 80090b0:	2221      	movs	r2, #33	@ 0x21
 80090b2:	2104      	movs	r1, #4
 80090b4:	4620      	mov	r0, r4
 80090b6:	f7fd fdb9 	bl	8006c2c <_calloc_r>
 80090ba:	69e3      	ldr	r3, [r4, #28]
 80090bc:	60f0      	str	r0, [r6, #12]
 80090be:	68db      	ldr	r3, [r3, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d1e4      	bne.n	800908e <_Balloc+0x2e>
 80090c4:	2000      	movs	r0, #0
 80090c6:	bd70      	pop	{r4, r5, r6, pc}
 80090c8:	6802      	ldr	r2, [r0, #0]
 80090ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090ce:	2300      	movs	r3, #0
 80090d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090d4:	e7f7      	b.n	80090c6 <_Balloc+0x66>
 80090d6:	bf00      	nop
 80090d8:	0800a7b8 	.word	0x0800a7b8
 80090dc:	0800a8e2 	.word	0x0800a8e2

080090e0 <_Bfree>:
 80090e0:	b570      	push	{r4, r5, r6, lr}
 80090e2:	69c6      	ldr	r6, [r0, #28]
 80090e4:	4605      	mov	r5, r0
 80090e6:	460c      	mov	r4, r1
 80090e8:	b976      	cbnz	r6, 8009108 <_Bfree+0x28>
 80090ea:	2010      	movs	r0, #16
 80090ec:	f7fd fdb2 	bl	8006c54 <malloc>
 80090f0:	4602      	mov	r2, r0
 80090f2:	61e8      	str	r0, [r5, #28]
 80090f4:	b920      	cbnz	r0, 8009100 <_Bfree+0x20>
 80090f6:	218f      	movs	r1, #143	@ 0x8f
 80090f8:	4b08      	ldr	r3, [pc, #32]	@ (800911c <_Bfree+0x3c>)
 80090fa:	4809      	ldr	r0, [pc, #36]	@ (8009120 <_Bfree+0x40>)
 80090fc:	f7fd fd70 	bl	8006be0 <__assert_func>
 8009100:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009104:	6006      	str	r6, [r0, #0]
 8009106:	60c6      	str	r6, [r0, #12]
 8009108:	b13c      	cbz	r4, 800911a <_Bfree+0x3a>
 800910a:	69eb      	ldr	r3, [r5, #28]
 800910c:	6862      	ldr	r2, [r4, #4]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009114:	6021      	str	r1, [r4, #0]
 8009116:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800911a:	bd70      	pop	{r4, r5, r6, pc}
 800911c:	0800a7b8 	.word	0x0800a7b8
 8009120:	0800a8e2 	.word	0x0800a8e2

08009124 <__multadd>:
 8009124:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009128:	4607      	mov	r7, r0
 800912a:	460c      	mov	r4, r1
 800912c:	461e      	mov	r6, r3
 800912e:	2000      	movs	r0, #0
 8009130:	690d      	ldr	r5, [r1, #16]
 8009132:	f101 0c14 	add.w	ip, r1, #20
 8009136:	f8dc 3000 	ldr.w	r3, [ip]
 800913a:	3001      	adds	r0, #1
 800913c:	b299      	uxth	r1, r3
 800913e:	fb02 6101 	mla	r1, r2, r1, r6
 8009142:	0c1e      	lsrs	r6, r3, #16
 8009144:	0c0b      	lsrs	r3, r1, #16
 8009146:	fb02 3306 	mla	r3, r2, r6, r3
 800914a:	b289      	uxth	r1, r1
 800914c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009150:	4285      	cmp	r5, r0
 8009152:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009156:	f84c 1b04 	str.w	r1, [ip], #4
 800915a:	dcec      	bgt.n	8009136 <__multadd+0x12>
 800915c:	b30e      	cbz	r6, 80091a2 <__multadd+0x7e>
 800915e:	68a3      	ldr	r3, [r4, #8]
 8009160:	42ab      	cmp	r3, r5
 8009162:	dc19      	bgt.n	8009198 <__multadd+0x74>
 8009164:	6861      	ldr	r1, [r4, #4]
 8009166:	4638      	mov	r0, r7
 8009168:	3101      	adds	r1, #1
 800916a:	f7ff ff79 	bl	8009060 <_Balloc>
 800916e:	4680      	mov	r8, r0
 8009170:	b928      	cbnz	r0, 800917e <__multadd+0x5a>
 8009172:	4602      	mov	r2, r0
 8009174:	21ba      	movs	r1, #186	@ 0xba
 8009176:	4b0c      	ldr	r3, [pc, #48]	@ (80091a8 <__multadd+0x84>)
 8009178:	480c      	ldr	r0, [pc, #48]	@ (80091ac <__multadd+0x88>)
 800917a:	f7fd fd31 	bl	8006be0 <__assert_func>
 800917e:	6922      	ldr	r2, [r4, #16]
 8009180:	f104 010c 	add.w	r1, r4, #12
 8009184:	3202      	adds	r2, #2
 8009186:	0092      	lsls	r2, r2, #2
 8009188:	300c      	adds	r0, #12
 800918a:	f7ff f8c0 	bl	800830e <memcpy>
 800918e:	4621      	mov	r1, r4
 8009190:	4638      	mov	r0, r7
 8009192:	f7ff ffa5 	bl	80090e0 <_Bfree>
 8009196:	4644      	mov	r4, r8
 8009198:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800919c:	3501      	adds	r5, #1
 800919e:	615e      	str	r6, [r3, #20]
 80091a0:	6125      	str	r5, [r4, #16]
 80091a2:	4620      	mov	r0, r4
 80091a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a8:	0800a8d1 	.word	0x0800a8d1
 80091ac:	0800a8e2 	.word	0x0800a8e2

080091b0 <__hi0bits>:
 80091b0:	4603      	mov	r3, r0
 80091b2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80091b6:	bf3a      	itte	cc
 80091b8:	0403      	lslcc	r3, r0, #16
 80091ba:	2010      	movcc	r0, #16
 80091bc:	2000      	movcs	r0, #0
 80091be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80091c2:	bf3c      	itt	cc
 80091c4:	021b      	lslcc	r3, r3, #8
 80091c6:	3008      	addcc	r0, #8
 80091c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80091cc:	bf3c      	itt	cc
 80091ce:	011b      	lslcc	r3, r3, #4
 80091d0:	3004      	addcc	r0, #4
 80091d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80091d6:	bf3c      	itt	cc
 80091d8:	009b      	lslcc	r3, r3, #2
 80091da:	3002      	addcc	r0, #2
 80091dc:	2b00      	cmp	r3, #0
 80091de:	db05      	blt.n	80091ec <__hi0bits+0x3c>
 80091e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80091e4:	f100 0001 	add.w	r0, r0, #1
 80091e8:	bf08      	it	eq
 80091ea:	2020      	moveq	r0, #32
 80091ec:	4770      	bx	lr

080091ee <__lo0bits>:
 80091ee:	6803      	ldr	r3, [r0, #0]
 80091f0:	4602      	mov	r2, r0
 80091f2:	f013 0007 	ands.w	r0, r3, #7
 80091f6:	d00b      	beq.n	8009210 <__lo0bits+0x22>
 80091f8:	07d9      	lsls	r1, r3, #31
 80091fa:	d421      	bmi.n	8009240 <__lo0bits+0x52>
 80091fc:	0798      	lsls	r0, r3, #30
 80091fe:	bf49      	itett	mi
 8009200:	085b      	lsrmi	r3, r3, #1
 8009202:	089b      	lsrpl	r3, r3, #2
 8009204:	2001      	movmi	r0, #1
 8009206:	6013      	strmi	r3, [r2, #0]
 8009208:	bf5c      	itt	pl
 800920a:	2002      	movpl	r0, #2
 800920c:	6013      	strpl	r3, [r2, #0]
 800920e:	4770      	bx	lr
 8009210:	b299      	uxth	r1, r3
 8009212:	b909      	cbnz	r1, 8009218 <__lo0bits+0x2a>
 8009214:	2010      	movs	r0, #16
 8009216:	0c1b      	lsrs	r3, r3, #16
 8009218:	b2d9      	uxtb	r1, r3
 800921a:	b909      	cbnz	r1, 8009220 <__lo0bits+0x32>
 800921c:	3008      	adds	r0, #8
 800921e:	0a1b      	lsrs	r3, r3, #8
 8009220:	0719      	lsls	r1, r3, #28
 8009222:	bf04      	itt	eq
 8009224:	091b      	lsreq	r3, r3, #4
 8009226:	3004      	addeq	r0, #4
 8009228:	0799      	lsls	r1, r3, #30
 800922a:	bf04      	itt	eq
 800922c:	089b      	lsreq	r3, r3, #2
 800922e:	3002      	addeq	r0, #2
 8009230:	07d9      	lsls	r1, r3, #31
 8009232:	d403      	bmi.n	800923c <__lo0bits+0x4e>
 8009234:	085b      	lsrs	r3, r3, #1
 8009236:	f100 0001 	add.w	r0, r0, #1
 800923a:	d003      	beq.n	8009244 <__lo0bits+0x56>
 800923c:	6013      	str	r3, [r2, #0]
 800923e:	4770      	bx	lr
 8009240:	2000      	movs	r0, #0
 8009242:	4770      	bx	lr
 8009244:	2020      	movs	r0, #32
 8009246:	4770      	bx	lr

08009248 <__i2b>:
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	2101      	movs	r1, #1
 800924e:	f7ff ff07 	bl	8009060 <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__i2b+0x1a>
 8009256:	f240 1145 	movw	r1, #325	@ 0x145
 800925a:	4b04      	ldr	r3, [pc, #16]	@ (800926c <__i2b+0x24>)
 800925c:	4804      	ldr	r0, [pc, #16]	@ (8009270 <__i2b+0x28>)
 800925e:	f7fd fcbf 	bl	8006be0 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	6144      	str	r4, [r0, #20]
 8009266:	6103      	str	r3, [r0, #16]
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0800a8d1 	.word	0x0800a8d1
 8009270:	0800a8e2 	.word	0x0800a8e2

08009274 <__multiply>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4614      	mov	r4, r2
 800927a:	690a      	ldr	r2, [r1, #16]
 800927c:	6923      	ldr	r3, [r4, #16]
 800927e:	460f      	mov	r7, r1
 8009280:	429a      	cmp	r2, r3
 8009282:	bfa2      	ittt	ge
 8009284:	4623      	movge	r3, r4
 8009286:	460c      	movge	r4, r1
 8009288:	461f      	movge	r7, r3
 800928a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800928e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009292:	68a3      	ldr	r3, [r4, #8]
 8009294:	6861      	ldr	r1, [r4, #4]
 8009296:	eb0a 0609 	add.w	r6, sl, r9
 800929a:	42b3      	cmp	r3, r6
 800929c:	b085      	sub	sp, #20
 800929e:	bfb8      	it	lt
 80092a0:	3101      	addlt	r1, #1
 80092a2:	f7ff fedd 	bl	8009060 <_Balloc>
 80092a6:	b930      	cbnz	r0, 80092b6 <__multiply+0x42>
 80092a8:	4602      	mov	r2, r0
 80092aa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80092ae:	4b43      	ldr	r3, [pc, #268]	@ (80093bc <__multiply+0x148>)
 80092b0:	4843      	ldr	r0, [pc, #268]	@ (80093c0 <__multiply+0x14c>)
 80092b2:	f7fd fc95 	bl	8006be0 <__assert_func>
 80092b6:	f100 0514 	add.w	r5, r0, #20
 80092ba:	462b      	mov	r3, r5
 80092bc:	2200      	movs	r2, #0
 80092be:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092c2:	4543      	cmp	r3, r8
 80092c4:	d321      	bcc.n	800930a <__multiply+0x96>
 80092c6:	f107 0114 	add.w	r1, r7, #20
 80092ca:	f104 0214 	add.w	r2, r4, #20
 80092ce:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80092d2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80092d6:	9302      	str	r3, [sp, #8]
 80092d8:	1b13      	subs	r3, r2, r4
 80092da:	3b15      	subs	r3, #21
 80092dc:	f023 0303 	bic.w	r3, r3, #3
 80092e0:	3304      	adds	r3, #4
 80092e2:	f104 0715 	add.w	r7, r4, #21
 80092e6:	42ba      	cmp	r2, r7
 80092e8:	bf38      	it	cc
 80092ea:	2304      	movcc	r3, #4
 80092ec:	9301      	str	r3, [sp, #4]
 80092ee:	9b02      	ldr	r3, [sp, #8]
 80092f0:	9103      	str	r1, [sp, #12]
 80092f2:	428b      	cmp	r3, r1
 80092f4:	d80c      	bhi.n	8009310 <__multiply+0x9c>
 80092f6:	2e00      	cmp	r6, #0
 80092f8:	dd03      	ble.n	8009302 <__multiply+0x8e>
 80092fa:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d05a      	beq.n	80093b8 <__multiply+0x144>
 8009302:	6106      	str	r6, [r0, #16]
 8009304:	b005      	add	sp, #20
 8009306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930a:	f843 2b04 	str.w	r2, [r3], #4
 800930e:	e7d8      	b.n	80092c2 <__multiply+0x4e>
 8009310:	f8b1 a000 	ldrh.w	sl, [r1]
 8009314:	f1ba 0f00 	cmp.w	sl, #0
 8009318:	d023      	beq.n	8009362 <__multiply+0xee>
 800931a:	46a9      	mov	r9, r5
 800931c:	f04f 0c00 	mov.w	ip, #0
 8009320:	f104 0e14 	add.w	lr, r4, #20
 8009324:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009328:	f8d9 3000 	ldr.w	r3, [r9]
 800932c:	fa1f fb87 	uxth.w	fp, r7
 8009330:	b29b      	uxth	r3, r3
 8009332:	fb0a 330b 	mla	r3, sl, fp, r3
 8009336:	4463      	add	r3, ip
 8009338:	f8d9 c000 	ldr.w	ip, [r9]
 800933c:	0c3f      	lsrs	r7, r7, #16
 800933e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009342:	fb0a c707 	mla	r7, sl, r7, ip
 8009346:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800934a:	b29b      	uxth	r3, r3
 800934c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009350:	4572      	cmp	r2, lr
 8009352:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009356:	f849 3b04 	str.w	r3, [r9], #4
 800935a:	d8e3      	bhi.n	8009324 <__multiply+0xb0>
 800935c:	9b01      	ldr	r3, [sp, #4]
 800935e:	f845 c003 	str.w	ip, [r5, r3]
 8009362:	9b03      	ldr	r3, [sp, #12]
 8009364:	3104      	adds	r1, #4
 8009366:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800936a:	f1b9 0f00 	cmp.w	r9, #0
 800936e:	d021      	beq.n	80093b4 <__multiply+0x140>
 8009370:	46ae      	mov	lr, r5
 8009372:	f04f 0a00 	mov.w	sl, #0
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	f104 0c14 	add.w	ip, r4, #20
 800937c:	f8bc b000 	ldrh.w	fp, [ip]
 8009380:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009384:	b29b      	uxth	r3, r3
 8009386:	fb09 770b 	mla	r7, r9, fp, r7
 800938a:	4457      	add	r7, sl
 800938c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009390:	f84e 3b04 	str.w	r3, [lr], #4
 8009394:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009398:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800939c:	f8be 3000 	ldrh.w	r3, [lr]
 80093a0:	4562      	cmp	r2, ip
 80093a2:	fb09 330a 	mla	r3, r9, sl, r3
 80093a6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80093aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80093ae:	d8e5      	bhi.n	800937c <__multiply+0x108>
 80093b0:	9f01      	ldr	r7, [sp, #4]
 80093b2:	51eb      	str	r3, [r5, r7]
 80093b4:	3504      	adds	r5, #4
 80093b6:	e79a      	b.n	80092ee <__multiply+0x7a>
 80093b8:	3e01      	subs	r6, #1
 80093ba:	e79c      	b.n	80092f6 <__multiply+0x82>
 80093bc:	0800a8d1 	.word	0x0800a8d1
 80093c0:	0800a8e2 	.word	0x0800a8e2

080093c4 <__pow5mult>:
 80093c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093c8:	4615      	mov	r5, r2
 80093ca:	f012 0203 	ands.w	r2, r2, #3
 80093ce:	4607      	mov	r7, r0
 80093d0:	460e      	mov	r6, r1
 80093d2:	d007      	beq.n	80093e4 <__pow5mult+0x20>
 80093d4:	4c25      	ldr	r4, [pc, #148]	@ (800946c <__pow5mult+0xa8>)
 80093d6:	3a01      	subs	r2, #1
 80093d8:	2300      	movs	r3, #0
 80093da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093de:	f7ff fea1 	bl	8009124 <__multadd>
 80093e2:	4606      	mov	r6, r0
 80093e4:	10ad      	asrs	r5, r5, #2
 80093e6:	d03d      	beq.n	8009464 <__pow5mult+0xa0>
 80093e8:	69fc      	ldr	r4, [r7, #28]
 80093ea:	b97c      	cbnz	r4, 800940c <__pow5mult+0x48>
 80093ec:	2010      	movs	r0, #16
 80093ee:	f7fd fc31 	bl	8006c54 <malloc>
 80093f2:	4602      	mov	r2, r0
 80093f4:	61f8      	str	r0, [r7, #28]
 80093f6:	b928      	cbnz	r0, 8009404 <__pow5mult+0x40>
 80093f8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80093fc:	4b1c      	ldr	r3, [pc, #112]	@ (8009470 <__pow5mult+0xac>)
 80093fe:	481d      	ldr	r0, [pc, #116]	@ (8009474 <__pow5mult+0xb0>)
 8009400:	f7fd fbee 	bl	8006be0 <__assert_func>
 8009404:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009408:	6004      	str	r4, [r0, #0]
 800940a:	60c4      	str	r4, [r0, #12]
 800940c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009410:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009414:	b94c      	cbnz	r4, 800942a <__pow5mult+0x66>
 8009416:	f240 2171 	movw	r1, #625	@ 0x271
 800941a:	4638      	mov	r0, r7
 800941c:	f7ff ff14 	bl	8009248 <__i2b>
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	f8c8 0008 	str.w	r0, [r8, #8]
 8009428:	6003      	str	r3, [r0, #0]
 800942a:	f04f 0900 	mov.w	r9, #0
 800942e:	07eb      	lsls	r3, r5, #31
 8009430:	d50a      	bpl.n	8009448 <__pow5mult+0x84>
 8009432:	4631      	mov	r1, r6
 8009434:	4622      	mov	r2, r4
 8009436:	4638      	mov	r0, r7
 8009438:	f7ff ff1c 	bl	8009274 <__multiply>
 800943c:	4680      	mov	r8, r0
 800943e:	4631      	mov	r1, r6
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff fe4d 	bl	80090e0 <_Bfree>
 8009446:	4646      	mov	r6, r8
 8009448:	106d      	asrs	r5, r5, #1
 800944a:	d00b      	beq.n	8009464 <__pow5mult+0xa0>
 800944c:	6820      	ldr	r0, [r4, #0]
 800944e:	b938      	cbnz	r0, 8009460 <__pow5mult+0x9c>
 8009450:	4622      	mov	r2, r4
 8009452:	4621      	mov	r1, r4
 8009454:	4638      	mov	r0, r7
 8009456:	f7ff ff0d 	bl	8009274 <__multiply>
 800945a:	6020      	str	r0, [r4, #0]
 800945c:	f8c0 9000 	str.w	r9, [r0]
 8009460:	4604      	mov	r4, r0
 8009462:	e7e4      	b.n	800942e <__pow5mult+0x6a>
 8009464:	4630      	mov	r0, r6
 8009466:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946a:	bf00      	nop
 800946c:	0800a93c 	.word	0x0800a93c
 8009470:	0800a7b8 	.word	0x0800a7b8
 8009474:	0800a8e2 	.word	0x0800a8e2

08009478 <__lshift>:
 8009478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800947c:	460c      	mov	r4, r1
 800947e:	4607      	mov	r7, r0
 8009480:	4691      	mov	r9, r2
 8009482:	6923      	ldr	r3, [r4, #16]
 8009484:	6849      	ldr	r1, [r1, #4]
 8009486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009490:	f108 0601 	add.w	r6, r8, #1
 8009494:	42b3      	cmp	r3, r6
 8009496:	db0b      	blt.n	80094b0 <__lshift+0x38>
 8009498:	4638      	mov	r0, r7
 800949a:	f7ff fde1 	bl	8009060 <_Balloc>
 800949e:	4605      	mov	r5, r0
 80094a0:	b948      	cbnz	r0, 80094b6 <__lshift+0x3e>
 80094a2:	4602      	mov	r2, r0
 80094a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80094a8:	4b27      	ldr	r3, [pc, #156]	@ (8009548 <__lshift+0xd0>)
 80094aa:	4828      	ldr	r0, [pc, #160]	@ (800954c <__lshift+0xd4>)
 80094ac:	f7fd fb98 	bl	8006be0 <__assert_func>
 80094b0:	3101      	adds	r1, #1
 80094b2:	005b      	lsls	r3, r3, #1
 80094b4:	e7ee      	b.n	8009494 <__lshift+0x1c>
 80094b6:	2300      	movs	r3, #0
 80094b8:	f100 0114 	add.w	r1, r0, #20
 80094bc:	f100 0210 	add.w	r2, r0, #16
 80094c0:	4618      	mov	r0, r3
 80094c2:	4553      	cmp	r3, sl
 80094c4:	db33      	blt.n	800952e <__lshift+0xb6>
 80094c6:	6920      	ldr	r0, [r4, #16]
 80094c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094cc:	f104 0314 	add.w	r3, r4, #20
 80094d0:	f019 091f 	ands.w	r9, r9, #31
 80094d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094dc:	d02b      	beq.n	8009536 <__lshift+0xbe>
 80094de:	468a      	mov	sl, r1
 80094e0:	2200      	movs	r2, #0
 80094e2:	f1c9 0e20 	rsb	lr, r9, #32
 80094e6:	6818      	ldr	r0, [r3, #0]
 80094e8:	fa00 f009 	lsl.w	r0, r0, r9
 80094ec:	4310      	orrs	r0, r2
 80094ee:	f84a 0b04 	str.w	r0, [sl], #4
 80094f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80094f6:	459c      	cmp	ip, r3
 80094f8:	fa22 f20e 	lsr.w	r2, r2, lr
 80094fc:	d8f3      	bhi.n	80094e6 <__lshift+0x6e>
 80094fe:	ebac 0304 	sub.w	r3, ip, r4
 8009502:	3b15      	subs	r3, #21
 8009504:	f023 0303 	bic.w	r3, r3, #3
 8009508:	3304      	adds	r3, #4
 800950a:	f104 0015 	add.w	r0, r4, #21
 800950e:	4584      	cmp	ip, r0
 8009510:	bf38      	it	cc
 8009512:	2304      	movcc	r3, #4
 8009514:	50ca      	str	r2, [r1, r3]
 8009516:	b10a      	cbz	r2, 800951c <__lshift+0xa4>
 8009518:	f108 0602 	add.w	r6, r8, #2
 800951c:	3e01      	subs	r6, #1
 800951e:	4638      	mov	r0, r7
 8009520:	4621      	mov	r1, r4
 8009522:	612e      	str	r6, [r5, #16]
 8009524:	f7ff fddc 	bl	80090e0 <_Bfree>
 8009528:	4628      	mov	r0, r5
 800952a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800952e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009532:	3301      	adds	r3, #1
 8009534:	e7c5      	b.n	80094c2 <__lshift+0x4a>
 8009536:	3904      	subs	r1, #4
 8009538:	f853 2b04 	ldr.w	r2, [r3], #4
 800953c:	459c      	cmp	ip, r3
 800953e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009542:	d8f9      	bhi.n	8009538 <__lshift+0xc0>
 8009544:	e7ea      	b.n	800951c <__lshift+0xa4>
 8009546:	bf00      	nop
 8009548:	0800a8d1 	.word	0x0800a8d1
 800954c:	0800a8e2 	.word	0x0800a8e2

08009550 <__mcmp>:
 8009550:	4603      	mov	r3, r0
 8009552:	690a      	ldr	r2, [r1, #16]
 8009554:	6900      	ldr	r0, [r0, #16]
 8009556:	b530      	push	{r4, r5, lr}
 8009558:	1a80      	subs	r0, r0, r2
 800955a:	d10e      	bne.n	800957a <__mcmp+0x2a>
 800955c:	3314      	adds	r3, #20
 800955e:	3114      	adds	r1, #20
 8009560:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009564:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009568:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800956c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009570:	4295      	cmp	r5, r2
 8009572:	d003      	beq.n	800957c <__mcmp+0x2c>
 8009574:	d205      	bcs.n	8009582 <__mcmp+0x32>
 8009576:	f04f 30ff 	mov.w	r0, #4294967295
 800957a:	bd30      	pop	{r4, r5, pc}
 800957c:	42a3      	cmp	r3, r4
 800957e:	d3f3      	bcc.n	8009568 <__mcmp+0x18>
 8009580:	e7fb      	b.n	800957a <__mcmp+0x2a>
 8009582:	2001      	movs	r0, #1
 8009584:	e7f9      	b.n	800957a <__mcmp+0x2a>
	...

08009588 <__mdiff>:
 8009588:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800958c:	4689      	mov	r9, r1
 800958e:	4606      	mov	r6, r0
 8009590:	4611      	mov	r1, r2
 8009592:	4648      	mov	r0, r9
 8009594:	4614      	mov	r4, r2
 8009596:	f7ff ffdb 	bl	8009550 <__mcmp>
 800959a:	1e05      	subs	r5, r0, #0
 800959c:	d112      	bne.n	80095c4 <__mdiff+0x3c>
 800959e:	4629      	mov	r1, r5
 80095a0:	4630      	mov	r0, r6
 80095a2:	f7ff fd5d 	bl	8009060 <_Balloc>
 80095a6:	4602      	mov	r2, r0
 80095a8:	b928      	cbnz	r0, 80095b6 <__mdiff+0x2e>
 80095aa:	f240 2137 	movw	r1, #567	@ 0x237
 80095ae:	4b3e      	ldr	r3, [pc, #248]	@ (80096a8 <__mdiff+0x120>)
 80095b0:	483e      	ldr	r0, [pc, #248]	@ (80096ac <__mdiff+0x124>)
 80095b2:	f7fd fb15 	bl	8006be0 <__assert_func>
 80095b6:	2301      	movs	r3, #1
 80095b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095bc:	4610      	mov	r0, r2
 80095be:	b003      	add	sp, #12
 80095c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c4:	bfbc      	itt	lt
 80095c6:	464b      	movlt	r3, r9
 80095c8:	46a1      	movlt	r9, r4
 80095ca:	4630      	mov	r0, r6
 80095cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80095d0:	bfba      	itte	lt
 80095d2:	461c      	movlt	r4, r3
 80095d4:	2501      	movlt	r5, #1
 80095d6:	2500      	movge	r5, #0
 80095d8:	f7ff fd42 	bl	8009060 <_Balloc>
 80095dc:	4602      	mov	r2, r0
 80095de:	b918      	cbnz	r0, 80095e8 <__mdiff+0x60>
 80095e0:	f240 2145 	movw	r1, #581	@ 0x245
 80095e4:	4b30      	ldr	r3, [pc, #192]	@ (80096a8 <__mdiff+0x120>)
 80095e6:	e7e3      	b.n	80095b0 <__mdiff+0x28>
 80095e8:	f100 0b14 	add.w	fp, r0, #20
 80095ec:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80095f0:	f109 0310 	add.w	r3, r9, #16
 80095f4:	60c5      	str	r5, [r0, #12]
 80095f6:	f04f 0c00 	mov.w	ip, #0
 80095fa:	f109 0514 	add.w	r5, r9, #20
 80095fe:	46d9      	mov	r9, fp
 8009600:	6926      	ldr	r6, [r4, #16]
 8009602:	f104 0e14 	add.w	lr, r4, #20
 8009606:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800960a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800960e:	9301      	str	r3, [sp, #4]
 8009610:	9b01      	ldr	r3, [sp, #4]
 8009612:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009616:	f853 af04 	ldr.w	sl, [r3, #4]!
 800961a:	b281      	uxth	r1, r0
 800961c:	9301      	str	r3, [sp, #4]
 800961e:	fa1f f38a 	uxth.w	r3, sl
 8009622:	1a5b      	subs	r3, r3, r1
 8009624:	0c00      	lsrs	r0, r0, #16
 8009626:	4463      	add	r3, ip
 8009628:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800962c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009630:	b29b      	uxth	r3, r3
 8009632:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009636:	4576      	cmp	r6, lr
 8009638:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800963c:	f849 3b04 	str.w	r3, [r9], #4
 8009640:	d8e6      	bhi.n	8009610 <__mdiff+0x88>
 8009642:	1b33      	subs	r3, r6, r4
 8009644:	3b15      	subs	r3, #21
 8009646:	f023 0303 	bic.w	r3, r3, #3
 800964a:	3415      	adds	r4, #21
 800964c:	3304      	adds	r3, #4
 800964e:	42a6      	cmp	r6, r4
 8009650:	bf38      	it	cc
 8009652:	2304      	movcc	r3, #4
 8009654:	441d      	add	r5, r3
 8009656:	445b      	add	r3, fp
 8009658:	461e      	mov	r6, r3
 800965a:	462c      	mov	r4, r5
 800965c:	4544      	cmp	r4, r8
 800965e:	d30e      	bcc.n	800967e <__mdiff+0xf6>
 8009660:	f108 0103 	add.w	r1, r8, #3
 8009664:	1b49      	subs	r1, r1, r5
 8009666:	f021 0103 	bic.w	r1, r1, #3
 800966a:	3d03      	subs	r5, #3
 800966c:	45a8      	cmp	r8, r5
 800966e:	bf38      	it	cc
 8009670:	2100      	movcc	r1, #0
 8009672:	440b      	add	r3, r1
 8009674:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009678:	b199      	cbz	r1, 80096a2 <__mdiff+0x11a>
 800967a:	6117      	str	r7, [r2, #16]
 800967c:	e79e      	b.n	80095bc <__mdiff+0x34>
 800967e:	46e6      	mov	lr, ip
 8009680:	f854 1b04 	ldr.w	r1, [r4], #4
 8009684:	fa1f fc81 	uxth.w	ip, r1
 8009688:	44f4      	add	ip, lr
 800968a:	0c08      	lsrs	r0, r1, #16
 800968c:	4471      	add	r1, lr
 800968e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009692:	b289      	uxth	r1, r1
 8009694:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009698:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800969c:	f846 1b04 	str.w	r1, [r6], #4
 80096a0:	e7dc      	b.n	800965c <__mdiff+0xd4>
 80096a2:	3f01      	subs	r7, #1
 80096a4:	e7e6      	b.n	8009674 <__mdiff+0xec>
 80096a6:	bf00      	nop
 80096a8:	0800a8d1 	.word	0x0800a8d1
 80096ac:	0800a8e2 	.word	0x0800a8e2

080096b0 <__d2b>:
 80096b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80096b4:	2101      	movs	r1, #1
 80096b6:	4690      	mov	r8, r2
 80096b8:	4699      	mov	r9, r3
 80096ba:	9e08      	ldr	r6, [sp, #32]
 80096bc:	f7ff fcd0 	bl	8009060 <_Balloc>
 80096c0:	4604      	mov	r4, r0
 80096c2:	b930      	cbnz	r0, 80096d2 <__d2b+0x22>
 80096c4:	4602      	mov	r2, r0
 80096c6:	f240 310f 	movw	r1, #783	@ 0x30f
 80096ca:	4b23      	ldr	r3, [pc, #140]	@ (8009758 <__d2b+0xa8>)
 80096cc:	4823      	ldr	r0, [pc, #140]	@ (800975c <__d2b+0xac>)
 80096ce:	f7fd fa87 	bl	8006be0 <__assert_func>
 80096d2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80096d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80096da:	b10d      	cbz	r5, 80096e0 <__d2b+0x30>
 80096dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80096e0:	9301      	str	r3, [sp, #4]
 80096e2:	f1b8 0300 	subs.w	r3, r8, #0
 80096e6:	d024      	beq.n	8009732 <__d2b+0x82>
 80096e8:	4668      	mov	r0, sp
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	f7ff fd7f 	bl	80091ee <__lo0bits>
 80096f0:	e9dd 1200 	ldrd	r1, r2, [sp]
 80096f4:	b1d8      	cbz	r0, 800972e <__d2b+0x7e>
 80096f6:	f1c0 0320 	rsb	r3, r0, #32
 80096fa:	fa02 f303 	lsl.w	r3, r2, r3
 80096fe:	430b      	orrs	r3, r1
 8009700:	40c2      	lsrs	r2, r0
 8009702:	6163      	str	r3, [r4, #20]
 8009704:	9201      	str	r2, [sp, #4]
 8009706:	9b01      	ldr	r3, [sp, #4]
 8009708:	2b00      	cmp	r3, #0
 800970a:	bf0c      	ite	eq
 800970c:	2201      	moveq	r2, #1
 800970e:	2202      	movne	r2, #2
 8009710:	61a3      	str	r3, [r4, #24]
 8009712:	6122      	str	r2, [r4, #16]
 8009714:	b1ad      	cbz	r5, 8009742 <__d2b+0x92>
 8009716:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800971a:	4405      	add	r5, r0
 800971c:	6035      	str	r5, [r6, #0]
 800971e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009722:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009724:	6018      	str	r0, [r3, #0]
 8009726:	4620      	mov	r0, r4
 8009728:	b002      	add	sp, #8
 800972a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800972e:	6161      	str	r1, [r4, #20]
 8009730:	e7e9      	b.n	8009706 <__d2b+0x56>
 8009732:	a801      	add	r0, sp, #4
 8009734:	f7ff fd5b 	bl	80091ee <__lo0bits>
 8009738:	9b01      	ldr	r3, [sp, #4]
 800973a:	2201      	movs	r2, #1
 800973c:	6163      	str	r3, [r4, #20]
 800973e:	3020      	adds	r0, #32
 8009740:	e7e7      	b.n	8009712 <__d2b+0x62>
 8009742:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009746:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800974a:	6030      	str	r0, [r6, #0]
 800974c:	6918      	ldr	r0, [r3, #16]
 800974e:	f7ff fd2f 	bl	80091b0 <__hi0bits>
 8009752:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009756:	e7e4      	b.n	8009722 <__d2b+0x72>
 8009758:	0800a8d1 	.word	0x0800a8d1
 800975c:	0800a8e2 	.word	0x0800a8e2

08009760 <__swhatbuf_r>:
 8009760:	b570      	push	{r4, r5, r6, lr}
 8009762:	460c      	mov	r4, r1
 8009764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009768:	4615      	mov	r5, r2
 800976a:	2900      	cmp	r1, #0
 800976c:	461e      	mov	r6, r3
 800976e:	b096      	sub	sp, #88	@ 0x58
 8009770:	da0c      	bge.n	800978c <__swhatbuf_r+0x2c>
 8009772:	89a3      	ldrh	r3, [r4, #12]
 8009774:	2100      	movs	r1, #0
 8009776:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800977a:	bf14      	ite	ne
 800977c:	2340      	movne	r3, #64	@ 0x40
 800977e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009782:	2000      	movs	r0, #0
 8009784:	6031      	str	r1, [r6, #0]
 8009786:	602b      	str	r3, [r5, #0]
 8009788:	b016      	add	sp, #88	@ 0x58
 800978a:	bd70      	pop	{r4, r5, r6, pc}
 800978c:	466a      	mov	r2, sp
 800978e:	f000 f849 	bl	8009824 <_fstat_r>
 8009792:	2800      	cmp	r0, #0
 8009794:	dbed      	blt.n	8009772 <__swhatbuf_r+0x12>
 8009796:	9901      	ldr	r1, [sp, #4]
 8009798:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800979c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80097a0:	4259      	negs	r1, r3
 80097a2:	4159      	adcs	r1, r3
 80097a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80097a8:	e7eb      	b.n	8009782 <__swhatbuf_r+0x22>

080097aa <__smakebuf_r>:
 80097aa:	898b      	ldrh	r3, [r1, #12]
 80097ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80097ae:	079d      	lsls	r5, r3, #30
 80097b0:	4606      	mov	r6, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	d507      	bpl.n	80097c6 <__smakebuf_r+0x1c>
 80097b6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80097ba:	6023      	str	r3, [r4, #0]
 80097bc:	6123      	str	r3, [r4, #16]
 80097be:	2301      	movs	r3, #1
 80097c0:	6163      	str	r3, [r4, #20]
 80097c2:	b003      	add	sp, #12
 80097c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097c6:	466a      	mov	r2, sp
 80097c8:	ab01      	add	r3, sp, #4
 80097ca:	f7ff ffc9 	bl	8009760 <__swhatbuf_r>
 80097ce:	9f00      	ldr	r7, [sp, #0]
 80097d0:	4605      	mov	r5, r0
 80097d2:	4639      	mov	r1, r7
 80097d4:	4630      	mov	r0, r6
 80097d6:	f7fd fa6f 	bl	8006cb8 <_malloc_r>
 80097da:	b948      	cbnz	r0, 80097f0 <__smakebuf_r+0x46>
 80097dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097e0:	059a      	lsls	r2, r3, #22
 80097e2:	d4ee      	bmi.n	80097c2 <__smakebuf_r+0x18>
 80097e4:	f023 0303 	bic.w	r3, r3, #3
 80097e8:	f043 0302 	orr.w	r3, r3, #2
 80097ec:	81a3      	strh	r3, [r4, #12]
 80097ee:	e7e2      	b.n	80097b6 <__smakebuf_r+0xc>
 80097f0:	89a3      	ldrh	r3, [r4, #12]
 80097f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80097f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097fa:	81a3      	strh	r3, [r4, #12]
 80097fc:	9b01      	ldr	r3, [sp, #4]
 80097fe:	6020      	str	r0, [r4, #0]
 8009800:	b15b      	cbz	r3, 800981a <__smakebuf_r+0x70>
 8009802:	4630      	mov	r0, r6
 8009804:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009808:	f000 f81e 	bl	8009848 <_isatty_r>
 800980c:	b128      	cbz	r0, 800981a <__smakebuf_r+0x70>
 800980e:	89a3      	ldrh	r3, [r4, #12]
 8009810:	f023 0303 	bic.w	r3, r3, #3
 8009814:	f043 0301 	orr.w	r3, r3, #1
 8009818:	81a3      	strh	r3, [r4, #12]
 800981a:	89a3      	ldrh	r3, [r4, #12]
 800981c:	431d      	orrs	r5, r3
 800981e:	81a5      	strh	r5, [r4, #12]
 8009820:	e7cf      	b.n	80097c2 <__smakebuf_r+0x18>
	...

08009824 <_fstat_r>:
 8009824:	b538      	push	{r3, r4, r5, lr}
 8009826:	2300      	movs	r3, #0
 8009828:	4d06      	ldr	r5, [pc, #24]	@ (8009844 <_fstat_r+0x20>)
 800982a:	4604      	mov	r4, r0
 800982c:	4608      	mov	r0, r1
 800982e:	4611      	mov	r1, r2
 8009830:	602b      	str	r3, [r5, #0]
 8009832:	f7f7 fd2d 	bl	8001290 <_fstat>
 8009836:	1c43      	adds	r3, r0, #1
 8009838:	d102      	bne.n	8009840 <_fstat_r+0x1c>
 800983a:	682b      	ldr	r3, [r5, #0]
 800983c:	b103      	cbz	r3, 8009840 <_fstat_r+0x1c>
 800983e:	6023      	str	r3, [r4, #0]
 8009840:	bd38      	pop	{r3, r4, r5, pc}
 8009842:	bf00      	nop
 8009844:	20000424 	.word	0x20000424

08009848 <_isatty_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	2300      	movs	r3, #0
 800984c:	4d05      	ldr	r5, [pc, #20]	@ (8009864 <_isatty_r+0x1c>)
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	602b      	str	r3, [r5, #0]
 8009854:	f7f7 fd2b 	bl	80012ae <_isatty>
 8009858:	1c43      	adds	r3, r0, #1
 800985a:	d102      	bne.n	8009862 <_isatty_r+0x1a>
 800985c:	682b      	ldr	r3, [r5, #0]
 800985e:	b103      	cbz	r3, 8009862 <_isatty_r+0x1a>
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	bd38      	pop	{r3, r4, r5, pc}
 8009864:	20000424 	.word	0x20000424

08009868 <__ascii_mbtowc>:
 8009868:	b082      	sub	sp, #8
 800986a:	b901      	cbnz	r1, 800986e <__ascii_mbtowc+0x6>
 800986c:	a901      	add	r1, sp, #4
 800986e:	b142      	cbz	r2, 8009882 <__ascii_mbtowc+0x1a>
 8009870:	b14b      	cbz	r3, 8009886 <__ascii_mbtowc+0x1e>
 8009872:	7813      	ldrb	r3, [r2, #0]
 8009874:	600b      	str	r3, [r1, #0]
 8009876:	7812      	ldrb	r2, [r2, #0]
 8009878:	1e10      	subs	r0, r2, #0
 800987a:	bf18      	it	ne
 800987c:	2001      	movne	r0, #1
 800987e:	b002      	add	sp, #8
 8009880:	4770      	bx	lr
 8009882:	4610      	mov	r0, r2
 8009884:	e7fb      	b.n	800987e <__ascii_mbtowc+0x16>
 8009886:	f06f 0001 	mvn.w	r0, #1
 800988a:	e7f8      	b.n	800987e <__ascii_mbtowc+0x16>

0800988c <__ascii_wctomb>:
 800988c:	4603      	mov	r3, r0
 800988e:	4608      	mov	r0, r1
 8009890:	b141      	cbz	r1, 80098a4 <__ascii_wctomb+0x18>
 8009892:	2aff      	cmp	r2, #255	@ 0xff
 8009894:	d904      	bls.n	80098a0 <__ascii_wctomb+0x14>
 8009896:	228a      	movs	r2, #138	@ 0x8a
 8009898:	f04f 30ff 	mov.w	r0, #4294967295
 800989c:	601a      	str	r2, [r3, #0]
 800989e:	4770      	bx	lr
 80098a0:	2001      	movs	r0, #1
 80098a2:	700a      	strb	r2, [r1, #0]
 80098a4:	4770      	bx	lr
	...

080098a8 <_init>:
 80098a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098aa:	bf00      	nop
 80098ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ae:	bc08      	pop	{r3}
 80098b0:	469e      	mov	lr, r3
 80098b2:	4770      	bx	lr

080098b4 <_fini>:
 80098b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098b6:	bf00      	nop
 80098b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098ba:	bc08      	pop	{r3}
 80098bc:	469e      	mov	lr, r3
 80098be:	4770      	bx	lr
