
BluePill_generic_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009bc0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005a4  08009cd0  08009cd0  0000acd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a274  0800a274  0000c1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a274  0800a274  0000b274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a27c  0800a27c  0000c1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a27c  0800a27c  0000b27c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000008  0800a284  0800a284  0000b284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800a28c  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002e4  200001d4  0800a460  0000c1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  0800a460  0000c4b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b10e  00000000  00000000  0000c1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000578d  00000000  00000000  0002730b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  0002ca98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  0002dca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001f2eb  00000000  00000000  0002ea4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ca28  00000000  00000000  0004dd3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097500  00000000  00000000  0006a762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00101c62  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005aac  00000000  00000000  00101ca8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  00107754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08009cb8 	.word	0x08009cb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08009cb8 	.word	0x08009cb8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	@ 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000cf6:	2afd      	cmp	r2, #253	@ 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	@ 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	@ 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	@ 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <__gesf2>:
 8000f44:	f04f 3cff 	mov.w	ip, #4294967295
 8000f48:	e006      	b.n	8000f58 <__cmpsf2+0x4>
 8000f4a:	bf00      	nop

08000f4c <__lesf2>:
 8000f4c:	f04f 0c01 	mov.w	ip, #1
 8000f50:	e002      	b.n	8000f58 <__cmpsf2+0x4>
 8000f52:	bf00      	nop

08000f54 <__cmpsf2>:
 8000f54:	f04f 0c01 	mov.w	ip, #1
 8000f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000f5c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000f64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f68:	bf18      	it	ne
 8000f6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000f6e:	d011      	beq.n	8000f94 <__cmpsf2+0x40>
 8000f70:	b001      	add	sp, #4
 8000f72:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000f76:	bf18      	it	ne
 8000f78:	ea90 0f01 	teqne	r0, r1
 8000f7c:	bf58      	it	pl
 8000f7e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000f82:	bf88      	it	hi
 8000f84:	17c8      	asrhi	r0, r1, #31
 8000f86:	bf38      	it	cc
 8000f88:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000f8c:	bf18      	it	ne
 8000f8e:	f040 0001 	orrne.w	r0, r0, #1
 8000f92:	4770      	bx	lr
 8000f94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000f98:	d102      	bne.n	8000fa0 <__cmpsf2+0x4c>
 8000f9a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000f9e:	d105      	bne.n	8000fac <__cmpsf2+0x58>
 8000fa0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000fa4:	d1e4      	bne.n	8000f70 <__cmpsf2+0x1c>
 8000fa6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000faa:	d0e1      	beq.n	8000f70 <__cmpsf2+0x1c>
 8000fac:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <__aeabi_cfrcmple>:
 8000fb4:	4684      	mov	ip, r0
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	4661      	mov	r1, ip
 8000fba:	e7ff      	b.n	8000fbc <__aeabi_cfcmpeq>

08000fbc <__aeabi_cfcmpeq>:
 8000fbc:	b50f      	push	{r0, r1, r2, r3, lr}
 8000fbe:	f7ff ffc9 	bl	8000f54 <__cmpsf2>
 8000fc2:	2800      	cmp	r0, #0
 8000fc4:	bf48      	it	mi
 8000fc6:	f110 0f00 	cmnmi.w	r0, #0
 8000fca:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000fcc <__aeabi_fcmpeq>:
 8000fcc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fd0:	f7ff fff4 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fd4:	bf0c      	ite	eq
 8000fd6:	2001      	moveq	r0, #1
 8000fd8:	2000      	movne	r0, #0
 8000fda:	f85d fb08 	ldr.w	pc, [sp], #8
 8000fde:	bf00      	nop

08000fe0 <__aeabi_fcmplt>:
 8000fe0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000fe4:	f7ff ffea 	bl	8000fbc <__aeabi_cfcmpeq>
 8000fe8:	bf34      	ite	cc
 8000fea:	2001      	movcc	r0, #1
 8000fec:	2000      	movcs	r0, #0
 8000fee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ff2:	bf00      	nop

08000ff4 <__aeabi_fcmple>:
 8000ff4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ff8:	f7ff ffe0 	bl	8000fbc <__aeabi_cfcmpeq>
 8000ffc:	bf94      	ite	ls
 8000ffe:	2001      	movls	r0, #1
 8001000:	2000      	movhi	r0, #0
 8001002:	f85d fb08 	ldr.w	pc, [sp], #8
 8001006:	bf00      	nop

08001008 <__aeabi_fcmpge>:
 8001008:	f84d ed08 	str.w	lr, [sp, #-8]!
 800100c:	f7ff ffd2 	bl	8000fb4 <__aeabi_cfrcmple>
 8001010:	bf94      	ite	ls
 8001012:	2001      	movls	r0, #1
 8001014:	2000      	movhi	r0, #0
 8001016:	f85d fb08 	ldr.w	pc, [sp], #8
 800101a:	bf00      	nop

0800101c <__aeabi_fcmpgt>:
 800101c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001020:	f7ff ffc8 	bl	8000fb4 <__aeabi_cfrcmple>
 8001024:	bf34      	ite	cc
 8001026:	2001      	movcc	r0, #1
 8001028:	2000      	movcs	r0, #0
 800102a:	f85d fb08 	ldr.w	pc, [sp], #8
 800102e:	bf00      	nop

08001030 <__aeabi_fcmpun>:
 8001030:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001034:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001038:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800103c:	d102      	bne.n	8001044 <__aeabi_fcmpun+0x14>
 800103e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001042:	d108      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001044:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001048:	d102      	bne.n	8001050 <__aeabi_fcmpun+0x20>
 800104a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800104e:	d102      	bne.n	8001056 <__aeabi_fcmpun+0x26>
 8001050:	f04f 0000 	mov.w	r0, #0
 8001054:	4770      	bx	lr
 8001056:	f04f 0001 	mov.w	r0, #1
 800105a:	4770      	bx	lr

0800105c <__aeabi_f2iz>:
 800105c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001060:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8001064:	d30f      	bcc.n	8001086 <__aeabi_f2iz+0x2a>
 8001066:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800106a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800106e:	d90d      	bls.n	800108c <__aeabi_f2iz+0x30>
 8001070:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001074:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8001078:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800107c:	fa23 f002 	lsr.w	r0, r3, r2
 8001080:	bf18      	it	ne
 8001082:	4240      	negne	r0, r0
 8001084:	4770      	bx	lr
 8001086:	f04f 0000 	mov.w	r0, #0
 800108a:	4770      	bx	lr
 800108c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8001090:	d101      	bne.n	8001096 <__aeabi_f2iz+0x3a>
 8001092:	0242      	lsls	r2, r0, #9
 8001094:	d105      	bne.n	80010a2 <__aeabi_f2iz+0x46>
 8001096:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800109a:	bf08      	it	eq
 800109c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010a0:	4770      	bx	lr
 80010a2:	f04f 0000 	mov.w	r0, #0
 80010a6:	4770      	bx	lr

080010a8 <__aeabi_f2uiz>:
 80010a8:	0042      	lsls	r2, r0, #1
 80010aa:	d20e      	bcs.n	80010ca <__aeabi_f2uiz+0x22>
 80010ac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80010b0:	d30b      	bcc.n	80010ca <__aeabi_f2uiz+0x22>
 80010b2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010b6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010ba:	d409      	bmi.n	80010d0 <__aeabi_f2uiz+0x28>
 80010bc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010c0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010c4:	fa23 f002 	lsr.w	r0, r3, r2
 80010c8:	4770      	bx	lr
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4770      	bx	lr
 80010d0:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010d4:	d101      	bne.n	80010da <__aeabi_f2uiz+0x32>
 80010d6:	0242      	lsls	r2, r0, #9
 80010d8:	d102      	bne.n	80010e0 <__aeabi_f2uiz+0x38>
 80010da:	f04f 30ff 	mov.w	r0, #4294967295
 80010de:	4770      	bx	lr
 80010e0:	f04f 0000 	mov.w	r0, #0
 80010e4:	4770      	bx	lr
 80010e6:	bf00      	nop

080010e8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010f8:	4b58      	ldr	r3, [pc, #352]	@ (800125c <MX_ADC1_Init+0x174>)
 80010fa:	4a59      	ldr	r2, [pc, #356]	@ (8001260 <MX_ADC1_Init+0x178>)
 80010fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010fe:	4b57      	ldr	r3, [pc, #348]	@ (800125c <MX_ADC1_Init+0x174>)
 8001100:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001104:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001106:	4b55      	ldr	r3, [pc, #340]	@ (800125c <MX_ADC1_Init+0x174>)
 8001108:	2201      	movs	r2, #1
 800110a:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800110c:	4b53      	ldr	r3, [pc, #332]	@ (800125c <MX_ADC1_Init+0x174>)
 800110e:	2200      	movs	r2, #0
 8001110:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001112:	4b52      	ldr	r3, [pc, #328]	@ (800125c <MX_ADC1_Init+0x174>)
 8001114:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001118:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800111a:	4b50      	ldr	r3, [pc, #320]	@ (800125c <MX_ADC1_Init+0x174>)
 800111c:	2200      	movs	r2, #0
 800111e:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 10;
 8001120:	4b4e      	ldr	r3, [pc, #312]	@ (800125c <MX_ADC1_Init+0x174>)
 8001122:	220a      	movs	r2, #10
 8001124:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001126:	484d      	ldr	r0, [pc, #308]	@ (800125c <MX_ADC1_Init+0x174>)
 8001128:	f000 fcc6 	bl	8001ab8 <HAL_ADC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 8001132:	f000 fa1c 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113a:	2301      	movs	r3, #1
 800113c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001142:	1d3b      	adds	r3, r7, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4845      	ldr	r0, [pc, #276]	@ (800125c <MX_ADC1_Init+0x174>)
 8001148:	f000 fe7e 	bl	8001e48 <HAL_ADC_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001152:	f000 fa0c 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001156:	2301      	movs	r3, #1
 8001158:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800115a:	2302      	movs	r3, #2
 800115c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	483e      	ldr	r0, [pc, #248]	@ (800125c <MX_ADC1_Init+0x174>)
 8001164:	f000 fe70 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 800116e:	f000 f9fe 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001172:	2302      	movs	r3, #2
 8001174:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001176:	2303      	movs	r3, #3
 8001178:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800117a:	1d3b      	adds	r3, r7, #4
 800117c:	4619      	mov	r1, r3
 800117e:	4837      	ldr	r0, [pc, #220]	@ (800125c <MX_ADC1_Init+0x174>)
 8001180:	f000 fe62 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 800118a:	f000 f9f0 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800118e:	2303      	movs	r3, #3
 8001190:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001192:	2304      	movs	r3, #4
 8001194:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4830      	ldr	r0, [pc, #192]	@ (800125c <MX_ADC1_Init+0x174>)
 800119c:	f000 fe54 	bl	8001e48 <HAL_ADC_ConfigChannel>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_ADC1_Init+0xc2>
  {
    Error_Handler();
 80011a6:	f000 f9e2 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011aa:	2304      	movs	r3, #4
 80011ac:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80011ae:	2305      	movs	r3, #5
 80011b0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b2:	1d3b      	adds	r3, r7, #4
 80011b4:	4619      	mov	r1, r3
 80011b6:	4829      	ldr	r0, [pc, #164]	@ (800125c <MX_ADC1_Init+0x174>)
 80011b8:	f000 fe46 	bl	8001e48 <HAL_ADC_ConfigChannel>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80011c2:	f000 f9d4 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011c6:	2305      	movs	r3, #5
 80011c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80011ca:	2306      	movs	r3, #6
 80011cc:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ce:	1d3b      	adds	r3, r7, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4822      	ldr	r0, [pc, #136]	@ (800125c <MX_ADC1_Init+0x174>)
 80011d4:	f000 fe38 	bl	8001e48 <HAL_ADC_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_ADC1_Init+0xfa>
  {
    Error_Handler();
 80011de:	f000 f9c6 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80011e2:	2306      	movs	r3, #6
 80011e4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 80011e6:	2307      	movs	r3, #7
 80011e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011ea:	1d3b      	adds	r3, r7, #4
 80011ec:	4619      	mov	r1, r3
 80011ee:	481b      	ldr	r0, [pc, #108]	@ (800125c <MX_ADC1_Init+0x174>)
 80011f0:	f000 fe2a 	bl	8001e48 <HAL_ADC_ConfigChannel>
 80011f4:	4603      	mov	r3, r0
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d001      	beq.n	80011fe <MX_ADC1_Init+0x116>
  {
    Error_Handler();
 80011fa:	f000 f9b8 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80011fe:	2307      	movs	r3, #7
 8001200:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001202:	2308      	movs	r3, #8
 8001204:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001206:	1d3b      	adds	r3, r7, #4
 8001208:	4619      	mov	r1, r3
 800120a:	4814      	ldr	r0, [pc, #80]	@ (800125c <MX_ADC1_Init+0x174>)
 800120c:	f000 fe1c 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC1_Init+0x132>
  {
    Error_Handler();
 8001216:	f000 f9aa 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800121a:	2308      	movs	r3, #8
 800121c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_9;
 800121e:	2309      	movs	r3, #9
 8001220:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	4619      	mov	r1, r3
 8001226:	480d      	ldr	r0, [pc, #52]	@ (800125c <MX_ADC1_Init+0x174>)
 8001228:	f000 fe0e 	bl	8001e48 <HAL_ADC_ConfigChannel>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_ADC1_Init+0x14e>
  {
    Error_Handler();
 8001232:	f000 f99c 	bl	800156e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001236:	2309      	movs	r3, #9
 8001238:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_10;
 800123a:	230a      	movs	r3, #10
 800123c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800123e:	1d3b      	adds	r3, r7, #4
 8001240:	4619      	mov	r1, r3
 8001242:	4806      	ldr	r0, [pc, #24]	@ (800125c <MX_ADC1_Init+0x174>)
 8001244:	f000 fe00 	bl	8001e48 <HAL_ADC_ConfigChannel>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <MX_ADC1_Init+0x16a>
  {
    Error_Handler();
 800124e:	f000 f98e 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001f0 	.word	0x200001f0
 8001260:	40012400 	.word	0x40012400

08001264 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	@ 0x28
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0318 	add.w	r3, r7, #24
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a33      	ldr	r2, [pc, #204]	@ (800134c <HAL_ADC_MspInit+0xe8>)
 8001280:	4293      	cmp	r3, r2
 8001282:	d15f      	bne.n	8001344 <HAL_ADC_MspInit+0xe0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001284:	4b32      	ldr	r3, [pc, #200]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 8001286:	699b      	ldr	r3, [r3, #24]
 8001288:	4a31      	ldr	r2, [pc, #196]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 800128a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800128e:	6193      	str	r3, [r2, #24]
 8001290:	4b2f      	ldr	r3, [pc, #188]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 8001292:	699b      	ldr	r3, [r3, #24]
 8001294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129c:	4b2c      	ldr	r3, [pc, #176]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 800129e:	699b      	ldr	r3, [r3, #24]
 80012a0:	4a2b      	ldr	r2, [pc, #172]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012a2:	f043 0304 	orr.w	r3, r3, #4
 80012a6:	6193      	str	r3, [r2, #24]
 80012a8:	4b29      	ldr	r3, [pc, #164]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	613b      	str	r3, [r7, #16]
 80012b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b4:	4b26      	ldr	r3, [pc, #152]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	4a25      	ldr	r2, [pc, #148]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012ba:	f043 0308 	orr.w	r3, r3, #8
 80012be:	6193      	str	r3, [r2, #24]
 80012c0:	4b23      	ldr	r3, [pc, #140]	@ (8001350 <HAL_ADC_MspInit+0xec>)
 80012c2:	699b      	ldr	r3, [r3, #24]
 80012c4:	f003 0308 	and.w	r3, r3, #8
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80012cc:	23ff      	movs	r3, #255	@ 0xff
 80012ce:	61bb      	str	r3, [r7, #24]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0318 	add.w	r3, r7, #24
 80012d8:	4619      	mov	r1, r3
 80012da:	481e      	ldr	r0, [pc, #120]	@ (8001354 <HAL_ADC_MspInit+0xf0>)
 80012dc:	f001 fb68 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012e0:	2303      	movs	r3, #3
 80012e2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012e4:	2303      	movs	r3, #3
 80012e6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e8:	f107 0318 	add.w	r3, r7, #24
 80012ec:	4619      	mov	r1, r3
 80012ee:	481a      	ldr	r0, [pc, #104]	@ (8001358 <HAL_ADC_MspInit+0xf4>)
 80012f0:	f001 fb5e 	bl	80029b0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 80012f6:	4a1a      	ldr	r2, [pc, #104]	@ (8001360 <HAL_ADC_MspInit+0xfc>)
 80012f8:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012fa:	4b18      	ldr	r3, [pc, #96]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 80012fc:	2200      	movs	r2, #0
 80012fe:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001300:	4b16      	ldr	r3, [pc, #88]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001306:	4b15      	ldr	r3, [pc, #84]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001308:	2280      	movs	r2, #128	@ 0x80
 800130a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800130c:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800130e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001312:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001314:	4b11      	ldr	r3, [pc, #68]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001316:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800131a:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800131c:	4b0f      	ldr	r3, [pc, #60]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800131e:	2220      	movs	r2, #32
 8001320:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001322:	4b0e      	ldr	r3, [pc, #56]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001324:	2200      	movs	r2, #0
 8001326:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001328:	480c      	ldr	r0, [pc, #48]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800132a:	f001 f895 	bl	8002458 <HAL_DMA_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <HAL_ADC_MspInit+0xd4>
    {
      Error_Handler();
 8001334:	f000 f91b 	bl	800156e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	4a08      	ldr	r2, [pc, #32]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 800133c:	621a      	str	r2, [r3, #32]
 800133e:	4a07      	ldr	r2, [pc, #28]	@ (800135c <HAL_ADC_MspInit+0xf8>)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001344:	bf00      	nop
 8001346:	3728      	adds	r7, #40	@ 0x28
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}
 800134c:	40012400 	.word	0x40012400
 8001350:	40021000 	.word	0x40021000
 8001354:	40010800 	.word	0x40010800
 8001358:	40010c00 	.word	0x40010c00
 800135c:	20000220 	.word	0x20000220
 8001360:	40020008 	.word	0x40020008

08001364 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800136a:	4b14      	ldr	r3, [pc, #80]	@ (80013bc <MX_DMA_Init+0x58>)
 800136c:	695b      	ldr	r3, [r3, #20]
 800136e:	4a13      	ldr	r2, [pc, #76]	@ (80013bc <MX_DMA_Init+0x58>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6153      	str	r3, [r2, #20]
 8001376:	4b11      	ldr	r3, [pc, #68]	@ (80013bc <MX_DMA_Init+0x58>)
 8001378:	695b      	ldr	r3, [r3, #20]
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	607b      	str	r3, [r7, #4]
 8001380:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001382:	2200      	movs	r2, #0
 8001384:	2100      	movs	r1, #0
 8001386:	200b      	movs	r0, #11
 8001388:	f001 f82f 	bl	80023ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800138c:	200b      	movs	r0, #11
 800138e:	f001 f848 	bl	8002422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8001392:	2200      	movs	r2, #0
 8001394:	2100      	movs	r1, #0
 8001396:	200e      	movs	r0, #14
 8001398:	f001 f827 	bl	80023ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 800139c:	200e      	movs	r0, #14
 800139e:	f001 f840 	bl	8002422 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	200f      	movs	r0, #15
 80013a8:	f001 f81f 	bl	80023ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80013ac:	200f      	movs	r0, #15
 80013ae:	f001 f838 	bl	8002422 <HAL_NVIC_EnableIRQ>

}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40021000 	.word	0x40021000

080013c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b088      	sub	sp, #32
 80013c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d4:	4b2a      	ldr	r3, [pc, #168]	@ (8001480 <MX_GPIO_Init+0xc0>)
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	4a29      	ldr	r2, [pc, #164]	@ (8001480 <MX_GPIO_Init+0xc0>)
 80013da:	f043 0310 	orr.w	r3, r3, #16
 80013de:	6193      	str	r3, [r2, #24]
 80013e0:	4b27      	ldr	r3, [pc, #156]	@ (8001480 <MX_GPIO_Init+0xc0>)
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	60fb      	str	r3, [r7, #12]
 80013ea:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ec:	4b24      	ldr	r3, [pc, #144]	@ (8001480 <MX_GPIO_Init+0xc0>)
 80013ee:	699b      	ldr	r3, [r3, #24]
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <MX_GPIO_Init+0xc0>)
 80013f2:	f043 0320 	orr.w	r3, r3, #32
 80013f6:	6193      	str	r3, [r2, #24]
 80013f8:	4b21      	ldr	r3, [pc, #132]	@ (8001480 <MX_GPIO_Init+0xc0>)
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	f003 0320 	and.w	r3, r3, #32
 8001400:	60bb      	str	r3, [r7, #8]
 8001402:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001404:	4b1e      	ldr	r3, [pc, #120]	@ (8001480 <MX_GPIO_Init+0xc0>)
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	4a1d      	ldr	r2, [pc, #116]	@ (8001480 <MX_GPIO_Init+0xc0>)
 800140a:	f043 0304 	orr.w	r3, r3, #4
 800140e:	6193      	str	r3, [r2, #24]
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_GPIO_Init+0xc0>)
 8001412:	699b      	ldr	r3, [r3, #24]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	607b      	str	r3, [r7, #4]
 800141a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_GPIO_Init+0xc0>)
 800141e:	699b      	ldr	r3, [r3, #24]
 8001420:	4a17      	ldr	r2, [pc, #92]	@ (8001480 <MX_GPIO_Init+0xc0>)
 8001422:	f043 0308 	orr.w	r3, r3, #8
 8001426:	6193      	str	r3, [r2, #24]
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_GPIO_Init+0xc0>)
 800142a:	699b      	ldr	r3, [r3, #24]
 800142c:	f003 0308 	and.w	r3, r3, #8
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8001434:	2200      	movs	r2, #0
 8001436:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800143a:	4812      	ldr	r0, [pc, #72]	@ (8001484 <MX_GPIO_Init+0xc4>)
 800143c:	f001 fc3c 	bl	8002cb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8001440:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2302      	movs	r3, #2
 8001450:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8001452:	f107 0310 	add.w	r3, r7, #16
 8001456:	4619      	mov	r1, r3
 8001458:	480a      	ldr	r0, [pc, #40]	@ (8001484 <MX_GPIO_Init+0xc4>)
 800145a:	f001 faa9 	bl	80029b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ggggggg_Pin|hhhhhhhh_Pin;
 800145e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001464:	4b08      	ldr	r3, [pc, #32]	@ (8001488 <MX_GPIO_Init+0xc8>)
 8001466:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800146c:	f107 0310 	add.w	r3, r7, #16
 8001470:	4619      	mov	r1, r3
 8001472:	4806      	ldr	r0, [pc, #24]	@ (800148c <MX_GPIO_Init+0xcc>)
 8001474:	f001 fa9c 	bl	80029b0 <HAL_GPIO_Init>

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40021000 	.word	0x40021000
 8001484:	40011000 	.word	0x40011000
 8001488:	10110000 	.word	0x10110000
 800148c:	40010c00 	.word	0x40010c00

08001490 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001494:	f000 faae 	bl	80019f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001498:	f000 f80c 	bl	80014b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800149c:	f7ff ff90 	bl	80013c0 <MX_GPIO_Init>
  MX_DMA_Init();
 80014a0:	f7ff ff60 	bl	8001364 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80014a4:	f000 f9ac 	bl	8001800 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 80014a8:	f7ff fe1e 	bl	80010e8 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  app_main();
 80014ac:	f003 fbaa 	bl	8004c04 <app_main>
  while (1)
 80014b0:	bf00      	nop
 80014b2:	e7fd      	b.n	80014b0 <main+0x20>

080014b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b094      	sub	sp, #80	@ 0x50
 80014b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014be:	2228      	movs	r2, #40	@ 0x28
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f007 f84a 	bl	800855c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014c8:	f107 0314 	add.w	r3, r7, #20
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014d8:	1d3b      	adds	r3, r7, #4
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014e4:	2301      	movs	r3, #1
 80014e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014f2:	2301      	movs	r3, #1
 80014f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014f6:	2302      	movs	r3, #2
 80014f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001500:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001504:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001506:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800150a:	4618      	mov	r0, r3
 800150c:	f001 fc06 	bl	8002d1c <HAL_RCC_OscConfig>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001516:	f000 f82a 	bl	800156e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	230f      	movs	r3, #15
 800151c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	2302      	movs	r3, #2
 8001520:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001526:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800152a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800152c:	2300      	movs	r3, #0
 800152e:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001530:	f107 0314 	add.w	r3, r7, #20
 8001534:	2102      	movs	r1, #2
 8001536:	4618      	mov	r0, r3
 8001538:	f001 fe72 	bl	8003220 <HAL_RCC_ClockConfig>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8001542:	f000 f814 	bl	800156e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001546:	2302      	movs	r3, #2
 8001548:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800154a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800154e:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001550:	1d3b      	adds	r3, r7, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f002 f818 	bl	8003588 <HAL_RCCEx_PeriphCLKConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800155e:	f000 f806 	bl	800156e <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8001562:	f001 ff47 	bl	80033f4 <HAL_RCC_EnableCSS>
}
 8001566:	bf00      	nop
 8001568:	3750      	adds	r7, #80	@ 0x50
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800156e:	b480      	push	{r7}
 8001570:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001572:	b672      	cpsid	i
}
 8001574:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001576:	bf00      	nop
 8001578:	e7fd      	b.n	8001576 <Error_Handler+0x8>
	...

0800157c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	b085      	sub	sp, #20
 8001580:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001582:	4b15      	ldr	r3, [pc, #84]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001584:	699b      	ldr	r3, [r3, #24]
 8001586:	4a14      	ldr	r2, [pc, #80]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001588:	f043 0301 	orr.w	r3, r3, #1
 800158c:	6193      	str	r3, [r2, #24]
 800158e:	4b12      	ldr	r3, [pc, #72]	@ (80015d8 <HAL_MspInit+0x5c>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	60bb      	str	r3, [r7, #8]
 8001598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	@ (80015d8 <HAL_MspInit+0x5c>)
 800159c:	69db      	ldr	r3, [r3, #28]
 800159e:	4a0e      	ldr	r2, [pc, #56]	@ (80015d8 <HAL_MspInit+0x5c>)
 80015a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a4:	61d3      	str	r3, [r2, #28]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	@ (80015d8 <HAL_MspInit+0x5c>)
 80015a8:	69db      	ldr	r3, [r3, #28]
 80015aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015b2:	4b0a      	ldr	r3, [pc, #40]	@ (80015dc <HAL_MspInit+0x60>)
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	60fb      	str	r3, [r7, #12]
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	4a04      	ldr	r2, [pc, #16]	@ (80015dc <HAL_MspInit+0x60>)
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ce:	bf00      	nop
 80015d0:	3714      	adds	r7, #20
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bc80      	pop	{r7}
 80015d6:	4770      	bx	lr
 80015d8:	40021000 	.word	0x40021000
 80015dc:	40010000 	.word	0x40010000

080015e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80015e4:	f001 ff98 	bl	8003518 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <NMI_Handler+0x8>

080015ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <MemManage_Handler+0x4>

080015fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001600:	bf00      	nop
 8001602:	e7fd      	b.n	8001600 <BusFault_Handler+0x4>

08001604 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001608:	bf00      	nop
 800160a:	e7fd      	b.n	8001608 <UsageFault_Handler+0x4>

0800160c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr

08001618 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800161c:	bf00      	nop
 800161e:	46bd      	mov	sp, r7
 8001620:	bc80      	pop	{r7}
 8001622:	4770      	bx	lr

08001624 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001624:	b480      	push	{r7}
 8001626:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	bc80      	pop	{r7}
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 fa24 	bl	8001a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  HAL_SYSTICK_Callback();
 8001638:	f004 fd16 	bl	8006068 <HAL_SYSTICK_Callback>
  /* USER CODE END SysTick_IRQn 1 */
}
 800163c:	bf00      	nop
 800163e:	bd80      	pop	{r7, pc}

08001640 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001644:	4802      	ldr	r0, [pc, #8]	@ (8001650 <DMA1_Channel1_IRQHandler+0x10>)
 8001646:	f001 f875 	bl	8002734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000220 	.word	0x20000220

08001654 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001658:	4802      	ldr	r0, [pc, #8]	@ (8001664 <DMA1_Channel4_IRQHandler+0x10>)
 800165a:	f001 f86b 	bl	8002734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002f4 	.word	0x200002f4

08001668 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800166c:	4802      	ldr	r0, [pc, #8]	@ (8001678 <DMA1_Channel5_IRQHandler+0x10>)
 800166e:	f001 f861 	bl	8002734 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001672:	bf00      	nop
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	200002b0 	.word	0x200002b0

0800167c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001682:	4808      	ldr	r0, [pc, #32]	@ (80016a4 <USART1_IRQHandler+0x28>)
 8001684:	f002 fa42 	bl	8003b0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(&huart1);
 8001688:	4806      	ldr	r0, [pc, #24]	@ (80016a4 <USART1_IRQHandler+0x28>)
 800168a:	f005 fc93 	bl	8006fb4 <getContainerUartInstance>
 800168e:	6078      	str	r0, [r7, #4]
  if(uart_instance) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2b00      	cmp	r3, #0
 8001694:	d002      	beq.n	800169c <USART1_IRQHandler+0x20>
	  USER_UART_IRQHandler(uart_instance);
 8001696:	6878      	ldr	r0, [r7, #4]
 8001698:	f005 fb63 	bl	8006d62 <USER_UART_IRQHandler>
  }


  /* USER CODE END USART1_IRQn 1 */
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	20000268 	.word	0x20000268

080016a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016a8:	b480      	push	{r7}
 80016aa:	af00      	add	r7, sp, #0
  return 1;
 80016ac:	2301      	movs	r3, #1
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr

080016b6 <_kill>:

int _kill(int pid, int sig)
{
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b082      	sub	sp, #8
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	6078      	str	r0, [r7, #4]
 80016be:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80016c0:	f006 fff2 	bl	80086a8 <__errno>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2216      	movs	r2, #22
 80016c8:	601a      	str	r2, [r3, #0]
  return -1;
 80016ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}

080016d6 <_exit>:

void _exit (int status)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
 80016dc:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016de:	f04f 31ff 	mov.w	r1, #4294967295
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffe7 	bl	80016b6 <_kill>
  while (1) {}    /* Make sure we hang here */
 80016e8:	bf00      	nop
 80016ea:	e7fd      	b.n	80016e8 <_exit+0x12>

080016ec <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b086      	sub	sp, #24
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f8:	2300      	movs	r3, #0
 80016fa:	617b      	str	r3, [r7, #20]
 80016fc:	e00a      	b.n	8001714 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016fe:	f3af 8000 	nop.w
 8001702:	4601      	mov	r1, r0
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	1c5a      	adds	r2, r3, #1
 8001708:	60ba      	str	r2, [r7, #8]
 800170a:	b2ca      	uxtb	r2, r1
 800170c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	3301      	adds	r3, #1
 8001712:	617b      	str	r3, [r7, #20]
 8001714:	697a      	ldr	r2, [r7, #20]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	429a      	cmp	r2, r3
 800171a:	dbf0      	blt.n	80016fe <_read+0x12>
  }

  return len;
 800171c:	687b      	ldr	r3, [r7, #4]
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}

08001726 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001726:	b480      	push	{r7}
 8001728:	b083      	sub	sp, #12
 800172a:	af00      	add	r7, sp, #0
 800172c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800172e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001732:	4618      	mov	r0, r3
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr

0800173c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800174c:	605a      	str	r2, [r3, #4]
  return 0;
 800174e:	2300      	movs	r3, #0
}
 8001750:	4618      	mov	r0, r3
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr

0800175a <_isatty>:

int _isatty(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	bc80      	pop	{r7}
 800176c:	4770      	bx	lr

0800176e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800176e:	b480      	push	{r7}
 8001770:	b085      	sub	sp, #20
 8001772:	af00      	add	r7, sp, #0
 8001774:	60f8      	str	r0, [r7, #12]
 8001776:	60b9      	str	r1, [r7, #8]
 8001778:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	3714      	adds	r7, #20
 8001780:	46bd      	mov	sp, r7
 8001782:	bc80      	pop	{r7}
 8001784:	4770      	bx	lr
	...

08001788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b086      	sub	sp, #24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001790:	4a14      	ldr	r2, [pc, #80]	@ (80017e4 <_sbrk+0x5c>)
 8001792:	4b15      	ldr	r3, [pc, #84]	@ (80017e8 <_sbrk+0x60>)
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800179c:	4b13      	ldr	r3, [pc, #76]	@ (80017ec <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d102      	bne.n	80017aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <_sbrk+0x64>)
 80017a6:	4a12      	ldr	r2, [pc, #72]	@ (80017f0 <_sbrk+0x68>)
 80017a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017aa:	4b10      	ldr	r3, [pc, #64]	@ (80017ec <_sbrk+0x64>)
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	4413      	add	r3, r2
 80017b2:	693a      	ldr	r2, [r7, #16]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d207      	bcs.n	80017c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017b8:	f006 ff76 	bl	80086a8 <__errno>
 80017bc:	4603      	mov	r3, r0
 80017be:	220c      	movs	r2, #12
 80017c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c2:	f04f 33ff 	mov.w	r3, #4294967295
 80017c6:	e009      	b.n	80017dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017c8:	4b08      	ldr	r3, [pc, #32]	@ (80017ec <_sbrk+0x64>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017ce:	4b07      	ldr	r3, [pc, #28]	@ (80017ec <_sbrk+0x64>)
 80017d0:	681a      	ldr	r2, [r3, #0]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4413      	add	r3, r2
 80017d6:	4a05      	ldr	r2, [pc, #20]	@ (80017ec <_sbrk+0x64>)
 80017d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017da:	68fb      	ldr	r3, [r7, #12]
}
 80017dc:	4618      	mov	r0, r3
 80017de:	3718      	adds	r7, #24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	20005000 	.word	0x20005000
 80017e8:	00000400 	.word	0x00000400
 80017ec:	20000264 	.word	0x20000264
 80017f0:	200004b8 	.word	0x200004b8

080017f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017f8:	bf00      	nop
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr

08001800 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001804:	4b11      	ldr	r3, [pc, #68]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 8001806:	4a12      	ldr	r2, [pc, #72]	@ (8001850 <MX_USART1_UART_Init+0x50>)
 8001808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800180a:	4b10      	ldr	r3, [pc, #64]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 800180c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001812:	4b0e      	ldr	r3, [pc, #56]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 8001814:	2200      	movs	r2, #0
 8001816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 800181a:	2200      	movs	r2, #0
 800181c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001824:	4b09      	ldr	r3, [pc, #36]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 8001826:	220c      	movs	r2, #12
 8001828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800182a:	4b08      	ldr	r3, [pc, #32]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001830:	4b06      	ldr	r3, [pc, #24]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 8001832:	2200      	movs	r2, #0
 8001834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	@ (800184c <MX_USART1_UART_Init+0x4c>)
 8001838:	f001 ff5c 	bl	80036f4 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001842:	f7ff fe94 	bl	800156e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000268 	.word	0x20000268
 8001850:	40013800 	.word	0x40013800

08001854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800185c:	f107 0310 	add.w	r3, r7, #16
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a47      	ldr	r2, [pc, #284]	@ (800198c <HAL_UART_MspInit+0x138>)
 8001870:	4293      	cmp	r3, r2
 8001872:	f040 8086 	bne.w	8001982 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001876:	4b46      	ldr	r3, [pc, #280]	@ (8001990 <HAL_UART_MspInit+0x13c>)
 8001878:	699b      	ldr	r3, [r3, #24]
 800187a:	4a45      	ldr	r2, [pc, #276]	@ (8001990 <HAL_UART_MspInit+0x13c>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	6193      	str	r3, [r2, #24]
 8001882:	4b43      	ldr	r3, [pc, #268]	@ (8001990 <HAL_UART_MspInit+0x13c>)
 8001884:	699b      	ldr	r3, [r3, #24]
 8001886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	4b40      	ldr	r3, [pc, #256]	@ (8001990 <HAL_UART_MspInit+0x13c>)
 8001890:	699b      	ldr	r3, [r3, #24]
 8001892:	4a3f      	ldr	r2, [pc, #252]	@ (8001990 <HAL_UART_MspInit+0x13c>)
 8001894:	f043 0304 	orr.w	r3, r3, #4
 8001898:	6193      	str	r3, [r2, #24]
 800189a:	4b3d      	ldr	r3, [pc, #244]	@ (8001990 <HAL_UART_MspInit+0x13c>)
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	f003 0304 	and.w	r3, r3, #4
 80018a2:	60bb      	str	r3, [r7, #8]
 80018a4:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ac:	2302      	movs	r3, #2
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018b0:	2303      	movs	r3, #3
 80018b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f107 0310 	add.w	r3, r7, #16
 80018b8:	4619      	mov	r1, r3
 80018ba:	4836      	ldr	r0, [pc, #216]	@ (8001994 <HAL_UART_MspInit+0x140>)
 80018bc:	f001 f878 	bl	80029b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018c6:	2300      	movs	r3, #0
 80018c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ca:	2300      	movs	r3, #0
 80018cc:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018ce:	f107 0310 	add.w	r3, r7, #16
 80018d2:	4619      	mov	r1, r3
 80018d4:	482f      	ldr	r0, [pc, #188]	@ (8001994 <HAL_UART_MspInit+0x140>)
 80018d6:	f001 f86b 	bl	80029b0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 80018da:	4b2f      	ldr	r3, [pc, #188]	@ (8001998 <HAL_UART_MspInit+0x144>)
 80018dc:	4a2f      	ldr	r2, [pc, #188]	@ (800199c <HAL_UART_MspInit+0x148>)
 80018de:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001998 <HAL_UART_MspInit+0x144>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018e6:	4b2c      	ldr	r3, [pc, #176]	@ (8001998 <HAL_UART_MspInit+0x144>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018ec:	4b2a      	ldr	r3, [pc, #168]	@ (8001998 <HAL_UART_MspInit+0x144>)
 80018ee:	2280      	movs	r2, #128	@ 0x80
 80018f0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018f2:	4b29      	ldr	r3, [pc, #164]	@ (8001998 <HAL_UART_MspInit+0x144>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <HAL_UART_MspInit+0x144>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80018fe:	4b26      	ldr	r3, [pc, #152]	@ (8001998 <HAL_UART_MspInit+0x144>)
 8001900:	2200      	movs	r2, #0
 8001902:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <HAL_UART_MspInit+0x144>)
 8001906:	2200      	movs	r2, #0
 8001908:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800190a:	4823      	ldr	r0, [pc, #140]	@ (8001998 <HAL_UART_MspInit+0x144>)
 800190c:	f000 fda4 	bl	8002458 <HAL_DMA_Init>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 8001916:	f7ff fe2a 	bl	800156e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	4a1e      	ldr	r2, [pc, #120]	@ (8001998 <HAL_UART_MspInit+0x144>)
 800191e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001920:	4a1d      	ldr	r2, [pc, #116]	@ (8001998 <HAL_UART_MspInit+0x144>)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8001926:	4b1e      	ldr	r3, [pc, #120]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 8001928:	4a1e      	ldr	r2, [pc, #120]	@ (80019a4 <HAL_UART_MspInit+0x150>)
 800192a:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800192c:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 800192e:	2210      	movs	r2, #16
 8001930:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 8001934:	2200      	movs	r2, #0
 8001936:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001938:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 800193a:	2280      	movs	r2, #128	@ 0x80
 800193c:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800193e:	4b18      	ldr	r3, [pc, #96]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 8001946:	2200      	movs	r2, #0
 8001948:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800194a:	4b15      	ldr	r3, [pc, #84]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 800194c:	2200      	movs	r2, #0
 800194e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 8001952:	2200      	movs	r2, #0
 8001954:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001956:	4812      	ldr	r0, [pc, #72]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 8001958:	f000 fd7e 	bl	8002458 <HAL_DMA_Init>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 8001962:	f7ff fe04 	bl	800156e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a0d      	ldr	r2, [pc, #52]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 800196a:	639a      	str	r2, [r3, #56]	@ 0x38
 800196c:	4a0c      	ldr	r2, [pc, #48]	@ (80019a0 <HAL_UART_MspInit+0x14c>)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001972:	2200      	movs	r2, #0
 8001974:	2100      	movs	r1, #0
 8001976:	2025      	movs	r0, #37	@ 0x25
 8001978:	f000 fd37 	bl	80023ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800197c:	2025      	movs	r0, #37	@ 0x25
 800197e:	f000 fd50 	bl	8002422 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001982:	bf00      	nop
 8001984:	3720      	adds	r7, #32
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40013800 	.word	0x40013800
 8001990:	40021000 	.word	0x40021000
 8001994:	40010800 	.word	0x40010800
 8001998:	200002b0 	.word	0x200002b0
 800199c:	40020058 	.word	0x40020058
 80019a0:	200002f4 	.word	0x200002f4
 80019a4:	40020044 	.word	0x40020044

080019a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019a8:	f7ff ff24 	bl	80017f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ac:	480b      	ldr	r0, [pc, #44]	@ (80019dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ae:	490c      	ldr	r1, [pc, #48]	@ (80019e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019b0:	4a0c      	ldr	r2, [pc, #48]	@ (80019e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b4:	e002      	b.n	80019bc <LoopCopyDataInit>

080019b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ba:	3304      	adds	r3, #4

080019bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c0:	d3f9      	bcc.n	80019b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c2:	4a09      	ldr	r2, [pc, #36]	@ (80019e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019c4:	4c09      	ldr	r4, [pc, #36]	@ (80019ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019c8:	e001      	b.n	80019ce <LoopFillZerobss>

080019ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019cc:	3204      	adds	r2, #4

080019ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d0:	d3fb      	bcc.n	80019ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d2:	f006 fe6f 	bl	80086b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019d6:	f7ff fd5b 	bl	8001490 <main>
  bx lr
 80019da:	4770      	bx	lr
  ldr r0, =_sdata
 80019dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80019e4:	0800a28c 	.word	0x0800a28c
  ldr r2, =_sbss
 80019e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80019ec:	200004b8 	.word	0x200004b8

080019f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019f0:	e7fe      	b.n	80019f0 <ADC1_2_IRQHandler>
	...

080019f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <HAL_Init+0x28>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a07      	ldr	r2, [pc, #28]	@ (8001a1c <HAL_Init+0x28>)
 80019fe:	f043 0310 	orr.w	r3, r3, #16
 8001a02:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 fce5 	bl	80023d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f808 	bl	8001a20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a10:	f7ff fdb4 	bl	800157c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	40022000 	.word	0x40022000

08001a20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <HAL_InitTick+0x54>)
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	4b12      	ldr	r3, [pc, #72]	@ (8001a78 <HAL_InitTick+0x58>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	4619      	mov	r1, r3
 8001a32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f000 fcfd 	bl	800243e <HAL_SYSTICK_Config>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e00e      	b.n	8001a6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b0f      	cmp	r3, #15
 8001a52:	d80a      	bhi.n	8001a6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a54:	2200      	movs	r2, #0
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	f04f 30ff 	mov.w	r0, #4294967295
 8001a5c:	f000 fcc5 	bl	80023ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a60:	4a06      	ldr	r2, [pc, #24]	@ (8001a7c <HAL_InitTick+0x5c>)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a66:	2300      	movs	r3, #0
 8001a68:	e000      	b.n	8001a6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3708      	adds	r7, #8
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	20000000 	.word	0x20000000
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	20000004 	.word	0x20000004

08001a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a84:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x1c>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	461a      	mov	r2, r3
 8001a8a:	4b05      	ldr	r3, [pc, #20]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4413      	add	r3, r2
 8001a90:	4a03      	ldr	r2, [pc, #12]	@ (8001aa0 <HAL_IncTick+0x20>)
 8001a92:	6013      	str	r3, [r2, #0]
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr
 8001a9c:	20000008 	.word	0x20000008
 8001aa0:	20000338 	.word	0x20000338

08001aa4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa8:	4b02      	ldr	r3, [pc, #8]	@ (8001ab4 <HAL_GetTick+0x10>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bc80      	pop	{r7}
 8001ab2:	4770      	bx	lr
 8001ab4:	20000338 	.word	0x20000338

08001ab8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b086      	sub	sp, #24
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d101      	bne.n	8001ada <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8001ad6:	2301      	movs	r3, #1
 8001ad8:	e0be      	b.n	8001c58 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d109      	bne.n	8001afc <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2200      	movs	r2, #0
 8001aec:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff fbb4 	bl	8001264 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 faf5 	bl	80020ec <ADC_ConversionStop_Disable>
 8001b02:	4603      	mov	r3, r0
 8001b04:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b0a:	f003 0310 	and.w	r3, r3, #16
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	f040 8099 	bne.w	8001c46 <HAL_ADC_Init+0x18e>
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	f040 8095 	bne.w	8001c46 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b20:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001b24:	f023 0302 	bic.w	r3, r3, #2
 8001b28:	f043 0202 	orr.w	r2, r3, #2
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b38:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	7b1b      	ldrb	r3, [r3, #12]
 8001b3e:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001b40:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001b42:	68ba      	ldr	r2, [r7, #8]
 8001b44:	4313      	orrs	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001b50:	d003      	beq.n	8001b5a <HAL_ADC_Init+0xa2>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d102      	bne.n	8001b60 <HAL_ADC_Init+0xa8>
 8001b5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001b5e:	e000      	b.n	8001b62 <HAL_ADC_Init+0xaa>
 8001b60:	2300      	movs	r3, #0
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	7d1b      	ldrb	r3, [r3, #20]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d119      	bne.n	8001ba4 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7b1b      	ldrb	r3, [r3, #12]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d109      	bne.n	8001b8c <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	699b      	ldr	r3, [r3, #24]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	035a      	lsls	r2, r3, #13
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	e00b      	b.n	8001ba4 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b90:	f043 0220 	orr.w	r2, r3, #32
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <HAL_ADC_Init+0x1a8>)
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6812      	ldr	r2, [r2, #0]
 8001bc6:	68b9      	ldr	r1, [r7, #8]
 8001bc8:	430b      	orrs	r3, r1
 8001bca:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001bd4:	d003      	beq.n	8001bde <HAL_ADC_Init+0x126>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d104      	bne.n	8001be8 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	3b01      	subs	r3, #1
 8001be4:	051b      	lsls	r3, r3, #20
 8001be6:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bee:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	68fa      	ldr	r2, [r7, #12]
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689a      	ldr	r2, [r3, #8]
 8001c02:	4b18      	ldr	r3, [pc, #96]	@ (8001c64 <HAL_ADC_Init+0x1ac>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	68ba      	ldr	r2, [r7, #8]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d10b      	bne.n	8001c24 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2200      	movs	r2, #0
 8001c10:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c16:	f023 0303 	bic.w	r3, r3, #3
 8001c1a:	f043 0201 	orr.w	r2, r3, #1
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c22:	e018      	b.n	8001c56 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c28:	f023 0312 	bic.w	r3, r3, #18
 8001c2c:	f043 0210 	orr.w	r2, r3, #16
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c38:	f043 0201 	orr.w	r2, r3, #1
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001c40:	2301      	movs	r3, #1
 8001c42:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001c44:	e007      	b.n	8001c56 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c4a:	f043 0210 	orr.w	r2, r3, #16
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3718      	adds	r7, #24
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	ffe1f7fd 	.word	0xffe1f7fd
 8001c64:	ff1f0efe 	.word	0xff1f0efe

08001c68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a64      	ldr	r2, [pc, #400]	@ (8001e10 <HAL_ADC_Start_DMA+0x1a8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d004      	beq.n	8001c8c <HAL_ADC_Start_DMA+0x24>
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a63      	ldr	r2, [pc, #396]	@ (8001e14 <HAL_ADC_Start_DMA+0x1ac>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d106      	bne.n	8001c9a <HAL_ADC_Start_DMA+0x32>
 8001c8c:	4b60      	ldr	r3, [pc, #384]	@ (8001e10 <HAL_ADC_Start_DMA+0x1a8>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	f040 80b3 	bne.w	8001e00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d101      	bne.n	8001ca8 <HAL_ADC_Start_DMA+0x40>
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	e0ae      	b.n	8001e06 <HAL_ADC_Start_DMA+0x19e>
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cb0:	68f8      	ldr	r0, [r7, #12]
 8001cb2:	f000 f9c1 	bl	8002038 <ADC_Enable>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001cba:	7dfb      	ldrb	r3, [r7, #23]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f040 809a 	bne.w	8001df6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001cca:	f023 0301 	bic.w	r3, r3, #1
 8001cce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4e      	ldr	r2, [pc, #312]	@ (8001e14 <HAL_ADC_Start_DMA+0x1ac>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d105      	bne.n	8001cec <HAL_ADC_Start_DMA+0x84>
 8001ce0:	4b4b      	ldr	r3, [pc, #300]	@ (8001e10 <HAL_ADC_Start_DMA+0x1a8>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d115      	bne.n	8001d18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d026      	beq.n	8001d54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d16:	e01d      	b.n	8001d54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a39      	ldr	r2, [pc, #228]	@ (8001e10 <HAL_ADC_Start_DMA+0x1a8>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d004      	beq.n	8001d38 <HAL_ADC_Start_DMA+0xd0>
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a38      	ldr	r2, [pc, #224]	@ (8001e14 <HAL_ADC_Start_DMA+0x1ac>)
 8001d34:	4293      	cmp	r3, r2
 8001d36:	d10d      	bne.n	8001d54 <HAL_ADC_Start_DMA+0xec>
 8001d38:	4b35      	ldr	r3, [pc, #212]	@ (8001e10 <HAL_ADC_Start_DMA+0x1a8>)
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d007      	beq.n	8001d54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001d4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d64:	f023 0206 	bic.w	r2, r3, #6
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	4a25      	ldr	r2, [pc, #148]	@ (8001e18 <HAL_ADC_Start_DMA+0x1b0>)
 8001d82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	4a24      	ldr	r2, [pc, #144]	@ (8001e1c <HAL_ADC_Start_DMA+0x1b4>)
 8001d8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6a1b      	ldr	r3, [r3, #32]
 8001d90:	4a23      	ldr	r2, [pc, #140]	@ (8001e20 <HAL_ADC_Start_DMA+0x1b8>)
 8001d92:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0202 	mvn.w	r2, #2
 8001d9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8001dac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a18      	ldr	r0, [r3, #32]
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	334c      	adds	r3, #76	@ 0x4c
 8001db8:	4619      	mov	r1, r3
 8001dba:	68ba      	ldr	r2, [r7, #8]
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f000 fba5 	bl	800250c <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001dcc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8001dd0:	d108      	bne.n	8001de4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8001de0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001de2:	e00f      	b.n	8001e04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	689a      	ldr	r2, [r3, #8]
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8001df2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8001df4:	e006      	b.n	8001e04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8001dfe:	e001      	b.n	8001e04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	40012400 	.word	0x40012400
 8001e14:	40012800 	.word	0x40012800
 8001e18:	0800216f 	.word	0x0800216f
 8001e1c:	080021eb 	.word	0x080021eb
 8001e20:	08002207 	.word	0x08002207

08001e24 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001e2c:	bf00      	nop
 8001e2e:	370c      	adds	r7, #12
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bc80      	pop	{r7}
 8001e34:	4770      	bx	lr

08001e36 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bc80      	pop	{r7}
 8001e46:	4770      	bx	lr

08001e48 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001e48:	b480      	push	{r7}
 8001e4a:	b085      	sub	sp, #20
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001e60:	2b01      	cmp	r3, #1
 8001e62:	d101      	bne.n	8001e68 <HAL_ADC_ConfigChannel+0x20>
 8001e64:	2302      	movs	r3, #2
 8001e66:	e0dc      	b.n	8002022 <HAL_ADC_ConfigChannel+0x1da>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	2b06      	cmp	r3, #6
 8001e76:	d81c      	bhi.n	8001eb2 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	685a      	ldr	r2, [r3, #4]
 8001e82:	4613      	mov	r3, r2
 8001e84:	009b      	lsls	r3, r3, #2
 8001e86:	4413      	add	r3, r2
 8001e88:	3b05      	subs	r3, #5
 8001e8a:	221f      	movs	r2, #31
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	4019      	ands	r1, r3
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	685a      	ldr	r2, [r3, #4]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	3b05      	subs	r3, #5
 8001ea4:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	635a      	str	r2, [r3, #52]	@ 0x34
 8001eb0:	e03c      	b.n	8001f2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	2b0c      	cmp	r3, #12
 8001eb8:	d81c      	bhi.n	8001ef4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685a      	ldr	r2, [r3, #4]
 8001ec4:	4613      	mov	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	3b23      	subs	r3, #35	@ 0x23
 8001ecc:	221f      	movs	r2, #31
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	4019      	ands	r1, r3
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	6818      	ldr	r0, [r3, #0]
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b23      	subs	r3, #35	@ 0x23
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ef2:	e01b      	b.n	8001f2c <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685a      	ldr	r2, [r3, #4]
 8001efe:	4613      	mov	r3, r2
 8001f00:	009b      	lsls	r3, r3, #2
 8001f02:	4413      	add	r3, r2
 8001f04:	3b41      	subs	r3, #65	@ 0x41
 8001f06:	221f      	movs	r2, #31
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	4019      	ands	r1, r3
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685a      	ldr	r2, [r3, #4]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	3b41      	subs	r3, #65	@ 0x41
 8001f20:	fa00 f203 	lsl.w	r2, r0, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	430a      	orrs	r2, r1
 8001f2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b09      	cmp	r3, #9
 8001f32:	d91c      	bls.n	8001f6e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	68d9      	ldr	r1, [r3, #12]
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	005b      	lsls	r3, r3, #1
 8001f42:	4413      	add	r3, r2
 8001f44:	3b1e      	subs	r3, #30
 8001f46:	2207      	movs	r2, #7
 8001f48:	fa02 f303 	lsl.w	r3, r2, r3
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	4019      	ands	r1, r3
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	6898      	ldr	r0, [r3, #8]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	681a      	ldr	r2, [r3, #0]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	005b      	lsls	r3, r3, #1
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3b1e      	subs	r3, #30
 8001f60:	fa00 f203 	lsl.w	r2, r0, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	430a      	orrs	r2, r1
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	e019      	b.n	8001fa2 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	6919      	ldr	r1, [r3, #16]
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4613      	mov	r3, r2
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	4413      	add	r3, r2
 8001f7e:	2207      	movs	r2, #7
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	43db      	mvns	r3, r3
 8001f86:	4019      	ands	r1, r3
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	6898      	ldr	r0, [r3, #8]
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4613      	mov	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	4413      	add	r3, r2
 8001f96:	fa00 f203 	lsl.w	r2, r0, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b10      	cmp	r3, #16
 8001fa8:	d003      	beq.n	8001fb2 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001fae:	2b11      	cmp	r3, #17
 8001fb0:	d132      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a1d      	ldr	r2, [pc, #116]	@ (800202c <HAL_ADC_ConfigChannel+0x1e4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d125      	bne.n	8002008 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d126      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001fd8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b10      	cmp	r3, #16
 8001fe0:	d11a      	bne.n	8002018 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fe2:	4b13      	ldr	r3, [pc, #76]	@ (8002030 <HAL_ADC_ConfigChannel+0x1e8>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a13      	ldr	r2, [pc, #76]	@ (8002034 <HAL_ADC_ConfigChannel+0x1ec>)
 8001fe8:	fba2 2303 	umull	r2, r3, r2, r3
 8001fec:	0c9a      	lsrs	r2, r3, #18
 8001fee:	4613      	mov	r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	4413      	add	r3, r2
 8001ff4:	005b      	lsls	r3, r3, #1
 8001ff6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ff8:	e002      	b.n	8002000 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	3b01      	subs	r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f9      	bne.n	8001ffa <HAL_ADC_ConfigChannel+0x1b2>
 8002006:	e007      	b.n	8002018 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800200c:	f043 0220 	orr.w	r2, r3, #32
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002014:	2301      	movs	r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002020:	7bfb      	ldrb	r3, [r7, #15]
}
 8002022:	4618      	mov	r0, r3
 8002024:	3714      	adds	r7, #20
 8002026:	46bd      	mov	sp, r7
 8002028:	bc80      	pop	{r7}
 800202a:	4770      	bx	lr
 800202c:	40012400 	.word	0x40012400
 8002030:	20000000 	.word	0x20000000
 8002034:	431bde83 	.word	0x431bde83

08002038 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	2b01      	cmp	r3, #1
 8002054:	d040      	beq.n	80020d8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	689a      	ldr	r2, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f042 0201 	orr.w	r2, r2, #1
 8002064:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002066:	4b1f      	ldr	r3, [pc, #124]	@ (80020e4 <ADC_Enable+0xac>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a1f      	ldr	r2, [pc, #124]	@ (80020e8 <ADC_Enable+0xb0>)
 800206c:	fba2 2303 	umull	r2, r3, r2, r3
 8002070:	0c9b      	lsrs	r3, r3, #18
 8002072:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002074:	e002      	b.n	800207c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	3b01      	subs	r3, #1
 800207a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800207c:	68bb      	ldr	r3, [r7, #8]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d1f9      	bne.n	8002076 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002082:	f7ff fd0f 	bl	8001aa4 <HAL_GetTick>
 8002086:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002088:	e01f      	b.n	80020ca <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800208a:	f7ff fd0b 	bl	8001aa4 <HAL_GetTick>
 800208e:	4602      	mov	r2, r0
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d918      	bls.n	80020ca <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b01      	cmp	r3, #1
 80020a4:	d011      	beq.n	80020ca <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020aa:	f043 0210 	orr.w	r2, r3, #16
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b6:	f043 0201 	orr.w	r2, r3, #1
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e007      	b.n	80020da <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d1d8      	bne.n	800208a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000000 	.word	0x20000000
 80020e8:	431bde83 	.word	0x431bde83

080020ec <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80020f4:	2300      	movs	r3, #0
 80020f6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d12e      	bne.n	8002164 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	689a      	ldr	r2, [r3, #8]
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f022 0201 	bic.w	r2, r2, #1
 8002114:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002116:	f7ff fcc5 	bl	8001aa4 <HAL_GetTick>
 800211a:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 800211c:	e01b      	b.n	8002156 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800211e:	f7ff fcc1 	bl	8001aa4 <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	2b02      	cmp	r3, #2
 800212a:	d914      	bls.n	8002156 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	689b      	ldr	r3, [r3, #8]
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10d      	bne.n	8002156 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213e:	f043 0210 	orr.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214a:	f043 0201 	orr.w	r2, r3, #1
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e007      	b.n	8002166 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0301 	and.w	r3, r3, #1
 8002160:	2b01      	cmp	r3, #1
 8002162:	d0dc      	beq.n	800211e <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002180:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8002184:	2b00      	cmp	r3, #0
 8002186:	d127      	bne.n	80021d8 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800218c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800219e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80021a2:	d115      	bne.n	80021d0 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d111      	bne.n	80021d0 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d105      	bne.n	80021d0 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021c8:	f043 0201 	orr.w	r2, r3, #1
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80021d0:	68f8      	ldr	r0, [r7, #12]
 80021d2:	f003 fd84 	bl	8005cde <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80021d6:	e004      	b.n	80021e2 <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6a1b      	ldr	r3, [r3, #32]
 80021dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	4798      	blx	r3
}
 80021e2:	bf00      	nop
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021f6:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021f8:	68f8      	ldr	r0, [r7, #12]
 80021fa:	f7ff fe13 	bl	8001e24 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021fe:	bf00      	nop
 8002200:	3710      	adds	r7, #16
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}

08002206 <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002206:	b580      	push	{r7, lr}
 8002208:	b084      	sub	sp, #16
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002212:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002218:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002224:	f043 0204 	orr.w	r2, r3, #4
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fe02 	bl	8001e36 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002232:	bf00      	nop
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
	...

0800223c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f003 0307 	and.w	r3, r3, #7
 800224a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800224c:	4b0c      	ldr	r3, [pc, #48]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002252:	68ba      	ldr	r2, [r7, #8]
 8002254:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002258:	4013      	ands	r3, r2
 800225a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002264:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002268:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800226c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800226e:	4a04      	ldr	r2, [pc, #16]	@ (8002280 <__NVIC_SetPriorityGrouping+0x44>)
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	60d3      	str	r3, [r2, #12]
}
 8002274:	bf00      	nop
 8002276:	3714      	adds	r7, #20
 8002278:	46bd      	mov	sp, r7
 800227a:	bc80      	pop	{r7}
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	e000ed00 	.word	0xe000ed00

08002284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002288:	4b04      	ldr	r3, [pc, #16]	@ (800229c <__NVIC_GetPriorityGrouping+0x18>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	0a1b      	lsrs	r3, r3, #8
 800228e:	f003 0307 	and.w	r3, r3, #7
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	e000ed00 	.word	0xe000ed00

080022a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022a0:	b480      	push	{r7}
 80022a2:	b083      	sub	sp, #12
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	db0b      	blt.n	80022ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	f003 021f 	and.w	r2, r3, #31
 80022b8:	4906      	ldr	r1, [pc, #24]	@ (80022d4 <__NVIC_EnableIRQ+0x34>)
 80022ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	2001      	movs	r0, #1
 80022c2:	fa00 f202 	lsl.w	r2, r0, r2
 80022c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022ca:	bf00      	nop
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr
 80022d4:	e000e100 	.word	0xe000e100

080022d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	4603      	mov	r3, r0
 80022e0:	6039      	str	r1, [r7, #0]
 80022e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	db0a      	blt.n	8002302 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	b2da      	uxtb	r2, r3
 80022f0:	490c      	ldr	r1, [pc, #48]	@ (8002324 <__NVIC_SetPriority+0x4c>)
 80022f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f6:	0112      	lsls	r2, r2, #4
 80022f8:	b2d2      	uxtb	r2, r2
 80022fa:	440b      	add	r3, r1
 80022fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002300:	e00a      	b.n	8002318 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002302:	683b      	ldr	r3, [r7, #0]
 8002304:	b2da      	uxtb	r2, r3
 8002306:	4908      	ldr	r1, [pc, #32]	@ (8002328 <__NVIC_SetPriority+0x50>)
 8002308:	79fb      	ldrb	r3, [r7, #7]
 800230a:	f003 030f 	and.w	r3, r3, #15
 800230e:	3b04      	subs	r3, #4
 8002310:	0112      	lsls	r2, r2, #4
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	440b      	add	r3, r1
 8002316:	761a      	strb	r2, [r3, #24]
}
 8002318:	bf00      	nop
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bc80      	pop	{r7}
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	e000e100 	.word	0xe000e100
 8002328:	e000ed00 	.word	0xe000ed00

0800232c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800232c:	b480      	push	{r7}
 800232e:	b089      	sub	sp, #36	@ 0x24
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	f1c3 0307 	rsb	r3, r3, #7
 8002346:	2b04      	cmp	r3, #4
 8002348:	bf28      	it	cs
 800234a:	2304      	movcs	r3, #4
 800234c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3304      	adds	r3, #4
 8002352:	2b06      	cmp	r3, #6
 8002354:	d902      	bls.n	800235c <NVIC_EncodePriority+0x30>
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	3b03      	subs	r3, #3
 800235a:	e000      	b.n	800235e <NVIC_EncodePriority+0x32>
 800235c:	2300      	movs	r3, #0
 800235e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002360:	f04f 32ff 	mov.w	r2, #4294967295
 8002364:	69bb      	ldr	r3, [r7, #24]
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43da      	mvns	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	401a      	ands	r2, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002374:	f04f 31ff 	mov.w	r1, #4294967295
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	fa01 f303 	lsl.w	r3, r1, r3
 800237e:	43d9      	mvns	r1, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002384:	4313      	orrs	r3, r2
         );
}
 8002386:	4618      	mov	r0, r3
 8002388:	3724      	adds	r7, #36	@ 0x24
 800238a:	46bd      	mov	sp, r7
 800238c:	bc80      	pop	{r7}
 800238e:	4770      	bx	lr

08002390 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b082      	sub	sp, #8
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	3b01      	subs	r3, #1
 800239c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023a0:	d301      	bcc.n	80023a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023a2:	2301      	movs	r3, #1
 80023a4:	e00f      	b.n	80023c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023a6:	4a0a      	ldr	r2, [pc, #40]	@ (80023d0 <SysTick_Config+0x40>)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	3b01      	subs	r3, #1
 80023ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023ae:	210f      	movs	r1, #15
 80023b0:	f04f 30ff 	mov.w	r0, #4294967295
 80023b4:	f7ff ff90 	bl	80022d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023b8:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <SysTick_Config+0x40>)
 80023ba:	2200      	movs	r2, #0
 80023bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023be:	4b04      	ldr	r3, [pc, #16]	@ (80023d0 <SysTick_Config+0x40>)
 80023c0:	2207      	movs	r2, #7
 80023c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	e000e010 	.word	0xe000e010

080023d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff ff2d 	bl	800223c <__NVIC_SetPriorityGrouping>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023ea:	b580      	push	{r7, lr}
 80023ec:	b086      	sub	sp, #24
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	4603      	mov	r3, r0
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023fc:	f7ff ff42 	bl	8002284 <__NVIC_GetPriorityGrouping>
 8002400:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	68b9      	ldr	r1, [r7, #8]
 8002406:	6978      	ldr	r0, [r7, #20]
 8002408:	f7ff ff90 	bl	800232c <NVIC_EncodePriority>
 800240c:	4602      	mov	r2, r0
 800240e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002412:	4611      	mov	r1, r2
 8002414:	4618      	mov	r0, r3
 8002416:	f7ff ff5f 	bl	80022d8 <__NVIC_SetPriority>
}
 800241a:	bf00      	nop
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}

08002422 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002422:	b580      	push	{r7, lr}
 8002424:	b082      	sub	sp, #8
 8002426:	af00      	add	r7, sp, #0
 8002428:	4603      	mov	r3, r0
 800242a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800242c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff ff35 	bl	80022a0 <__NVIC_EnableIRQ>
}
 8002436:	bf00      	nop
 8002438:	3708      	adds	r7, #8
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800243e:	b580      	push	{r7, lr}
 8002440:	b082      	sub	sp, #8
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff ffa2 	bl	8002390 <SysTick_Config>
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	3708      	adds	r7, #8
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}
	...

08002458 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002458:	b480      	push	{r7}
 800245a:	b085      	sub	sp, #20
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	e043      	b.n	80024f6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	461a      	mov	r2, r3
 8002474:	4b22      	ldr	r3, [pc, #136]	@ (8002500 <HAL_DMA_Init+0xa8>)
 8002476:	4413      	add	r3, r2
 8002478:	4a22      	ldr	r2, [pc, #136]	@ (8002504 <HAL_DMA_Init+0xac>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	091b      	lsrs	r3, r3, #4
 8002480:	009a      	lsls	r2, r3, #2
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a1f      	ldr	r2, [pc, #124]	@ (8002508 <HAL_DMA_Init+0xb0>)
 800248a:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2202      	movs	r2, #2
 8002490:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024a2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80024a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80024b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
 80024ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4313      	orrs	r3, r2
 80024d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68fa      	ldr	r2, [r7, #12]
 80024dc:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bc80      	pop	{r7}
 80024fe:	4770      	bx	lr
 8002500:	bffdfff8 	.word	0xbffdfff8
 8002504:	cccccccd 	.word	0xcccccccd
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
 8002518:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002524:	2b01      	cmp	r3, #1
 8002526:	d101      	bne.n	800252c <HAL_DMA_Start_IT+0x20>
 8002528:	2302      	movs	r3, #2
 800252a:	e04b      	b.n	80025c4 <HAL_DMA_Start_IT+0xb8>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800253a:	b2db      	uxtb	r3, r3
 800253c:	2b01      	cmp	r3, #1
 800253e:	d13a      	bne.n	80025b6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2202      	movs	r2, #2
 8002544:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	2200      	movs	r2, #0
 800254c:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681a      	ldr	r2, [r3, #0]
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f022 0201 	bic.w	r2, r2, #1
 800255c:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	68b9      	ldr	r1, [r7, #8]
 8002564:	68f8      	ldr	r0, [r7, #12]
 8002566:	f000 f9f6 	bl	8002956 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d008      	beq.n	8002584 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f042 020e 	orr.w	r2, r2, #14
 8002580:	601a      	str	r2, [r3, #0]
 8002582:	e00f      	b.n	80025a4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0204 	bic.w	r2, r2, #4
 8002592:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f042 020a 	orr.w	r2, r2, #10
 80025a2:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	681a      	ldr	r2, [r3, #0]
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f042 0201 	orr.w	r2, r2, #1
 80025b2:	601a      	str	r2, [r3, #0]
 80025b4:	e005      	b.n	80025c2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80025be:	2302      	movs	r3, #2
 80025c0:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80025c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3718      	adds	r7, #24
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}

080025cc <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80025cc:	b480      	push	{r7}
 80025ce:	b085      	sub	sp, #20
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d008      	beq.n	80025f6 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2204      	movs	r2, #4
 80025e8:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2200      	movs	r2, #0
 80025ee:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e020      	b.n	8002638 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f022 020e 	bic.w	r2, r2, #14
 8002604:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f022 0201 	bic.w	r2, r2, #1
 8002614:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800261e:	2101      	movs	r1, #1
 8002620:	fa01 f202 	lsl.w	r2, r1, r2
 8002624:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2201      	movs	r2, #1
 800262a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002636:	7bfb      	ldrb	r3, [r7, #15]
}
 8002638:	4618      	mov	r0, r3
 800263a:	3714      	adds	r7, #20
 800263c:	46bd      	mov	sp, r7
 800263e:	bc80      	pop	{r7}
 8002640:	4770      	bx	lr
	...

08002644 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b02      	cmp	r3, #2
 800265a:	d005      	beq.n	8002668 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2204      	movs	r2, #4
 8002660:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	73fb      	strb	r3, [r7, #15]
 8002666:	e051      	b.n	800270c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f022 020e 	bic.w	r2, r2, #14
 8002676:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f022 0201 	bic.w	r2, r2, #1
 8002686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a22      	ldr	r2, [pc, #136]	@ (8002718 <HAL_DMA_Abort_IT+0xd4>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d029      	beq.n	80026e6 <HAL_DMA_Abort_IT+0xa2>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a21      	ldr	r2, [pc, #132]	@ (800271c <HAL_DMA_Abort_IT+0xd8>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d022      	beq.n	80026e2 <HAL_DMA_Abort_IT+0x9e>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a1f      	ldr	r2, [pc, #124]	@ (8002720 <HAL_DMA_Abort_IT+0xdc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01a      	beq.n	80026dc <HAL_DMA_Abort_IT+0x98>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a1e      	ldr	r2, [pc, #120]	@ (8002724 <HAL_DMA_Abort_IT+0xe0>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d012      	beq.n	80026d6 <HAL_DMA_Abort_IT+0x92>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1c      	ldr	r2, [pc, #112]	@ (8002728 <HAL_DMA_Abort_IT+0xe4>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d00a      	beq.n	80026d0 <HAL_DMA_Abort_IT+0x8c>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1b      	ldr	r2, [pc, #108]	@ (800272c <HAL_DMA_Abort_IT+0xe8>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d102      	bne.n	80026ca <HAL_DMA_Abort_IT+0x86>
 80026c4:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80026c8:	e00e      	b.n	80026e8 <HAL_DMA_Abort_IT+0xa4>
 80026ca:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80026ce:	e00b      	b.n	80026e8 <HAL_DMA_Abort_IT+0xa4>
 80026d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80026d4:	e008      	b.n	80026e8 <HAL_DMA_Abort_IT+0xa4>
 80026d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80026da:	e005      	b.n	80026e8 <HAL_DMA_Abort_IT+0xa4>
 80026dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80026e0:	e002      	b.n	80026e8 <HAL_DMA_Abort_IT+0xa4>
 80026e2:	2310      	movs	r3, #16
 80026e4:	e000      	b.n	80026e8 <HAL_DMA_Abort_IT+0xa4>
 80026e6:	2301      	movs	r3, #1
 80026e8:	4a11      	ldr	r2, [pc, #68]	@ (8002730 <HAL_DMA_Abort_IT+0xec>)
 80026ea:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2201      	movs	r2, #1
 80026f0:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002700:	2b00      	cmp	r3, #0
 8002702:	d003      	beq.n	800270c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	4798      	blx	r3
    } 
  }
  return status;
 800270c:	7bfb      	ldrb	r3, [r7, #15]
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40020008 	.word	0x40020008
 800271c:	4002001c 	.word	0x4002001c
 8002720:	40020030 	.word	0x40020030
 8002724:	40020044 	.word	0x40020044
 8002728:	40020058 	.word	0x40020058
 800272c:	4002006c 	.word	0x4002006c
 8002730:	40020000 	.word	0x40020000

08002734 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002750:	2204      	movs	r2, #4
 8002752:	409a      	lsls	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	4013      	ands	r3, r2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d04f      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc8>
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	f003 0304 	and.w	r3, r3, #4
 8002762:	2b00      	cmp	r3, #0
 8002764:	d04a      	beq.n	80027fc <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0320 	and.w	r3, r3, #32
 8002770:	2b00      	cmp	r3, #0
 8002772:	d107      	bne.n	8002784 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0204 	bic.w	r2, r2, #4
 8002782:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a66      	ldr	r2, [pc, #408]	@ (8002924 <HAL_DMA_IRQHandler+0x1f0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d029      	beq.n	80027e2 <HAL_DMA_IRQHandler+0xae>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a65      	ldr	r2, [pc, #404]	@ (8002928 <HAL_DMA_IRQHandler+0x1f4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d022      	beq.n	80027de <HAL_DMA_IRQHandler+0xaa>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a63      	ldr	r2, [pc, #396]	@ (800292c <HAL_DMA_IRQHandler+0x1f8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d01a      	beq.n	80027d8 <HAL_DMA_IRQHandler+0xa4>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a62      	ldr	r2, [pc, #392]	@ (8002930 <HAL_DMA_IRQHandler+0x1fc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d012      	beq.n	80027d2 <HAL_DMA_IRQHandler+0x9e>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a60      	ldr	r2, [pc, #384]	@ (8002934 <HAL_DMA_IRQHandler+0x200>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00a      	beq.n	80027cc <HAL_DMA_IRQHandler+0x98>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a5f      	ldr	r2, [pc, #380]	@ (8002938 <HAL_DMA_IRQHandler+0x204>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d102      	bne.n	80027c6 <HAL_DMA_IRQHandler+0x92>
 80027c0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80027c4:	e00e      	b.n	80027e4 <HAL_DMA_IRQHandler+0xb0>
 80027c6:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80027ca:	e00b      	b.n	80027e4 <HAL_DMA_IRQHandler+0xb0>
 80027cc:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80027d0:	e008      	b.n	80027e4 <HAL_DMA_IRQHandler+0xb0>
 80027d2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80027d6:	e005      	b.n	80027e4 <HAL_DMA_IRQHandler+0xb0>
 80027d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027dc:	e002      	b.n	80027e4 <HAL_DMA_IRQHandler+0xb0>
 80027de:	2340      	movs	r3, #64	@ 0x40
 80027e0:	e000      	b.n	80027e4 <HAL_DMA_IRQHandler+0xb0>
 80027e2:	2304      	movs	r3, #4
 80027e4:	4a55      	ldr	r2, [pc, #340]	@ (800293c <HAL_DMA_IRQHandler+0x208>)
 80027e6:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f000 8094 	beq.w	800291a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80027fa:	e08e      	b.n	800291a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002800:	2202      	movs	r2, #2
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d056      	beq.n	80028ba <HAL_DMA_IRQHandler+0x186>
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	f003 0302 	and.w	r3, r3, #2
 8002812:	2b00      	cmp	r3, #0
 8002814:	d051      	beq.n	80028ba <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d10b      	bne.n	800283c <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 020a 	bic.w	r2, r2, #10
 8002832:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a38      	ldr	r2, [pc, #224]	@ (8002924 <HAL_DMA_IRQHandler+0x1f0>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d029      	beq.n	800289a <HAL_DMA_IRQHandler+0x166>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a37      	ldr	r2, [pc, #220]	@ (8002928 <HAL_DMA_IRQHandler+0x1f4>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d022      	beq.n	8002896 <HAL_DMA_IRQHandler+0x162>
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a35      	ldr	r2, [pc, #212]	@ (800292c <HAL_DMA_IRQHandler+0x1f8>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01a      	beq.n	8002890 <HAL_DMA_IRQHandler+0x15c>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a34      	ldr	r2, [pc, #208]	@ (8002930 <HAL_DMA_IRQHandler+0x1fc>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d012      	beq.n	800288a <HAL_DMA_IRQHandler+0x156>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a32      	ldr	r2, [pc, #200]	@ (8002934 <HAL_DMA_IRQHandler+0x200>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d00a      	beq.n	8002884 <HAL_DMA_IRQHandler+0x150>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a31      	ldr	r2, [pc, #196]	@ (8002938 <HAL_DMA_IRQHandler+0x204>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d102      	bne.n	800287e <HAL_DMA_IRQHandler+0x14a>
 8002878:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800287c:	e00e      	b.n	800289c <HAL_DMA_IRQHandler+0x168>
 800287e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002882:	e00b      	b.n	800289c <HAL_DMA_IRQHandler+0x168>
 8002884:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002888:	e008      	b.n	800289c <HAL_DMA_IRQHandler+0x168>
 800288a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800288e:	e005      	b.n	800289c <HAL_DMA_IRQHandler+0x168>
 8002890:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002894:	e002      	b.n	800289c <HAL_DMA_IRQHandler+0x168>
 8002896:	2320      	movs	r3, #32
 8002898:	e000      	b.n	800289c <HAL_DMA_IRQHandler+0x168>
 800289a:	2302      	movs	r3, #2
 800289c:	4a27      	ldr	r2, [pc, #156]	@ (800293c <HAL_DMA_IRQHandler+0x208>)
 800289e:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d034      	beq.n	800291a <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80028b8:	e02f      	b.n	800291a <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028be:	2208      	movs	r2, #8
 80028c0:	409a      	lsls	r2, r3
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d028      	beq.n	800291c <HAL_DMA_IRQHandler+0x1e8>
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	f003 0308 	and.w	r3, r3, #8
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d023      	beq.n	800291c <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f022 020e 	bic.w	r2, r2, #14
 80028e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ec:	2101      	movs	r1, #1
 80028ee:	fa01 f202 	lsl.w	r2, r1, r2
 80028f2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2201      	movs	r2, #1
 80028fe:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290e:	2b00      	cmp	r3, #0
 8002910:	d004      	beq.n	800291c <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	4798      	blx	r3
    }
  }
  return;
 800291a:	bf00      	nop
 800291c:	bf00      	nop
}
 800291e:	3710      	adds	r7, #16
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40020008 	.word	0x40020008
 8002928:	4002001c 	.word	0x4002001c
 800292c:	40020030 	.word	0x40020030
 8002930:	40020044 	.word	0x40020044
 8002934:	40020058 	.word	0x40020058
 8002938:	4002006c 	.word	0x4002006c
 800293c:	40020000 	.word	0x40020000

08002940 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002940:	b480      	push	{r7}
 8002942:	b083      	sub	sp, #12
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
}
 800294c:	4618      	mov	r0, r3
 800294e:	370c      	adds	r7, #12
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002956:	b480      	push	{r7}
 8002958:	b085      	sub	sp, #20
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800296c:	2101      	movs	r1, #1
 800296e:	fa01 f202 	lsl.w	r2, r1, r2
 8002972:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b10      	cmp	r3, #16
 8002982:	d108      	bne.n	8002996 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	68ba      	ldr	r2, [r7, #8]
 8002992:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8002994:	e007      	b.n	80029a6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68ba      	ldr	r2, [r7, #8]
 800299c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	687a      	ldr	r2, [r7, #4]
 80029a4:	60da      	str	r2, [r3, #12]
}
 80029a6:	bf00      	nop
 80029a8:	3714      	adds	r7, #20
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bc80      	pop	{r7}
 80029ae:	4770      	bx	lr

080029b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b08b      	sub	sp, #44	@ 0x2c
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80029ba:	2300      	movs	r3, #0
 80029bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80029be:	2300      	movs	r3, #0
 80029c0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80029c2:	e169      	b.n	8002c98 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80029c4:	2201      	movs	r2, #1
 80029c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	69fa      	ldr	r2, [r7, #28]
 80029d4:	4013      	ands	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	429a      	cmp	r2, r3
 80029de:	f040 8158 	bne.w	8002c92 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4a9a      	ldr	r2, [pc, #616]	@ (8002c50 <HAL_GPIO_Init+0x2a0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d05e      	beq.n	8002aaa <HAL_GPIO_Init+0xfa>
 80029ec:	4a98      	ldr	r2, [pc, #608]	@ (8002c50 <HAL_GPIO_Init+0x2a0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d875      	bhi.n	8002ade <HAL_GPIO_Init+0x12e>
 80029f2:	4a98      	ldr	r2, [pc, #608]	@ (8002c54 <HAL_GPIO_Init+0x2a4>)
 80029f4:	4293      	cmp	r3, r2
 80029f6:	d058      	beq.n	8002aaa <HAL_GPIO_Init+0xfa>
 80029f8:	4a96      	ldr	r2, [pc, #600]	@ (8002c54 <HAL_GPIO_Init+0x2a4>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d86f      	bhi.n	8002ade <HAL_GPIO_Init+0x12e>
 80029fe:	4a96      	ldr	r2, [pc, #600]	@ (8002c58 <HAL_GPIO_Init+0x2a8>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d052      	beq.n	8002aaa <HAL_GPIO_Init+0xfa>
 8002a04:	4a94      	ldr	r2, [pc, #592]	@ (8002c58 <HAL_GPIO_Init+0x2a8>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d869      	bhi.n	8002ade <HAL_GPIO_Init+0x12e>
 8002a0a:	4a94      	ldr	r2, [pc, #592]	@ (8002c5c <HAL_GPIO_Init+0x2ac>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d04c      	beq.n	8002aaa <HAL_GPIO_Init+0xfa>
 8002a10:	4a92      	ldr	r2, [pc, #584]	@ (8002c5c <HAL_GPIO_Init+0x2ac>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d863      	bhi.n	8002ade <HAL_GPIO_Init+0x12e>
 8002a16:	4a92      	ldr	r2, [pc, #584]	@ (8002c60 <HAL_GPIO_Init+0x2b0>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d046      	beq.n	8002aaa <HAL_GPIO_Init+0xfa>
 8002a1c:	4a90      	ldr	r2, [pc, #576]	@ (8002c60 <HAL_GPIO_Init+0x2b0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d85d      	bhi.n	8002ade <HAL_GPIO_Init+0x12e>
 8002a22:	2b12      	cmp	r3, #18
 8002a24:	d82a      	bhi.n	8002a7c <HAL_GPIO_Init+0xcc>
 8002a26:	2b12      	cmp	r3, #18
 8002a28:	d859      	bhi.n	8002ade <HAL_GPIO_Init+0x12e>
 8002a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002a30 <HAL_GPIO_Init+0x80>)
 8002a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a30:	08002aab 	.word	0x08002aab
 8002a34:	08002a85 	.word	0x08002a85
 8002a38:	08002a97 	.word	0x08002a97
 8002a3c:	08002ad9 	.word	0x08002ad9
 8002a40:	08002adf 	.word	0x08002adf
 8002a44:	08002adf 	.word	0x08002adf
 8002a48:	08002adf 	.word	0x08002adf
 8002a4c:	08002adf 	.word	0x08002adf
 8002a50:	08002adf 	.word	0x08002adf
 8002a54:	08002adf 	.word	0x08002adf
 8002a58:	08002adf 	.word	0x08002adf
 8002a5c:	08002adf 	.word	0x08002adf
 8002a60:	08002adf 	.word	0x08002adf
 8002a64:	08002adf 	.word	0x08002adf
 8002a68:	08002adf 	.word	0x08002adf
 8002a6c:	08002adf 	.word	0x08002adf
 8002a70:	08002adf 	.word	0x08002adf
 8002a74:	08002a8d 	.word	0x08002a8d
 8002a78:	08002aa1 	.word	0x08002aa1
 8002a7c:	4a79      	ldr	r2, [pc, #484]	@ (8002c64 <HAL_GPIO_Init+0x2b4>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d013      	beq.n	8002aaa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002a82:	e02c      	b.n	8002ade <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	623b      	str	r3, [r7, #32]
          break;
 8002a8a:	e029      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	3304      	adds	r3, #4
 8002a92:	623b      	str	r3, [r7, #32]
          break;
 8002a94:	e024      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	3308      	adds	r3, #8
 8002a9c:	623b      	str	r3, [r7, #32]
          break;
 8002a9e:	e01f      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	330c      	adds	r3, #12
 8002aa6:	623b      	str	r3, [r7, #32]
          break;
 8002aa8:	e01a      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d102      	bne.n	8002ab8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	623b      	str	r3, [r7, #32]
          break;
 8002ab6:	e013      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d105      	bne.n	8002acc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002ac0:	2308      	movs	r3, #8
 8002ac2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	69fa      	ldr	r2, [r7, #28]
 8002ac8:	611a      	str	r2, [r3, #16]
          break;
 8002aca:	e009      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002acc:	2308      	movs	r3, #8
 8002ace:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69fa      	ldr	r2, [r7, #28]
 8002ad4:	615a      	str	r2, [r3, #20]
          break;
 8002ad6:	e003      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	623b      	str	r3, [r7, #32]
          break;
 8002adc:	e000      	b.n	8002ae0 <HAL_GPIO_Init+0x130>
          break;
 8002ade:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	2bff      	cmp	r3, #255	@ 0xff
 8002ae4:	d801      	bhi.n	8002aea <HAL_GPIO_Init+0x13a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	e001      	b.n	8002aee <HAL_GPIO_Init+0x13e>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2bff      	cmp	r3, #255	@ 0xff
 8002af4:	d802      	bhi.n	8002afc <HAL_GPIO_Init+0x14c>
 8002af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	e002      	b.n	8002b02 <HAL_GPIO_Init+0x152>
 8002afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002afe:	3b08      	subs	r3, #8
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	210f      	movs	r1, #15
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	fa01 f303 	lsl.w	r3, r1, r3
 8002b10:	43db      	mvns	r3, r3
 8002b12:	401a      	ands	r2, r3
 8002b14:	6a39      	ldr	r1, [r7, #32]
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 80b1 	beq.w	8002c92 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002b30:	4b4d      	ldr	r3, [pc, #308]	@ (8002c68 <HAL_GPIO_Init+0x2b8>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	4a4c      	ldr	r2, [pc, #304]	@ (8002c68 <HAL_GPIO_Init+0x2b8>)
 8002b36:	f043 0301 	orr.w	r3, r3, #1
 8002b3a:	6193      	str	r3, [r2, #24]
 8002b3c:	4b4a      	ldr	r3, [pc, #296]	@ (8002c68 <HAL_GPIO_Init+0x2b8>)
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	60bb      	str	r3, [r7, #8]
 8002b46:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002b48:	4a48      	ldr	r2, [pc, #288]	@ (8002c6c <HAL_GPIO_Init+0x2bc>)
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b4c:	089b      	lsrs	r3, r3, #2
 8002b4e:	3302      	adds	r3, #2
 8002b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b54:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b58:	f003 0303 	and.w	r3, r3, #3
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	220f      	movs	r2, #15
 8002b60:	fa02 f303 	lsl.w	r3, r2, r3
 8002b64:	43db      	mvns	r3, r3
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a40      	ldr	r2, [pc, #256]	@ (8002c70 <HAL_GPIO_Init+0x2c0>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d013      	beq.n	8002b9c <HAL_GPIO_Init+0x1ec>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a3f      	ldr	r2, [pc, #252]	@ (8002c74 <HAL_GPIO_Init+0x2c4>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d00d      	beq.n	8002b98 <HAL_GPIO_Init+0x1e8>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c78 <HAL_GPIO_Init+0x2c8>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d007      	beq.n	8002b94 <HAL_GPIO_Init+0x1e4>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	4a3d      	ldr	r2, [pc, #244]	@ (8002c7c <HAL_GPIO_Init+0x2cc>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d101      	bne.n	8002b90 <HAL_GPIO_Init+0x1e0>
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e006      	b.n	8002b9e <HAL_GPIO_Init+0x1ee>
 8002b90:	2304      	movs	r3, #4
 8002b92:	e004      	b.n	8002b9e <HAL_GPIO_Init+0x1ee>
 8002b94:	2302      	movs	r3, #2
 8002b96:	e002      	b.n	8002b9e <HAL_GPIO_Init+0x1ee>
 8002b98:	2301      	movs	r3, #1
 8002b9a:	e000      	b.n	8002b9e <HAL_GPIO_Init+0x1ee>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ba0:	f002 0203 	and.w	r2, r2, #3
 8002ba4:	0092      	lsls	r2, r2, #2
 8002ba6:	4093      	lsls	r3, r2
 8002ba8:	68fa      	ldr	r2, [r7, #12]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002bae:	492f      	ldr	r1, [pc, #188]	@ (8002c6c <HAL_GPIO_Init+0x2bc>)
 8002bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb2:	089b      	lsrs	r3, r3, #2
 8002bb4:	3302      	adds	r3, #2
 8002bb6:	68fa      	ldr	r2, [r7, #12]
 8002bb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d006      	beq.n	8002bd6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002bc8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002bca:	689a      	ldr	r2, [r3, #8]
 8002bcc:	492c      	ldr	r1, [pc, #176]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	608b      	str	r3, [r1, #8]
 8002bd4:	e006      	b.n	8002be4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002bd6:	4b2a      	ldr	r3, [pc, #168]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	69bb      	ldr	r3, [r7, #24]
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4928      	ldr	r1, [pc, #160]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d006      	beq.n	8002bfe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002bf0:	4b23      	ldr	r3, [pc, #140]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002bf2:	68da      	ldr	r2, [r3, #12]
 8002bf4:	4922      	ldr	r1, [pc, #136]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002bf6:	69bb      	ldr	r3, [r7, #24]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	60cb      	str	r3, [r1, #12]
 8002bfc:	e006      	b.n	8002c0c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002bfe:	4b20      	ldr	r3, [pc, #128]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c00:	68da      	ldr	r2, [r3, #12]
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	43db      	mvns	r3, r3
 8002c06:	491e      	ldr	r1, [pc, #120]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c08:	4013      	ands	r3, r2
 8002c0a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d006      	beq.n	8002c26 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002c18:	4b19      	ldr	r3, [pc, #100]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c1a:	685a      	ldr	r2, [r3, #4]
 8002c1c:	4918      	ldr	r1, [pc, #96]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
 8002c24:	e006      	b.n	8002c34 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002c26:	4b16      	ldr	r3, [pc, #88]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	69bb      	ldr	r3, [r7, #24]
 8002c2c:	43db      	mvns	r3, r3
 8002c2e:	4914      	ldr	r1, [pc, #80]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c30:	4013      	ands	r3, r2
 8002c32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d021      	beq.n	8002c84 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002c40:	4b0f      	ldr	r3, [pc, #60]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c42:	681a      	ldr	r2, [r3, #0]
 8002c44:	490e      	ldr	r1, [pc, #56]	@ (8002c80 <HAL_GPIO_Init+0x2d0>)
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	600b      	str	r3, [r1, #0]
 8002c4c:	e021      	b.n	8002c92 <HAL_GPIO_Init+0x2e2>
 8002c4e:	bf00      	nop
 8002c50:	10320000 	.word	0x10320000
 8002c54:	10310000 	.word	0x10310000
 8002c58:	10220000 	.word	0x10220000
 8002c5c:	10210000 	.word	0x10210000
 8002c60:	10120000 	.word	0x10120000
 8002c64:	10110000 	.word	0x10110000
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40010800 	.word	0x40010800
 8002c74:	40010c00 	.word	0x40010c00
 8002c78:	40011000 	.word	0x40011000
 8002c7c:	40011400 	.word	0x40011400
 8002c80:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	43db      	mvns	r3, r3
 8002c8c:	4909      	ldr	r1, [pc, #36]	@ (8002cb4 <HAL_GPIO_Init+0x304>)
 8002c8e:	4013      	ands	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c94:	3301      	adds	r3, #1
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f47f ae8e 	bne.w	80029c4 <HAL_GPIO_Init+0x14>
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	372c      	adds	r7, #44	@ 0x2c
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr
 8002cb4:	40010400 	.word	0x40010400

08002cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b083      	sub	sp, #12
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	807b      	strh	r3, [r7, #2]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002cc8:	787b      	ldrb	r3, [r7, #1]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cce:	887a      	ldrh	r2, [r7, #2]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002cd4:	e003      	b.n	8002cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002cd6:	887b      	ldrh	r3, [r7, #2]
 8002cd8:	041a      	lsls	r2, r3, #16
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	611a      	str	r2, [r3, #16]
}
 8002cde:	bf00      	nop
 8002ce0:	370c      	adds	r7, #12
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bc80      	pop	{r7}
 8002ce6:	4770      	bx	lr

08002ce8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	b085      	sub	sp, #20
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002cfa:	887a      	ldrh	r2, [r7, #2]
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	4013      	ands	r3, r2
 8002d00:	041a      	lsls	r2, r3, #16
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	43d9      	mvns	r1, r3
 8002d06:	887b      	ldrh	r3, [r7, #2]
 8002d08:	400b      	ands	r3, r1
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	611a      	str	r2, [r3, #16]
}
 8002d10:	bf00      	nop
 8002d12:	3714      	adds	r7, #20
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bc80      	pop	{r7}
 8002d18:	4770      	bx	lr
	...

08002d1c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e272      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0301 	and.w	r3, r3, #1
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f000 8087 	beq.w	8002e4a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d3c:	4b92      	ldr	r3, [pc, #584]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 030c 	and.w	r3, r3, #12
 8002d44:	2b04      	cmp	r3, #4
 8002d46:	d00c      	beq.n	8002d62 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002d48:	4b8f      	ldr	r3, [pc, #572]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d112      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
 8002d54:	4b8c      	ldr	r3, [pc, #560]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d5c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d60:	d10b      	bne.n	8002d7a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d62:	4b89      	ldr	r3, [pc, #548]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d06c      	beq.n	8002e48 <HAL_RCC_OscConfig+0x12c>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d168      	bne.n	8002e48 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e24c      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002d82:	d106      	bne.n	8002d92 <HAL_RCC_OscConfig+0x76>
 8002d84:	4b80      	ldr	r3, [pc, #512]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a7f      	ldr	r2, [pc, #508]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d8a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d8e:	6013      	str	r3, [r2, #0]
 8002d90:	e02e      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10c      	bne.n	8002db4 <HAL_RCC_OscConfig+0x98>
 8002d9a:	4b7b      	ldr	r3, [pc, #492]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a7a      	ldr	r2, [pc, #488]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002da0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002da4:	6013      	str	r3, [r2, #0]
 8002da6:	4b78      	ldr	r3, [pc, #480]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a77      	ldr	r2, [pc, #476]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002db0:	6013      	str	r3, [r2, #0]
 8002db2:	e01d      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xbc>
 8002dbe:	4b72      	ldr	r3, [pc, #456]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a71      	ldr	r2, [pc, #452]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002dc8:	6013      	str	r3, [r2, #0]
 8002dca:	4b6f      	ldr	r3, [pc, #444]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a6e      	ldr	r2, [pc, #440]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd4:	6013      	str	r3, [r2, #0]
 8002dd6:	e00b      	b.n	8002df0 <HAL_RCC_OscConfig+0xd4>
 8002dd8:	4b6b      	ldr	r3, [pc, #428]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6a      	ldr	r2, [pc, #424]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dde:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002de2:	6013      	str	r3, [r2, #0]
 8002de4:	4b68      	ldr	r3, [pc, #416]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a67      	ldr	r2, [pc, #412]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002dea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002dee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d013      	beq.n	8002e20 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002df8:	f7fe fe54 	bl	8001aa4 <HAL_GetTick>
 8002dfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	e008      	b.n	8002e12 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e00:	f7fe fe50 	bl	8001aa4 <HAL_GetTick>
 8002e04:	4602      	mov	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	@ 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e200      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e12:	4b5d      	ldr	r3, [pc, #372]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCC_OscConfig+0xe4>
 8002e1e:	e014      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e20:	f7fe fe40 	bl	8001aa4 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e28:	f7fe fe3c 	bl	8001aa4 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b64      	cmp	r3, #100	@ 0x64
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1ec      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e3a:	4b53      	ldr	r3, [pc, #332]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x10c>
 8002e46:	e000      	b.n	8002e4a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d063      	beq.n	8002f1e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e56:	4b4c      	ldr	r3, [pc, #304]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f003 030c 	and.w	r3, r3, #12
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d00b      	beq.n	8002e7a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002e62:	4b49      	ldr	r3, [pc, #292]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	2b08      	cmp	r3, #8
 8002e6c:	d11c      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x18c>
 8002e6e:	4b46      	ldr	r3, [pc, #280]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d116      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e7a:	4b43      	ldr	r3, [pc, #268]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d005      	beq.n	8002e92 <HAL_RCC_OscConfig+0x176>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	691b      	ldr	r3, [r3, #16]
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d001      	beq.n	8002e92 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e1c0      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e92:	4b3d      	ldr	r3, [pc, #244]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	00db      	lsls	r3, r3, #3
 8002ea0:	4939      	ldr	r1, [pc, #228]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ea6:	e03a      	b.n	8002f1e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	691b      	ldr	r3, [r3, #16]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d020      	beq.n	8002ef2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002eb0:	4b36      	ldr	r3, [pc, #216]	@ (8002f8c <HAL_RCC_OscConfig+0x270>)
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb6:	f7fe fdf5 	bl	8001aa4 <HAL_GetTick>
 8002eba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebc:	e008      	b.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ebe:	f7fe fdf1 	bl	8001aa4 <HAL_GetTick>
 8002ec2:	4602      	mov	r2, r0
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	1ad3      	subs	r3, r2, r3
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d901      	bls.n	8002ed0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ecc:	2303      	movs	r3, #3
 8002ece:	e1a1      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f003 0302 	and.w	r3, r3, #2
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0f0      	beq.n	8002ebe <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002edc:	4b2a      	ldr	r3, [pc, #168]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	695b      	ldr	r3, [r3, #20]
 8002ee8:	00db      	lsls	r3, r3, #3
 8002eea:	4927      	ldr	r1, [pc, #156]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	600b      	str	r3, [r1, #0]
 8002ef0:	e015      	b.n	8002f1e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ef2:	4b26      	ldr	r3, [pc, #152]	@ (8002f8c <HAL_RCC_OscConfig+0x270>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef8:	f7fe fdd4 	bl	8001aa4 <HAL_GetTick>
 8002efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002efe:	e008      	b.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f00:	f7fe fdd0 	bl	8001aa4 <HAL_GetTick>
 8002f04:	4602      	mov	r2, r0
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e180      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f12:	4b1d      	ldr	r3, [pc, #116]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f0      	bne.n	8002f00 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d03a      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	699b      	ldr	r3, [r3, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d019      	beq.n	8002f66 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f32:	4b17      	ldr	r3, [pc, #92]	@ (8002f90 <HAL_RCC_OscConfig+0x274>)
 8002f34:	2201      	movs	r2, #1
 8002f36:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f38:	f7fe fdb4 	bl	8001aa4 <HAL_GetTick>
 8002f3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f3e:	e008      	b.n	8002f52 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f40:	f7fe fdb0 	bl	8001aa4 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d901      	bls.n	8002f52 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002f4e:	2303      	movs	r3, #3
 8002f50:	e160      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f52:	4b0d      	ldr	r3, [pc, #52]	@ (8002f88 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f56:	f003 0302 	and.w	r3, r3, #2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d0f0      	beq.n	8002f40 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002f5e:	2001      	movs	r0, #1
 8002f60:	f000 faee 	bl	8003540 <RCC_Delay>
 8002f64:	e01c      	b.n	8002fa0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f66:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <HAL_RCC_OscConfig+0x274>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6c:	f7fe fd9a 	bl	8001aa4 <HAL_GetTick>
 8002f70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f72:	e00f      	b.n	8002f94 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f74:	f7fe fd96 	bl	8001aa4 <HAL_GetTick>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d908      	bls.n	8002f94 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f82:	2303      	movs	r3, #3
 8002f84:	e146      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
 8002f86:	bf00      	nop
 8002f88:	40021000 	.word	0x40021000
 8002f8c:	42420000 	.word	0x42420000
 8002f90:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f94:	4b92      	ldr	r3, [pc, #584]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f98:	f003 0302 	and.w	r3, r3, #2
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d1e9      	bne.n	8002f74 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f003 0304 	and.w	r3, r3, #4
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	f000 80a6 	beq.w	80030fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fb2:	4b8b      	ldr	r3, [pc, #556]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fb4:	69db      	ldr	r3, [r3, #28]
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d10d      	bne.n	8002fda <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b88      	ldr	r3, [pc, #544]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	4a87      	ldr	r2, [pc, #540]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fc8:	61d3      	str	r3, [r2, #28]
 8002fca:	4b85      	ldr	r3, [pc, #532]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002fd2:	60bb      	str	r3, [r7, #8]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fda:	4b82      	ldr	r3, [pc, #520]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d118      	bne.n	8003018 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fe6:	4b7f      	ldr	r3, [pc, #508]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a7e      	ldr	r2, [pc, #504]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 8002fec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ff0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fd57 	bl	8001aa4 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ffa:	f7fe fd53 	bl	8001aa4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b64      	cmp	r3, #100	@ 0x64
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e103      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800300c:	4b75      	ldr	r3, [pc, #468]	@ (80031e4 <HAL_RCC_OscConfig+0x4c8>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	2b01      	cmp	r3, #1
 800301e:	d106      	bne.n	800302e <HAL_RCC_OscConfig+0x312>
 8003020:	4b6f      	ldr	r3, [pc, #444]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	4a6e      	ldr	r2, [pc, #440]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003026:	f043 0301 	orr.w	r3, r3, #1
 800302a:	6213      	str	r3, [r2, #32]
 800302c:	e02d      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0x334>
 8003036:	4b6a      	ldr	r3, [pc, #424]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003038:	6a1b      	ldr	r3, [r3, #32]
 800303a:	4a69      	ldr	r2, [pc, #420]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800303c:	f023 0301 	bic.w	r3, r3, #1
 8003040:	6213      	str	r3, [r2, #32]
 8003042:	4b67      	ldr	r3, [pc, #412]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003044:	6a1b      	ldr	r3, [r3, #32]
 8003046:	4a66      	ldr	r2, [pc, #408]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003048:	f023 0304 	bic.w	r3, r3, #4
 800304c:	6213      	str	r3, [r2, #32]
 800304e:	e01c      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	2b05      	cmp	r3, #5
 8003056:	d10c      	bne.n	8003072 <HAL_RCC_OscConfig+0x356>
 8003058:	4b61      	ldr	r3, [pc, #388]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800305a:	6a1b      	ldr	r3, [r3, #32]
 800305c:	4a60      	ldr	r2, [pc, #384]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800305e:	f043 0304 	orr.w	r3, r3, #4
 8003062:	6213      	str	r3, [r2, #32]
 8003064:	4b5e      	ldr	r3, [pc, #376]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	4a5d      	ldr	r2, [pc, #372]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800306a:	f043 0301 	orr.w	r3, r3, #1
 800306e:	6213      	str	r3, [r2, #32]
 8003070:	e00b      	b.n	800308a <HAL_RCC_OscConfig+0x36e>
 8003072:	4b5b      	ldr	r3, [pc, #364]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	4a5a      	ldr	r2, [pc, #360]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	f023 0301 	bic.w	r3, r3, #1
 800307c:	6213      	str	r3, [r2, #32]
 800307e:	4b58      	ldr	r3, [pc, #352]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	4a57      	ldr	r2, [pc, #348]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	f023 0304 	bic.w	r3, r3, #4
 8003088:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	68db      	ldr	r3, [r3, #12]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d015      	beq.n	80030be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003092:	f7fe fd07 	bl	8001aa4 <HAL_GetTick>
 8003096:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003098:	e00a      	b.n	80030b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800309a:	f7fe fd03 	bl	8001aa4 <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e0b1      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	4b4b      	ldr	r3, [pc, #300]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0ee      	beq.n	800309a <HAL_RCC_OscConfig+0x37e>
 80030bc:	e014      	b.n	80030e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030be:	f7fe fcf1 	bl	8001aa4 <HAL_GetTick>
 80030c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030c4:	e00a      	b.n	80030dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030c6:	f7fe fced 	bl	8001aa4 <HAL_GetTick>
 80030ca:	4602      	mov	r2, r0
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d901      	bls.n	80030dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e09b      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030dc:	4b40      	ldr	r3, [pc, #256]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030de:	6a1b      	ldr	r3, [r3, #32]
 80030e0:	f003 0302 	and.w	r3, r3, #2
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d1ee      	bne.n	80030c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80030e8:	7dfb      	ldrb	r3, [r7, #23]
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d105      	bne.n	80030fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030ee:	4b3c      	ldr	r3, [pc, #240]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	4a3b      	ldr	r2, [pc, #236]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80030f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80030f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 8087 	beq.w	8003212 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003104:	4b36      	ldr	r3, [pc, #216]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 030c 	and.w	r3, r3, #12
 800310c:	2b08      	cmp	r3, #8
 800310e:	d061      	beq.n	80031d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b02      	cmp	r3, #2
 8003116:	d146      	bne.n	80031a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003118:	4b33      	ldr	r3, [pc, #204]	@ (80031e8 <HAL_RCC_OscConfig+0x4cc>)
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800311e:	f7fe fcc1 	bl	8001aa4 <HAL_GetTick>
 8003122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003124:	e008      	b.n	8003138 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003126:	f7fe fcbd 	bl	8001aa4 <HAL_GetTick>
 800312a:	4602      	mov	r2, r0
 800312c:	693b      	ldr	r3, [r7, #16]
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	2b02      	cmp	r3, #2
 8003132:	d901      	bls.n	8003138 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003134:	2303      	movs	r3, #3
 8003136:	e06d      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003138:	4b29      	ldr	r3, [pc, #164]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	d1f0      	bne.n	8003126 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800314c:	d108      	bne.n	8003160 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800314e:	4b24      	ldr	r3, [pc, #144]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	4921      	ldr	r1, [pc, #132]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003160:	4b1f      	ldr	r3, [pc, #124]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a19      	ldr	r1, [r3, #32]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	430b      	orrs	r3, r1
 8003172:	491b      	ldr	r1, [pc, #108]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 8003174:	4313      	orrs	r3, r2
 8003176:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003178:	4b1b      	ldr	r3, [pc, #108]	@ (80031e8 <HAL_RCC_OscConfig+0x4cc>)
 800317a:	2201      	movs	r2, #1
 800317c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800317e:	f7fe fc91 	bl	8001aa4 <HAL_GetTick>
 8003182:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003184:	e008      	b.n	8003198 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003186:	f7fe fc8d 	bl	8001aa4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b02      	cmp	r3, #2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e03d      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003198:	4b11      	ldr	r3, [pc, #68]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCC_OscConfig+0x46a>
 80031a4:	e035      	b.n	8003212 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031a6:	4b10      	ldr	r3, [pc, #64]	@ (80031e8 <HAL_RCC_OscConfig+0x4cc>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ac:	f7fe fc7a 	bl	8001aa4 <HAL_GetTick>
 80031b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031b2:	e008      	b.n	80031c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b4:	f7fe fc76 	bl	8001aa4 <HAL_GetTick>
 80031b8:	4602      	mov	r2, r0
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e026      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80031c6:	4b06      	ldr	r3, [pc, #24]	@ (80031e0 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d1f0      	bne.n	80031b4 <HAL_RCC_OscConfig+0x498>
 80031d2:	e01e      	b.n	8003212 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	69db      	ldr	r3, [r3, #28]
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d107      	bne.n	80031ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e019      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
 80031e0:	40021000 	.word	0x40021000
 80031e4:	40007000 	.word	0x40007000
 80031e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80031ec:	4b0b      	ldr	r3, [pc, #44]	@ (800321c <HAL_RCC_OscConfig+0x500>)
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a1b      	ldr	r3, [r3, #32]
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320a:	429a      	cmp	r2, r3
 800320c:	d001      	beq.n	8003212 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2b00      	cmp	r3, #0
 800322e:	d101      	bne.n	8003234 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0d0      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003234:	4b6a      	ldr	r3, [pc, #424]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f003 0307 	and.w	r3, r3, #7
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	429a      	cmp	r2, r3
 8003240:	d910      	bls.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003242:	4b67      	ldr	r3, [pc, #412]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f023 0207 	bic.w	r2, r3, #7
 800324a:	4965      	ldr	r1, [pc, #404]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	4313      	orrs	r3, r2
 8003250:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003252:	4b63      	ldr	r3, [pc, #396]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0307 	and.w	r3, r3, #7
 800325a:	683a      	ldr	r2, [r7, #0]
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e0b8      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d020      	beq.n	80032b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 0304 	and.w	r3, r3, #4
 8003278:	2b00      	cmp	r3, #0
 800327a:	d005      	beq.n	8003288 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800327c:	4b59      	ldr	r3, [pc, #356]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	4a58      	ldr	r2, [pc, #352]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003282:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003286:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0308 	and.w	r3, r3, #8
 8003290:	2b00      	cmp	r3, #0
 8003292:	d005      	beq.n	80032a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003294:	4b53      	ldr	r3, [pc, #332]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	4a52      	ldr	r2, [pc, #328]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800329a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800329e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032a0:	4b50      	ldr	r3, [pc, #320]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	494d      	ldr	r1, [pc, #308]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0301 	and.w	r3, r3, #1
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d040      	beq.n	8003340 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d107      	bne.n	80032d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032c6:	4b47      	ldr	r3, [pc, #284]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d115      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e07f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d107      	bne.n	80032ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032de:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d109      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e073      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ee:	4b3d      	ldr	r3, [pc, #244]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	e06b      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032fe:	4b39      	ldr	r3, [pc, #228]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f023 0203 	bic.w	r2, r3, #3
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	4936      	ldr	r1, [pc, #216]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800330c:	4313      	orrs	r3, r2
 800330e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003310:	f7fe fbc8 	bl	8001aa4 <HAL_GetTick>
 8003314:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003316:	e00a      	b.n	800332e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003318:	f7fe fbc4 	bl	8001aa4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003326:	4293      	cmp	r3, r2
 8003328:	d901      	bls.n	800332e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e053      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800332e:	4b2d      	ldr	r3, [pc, #180]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f003 020c 	and.w	r2, r3, #12
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	429a      	cmp	r2, r3
 800333e:	d1eb      	bne.n	8003318 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003340:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	683a      	ldr	r2, [r7, #0]
 800334a:	429a      	cmp	r2, r3
 800334c:	d210      	bcs.n	8003370 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800334e:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f023 0207 	bic.w	r2, r3, #7
 8003356:	4922      	ldr	r1, [pc, #136]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003358:	683b      	ldr	r3, [r7, #0]
 800335a:	4313      	orrs	r3, r2
 800335c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800335e:	4b20      	ldr	r3, [pc, #128]	@ (80033e0 <HAL_RCC_ClockConfig+0x1c0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d001      	beq.n	8003370 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800336c:	2301      	movs	r3, #1
 800336e:	e032      	b.n	80033d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0304 	and.w	r3, r3, #4
 8003378:	2b00      	cmp	r3, #0
 800337a:	d008      	beq.n	800338e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800337c:	4b19      	ldr	r3, [pc, #100]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	68db      	ldr	r3, [r3, #12]
 8003388:	4916      	ldr	r1, [pc, #88]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800338a:	4313      	orrs	r3, r2
 800338c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d009      	beq.n	80033ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800339a:	4b12      	ldr	r3, [pc, #72]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	691b      	ldr	r3, [r3, #16]
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	490e      	ldr	r1, [pc, #56]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ae:	f000 f82d 	bl	800340c <HAL_RCC_GetSysClockFreq>
 80033b2:	4602      	mov	r2, r0
 80033b4:	4b0b      	ldr	r3, [pc, #44]	@ (80033e4 <HAL_RCC_ClockConfig+0x1c4>)
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	091b      	lsrs	r3, r3, #4
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	490a      	ldr	r1, [pc, #40]	@ (80033e8 <HAL_RCC_ClockConfig+0x1c8>)
 80033c0:	5ccb      	ldrb	r3, [r1, r3]
 80033c2:	fa22 f303 	lsr.w	r3, r2, r3
 80033c6:	4a09      	ldr	r2, [pc, #36]	@ (80033ec <HAL_RCC_ClockConfig+0x1cc>)
 80033c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033ca:	4b09      	ldr	r3, [pc, #36]	@ (80033f0 <HAL_RCC_ClockConfig+0x1d0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4618      	mov	r0, r3
 80033d0:	f7fe fb26 	bl	8001a20 <HAL_InitTick>

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3710      	adds	r7, #16
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40022000 	.word	0x40022000
 80033e4:	40021000 	.word	0x40021000
 80033e8:	08009d9c 	.word	0x08009d9c
 80033ec:	20000000 	.word	0x20000000
 80033f0:	20000004 	.word	0x20000004

080033f4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M3 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80033f8:	4b03      	ldr	r3, [pc, #12]	@ (8003408 <HAL_RCC_EnableCSS+0x14>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]
}
 80033fe:	bf00      	nop
 8003400:	46bd      	mov	sp, r7
 8003402:	bc80      	pop	{r7}
 8003404:	4770      	bx	lr
 8003406:	bf00      	nop
 8003408:	4242004c 	.word	0x4242004c

0800340c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800340c:	b480      	push	{r7}
 800340e:	b087      	sub	sp, #28
 8003410:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003412:	2300      	movs	r3, #0
 8003414:	60fb      	str	r3, [r7, #12]
 8003416:	2300      	movs	r3, #0
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
 800341e:	2300      	movs	r3, #0
 8003420:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003422:	2300      	movs	r3, #0
 8003424:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003426:	4b1e      	ldr	r3, [pc, #120]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x94>)
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	f003 030c 	and.w	r3, r3, #12
 8003432:	2b04      	cmp	r3, #4
 8003434:	d002      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x30>
 8003436:	2b08      	cmp	r3, #8
 8003438:	d003      	beq.n	8003442 <HAL_RCC_GetSysClockFreq+0x36>
 800343a:	e027      	b.n	800348c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800343c:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800343e:	613b      	str	r3, [r7, #16]
      break;
 8003440:	e027      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	0c9b      	lsrs	r3, r3, #18
 8003446:	f003 030f 	and.w	r3, r3, #15
 800344a:	4a17      	ldr	r2, [pc, #92]	@ (80034a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800344c:	5cd3      	ldrb	r3, [r2, r3]
 800344e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d010      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800345a:	4b11      	ldr	r3, [pc, #68]	@ (80034a0 <HAL_RCC_GetSysClockFreq+0x94>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	0c5b      	lsrs	r3, r3, #17
 8003460:	f003 0301 	and.w	r3, r3, #1
 8003464:	4a11      	ldr	r2, [pc, #68]	@ (80034ac <HAL_RCC_GetSysClockFreq+0xa0>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a0d      	ldr	r2, [pc, #52]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800346e:	fb03 f202 	mul.w	r2, r3, r2
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	fbb2 f3f3 	udiv	r3, r2, r3
 8003478:	617b      	str	r3, [r7, #20]
 800347a:	e004      	b.n	8003486 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0c      	ldr	r2, [pc, #48]	@ (80034b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003480:	fb02 f303 	mul.w	r3, r2, r3
 8003484:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	613b      	str	r3, [r7, #16]
      break;
 800348a:	e002      	b.n	8003492 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800348c:	4b05      	ldr	r3, [pc, #20]	@ (80034a4 <HAL_RCC_GetSysClockFreq+0x98>)
 800348e:	613b      	str	r3, [r7, #16]
      break;
 8003490:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003492:	693b      	ldr	r3, [r7, #16]
}
 8003494:	4618      	mov	r0, r3
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40021000 	.word	0x40021000
 80034a4:	007a1200 	.word	0x007a1200
 80034a8:	08009db4 	.word	0x08009db4
 80034ac:	08009dc4 	.word	0x08009dc4
 80034b0:	003d0900 	.word	0x003d0900

080034b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034b8:	4b02      	ldr	r3, [pc, #8]	@ (80034c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	bc80      	pop	{r7}
 80034c2:	4770      	bx	lr
 80034c4:	20000000 	.word	0x20000000

080034c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034cc:	f7ff fff2 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034d0:	4602      	mov	r2, r0
 80034d2:	4b05      	ldr	r3, [pc, #20]	@ (80034e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	0a1b      	lsrs	r3, r3, #8
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	4903      	ldr	r1, [pc, #12]	@ (80034ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80034de:	5ccb      	ldrb	r3, [r1, r3]
 80034e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	40021000 	.word	0x40021000
 80034ec:	08009dac 	.word	0x08009dac

080034f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034f4:	f7ff ffde 	bl	80034b4 <HAL_RCC_GetHCLKFreq>
 80034f8:	4602      	mov	r2, r0
 80034fa:	4b05      	ldr	r3, [pc, #20]	@ (8003510 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	0adb      	lsrs	r3, r3, #11
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	4903      	ldr	r1, [pc, #12]	@ (8003514 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003506:	5ccb      	ldrb	r3, [r1, r3]
 8003508:	fa22 f303 	lsr.w	r3, r2, r3
}
 800350c:	4618      	mov	r0, r3
 800350e:	bd80      	pop	{r7, pc}
 8003510:	40021000 	.word	0x40021000
 8003514:	08009dac 	.word	0x08009dac

08003518 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800351c:	4b06      	ldr	r3, [pc, #24]	@ (8003538 <HAL_RCC_NMI_IRQHandler+0x20>)
 800351e:	689b      	ldr	r3, [r3, #8]
 8003520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003524:	2b80      	cmp	r3, #128	@ 0x80
 8003526:	d104      	bne.n	8003532 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003528:	f000 f828 	bl	800357c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800352c:	4b03      	ldr	r3, [pc, #12]	@ (800353c <HAL_RCC_NMI_IRQHandler+0x24>)
 800352e:	2280      	movs	r2, #128	@ 0x80
 8003530:	701a      	strb	r2, [r3, #0]
  }
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	40021000 	.word	0x40021000
 800353c:	4002100a 	.word	0x4002100a

08003540 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003548:	4b0a      	ldr	r3, [pc, #40]	@ (8003574 <RCC_Delay+0x34>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	4a0a      	ldr	r2, [pc, #40]	@ (8003578 <RCC_Delay+0x38>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0a5b      	lsrs	r3, r3, #9
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	fb02 f303 	mul.w	r3, r2, r3
 800355a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800355c:	bf00      	nop
  }
  while (Delay --);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	1e5a      	subs	r2, r3, #1
 8003562:	60fa      	str	r2, [r7, #12]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d1f9      	bne.n	800355c <RCC_Delay+0x1c>
}
 8003568:	bf00      	nop
 800356a:	bf00      	nop
 800356c:	3714      	adds	r7, #20
 800356e:	46bd      	mov	sp, r7
 8003570:	bc80      	pop	{r7}
 8003572:	4770      	bx	lr
 8003574:	20000000 	.word	0x20000000
 8003578:	10624dd3 	.word	0x10624dd3

0800357c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
    the HAL_RCC_CSSCallback could be implemented in the user file
    */
}
 8003580:	bf00      	nop
 8003582:	46bd      	mov	sp, r7
 8003584:	bc80      	pop	{r7}
 8003586:	4770      	bx	lr

08003588 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003590:	2300      	movs	r3, #0
 8003592:	613b      	str	r3, [r7, #16]
 8003594:	2300      	movs	r3, #0
 8003596:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0301 	and.w	r3, r3, #1
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d07d      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035a8:	4b4f      	ldr	r3, [pc, #316]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035aa:	69db      	ldr	r3, [r3, #28]
 80035ac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d10d      	bne.n	80035d0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b4:	4b4c      	ldr	r3, [pc, #304]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	4a4b      	ldr	r2, [pc, #300]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035ba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035be:	61d3      	str	r3, [r2, #28]
 80035c0:	4b49      	ldr	r3, [pc, #292]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035cc:	2301      	movs	r3, #1
 80035ce:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b46      	ldr	r3, [pc, #280]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d118      	bne.n	800360e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035dc:	4b43      	ldr	r3, [pc, #268]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a42      	ldr	r2, [pc, #264]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80035e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035e6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035e8:	f7fe fa5c 	bl	8001aa4 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	e008      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f0:	f7fe fa58 	bl	8001aa4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b64      	cmp	r3, #100	@ 0x64
 80035fc:	d901      	bls.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e06d      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003602:	4b3a      	ldr	r3, [pc, #232]	@ (80036ec <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800360e:	4b36      	ldr	r3, [pc, #216]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003616:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d02e      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	429a      	cmp	r2, r3
 800362a:	d027      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800362c:	4b2e      	ldr	r3, [pc, #184]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800362e:	6a1b      	ldr	r3, [r3, #32]
 8003630:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003634:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003636:	4b2e      	ldr	r3, [pc, #184]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003638:	2201      	movs	r2, #1
 800363a:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800363c:	4b2c      	ldr	r3, [pc, #176]	@ (80036f0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800363e:	2200      	movs	r2, #0
 8003640:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003642:	4a29      	ldr	r2, [pc, #164]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0301 	and.w	r3, r3, #1
 800364e:	2b00      	cmp	r3, #0
 8003650:	d014      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003652:	f7fe fa27 	bl	8001aa4 <HAL_GetTick>
 8003656:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003658:	e00a      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800365a:	f7fe fa23 	bl	8001aa4 <HAL_GetTick>
 800365e:	4602      	mov	r2, r0
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	1ad3      	subs	r3, r2, r3
 8003664:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003668:	4293      	cmp	r3, r2
 800366a:	d901      	bls.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e036      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003670:	4b1d      	ldr	r3, [pc, #116]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	f003 0302 	and.w	r3, r3, #2
 8003678:	2b00      	cmp	r3, #0
 800367a:	d0ee      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800367c:	4b1a      	ldr	r3, [pc, #104]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4917      	ldr	r1, [pc, #92]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800368a:	4313      	orrs	r3, r2
 800368c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800368e:	7dfb      	ldrb	r3, [r7, #23]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d105      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003694:	4b14      	ldr	r3, [pc, #80]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003696:	69db      	ldr	r3, [r3, #28]
 8003698:	4a13      	ldr	r2, [pc, #76]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800369a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800369e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80036ac:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0310 	and.w	r3, r3, #16
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3718      	adds	r7, #24
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000
 80036ec:	40007000 	.word	0x40007000
 80036f0:	42420440 	.word	0x42420440

080036f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e042      	b.n	800378c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d106      	bne.n	8003720 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7fe f89a 	bl	8001854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2224      	movs	r2, #36	@ 0x24
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003736:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f001 f8b9 	bl	80048b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	691a      	ldr	r2, [r3, #16]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800374c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	695a      	ldr	r2, [r3, #20]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800375c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68da      	ldr	r2, [r3, #12]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800376c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2220      	movs	r2, #32
 8003778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	3708      	adds	r7, #8
 8003790:	46bd      	mov	sp, r7
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b08a      	sub	sp, #40	@ 0x28
 8003798:	af02      	add	r7, sp, #8
 800379a:	60f8      	str	r0, [r7, #12]
 800379c:	60b9      	str	r1, [r7, #8]
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	4613      	mov	r3, r2
 80037a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b20      	cmp	r3, #32
 80037b2:	d16d      	bne.n	8003890 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <HAL_UART_Transmit+0x2c>
 80037ba:	88fb      	ldrh	r3, [r7, #6]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d101      	bne.n	80037c4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e066      	b.n	8003892 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2221      	movs	r2, #33	@ 0x21
 80037ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037d2:	f7fe f967 	bl	8001aa4 <HAL_GetTick>
 80037d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	88fa      	ldrh	r2, [r7, #6]
 80037dc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	88fa      	ldrh	r2, [r7, #6]
 80037e2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037ec:	d108      	bne.n	8003800 <HAL_UART_Transmit+0x6c>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d104      	bne.n	8003800 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80037f6:	2300      	movs	r3, #0
 80037f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	e003      	b.n	8003808 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003800:	68bb      	ldr	r3, [r7, #8]
 8003802:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003804:	2300      	movs	r3, #0
 8003806:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003808:	e02a      	b.n	8003860 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	2200      	movs	r2, #0
 8003812:	2180      	movs	r1, #128	@ 0x80
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 fd81 	bl	800431c <UART_WaitOnFlagUntilTimeout>
 800381a:	4603      	mov	r3, r0
 800381c:	2b00      	cmp	r3, #0
 800381e:	d001      	beq.n	8003824 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8003820:	2303      	movs	r3, #3
 8003822:	e036      	b.n	8003892 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d10b      	bne.n	8003842 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	881b      	ldrh	r3, [r3, #0]
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003838:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	3302      	adds	r3, #2
 800383e:	61bb      	str	r3, [r7, #24]
 8003840:	e007      	b.n	8003852 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	781a      	ldrb	r2, [r3, #0]
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003856:	b29b      	uxth	r3, r3
 8003858:	3b01      	subs	r3, #1
 800385a:	b29a      	uxth	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003864:	b29b      	uxth	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1cf      	bne.n	800380a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	697b      	ldr	r3, [r7, #20]
 8003870:	2200      	movs	r2, #0
 8003872:	2140      	movs	r1, #64	@ 0x40
 8003874:	68f8      	ldr	r0, [r7, #12]
 8003876:	f000 fd51 	bl	800431c <UART_WaitOnFlagUntilTimeout>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e006      	b.n	8003892 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
	...

0800389c <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b08c      	sub	sp, #48	@ 0x30
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	60f8      	str	r0, [r7, #12]
 80038a4:	60b9      	str	r1, [r7, #8]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038b0:	b2db      	uxtb	r3, r3
 80038b2:	2b20      	cmp	r3, #32
 80038b4:	d156      	bne.n	8003964 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_UART_Transmit_DMA+0x26>
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e04f      	b.n	8003966 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80038c6:	68ba      	ldr	r2, [r7, #8]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	88fa      	ldrh	r2, [r7, #6]
 80038d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	88fa      	ldrh	r2, [r7, #6]
 80038d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2200      	movs	r2, #0
 80038dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2221      	movs	r2, #33	@ 0x21
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ea:	4a21      	ldr	r2, [pc, #132]	@ (8003970 <HAL_UART_Transmit_DMA+0xd4>)
 80038ec:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f2:	4a20      	ldr	r2, [pc, #128]	@ (8003974 <HAL_UART_Transmit_DMA+0xd8>)
 80038f4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	4a1f      	ldr	r2, [pc, #124]	@ (8003978 <HAL_UART_Transmit_DMA+0xdc>)
 80038fc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003902:	2200      	movs	r2, #0
 8003904:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8003906:	f107 0308 	add.w	r3, r7, #8
 800390a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8003910:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003912:	6819      	ldr	r1, [r3, #0]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3304      	adds	r3, #4
 800391a:	461a      	mov	r2, r3
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	f7fe fdf5 	bl	800250c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800392a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3314      	adds	r3, #20
 8003932:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	69bb      	ldr	r3, [r7, #24]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	617b      	str	r3, [r7, #20]
   return(result);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003942:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3314      	adds	r3, #20
 800394a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800394c:	627a      	str	r2, [r7, #36]	@ 0x24
 800394e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003950:	6a39      	ldr	r1, [r7, #32]
 8003952:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003954:	e841 2300 	strex	r3, r2, [r1]
 8003958:	61fb      	str	r3, [r7, #28]
   return(result);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d1e5      	bne.n	800392c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8003960:	2300      	movs	r3, #0
 8003962:	e000      	b.n	8003966 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8003964:	2302      	movs	r3, #2
  }
}
 8003966:	4618      	mov	r0, r3
 8003968:	3730      	adds	r7, #48	@ 0x30
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	0800406b 	.word	0x0800406b
 8003974:	08004105 	.word	0x08004105
 8003978:	08004289 	.word	0x08004289

0800397c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b084      	sub	sp, #16
 8003980:	af00      	add	r7, sp, #0
 8003982:	60f8      	str	r0, [r7, #12]
 8003984:	60b9      	str	r1, [r7, #8]
 8003986:	4613      	mov	r3, r2
 8003988:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	d112      	bne.n	80039bc <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d002      	beq.n	80039a2 <HAL_UART_Receive_DMA+0x26>
 800399c:	88fb      	ldrh	r3, [r7, #6]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e00b      	b.n	80039be <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80039ac:	88fb      	ldrh	r3, [r7, #6]
 80039ae:	461a      	mov	r2, r3
 80039b0:	68b9      	ldr	r1, [r7, #8]
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fd20 	bl	80043f8 <UART_Start_Receive_DMA>
 80039b8:	4603      	mov	r3, r0
 80039ba:	e000      	b.n	80039be <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80039bc:	2302      	movs	r3, #2
  }
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b09a      	sub	sp, #104	@ 0x68
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	330c      	adds	r3, #12
 80039d4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039d6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039d8:	e853 3f00 	ldrex	r3, [r3]
 80039dc:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80039de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80039e4:	667b      	str	r3, [r7, #100]	@ 0x64
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	330c      	adds	r3, #12
 80039ec:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80039ee:	657a      	str	r2, [r7, #84]	@ 0x54
 80039f0:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80039f4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80039f6:	e841 2300 	strex	r3, r2, [r1]
 80039fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80039fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1e5      	bne.n	80039ce <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	3314      	adds	r3, #20
 8003a08:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a0c:	e853 3f00 	ldrex	r3, [r3]
 8003a10:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a14:	f023 0301 	bic.w	r3, r3, #1
 8003a18:	663b      	str	r3, [r7, #96]	@ 0x60
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	3314      	adds	r3, #20
 8003a20:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003a22:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a24:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a26:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a2a:	e841 2300 	strex	r3, r2, [r1]
 8003a2e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1e5      	bne.n	8003a02 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d119      	bne.n	8003a72 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	330c      	adds	r3, #12
 8003a44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a46:	6a3b      	ldr	r3, [r7, #32]
 8003a48:	e853 3f00 	ldrex	r3, [r3]
 8003a4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	f023 0310 	bic.w	r3, r3, #16
 8003a54:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	330c      	adds	r3, #12
 8003a5c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003a5e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a60:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a66:	e841 2300 	strex	r3, r2, [r1]
 8003a6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d1e5      	bne.n	8003a3e <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	695b      	ldr	r3, [r3, #20]
 8003a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d036      	beq.n	8003aee <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	3314      	adds	r3, #20
 8003a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	e853 3f00 	ldrex	r3, [r3]
 8003a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003a96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3314      	adds	r3, #20
 8003a9e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003aa0:	61ba      	str	r2, [r7, #24]
 8003aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa4:	6979      	ldr	r1, [r7, #20]
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	e841 2300 	strex	r3, r2, [r1]
 8003aac:	613b      	str	r3, [r7, #16]
   return(result);
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d1e5      	bne.n	8003a80 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d018      	beq.n	8003aee <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	635a      	str	r2, [r3, #52]	@ 0x34

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f7fe fd7f 	bl	80025cc <HAL_DMA_Abort>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f7fe ff31 	bl	8002940 <HAL_DMA_GetError>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b20      	cmp	r3, #32
 8003ae2:	d104      	bne.n	8003aee <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2210      	movs	r2, #16
 8003ae8:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e00a      	b.n	8003b04 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003b02:	2300      	movs	r3, #0
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3768      	adds	r7, #104	@ 0x68
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b0ba      	sub	sp, #232	@ 0xe8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	695b      	ldr	r3, [r3, #20]
 8003b2e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003b32:	2300      	movs	r3, #0
 8003b34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003b4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d10f      	bne.n	8003b72 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0320 	and.w	r3, r3, #32
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_UART_IRQHandler+0x66>
 8003b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d003      	beq.n	8003b72 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f000 fde2 	bl	8004734 <UART_Receive_IT>
      return;
 8003b70:	e25b      	b.n	800402a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003b72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 80de 	beq.w	8003d38 <HAL_UART_IRQHandler+0x22c>
 8003b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d106      	bne.n	8003b96 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	f000 80d1 	beq.w	8003d38 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b9a:	f003 0301 	and.w	r3, r3, #1
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00b      	beq.n	8003bba <HAL_UART_IRQHandler+0xae>
 8003ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d005      	beq.n	8003bba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bb2:	f043 0201 	orr.w	r2, r3, #1
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bbe:	f003 0304 	and.w	r3, r3, #4
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00b      	beq.n	8003bde <HAL_UART_IRQHandler+0xd2>
 8003bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bca:	f003 0301 	and.w	r3, r3, #1
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d005      	beq.n	8003bde <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd6:	f043 0202 	orr.w	r2, r3, #2
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003bde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00b      	beq.n	8003c02 <HAL_UART_IRQHandler+0xf6>
 8003bea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d005      	beq.n	8003c02 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bfa:	f043 0204 	orr.w	r2, r3, #4
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c06:	f003 0308 	and.w	r3, r3, #8
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d011      	beq.n	8003c32 <HAL_UART_IRQHandler+0x126>
 8003c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c12:	f003 0320 	and.w	r3, r3, #32
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003c1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c1e:	f003 0301 	and.w	r3, r3, #1
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d005      	beq.n	8003c32 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c2a:	f043 0208 	orr.w	r2, r3, #8
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 81f2 	beq.w	8004020 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003c3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c40:	f003 0320 	and.w	r3, r3, #32
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d008      	beq.n	8003c5a <HAL_UART_IRQHandler+0x14e>
 8003c48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c4c:	f003 0320 	and.w	r3, r3, #32
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	f000 fd6d 	bl	8004734 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	695b      	ldr	r3, [r3, #20]
 8003c60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	bf14      	ite	ne
 8003c68:	2301      	movne	r3, #1
 8003c6a:	2300      	moveq	r3, #0
 8003c6c:	b2db      	uxtb	r3, r3
 8003c6e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d103      	bne.n	8003c86 <HAL_UART_IRQHandler+0x17a>
 8003c7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d04f      	beq.n	8003d26 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fc77 	bl	800457a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d041      	beq.n	8003d1e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	3314      	adds	r3, #20
 8003ca0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003ca8:	e853 3f00 	ldrex	r3, [r3]
 8003cac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cb4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3314      	adds	r3, #20
 8003cc2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cc6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003cd2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003cd6:	e841 2300 	strex	r3, r2, [r1]
 8003cda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cde:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1d9      	bne.n	8003c9a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d013      	beq.n	8003d16 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8003eec <HAL_UART_IRQHandler+0x3e0>)
 8003cf4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f7fe fca2 	bl	8002644 <HAL_DMA_Abort_IT>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d016      	beq.n	8003d34 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003d10:	4610      	mov	r0, r2
 8003d12:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d14:	e00e      	b.n	8003d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f001 f95b 	bl	8004fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d1c:	e00a      	b.n	8003d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f001 f957 	bl	8004fd2 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e006      	b.n	8003d34 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f001 f953 	bl	8004fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003d32:	e175      	b.n	8004020 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	bf00      	nop
    return;
 8003d36:	e173      	b.n	8004020 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	f040 814f 	bne.w	8003fe0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d46:	f003 0310 	and.w	r3, r3, #16
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 8148 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d54:	f003 0310 	and.w	r3, r3, #16
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	f000 8141 	beq.w	8003fe0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60bb      	str	r3, [r7, #8]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	60bb      	str	r3, [r7, #8]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	60bb      	str	r3, [r7, #8]
 8003d72:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f000 80b6 	beq.w	8003ef0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d90:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	f000 8145 	beq.w	8004024 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003da2:	429a      	cmp	r2, r3
 8003da4:	f080 813e 	bcs.w	8004024 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dae:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	2b20      	cmp	r3, #32
 8003db8:	f000 8088 	beq.w	8003ecc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	330c      	adds	r3, #12
 8003dc2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003dd2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003dd6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dda:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	330c      	adds	r3, #12
 8003de4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003de8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003dec:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003df0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003df4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003df8:	e841 2300 	strex	r3, r2, [r1]
 8003dfc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e00:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d1d9      	bne.n	8003dbc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3314      	adds	r3, #20
 8003e0e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e12:	e853 3f00 	ldrex	r3, [r3]
 8003e16:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e18:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e1a:	f023 0301 	bic.w	r3, r3, #1
 8003e1e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	3314      	adds	r3, #20
 8003e28:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e2c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e30:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e32:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e34:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e38:	e841 2300 	strex	r3, r2, [r1]
 8003e3c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e3e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d1e1      	bne.n	8003e08 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	3314      	adds	r3, #20
 8003e4a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e4e:	e853 3f00 	ldrex	r3, [r3]
 8003e52:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e56:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e5a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	3314      	adds	r3, #20
 8003e64:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e68:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e6a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e6e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e70:	e841 2300 	strex	r3, r2, [r1]
 8003e74:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e76:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d1e3      	bne.n	8003e44 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2220      	movs	r2, #32
 8003e80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	330c      	adds	r3, #12
 8003e90:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003e94:	e853 3f00 	ldrex	r3, [r3]
 8003e98:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003e9c:	f023 0310 	bic.w	r3, r3, #16
 8003ea0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003eae:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003eb0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003eb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003eb6:	e841 2300 	strex	r3, r2, [r1]
 8003eba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ebc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d1e3      	bne.n	8003e8a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fe fb80 	bl	80025cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2202      	movs	r2, #2
 8003ed0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003eda:	b29b      	uxth	r3, r3
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	b29b      	uxth	r3, r3
 8003ee0:	4619      	mov	r1, r3
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f000 f8b6 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ee8:	e09c      	b.n	8004024 <HAL_UART_IRQHandler+0x518>
 8003eea:	bf00      	nop
 8003eec:	0800463f 	.word	0x0800463f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 808e 	beq.w	8004028 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003f0c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 8089 	beq.w	8004028 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	330c      	adds	r3, #12
 8003f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f20:	e853 3f00 	ldrex	r3, [r3]
 8003f24:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f28:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	330c      	adds	r3, #12
 8003f36:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003f3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003f3c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f40:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f42:	e841 2300 	strex	r3, r2, [r1]
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d1e3      	bne.n	8003f16 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	3314      	adds	r3, #20
 8003f54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f58:	e853 3f00 	ldrex	r3, [r3]
 8003f5c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f5e:	6a3b      	ldr	r3, [r7, #32]
 8003f60:	f023 0301 	bic.w	r3, r3, #1
 8003f64:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	3314      	adds	r3, #20
 8003f6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f72:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e3      	bne.n	8003f4e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	330c      	adds	r3, #12
 8003f9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	e853 3f00 	ldrex	r3, [r3]
 8003fa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f023 0310 	bic.w	r3, r3, #16
 8003faa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	330c      	adds	r3, #12
 8003fb4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003fb8:	61fa      	str	r2, [r7, #28]
 8003fba:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbc:	69b9      	ldr	r1, [r7, #24]
 8003fbe:	69fa      	ldr	r2, [r7, #28]
 8003fc0:	e841 2300 	strex	r3, r2, [r1]
 8003fc4:	617b      	str	r3, [r7, #20]
   return(result);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1e3      	bne.n	8003f94 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2202      	movs	r2, #2
 8003fd0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fd2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fd6:	4619      	mov	r1, r3
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 f83b 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003fde:	e023      	b.n	8004028 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003fe0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fe4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d009      	beq.n	8004000 <HAL_UART_IRQHandler+0x4f4>
 8003fec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ff0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d003      	beq.n	8004000 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fb34 	bl	8004666 <UART_Transmit_IT>
    return;
 8003ffe:	e014      	b.n	800402a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00e      	beq.n	800402a <HAL_UART_IRQHandler+0x51e>
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fb73 	bl	8004704 <UART_EndTransmit_IT>
    return;
 800401e:	e004      	b.n	800402a <HAL_UART_IRQHandler+0x51e>
    return;
 8004020:	bf00      	nop
 8004022:	e002      	b.n	800402a <HAL_UART_IRQHandler+0x51e>
      return;
 8004024:	bf00      	nop
 8004026:	e000      	b.n	800402a <HAL_UART_IRQHandler+0x51e>
      return;
 8004028:	bf00      	nop
  }
}
 800402a:	37e8      	adds	r7, #232	@ 0xe8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004038:	bf00      	nop
 800403a:	370c      	adds	r7, #12
 800403c:	46bd      	mov	sp, r7
 800403e:	bc80      	pop	{r7}
 8004040:	4770      	bx	lr

08004042 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004042:	b480      	push	{r7}
 8004044:	b083      	sub	sp, #12
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800404a:	bf00      	nop
 800404c:	370c      	adds	r7, #12
 800404e:	46bd      	mov	sp, r7
 8004050:	bc80      	pop	{r7}
 8004052:	4770      	bx	lr

08004054 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	6078      	str	r0, [r7, #4]
 800405c:	460b      	mov	r3, r1
 800405e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004060:	bf00      	nop
 8004062:	370c      	adds	r7, #12
 8004064:	46bd      	mov	sp, r7
 8004066:	bc80      	pop	{r7}
 8004068:	4770      	bx	lr

0800406a <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800406a:	b580      	push	{r7, lr}
 800406c:	b090      	sub	sp, #64	@ 0x40
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004076:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f003 0320 	and.w	r3, r3, #32
 8004082:	2b00      	cmp	r3, #0
 8004084:	d137      	bne.n	80040f6 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004088:	2200      	movs	r2, #0
 800408a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800408c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	3314      	adds	r3, #20
 8004092:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004096:	e853 3f00 	ldrex	r3, [r3]
 800409a:	623b      	str	r3, [r7, #32]
   return(result);
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80040a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80040a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	3314      	adds	r3, #20
 80040aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80040ac:	633a      	str	r2, [r7, #48]	@ 0x30
 80040ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040b4:	e841 2300 	strex	r3, r2, [r1]
 80040b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1e5      	bne.n	800408c <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	330c      	adds	r3, #12
 80040c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	e853 3f00 	ldrex	r3, [r3]
 80040ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80040d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	330c      	adds	r3, #12
 80040de:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80040e0:	61fa      	str	r2, [r7, #28]
 80040e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	69b9      	ldr	r1, [r7, #24]
 80040e6:	69fa      	ldr	r2, [r7, #28]
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	617b      	str	r3, [r7, #20]
   return(result);
 80040ee:	697b      	ldr	r3, [r7, #20]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e5      	bne.n	80040c0 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80040f4:	e002      	b.n	80040fc <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80040f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80040f8:	f000 ff47 	bl	8004f8a <HAL_UART_TxCpltCallback>
}
 80040fc:	bf00      	nop
 80040fe:	3740      	adds	r7, #64	@ 0x40
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}

08004104 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004110:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f7ff ff8c 	bl	8004030 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004118:	bf00      	nop
 800411a:	3710      	adds	r7, #16
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b09c      	sub	sp, #112	@ 0x70
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800412c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0320 	and.w	r3, r3, #32
 8004138:	2b00      	cmp	r3, #0
 800413a:	d172      	bne.n	8004222 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800413c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800413e:	2200      	movs	r2, #0
 8004140:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004142:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	330c      	adds	r3, #12
 8004148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800414a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004158:	66bb      	str	r3, [r7, #104]	@ 0x68
 800415a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	330c      	adds	r3, #12
 8004160:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8004162:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004164:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004166:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004168:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800416a:	e841 2300 	strex	r3, r2, [r1]
 800416e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004170:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004172:	2b00      	cmp	r3, #0
 8004174:	d1e5      	bne.n	8004142 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004176:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3314      	adds	r3, #20
 800417c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800417e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004180:	e853 3f00 	ldrex	r3, [r3]
 8004184:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004186:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004188:	f023 0301 	bic.w	r3, r3, #1
 800418c:	667b      	str	r3, [r7, #100]	@ 0x64
 800418e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	3314      	adds	r3, #20
 8004194:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004196:	647a      	str	r2, [r7, #68]	@ 0x44
 8004198:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800419a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800419c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800419e:	e841 2300 	strex	r3, r2, [r1]
 80041a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80041a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d1e5      	bne.n	8004176 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	3314      	adds	r3, #20
 80041b0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041b4:	e853 3f00 	ldrex	r3, [r3]
 80041b8:	623b      	str	r3, [r7, #32]
   return(result);
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80041c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	3314      	adds	r3, #20
 80041c8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80041ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80041cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041d2:	e841 2300 	strex	r3, r2, [r1]
 80041d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80041d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d1e5      	bne.n	80041aa <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80041de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041e6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d119      	bne.n	8004222 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	330c      	adds	r3, #12
 80041f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f023 0310 	bic.w	r3, r3, #16
 8004204:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004206:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800420e:	61fa      	str	r2, [r7, #28]
 8004210:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	69b9      	ldr	r1, [r7, #24]
 8004214:	69fa      	ldr	r2, [r7, #28]
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	617b      	str	r3, [r7, #20]
   return(result);
 800421c:	697b      	ldr	r3, [r7, #20]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e5      	bne.n	80041ee <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004222:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004224:	2200      	movs	r2, #0
 8004226:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004228:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800422a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800422c:	2b01      	cmp	r3, #1
 800422e:	d106      	bne.n	800423e <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004230:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004232:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004234:	4619      	mov	r1, r3
 8004236:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004238:	f7ff ff0c 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800423c:	e002      	b.n	8004244 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800423e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004240:	f000 feb5 	bl	8004fae <HAL_UART_RxCpltCallback>
}
 8004244:	bf00      	nop
 8004246:	3770      	adds	r7, #112	@ 0x70
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004258:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	2201      	movs	r2, #1
 800425e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004264:	2b01      	cmp	r3, #1
 8004266:	d108      	bne.n	800427a <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800426c:	085b      	lsrs	r3, r3, #1
 800426e:	b29b      	uxth	r3, r3
 8004270:	4619      	mov	r1, r3
 8004272:	68f8      	ldr	r0, [r7, #12]
 8004274:	f7ff feee 	bl	8004054 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004278:	e002      	b.n	8004280 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f7ff fee1 	bl	8004042 <HAL_UART_RxHalfCpltCallback>
}
 8004280:	bf00      	nop
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004290:	2300      	movs	r3, #0
 8004292:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004298:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800429a:	68bb      	ldr	r3, [r7, #8]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	695b      	ldr	r3, [r3, #20]
 80042a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf14      	ite	ne
 80042a8:	2301      	movne	r3, #1
 80042aa:	2300      	moveq	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b21      	cmp	r3, #33	@ 0x21
 80042ba:	d108      	bne.n	80042ce <UART_DMAError+0x46>
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2200      	movs	r2, #0
 80042c6:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80042c8:	68b8      	ldr	r0, [r7, #8]
 80042ca:	f000 f92f 	bl	800452c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	695b      	ldr	r3, [r3, #20]
 80042d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d8:	2b00      	cmp	r3, #0
 80042da:	bf14      	ite	ne
 80042dc:	2301      	movne	r3, #1
 80042de:	2300      	moveq	r3, #0
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	2b22      	cmp	r3, #34	@ 0x22
 80042ee:	d108      	bne.n	8004302 <UART_DMAError+0x7a>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	2200      	movs	r2, #0
 80042fa:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80042fc:	68b8      	ldr	r0, [r7, #8]
 80042fe:	f000 f93c 	bl	800457a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004306:	f043 0210 	orr.w	r2, r3, #16
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800430e:	68b8      	ldr	r0, [r7, #8]
 8004310:	f000 fe5f 	bl	8004fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004314:	bf00      	nop
 8004316:	3710      	adds	r7, #16
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b090      	sub	sp, #64	@ 0x40
 8004320:	af00      	add	r7, sp, #0
 8004322:	60f8      	str	r0, [r7, #12]
 8004324:	60b9      	str	r1, [r7, #8]
 8004326:	603b      	str	r3, [r7, #0]
 8004328:	4613      	mov	r3, r2
 800432a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432c:	e050      	b.n	80043d0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800432e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004334:	d04c      	beq.n	80043d0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004336:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004338:	2b00      	cmp	r3, #0
 800433a:	d007      	beq.n	800434c <UART_WaitOnFlagUntilTimeout+0x30>
 800433c:	f7fd fbb2 	bl	8001aa4 <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004348:	429a      	cmp	r2, r3
 800434a:	d241      	bcs.n	80043d0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	330c      	adds	r3, #12
 8004352:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	e853 3f00 	ldrex	r3, [r3]
 800435a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435e:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8004362:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	330c      	adds	r3, #12
 800436a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800436c:	637a      	str	r2, [r7, #52]	@ 0x34
 800436e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004370:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004372:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004374:	e841 2300 	strex	r3, r2, [r1]
 8004378:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800437a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e5      	bne.n	800434c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	3314      	adds	r3, #20
 8004386:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	e853 3f00 	ldrex	r3, [r3]
 800438e:	613b      	str	r3, [r7, #16]
   return(result);
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	f023 0301 	bic.w	r3, r3, #1
 8004396:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3314      	adds	r3, #20
 800439e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043a0:	623a      	str	r2, [r7, #32]
 80043a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043a4:	69f9      	ldr	r1, [r7, #28]
 80043a6:	6a3a      	ldr	r2, [r7, #32]
 80043a8:	e841 2300 	strex	r3, r2, [r1]
 80043ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d1e5      	bne.n	8004380 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	2220      	movs	r2, #32
 80043b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	2220      	movs	r2, #32
 80043c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 80043cc:	2303      	movs	r3, #3
 80043ce:	e00f      	b.n	80043f0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	681a      	ldr	r2, [r3, #0]
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	4013      	ands	r3, r2
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	429a      	cmp	r2, r3
 80043de:	bf0c      	ite	eq
 80043e0:	2301      	moveq	r3, #1
 80043e2:	2300      	movne	r3, #0
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	461a      	mov	r2, r3
 80043e8:	79fb      	ldrb	r3, [r7, #7]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d09f      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3740      	adds	r7, #64	@ 0x40
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b098      	sub	sp, #96	@ 0x60
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	4613      	mov	r3, r2
 8004404:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	88fa      	ldrh	r2, [r7, #6]
 8004410:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	2222      	movs	r2, #34	@ 0x22
 800441c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004424:	4a3e      	ldr	r2, [pc, #248]	@ (8004520 <UART_Start_Receive_DMA+0x128>)
 8004426:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800442c:	4a3d      	ldr	r2, [pc, #244]	@ (8004524 <UART_Start_Receive_DMA+0x12c>)
 800442e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004434:	4a3c      	ldr	r2, [pc, #240]	@ (8004528 <UART_Start_Receive_DMA+0x130>)
 8004436:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443c:	2200      	movs	r2, #0
 800443e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004440:	f107 0308 	add.w	r3, r7, #8
 8004444:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	3304      	adds	r3, #4
 8004450:	4619      	mov	r1, r3
 8004452:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	88fb      	ldrh	r3, [r7, #6]
 8004458:	f7fe f858 	bl	800250c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	613b      	str	r3, [r7, #16]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	613b      	str	r3, [r7, #16]
 8004470:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	691b      	ldr	r3, [r3, #16]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d019      	beq.n	80044ae <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	330c      	adds	r3, #12
 8004480:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800448a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800448c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004490:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	330c      	adds	r3, #12
 8004498:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800449a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800449c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80044a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80044a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	3314      	adds	r3, #20
 80044b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044b8:	e853 3f00 	ldrex	r3, [r3]
 80044bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80044be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044c0:	f043 0301 	orr.w	r3, r3, #1
 80044c4:	657b      	str	r3, [r7, #84]	@ 0x54
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	3314      	adds	r3, #20
 80044cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80044ce:	63ba      	str	r2, [r7, #56]	@ 0x38
 80044d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d2:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80044d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044d6:	e841 2300 	strex	r3, r2, [r1]
 80044da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80044dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d1e5      	bne.n	80044ae <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	3314      	adds	r3, #20
 80044e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044ea:	69bb      	ldr	r3, [r7, #24]
 80044ec:	e853 3f00 	ldrex	r3, [r3]
 80044f0:	617b      	str	r3, [r7, #20]
   return(result);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044f8:	653b      	str	r3, [r7, #80]	@ 0x50
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8004502:	627a      	str	r2, [r7, #36]	@ 0x24
 8004504:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	6a39      	ldr	r1, [r7, #32]
 8004508:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800450a:	e841 2300 	strex	r3, r2, [r1]
 800450e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004510:	69fb      	ldr	r3, [r7, #28]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d1e5      	bne.n	80044e2 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004516:	2300      	movs	r3, #0
}
 8004518:	4618      	mov	r0, r3
 800451a:	3760      	adds	r7, #96	@ 0x60
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	08004121 	.word	0x08004121
 8004524:	0800424d 	.word	0x0800424d
 8004528:	08004289 	.word	0x08004289

0800452c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800452c:	b480      	push	{r7}
 800452e:	b089      	sub	sp, #36	@ 0x24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	330c      	adds	r3, #12
 800453a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	e853 3f00 	ldrex	r3, [r3]
 8004542:	60bb      	str	r3, [r7, #8]
   return(result);
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800454a:	61fb      	str	r3, [r7, #28]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	330c      	adds	r3, #12
 8004552:	69fa      	ldr	r2, [r7, #28]
 8004554:	61ba      	str	r2, [r7, #24]
 8004556:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004558:	6979      	ldr	r1, [r7, #20]
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	e841 2300 	strex	r3, r2, [r1]
 8004560:	613b      	str	r3, [r7, #16]
   return(result);
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1e5      	bne.n	8004534 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8004570:	bf00      	nop
 8004572:	3724      	adds	r7, #36	@ 0x24
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr

0800457a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800457a:	b480      	push	{r7}
 800457c:	b095      	sub	sp, #84	@ 0x54
 800457e:	af00      	add	r7, sp, #0
 8004580:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	330c      	adds	r3, #12
 8004588:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800458a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800458c:	e853 3f00 	ldrex	r3, [r3]
 8004590:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004598:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	330c      	adds	r3, #12
 80045a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045a2:	643a      	str	r2, [r7, #64]	@ 0x40
 80045a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045a8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045aa:	e841 2300 	strex	r3, r2, [r1]
 80045ae:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d1e5      	bne.n	8004582 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	3314      	adds	r3, #20
 80045bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045be:	6a3b      	ldr	r3, [r7, #32]
 80045c0:	e853 3f00 	ldrex	r3, [r3]
 80045c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	f023 0301 	bic.w	r3, r3, #1
 80045cc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	3314      	adds	r3, #20
 80045d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045d6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045da:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045dc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045de:	e841 2300 	strex	r3, r2, [r1]
 80045e2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d1e5      	bne.n	80045b6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d119      	bne.n	8004626 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	330c      	adds	r3, #12
 80045f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	e853 3f00 	ldrex	r3, [r3]
 8004600:	60bb      	str	r3, [r7, #8]
   return(result);
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f023 0310 	bic.w	r3, r3, #16
 8004608:	647b      	str	r3, [r7, #68]	@ 0x44
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	330c      	adds	r3, #12
 8004610:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004612:	61ba      	str	r2, [r7, #24]
 8004614:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	e841 2300 	strex	r3, r2, [r1]
 800461e:	613b      	str	r3, [r7, #16]
   return(result);
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d1e5      	bne.n	80045f2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2220      	movs	r2, #32
 800462a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004634:	bf00      	nop
 8004636:	3754      	adds	r7, #84	@ 0x54
 8004638:	46bd      	mov	sp, r7
 800463a:	bc80      	pop	{r7}
 800463c:	4770      	bx	lr

0800463e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800463e:	b580      	push	{r7, lr}
 8004640:	b084      	sub	sp, #16
 8004642:	af00      	add	r7, sp, #0
 8004644:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800464a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2200      	movs	r2, #0
 8004656:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f000 fcba 	bl	8004fd2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800465e:	bf00      	nop
 8004660:	3710      	adds	r7, #16
 8004662:	46bd      	mov	sp, r7
 8004664:	bd80      	pop	{r7, pc}

08004666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004666:	b480      	push	{r7}
 8004668:	b085      	sub	sp, #20
 800466a:	af00      	add	r7, sp, #0
 800466c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b21      	cmp	r3, #33	@ 0x21
 8004678:	d13e      	bne.n	80046f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004682:	d114      	bne.n	80046ae <UART_Transmit_IT+0x48>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	691b      	ldr	r3, [r3, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d110      	bne.n	80046ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	881b      	ldrh	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	1c9a      	adds	r2, r3, #2
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	621a      	str	r2, [r3, #32]
 80046ac:	e008      	b.n	80046c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	1c59      	adds	r1, r3, #1
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	6211      	str	r1, [r2, #32]
 80046b8:	781a      	ldrb	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4619      	mov	r1, r3
 80046ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10f      	bne.n	80046f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	68da      	ldr	r2, [r3, #12]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68da      	ldr	r2, [r3, #12]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046f4:	2300      	movs	r3, #0
 80046f6:	e000      	b.n	80046fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046f8:	2302      	movs	r3, #2
  }
}
 80046fa:	4618      	mov	r0, r3
 80046fc:	3714      	adds	r7, #20
 80046fe:	46bd      	mov	sp, r7
 8004700:	bc80      	pop	{r7}
 8004702:	4770      	bx	lr

08004704 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	68da      	ldr	r2, [r3, #12]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800471a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2220      	movs	r2, #32
 8004720:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004724:	6878      	ldr	r0, [r7, #4]
 8004726:	f000 fc30 	bl	8004f8a <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800472a:	2300      	movs	r3, #0
}
 800472c:	4618      	mov	r0, r3
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b08c      	sub	sp, #48	@ 0x30
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004742:	b2db      	uxtb	r3, r3
 8004744:	2b22      	cmp	r3, #34	@ 0x22
 8004746:	f040 80ae 	bne.w	80048a6 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004752:	d117      	bne.n	8004784 <UART_Receive_IT+0x50>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d113      	bne.n	8004784 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004764:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	b29b      	uxth	r3, r3
 800476e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004772:	b29a      	uxth	r2, r3
 8004774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004776:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477c:	1c9a      	adds	r2, r3, #2
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	629a      	str	r2, [r3, #40]	@ 0x28
 8004782:	e026      	b.n	80047d2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	689b      	ldr	r3, [r3, #8]
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004796:	d007      	beq.n	80047a8 <UART_Receive_IT+0x74>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d10a      	bne.n	80047b6 <UART_Receive_IT+0x82>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d106      	bne.n	80047b6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	b2da      	uxtb	r2, r3
 80047b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047b2:	701a      	strb	r2, [r3, #0]
 80047b4:	e008      	b.n	80047c8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047c2:	b2da      	uxtb	r2, r3
 80047c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047cc:	1c5a      	adds	r2, r3, #1
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	3b01      	subs	r3, #1
 80047da:	b29b      	uxth	r3, r3
 80047dc:	687a      	ldr	r2, [r7, #4]
 80047de:	4619      	mov	r1, r3
 80047e0:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d15d      	bne.n	80048a2 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68da      	ldr	r2, [r3, #12]
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	f022 0220 	bic.w	r2, r2, #32
 80047f4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	68da      	ldr	r2, [r3, #12]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004804:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	695a      	ldr	r2, [r3, #20]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2220      	movs	r2, #32
 800481a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2200      	movs	r2, #0
 8004822:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004828:	2b01      	cmp	r3, #1
 800482a:	d135      	bne.n	8004898 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2200      	movs	r2, #0
 8004830:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	330c      	adds	r3, #12
 8004838:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	e853 3f00 	ldrex	r3, [r3]
 8004840:	613b      	str	r3, [r7, #16]
   return(result);
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	f023 0310 	bic.w	r3, r3, #16
 8004848:	627b      	str	r3, [r7, #36]	@ 0x24
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	330c      	adds	r3, #12
 8004850:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004852:	623a      	str	r2, [r7, #32]
 8004854:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004856:	69f9      	ldr	r1, [r7, #28]
 8004858:	6a3a      	ldr	r2, [r7, #32]
 800485a:	e841 2300 	strex	r3, r2, [r1]
 800485e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d1e5      	bne.n	8004832 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	2b10      	cmp	r3, #16
 8004872:	d10a      	bne.n	800488a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004874:	2300      	movs	r3, #0
 8004876:	60fb      	str	r3, [r7, #12]
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	60fb      	str	r3, [r7, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800488e:	4619      	mov	r1, r3
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff fbdf 	bl	8004054 <HAL_UARTEx_RxEventCallback>
 8004896:	e002      	b.n	800489e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f000 fb88 	bl	8004fae <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800489e:	2300      	movs	r3, #0
 80048a0:	e002      	b.n	80048a8 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	e000      	b.n	80048a8 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048a6:	2302      	movs	r3, #2
  }
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3730      	adds	r7, #48	@ 0x30
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}

080048b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	68da      	ldr	r2, [r3, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689a      	ldr	r2, [r3, #8]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	4313      	orrs	r3, r2
 80048de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68db      	ldr	r3, [r3, #12]
 80048e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80048ea:	f023 030c 	bic.w	r3, r3, #12
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6812      	ldr	r2, [r2, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	430b      	orrs	r3, r1
 80048f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	695b      	ldr	r3, [r3, #20]
 80048fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	699a      	ldr	r2, [r3, #24]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	430a      	orrs	r2, r1
 800490c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a2c      	ldr	r2, [pc, #176]	@ (80049c4 <UART_SetConfig+0x114>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d103      	bne.n	8004920 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004918:	f7fe fdea 	bl	80034f0 <HAL_RCC_GetPCLK2Freq>
 800491c:	60f8      	str	r0, [r7, #12]
 800491e:	e002      	b.n	8004926 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004920:	f7fe fdd2 	bl	80034c8 <HAL_RCC_GetPCLK1Freq>
 8004924:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004926:	68fa      	ldr	r2, [r7, #12]
 8004928:	4613      	mov	r3, r2
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	009a      	lsls	r2, r3, #2
 8004930:	441a      	add	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	009b      	lsls	r3, r3, #2
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	4a22      	ldr	r2, [pc, #136]	@ (80049c8 <UART_SetConfig+0x118>)
 800493e:	fba2 2303 	umull	r2, r3, r2, r3
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	0119      	lsls	r1, r3, #4
 8004946:	68fa      	ldr	r2, [r7, #12]
 8004948:	4613      	mov	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	4413      	add	r3, r2
 800494e:	009a      	lsls	r2, r3, #2
 8004950:	441a      	add	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	fbb2 f2f3 	udiv	r2, r2, r3
 800495c:	4b1a      	ldr	r3, [pc, #104]	@ (80049c8 <UART_SetConfig+0x118>)
 800495e:	fba3 0302 	umull	r0, r3, r3, r2
 8004962:	095b      	lsrs	r3, r3, #5
 8004964:	2064      	movs	r0, #100	@ 0x64
 8004966:	fb00 f303 	mul.w	r3, r0, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	011b      	lsls	r3, r3, #4
 800496e:	3332      	adds	r3, #50	@ 0x32
 8004970:	4a15      	ldr	r2, [pc, #84]	@ (80049c8 <UART_SetConfig+0x118>)
 8004972:	fba2 2303 	umull	r2, r3, r2, r3
 8004976:	095b      	lsrs	r3, r3, #5
 8004978:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800497c:	4419      	add	r1, r3
 800497e:	68fa      	ldr	r2, [r7, #12]
 8004980:	4613      	mov	r3, r2
 8004982:	009b      	lsls	r3, r3, #2
 8004984:	4413      	add	r3, r2
 8004986:	009a      	lsls	r2, r3, #2
 8004988:	441a      	add	r2, r3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	fbb2 f2f3 	udiv	r2, r2, r3
 8004994:	4b0c      	ldr	r3, [pc, #48]	@ (80049c8 <UART_SetConfig+0x118>)
 8004996:	fba3 0302 	umull	r0, r3, r3, r2
 800499a:	095b      	lsrs	r3, r3, #5
 800499c:	2064      	movs	r0, #100	@ 0x64
 800499e:	fb00 f303 	mul.w	r3, r0, r3
 80049a2:	1ad3      	subs	r3, r2, r3
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	3332      	adds	r3, #50	@ 0x32
 80049a8:	4a07      	ldr	r2, [pc, #28]	@ (80049c8 <UART_SetConfig+0x118>)
 80049aa:	fba2 2303 	umull	r2, r3, r2, r3
 80049ae:	095b      	lsrs	r3, r3, #5
 80049b0:	f003 020f 	and.w	r2, r3, #15
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	440a      	add	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80049bc:	bf00      	nop
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}
 80049c4:	40013800 	.word	0x40013800
 80049c8:	51eb851f 	.word	0x51eb851f

080049cc <_ZNK13TimingManager9isExpiredEv>:
                --timer->m_counter;
            }
        }
    }

    inline bool isExpired() const {
 80049cc:	b480      	push	{r7}
 80049ce:	b083      	sub	sp, #12
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
        return m_counter == 0;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	bf0c      	ite	eq
 80049dc:	2301      	moveq	r3, #1
 80049de:	2300      	movne	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
    }
 80049e2:	4618      	mov	r0, r3
 80049e4:	370c      	adds	r7, #12
 80049e6:	46bd      	mov	sp, r7
 80049e8:	bc80      	pop	{r7}
 80049ea:	4770      	bx	lr

080049ec <_ZN13TimingManager5startEm>:

    inline void start(const uint32_t delay) { m_counter = delay; }
 80049ec:	b480      	push	{r7}
 80049ee:	b083      	sub	sp, #12
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	683a      	ldr	r2, [r7, #0]
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bc80      	pop	{r7}
 8004a04:	4770      	bx	lr

08004a06 <_ZNK21FP_MovingAverageArray6getOutEh>:
	~FP_MovingAverageArray();

	void allocArrays(const uint8_t n);
	void proceed(uint16_t* const values);

	inline uint32_t getOut(const uint8_t n) const
 8004a06:	b480      	push	{r7}
 8004a08:	b083      	sub	sp, #12
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	460b      	mov	r3, r1
 8004a10:	70fb      	strb	r3, [r7, #3]
	{
		if(n < m_n) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	7e1b      	ldrb	r3, [r3, #24]
 8004a16:	78fa      	ldrb	r2, [r7, #3]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d206      	bcs.n	8004a2a <_ZNK21FP_MovingAverageArray6getOutEh+0x24>
			return m_y[n];
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	695a      	ldr	r2, [r3, #20]
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	e000      	b.n	8004a2c <_ZNK21FP_MovingAverageArray6getOutEh+0x26>
		}
		return 0;
 8004a2a:	2300      	movs	r3, #0
	}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	370c      	adds	r7, #12
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bc80      	pop	{r7}
 8004a34:	4770      	bx	lr

08004a36 <_ZNK12Stm32ADC_dma6getAdcEi>:

	bool start();
	void init(const Stm32ADC_init&);
	inline void setFilter(const float filter) {ma.setAlpha(filter);}

	inline uint32_t getAdc(int i) const {return ma.getOut(i);}
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
 8004a3e:	6039      	str	r1, [r7, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3310      	adds	r3, #16
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	b2d2      	uxtb	r2, r2
 8004a48:	4611      	mov	r1, r2
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f7ff ffdb 	bl	8004a06 <_ZNK21FP_MovingAverageArray6getOutEh>
 8004a50:	4603      	mov	r3, r0
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <_ZN18Key_tps1htc30Group7initAdcERKN12Stm32ADC_dma13Stm32ADC_initE>:
	float getCurrent(const uint8_t group_id, const uint8_t key_id);
	uint8_t getError(const uint8_t group_id, const uint8_t key_id);

	//initialization functions
	static Key_tps1htc30Group* const getInstance();
	inline void initAdc(const Stm32ADC_dma::Stm32ADC_init& settings) { m_adc.init(settings); }
 8004a5a:	b580      	push	{r7, lr}
 8004a5c:	b082      	sub	sp, #8
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	6039      	str	r1, [r7, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004a6a:	6839      	ldr	r1, [r7, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f001 f8dd 	bl	8005c2c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>
 8004a72:	bf00      	nop
 8004a74:	3708      	adds	r7, #8
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <_ZN18Key_tps1htc30Group6getAdcEv>:
	inline Stm32ADC_dma* const getAdc() { return &m_adc; }
 8004a7a:	b480      	push	{r7}
 8004a7c:	b083      	sub	sp, #12
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8004a88:	4618      	mov	r0, r3
 8004a8a:	370c      	adds	r7, #12
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bc80      	pop	{r7}
 8004a90:	4770      	bx	lr

08004a92 <_ZN15RelayControllerC1Ev>:
 */

#include <RelayController.h>


RelayController::RelayController()
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b082      	sub	sp, #8
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	f001 fac9 	bl	8006034 <_ZN13TimingManagerC1Ev>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
{
	// TODO Auto-generated constructor stub
	init_all();
 8004aaa:	6878      	ldr	r0, [r7, #4]
 8004aac:	f000 f806 	bl	8004abc <_ZN15RelayController8init_allEv>
}
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3708      	adds	r7, #8
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
	...

08004abc <_ZN15RelayController8init_allEv>:

void RelayController::init_all()
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b084      	sub	sp, #16
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
	//init communicator --------------------------------------------------
	extern UART_HandleTypeDef huart1;
	init_communicator(&m_comm, &huart1);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	4911      	ldr	r1, [pc, #68]	@ (8004b10 <_ZN15RelayController8init_allEv+0x54>)
 8004aca:	4618      	mov	r0, r3
 8004acc:	f000 f994 	bl	8004df8 <init_communicator>

	// init adc ---------------------------------------------------------
	extern ADC_HandleTypeDef hadc1;

	Stm32ADC_dma::Stm32ADC_init adc_init =  {
 8004ad0:	4a10      	ldr	r2, [pc, #64]	@ (8004b14 <_ZN15RelayController8init_allEv+0x58>)
 8004ad2:	f107 0308 	add.w	r3, r7, #8
 8004ad6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004ada:	e883 0003 	stmia.w	r3, {r0, r1}
		.hadc = &hadc1,
		.filter = 1.0/512.0
	};

	m_relayGroup = Key_tps1htc30Group::getInstance();
 8004ade:	f000 fba7 	bl	8005230 <_ZN18Key_tps1htc30Group11getInstanceEv>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	f8c3 2288 	str.w	r2, [r3, #648]	@ 0x288
	m_relayGroup->initAdc(adc_init);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8004af0:	f107 0208 	add.w	r2, r7, #8
 8004af4:	4611      	mov	r1, r2
 8004af6:	4618      	mov	r0, r3
 8004af8:	f7ff ffaf 	bl	8004a5a <_ZN18Key_tps1htc30Group7initAdcERKN12Stm32ADC_dma13Stm32ADC_initE>
	m_relayGroup->start();
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8004b02:	4618      	mov	r0, r3
 8004b04:	f000 fbc4 	bl	8005290 <_ZN18Key_tps1htc30Group5startEv>
}
 8004b08:	bf00      	nop
 8004b0a:	3710      	adds	r7, #16
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	20000268 	.word	0x20000268
 8004b14:	08009cd0 	.word	0x08009cd0

08004b18 <_ZN15RelayController12get_instanceEv>:

RelayController* const RelayController::get_instance()
{
 8004b18:	b598      	push	{r3, r4, r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
	static RelayController* const inst = new RelayController();
 8004b1c:	4b14      	ldr	r3, [pc, #80]	@ (8004b70 <_ZN15RelayController12get_instanceEv+0x58>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f3bf 8f5b 	dmb	ish
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	bf0c      	ite	eq
 8004b2c:	2301      	moveq	r3, #1
 8004b2e:	2300      	movne	r3, #0
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d018      	beq.n	8004b68 <_ZN15RelayController12get_instanceEv+0x50>
 8004b36:	480e      	ldr	r0, [pc, #56]	@ (8004b70 <_ZN15RelayController12get_instanceEv+0x58>)
 8004b38:	f002 fa6c 	bl	8007014 <__cxa_guard_acquire>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	bf14      	ite	ne
 8004b42:	2301      	movne	r3, #1
 8004b44:	2300      	moveq	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d00d      	beq.n	8004b68 <_ZN15RelayController12get_instanceEv+0x50>
 8004b4c:	f44f 7028 	mov.w	r0, #672	@ 0x2a0
 8004b50:	f002 fa6f 	bl	8007032 <_Znwj>
 8004b54:	4603      	mov	r3, r0
 8004b56:	461c      	mov	r4, r3
 8004b58:	4620      	mov	r0, r4
 8004b5a:	f7ff ff9a 	bl	8004a92 <_ZN15RelayControllerC1Ev>
 8004b5e:	4b05      	ldr	r3, [pc, #20]	@ (8004b74 <_ZN15RelayController12get_instanceEv+0x5c>)
 8004b60:	601c      	str	r4, [r3, #0]
 8004b62:	4803      	ldr	r0, [pc, #12]	@ (8004b70 <_ZN15RelayController12get_instanceEv+0x58>)
 8004b64:	f002 fa62 	bl	800702c <__cxa_guard_release>
	return inst;
 8004b68:	4b02      	ldr	r3, [pc, #8]	@ (8004b74 <_ZN15RelayController12get_instanceEv+0x5c>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	bd98      	pop	{r3, r4, r7, pc}
 8004b70:	20000340 	.word	0x20000340
 8004b74:	2000033c 	.word	0x2000033c

08004b78 <_ZN15RelayController7proceedEv>:

void RelayController::proceed()
{
 8004b78:	b590      	push	{r4, r7, lr}
 8004b7a:	b085      	sub	sp, #20
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]

	while(true) {
		proceed_communicator(&m_comm, HAL_GetTick());
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	1d1c      	adds	r4, r3, #4
 8004b84:	f7fc ff8e 	bl	8001aa4 <HAL_GetTick>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	4620      	mov	r0, r4
 8004b8e:	f000 f9ab 	bl	8004ee8 <proceed_communicator>

		if(led_timer.isExpired()) {
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7ff ff19 	bl	80049cc <_ZNK13TimingManager9isExpiredEv>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d009      	beq.n	8004bb4 <_ZN15RelayController7proceedEv+0x3c>
			//UART_SendBuffer(&m_comm.stm32_uart, (uint8_t*)txBuff, sizeof(txBuff) - 1);
			HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004ba0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004ba4:	4816      	ldr	r0, [pc, #88]	@ (8004c00 <_ZN15RelayController7proceedEv+0x88>)
 8004ba6:	f7fe f89f 	bl	8002ce8 <HAL_GPIO_TogglePin>

			led_timer.start(100);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2164      	movs	r1, #100	@ 0x64
 8004bae:	4618      	mov	r0, r3
 8004bb0:	f7ff ff1c 	bl	80049ec <_ZN13TimingManager5startEm>
		}

		Stm32ADC_dma* adc = m_relayGroup->getAdc();
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	f8d3 3288 	ldr.w	r3, [r3, #648]	@ 0x288
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7ff ff5d 	bl	8004a7a <_ZN18Key_tps1htc30Group6getAdcEv>
 8004bc0:	60b8      	str	r0, [r7, #8]
		if(adc->proceed(0)) {
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	68b8      	ldr	r0, [r7, #8]
 8004bc6:	f001 f86d 	bl	8005ca4 <_ZN12Stm32ADC_dma7proceedEm>
 8004bca:	4603      	mov	r3, r0
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d0d7      	beq.n	8004b80 <_ZN15RelayController7proceedEv+0x8>
			for(int i = 0; i != 10; ++i) {
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	e010      	b.n	8004bf8 <_ZN15RelayController7proceedEv+0x80>
				currents[i] = adc->getAdc(i);
 8004bd6:	68f9      	ldr	r1, [r7, #12]
 8004bd8:	68b8      	ldr	r0, [r7, #8]
 8004bda:	f7ff ff2c 	bl	8004a36 <_ZNK12Stm32ADC_dma6getAdcEi>
 8004bde:	4603      	mov	r3, r0
 8004be0:	b299      	uxth	r1, r3
 8004be2:	687a      	ldr	r2, [r7, #4]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 73a2 	add.w	r3, r3, #324	@ 0x144
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4413      	add	r3, r2
 8004bee:	460a      	mov	r2, r1
 8004bf0:	809a      	strh	r2, [r3, #4]
			for(int i = 0; i != 10; ++i) {
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	60fb      	str	r3, [r7, #12]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	2b0a      	cmp	r3, #10
 8004bfc:	d1eb      	bne.n	8004bd6 <_ZN15RelayController7proceedEv+0x5e>
			}
		}
	}
 8004bfe:	e7bf      	b.n	8004b80 <_ZN15RelayController7proceedEv+0x8>
 8004c00:	40011000 	.word	0x40011000

08004c04 <app_main>:
#include <RelayController.h>

RelayController* global;

void app_main(void)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b082      	sub	sp, #8
 8004c08:	af00      	add	r7, sp, #0
	RelayController* const inst = global = RelayController::get_instance();
 8004c0a:	f7ff ff85 	bl	8004b18 <_ZN15RelayController12get_instanceEv>
 8004c0e:	4603      	mov	r3, r0
 8004c10:	4a05      	ldr	r2, [pc, #20]	@ (8004c28 <app_main+0x24>)
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b04      	ldr	r3, [pc, #16]	@ (8004c28 <app_main+0x24>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	607b      	str	r3, [r7, #4]
	inst->proceed();
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f7ff ffac 	bl	8004b78 <_ZN15RelayController7proceedEv>
}
 8004c20:	bf00      	nop
 8004c22:	3708      	adds	r7, #8
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}
 8004c28:	20000344 	.word	0x20000344

08004c2c <UART_IsTxBusy>:
 * @param   -
 * @return  Booleon value:
 *           - true: device is busy
 *           - false: device is idle
 *****************************************************************************/
static inline bool UART_IsTxBusy(stm32_DMA_uart_t* const self) { return self->isTxBusy_; }
 8004c2c:	b480      	push	{r7}
 8004c2e:	b083      	sub	sp, #12
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	791b      	ldrb	r3, [r3, #4]
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <_ZL16uart_rx_callbackPKhmPv>:
#include "assertsEngine/assert_engine.h"
#include "raw_parser/raw_parser_dma/raw_parser_dma_test.h"


static void uart_rx_callback(uint8_t const * data, uint32_t const size, void* const captured)
{
 8004c44:	b580      	push	{r7, lr}
 8004c46:	b08e      	sub	sp, #56	@ 0x38
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	60f8      	str	r0, [r7, #12]
 8004c4c:	60b9      	str	r1, [r7, #8]
 8004c4e:	607a      	str	r2, [r7, #4]
	stm32_uart_communicator_t* const self = (stm32_uart_communicator_t*)captured;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	637b      	str	r3, [r7, #52]	@ 0x34
	RawParser_dma_receiveArray(&self->raw_p, data, size);
 8004c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c56:	3318      	adds	r3, #24
 8004c58:	633b      	str	r3, [r7, #48]	@ 0x30
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	62bb      	str	r3, [r7, #40]	@ 0x28
    self->m_receivePos = m_receivePos + 1U;
}

STATIC_FORCEINLINE void RawParser_dma_receiveArray(RawParser_dma_t* const self, const u8* const arr, const reg size)
{
    if(size > D_RAW_P_RX_BUF_SIZE) {
 8004c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004c68:	d835      	bhi.n	8004cd6 <_ZL16uart_rx_callbackPKhmPv+0x92>
    	return;
    }

    // save to register ------------------------------------------------------------------------------
    u8* const m_receiveBuffer		= self->m_receiveBuffer;						// store pointer to register
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	3308      	adds	r3, #8
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24

    const reg m_receivePosReg		= self->m_receivePos;							// store head
 8004c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c72:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8004c76:	623b      	str	r3, [r7, #32]
    const reg m_receivePosReg_msk	= m_receivePosReg & (D_RAW_P_RX_BUF_SIZE - 1U); // get head position
 8004c78:	6a3b      	ldr	r3, [r7, #32]
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	61fb      	str	r3, [r7, #28]
    const reg remaining_to_end 		= D_RAW_P_RX_BUF_SIZE - m_receivePosReg_msk; 	// get remaining from head to end
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8004c84:	61bb      	str	r3, [r7, #24]

    // do logic --------------------------------------------------------------------------------------
    if(size > remaining_to_end) {
 8004c86:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d914      	bls.n	8004cb8 <_ZL16uart_rx_callbackPKhmPv+0x74>
    	const reg remaining_n		= size - remaining_to_end;
 8004c8e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	617b      	str	r3, [r7, #20]
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, remaining_to_end);
 8004c96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	4413      	add	r3, r2
 8004c9c:	69ba      	ldr	r2, [r7, #24]
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f003 fd3c 	bl	800871e <memcpy>
    	memcpy(m_receiveBuffer, arr + remaining_to_end, remaining_n);
 8004ca6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	4413      	add	r3, r2
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	4619      	mov	r1, r3
 8004cb0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb2:	f003 fd34 	bl	800871e <memcpy>
 8004cb6:	e007      	b.n	8004cc8 <_ZL16uart_rx_callbackPKhmPv+0x84>
    } else {
    	memcpy(m_receiveBuffer + m_receivePosReg_msk, arr, size);
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cc0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f003 fd2b 	bl	800871e <memcpy>
    }

    // save position to memory ------------------------------------------------------------------------
    self->m_receivePos = (m_receivePosReg + size);
 8004cc8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004cca:	6a3b      	ldr	r3, [r7, #32]
 8004ccc:	441a      	add	r2, r3
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
}
 8004cd4:	e000      	b.n	8004cd8 <_ZL16uart_rx_callbackPKhmPv+0x94>
    	return;
 8004cd6:	bf00      	nop
 8004cd8:	bf00      	nop
 8004cda:	3738      	adds	r7, #56	@ 0x38
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}

08004ce0 <_ZL16uart_tx_callbackaPv>:

static void uart_tx_callback(const status_t status, void* const captured)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b084      	sub	sp, #16
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	6039      	str	r1, [r7, #0]
 8004cea:	71fb      	strb	r3, [r7, #7]
	stm32_uart_communicator_t* const parrent = (stm32_uart_communicator_t*)captured;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	60fb      	str	r3, [r7, #12]
	pool_container_t* const pack_pool = &parrent->pack_pool;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	60bb      	str	r3, [r7, #8]
	poolContainer_nextReadPos(pack_pool);
 8004cf4:	68b8      	ldr	r0, [r7, #8]
 8004cf6:	f000 fbfd 	bl	80054f4 <poolContainer_nextReadPos>
}
 8004cfa:	bf00      	nop
 8004cfc:	3710      	adds	r7, #16
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_ZL10pingWorkerPhjPv>:
//{
//	stm32_uart_communicator_t* const self = (stm32_uart_communicator_t*)captured;
//}

static void pingWorker(u8* const data, const reg size, void* const ctx)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b08c      	sub	sp, #48	@ 0x30
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
	stm32_uart_communicator_t* const parrent = (stm32_uart_communicator_t*)ctx;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	62fb      	str	r3, [r7, #44]	@ 0x2c
	pool_container_t* const pack_pool = &parrent->pack_pool;
 8004d12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d14:	62bb      	str	r3, [r7, #40]	@ 0x28
	RawParser_dma_t* const parser = &parrent->raw_p;
 8004d16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d18:	3318      	adds	r3, #24
 8004d1a:	627b      	str	r3, [r7, #36]	@ 0x24

	u8 t1 = 0x01;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	76fb      	strb	r3, [r7, #27]
	u8 t2 = 0x11;
 8004d20:	2311      	movs	r3, #17
 8004d22:	76bb      	strb	r3, [r7, #26]
	u8 t3 = 0x22;
 8004d24:	2322      	movs	r3, #34	@ 0x22
 8004d26:	767b      	strb	r3, [r7, #25]
	u8 t4 = 0x33;
 8004d28:	2333      	movs	r3, #51	@ 0x33
 8004d2a:	763b      	strb	r3, [r7, #24]
	u16 t5 = 0xAA55;
 8004d2c:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8004d30:	82fb      	strh	r3, [r7, #22]

	u8 read = 0;
 8004d32:	2300      	movs	r3, #0
 8004d34:	757b      	strb	r3, [r7, #21]
	u16 read16 = 0;
 8004d36:	2300      	movs	r3, #0
 8004d38:	827b      	strh	r3, [r7, #18]
	u16 read16_2 = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	823b      	strh	r3, [r7, #16]
	RawParser_dma_universalRead(parser, sizeof(u8), sizeof(u8), &read);
 8004d3e:	f107 0315 	add.w	r3, r7, #21
 8004d42:	2201      	movs	r2, #1
 8004d44:	2101      	movs	r1, #1
 8004d46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d48:	f000 fef4 	bl	8005b34 <RawParser_dma_universalRead>
	RawParser_dma_universalRead(parser, sizeof(u16), sizeof(u16), (u8*)&read16);
 8004d4c:	f107 0312 	add.w	r3, r7, #18
 8004d50:	2202      	movs	r2, #2
 8004d52:	2102      	movs	r1, #2
 8004d54:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d56:	f000 feed 	bl	8005b34 <RawParser_dma_universalRead>
	RawParser_dma_universalRead(parser, sizeof(u16), sizeof(u16), (u8*)&read16_2);
 8004d5a:	f107 0310 	add.w	r3, r7, #16
 8004d5e:	2202      	movs	r2, #2
 8004d60:	2102      	movs	r1, #2
 8004d62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d64:	f000 fee6 	bl	8005b34 <RawParser_dma_universalRead>

	if(!FIFO_IS_FULL(pack_pool)) {
 8004d68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d6a:	7b1b      	ldrb	r3, [r3, #12]
 8004d6c:	f083 0301 	eor.w	r3, r3, #1
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d03c      	beq.n	8004df0 <_ZL10pingWorkerPhjPv+0xee>
		pool_elem_t* const buffer = (pool_elem_t*) poolContainer_getWriteBuffer(pack_pool);
 8004d76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004d78:	f000 fb5e 	bl	8005438 <poolContainer_getWriteBuffer>
 8004d7c:	6238      	str	r0, [r7, #32]
		rawParser_dma_setUserBufferTX(parser, buffer->data);
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	3302      	adds	r3, #2
 8004d82:	4619      	mov	r1, r3
 8004d84:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d86:	f000 fcae 	bl	80056e6 <rawParser_dma_setUserBufferTX>

		RawParser_dma_startTransmittPacket(parser, 10);
 8004d8a:	210a      	movs	r1, #10
 8004d8c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d8e:	f000 fe05 	bl	800599c <RawParser_dma_startTransmittPacket>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t1);
 8004d92:	f107 031b 	add.w	r3, r7, #27
 8004d96:	2201      	movs	r2, #1
 8004d98:	2101      	movs	r1, #1
 8004d9a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004d9c:	f000 fe89 	bl	8005ab2 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t2);
 8004da0:	f107 031a 	add.w	r3, r7, #26
 8004da4:	2201      	movs	r2, #1
 8004da6:	2101      	movs	r1, #1
 8004da8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004daa:	f000 fe82 	bl	8005ab2 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t3);
 8004dae:	f107 0319 	add.w	r3, r7, #25
 8004db2:	2201      	movs	r2, #1
 8004db4:	2101      	movs	r1, #1
 8004db6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004db8:	f000 fe7b 	bl	8005ab2 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u8), sizeof(u8), &t4);
 8004dbc:	f107 0318 	add.w	r3, r7, #24
 8004dc0:	2201      	movs	r2, #1
 8004dc2:	2101      	movs	r1, #1
 8004dc4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dc6:	f000 fe74 	bl	8005ab2 <RawParser_dma_universalWrite>
		RawParser_dma_universalWrite(parser, sizeof(u16), sizeof(u16), (u8*)&t5);
 8004dca:	f107 0316 	add.w	r3, r7, #22
 8004dce:	2202      	movs	r2, #2
 8004dd0:	2102      	movs	r1, #2
 8004dd2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dd4:	f000 fe6d 	bl	8005ab2 <RawParser_dma_universalWrite>

		RawParser_Frame_t*const frame = RawParser_dma_finishTransmittPacket(parser);
 8004dd8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004dda:	f000 fe2e 	bl	8005a3a <RawParser_dma_finishTransmittPacket>
 8004dde:	61f8      	str	r0, [r7, #28]
		buffer->size = frame->size;
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	b29a      	uxth	r2, r3
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	801a      	strh	r2, [r3, #0]
		poolContainer_nextWritePos(pack_pool);
 8004dea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004dec:	f000 fb3c 	bl	8005468 <poolContainer_nextWritePos>
	}
}
 8004df0:	bf00      	nop
 8004df2:	3730      	adds	r7, #48	@ 0x30
 8004df4:	46bd      	mov	sp, r7
 8004df6:	bd80      	pop	{r7, pc}

08004df8 <init_communicator>:


status_t init_communicator(stm32_uart_communicator_t* const self, UART_HandleTypeDef* const huart)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]
	M_Assert_BreakSaveCheck(self == NULL || huart == NULL, M_EMPTY, return ERROR_FAIL, "null input");
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <init_communicator+0x16>
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <init_communicator+0x1c>
 8004e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8004e12:	e05f      	b.n	8004ed4 <init_communicator+0xdc>

	M_Assert_BreakSaveCheck(UART_Init(&self->stm32_uart, huart, 128) != STATUS_OK,
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e1a:	2280      	movs	r2, #128	@ 0x80
 8004e1c:	6839      	ldr	r1, [r7, #0]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f001 febb 	bl	8006b9a <UART_Init>
 8004e24:	4603      	mov	r3, r0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	bf14      	ite	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	2300      	moveq	r3, #0
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d002      	beq.n	8004e3a <init_communicator+0x42>
 8004e34:	f04f 33ff 	mov.w	r3, #4294967295
 8004e38:	e04c      	b.n	8004ed4 <init_communicator+0xdc>
			M_EMPTY, return ERROR_FAIL,
					"uart init fail");

	UART_SetRxCallback(&self->stm32_uart, uart_rx_callback, self);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	4926      	ldr	r1, [pc, #152]	@ (8004edc <init_communicator+0xe4>)
 8004e44:	4618      	mov	r0, r3
 8004e46:	f001 ff52 	bl	8006cee <UART_SetRxCallback>
	UART_SetTxcallback(&self->stm32_uart, uart_tx_callback, self);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	4923      	ldr	r1, [pc, #140]	@ (8004ee0 <init_communicator+0xe8>)
 8004e54:	4618      	mov	r0, r3
 8004e56:	f001 ff31 	bl	8006cbc <UART_SetTxcallback>
	//	UART_SetErrorCallback(&self->stm32_uart, uart_error_callback, self);


	poolContainer_init(&self->pack_pool, 4, sizeof(pool_elem_t) + D_RAW_P_TX_BUF_SIZE);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f44f 7281 	mov.w	r2, #258	@ 0x102
 8004e60:	2104      	movs	r1, #4
 8004e62:	4618      	mov	r0, r3
 8004e64:	f000 fa54 	bl	8005310 <poolContainer_init>

	M_Assert_BreakSaveCheck(rawParser_dma_init(&self->raw_p, 0x1a) != D_RAW_P_OK,
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3318      	adds	r3, #24
 8004e6c:	211a      	movs	r1, #26
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fbec 	bl	800564c <rawParser_dma_init>
 8004e74:	4603      	mov	r3, r0
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	bf14      	ite	ne
 8004e7a:	2301      	movne	r3, #1
 8004e7c:	2300      	moveq	r3, #0
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d002      	beq.n	8004e8a <init_communicator+0x92>
 8004e84:	f04f 33ff 	mov.w	r3, #4294967295
 8004e88:	e024      	b.n	8004ed4 <init_communicator+0xdc>
			M_EMPTY, return ERROR_FAIL,
					"kbus init fail");

	pool_elem_t* const buffer = (pool_elem_t*) poolContainer_getWriteBuffer(&self->pack_pool);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	f000 fad3 	bl	8005438 <poolContainer_getWriteBuffer>
 8004e92:	60f8      	str	r0, [r7, #12]
	rawParser_dma_setUserBufferTX(&self->raw_p, buffer->data);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f103 0218 	add.w	r2, r3, #24
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f000 fc20 	bl	80056e6 <rawParser_dma_setUserBufferTX>

	M_Assert_BreakSaveCheck(CallbackManager_init(&self->callb, 5, self),
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	2105      	movs	r1, #5
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	f000 fb52 	bl	800555a <CallbackManager_init>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <init_communicator+0xca>
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8004ec0:	e008      	b.n	8004ed4 <init_communicator+0xdc>
			M_EMPTY, return ERROR_FAIL,
					"callback manager init fail");
	CallbackManager_subscribe(&self->callb, 0x01, pingWorker);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8004ec8:	4a06      	ldr	r2, [pc, #24]	@ (8004ee4 <init_communicator+0xec>)
 8004eca:	2101      	movs	r1, #1
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 fb6a 	bl	80055a6 <CallbackManager_subscribe>

	//int a = rawParserDmaTest(rand(), 1000, 1);

	return STATUS_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3710      	adds	r7, #16
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	08004c45 	.word	0x08004c45
 8004ee0:	08004ce1 	.word	0x08004ce1
 8004ee4:	08004d03 	.word	0x08004d03

08004ee8 <proceed_communicator>:

void proceed_communicator(stm32_uart_communicator_t* const self, const uint32_t current_time)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b088      	sub	sp, #32
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

	// proceed RX
	{
		RawParser_Frame_t* const frame = RawParser_dma_proceed(&self->raw_p);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3318      	adds	r3, #24
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fcb8 	bl	800586c <RawParser_dma_proceed>
 8004efc:	61f8      	str	r0, [r7, #28]
		u8* const data = frame->data;
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	61bb      	str	r3, [r7, #24]
		reg size = frame->size;
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	617b      	str	r3, [r7, #20]

		if(size == 0 || frame == NULL) {
 8004f0a:	697b      	ldr	r3, [r7, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d010      	beq.n	8004f32 <proceed_communicator+0x4a>
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d00d      	beq.n	8004f32 <proceed_communicator+0x4a>
			goto transmitt;
		}

		const u8 cmd = data[0];
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	74fb      	strb	r3, [r7, #19]

		CallbackManager_proceed(&self->callb, cmd, (data + 1), (size - 1));
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	f503 701e 	add.w	r0, r3, #632	@ 0x278
 8004f22:	69bb      	ldr	r3, [r7, #24]
 8004f24:	1c5a      	adds	r2, r3, #1
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	7cf9      	ldrb	r1, [r7, #19]
 8004f2c:	f000 fb4f 	bl	80055ce <CallbackManager_proceed>
 8004f30:	e000      	b.n	8004f34 <proceed_communicator+0x4c>
			goto transmitt;
 8004f32:	bf00      	nop
	}

	// proceed TX
	transmitt:
	{
		if(!UART_IsTxBusy(&self->stm32_uart) && !FIFO_IS_EMPTY(&self->pack_pool)) {
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f503 7313 	add.w	r3, r3, #588	@ 0x24c
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f7ff fe76 	bl	8004c2c <UART_IsTxBusy>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f083 0301 	eor.w	r3, r3, #1
 8004f46:	b2db      	uxtb	r3, r3
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d008      	beq.n	8004f5e <proceed_communicator+0x76>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	7b5b      	ldrb	r3, [r3, #13]
 8004f50:	f083 0301 	eor.w	r3, r3, #1
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d001      	beq.n	8004f5e <proceed_communicator+0x76>
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e000      	b.n	8004f60 <proceed_communicator+0x78>
 8004f5e:	2300      	movs	r3, #0
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <proceed_communicator+0x9a>
			pool_elem_t* const buffer = (pool_elem_t*) poolContainer_readBuffer(&self->pack_pool);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f000 faa6 	bl	80054b8 <poolContainer_readBuffer>
 8004f6c:	60f8      	str	r0, [r7, #12]
			UART_SendBuffer(&self->stm32_uart, buffer->data, buffer->size);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f503 7013 	add.w	r0, r3, #588	@ 0x24c
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	1c99      	adds	r1, r3, #2
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	881b      	ldrh	r3, [r3, #0]
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	f001 fe69 	bl	8006c54 <UART_SendBuffer>
		}
	}
}
 8004f82:	bf00      	nop
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b084      	sub	sp, #16
 8004f8e:	af00      	add	r7, sp, #0
 8004f90:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f002 f80e 	bl	8006fb4 <getContainerUartInstance>
 8004f98:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d002      	beq.n	8004fa6 <HAL_UART_TxCpltCallback+0x1c>
		UART_TXCallback(uart_instance);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f001 ff63 	bl	8006e6c <UART_TXCallback>
	}
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b084      	sub	sp, #16
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f001 fffc 	bl	8006fb4 <getContainerUartInstance>
 8004fbc:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d002      	beq.n	8004fca <HAL_UART_RxCpltCallback+0x1c>
		UART_RXCallback(uart_instance);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f001 feef 	bl	8006da8 <UART_RXCallback>
	}
}
 8004fca:	bf00      	nop
 8004fcc:	3710      	adds	r7, #16
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}

08004fd2 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f001 ffea 	bl	8006fb4 <getContainerUartInstance>
 8004fe0:	60f8      	str	r0, [r7, #12]
	if(uart_instance) {
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d002      	beq.n	8004fee <HAL_UART_ErrorCallback+0x1c>
		UART_ErrorCallback(uart_instance);
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f001 ff65 	bl	8006eb8 <UART_ErrorCallback>
	}
}
 8004fee:	bf00      	nop
 8004ff0:	3710      	adds	r7, #16
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}

08004ff6 <_ZN15InRangeDetectorIfE4initEffm>:
		OutOfMinimumBoarder,
		OutOfMaximumBoarder,
	};

	error proceed(const uint32_t current_time, const T value);
	void init(const T min, const T max, const uint32_t dt) { m_minimum = min; m_maximum = max; m_dt = dt; m_time_counter = 0; m_lastError = error::None; }
 8004ff6:	b480      	push	{r7}
 8004ff8:	b085      	sub	sp, #20
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	60f8      	str	r0, [r7, #12]
 8004ffe:	60b9      	str	r1, [r7, #8]
 8005000:	607a      	str	r2, [r7, #4]
 8005002:	603b      	str	r3, [r7, #0]
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	611a      	str	r2, [r3, #16]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	615a      	str	r2, [r3, #20]
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	683a      	ldr	r2, [r7, #0]
 8005014:	605a      	str	r2, [r3, #4]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	601a      	str	r2, [r3, #0]
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	731a      	strb	r2, [r3, #12]
 8005022:	bf00      	nop
 8005024:	3714      	adds	r7, #20
 8005026:	46bd      	mov	sp, r7
 8005028:	bc80      	pop	{r7}
 800502a:	4770      	bx	lr

0800502c <_ZN10Stm32Pin_OC1Ev>:
	GPIO_TypeDef* GPIOx = nullptr;
	uint16_t GPIO_Pin = 0;
};

// IO -----------------------------------------------------------
struct Stm32Pin_O
 800502c:	b480      	push	{r7}
 800502e:	b083      	sub	sp, #12
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	601a      	str	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	809a      	strh	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	4618      	mov	r0, r3
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	bc80      	pop	{r7}
 800504a:	4770      	bx	lr

0800504c <_ZN18Key_tps1htc30Group8KeyGroupC1Ev>:
		const float current = ((voltage/*- m_v_rms*/) / Rsns) * Ksns;
		return (current > 0.0) ? current : 0.0;
	}

public:
	struct KeyGroup {
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4618      	mov	r0, r3
 8005058:	2330      	movs	r3, #48	@ 0x30
 800505a:	461a      	mov	r2, r3
 800505c:	2100      	movs	r1, #0
 800505e:	f003 fa7d 	bl	800855c <memset>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	3330      	adds	r3, #48	@ 0x30
 8005066:	2230      	movs	r2, #48	@ 0x30
 8005068:	2100      	movs	r1, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f003 fa76 	bl	800855c <memset>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	339c      	adds	r3, #156	@ 0x9c
 8005074:	2290      	movs	r2, #144	@ 0x90
 8005076:	2100      	movs	r1, #0
 8005078:	4618      	mov	r0, r3
 800507a:	f003 fa6f 	bl	800855c <memset>
 800507e:	2200      	movs	r2, #0
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	4613      	mov	r3, r2
 8005084:	005b      	lsls	r3, r3, #1
 8005086:	4413      	add	r3, r2
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	440b      	add	r3, r1
 800508c:	33a0      	adds	r3, #160	@ 0xa0
 800508e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8005092:	6019      	str	r1, [r3, #0]
 8005094:	2a05      	cmp	r2, #5
 8005096:	d001      	beq.n	800509c <_ZN18Key_tps1htc30Group8KeyGroupC1Ev+0x50>
 8005098:	3201      	adds	r2, #1
 800509a:	e7f1      	b.n	8005080 <_ZN18Key_tps1htc30Group8KeyGroupC1Ev+0x34>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	f503 7396 	add.w	r3, r3, #300	@ 0x12c
 80050a2:	2200      	movs	r2, #0
 80050a4:	601a      	str	r2, [r3, #0]
 80050a6:	809a      	strh	r2, [r3, #4]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f503 739a 	add.w	r3, r3, #308	@ 0x134
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7ff ffbc 	bl	800502c <_ZN10Stm32Pin_OC1Ev>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f503 739e 	add.w	r3, r3, #316	@ 0x13c
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7ff ffb6 	bl	800502c <_ZN10Stm32Pin_OC1Ev>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4618      	mov	r0, r3
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <_ZN20FP_MovingAverageBaseC1Ev>:
#include <cstdint>

class FP_MovingAverageBase
{
public:
	FP_MovingAverageBase() = default;
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005108 <_ZN20FP_MovingAverageBaseC1Ev+0x3c>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2200      	movs	r2, #0
 80050de:	711a      	strb	r2, [r3, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2200      	movs	r2, #0
 80050e4:	715a      	strb	r2, [r3, #5]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2200      	movs	r2, #0
 80050ea:	719a      	strb	r2, [r3, #6]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f04f 0200 	mov.w	r2, #0
 80050f2:	609a      	str	r2, [r3, #8]
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	60da      	str	r2, [r3, #12]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4618      	mov	r0, r3
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	bc80      	pop	{r7}
 8005104:	4770      	bx	lr
 8005106:	bf00      	nop
 8005108:	08009dd0 	.word	0x08009dd0

0800510c <_ZN20FP_MovingAverageBaseD1Ev>:
	virtual ~FP_MovingAverageBase() = default;
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
 8005114:	4a04      	ldr	r2, [pc, #16]	@ (8005128 <_ZN20FP_MovingAverageBaseD1Ev+0x1c>)
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	601a      	str	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4618      	mov	r0, r3
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	bc80      	pop	{r7}
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	08009dd0 	.word	0x08009dd0

0800512c <_ZN20FP_MovingAverageBaseD0Ev>:
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f7ff ffe9 	bl	800510c <_ZN20FP_MovingAverageBaseD1Ev>
 800513a:	2110      	movs	r1, #16
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f001 ff65 	bl	800700c <_ZdlPvj>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4618      	mov	r0, r3
 8005146:	3708      	adds	r7, #8
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}

0800514c <_ZN21FP_MovingAverageArrayC1Ev>:
	FP_MovingAverageArray() = default;
 800514c:	b580      	push	{r7, lr}
 800514e:	b082      	sub	sp, #8
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4618      	mov	r0, r3
 8005158:	f7ff ffb8 	bl	80050cc <_ZN20FP_MovingAverageBaseC1Ev>
 800515c:	4a08      	ldr	r2, [pc, #32]	@ (8005180 <_ZN21FP_MovingAverageArrayC1Ev+0x34>)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	601a      	str	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2200      	movs	r2, #0
 8005166:	611a      	str	r2, [r3, #16]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2200      	movs	r2, #0
 800516c:	615a      	str	r2, [r3, #20]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	761a      	strb	r2, [r3, #24]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	4618      	mov	r0, r3
 8005178:	3708      	adds	r7, #8
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	08009eec 	.word	0x08009eec

08005184 <_ZN12Stm32ADC_dmaC1Ev>:
	Stm32ADC_dma() = default;
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2200      	movs	r2, #0
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2200      	movs	r2, #0
 8005196:	711a      	strb	r2, [r3, #4]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2200      	movs	r2, #0
 800519c:	609a      	str	r2, [r3, #8]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	731a      	strb	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3310      	adds	r3, #16
 80051a8:	4618      	mov	r0, r3
 80051aa:	f7ff ffcf 	bl	800514c <_ZN21FP_MovingAverageArrayC1Ev>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <_ZN18Key_tps1htc30GroupC1Ev>:
	Key_tps1htc30Group() = default;
 80051b8:	b5b0      	push	{r4, r5, r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2401      	movs	r4, #1
 80051c4:	461d      	mov	r5, r3
 80051c6:	e005      	b.n	80051d4 <_ZN18Key_tps1htc30GroupC1Ev+0x1c>
 80051c8:	4628      	mov	r0, r5
 80051ca:	f7ff ff3f 	bl	800504c <_ZN18Key_tps1htc30Group8KeyGroupC1Ev>
 80051ce:	3c01      	subs	r4, #1
 80051d0:	f505 75a2 	add.w	r5, r5, #324	@ 0x144
 80051d4:	2c00      	cmp	r4, #0
 80051d6:	daf7      	bge.n	80051c8 <_ZN18Key_tps1htc30GroupC1Ev+0x10>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80051de:	4618      	mov	r0, r3
 80051e0:	f7ff ffd0 	bl	8005184 <_ZN12Stm32ADC_dmaC1Ev>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2200      	movs	r2, #0
 80051e8:	f8a3 22b4 	strh.w	r2, [r3, #692]	@ 0x2b4
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 22b6 	strb.w	r2, [r3, #694]	@ 0x2b6
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 22b7 	strb.w	r2, [r3, #695]	@ 0x2b7
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f883 22b8 	strb.w	r2, [r3, #696]	@ 0x2b8
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2200      	movs	r2, #0
 8005208:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 22c0 	str.w	r2, [r3, #704]	@ 0x2c0
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 22c8 	strb.w	r2, [r3, #712]	@ 0x2c8
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08005230 <_ZN18Key_tps1htc30Group11getInstanceEv>:

#include "Keytps1htc30Group.h"
#include "tools/irq/stm32_irq_block.h"

Key_tps1htc30Group* const Key_tps1htc30Group::getInstance()
{
 8005230:	b598      	push	{r3, r4, r7, lr}
 8005232:	af00      	add	r7, sp, #0
	static Key_tps1htc30Group* const inst = new Key_tps1htc30Group;
 8005234:	4b14      	ldr	r3, [pc, #80]	@ (8005288 <_ZN18Key_tps1htc30Group11getInstanceEv+0x58>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f3bf 8f5b 	dmb	ish
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	bf0c      	ite	eq
 8005244:	2301      	moveq	r3, #1
 8005246:	2300      	movne	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d018      	beq.n	8005280 <_ZN18Key_tps1htc30Group11getInstanceEv+0x50>
 800524e:	480e      	ldr	r0, [pc, #56]	@ (8005288 <_ZN18Key_tps1htc30Group11getInstanceEv+0x58>)
 8005250:	f001 fee0 	bl	8007014 <__cxa_guard_acquire>
 8005254:	4603      	mov	r3, r0
 8005256:	2b00      	cmp	r3, #0
 8005258:	bf14      	ite	ne
 800525a:	2301      	movne	r3, #1
 800525c:	2300      	moveq	r3, #0
 800525e:	b2db      	uxtb	r3, r3
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00d      	beq.n	8005280 <_ZN18Key_tps1htc30Group11getInstanceEv+0x50>
 8005264:	f44f 7033 	mov.w	r0, #716	@ 0x2cc
 8005268:	f001 fee3 	bl	8007032 <_Znwj>
 800526c:	4603      	mov	r3, r0
 800526e:	461c      	mov	r4, r3
 8005270:	4620      	mov	r0, r4
 8005272:	f7ff ffa1 	bl	80051b8 <_ZN18Key_tps1htc30GroupC1Ev>
 8005276:	4b05      	ldr	r3, [pc, #20]	@ (800528c <_ZN18Key_tps1htc30Group11getInstanceEv+0x5c>)
 8005278:	601c      	str	r4, [r3, #0]
 800527a:	4803      	ldr	r0, [pc, #12]	@ (8005288 <_ZN18Key_tps1htc30Group11getInstanceEv+0x58>)
 800527c:	f001 fed6 	bl	800702c <__cxa_guard_release>
	return inst;
 8005280:	4b02      	ldr	r3, [pc, #8]	@ (800528c <_ZN18Key_tps1htc30Group11getInstanceEv+0x5c>)
 8005282:	681b      	ldr	r3, [r3, #0]
}
 8005284:	4618      	mov	r0, r3
 8005286:	bd98      	pop	{r3, r4, r7, pc}
 8005288:	2000034c 	.word	0x2000034c
 800528c:	20000348 	.word	0x20000348

08005290 <_ZN18Key_tps1htc30Group5startEv>:

	return false;
}

bool Key_tps1htc30Group::start()
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b084      	sub	sp, #16
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 8005298:	2300      	movs	r3, #0
 800529a:	73fb      	strb	r3, [r7, #15]
 800529c:	e028      	b.n	80052f0 <_ZN18Key_tps1htc30Group5startEv+0x60>
		const uint8_t cnt = m_initPinCnt[group_id];
 800529e:	7bfb      	ldrb	r3, [r7, #15]
 80052a0:	687a      	ldr	r2, [r7, #4]
 80052a2:	4413      	add	r3, r2
 80052a4:	f893 32b4 	ldrb.w	r3, [r3, #692]	@ 0x2b4
 80052a8:	737b      	strb	r3, [r7, #13]

		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 80052aa:	2300      	movs	r3, #0
 80052ac:	73bb      	strb	r3, [r7, #14]
 80052ae:	e018      	b.n	80052e2 <_ZN18Key_tps1htc30Group5startEv+0x52>
			m_keys[group_id].m_range[cnt].init(/*min*/0.05, /*max*/4.0, K_delay);
 80052b0:	7bf9      	ldrb	r1, [r7, #15]
 80052b2:	7b7a      	ldrb	r2, [r7, #13]
 80052b4:	4613      	mov	r3, r2
 80052b6:	005b      	lsls	r3, r3, #1
 80052b8:	4413      	add	r3, r2
 80052ba:	00db      	lsls	r3, r3, #3
 80052bc:	f44f 72a2 	mov.w	r2, #324	@ 0x144
 80052c0:	fb01 f202 	mul.w	r2, r1, r2
 80052c4:	4413      	add	r3, r2
 80052c6:	3398      	adds	r3, #152	@ 0x98
 80052c8:	687a      	ldr	r2, [r7, #4]
 80052ca:	4413      	add	r3, r2
 80052cc:	1d18      	adds	r0, r3, #4
 80052ce:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80052d2:	f04f 4281 	mov.w	r2, #1082130432	@ 0x40800000
 80052d6:	490d      	ldr	r1, [pc, #52]	@ (800530c <_ZN18Key_tps1htc30Group5startEv+0x7c>)
 80052d8:	f7ff fe8d 	bl	8004ff6 <_ZN15InRangeDetectorIfE4initEffm>
		for(uint8_t key_id = 0; key_id != cnt; ++key_id) {
 80052dc:	7bbb      	ldrb	r3, [r7, #14]
 80052de:	3301      	adds	r3, #1
 80052e0:	73bb      	strb	r3, [r7, #14]
 80052e2:	7bba      	ldrb	r2, [r7, #14]
 80052e4:	7b7b      	ldrb	r3, [r7, #13]
 80052e6:	429a      	cmp	r2, r3
 80052e8:	d1e2      	bne.n	80052b0 <_ZN18Key_tps1htc30Group5startEv+0x20>
	for(uint8_t group_id = 0; group_id != Groups; ++group_id) {
 80052ea:	7bfb      	ldrb	r3, [r7, #15]
 80052ec:	3301      	adds	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	7bfb      	ldrb	r3, [r7, #15]
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d1d3      	bne.n	800529e <_ZN18Key_tps1htc30Group5startEv+0xe>
		}
	}

	return m_adc.start();
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 fc7d 	bl	8005bfc <_ZN12Stm32ADC_dma5startEv>
 8005302:	4603      	mov	r3, r0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3710      	adds	r7, #16
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}
 800530c:	3d4ccccd 	.word	0x3d4ccccd

08005310 <poolContainer_init>:

	return self;
}

bool poolContainer_init(pool_container_t* const self, const u16 n_buffers, const u16 max_size)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b085      	sub	sp, #20
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	460b      	mov	r3, r1
 800531a:	807b      	strh	r3, [r7, #2]
 800531c:	4613      	mov	r3, r2
 800531e:	803b      	strh	r3, [r7, #0]
	M_Assert_BreakSaveCheck((n_buffers == 0 || max_size == 0), M_EMPTY,
 8005320:	887b      	ldrh	r3, [r7, #2]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d002      	beq.n	800532c <poolContainer_init+0x1c>
 8005326:	883b      	ldrh	r3, [r7, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <poolContainer_init+0x20>
 800532c:	2301      	movs	r3, #1
 800532e:	e068      	b.n	8005402 <poolContainer_init+0xf2>
			return true,
					"Give me positive values for dimensions genius");

	M_Assert_BreakSaveCheck(!is_power_of_2(n_buffers), M_EMPTY,
 8005330:	887b      	ldrh	r3, [r7, #2]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d005      	beq.n	8005342 <poolContainer_init+0x32>
 8005336:	887a      	ldrh	r2, [r7, #2]
 8005338:	887b      	ldrh	r3, [r7, #2]
 800533a:	3b01      	subs	r3, #1
 800533c:	4013      	ands	r3, r2
 800533e:	2b00      	cmp	r3, #0
 8005340:	d001      	beq.n	8005346 <poolContainer_init+0x36>
 8005342:	2301      	movs	r3, #1
 8005344:	e05d      	b.n	8005402 <poolContainer_init+0xf2>
			return true,
					"n_buffers is not power of 2, val: %d", n_buffers);

	M_Assert_BreakSaveCheck((n_buffers  > 16384 || max_size > 16384), M_EMPTY,
 8005346:	887b      	ldrh	r3, [r7, #2]
 8005348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800534c:	d803      	bhi.n	8005356 <poolContainer_init+0x46>
 800534e:	883b      	ldrh	r3, [r7, #0]
 8005350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005354:	d901      	bls.n	800535a <poolContainer_init+0x4a>
 8005356:	2301      	movs	r3, #1
 8005358:	e053      	b.n	8005402 <poolContainer_init+0xf2>
			return true,
					"is too long, N_BUF: %d, SIZE: %d", n_buffers, max_size);

	self->pool = (void**)calloc(n_buffers, sizeof(void*));
 800535a:	887b      	ldrh	r3, [r7, #2]
 800535c:	2104      	movs	r1, #4
 800535e:	4618      	mov	r0, r3
 8005360:	f002 f818 	bl	8007394 <calloc>
 8005364:	4603      	mov	r3, r0
 8005366:	461a      	mov	r2, r3
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	611a      	str	r2, [r3, #16]
	M_Assert_BreakSaveCheck(self->pool == NULL, M_EMPTY,
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d101      	bne.n	8005378 <poolContainer_init+0x68>
 8005374:	2301      	movs	r3, #1
 8005376:	e044      	b.n	8005402 <poolContainer_init+0xf2>
			return true,
					"no memories for allocation data");

	for (u16 i = 0; i < n_buffers; ++i) {
 8005378:	2300      	movs	r3, #0
 800537a:	81fb      	strh	r3, [r7, #14]
 800537c:	e015      	b.n	80053aa <poolContainer_init+0x9a>
		self->pool[i] = calloc(max_size, sizeof(u8));
 800537e:	8838      	ldrh	r0, [r7, #0]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	691a      	ldr	r2, [r3, #16]
 8005384:	89fb      	ldrh	r3, [r7, #14]
 8005386:	009b      	lsls	r3, r3, #2
 8005388:	18d4      	adds	r4, r2, r3
 800538a:	2101      	movs	r1, #1
 800538c:	f002 f802 	bl	8007394 <calloc>
 8005390:	4603      	mov	r3, r0
 8005392:	6023      	str	r3, [r4, #0]
		M_Assert_BreakSaveCheck(self->pool[i] == NULL, M_EMPTY, goto error, "no memories for allocation");
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	691a      	ldr	r2, [r3, #16]
 8005398:	89fb      	ldrh	r3, [r7, #14]
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4413      	add	r3, r2
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d015      	beq.n	80053d0 <poolContainer_init+0xc0>
	for (u16 i = 0; i < n_buffers; ++i) {
 80053a4:	89fb      	ldrh	r3, [r7, #14]
 80053a6:	3301      	adds	r3, #1
 80053a8:	81fb      	strh	r3, [r7, #14]
 80053aa:	89fa      	ldrh	r2, [r7, #14]
 80053ac:	887b      	ldrh	r3, [r7, #2]
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3e5      	bcc.n	800537e <poolContainer_init+0x6e>
	}


	self->n_buffers = n_buffers;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	887a      	ldrh	r2, [r7, #2]
 80053b6:	829a      	strh	r2, [r3, #20]
	self->max_size = max_size;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	883a      	ldrh	r2, [r7, #0]
 80053bc:	82da      	strh	r2, [r3, #22]
	self->base.msk = (reg)(n_buffers - 1U);
 80053be:	887b      	ldrh	r3, [r7, #2]
 80053c0:	1e5a      	subs	r2, r3, #1
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	601a      	str	r2, [r3, #0]
	poolContainer_clear(self);
 80053c6:	6878      	ldr	r0, [r7, #4]
 80053c8:	f000 f81f 	bl	800540a <poolContainer_clear>
	return false;
 80053cc:	2300      	movs	r3, #0
 80053ce:	e018      	b.n	8005402 <poolContainer_init+0xf2>

	// error proceed mark --------------------------------------------
	error:
	for (u16 i = 0; i < n_buffers; ++i) {
 80053d0:	2300      	movs	r3, #0
 80053d2:	81bb      	strh	r3, [r7, #12]
 80053d4:	e00b      	b.n	80053ee <poolContainer_init+0xde>
		free(self->pool[i]);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	89bb      	ldrh	r3, [r7, #12]
 80053dc:	009b      	lsls	r3, r3, #2
 80053de:	4413      	add	r3, r2
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f001 fffa 	bl	80073dc <free>
	for (u16 i = 0; i < n_buffers; ++i) {
 80053e8:	89bb      	ldrh	r3, [r7, #12]
 80053ea:	3301      	adds	r3, #1
 80053ec:	81bb      	strh	r3, [r7, #12]
 80053ee:	89ba      	ldrh	r2, [r7, #12]
 80053f0:	887b      	ldrh	r3, [r7, #2]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d3ef      	bcc.n	80053d6 <poolContainer_init+0xc6>
	}
	free(self->pool);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f001 ffee 	bl	80073dc <free>
	return true;
 8005400:	2301      	movs	r3, #1
}
 8005402:	4618      	mov	r0, r3
 8005404:	3714      	adds	r7, #20
 8005406:	46bd      	mov	sp, r7
 8005408:	bd90      	pop	{r4, r7, pc}

0800540a <poolContainer_clear>:

void poolContainer_clear(pool_container_t * const self)
{
 800540a:	b480      	push	{r7}
 800540c:	b083      	sub	sp, #12
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
	M_Assert_BreakSaveCheck(self == NULL, M_EMPTY, return, "No memory allocated");
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00b      	beq.n	8005430 <poolContainer_clear+0x26>
	self->base.tail = 0;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2200      	movs	r2, #0
 800541c:	605a      	str	r2, [r3, #4]
	self->base.head = 0;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	609a      	str	r2, [r3, #8]
	self->base.wrFull = false;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2200      	movs	r2, #0
 8005428:	731a      	strb	r2, [r3, #12]
	self->base.rdEmpty = true;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2201      	movs	r2, #1
 800542e:	735a      	strb	r2, [r3, #13]
}
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	bc80      	pop	{r7}
 8005436:	4770      	bx	lr

08005438 <poolContainer_getWriteBuffer>:
	return len;
}


void* const poolContainer_getWriteBuffer(pool_container_t * const self)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));

	const reg head_reg = self->base.head;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	617b      	str	r3, [r7, #20]
	const reg msk_reg = self->base.msk;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	613b      	str	r3, [r7, #16]
	const reg wr_pos = head_reg & msk_reg;
 800544c:	697a      	ldr	r2, [r7, #20]
 800544e:	693b      	ldr	r3, [r7, #16]
 8005450:	4013      	ands	r3, r2
 8005452:	60fb      	str	r3, [r7, #12]

	return &self->pool[wr_pos];
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
}
 800545e:	4618      	mov	r0, r3
 8005460:	371c      	adds	r7, #28
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr

08005468 <poolContainer_nextWritePos>:

void poolContainer_nextWritePos(pool_container_t * const self)
{
 8005468:	b480      	push	{r7}
 800546a:	b087      	sub	sp, #28
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));
	M_Assert_WarningSaveCheck(FIFO_IS_FULL(self), M_EMPTY, return, "buffer is full!!!");
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	7b1b      	ldrb	r3, [r3, #12]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11b      	bne.n	80054b0 <poolContainer_nextWritePos+0x48>

	const reg head_reg = self->base.head + 1U;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	3301      	adds	r3, #1
 800547e:	617b      	str	r3, [r7, #20]
	const reg tail_reg = self->base.tail;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	613b      	str	r3, [r7, #16]
	const reg msk_reg = self->base.msk;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	60fb      	str	r3, [r7, #12]

	// proceed signalls ---------------------------------------------
	FIFO_PROCEED_PUT(self, tail_reg, head_reg, msk_reg);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	609a      	str	r2, [r3, #8]
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	405a      	eors	r2, r3
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	4013      	ands	r3, r2
 800549c:	2b00      	cmp	r3, #0
 800549e:	bf0c      	ite	eq
 80054a0:	2301      	moveq	r3, #1
 80054a2:	2300      	movne	r3, #0
 80054a4:	b2da      	uxtb	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	731a      	strb	r2, [r3, #12]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2200      	movs	r2, #0
 80054ae:	735a      	strb	r2, [r3, #13]
}
 80054b0:	371c      	adds	r7, #28
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bc80      	pop	{r7}
 80054b6:	4770      	bx	lr

080054b8 <poolContainer_readBuffer>:

//------------------------------------ READ FUNCTIONS-------------------------------------------------------------------------------------------------------------------------
void* const poolContainer_readBuffer(pool_container_t * const self)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b087      	sub	sp, #28
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return NULL, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return NULL, "no allocated memory"));
	M_Assert_WarningSaveCheck(FIFO_IS_EMPTY(self), M_EMPTY, return NULL, "buffer is empty!!!");
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	7b5b      	ldrb	r3, [r3, #13]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <poolContainer_readBuffer+0x14>
 80054c8:	2300      	movs	r3, #0
 80054ca:	e00e      	b.n	80054ea <poolContainer_readBuffer+0x32>

	const reg tail_reg = self->base.tail;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	617b      	str	r3, [r7, #20]
	const reg msk_reg = self->base.msk;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	613b      	str	r3, [r7, #16]
	const reg rd_pos = tail_reg & msk_reg;
 80054d8:	697a      	ldr	r2, [r7, #20]
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4013      	ands	r3, r2
 80054de:	60fb      	str	r3, [r7, #12]

	return &self->pool[rd_pos];
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	4413      	add	r3, r2
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bc80      	pop	{r7}
 80054f2:	4770      	bx	lr

080054f4 <poolContainer_nextReadPos>:

void poolContainer_nextReadPos(pool_container_t * const self)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b087      	sub	sp, #28
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
	_INT_SWITCH(M_Assert_Break(self == NULL, M_EMPTY, return, "incorrect input values"));
	_INT_SWITCH(M_Assert_Break(self->pool == NULL, M_EMPTY, return, "no allocated memory"));
	M_Assert_WarningSaveCheck(FIFO_IS_EMPTY(self), M_EMPTY, return, "buffer is empty!!!");
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	7b5b      	ldrb	r3, [r3, #13]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d126      	bne.n	8005552 <poolContainer_nextReadPos+0x5e>

	const reg head_reg = self->base.head;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	617b      	str	r3, [r7, #20]
	const reg tail_reg = self->base.tail + 1U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	3301      	adds	r3, #1
 8005510:	613b      	str	r3, [r7, #16]
	const reg msk_reg = self->base.msk;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	60fb      	str	r3, [r7, #12]

	// write data to memory ------------------------------------
	// proceed signalls
	FIFO_PROCEED_GET(self, tail_reg, head_reg, msk_reg);
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	605a      	str	r2, [r3, #4]
 800551e:	693a      	ldr	r2, [r7, #16]
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	429a      	cmp	r2, r3
 8005524:	d106      	bne.n	8005534 <poolContainer_nextReadPos+0x40>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	731a      	strb	r2, [r3, #12]
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	735a      	strb	r2, [r3, #13]
 8005532:	e00e      	b.n	8005552 <poolContainer_nextReadPos+0x5e>
 8005534:	697a      	ldr	r2, [r7, #20]
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	405a      	eors	r2, r3
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	4013      	ands	r3, r2
 800553e:	2b00      	cmp	r3, #0
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2da      	uxtb	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	731a      	strb	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2200      	movs	r2, #0
 8005550:	735a      	strb	r2, [r3, #13]
}
 8005552:	371c      	adds	r7, #28
 8005554:	46bd      	mov	sp, r7
 8005556:	bc80      	pop	{r7}
 8005558:	4770      	bx	lr

0800555a <CallbackManager_init>:
    }
    return m_manager;
}

bool CallbackManager_init(CallbackManager_t* const self, const u8 n, void* const ctx)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b086      	sub	sp, #24
 800555e:	af00      	add	r7, sp, #0
 8005560:	60f8      	str	r0, [r7, #12]
 8005562:	460b      	mov	r3, r1
 8005564:	607a      	str	r2, [r7, #4]
 8005566:	72fb      	strb	r3, [r7, #11]
    M_Assert_BreakSaveCheck(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no valid input data", ENA, LIB);
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d101      	bne.n	8005572 <CallbackManager_init+0x18>
 800556e:	2301      	movs	r3, #1
 8005570:	e015      	b.n	800559e <CallbackManager_init+0x44>

     void* const alloc = calloc(n, sizeof(CallbackWorker));
 8005572:	7afb      	ldrb	r3, [r7, #11]
 8005574:	2104      	movs	r1, #4
 8005576:	4618      	mov	r0, r3
 8005578:	f001 ff0c 	bl	8007394 <calloc>
 800557c:	4603      	mov	r3, r0
 800557e:	617b      	str	r3, [r7, #20]
     M_Assert_BreakSaveCheck(alloc == NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no memory for allocation", ENA, LIB);
 8005580:	697b      	ldr	r3, [r7, #20]
 8005582:	2b00      	cmp	r3, #0
 8005584:	d101      	bne.n	800558a <CallbackManager_init+0x30>
 8005586:	2301      	movs	r3, #1
 8005588:	e009      	b.n	800559e <CallbackManager_init+0x44>

    self->workers = alloc;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	697a      	ldr	r2, [r7, #20]
 800558e:	601a      	str	r2, [r3, #0]
    self->ctx = ctx;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	605a      	str	r2, [r3, #4]
    self->n = n;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	7afa      	ldrb	r2, [r7, #11]
 800559a:	721a      	strb	r2, [r3, #8]
    return false;
 800559c:	2300      	movs	r3, #0
}
 800559e:	4618      	mov	r0, r3
 80055a0:	3718      	adds	r7, #24
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <CallbackManager_subscribe>:
    *self = NULL;
    return false;
}

bool CallbackManager_subscribe(CallbackManager_t * const self, const u8 id, const CallbackWorker worker)
{
 80055a6:	b480      	push	{r7}
 80055a8:	b085      	sub	sp, #20
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	60f8      	str	r0, [r7, #12]
 80055ae:	460b      	mov	r3, r1
 80055b0:	607a      	str	r2, [r7, #4]
 80055b2:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == (CallbackManager_t *)NULL, M_EMPTY, return true, M_LIB_DATA_DEF "CallbackManager_addWorker: no valid input data", ENA, LIB);
    self->workers[id] = worker;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681a      	ldr	r2, [r3, #0]
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	601a      	str	r2, [r3, #0]
    return false;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3714      	adds	r7, #20
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bc80      	pop	{r7}
 80055cc:	4770      	bx	lr

080055ce <CallbackManager_proceed>:


//**********************************************************************************************************************************************************************
bool CallbackManager_proceed(const CallbackManager_t* const self, const u8 id, u8* const data, const reg size)
{
 80055ce:	b580      	push	{r7, lr}
 80055d0:	b088      	sub	sp, #32
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	60f8      	str	r0, [r7, #12]
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	603b      	str	r3, [r7, #0]
 80055da:	460b      	mov	r3, r1
 80055dc:	72fb      	strb	r3, [r7, #11]
    M_Assert_Break(self == NULL, M_EMPTY, return true, M_LIB_DATA_DEF "no valid input data", ENA, LIB);

    // move to cash
    const u8 n = self->n;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	7a1b      	ldrb	r3, [r3, #8]
 80055e2:	77fb      	strb	r3, [r7, #31]
    const CallbackWorker worker = self->workers[id];
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	7afb      	ldrb	r3, [r7, #11]
 80055ea:	009b      	lsls	r3, r3, #2
 80055ec:	4413      	add	r3, r2
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	61bb      	str	r3, [r7, #24]
    void* const ctx = self->ctx;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	617b      	str	r3, [r7, #20]

    // do logic
    M_Assert_SafeFunctionCall((id < n) && (worker != NULL), {
 80055f8:	7afa      	ldrb	r2, [r7, #11]
 80055fa:	7ffb      	ldrb	r3, [r7, #31]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d209      	bcs.n	8005614 <CallbackManager_proceed+0x46>
 8005600:	69bb      	ldr	r3, [r7, #24]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d006      	beq.n	8005614 <CallbackManager_proceed+0x46>
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	6839      	ldr	r1, [r7, #0]
 800560c:	6878      	ldr	r0, [r7, #4]
 800560e:	4798      	blx	r3
 8005610:	2300      	movs	r3, #0
 8005612:	e000      	b.n	8005616 <CallbackManager_proceed+0x48>
                                  worker(data, size, ctx);
                                  return false;
                              });
    return true;
 8005614:	2301      	movs	r3, #1
}
 8005616:	4618      	mov	r0, r3
 8005618:	3720      	adds	r7, #32
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
	...

08005620 <fast_crc8_maxim_byte>:

    return crc;
}

u8 fast_crc8_maxim_byte(const u8 crc, const u8 data)
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	460a      	mov	r2, r1
 800562a:	71fb      	strb	r3, [r7, #7]
 800562c:	4613      	mov	r3, r2
 800562e:	71bb      	strb	r3, [r7, #6]
    return crc8_maxim_table[crc ^ data];
 8005630:	79fa      	ldrb	r2, [r7, #7]
 8005632:	79bb      	ldrb	r3, [r7, #6]
 8005634:	4053      	eors	r3, r2
 8005636:	b2db      	uxtb	r3, r3
 8005638:	461a      	mov	r2, r3
 800563a:	4b03      	ldr	r3, [pc, #12]	@ (8005648 <fast_crc8_maxim_byte+0x28>)
 800563c:	5c9b      	ldrb	r3, [r3, r2]
}
 800563e:	4618      	mov	r0, r3
 8005640:	370c      	adds	r7, #12
 8005642:	46bd      	mov	sp, r7
 8005644:	bc80      	pop	{r7}
 8005646:	4770      	bx	lr
 8005648:	08009dd8 	.word	0x08009dd8

0800564c <rawParser_dma_init>:
	}
	return self;
}

u8 rawParser_dma_init(RawParser_dma_t * const self, const u8 packStart)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	460b      	mov	r3, r1
 8005656:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	M_Assert_BreakSaveCheck(packStart == RECEIVE_EXTENDED_LEN_CMD, M_EMPTY, return D_RAW_P_ERROR, "start byte: %d must be not equal RECEIVE_EXTENDED_LEN_CMD: %d", packStart, RECEIVE_EXTENDED_LEN_CMD);
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	M_Assert_BreakSaveCheck(self == (RawParser_dma_t *)NULL, M_EMPTY, return D_RAW_P_ERROR, "No input data valid ");
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d101      	bne.n	8005662 <rawParser_dma_init+0x16>
 800565e:	2300      	movs	r3, #0
 8005660:	e03c      	b.n	80056dc <rawParser_dma_init+0x90>

	self->m_startByte = packStart;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	78fa      	ldrb	r2, [r7, #3]
 8005666:	701a      	strb	r2, [r3, #0]
	self->m_receivePackLen = 0;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	605a      	str	r2, [r3, #4]

#ifdef D_RAW_P_CRC_ENA
	self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	22ff      	movs	r2, #255	@ 0xff
 8005672:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
	self->m_transmittCalcCRC = D_RAW_P_CRC_INIT;
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	22ff      	movs	r2, #255	@ 0xff
 800567a:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
	self->m_receiveCRCBuf = D_RAW_P_CRC_INIT;
#   endif /* defined(D_RAW_P_USE_CRC16) || defined(D_RAW_P_USE_CRC32) || defined(D_RAW_P_USE_CRC64) */

#endif /* D_RAW_P_CRC_ENA */

	self->m_triggerSB = 0;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
	self->m_receivePos = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	self->m_receiveReadPos = 0;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	self->m_receiveHandlePos = 0;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218


#ifndef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	self->TX.data = self->m_sendBuffer;
#else
	self->TX.data = NULL;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	self->TX.size = 0;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220

#ifndef D_RAW_P_DISABLE_INTERNAL_RX_BUFFER
	self->RX.data = self->m_receiveFrameBuffer;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f503 7284 	add.w	r2, r3, #264	@ 0x108
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#else
	self->RX.data = NULL;
#endif /* D_RAW_P_DISABLE_INTERNAL_RX_BUFFER */

	self->RX.size = 0;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228

	self->uniRXPosition = 0;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	self->length_write_control = 0;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230

#ifdef D_RAW_P_REED_SOLOMON_ECC_CORR_ENA
	rs_initialize_ecc(&self->rs_ecc);
#endif /* D_RAW_P_REED_SOLOMON_ECC_CORR_ENA */

	return D_RAW_P_OK;
 80056da:	2301      	movs	r3, #1
}
 80056dc:	4618      	mov	r0, r3
 80056de:	370c      	adds	r7, #12
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bc80      	pop	{r7}
 80056e4:	4770      	bx	lr

080056e6 <rawParser_dma_setUserBufferTX>:


#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
void rawParser_dma_setUserBufferTX(RawParser_dma_t * const self, u8 * const txBuffer)
{
 80056e6:	b480      	push	{r7}
 80056e8:	b083      	sub	sp, #12
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
	M_Assert_Break((self == (RawParser_dma_t*)NULL), M_EMPTY, return, "No valid input object");
	M_Assert_Break((txBuffer == NULL), M_EMPTY, return, "No valid input TX buffer");

	self->TX.data = txBuffer;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	683a      	ldr	r2, [r7, #0]
 80056f4:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	self->TX.size = 0;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2200      	movs	r2, #0
 80056fc:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
}
 8005700:	bf00      	nop
 8005702:	370c      	adds	r7, #12
 8005704:	46bd      	mov	sp, r7
 8005706:	bc80      	pop	{r7}
 8005708:	4770      	bx	lr
	...

0800570c <RawParser_dma_proceedByte>:
 *
 */


static void RawParser_dma_proceedByte(RawParser_dma_t* const self, const u8 ch, const u8 newFrame)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b084      	sub	sp, #16
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
 8005718:	4613      	mov	r3, r2
 800571a:	70bb      	strb	r3, [r7, #2]
	if (newFrame) {
 800571c:	78bb      	ldrb	r3, [r7, #2]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d00b      	beq.n	800573a <RawParser_dma_proceedByte+0x2e>

#ifdef D_RAW_P_CRC_ENA
		//M_Assert_Warning(self->receiveState < RAW_P_DMA_RECEIVE_CRC_0 , M_EMPTY, M_EMPTY, "last packet error!!!");

		self->m_receiveCalcCRC = D_RAW_P_CRC_INIT;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	22ff      	movs	r2, #255	@ 0xff
 8005726:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		D_RAW_P_CRC_START(self->m_receiveCalcCRC);
#endif /* D_RAW_P_CRC_ENA */

		self->m_receiveHandlePos = 0;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		self->receiveState = RAW_P_DMA_RECEIVE_LEN_0;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
	}

	switch(self->receiveState) {
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f893 3218 	ldrb.w	r3, [r3, #536]	@ 0x218
 8005740:	2b0d      	cmp	r3, #13
 8005742:	f200 808c 	bhi.w	800585e <RawParser_dma_proceedByte+0x152>
 8005746:	a201      	add	r2, pc, #4	@ (adr r2, 800574c <RawParser_dma_proceedByte+0x40>)
 8005748:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800574c:	08005785 	.word	0x08005785
 8005750:	0800585f 	.word	0x0800585f
 8005754:	0800585f 	.word	0x0800585f
 8005758:	080057e3 	.word	0x080057e3
 800575c:	08005835 	.word	0x08005835
 8005760:	0800585f 	.word	0x0800585f
 8005764:	0800585f 	.word	0x0800585f
 8005768:	0800585f 	.word	0x0800585f
 800576c:	0800585f 	.word	0x0800585f
 8005770:	0800585f 	.word	0x0800585f
 8005774:	0800585f 	.word	0x0800585f
 8005778:	0800585f 	.word	0x0800585f
 800577c:	0800585f 	.word	0x0800585f
 8005780:	0800585f 	.word	0x0800585f

	case RAW_P_DMA_RECEIVE_LEN_0: {

#ifdef D_RAW_P_CRC_ENA
		self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800578a:	78fa      	ldrb	r2, [r7, #3]
 800578c:	4611      	mov	r1, r2
 800578e:	4618      	mov	r0, r3
 8005790:	f7ff ff46 	bl	8005620 <fast_crc8_maxim_byte>
 8005794:	4603      	mov	r3, r0
 8005796:	461a      	mov	r2, r3
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
		if(RECEIVE_EXTENDED_LEN_CMD == ch) {
			self->receiveState = RAW_P_DMA_RECEIVE_LEN_LOW;
		} else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

			const reg rx_len = self->m_receivePackLen = ((ch > self->m_startByte) ? (ch - 1U) : ch);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	429a      	cmp	r2, r3
 80057a6:	d902      	bls.n	80057ae <RawParser_dma_proceedByte+0xa2>
 80057a8:	78fb      	ldrb	r3, [r7, #3]
 80057aa:	3b01      	subs	r3, #1
 80057ac:	e000      	b.n	80057b0 <RawParser_dma_proceedByte+0xa4>
 80057ae:	78fb      	ldrb	r3, [r7, #3]
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6053      	str	r3, [r2, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	60bb      	str	r3, [r7, #8]
			self->m_receiveHandlePos = 0;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2200      	movs	r2, #0
 80057be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			self->receiveState = RAW_P_DMA_RECEIVE_DATA;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2203      	movs	r2, #3
 80057c6:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

			M_Assert_WarningSaveCheck((rx_len > D_RAW_P_RX_BUF_SIZE || rx_len == 0), M_EMPTY, {
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057d0:	d802      	bhi.n	80057d8 <RawParser_dma_proceedByte+0xcc>
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d144      	bne.n	8005862 <RawParser_dma_proceedByte+0x156>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	220c      	movs	r2, #12
 80057dc:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218

#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
		}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

		break;}
 80057e0:	e03f      	b.n	8005862 <RawParser_dma_proceedByte+0x156>

		break;}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

	case RAW_P_DMA_RECEIVE_DATA: {
		reg rx_pos = self->m_receiveHandlePos;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80057e8:	60fb      	str	r3, [r7, #12]

#ifdef D_RAW_P_CRC_ENA
		self->m_receiveCalcCRC = D_RAW_P_CRC_UPDATE(self->m_receiveCalcCRC, ch);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 80057f0:	78fa      	ldrb	r2, [r7, #3]
 80057f2:	4611      	mov	r1, r2
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7ff ff13 	bl	8005620 <fast_crc8_maxim_byte>
 80057fa:	4603      	mov	r3, r0
 80057fc:	461a      	mov	r2, r3
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f883 2208 	strb.w	r2, [r3, #520]	@ 0x208
#endif /* D_RAW_P_CRC_ENA */

		self->RX.data[rx_pos] = ch;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 2224 	ldr.w	r2, [r3, #548]	@ 0x224
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	78fa      	ldrb	r2, [r7, #3]
 8005810:	701a      	strb	r2, [r3, #0]
		++rx_pos;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	3301      	adds	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]

		if (rx_pos == self->m_receivePackLen) {
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	429a      	cmp	r2, r3
 8005820:	d103      	bne.n	800582a <RawParser_dma_proceedByte+0x11e>

#ifdef D_RAW_P_CRC_ENA
			D_RAW_P_CRC_FINAL(self->m_receiveCalcCRC);
			self->receiveState = RAW_P_DMA_RECEIVE_CRC_0;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2204      	movs	r2, #4
 8005826:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
			self->RX.size = self->m_receivePackLen;
			self->receiveState = RAW_P_DMA_RECEIVE_OK;
#endif /* D_RAW_P_CRC_ENA */
		}

		self->m_receiveHandlePos = rx_pos;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
		break;}
 8005832:	e017      	b.n	8005864 <RawParser_dma_proceedByte+0x158>

	case RAW_P_DMA_RECEIVE_CRC_0: {

#   ifdef D_RAW_P_USE_CRC8

		if(self->m_receiveCalcCRC == ch) {
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f893 3208 	ldrb.w	r3, [r3, #520]	@ 0x208
 800583a:	78fa      	ldrb	r2, [r7, #3]
 800583c:	429a      	cmp	r2, r3
 800583e:	d109      	bne.n	8005854 <RawParser_dma_proceedByte+0x148>
			self->RX.size = self->m_receivePackLen;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	685a      	ldr	r2, [r3, #4]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			self->receiveState = RAW_P_DMA_RECEIVE_OK;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	220d      	movs	r2, #13
 800584e:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		self->m_receiveCRCBuf = (rawP_crc_t)(ch & 0x000000FFUL); // read 0 byte
		self->receiveState = RAW_P_DMA_RECEIVE_CRC_1;

#   endif /* CRC 0b SWITCH LOGIC */

		break;}
 8005852:	e007      	b.n	8005864 <RawParser_dma_proceedByte+0x158>
			self->receiveState = RAW_P_DMA_RECEIVE_ERR;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	220c      	movs	r2, #12
 8005858:	f883 2218 	strb.w	r2, [r3, #536]	@ 0x218
		break;}
 800585c:	e002      	b.n	8005864 <RawParser_dma_proceedByte+0x158>
	case RAW_P_DMA_RECEIVE_OK:
		M_Assert_Warning(M_ALWAYS, M_EMPTY, M_EMPTY, "LAST Received OK, byte: %d is not received because no SB", ch);
		break;

	default:
		break;
 800585e:	bf00      	nop
 8005860:	e000      	b.n	8005864 <RawParser_dma_proceedByte+0x158>
		break;}
 8005862:	bf00      	nop
	}
}
 8005864:	bf00      	nop
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <RawParser_dma_proceed>:



RawParser_Frame_t* RawParser_dma_proceed(RawParser_dma_t* const self)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b086      	sub	sp, #24
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return (RawParser_Frame_t*)NULL, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	const   reg   receivePos_saved    = self->m_receivePos        & (D_RAW_P_RX_BUF_SIZE - 1U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800587a:	b2db      	uxtb	r3, r3
 800587c:	613b      	str	r3, [r7, #16]
	reg   receiveReadPos      = self->m_receiveReadPos;//    & (D_RAW_P_RX_BUF_SIZE - 1U);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005884:	617b      	str	r3, [r7, #20]
	self->RX.size = 0;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228

	//    if(receivePos_saved == receiveReadPos) { // may be needed
	//        return &self->RX;
	//    }

	while (receivePos_saved != receiveReadPos) {
 800588e:	e03f      	b.n	8005910 <RawParser_dma_proceed+0xa4>

		const u8 ch = self->m_receiveBuffer[receiveReadPos];
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	4413      	add	r3, r2
 8005896:	3308      	adds	r3, #8
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	73fb      	strb	r3, [r7, #15]

		if (self->m_triggerSB) {
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 320a 	ldrb.w	r3, [r3, #522]	@ 0x20a
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d016      	beq.n	80058d4 <RawParser_dma_proceed+0x68>
			if(self->m_startByte == ch) { //{SB}{SB} -> {SB}
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	7bfa      	ldrb	r2, [r7, #15]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d106      	bne.n	80058be <RawParser_dma_proceed+0x52>
				RawParser_dma_proceedByte(self, ch, 0);
 80058b0:	7bfb      	ldrb	r3, [r7, #15]
 80058b2:	2200      	movs	r2, #0
 80058b4:	4619      	mov	r1, r3
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f7ff ff28 	bl	800570c <RawParser_dma_proceedByte>
 80058bc:	e005      	b.n	80058ca <RawParser_dma_proceed+0x5e>
			} else { //{SB}{!SB} -> {SB} and newframe
				RawParser_dma_proceedByte(self, ch, 1);
 80058be:	7bfb      	ldrb	r3, [r7, #15]
 80058c0:	2201      	movs	r2, #1
 80058c2:	4619      	mov	r1, r3
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f7ff ff21 	bl	800570c <RawParser_dma_proceedByte>
			}
			self->m_triggerSB = 0;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
 80058d2:	e00f      	b.n	80058f4 <RawParser_dma_proceed+0x88>
		} else if (self->m_startByte == ch) { //{!SB}{SB} -> set flag and skip step
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	781b      	ldrb	r3, [r3, #0]
 80058d8:	7bfa      	ldrb	r2, [r7, #15]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d104      	bne.n	80058e8 <RawParser_dma_proceed+0x7c>
			self->m_triggerSB = 1;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 220a 	strb.w	r2, [r3, #522]	@ 0x20a
 80058e6:	e005      	b.n	80058f4 <RawParser_dma_proceed+0x88>
		} else { //{!SB}{!SB} -> {!SB}
			RawParser_dma_proceedByte(self, ch, 0);
 80058e8:	7bfb      	ldrb	r3, [r7, #15]
 80058ea:	2200      	movs	r2, #0
 80058ec:	4619      	mov	r1, r3
 80058ee:	6878      	ldr	r0, [r7, #4]
 80058f0:	f7ff ff0c 	bl	800570c <RawParser_dma_proceedByte>
		}

		receiveReadPos = ((receiveReadPos + 1U) & (D_RAW_P_RX_BUF_SIZE - 1U));
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	3301      	adds	r3, #1
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	617b      	str	r3, [r7, #20]

		if(self->RX.size != 0) {
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <RawParser_dma_proceed+0xa4>
			self->uniRXPosition = 0;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			break;
 800590e:	e003      	b.n	8005918 <RawParser_dma_proceed+0xac>
	while (receivePos_saved != receiveReadPos) {
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	429a      	cmp	r2, r3
 8005916:	d1bb      	bne.n	8005890 <RawParser_dma_proceed+0x24>
		}
	}

	self->m_receiveReadPos = receiveReadPos;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	return &self->RX;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f503 7309 	add.w	r3, r3, #548	@ 0x224
}
 8005926:	4618      	mov	r0, r3
 8005928:	3718      	adds	r7, #24
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}

0800592e <RawParser_dma_addTxByte>:


// elementary byte adding functions ----------------------------------------------------------------------------
static inline int RawParser_dma_addTxByte(RawParser_dma_t* const self, const u8 byte)
{
 800592e:	b480      	push	{r7}
 8005930:	b087      	sub	sp, #28
 8005932:	af00      	add	r7, sp, #0
 8005934:	6078      	str	r0, [r7, #4]
 8005936:	460b      	mov	r3, r1
 8005938:	70fb      	strb	r3, [r7, #3]
#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	// move to cash
	u8* const   TX_data   	= self->TX.data;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005940:	613b      	str	r3, [r7, #16]
	reg         TX_size   	= self->TX.size;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005948:	617b      	str	r3, [r7, #20]
	const u8 startByte_reg 	= self->m_startByte;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	73fb      	strb	r3, [r7, #15]

	M_Assert_BreakSaveCheck(TX_size == (D_RAW_P_CHECK_LEN - 1), M_EMPTY, return D_RAW_P_ERROR, "LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_CHECK_LEN - 1);
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	2bfd      	cmp	r3, #253	@ 0xfd
 8005954:	d101      	bne.n	800595a <RawParser_dma_addTxByte+0x2c>
 8005956:	2300      	movs	r3, #0
 8005958:	e01b      	b.n	8005992 <RawParser_dma_addTxByte+0x64>

	TX_data[TX_size++] = byte;
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	1c5a      	adds	r2, r3, #1
 800595e:	617a      	str	r2, [r7, #20]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4413      	add	r3, r2
 8005964:	78fa      	ldrb	r2, [r7, #3]
 8005966:	701a      	strb	r2, [r3, #0]

	if(byte == startByte_reg) {
 8005968:	78fa      	ldrb	r2, [r7, #3]
 800596a:	7bfb      	ldrb	r3, [r7, #15]
 800596c:	429a      	cmp	r2, r3
 800596e:	d10b      	bne.n	8005988 <RawParser_dma_addTxByte+0x5a>
		M_Assert_BreakSaveCheck((TX_size == (D_RAW_P_CHECK_LEN - 1)), M_EMPTY, return D_RAW_P_ERROR, "LEN packet: %d,  more than more than protocol maximum len: %d", TX_size + 1, D_RAW_P_CHECK_LEN - 1);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	2bfd      	cmp	r3, #253	@ 0xfd
 8005974:	d101      	bne.n	800597a <RawParser_dma_addTxByte+0x4c>
 8005976:	2300      	movs	r3, #0
 8005978:	e00b      	b.n	8005992 <RawParser_dma_addTxByte+0x64>
		TX_data[TX_size++] = byte;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	617a      	str	r2, [r7, #20]
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	4413      	add	r3, r2
 8005984:	78fa      	ldrb	r2, [r7, #3]
 8005986:	701a      	strb	r2, [r3, #0]
	}

	self->TX.size = TX_size;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	return D_RAW_P_OK;
 8005990:	2301      	movs	r3, #1
}
 8005992:	4618      	mov	r0, r3
 8005994:	371c      	adds	r7, #28
 8005996:	46bd      	mov	sp, r7
 8005998:	bc80      	pop	{r7}
 800599a:	4770      	bx	lr

0800599c <RawParser_dma_startTransmittPacket>:
	return &self->TX;
}

// fast shield functions (no copy)-----------------------------------------------------------------------------------------
u8 RawParser_dma_startTransmittPacket(RawParser_dma_t* const self, reg predictedLen)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break(self->TX.data == NULL, M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	M_Assert_WarningSaveCheck(predictedLen == 0, M_EMPTY, return D_RAW_P_ERROR, "No valid input length");
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d101      	bne.n	80059b0 <RawParser_dma_startTransmittPacket+0x14>
 80059ac:	2300      	movs	r3, #0
 80059ae:	e040      	b.n	8005a32 <RawParser_dma_startTransmittPacket+0x96>

	// control undefined behavior
	M_Assert_BreakSaveCheck( predictedLen > (D_RAW_P_CHECK_LEN - 5), M_EMPTY, return D_RAW_P_ERROR, "No valid input length: %d, maxTxLen: %d", predictedLen, D_RAW_P_CHECK_LEN);
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	2bf9      	cmp	r3, #249	@ 0xf9
 80059b4:	d901      	bls.n	80059ba <RawParser_dma_startTransmittPacket+0x1e>
 80059b6:	2300      	movs	r3, #0
 80059b8:	e03b      	b.n	8005a32 <RawParser_dma_startTransmittPacket+0x96>
	M_Assert_Warning(predictedLen > (D_RAW_P_CHECK_LEN >> 1), M_EMPTY, M_EMPTY, "UNDEFINED BEHAVIOR!!! recomended packet length must be less than half - maximun protocol size !!!, Txlen: %d, recomendedLen: %d", predictedLen, (D_RAW_P_CHECK_LEN >> 1));


#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = D_RAW_P_CRC_INIT;
 80059ba:	23ff      	movs	r3, #255	@ 0xff
 80059bc:	73fb      	strb	r3, [r7, #15]
	D_RAW_P_CRC_START(r_crc);
#endif /* D_RAW_P_CRC_ENA */

	const u8 startByte = self->m_startByte;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	781b      	ldrb	r3, [r3, #0]
 80059c2:	73bb      	strb	r3, [r7, #14]
	self->length_write_control = predictedLen;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	683a      	ldr	r2, [r7, #0]
 80059c8:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230

	self->TX.size = 0;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	self->TX.data[self->TX.size++] = startByte;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 80059e0:	1c58      	adds	r0, r3, #1
 80059e2:	6879      	ldr	r1, [r7, #4]
 80059e4:	f8c1 0220 	str.w	r0, [r1, #544]	@ 0x220
 80059e8:	4413      	add	r3, r2
 80059ea:	7bba      	ldrb	r2, [r7, #14]
 80059ec:	701a      	strb	r2, [r3, #0]
#	endif /* D_RAW_P_CRC_ENA */

	} else {
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

		const reg r_len = (predictedLen >= startByte) ? (predictedLen + 1U) : predictedLen;
 80059ee:	7bbb      	ldrb	r3, [r7, #14]
 80059f0:	683a      	ldr	r2, [r7, #0]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d302      	bcc.n	80059fc <RawParser_dma_startTransmittPacket+0x60>
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	3301      	adds	r3, #1
 80059fa:	e000      	b.n	80059fe <RawParser_dma_startTransmittPacket+0x62>
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	60bb      	str	r3, [r7, #8]

		if(RawParser_dma_addTxByte(self, r_len) != D_RAW_P_OK) {
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	b2db      	uxtb	r3, r3
 8005a04:	4619      	mov	r1, r3
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff ff91 	bl	800592e <RawParser_dma_addTxByte>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d001      	beq.n	8005a16 <RawParser_dma_startTransmittPacket+0x7a>
			return D_RAW_P_ERROR;
 8005a12:	2300      	movs	r3, #0
 8005a14:	e00d      	b.n	8005a32 <RawParser_dma_startTransmittPacket+0x96>
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, r_len);
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	b2da      	uxtb	r2, r3
 8005a1a:	7bfb      	ldrb	r3, [r7, #15]
 8005a1c:	4611      	mov	r1, r2
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7ff fdfe 	bl	8005620 <fast_crc8_maxim_byte>
 8005a24:	4603      	mov	r3, r0
 8005a26:	73fb      	strb	r3, [r7, #15]
#ifdef D_RAW_P_TWO_BYTES_LEN_SUPPORT
	}
#endif /* D_RAW_P_TWO_BYTES_LEN_SUPPORT */

#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	7bfa      	ldrb	r2, [r7, #15]
 8005a2c:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
#endif /* D_RAW_P_CRC_ENA */

	return D_RAW_P_OK;
 8005a30:	2301      	movs	r3, #1
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}

08005a3a <RawParser_dma_finishTransmittPacket>:


RawParser_Frame_t* const RawParser_dma_finishTransmittPacket(RawParser_dma_t* const self)
{
 8005a3a:	b580      	push	{r7, lr}
 8005a3c:	b084      	sub	sp, #16
 8005a3e:	af00      	add	r7, sp, #0
 8005a40:	6078      	str	r0, [r7, #4]
		if(RawParser_dma_addTxByte(self, byte) != D_RAW_P_OK) {		\
			goto error;												\
		}

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8005a48:	73fb      	strb	r3, [r7, #15]
#endif /* D_RAW_P_CRC_ENA */

	reg ramained_len = self->length_write_control;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8005a50:	60bb      	str	r3, [r7, #8]
	while(ramained_len) { 							// fill remaining len
 8005a52:	e010      	b.n	8005a76 <RawParser_dma_finishTransmittPacket+0x3c>
		WRITE_CHECK_BYTE(0x00);
 8005a54:	2100      	movs	r1, #0
 8005a56:	6878      	ldr	r0, [r7, #4]
 8005a58:	f7ff ff69 	bl	800592e <RawParser_dma_addTxByte>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d11c      	bne.n	8005a9c <RawParser_dma_finishTransmittPacket+0x62>

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, 0x00);
 8005a62:	7bfb      	ldrb	r3, [r7, #15]
 8005a64:	2100      	movs	r1, #0
 8005a66:	4618      	mov	r0, r3
 8005a68:	f7ff fdda 	bl	8005620 <fast_crc8_maxim_byte>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73fb      	strb	r3, [r7, #15]
#endif /* D_RAW_P_CRC_ENA */

		--ramained_len;
 8005a70:	68bb      	ldr	r3, [r7, #8]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	60bb      	str	r3, [r7, #8]
	while(ramained_len) { 							// fill remaining len
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1eb      	bne.n	8005a54 <RawParser_dma_finishTransmittPacket+0x1a>
	D_RAW_P_CRC_FINAL(r_crc);


#   ifdef D_RAW_P_USE_CRC8

	WRITE_CHECK_BYTE(r_crc);
 8005a7c:	7bfb      	ldrb	r3, [r7, #15]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	6878      	ldr	r0, [r7, #4]
 8005a82:	f7ff ff54 	bl	800592e <RawParser_dma_addTxByte>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b01      	cmp	r3, #1
 8005a8a:	d107      	bne.n	8005a9c <RawParser_dma_finishTransmittPacket+0x62>
	WRITE_CHECK_BYTE((u8)((transmittCalcCRC >> 56U) & 0x00000000000000FFULL));

#   endif /* CRC SWITCH LOGIC */
#endif /* D_RAW_P_CRC_ENA */

	self->length_write_control = 0;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
	return &self->TX;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f503 7307 	add.w	r3, r3, #540	@ 0x21c
 8005a9a:	e006      	b.n	8005aaa <RawParser_dma_finishTransmittPacket+0x70>

	error:
	self->TX.size = 0;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	return &self->TX;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f503 7307 	add.w	r3, r3, #540	@ 0x21c

#undef WRITE_CHECK_BYTE
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}

08005ab2 <RawParser_dma_universalWrite>:


// function for use universal macro ---------------------------------------------------------------------------------------------------------
u8 RawParser_dma_universalWrite(RawParser_dma_t* const self, reg totalLenInByte, const reg typelenInByte, const u8 *data)
{
 8005ab2:	b580      	push	{r7, lr}
 8005ab4:	b086      	sub	sp, #24
 8005ab6:	af00      	add	r7, sp, #0
 8005ab8:	60f8      	str	r0, [r7, #12]
 8005aba:	60b9      	str	r1, [r7, #8]
 8005abc:	607a      	str	r2, [r7, #4]
 8005abe:	603b      	str	r3, [r7, #0]

#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	reg r_remaining_len = self->length_write_control;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f8d3 3230 	ldr.w	r3, [r3, #560]	@ 0x230
 8005ac6:	617b      	str	r3, [r7, #20]

#ifdef D_RAW_P_CRC_ENA
	rawP_crc_t r_crc = self->m_transmittCalcCRC;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 3209 	ldrb.w	r3, [r3, #521]	@ 0x209
 8005ace:	74fb      	strb	r3, [r7, #19]
#endif /* D_RAW_P_CRC_ENA */

#if defined(__LITTLE_ENDIAN__)

	while(totalLenInByte && r_remaining_len) {
 8005ad0:	e01d      	b.n	8005b0e <RawParser_dma_universalWrite+0x5c>
		const u8 b = *data;
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	781b      	ldrb	r3, [r3, #0]
 8005ad6:	74bb      	strb	r3, [r7, #18]

		if(RawParser_dma_addTxByte(self, b) != D_RAW_P_OK) {
 8005ad8:	7cbb      	ldrb	r3, [r7, #18]
 8005ada:	4619      	mov	r1, r3
 8005adc:	68f8      	ldr	r0, [r7, #12]
 8005ade:	f7ff ff26 	bl	800592e <RawParser_dma_addTxByte>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d001      	beq.n	8005aec <RawParser_dma_universalWrite+0x3a>
			return D_RAW_P_ERROR;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	e01f      	b.n	8005b2c <RawParser_dma_universalWrite+0x7a>
		}

#ifdef D_RAW_P_CRC_ENA
		r_crc = D_RAW_P_CRC_UPDATE(r_crc, b);
 8005aec:	7cba      	ldrb	r2, [r7, #18]
 8005aee:	7cfb      	ldrb	r3, [r7, #19]
 8005af0:	4611      	mov	r1, r2
 8005af2:	4618      	mov	r0, r3
 8005af4:	f7ff fd94 	bl	8005620 <fast_crc8_maxim_byte>
 8005af8:	4603      	mov	r3, r0
 8005afa:	74fb      	strb	r3, [r7, #19]
#endif /* D_RAW_P_CRC_ENA */

		--totalLenInByte;
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	3b01      	subs	r3, #1
 8005b00:	60bb      	str	r3, [r7, #8]
		--r_remaining_len;
 8005b02:	697b      	ldr	r3, [r7, #20]
 8005b04:	3b01      	subs	r3, #1
 8005b06:	617b      	str	r3, [r7, #20]
		++data;
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	603b      	str	r3, [r7, #0]
	while(totalLenInByte && r_remaining_len) {
 8005b0e:	68bb      	ldr	r3, [r7, #8]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <RawParser_dma_universalWrite+0x68>
 8005b14:	697b      	ldr	r3, [r7, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1db      	bne.n	8005ad2 <RawParser_dma_universalWrite+0x20>
			}
		}
	}
#endif /* ORDER SELECTION */

	self->length_write_control = r_remaining_len;
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	697a      	ldr	r2, [r7, #20]
 8005b1e:	f8c3 2230 	str.w	r2, [r3, #560]	@ 0x230
#ifdef D_RAW_P_CRC_ENA
	self->m_transmittCalcCRC = r_crc;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	7cfa      	ldrb	r2, [r7, #19]
 8005b26:	f883 2209 	strb.w	r2, [r3, #521]	@ 0x209
#endif /* D_RAW_P_CRC_ENA */

	return D_RAW_P_OK;
 8005b2a:	2301      	movs	r3, #1
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	3718      	adds	r7, #24
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}

08005b34 <RawParser_dma_universalRead>:

u8 RawParser_dma_universalRead(RawParser_dma_t* const self, reg totalLenInByte, const reg typelenInByte, u8 *data)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b086      	sub	sp, #24
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	60f8      	str	r0, [r7, #12]
 8005b3c:	60b9      	str	r1, [r7, #8]
 8005b3e:	607a      	str	r2, [r7, #4]
 8005b40:	603b      	str	r3, [r7, #0]
#ifdef D_RAW_P_DISABLE_INTERNAL_TX_BUFFER
	M_Assert_Break((self->TX.data == NULL), M_EMPTY, return D_RAW_P_ERROR, "No valid TX buffer, call function before: -->  rawParser_dma_setUserBufferXX, XX = RX for rx buffer, XX = TX for tx buffer, XX = s for tx & rx buffers");
#endif /* D_RAW_P_DISABLE_INTERNAL_TX_BUFFER */

	// move to cash
	const u8* const RX_data = self->RX.data;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8005b48:	617b      	str	r3, [r7, #20]
	reg uniRXPosition = self->uniRXPosition;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8005b50:	613b      	str	r3, [r7, #16]

	M_Assert_BreakSaveCheck(((uniRXPosition + totalLenInByte) > self->RX.size), M_EMPTY, return D_RAW_P_ERROR, "no length for reading");
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	441a      	add	r2, r3
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d901      	bls.n	8005b66 <RawParser_dma_universalRead+0x32>
 8005b62:	2300      	movs	r3, #0
 8005b64:	e00e      	b.n	8005b84 <RawParser_dma_universalRead+0x50>

#if defined(__LITTLE_ENDIAN__)

	// do logic
	memcpy(data, &RX_data[uniRXPosition], totalLenInByte);
 8005b66:	697a      	ldr	r2, [r7, #20]
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	68ba      	ldr	r2, [r7, #8]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	6838      	ldr	r0, [r7, #0]
 8005b72:	f002 fdd4 	bl	800871e <memcpy>
	self->uniRXPosition = uniRXPosition + totalLenInByte;
 8005b76:	693a      	ldr	r2, [r7, #16]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	441a      	add	r2, r3
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		uniRXPosition += n;
	}
	self->uniRXPosition = uniRXPosition;
#endif /* ORDER SELECTION */

	return D_RAW_P_OK;
 8005b82:	2301      	movs	r3, #1
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3718      	adds	r7, #24
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}

08005b8c <_write>:

extern UART_HandleTypeDef huart1;
#define UART_PRINTF	huart1

int _write(int file, char *ptr, int len)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&UART_PRINTF, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	f04f 33ff 	mov.w	r3, #4294967295
 8005ba0:	68b9      	ldr	r1, [r7, #8]
 8005ba2:	4804      	ldr	r0, [pc, #16]	@ (8005bb4 <_write+0x28>)
 8005ba4:	f7fd fdf6 	bl	8003794 <HAL_UART_Transmit>
	return len;
 8005ba8:	687b      	ldr	r3, [r7, #4]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
 8005bb2:	bf00      	nop
 8005bb4:	20000268 	.word	0x20000268

08005bb8 <_ZN12Stm32ADC_dma17calculateFinishedEv>:
	};

public:
	Stm32ADC_dma() = default;
	~Stm32ADC_dma();
	inline void calculateFinished() { calculated = true;}
 8005bb8:	b480      	push	{r7}
 8005bba:	b083      	sub	sp, #12
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	731a      	strb	r2, [r3, #12]
 8005bc6:	bf00      	nop
 8005bc8:	370c      	adds	r7, #12
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bc80      	pop	{r7}
 8005bce:	4770      	bx	lr

08005bd0 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef>:

	inline uint32_t getAdc(int i) const {return ma.getOut(i);}
	inline uint8_t getChannels() const { return n_channels; }

	bool proceed(const uint32_t current_time);
	static inline Stm32ADC_dma* const getObject(ADC_HandleTypeDef* const hadc) {
 8005bd0:	b480      	push	{r7}
 8005bd2:	b083      	sub	sp, #12
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
		if(instance->m_hadc == hadc) {
 8005bd8:	4b07      	ldr	r3, [pc, #28]	@ (8005bf8 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x28>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	687a      	ldr	r2, [r7, #4]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d102      	bne.n	8005bea <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x1a>
			return instance;
 8005be4:	4b04      	ldr	r3, [pc, #16]	@ (8005bf8 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x28>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	e000      	b.n	8005bec <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef+0x1c>
		}

		return nullptr;
 8005bea:	2300      	movs	r3, #0
	}
 8005bec:	4618      	mov	r0, r3
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bc80      	pop	{r7}
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	20000350 	.word	0x20000350

08005bfc <_ZN12Stm32ADC_dma5startEv>:
	// TODO Auto-generated destructor stub
	delete[] adc_values;
}

bool Stm32ADC_dma::start()
{
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
	if(n_channels) {
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	791b      	ldrb	r3, [r3, #4]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d00a      	beq.n	8005c22 <_ZN12Stm32ADC_dma5startEv+0x26>
		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	6818      	ldr	r0, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6899      	ldr	r1, [r3, #8]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	791b      	ldrb	r3, [r3, #4]
 8005c18:	461a      	mov	r2, r3
 8005c1a:	f7fc f825 	bl	8001c68 <HAL_ADC_Start_DMA>
		return true;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e000      	b.n	8005c24 <_ZN12Stm32ADC_dma5startEv+0x28>
	}

	return false;
 8005c22:	2300      	movs	r3, #0
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3708      	adds	r7, #8
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}

08005c2c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE>:

void Stm32ADC_dma::init(const Stm32ADC_init& settings)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
	m_hadc = settings.hadc;
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	681a      	ldr	r2, [r3, #0]
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	601a      	str	r2, [r3, #0]
	n_channels = settings.hadc->Init.NbrOfConversion;
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	711a      	strb	r2, [r3, #4]
	adc_values = new uint16_t[n_channels];
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	791b      	ldrb	r3, [r3, #4]
 8005c4e:	4a13      	ldr	r2, [pc, #76]	@ (8005c9c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x70>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d801      	bhi.n	8005c58 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x2c>
 8005c54:	005b      	lsls	r3, r3, #1
 8005c56:	e001      	b.n	8005c5c <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x30>
 8005c58:	f04f 33ff 	mov.w	r3, #4294967295
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f001 f9f9 	bl	8007054 <_Znaj>
 8005c62:	4603      	mov	r3, r0
 8005c64:	461a      	mov	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	609a      	str	r2, [r3, #8]

	Stm32ADC_dma::instance = this;
 8005c6a:	4a0d      	ldr	r2, [pc, #52]	@ (8005ca0 <_ZN12Stm32ADC_dma4initERKNS_13Stm32ADC_initE+0x74>)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6013      	str	r3, [r2, #0]

	ma.init(settings.filter, 16);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f103 0010 	add.w	r0, r3, #16
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	2210      	movs	r2, #16
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	f000 f927 	bl	8005ed0 <_ZN20FP_MovingAverageBase4initEfh>
	ma.allocArrays(n_channels);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 0210 	add.w	r2, r3, #16
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	791b      	ldrb	r3, [r3, #4]
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	4610      	mov	r0, r2
 8005c90:	f000 f8c6 	bl	8005e20 <_ZN21FP_MovingAverageArray11allocArraysEh>
}
 8005c94:	bf00      	nop
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	3ffffffc 	.word	0x3ffffffc
 8005ca0:	20000350 	.word	0x20000350

08005ca4 <_ZN12Stm32ADC_dma7proceedEm>:

bool Stm32ADC_dma::proceed(const uint32_t current_time)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
	if(calculated) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	7b1b      	ldrb	r3, [r3, #12]
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d00d      	beq.n	8005cd4 <_ZN12Stm32ADC_dma7proceedEm+0x30>
		ma.proceed(adc_values);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f103 0210 	add.w	r2, r3, #16
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	4610      	mov	r0, r2
 8005cc6:	f000 f8ca 	bl	8005e5e <_ZN21FP_MovingAverageArray7proceedEPt>

//		HAL_ADC_Stop_DMA(m_hadc);
//		HAL_ADC_Start_DMA(m_hadc, (uint32_t*)adc_values, n_channels);
		calculated = false;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	731a      	strb	r2, [r3, #12]

		return true;
 8005cd0:	2301      	movs	r3, #1
 8005cd2:	e000      	b.n	8005cd6 <_ZN12Stm32ADC_dma7proceedEm+0x32>
	}

	return false;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
	Stm32ADC_dma* const root = Stm32ADC_dma::getObject(hadc);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f7ff ff72 	bl	8005bd0 <_ZN12Stm32ADC_dma9getObjectEP19__ADC_HandleTypeDef>
 8005cec:	60f8      	str	r0, [r7, #12]
	if(root) {
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d002      	beq.n	8005cfa <HAL_ADC_ConvCpltCallback+0x1c>
		root->calculateFinished();
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f7ff ff5f 	bl	8005bb8 <_ZN12Stm32ADC_dma17calculateFinishedEv>
	}
}
 8005cfa:	bf00      	nop
 8005cfc:	3710      	adds	r7, #16
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	af00      	add	r7, sp, #0
    assert(g_irq_lock_ct > 0);
 8005d08:	4b0b      	ldr	r3, [pc, #44]	@ (8005d38 <IRQ_UNLOCK+0x34>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	dc05      	bgt.n	8005d1c <IRQ_UNLOCK+0x18>
 8005d10:	4b0a      	ldr	r3, [pc, #40]	@ (8005d3c <IRQ_UNLOCK+0x38>)
 8005d12:	4a0b      	ldr	r2, [pc, #44]	@ (8005d40 <IRQ_UNLOCK+0x3c>)
 8005d14:	2137      	movs	r1, #55	@ 0x37
 8005d16:	480b      	ldr	r0, [pc, #44]	@ (8005d44 <IRQ_UNLOCK+0x40>)
 8005d18:	f001 fb1e 	bl	8007358 <__assert_func>
    if (--g_irq_lock_ct <= 0)
 8005d1c:	4b06      	ldr	r3, [pc, #24]	@ (8005d38 <IRQ_UNLOCK+0x34>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3b01      	subs	r3, #1
 8005d22:	4a05      	ldr	r2, [pc, #20]	@ (8005d38 <IRQ_UNLOCK+0x34>)
 8005d24:	6013      	str	r3, [r2, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	dc04      	bgt.n	8005d34 <IRQ_UNLOCK+0x30>
    {
        g_irq_lock_ct = 0;
 8005d2a:	4b03      	ldr	r3, [pc, #12]	@ (8005d38 <IRQ_UNLOCK+0x34>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8005d30:	b662      	cpsie	i
}
 8005d32:	bf00      	nop
        __enable_irq();
    }
}
 8005d34:	bf00      	nop
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000354 	.word	0x20000354
 8005d3c:	08009cd8 	.word	0x08009cd8
 8005d40:	08009ed8 	.word	0x08009ed8
 8005d44:	08009cec 	.word	0x08009cec

08005d48 <IRQ_LOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8005d4c:	b672      	cpsid	i
}
 8005d4e:	bf00      	nop
    __disable_irq();
    ++g_irq_lock_ct;
 8005d50:	4b04      	ldr	r3, [pc, #16]	@ (8005d64 <IRQ_LOCK+0x1c>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	3301      	adds	r3, #1
 8005d56:	4a03      	ldr	r2, [pc, #12]	@ (8005d64 <IRQ_LOCK+0x1c>)
 8005d58:	6013      	str	r3, [r2, #0]
}
 8005d5a:	bf00      	nop
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bc80      	pop	{r7}
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000354 	.word	0x20000354

08005d68 <_ZN20FP_MovingAverageBase11baseProceedEmRmS0_>:
	virtual ~FP_MovingAverageBase() = default;

	bool init(const float alpha, const uint8_t Q);
	bool inline setAlpha(const float alpha) {return init(alpha, m_Q);}

	void inline baseProceed(const uint32_t x, uint32_t& last, uint32_t& last_shifted)
 8005d68:	b480      	push	{r7}
 8005d6a:	b087      	sub	sp, #28
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
	{
		const int32_t val = (x - last) * m_alpha_scaled;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	68fa      	ldr	r2, [r7, #12]
 8005d80:	68d2      	ldr	r2, [r2, #12]
 8005d82:	fb02 f303 	mul.w	r3, r2, r3
 8005d86:	617b      	str	r3, [r7, #20]
		last_shifted += val >> m_diff_b;
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68fa      	ldr	r2, [r7, #12]
 8005d8e:	7992      	ldrb	r2, [r2, #6]
 8005d90:	4611      	mov	r1, r2
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	410a      	asrs	r2, r1
 8005d96:	441a      	add	r2, r3
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	601a      	str	r2, [r3, #0]
		last = last_shifted >> m_N;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	7952      	ldrb	r2, [r2, #5]
 8005da4:	fa23 f202 	lsr.w	r2, r3, r2
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	601a      	str	r2, [r3, #0]
	}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr
	...

08005db8 <_ZN21FP_MovingAverageArrayD1Ev>:
 *      Author: admin
 */

#include "FPMovingAverageArray.h"

FP_MovingAverageArray::~FP_MovingAverageArray()
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b082      	sub	sp, #8
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	4a0e      	ldr	r2, [pc, #56]	@ (8005dfc <_ZN21FP_MovingAverageArrayD1Ev+0x44>)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
	delete[] m_y_states;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	691b      	ldr	r3, [r3, #16]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d004      	beq.n	8005dd8 <_ZN21FP_MovingAverageArrayD1Ev+0x20>
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f001 f91c 	bl	8007010 <_ZdaPv>
	delete[] m_y;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d004      	beq.n	8005dea <_ZN21FP_MovingAverageArrayD1Ev+0x32>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	695b      	ldr	r3, [r3, #20]
 8005de4:	4618      	mov	r0, r3
 8005de6:	f001 f913 	bl	8007010 <_ZdaPv>
}
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4618      	mov	r0, r3
 8005dee:	f7ff f98d 	bl	800510c <_ZN20FP_MovingAverageBaseD1Ev>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4618      	mov	r0, r3
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}
 8005dfc:	08009eec 	.word	0x08009eec

08005e00 <_ZN21FP_MovingAverageArrayD0Ev>:
FP_MovingAverageArray::~FP_MovingAverageArray()
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b082      	sub	sp, #8
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
}
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f7ff ffd5 	bl	8005db8 <_ZN21FP_MovingAverageArrayD1Ev>
 8005e0e:	211c      	movs	r1, #28
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f8fb 	bl	800700c <_ZdlPvj>
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_ZN21FP_MovingAverageArray11allocArraysEh>:

void FP_MovingAverageArray::allocArrays(const uint8_t n)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
 8005e28:	460b      	mov	r3, r1
 8005e2a:	70fb      	strb	r3, [r7, #3]
	m_y_states = new uint32_t[n];
 8005e2c:	78fb      	ldrb	r3, [r7, #3]
 8005e2e:	009b      	lsls	r3, r3, #2
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 f90f 	bl	8007054 <_Znaj>
 8005e36:	4603      	mov	r3, r0
 8005e38:	461a      	mov	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	611a      	str	r2, [r3, #16]
	m_y = new uint32_t[n];
 8005e3e:	78fb      	ldrb	r3, [r7, #3]
 8005e40:	009b      	lsls	r3, r3, #2
 8005e42:	4618      	mov	r0, r3
 8005e44:	f001 f906 	bl	8007054 <_Znaj>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	615a      	str	r2, [r3, #20]
	m_n = n;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	78fa      	ldrb	r2, [r7, #3]
 8005e54:	761a      	strb	r2, [r3, #24]
}
 8005e56:	bf00      	nop
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <_ZN21FP_MovingAverageArray7proceedEPt>:

void FP_MovingAverageArray::proceed(uint16_t* const values)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b086      	sub	sp, #24
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
 8005e66:	6039      	str	r1, [r7, #0]
	uint8_t n = m_n;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	7e1b      	ldrb	r3, [r3, #24]
 8005e6c:	75fb      	strb	r3, [r7, #23]
	uint16_t* x_ptr = values;
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	613b      	str	r3, [r7, #16]
	uint32_t* y_ptr = m_y;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	695b      	ldr	r3, [r3, #20]
 8005e76:	60fb      	str	r3, [r7, #12]
	uint32_t* y_state_ptr = m_y_states;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	60bb      	str	r3, [r7, #8]

	while(n) {
 8005e7e:	e013      	b.n	8005ea8 <_ZN21FP_MovingAverageArray7proceedEPt+0x4a>
		baseProceed(*x_ptr, *y_ptr, *y_state_ptr);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	881b      	ldrh	r3, [r3, #0]
 8005e86:	4619      	mov	r1, r3
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	68fa      	ldr	r2, [r7, #12]
 8005e8c:	f7ff ff6c 	bl	8005d68 <_ZN20FP_MovingAverageBase11baseProceedEmRmS0_>

		++x_ptr;
 8005e90:	693b      	ldr	r3, [r7, #16]
 8005e92:	3302      	adds	r3, #2
 8005e94:	613b      	str	r3, [r7, #16]
		++y_ptr;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3304      	adds	r3, #4
 8005e9a:	60fb      	str	r3, [r7, #12]
		++y_state_ptr;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	60bb      	str	r3, [r7, #8]
		--n;
 8005ea2:	7dfb      	ldrb	r3, [r7, #23]
 8005ea4:	3b01      	subs	r3, #1
 8005ea6:	75fb      	strb	r3, [r7, #23]
	while(n) {
 8005ea8:	7dfb      	ldrb	r3, [r7, #23]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1e8      	bne.n	8005e80 <_ZN21FP_MovingAverageArray7proceedEPt+0x22>
	}
}
 8005eae:	bf00      	nop
 8005eb0:	bf00      	nop
 8005eb2:	3718      	adds	r7, #24
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	bd80      	pop	{r7, pc}

08005eb8 <_ZSt4log2f>:

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b082      	sub	sp, #8
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 f8dd 	bl	8007080 <log2f>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	4618      	mov	r0, r3
 8005eca:	3708      	adds	r7, #8
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	bd80      	pop	{r7, pc}

08005ed0 <_ZN20FP_MovingAverageBase4initEfh>:
#include "FPMovingAverageBase.h"
#include <cmath>


bool FP_MovingAverageBase::init(const float alpha, const uint8_t Q)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	60b9      	str	r1, [r7, #8]
 8005eda:	4613      	mov	r3, r2
 8005edc:	71fb      	strb	r3, [r7, #7]
	const int N = -std::log2(alpha);
 8005ede:	68b8      	ldr	r0, [r7, #8]
 8005ee0:	f7ff ffea 	bl	8005eb8 <_ZSt4log2f>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8005eea:	4618      	mov	r0, r3
 8005eec:	f7fb f8b6 	bl	800105c <__aeabi_f2iz>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	617b      	str	r3, [r7, #20]

	if((Q + N) > 32 || N < 0) {
 8005ef4:	79fa      	ldrb	r2, [r7, #7]
 8005ef6:	697b      	ldr	r3, [r7, #20]
 8005ef8:	4413      	add	r3, r2
 8005efa:	2b20      	cmp	r3, #32
 8005efc:	dc02      	bgt.n	8005f04 <_ZN20FP_MovingAverageBase4initEfh+0x34>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	da01      	bge.n	8005f08 <_ZN20FP_MovingAverageBase4initEfh+0x38>
		return false;
 8005f04:	2300      	movs	r3, #0
 8005f06:	e025      	b.n	8005f54 <_ZN20FP_MovingAverageBase4initEfh+0x84>
	}

	m_N = N;
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	b2da      	uxtb	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	715a      	strb	r2, [r3, #5]
	m_Q = Q;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	79fa      	ldrb	r2, [r7, #7]
 8005f14:	711a      	strb	r2, [r3, #4]
	m_diff_b = (m_Q - m_N);
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	791a      	ldrb	r2, [r3, #4]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	795b      	ldrb	r3, [r3, #5]
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	b2da      	uxtb	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	719a      	strb	r2, [r3, #6]
	m_alpha = alpha;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]
	m_alpha_scaled = static_cast<uint32_t>(static_cast<float>(1 << Q) * alpha);
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	fa02 f303 	lsl.w	r3, r2, r3
 8005f34:	4618      	mov	r0, r3
 8005f36:	f7fa fe61 	bl	8000bfc <__aeabi_i2f>
 8005f3a:	4603      	mov	r3, r0
 8005f3c:	68b9      	ldr	r1, [r7, #8]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f7fa feb0 	bl	8000ca4 <__aeabi_fmul>
 8005f44:	4603      	mov	r3, r0
 8005f46:	4618      	mov	r0, r3
 8005f48:	f7fb f8ae 	bl	80010a8 <__aeabi_f2uiz>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	60da      	str	r2, [r3, #12]

	return true;
 8005f52:	2301      	movs	r3, #1
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3718      	adds	r7, #24
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
	...

08005f74 <_ZN13TimingManager7proceedEv>:
public:
	TimingManager();
	TimingManager(const uint32_t delay);
	~TimingManager();

    static inline void proceed() {
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b084      	sub	sp, #16
 8005f78:	af00      	add	r7, sp, #0
        for (TimingManager* const timer : m_timers) {
 8005f7a:	4b1a      	ldr	r3, [pc, #104]	@ (8005fe4 <_ZN13TimingManager7proceedEv+0x70>)
 8005f7c:	60fb      	str	r3, [r7, #12]
 8005f7e:	68f8      	ldr	r0, [r7, #12]
 8005f80:	f000 f878 	bl	8006074 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8005f84:	4603      	mov	r3, r0
 8005f86:	607b      	str	r3, [r7, #4]
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f000 f883 	bl	8006094 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	603b      	str	r3, [r7, #0]
 8005f92:	e018      	b.n	8005fc6 <_ZN13TimingManager7proceedEv+0x52>
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 f8b4 	bl	8006104 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	60bb      	str	r3, [r7, #8]
            if (timer->m_counter) {
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	bf14      	ite	ne
 8005faa:	2301      	movne	r3, #1
 8005fac:	2300      	moveq	r3, #0
 8005fae:	b2db      	uxtb	r3, r3
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d004      	beq.n	8005fbe <_ZN13TimingManager7proceedEv+0x4a>
                --timer->m_counter;
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	1e5a      	subs	r2, r3, #1
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	601a      	str	r2, [r3, #0]
        for (TimingManager* const timer : m_timers) {
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f000 f890 	bl	80060e6 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>
 8005fc6:	463a      	mov	r2, r7
 8005fc8:	1d3b      	adds	r3, r7, #4
 8005fca:	4611      	mov	r1, r2
 8005fcc:	4618      	mov	r0, r3
 8005fce:	f000 f872 	bl	80060b6 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1dd      	bne.n	8005f94 <_ZN13TimingManager7proceedEv+0x20>
            }
        }
    }
 8005fd8:	bf00      	nop
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}
 8005fe2:	bf00      	nop
 8005fe4:	20000358 	.word	0x20000358

08005fe8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b082      	sub	sp, #8
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f000 f8a2 	bl	800613a <_ZNSaIP13TimingManagerED1Ev>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3708      	adds	r7, #8
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8006000:	b580      	push	{r7, lr}
 8006002:	b082      	sub	sp, #8
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	4618      	mov	r0, r3
 800600c:	f000 f885 	bl	800611a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	4618      	mov	r0, r3
 8006014:	3708      	adds	r7, #8
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}

0800601a <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 800601a:	b580      	push	{r7, lr}
 800601c:	b082      	sub	sp, #8
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ffeb 	bl	8006000 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EEC1Ev>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	4618      	mov	r0, r3
 800602e:	3708      	adds	r7, #8
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}

08006034 <_ZN13TimingManagerC1Ev>:
	if (it != m_timers.end()) {
		m_timers.erase(it);
	}
}

TimingManager::TimingManager()
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2200      	movs	r2, #0
 8006040:	601a      	str	r2, [r3, #0]
{
	m_counter = 0;
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
	m_timers.push_back(this);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	60fb      	str	r3, [r7, #12]
 800604c:	f107 030c 	add.w	r3, r7, #12
 8006050:	4619      	mov	r1, r3
 8006052:	4804      	ldr	r0, [pc, #16]	@ (8006064 <_ZN13TimingManagerC1Ev+0x30>)
 8006054:	f000 f896 	bl	8006184 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>
}
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20000358 	.word	0x20000358

08006068 <HAL_SYSTICK_Callback>:


//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
 8006068:	b580      	push	{r7, lr}
 800606a:	af00      	add	r7, sp, #0
	TimingManager::proceed();
 800606c:	f7ff ff82 	bl	8005f74 <_ZN13TimingManager7proceedEv>
}
 8006070:	bf00      	nop
 8006072:	bd80      	pop	{r7, pc}

08006074 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      begin() _GLIBCXX_NOEXCEPT
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	f107 030c 	add.w	r3, r7, #12
 8006082:	4611      	mov	r1, r2
 8006084:	4618      	mov	r0, r3
 8006086:	f000 f88e 	bl	80061a6 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4618      	mov	r0, r3
 800608e:	3710      	adds	r7, #16
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>:
       *  element in the %vector.  Iteration is done in ordinary
       *  element order.
       */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      iterator
      end() _GLIBCXX_NOEXCEPT
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	1d1a      	adds	r2, r3, #4
 80060a0:	f107 030c 	add.w	r3, r7, #12
 80060a4:	4611      	mov	r1, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f000 f87d 	bl	80061a6 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	4618      	mov	r0, r3
 80060b0:	3710      	adds	r7, #16
 80060b2:	46bd      	mov	sp, r7
 80060b4:	bd80      	pop	{r7, pc}

080060b6 <_ZN9__gnu_cxxneIPP13TimingManagerSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() != __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline bool
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 80060b6:	b590      	push	{r4, r7, lr}
 80060b8:	b083      	sub	sp, #12
 80060ba:	af00      	add	r7, sp, #0
 80060bc:	6078      	str	r0, [r7, #4]
 80060be:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() != __rhs.base(); }
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 f87f 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80060c6:	4603      	mov	r3, r0
 80060c8:	681c      	ldr	r4, [r3, #0]
 80060ca:	6838      	ldr	r0, [r7, #0]
 80060cc:	f000 f87a 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80060d0:	4603      	mov	r3, r0
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	429c      	cmp	r4, r3
 80060d6:	bf14      	ite	ne
 80060d8:	2301      	movne	r3, #1
 80060da:	2300      	moveq	r3, #0
 80060dc:	b2db      	uxtb	r3, r3
 80060de:	4618      	mov	r0, r3
 80060e0:	370c      	adds	r7, #12
 80060e2:	46bd      	mov	sp, r7
 80060e4:	bd90      	pop	{r4, r7, pc}

080060e6 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 80060e6:	b480      	push	{r7}
 80060e8:	b083      	sub	sp, #12
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	6078      	str	r0, [r7, #4]
	++_M_current;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	1d1a      	adds	r2, r3, #4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	601a      	str	r2, [r3, #0]
	return *this;
 80060f8:	687b      	ldr	r3, [r7, #4]
      }
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	bc80      	pop	{r7}
 8006102:	4770      	bx	lr

08006104 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4618      	mov	r0, r3
 8006112:	370c      	adds	r7, #12
 8006114:	46bd      	mov	sp, r7
 8006116:	bc80      	pop	{r7}
 8006118:	4770      	bx	lr

0800611a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800611a:	b580      	push	{r7, lr}
 800611c:	b082      	sub	sp, #8
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8006122:	6878      	ldr	r0, [r7, #4]
 8006124:	f000 f858 	bl	80061d8 <_ZNSaIP13TimingManagerEC1Ev>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	4618      	mov	r0, r3
 800612c:	f000 f860 	bl	80061f0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	3708      	adds	r7, #8
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <_ZNSaIP13TimingManagerED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 800613a:	b580      	push	{r7, lr}
 800613c:	b082      	sub	sp, #8
 800613e:	af00      	add	r7, sp, #0
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6878      	ldr	r0, [r7, #4]
 8006144:	f000 f867 	bl	8006216 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4618      	mov	r0, r3
 800614c:	3708      	adds	r7, #8
 800614e:	46bd      	mov	sp, r7
 8006150:	bd80      	pop	{r7, pc}

08006152 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8006152:	b580      	push	{r7, lr}
 8006154:	b082      	sub	sp, #8
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	689a      	ldr	r2, [r3, #8]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800616a:	461a      	mov	r2, r3
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 f85c 	bl	800622a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      }
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	4618      	mov	r0, r3
 8006176:	f7ff ff37 	bl	8005fe8 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE12_Vector_implD1Ev>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZNSt6vectorIP13TimingManagerSaIS1_EE9push_backEOS1_>:
      }

#if __cplusplus >= 201103L
      _GLIBCXX20_CONSTEXPR
      void
      push_back(value_type&& __x)
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800618e:	6838      	ldr	r0, [r7, #0]
 8006190:	f000 f85e 	bl	8006250 <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>
 8006194:	4603      	mov	r3, r0
 8006196:	4619      	mov	r1, r3
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f863 	bl	8006264 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
 800619e:	bf00      	nop
 80061a0:	3708      	adds	r7, #8
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}

080061a6 <_ZN9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80061b0:	683b      	ldr	r3, [r7, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	4618      	mov	r0, r3
 80061bc:	370c      	adds	r7, #12
 80061be:	46bd      	mov	sp, r7
 80061c0:	bc80      	pop	{r7}
 80061c2:	4770      	bx	lr

080061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80061c4:	b480      	push	{r7}
 80061c6:	b083      	sub	sp, #12
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	4618      	mov	r0, r3
 80061d0:	370c      	adds	r7, #12
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bc80      	pop	{r7}
 80061d6:	4770      	bx	lr

080061d8 <_ZNSaIP13TimingManagerEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80061d8:	b580      	push	{r7, lr}
 80061da:	b082      	sub	sp, #8
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f86d 	bl	80062c0 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	605a      	str	r2, [r3, #4]
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	609a      	str	r2, [r3, #8]
	{ }
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	bc80      	pop	{r7}
 8006214:	4770      	bx	lr

08006216 <_ZNSt15__new_allocatorIP13TimingManagerED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	__new_allocator(const __new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~__new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	4618      	mov	r0, r3
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	bc80      	pop	{r7}
 8006228:	4770      	bx	lr

0800622a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
	if (__p)
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	687a      	ldr	r2, [r7, #4]
 8006240:	68b9      	ldr	r1, [r7, #8]
 8006242:	4618      	mov	r0, r3
 8006244:	f000 f846 	bl	80062d4 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>
      }
 8006248:	bf00      	nop
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZSt4moveIRP13TimingManagerEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4618      	mov	r0, r3
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	bc80      	pop	{r7}
 8006262:	4770      	bx	lr

08006264 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      _GLIBCXX20_CONSTEXPR
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8006264:	b5b0      	push	{r4, r5, r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
 800626c:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685a      	ldr	r2, [r3, #4]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
 8006276:	429a      	cmp	r2, r3
 8006278:	d011      	beq.n	800629e <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800627a:	687c      	ldr	r4, [r7, #4]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685d      	ldr	r5, [r3, #4]
 8006280:	6838      	ldr	r0, [r7, #0]
 8006282:	f000 f836 	bl	80062f2 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8006286:	4603      	mov	r3, r0
 8006288:	461a      	mov	r2, r3
 800628a:	4629      	mov	r1, r5
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f83a 	bl	8006306 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	1d1a      	adds	r2, r3, #4
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 800629c:	e00c      	b.n	80062b8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7ff fef8 	bl	8006094 <_ZNSt6vectorIP13TimingManagerSaIS1_EE3endEv>
 80062a4:	4604      	mov	r4, r0
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f000 f823 	bl	80062f2 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 80062ac:	4603      	mov	r3, r0
 80062ae:	461a      	mov	r2, r3
 80062b0:	4621      	mov	r1, r4
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f850 	bl	8006358 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80062b8:	bf00      	nop
 80062ba:	3708      	adds	r7, #8
 80062bc:	46bd      	mov	sp, r7
 80062be:	bdb0      	pop	{r4, r5, r7, pc}

080062c0 <_ZNSt15__new_allocatorIP13TimingManagerEC1Ev>:
      __new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	4618      	mov	r0, r3
 80062cc:	370c      	adds	r7, #12
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bc80      	pop	{r7}
 80062d2:	4770      	bx	lr

080062d4 <_ZNSt16allocator_traitsISaIP13TimingManagerEE10deallocateERS2_PS1_j>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static _GLIBCXX20_CONSTEXPR void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	60f8      	str	r0, [r7, #12]
 80062dc:	60b9      	str	r1, [r7, #8]
 80062de:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	68b9      	ldr	r1, [r7, #8]
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f000 f8f3 	bl	80064d0 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80062f2:	b480      	push	{r7}
 80062f4:	b083      	sub	sp, #12
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4618      	mov	r0, r3
 80062fe:	370c      	adds	r7, #12
 8006300:	46bd      	mov	sp, r7
 8006302:	bc80      	pop	{r7}
 8006304:	4770      	bx	lr

08006306 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
       *  in C++11, C++14 and C++17. Changed in C++20 to call
       *  `std::construct_at(__p, std::forward<_Args>(__args)...)` instead.
      */
      template<typename _Up, typename... _Args>
	static _GLIBCXX20_CONSTEXPR void
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006306:	b580      	push	{r7, lr}
 8006308:	b084      	sub	sp, #16
 800630a:	af00      	add	r7, sp, #0
 800630c:	60f8      	str	r0, [r7, #12]
 800630e:	60b9      	str	r1, [r7, #8]
 8006310:	607a      	str	r2, [r7, #4]
		  _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{
#if __cplusplus <= 201703L
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7ff ffed 	bl	80062f2 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8006318:	4603      	mov	r3, r0
 800631a:	461a      	mov	r2, r3
 800631c:	68b9      	ldr	r1, [r7, #8]
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f000 f8fb 	bl	800651a <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>
#else
	  std::construct_at(__p, std::forward<_Args>(__args)...);
#endif
	}
 8006324:	bf00      	nop
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800632c:	b580      	push	{r7, lr}
 800632e:	b082      	sub	sp, #8
 8006330:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8006332:	4618      	mov	r0, r3
 8006334:	f000 f805 	bl	8006342 <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8006338:	4603      	mov	r3, r0
      }
 800633a:	4618      	mov	r0, r3
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <_ZNSt6vectorIP13TimingManagerSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8006342:	b480      	push	{r7}
 8006344:	b083      	sub	sp, #12
 8006346:	af00      	add	r7, sp, #0
 8006348:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800634a:	2301      	movs	r3, #1
      }
 800634c:	4618      	mov	r0, r3
 800634e:	370c      	adds	r7, #12
 8006350:	46bd      	mov	sp, r7
 8006352:	bc80      	pop	{r7}
 8006354:	4770      	bx	lr
	...

08006358 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8006358:	b5b0      	push	{r4, r5, r7, lr}
 800635a:	b08c      	sub	sp, #48	@ 0x30
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006364:	4a59      	ldr	r2, [pc, #356]	@ (80064cc <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8006366:	2101      	movs	r1, #1
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f000 f8ec 	bl	8006546 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>
 800636e:	62b8      	str	r0, [r7, #40]	@ 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	627b      	str	r3, [r7, #36]	@ 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800637c:	68f8      	ldr	r0, [r7, #12]
 800637e:	f7ff fe79 	bl	8006074 <_ZNSt6vectorIP13TimingManagerSaIS1_EE5beginEv>
 8006382:	4603      	mov	r3, r0
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	f107 0214 	add.w	r2, r7, #20
 800638a:	f107 0308 	add.w	r3, r7, #8
 800638e:	4611      	mov	r1, r2
 8006390:	4618      	mov	r0, r3
 8006392:	f000 f8ad 	bl	80064f0 <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8006396:	4603      	mov	r3, r0
 8006398:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800639e:	4618      	mov	r0, r3
 80063a0:	f000 f918 	bl	80065d4 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>
 80063a4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80063aa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80063b0:	69ba      	ldr	r2, [r7, #24]
 80063b2:	18d5      	adds	r5, r2, r3
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ff9c 	bl	80062f2 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	4629      	mov	r1, r5
 80063c0:	4620      	mov	r0, r4
 80063c2:	f7ff ffa0 	bl	8006306 <_ZNSt16allocator_traitsISaIP13TimingManagerEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80063c6:	2300      	movs	r3, #0
 80063c8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80063ca:	f7ff ffaf 	bl	800632c <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 80063ce:	4603      	mov	r3, r0
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d027      	beq.n	8006424 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80063d4:	f107 0308 	add.w	r3, r7, #8
 80063d8:	4618      	mov	r0, r3
 80063da:	f7ff fef3 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 80063de:	4603      	mov	r3, r0
 80063e0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	4618      	mov	r0, r3
 80063e6:	f000 f91d 	bl	8006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80063ea:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80063ec:	69ba      	ldr	r2, [r7, #24]
 80063ee:	4621      	mov	r1, r4
 80063f0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80063f2:	f000 f903 	bl	80065fc <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80063f6:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 80063f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063fa:	3304      	adds	r3, #4
 80063fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f7ff fede 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8006408:	4603      	mov	r3, r0
 800640a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	4618      	mov	r0, r3
 8006410:	f000 f908 	bl	8006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8006414:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006416:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006418:	6a39      	ldr	r1, [r7, #32]
 800641a:	4620      	mov	r0, r4
 800641c:	f000 f8ee 	bl	80065fc <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8006420:	62f8      	str	r0, [r7, #44]	@ 0x2c
 8006422:	e026      	b.n	8006472 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8006424:	f107 0308 	add.w	r3, r7, #8
 8006428:	4618      	mov	r0, r3
 800642a:	f7ff fecb 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800642e:	4603      	mov	r3, r0
 8006430:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	4618      	mov	r0, r3
 8006436:	f000 f8f5 	bl	8006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 800643a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800643c:	69ba      	ldr	r2, [r7, #24]
 800643e:	4621      	mov	r1, r4
 8006440:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006442:	f000 f8f9 	bl	8006638 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006446:	62f8      	str	r0, [r7, #44]	@ 0x2c

	      ++__new_finish;
 8006448:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644a:	3304      	adds	r3, #4
 800644c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 800644e:	f107 0308 	add.w	r3, r7, #8
 8006452:	4618      	mov	r0, r3
 8006454:	f7ff feb6 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8006458:	4603      	mov	r3, r0
 800645a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4618      	mov	r0, r3
 8006460:	f000 f8e0 	bl	8006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8006464:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006466:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006468:	6a39      	ldr	r1, [r7, #32]
 800646a:	4620      	mov	r0, r4
 800646c:	f000 f8e4 	bl	8006638 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006470:	62f8      	str	r0, [r7, #44]	@ 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006472:	f7ff ff5b 	bl	800632c <_ZNSt6vectorIP13TimingManagerSaIS1_EE15_S_use_relocateEv>
 8006476:	4603      	mov	r3, r0
 8006478:	f083 0301 	eor.w	r3, r3, #1
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d009      	beq.n	8006496 <_ZNSt6vectorIP13TimingManagerSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4618      	mov	r0, r3
 8006486:	f000 f8cd 	bl	8006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 800648a:	4603      	mov	r3, r0
 800648c:	461a      	mov	r2, r3
 800648e:	6a39      	ldr	r1, [r7, #32]
 8006490:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006492:	f000 f8ea 	bl	800666a <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8006496:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	689a      	ldr	r2, [r3, #8]
 800649c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80064a2:	461a      	mov	r2, r3
 80064a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80064a6:	f7ff fec0 	bl	800622a <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	69ba      	ldr	r2, [r7, #24]
 80064ae:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80064b4:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80064b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80064b8:	009b      	lsls	r3, r3, #2
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	441a      	add	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	609a      	str	r2, [r3, #8]
    }
 80064c2:	bf00      	nop
 80064c4:	3730      	adds	r7, #48	@ 0x30
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bdb0      	pop	{r4, r5, r7, pc}
 80064ca:	bf00      	nop
 80064cc:	08009d14 	.word	0x08009d14

080064d0 <_ZNSt15__new_allocatorIP13TimingManagerE10deallocateEPS1_j>:
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(_Tp* __p, size_type __n __attribute__ ((__unused__)))
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	4619      	mov	r1, r3
 80064e2:	68b8      	ldr	r0, [r7, #8]
 80064e4:	f000 fd92 	bl	800700c <_ZdlPvj>
      }
 80064e8:	bf00      	nop
 80064ea:	3710      	adds	r7, #16
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}

080064f0 <_ZN9__gnu_cxxmiIPP13TimingManagerSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80064f0:	b590      	push	{r4, r7, lr}
 80064f2:	b083      	sub	sp, #12
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
 80064f8:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f7ff fe62 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 8006500:	4603      	mov	r3, r0
 8006502:	681c      	ldr	r4, [r3, #0]
 8006504:	6838      	ldr	r0, [r7, #0]
 8006506:	f7ff fe5d 	bl	80061c4 <_ZNK9__gnu_cxx17__normal_iteratorIPP13TimingManagerSt6vectorIS2_SaIS2_EEE4baseEv>
 800650a:	4603      	mov	r3, r0
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	1ae3      	subs	r3, r4, r3
 8006510:	109b      	asrs	r3, r3, #2
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	bd90      	pop	{r4, r7, pc}

0800651a <_ZNSt15__new_allocatorIP13TimingManagerE9constructIS1_JS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 800651a:	b590      	push	{r4, r7, lr}
 800651c:	b085      	sub	sp, #20
 800651e:	af00      	add	r7, sp, #0
 8006520:	60f8      	str	r0, [r7, #12]
 8006522:	60b9      	str	r1, [r7, #8]
 8006524:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	4619      	mov	r1, r3
 800652a:	2004      	movs	r0, #4
 800652c:	f7ff fd16 	bl	8005f5c <_ZnwjPv>
 8006530:	4604      	mov	r4, r0
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f7ff fedd 	bl	80062f2 <_ZSt7forwardIP13TimingManagerEOT_RNSt16remove_referenceIS2_E4typeE>
 8006538:	4603      	mov	r3, r0
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6023      	str	r3, [r4, #0]
 800653e:	bf00      	nop
 8006540:	3714      	adds	r7, #20
 8006542:	46bd      	mov	sp, r7
 8006544:	bd90      	pop	{r4, r7, pc}

08006546 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc>:
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8006546:	b590      	push	{r4, r7, lr}
 8006548:	b087      	sub	sp, #28
 800654a:	af00      	add	r7, sp, #0
 800654c:	60f8      	str	r0, [r7, #12]
 800654e:	60b9      	str	r1, [r7, #8]
 8006550:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 f8a7 	bl	80066a6 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 8006558:	4604      	mov	r4, r0
 800655a:	68f8      	ldr	r0, [r7, #12]
 800655c:	f000 f8b4 	bl	80066c8 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 8006560:	4603      	mov	r3, r0
 8006562:	1ae2      	subs	r2, r4, r3
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	429a      	cmp	r2, r3
 8006568:	bf34      	ite	cc
 800656a:	2301      	movcc	r3, #1
 800656c:	2300      	movcs	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 fd75 	bl	8007064 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800657a:	68f8      	ldr	r0, [r7, #12]
 800657c:	f000 f8a4 	bl	80066c8 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 8006580:	4604      	mov	r4, r0
 8006582:	68f8      	ldr	r0, [r7, #12]
 8006584:	f000 f8a0 	bl	80066c8 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 8006588:	4603      	mov	r3, r0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	f107 0208 	add.w	r2, r7, #8
 8006590:	f107 0310 	add.w	r3, r7, #16
 8006594:	4611      	mov	r1, r2
 8006596:	4618      	mov	r0, r3
 8006598:	f000 f8a5 	bl	80066e6 <_ZSt3maxIjERKT_S2_S2_>
 800659c:	4603      	mov	r3, r0
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4423      	add	r3, r4
 80065a2:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80065a4:	68f8      	ldr	r0, [r7, #12]
 80065a6:	f000 f88f 	bl	80066c8 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>
 80065aa:	4602      	mov	r2, r0
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d306      	bcc.n	80065c0 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x7a>
 80065b2:	68f8      	ldr	r0, [r7, #12]
 80065b4:	f000 f877 	bl	80066a6 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 80065b8:	4602      	mov	r2, r0
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	4293      	cmp	r3, r2
 80065be:	d904      	bls.n	80065ca <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x84>
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 f870 	bl	80066a6 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>
 80065c6:	4603      	mov	r3, r0
 80065c8:	e000      	b.n	80065cc <_ZNKSt6vectorIP13TimingManagerSaIS1_EE12_M_check_lenEjPKc+0x86>
 80065ca:	697b      	ldr	r3, [r7, #20]
      }
 80065cc:	4618      	mov	r0, r3
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	bd90      	pop	{r4, r7, pc}

080065d4 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b082      	sub	sp, #8
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d006      	beq.n	80065f2 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x1e>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6839      	ldr	r1, [r7, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f000 f88f 	bl	800670c <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>
 80065ee:	4603      	mov	r3, r0
 80065f0:	e000      	b.n	80065f4 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE11_M_allocateEj+0x20>
 80065f2:	2300      	movs	r3, #0
      }
 80065f4:	4618      	mov	r0, r3
 80065f6:	3708      	adds	r7, #8
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80065fc:	b590      	push	{r4, r7, lr}
 80065fe:	b087      	sub	sp, #28
 8006600:	af02      	add	r7, sp, #8
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
 8006608:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 800660a:	f88d 4000 	strb.w	r4, [sp]
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	687a      	ldr	r2, [r7, #4]
 8006612:	68b9      	ldr	r1, [r7, #8]
 8006614:	68f8      	ldr	r0, [r7, #12]
 8006616:	f000 f888 	bl	800672a <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 800661a:	4603      	mov	r3, r0
      }
 800661c:	4618      	mov	r0, r3
 800661e:	3714      	adds	r7, #20
 8006620:	46bd      	mov	sp, r7
 8006622:	bd90      	pop	{r4, r7, pc}

08006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8006624:	b480      	push	{r7}
 8006626:	b083      	sub	sp, #12
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	4618      	mov	r0, r3
 8006630:	370c      	adds	r7, #12
 8006632:	46bd      	mov	sp, r7
 8006634:	bc80      	pop	{r7}
 8006636:	4770      	bx	lr

08006638 <_ZSt34__uninitialized_move_if_noexcept_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8006638:	b590      	push	{r4, r7, lr}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	60f8      	str	r0, [r7, #12]
 8006640:	60b9      	str	r1, [r7, #8]
 8006642:	607a      	str	r2, [r7, #4]
 8006644:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f881 	bl	800674e <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 800664c:	4604      	mov	r4, r0
 800664e:	68b8      	ldr	r0, [r7, #8]
 8006650:	f000 f87d 	bl	800674e <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>
 8006654:	4601      	mov	r1, r0
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	687a      	ldr	r2, [r7, #4]
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f886 	bl	800676c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8006660:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	bd90      	pop	{r4, r7, pc}

0800666a <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>:
    }

  template<typename _ForwardIterator, typename _Tp>
    _GLIBCXX20_CONSTEXPR
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 800666a:	b580      	push	{r7, lr}
 800666c:	b084      	sub	sp, #16
 800666e:	af00      	add	r7, sp, #0
 8006670:	60f8      	str	r0, [r7, #12]
 8006672:	60b9      	str	r1, [r7, #8]
 8006674:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8006676:	68b9      	ldr	r1, [r7, #8]
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f888 	bl	800678e <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>
    }
 800667e:	bf00      	nop
 8006680:	3710      	adds	r7, #16
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}

08006686 <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II, _II, _GLIBCXX_STD_C::_Deque_iterator<_Tp, _Tp&, _Tp*>);

  template<bool _IsMove, typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006686:	b580      	push	{r7, lr}
 8006688:	b084      	sub	sp, #16
 800668a:	af00      	add	r7, sp, #0
 800668c:	60f8      	str	r0, [r7, #12]
 800668e:	60b9      	str	r1, [r7, #8]
 8006690:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006692:	687a      	ldr	r2, [r7, #4]
 8006694:	68b9      	ldr	r1, [r7, #8]
 8006696:	68f8      	ldr	r0, [r7, #12]
 8006698:	f000 f886 	bl	80067a8 <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 800669c:	4603      	mov	r3, r0
 800669e:	4618      	mov	r0, r3
 80066a0:	3710      	adds	r7, #16
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}

080066a6 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80066a6:	b580      	push	{r7, lr}
 80066a8:	b082      	sub	sp, #8
 80066aa:	af00      	add	r7, sp, #0
 80066ac:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	4618      	mov	r0, r3
 80066b2:	f000 f8a3 	bl	80067fc <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 80066b6:	4603      	mov	r3, r0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f000 f885 	bl	80067c8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>
 80066be:	4603      	mov	r3, r0
 80066c0:	4618      	mov	r0, r3
 80066c2:	3708      	adds	r7, #8
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}

080066c8 <_ZNKSt6vectorIP13TimingManagerSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80066c8:	b480      	push	{r7}
 80066ca:	b083      	sub	sp, #12
 80066cc:	af00      	add	r7, sp, #0
 80066ce:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	685a      	ldr	r2, [r3, #4]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	1ad3      	subs	r3, r2, r3
 80066da:	109b      	asrs	r3, r3, #2
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	bc80      	pop	{r7}
 80066e4:	4770      	bx	lr

080066e6 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80066e6:	b480      	push	{r7}
 80066e8:	b083      	sub	sp, #12
 80066ea:	af00      	add	r7, sp, #0
 80066ec:	6078      	str	r0, [r7, #4]
 80066ee:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d201      	bcs.n	8006700 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	e000      	b.n	8006702 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8006700:	687b      	ldr	r3, [r7, #4]
    }
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	bc80      	pop	{r7}
 800670a:	4770      	bx	lr

0800670c <_ZNSt16allocator_traitsISaIP13TimingManagerEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 800670c:	b580      	push	{r7, lr}
 800670e:	b082      	sub	sp, #8
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
 8006714:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006716:	2200      	movs	r2, #0
 8006718:	6839      	ldr	r1, [r7, #0]
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 f878 	bl	8006810 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>
 8006720:	4603      	mov	r3, r0
 8006722:	4618      	mov	r0, r3
 8006724:	3708      	adds	r7, #8
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <_ZNSt6vectorIP13TimingManagerSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800672a:	b580      	push	{r7, lr}
 800672c:	b084      	sub	sp, #16
 800672e:	af00      	add	r7, sp, #0
 8006730:	60f8      	str	r0, [r7, #12]
 8006732:	60b9      	str	r1, [r7, #8]
 8006734:	607a      	str	r2, [r7, #4]
 8006736:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	687a      	ldr	r2, [r7, #4]
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f88f 	bl	8006862 <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>
 8006744:	4603      	mov	r3, r0
      }
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <_ZSt32__make_move_if_noexcept_iteratorIP13TimingManagerSt13move_iteratorIPS1_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = __conditional_t<__move_if_noexcept_cond<_Tp>::value,
		      const _Tp*, move_iterator<_Tp*>>>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006756:	f107 030c 	add.w	r3, r7, #12
 800675a:	6879      	ldr	r1, [r7, #4]
 800675c:	4618      	mov	r0, r3
 800675e:	f000 f89d 	bl	800689c <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	4618      	mov	r0, r3
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}

0800676c <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP13TimingManagerES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 800676c:	b580      	push	{r7, lr}
 800676e:	b084      	sub	sp, #16
 8006770:	af00      	add	r7, sp, #0
 8006772:	60f8      	str	r0, [r7, #12]
 8006774:	60b9      	str	r1, [r7, #8]
 8006776:	607a      	str	r2, [r7, #4]
 8006778:	603b      	str	r3, [r7, #0]
      return std::uninitialized_copy(__first, __last, __result);
 800677a:	687a      	ldr	r2, [r7, #4]
 800677c:	68b9      	ldr	r1, [r7, #8]
 800677e:	68f8      	ldr	r0, [r7, #12]
 8006780:	f000 f89e 	bl	80068c0 <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 8006784:	4603      	mov	r3, r0
    }
 8006786:	4618      	mov	r0, r3
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <_ZSt8_DestroyIPP13TimingManagerEvT_S3_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800678e:	b580      	push	{r7, lr}
 8006790:	b082      	sub	sp, #8
 8006792:	af00      	add	r7, sp, #0
 8006794:	6078      	str	r0, [r7, #4]
 8006796:	6039      	str	r1, [r7, #0]
#if __cplusplus >= 202002L
      if (std::__is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8006798:	6839      	ldr	r1, [r7, #0]
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f8a4 	bl	80068e8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>
    }
 80067a0:	bf00      	nop
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <_ZSt14__copy_move_a2ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80067b4:	687a      	ldr	r2, [r7, #4]
 80067b6:	68b9      	ldr	r1, [r7, #8]
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f89f 	bl	80068fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>
 80067be:	4603      	mov	r3, r0
    }
 80067c0:	4618      	mov	r0, r3
 80067c2:	3710      	adds	r7, #16
 80067c4:	46bd      	mov	sp, r7
 80067c6:	bd80      	pop	{r7, pc}

080067c8 <_ZNSt6vectorIP13TimingManagerSaIS1_EE11_S_max_sizeERKS2_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static _GLIBCXX20_CONSTEXPR size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b084      	sub	sp, #16
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80067d0:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
 80067d4:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f8ad 	bl	8006936 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>
 80067dc:	4603      	mov	r3, r0
 80067de:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80067e0:	f107 0208 	add.w	r2, r7, #8
 80067e4:	f107 030c 	add.w	r3, r7, #12
 80067e8:	4611      	mov	r1, r2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 f8af 	bl	800694e <_ZSt3minIjERKT_S2_S2_>
 80067f0:	4603      	mov	r3, r0
 80067f2:	681b      	ldr	r3, [r3, #0]
      }
 80067f4:	4618      	mov	r0, r3
 80067f6:	3710      	adds	r7, #16
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <_ZNKSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr

08006810 <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
	if (__builtin_expect(__n > this->_M_max_size(), false))
 800681c:	68f8      	ldr	r0, [r7, #12]
 800681e:	f000 f8a9 	bl	8006974 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 8006822:	4602      	mov	r2, r0
 8006824:	68bb      	ldr	r3, [r7, #8]
 8006826:	4293      	cmp	r3, r2
 8006828:	bf8c      	ite	hi
 800682a:	2301      	movhi	r3, #1
 800682c:	2300      	movls	r3, #0
 800682e:	b2db      	uxtb	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	bf14      	ite	ne
 8006834:	2301      	movne	r3, #1
 8006836:	2300      	moveq	r3, #0
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d007      	beq.n	800684e <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3e>
	    if (__n > (std::size_t(-1) / sizeof(_Tp)))
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006844:	d301      	bcc.n	800684a <_ZNSt15__new_allocatorIP13TimingManagerE8allocateEjPKv+0x3a>
	      std::__throw_bad_array_new_length();
 8006846:	f000 fc0a 	bl	800705e <_ZSt28__throw_bad_array_new_lengthv>
	    std::__throw_bad_alloc();
 800684a:	f000 fc05 	bl	8007058 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	009b      	lsls	r3, r3, #2
 8006852:	4618      	mov	r0, r3
 8006854:	f000 fbed 	bl	8007032 <_Znwj>
 8006858:	4603      	mov	r3, r0
      }
 800685a:	4618      	mov	r0, r3
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <_ZSt12__relocate_aIPP13TimingManagerS2_SaIS1_EET0_T_S5_S4_RT1_>:

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    _GLIBCXX20_CONSTEXPR
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006862:	b5b0      	push	{r4, r5, r7, lr}
 8006864:	b084      	sub	sp, #16
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	607a      	str	r2, [r7, #4]
 800686e:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return std::__relocate_a_1(std::__niter_base(__first),
 8006870:	68f8      	ldr	r0, [r7, #12]
 8006872:	f000 f88a 	bl	800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8006876:	4604      	mov	r4, r0
 8006878:	68b8      	ldr	r0, [r7, #8]
 800687a:	f000 f886 	bl	800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 800687e:	4605      	mov	r5, r0
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 f882 	bl	800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8006886:	4602      	mov	r2, r0
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	4629      	mov	r1, r5
 800688c:	4620      	mov	r0, r4
 800688e:	f000 f886 	bl	800699e <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8006892:	4603      	mov	r3, r0
				 std::__niter_base(__last),
				 std::__niter_base(__result), __alloc);
    }
 8006894:	4618      	mov	r0, r3
 8006896:	3710      	adds	r7, #16
 8006898:	46bd      	mov	sp, r7
 800689a:	bdb0      	pop	{r4, r5, r7, pc}

0800689c <_ZNSt13move_iteratorIPP13TimingManagerEC1ES2_>:
      move_iterator(iterator_type __i)
 800689c:	b580      	push	{r7, lr}
 800689e:	b082      	sub	sp, #8
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 80068a6:	463b      	mov	r3, r7
 80068a8:	4618      	mov	r0, r3
 80068aa:	f000 f896 	bl	80069da <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>
 80068ae:	4603      	mov	r3, r0
 80068b0:	681a      	ldr	r2, [r3, #0]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	601a      	str	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4618      	mov	r0, r3
 80068ba:	3708      	adds	r7, #8
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <_ZSt18uninitialized_copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
      const bool __can_memmove = __is_trivial(_ValueType1);
 80068cc:	2301      	movs	r3, #1
 80068ce:	75fb      	strb	r3, [r7, #23]
      const bool __assignable
 80068d0:	2301      	movs	r3, #1
 80068d2:	75bb      	strb	r3, [r7, #22]
	__uninit_copy(__first, __last, __result);
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	68b9      	ldr	r1, [r7, #8]
 80068d8:	68f8      	ldr	r0, [r7, #12]
 80068da:	f000 f888 	bl	80069ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>
 80068de:	4603      	mov	r3, r0
    }
 80068e0:	4618      	mov	r0, r3
 80068e2:	3718      	adds	r7, #24
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}

080068e8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP13TimingManagerEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	6039      	str	r1, [r7, #0]
 80068f2:	bf00      	nop
 80068f4:	370c      	adds	r7, #12
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bc80      	pop	{r7}
 80068fa:	4770      	bx	lr

080068fc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	1ad3      	subs	r3, r2, r3
 800690e:	109b      	asrs	r3, r3, #2
 8006910:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d006      	beq.n	8006926 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP13TimingManagerEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006918:	697b      	ldr	r3, [r7, #20]
 800691a:	009b      	lsls	r3, r3, #2
 800691c:	461a      	mov	r2, r3
 800691e:	68f9      	ldr	r1, [r7, #12]
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f001 fe01 	bl	8008528 <memmove>
	  return __result + _Num;
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	009b      	lsls	r3, r3, #2
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
	}
 800692e:	4618      	mov	r0, r3
 8006930:	3718      	adds	r7, #24
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}

08006936 <_ZNSt16allocator_traitsISaIP13TimingManagerEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8006936:	b580      	push	{r7, lr}
 8006938:	b082      	sub	sp, #8
 800693a:	af00      	add	r7, sp, #0
 800693c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 f865 	bl	8006a0e <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>
 8006944:	4603      	mov	r3, r0
      }
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800694e:	b480      	push	{r7}
 8006950:	b083      	sub	sp, #12
 8006952:	af00      	add	r7, sp, #0
 8006954:	6078      	str	r0, [r7, #4]
 8006956:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	681a      	ldr	r2, [r3, #0]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	429a      	cmp	r2, r3
 8006962:	d201      	bcs.n	8006968 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	e000      	b.n	800696a <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 8006968:	687b      	ldr	r3, [r7, #4]
    }
 800696a:	4618      	mov	r0, r3
 800696c:	370c      	adds	r7, #12
 800696e:	46bd      	mov	sp, r7
 8006970:	bc80      	pop	{r7}
 8006972:	4770      	bx	lr

08006974 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8006974:	b480      	push	{r7}
 8006976:	b083      	sub	sp, #12
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800697c:	f06f 4360 	mvn.w	r3, #3758096384	@ 0xe0000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	bc80      	pop	{r7}
 8006988:	4770      	bx	lr

0800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>:
    __niter_base(_Iterator __it)
 800698a:	b480      	push	{r7}
 800698c:	b083      	sub	sp, #12
 800698e:	af00      	add	r7, sp, #0
 8006990:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4618      	mov	r0, r3
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	bc80      	pop	{r7}
 800699c:	4770      	bx	lr

0800699e <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800699e:	b580      	push	{r7, lr}
 80069a0:	b086      	sub	sp, #24
 80069a2:	af00      	add	r7, sp, #0
 80069a4:	60f8      	str	r0, [r7, #12]
 80069a6:	60b9      	str	r1, [r7, #8]
 80069a8:	607a      	str	r2, [r7, #4]
 80069aa:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80069ac:	68ba      	ldr	r2, [r7, #8]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	109b      	asrs	r3, r3, #2
 80069b4:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	dd06      	ble.n	80069ca <_ZSt14__relocate_a_1IP13TimingManagerS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	009b      	lsls	r3, r3, #2
 80069c0:	461a      	mov	r2, r3
 80069c2:	68f9      	ldr	r1, [r7, #12]
 80069c4:	6878      	ldr	r0, [r7, #4]
 80069c6:	f001 fdaf 	bl	8008528 <memmove>
      return __result + __count;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	009b      	lsls	r3, r3, #2
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	4413      	add	r3, r2
    }
 80069d2:	4618      	mov	r0, r3
 80069d4:	3718      	adds	r7, #24
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <_ZSt4moveIRPP13TimingManagerEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 80069da:	b480      	push	{r7}
 80069dc:	b083      	sub	sp, #12
 80069de:	af00      	add	r7, sp, #0
 80069e0:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	4618      	mov	r0, r3
 80069e6:	370c      	adds	r7, #12
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bc80      	pop	{r7}
 80069ec:	4770      	bx	lr

080069ee <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP13TimingManagerES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b084      	sub	sp, #16
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	60f8      	str	r0, [r7, #12]
 80069f6:	60b9      	str	r1, [r7, #8]
 80069f8:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80069fa:	687a      	ldr	r2, [r7, #4]
 80069fc:	68b9      	ldr	r1, [r7, #8]
 80069fe:	68f8      	ldr	r0, [r7, #12]
 8006a00:	f000 f811 	bl	8006a26 <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>
 8006a04:	4603      	mov	r3, r0
 8006a06:	4618      	mov	r0, r3
 8006a08:	3710      	adds	r7, #16
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <_ZNKSt15__new_allocatorIP13TimingManagerE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b082      	sub	sp, #8
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	f7ff ffac 	bl	8006974 <_ZNKSt15__new_allocatorIP13TimingManagerE11_M_max_sizeEv>
 8006a1c:	4603      	mov	r3, r0
 8006a1e:	4618      	mov	r0, r3
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}

08006a26 <_ZSt4copyISt13move_iteratorIPP13TimingManagerES3_ET0_T_S6_S5_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006a26:	b590      	push	{r4, r7, lr}
 8006a28:	b085      	sub	sp, #20
 8006a2a:	af00      	add	r7, sp, #0
 8006a2c:	60f8      	str	r0, [r7, #12]
 8006a2e:	60b9      	str	r1, [r7, #8]
 8006a30:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::reference>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006a32:	68f8      	ldr	r0, [r7, #12]
 8006a34:	f000 f80f 	bl	8006a56 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006a38:	4604      	mov	r4, r0
 8006a3a:	68b8      	ldr	r0, [r7, #8]
 8006a3c:	f000 f80b 	bl	8006a56 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006a40:	4603      	mov	r3, r0
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	4619      	mov	r1, r3
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 f816 	bl	8006a78 <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8006a4c:	4603      	mov	r3, r0
    }
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd90      	pop	{r4, r7, pc}

08006a56 <_ZSt12__miter_baseIPP13TimingManagerEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    };

  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    auto
    __miter_base(move_iterator<_Iterator> __it)
 8006a56:	b580      	push	{r7, lr}
 8006a58:	b082      	sub	sp, #8
 8006a5a:	af00      	add	r7, sp, #0
 8006a5c:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 8006a5e:	1d3b      	adds	r3, r7, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 f82c 	bl	8006abe <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>
 8006a66:	4603      	mov	r3, r0
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f833 	bl	8006ad4 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	4618      	mov	r0, r3
 8006a72:	3708      	adds	r7, #8
 8006a74:	46bd      	mov	sp, r7
 8006a76:	bd80      	pop	{r7, pc}

08006a78 <_ZSt13__copy_move_aILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006a78:	b5b0      	push	{r4, r5, r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	60f8      	str	r0, [r7, #12]
 8006a80:	60b9      	str	r1, [r7, #8]
 8006a82:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006a84:	68f8      	ldr	r0, [r7, #12]
 8006a86:	f7ff ff80 	bl	800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8006a8a:	4604      	mov	r4, r0
 8006a8c:	68b8      	ldr	r0, [r7, #8]
 8006a8e:	f7ff ff7c 	bl	800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8006a92:	4605      	mov	r5, r0
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4618      	mov	r0, r3
 8006a98:	f7ff ff77 	bl	800698a <_ZSt12__niter_baseIPP13TimingManagerET_S3_>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	4629      	mov	r1, r5
 8006aa2:	4620      	mov	r0, r4
 8006aa4:	f7ff fdef 	bl	8006686 <_ZSt14__copy_move_a1ILb1EPP13TimingManagerS2_ET1_T0_S4_S3_>
 8006aa8:	4602      	mov	r2, r0
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	4611      	mov	r1, r2
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 f81a 	bl	8006ae8 <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>
 8006ab4:	4603      	mov	r3, r0
    }
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	3710      	adds	r7, #16
 8006aba:	46bd      	mov	sp, r7
 8006abc:	bdb0      	pop	{r4, r5, r7, pc}

08006abe <_ZNKSt13move_iteratorIPP13TimingManagerE4baseEv>:
      base() const
 8006abe:	b480      	push	{r7}
 8006ac0:	b083      	sub	sp, #12
 8006ac2:	af00      	add	r7, sp, #0
 8006ac4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	370c      	adds	r7, #12
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr

08006ad4 <_ZSt12__miter_baseIPP13TimingManagerET_S3_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bc80      	pop	{r7}
 8006ae6:	4770      	bx	lr

08006ae8 <_ZSt12__niter_wrapIPP13TimingManagerET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	4618      	mov	r0, r3
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bc80      	pop	{r7}
 8006afc:	4770      	bx	lr
	...

08006b00 <_Z41__static_initialization_and_destruction_0ii>:
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b082      	sub	sp, #8
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	6078      	str	r0, [r7, #4]
 8006b08:	6039      	str	r1, [r7, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d107      	bne.n	8006b20 <_Z41__static_initialization_and_destruction_0ii+0x20>
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d102      	bne.n	8006b20 <_Z41__static_initialization_and_destruction_0ii+0x20>
std::vector<TimingManager*> TimingManager::m_timers;
 8006b1a:	4809      	ldr	r0, [pc, #36]	@ (8006b40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006b1c:	f7ff fa7d 	bl	800601a <_ZNSt6vectorIP13TimingManagerSaIS1_EEC1Ev>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d107      	bne.n	8006b36 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006b26:	683b      	ldr	r3, [r7, #0]
 8006b28:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d102      	bne.n	8006b36 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006b30:	4803      	ldr	r0, [pc, #12]	@ (8006b40 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006b32:	f000 f807 	bl	8006b44 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>
}
 8006b36:	bf00      	nop
 8006b38:	3708      	adds	r7, #8
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000358 	.word	0x20000358

08006b44 <_ZNSt6vectorIP13TimingManagerSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8006b44:	b5b0      	push	{r4, r5, r7, lr}
 8006b46:	b082      	sub	sp, #8
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681c      	ldr	r4, [r3, #0]
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7ff fd64 	bl	8006624 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EE19_M_get_Tp_allocatorEv>
 8006b5c:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006b5e:	461a      	mov	r2, r3
 8006b60:	4629      	mov	r1, r5
 8006b62:	4620      	mov	r0, r4
 8006b64:	f7ff fd81 	bl	800666a <_ZSt8_DestroyIPP13TimingManagerS1_EvT_S3_RSaIT0_E>
      }
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	f7ff faf1 	bl	8006152 <_ZNSt12_Vector_baseIP13TimingManagerSaIS1_EED1Ev>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4618      	mov	r0, r3
 8006b74:	3708      	adds	r7, #8
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bdb0      	pop	{r4, r5, r7, pc}

08006b7a <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006b82:	2001      	movs	r0, #1
 8006b84:	f7ff ffbc 	bl	8006b00 <_Z41__static_initialization_and_destruction_0ii>
 8006b88:	bd80      	pop	{r7, pc}

08006b8a <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 8006b8a:	b580      	push	{r7, lr}
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8006b92:	2000      	movs	r0, #0
 8006b94:	f7ff ffb4 	bl	8006b00 <_Z41__static_initialization_and_destruction_0ii>
 8006b98:	bd80      	pop	{r7, pc}

08006b9a <UART_Init>:
 * @param   -
 * @return  Returns the \link #status_t status\endlink (#STATUS_OK on success).
 *****************************************************************************/

status_t UART_Init(stm32_DMA_uart_t* const self, UART_HandleTypeDef * const huart, const uint32_t rxBufferSize)
{
 8006b9a:	b580      	push	{r7, lr}
 8006b9c:	b086      	sub	sp, #24
 8006b9e:	af00      	add	r7, sp, #0
 8006ba0:	60f8      	str	r0, [r7, #12]
 8006ba2:	60b9      	str	r1, [r7, #8]
 8006ba4:	607a      	str	r2, [r7, #4]
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d006      	beq.n	8006bba <UART_Init+0x20>
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d003      	beq.n	8006bba <UART_Init+0x20>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006bb8:	d902      	bls.n	8006bc0 <UART_Init+0x26>
		return ERROR_INVALID_ARGUMENT;
 8006bba:	f06f 0304 	mvn.w	r3, #4
 8006bbe:	e045      	b.n	8006c4c <UART_Init+0xb2>
	}

	memset(self, 0, sizeof(stm32_DMA_uart_t));
 8006bc0:	222c      	movs	r2, #44	@ 0x2c
 8006bc2:	2100      	movs	r1, #0
 8006bc4:	68f8      	ldr	r0, [r7, #12]
 8006bc6:	f001 fcc9 	bl	800855c <memset>
	self->huart = huart;
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	601a      	str	r2, [r3, #0]
	self->isTxBusy_ = false;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	711a      	strb	r2, [r3, #4]

#ifdef UART_CONTAINER_ENA

	if(pushContainerUartInstance(self) != STATUS_OK) {
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 fa02 	bl	8006fe0 <pushContainerUartInstance>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d008      	beq.n	8006bf4 <UART_Init+0x5a>
		self->isTxBusy_ = true;
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	2201      	movs	r2, #1
 8006be6:	711a      	strb	r2, [r3, #4]
		self->RX.rxBufferSize = 0;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2200      	movs	r2, #0
 8006bec:	619a      	str	r2, [r3, #24]
		return ERROR_FAIL;
 8006bee:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf2:	e02b      	b.n	8006c4c <UART_Init+0xb2>
	}

#endif /* UART_CONTAINER_ENA */

	void* const buf1 = malloc(rxBufferSize);
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	f000 fbe9 	bl	80073cc <malloc>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	617b      	str	r3, [r7, #20]
	if(buf1 == NULL) {
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d102      	bne.n	8006c0a <UART_Init+0x70>
		return ERROR_FAIL;
 8006c04:	f04f 33ff 	mov.w	r3, #4294967295
 8006c08:	e020      	b.n	8006c4c <UART_Init+0xb2>
	}
	void* const buf2 = malloc(rxBufferSize);
 8006c0a:	6878      	ldr	r0, [r7, #4]
 8006c0c:	f000 fbde 	bl	80073cc <malloc>
 8006c10:	4603      	mov	r3, r0
 8006c12:	613b      	str	r3, [r7, #16]
	if(buf2 == NULL) {
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d105      	bne.n	8006c26 <UART_Init+0x8c>
		free(buf1);
 8006c1a:	6978      	ldr	r0, [r7, #20]
 8006c1c:	f000 fbde 	bl	80073dc <free>
		return ERROR_FAIL;
 8006c20:	f04f 33ff 	mov.w	r3, #4294967295
 8006c24:	e012      	b.n	8006c4c <UART_Init+0xb2>
	}

	self->RX.rxBuffer1 = buf1;
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	61da      	str	r2, [r3, #28]
	self->RX.rxBuffer2 = buf2;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	693a      	ldr	r2, [r7, #16]
 8006c30:	621a      	str	r2, [r3, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	619a      	str	r2, [r3, #24]

	//HAL_UART_Receive_DMA(huart, self->RX.rxBuffer1, rxBufferSize);
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	69da      	ldr	r2, [r3, #28]
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	629a      	str	r2, [r3, #40]	@ 0x28
	UART_SetRxCallback(self, 0, 0);
 8006c40:	2200      	movs	r2, #0
 8006c42:	2100      	movs	r1, #0
 8006c44:	68f8      	ldr	r0, [r7, #12]
 8006c46:	f000 f852 	bl	8006cee <UART_SetRxCallback>

	return STATUS_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3718      	adds	r7, #24
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd80      	pop	{r7, pc}

08006c54 <UART_SendBuffer>:

	return STATUS_OK;
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	607a      	str	r2, [r7, #4]
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d002      	beq.n	8006c6c <UART_SendBuffer+0x18>
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <UART_SendBuffer+0x1e>
		return ERROR_INVALID_ARGUMENT;
 8006c6c:	f06f 0304 	mvn.w	r3, #4
 8006c70:	e020      	b.n	8006cb4 <UART_SendBuffer+0x60>
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8006c72:	f7ff f869 	bl	8005d48 <IRQ_LOCK>
	if (self->isTxBusy_) {
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	791b      	ldrb	r3, [r3, #4]
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d003      	beq.n	8006c88 <UART_SendBuffer+0x34>
		IRQ_UNLOCK();
 8006c80:	f7ff f840 	bl	8005d04 <IRQ_UNLOCK>
		return STATUS_BUSY;
 8006c84:	2302      	movs	r3, #2
 8006c86:	e015      	b.n	8006cb4 <UART_SendBuffer+0x60>
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	711a      	strb	r2, [r3, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	b292      	uxth	r2, r2
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	4618      	mov	r0, r3
 8006c9a:	f7fc fdff 	bl	800389c <HAL_UART_Transmit_DMA>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	75fb      	strb	r3, [r7, #23]
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 8006ca2:	f7ff f82f 	bl	8005d04 <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d002      	beq.n	8006cb2 <UART_SendBuffer+0x5e>
		return ERROR_FAIL;
 8006cac:	f04f 33ff 	mov.w	r3, #4294967295
 8006cb0:	e000      	b.n	8006cb4 <UART_SendBuffer+0x60>
	}

	return STATUS_OK;
 8006cb2:	2300      	movs	r3, #0
}
 8006cb4:	4618      	mov	r0, r3
 8006cb6:	3718      	adds	r7, #24
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b085      	sub	sp, #20
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	60f8      	str	r0, [r7, #12]
 8006cc4:	60b9      	str	r1, [r7, #8]
 8006cc6:	607a      	str	r2, [r7, #4]
	if (self->isTxBusy_) {
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	b2db      	uxtb	r3, r3
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d001      	beq.n	8006cd6 <UART_SetTxcallback+0x1a>
		return STATUS_BUSY;
 8006cd2:	2302      	movs	r3, #2
 8006cd4:	e006      	b.n	8006ce4 <UART_SetTxcallback+0x28>
	}

	self->TX.txCallback_ = f;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	609a      	str	r2, [r3, #8]
	self->TX.txCallbackData_ = captured;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	60da      	str	r2, [r3, #12]

	return STATUS_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bc80      	pop	{r7}
 8006cec:	4770      	bx	lr

08006cee <UART_SetRxCallback>:


void UART_SetRxCallback(stm32_DMA_uart_t* const self, const uart_rx_callback_t f, void* const captured)
{
 8006cee:	b580      	push	{r7, lr}
 8006cf0:	b088      	sub	sp, #32
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	60f8      	str	r0, [r7, #12]
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	607a      	str	r2, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	61fb      	str	r3, [r7, #28]

	self->RX.rxCallback_ = f;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	611a      	str	r2, [r3, #16]
	self->RX.rxCallbackData_ = captured;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	615a      	str	r2, [r3, #20]

	/* Start receiving */
	if (f) {
 8006d0c:	68bb      	ldr	r3, [r7, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d015      	beq.n	8006d3e <UART_SetRxCallback+0x50>
		uint8_t* const r_rxBuffer = self->RX.rxBuffer1;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	61bb      	str	r3, [r7, #24]
		const uint32_t r_buff_size = self->RX.rxBufferSize;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	617b      	str	r3, [r7, #20]

		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 8006d1e:	697b      	ldr	r3, [r7, #20]
 8006d20:	b29b      	uxth	r3, r3
 8006d22:	461a      	mov	r2, r3
 8006d24:	69b9      	ldr	r1, [r7, #24]
 8006d26:	69f8      	ldr	r0, [r7, #28]
 8006d28:	f7fc fe28 	bl	800397c <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 8006d2c:	69fb      	ldr	r3, [r7, #28]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	68da      	ldr	r2, [r3, #12]
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f042 0210 	orr.w	r2, r2, #16
 8006d3a:	60da      	str	r2, [r3, #12]
	} else {
		HAL_UART_AbortReceive(huart);
		UART_RXCallback(self);
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
	}
}
 8006d3c:	e00d      	b.n	8006d5a <UART_SetRxCallback+0x6c>
		HAL_UART_AbortReceive(huart);
 8006d3e:	69f8      	ldr	r0, [r7, #28]
 8006d40:	f7fc fe41 	bl	80039c6 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8006d44:	68f8      	ldr	r0, [r7, #12]
 8006d46:	f000 f82f 	bl	8006da8 <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 8006d4a:	69fb      	ldr	r3, [r7, #28]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68da      	ldr	r2, [r3, #12]
 8006d50:	69fb      	ldr	r3, [r7, #28]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0210 	bic.w	r2, r2, #16
 8006d58:	60da      	str	r2, [r3, #12]
}
 8006d5a:	bf00      	nop
 8006d5c:	3720      	adds	r7, #32
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}

08006d62 <USER_UART_IRQHandler>:
* IT Callbacks
 *****************************************************************************/

//general in stm32f1xx_it.c
void USER_UART_IRQHandler(stm32_DMA_uart_t* const self)
{
 8006d62:	b580      	push	{r7, lr}
 8006d64:	b084      	sub	sp, #16
 8006d66:	af00      	add	r7, sp, #0
 8006d68:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0310 	and.w	r3, r3, #16
 8006d7a:	2b10      	cmp	r3, #16
 8006d7c:	d110      	bne.n	8006da0 <USER_UART_IRQHandler+0x3e>
		// On idle interruption
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8006d7e:	2300      	movs	r3, #0
 8006d80:	60bb      	str	r3, [r7, #8]
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	60bb      	str	r3, [r7, #8]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	60bb      	str	r3, [r7, #8]
 8006d92:	68bb      	ldr	r3, [r7, #8]
		HAL_UART_AbortReceive(huart);
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f7fc fe16 	bl	80039c6 <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	f000 f804 	bl	8006da8 <UART_RXCallback>
	}
}
 8006da0:	bf00      	nop
 8006da2:	3710      	adds	r7, #16
 8006da4:	46bd      	mov	sp, r7
 8006da6:	bd80      	pop	{r7, pc}

08006da8 <UART_RXCallback>:

// rx callback in void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
void UART_RXCallback(stm32_DMA_uart_t* const self)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08c      	sub	sp, #48	@ 0x30
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	62bb      	str	r3, [r7, #40]	@ 0x28
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	627b      	str	r3, [r7, #36]	@ 0x24
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	623b      	str	r3, [r7, #32]

	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8006dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dcc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d00b      	beq.n	8006dea <UART_RXCallback+0x42>
 8006dd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d006      	beq.n	8006dea <UART_RXCallback+0x42>
 8006ddc:	4b20      	ldr	r3, [pc, #128]	@ (8006e60 <UART_RXCallback+0xb8>)
 8006dde:	4a21      	ldr	r2, [pc, #132]	@ (8006e64 <UART_RXCallback+0xbc>)
 8006de0:	f44f 7197 	mov.w	r1, #302	@ 0x12e
 8006de4:	4820      	ldr	r0, [pc, #128]	@ (8006e68 <UART_RXCallback+0xc0>)
 8006de6:	f000 fab7 	bl	8007358 <__assert_func>

	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	6a3a      	ldr	r2, [r7, #32]
 8006df4:	1ad3      	subs	r3, r2, r3
 8006df6:	61fb      	str	r3, [r7, #28]
	uint8_t* const curr = huart->pRxBuffPtr;
 8006df8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006dfc:	61bb      	str	r3, [r7, #24]
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8006dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e02:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006e04:	429a      	cmp	r2, r3
 8006e06:	d101      	bne.n	8006e0c <UART_RXCallback+0x64>
 8006e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e0a:	e000      	b.n	8006e0e <UART_RXCallback+0x66>
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	617b      	str	r3, [r7, #20]

	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	b29b      	uxth	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	6979      	ldr	r1, [r7, #20]
 8006e18:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006e1a:	f7fc fdaf 	bl	800397c <HAL_UART_Receive_DMA>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	74fb      	strb	r3, [r7, #19]
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 8006e22:	7cfb      	ldrb	r3, [r7, #19]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d105      	bne.n	8006e34 <UART_RXCallback+0x8c>
 8006e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2be0      	cmp	r3, #224	@ 0xe0
 8006e32:	d102      	bne.n	8006e3a <UART_RXCallback+0x92>
		UART_ErrorCallback(self);
 8006e34:	6878      	ldr	r0, [r7, #4]
 8006e36:	f000 f83f 	bl	8006eb8 <UART_ErrorCallback>
	}


	void* const captured = self->RX.rxCallbackData_;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	60fb      	str	r3, [r7, #12]
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	691b      	ldr	r3, [r3, #16]
 8006e44:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d004      	beq.n	8006e56 <UART_RXCallback+0xae>
		callback(curr, size, captured);
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	68fa      	ldr	r2, [r7, #12]
 8006e50:	69f9      	ldr	r1, [r7, #28]
 8006e52:	69b8      	ldr	r0, [r7, #24]
 8006e54:	4798      	blx	r3
	}
}
 8006e56:	bf00      	nop
 8006e58:	3730      	adds	r7, #48	@ 0x30
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	08009d30 	.word	0x08009d30
 8006e64:	08009ef4 	.word	0x08009ef4
 8006e68:	08009d78 	.word	0x08009d78

08006e6c <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	b086      	sub	sp, #24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
	void* const captured = self->TX.txCallbackData_;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	617b      	str	r3, [r7, #20]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	613b      	str	r3, [r7, #16]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	2be0      	cmp	r3, #224	@ 0xe0
 8006e8c:	d102      	bne.n	8006e94 <UART_TXCallback+0x28>
 8006e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8006e92:	e000      	b.n	8006e96 <UART_TXCallback+0x2a>
 8006e94:	2300      	movs	r3, #0
 8006e96:	73fb      	strb	r3, [r7, #15]
	self->isTxBusy_ = false;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	711a      	strb	r2, [r3, #4]

	if (callback) {
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d005      	beq.n	8006eb0 <UART_TXCallback+0x44>
		callback(status, captured);
 8006ea4:	f997 200f 	ldrsb.w	r2, [r7, #15]
 8006ea8:	693b      	ldr	r3, [r7, #16]
 8006eaa:	6979      	ldr	r1, [r7, #20]
 8006eac:	4610      	mov	r0, r2
 8006eae:	4798      	blx	r3
	}
}
 8006eb0:	bf00      	nop
 8006eb2:	3718      	adds	r7, #24
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	bd80      	pop	{r7, pc}

08006eb8 <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b086      	sub	sp, #24
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
	UART_HandleTypeDef* const huart = self->huart;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	613b      	str	r3, [r7, #16]
	status_t status = ERROR_FAIL;
 8006ec6:	23ff      	movs	r3, #255	@ 0xff
 8006ec8:	75fb      	strb	r3, [r7, #23]

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ece:	f003 0308 	and.w	r3, r3, #8
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <UART_ErrorCallback+0x24>
		status = ERROR_UART_RX_OVERRUN;
 8006ed6:	23b8      	movs	r3, #184	@ 0xb8
 8006ed8:	75fb      	strb	r3, [r7, #23]
 8006eda:	e058      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ee0:	f003 0304 	and.w	r3, r3, #4
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <UART_ErrorCallback+0x36>
		status = ERROR_UART_FRAMING_ERR;
 8006ee8:	23b6      	movs	r3, #182	@ 0xb6
 8006eea:	75fb      	strb	r3, [r7, #23]
 8006eec:	e04f      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ef2:	f003 0302 	and.w	r3, r3, #2
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <UART_ErrorCallback+0x48>
		status = ERROR_UART_RX_NOISE;
 8006efa:	23b7      	movs	r3, #183	@ 0xb7
 8006efc:	75fb      	strb	r3, [r7, #23]
 8006efe:	e046      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f04:	f003 0310 	and.w	r3, r3, #16
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d005      	beq.n	8006f18 <UART_ErrorCallback+0x60>
		self->isTxBusy_ = false;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	711a      	strb	r2, [r3, #4]
		status = ERROR_UART_TX_DMA_ERR;
 8006f12:	23b5      	movs	r3, #181	@ 0xb5
 8006f14:	75fb      	strb	r3, [r7, #23]
 8006f16:	e03a      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	2b24      	cmp	r3, #36	@ 0x24
 8006f22:	d102      	bne.n	8006f2a <UART_ErrorCallback+0x72>
		status = STATUS_BUSY;
 8006f24:	2302      	movs	r3, #2
 8006f26:	75fb      	strb	r3, [r7, #23]
 8006f28:	e031      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 8006f2a:	693b      	ldr	r3, [r7, #16]
 8006f2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f30:	b2db      	uxtb	r3, r3
 8006f32:	2b22      	cmp	r3, #34	@ 0x22
 8006f34:	d102      	bne.n	8006f3c <UART_ErrorCallback+0x84>
		status = STATUS_BUSY;
 8006f36:	2302      	movs	r3, #2
 8006f38:	75fb      	strb	r3, [r7, #23]
 8006f3a:	e028      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b21      	cmp	r3, #33	@ 0x21
 8006f46:	d102      	bne.n	8006f4e <UART_ErrorCallback+0x96>
		status = STATUS_BUSY;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	75fb      	strb	r3, [r7, #23]
 8006f4c:	e01f      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	2b23      	cmp	r3, #35	@ 0x23
 8006f58:	d102      	bne.n	8006f60 <UART_ErrorCallback+0xa8>
		status = STATUS_BUSY;
 8006f5a:	2302      	movs	r3, #2
 8006f5c:	75fb      	strb	r3, [r7, #23]
 8006f5e:	e016      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	2be0      	cmp	r3, #224	@ 0xe0
 8006f6a:	d105      	bne.n	8006f78 <UART_ErrorCallback+0xc0>
		self->isTxBusy_ = false;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	711a      	strb	r2, [r3, #4]
		status = ERROR_FAIL;
 8006f72:	23ff      	movs	r3, #255	@ 0xff
 8006f74:	75fb      	strb	r3, [r7, #23]
 8006f76:	e00a      	b.n	8006f8e <UART_ErrorCallback+0xd6>
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006f7e:	b2db      	uxtb	r3, r3
 8006f80:	2ba0      	cmp	r3, #160	@ 0xa0
 8006f82:	d104      	bne.n	8006f8e <UART_ErrorCallback+0xd6>
		self->isTxBusy_ = false;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2200      	movs	r2, #0
 8006f88:	711a      	strb	r2, [r3, #4]
		status = ERROR_TIMEOUT;
 8006f8a:	23fa      	movs	r3, #250	@ 0xfa
 8006f8c:	75fb      	strb	r3, [r7, #23]
	}

	void* const captured = self->Error.errorCallbackData_;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f92:	60fb      	str	r3, [r7, #12]
	const uart_error_callback_t callback = self->Error.errorCallback;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f98:	60bb      	str	r3, [r7, #8]
	if (callback) {
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d005      	beq.n	8006fac <UART_ErrorCallback+0xf4>
		callback(status, captured);
 8006fa0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	68f9      	ldr	r1, [r7, #12]
 8006fa8:	4610      	mov	r0, r2
 8006faa:	4798      	blx	r3
	}
}
 8006fac:	bf00      	nop
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <getContainerUartInstance>:
	m_instance_counter = 0;
#endif /* (UART_CONTAINER_COUNT > 1) */
}

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
#if (UART_CONTAINER_COUNT == 1)

	stm32_DMA_uart_t* const r_inst = m_instances[0];
 8006fbc:	4b07      	ldr	r3, [pc, #28]	@ (8006fdc <getContainerUartInstance+0x28>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	60fb      	str	r3, [r7, #12]
	if(r_inst->huart == huart) {
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	687a      	ldr	r2, [r7, #4]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d101      	bne.n	8006fd0 <getContainerUartInstance+0x1c>
		return r_inst;
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	e000      	b.n	8006fd2 <getContainerUartInstance+0x1e>
			return r_inst;
		}
	}
#endif /* (UART_CONTAINER_COUNT == 1) */

	return NULL;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	3714      	adds	r7, #20
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bc80      	pop	{r7}
 8006fda:	4770      	bx	lr
 8006fdc:	20000364 	.word	0x20000364

08006fe0 <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b083      	sub	sp, #12
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
#if (UART_CONTAINER_COUNT == 1)
	if(inst == NULL) {
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d102      	bne.n	8006ff4 <pushContainerUartInstance+0x14>
		return ERROR_FAIL;
 8006fee:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff2:	e003      	b.n	8006ffc <pushContainerUartInstance+0x1c>
	}

	m_instances[0] = inst;
 8006ff4:	4a04      	ldr	r2, [pc, #16]	@ (8007008 <pushContainerUartInstance+0x28>)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6013      	str	r3, [r2, #0]
	}
	m_instances[m_instance_counter] = inst;
	++m_instance_counter;
#endif /* (UART_CONTAINER_COUNT == 1) */

	return STATUS_OK;
 8006ffa:	2300      	movs	r3, #0
}
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	370c      	adds	r7, #12
 8007000:	46bd      	mov	sp, r7
 8007002:	bc80      	pop	{r7}
 8007004:	4770      	bx	lr
 8007006:	bf00      	nop
 8007008:	20000364 	.word	0x20000364

0800700c <_ZdlPvj>:
 800700c:	f000 b82d 	b.w	800706a <_ZdlPv>

08007010 <_ZdaPv>:
 8007010:	f000 b82b 	b.w	800706a <_ZdlPv>

08007014 <__cxa_guard_acquire>:
 8007014:	6802      	ldr	r2, [r0, #0]
 8007016:	4603      	mov	r3, r0
 8007018:	07d2      	lsls	r2, r2, #31
 800701a:	d405      	bmi.n	8007028 <__cxa_guard_acquire+0x14>
 800701c:	7842      	ldrb	r2, [r0, #1]
 800701e:	b102      	cbz	r2, 8007022 <__cxa_guard_acquire+0xe>
 8007020:	deff      	udf	#255	@ 0xff
 8007022:	2001      	movs	r0, #1
 8007024:	7058      	strb	r0, [r3, #1]
 8007026:	4770      	bx	lr
 8007028:	2000      	movs	r0, #0
 800702a:	4770      	bx	lr

0800702c <__cxa_guard_release>:
 800702c:	2301      	movs	r3, #1
 800702e:	6003      	str	r3, [r0, #0]
 8007030:	4770      	bx	lr

08007032 <_Znwj>:
 8007032:	2801      	cmp	r0, #1
 8007034:	bf38      	it	cc
 8007036:	2001      	movcc	r0, #1
 8007038:	b510      	push	{r4, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	4620      	mov	r0, r4
 800703e:	f000 f9c5 	bl	80073cc <malloc>
 8007042:	b100      	cbz	r0, 8007046 <_Znwj+0x14>
 8007044:	bd10      	pop	{r4, pc}
 8007046:	f000 f813 	bl	8007070 <_ZSt15get_new_handlerv>
 800704a:	b908      	cbnz	r0, 8007050 <_Znwj+0x1e>
 800704c:	f000 f97c 	bl	8007348 <abort>
 8007050:	4780      	blx	r0
 8007052:	e7f3      	b.n	800703c <_Znwj+0xa>

08007054 <_Znaj>:
 8007054:	f7ff bfed 	b.w	8007032 <_Znwj>

08007058 <_ZSt17__throw_bad_allocv>:
 8007058:	b508      	push	{r3, lr}
 800705a:	f000 f975 	bl	8007348 <abort>

0800705e <_ZSt28__throw_bad_array_new_lengthv>:
 800705e:	b508      	push	{r3, lr}
 8007060:	f000 f972 	bl	8007348 <abort>

08007064 <_ZSt20__throw_length_errorPKc>:
 8007064:	b508      	push	{r3, lr}
 8007066:	f000 f96f 	bl	8007348 <abort>

0800706a <_ZdlPv>:
 800706a:	f000 b9b7 	b.w	80073dc <free>
	...

08007070 <_ZSt15get_new_handlerv>:
 8007070:	4b02      	ldr	r3, [pc, #8]	@ (800707c <_ZSt15get_new_handlerv+0xc>)
 8007072:	6818      	ldr	r0, [r3, #0]
 8007074:	f3bf 8f5b 	dmb	ish
 8007078:	4770      	bx	lr
 800707a:	bf00      	nop
 800707c:	20000368 	.word	0x20000368

08007080 <log2f>:
 8007080:	b508      	push	{r3, lr}
 8007082:	f000 f807 	bl	8007094 <logf>
 8007086:	4902      	ldr	r1, [pc, #8]	@ (8007090 <log2f+0x10>)
 8007088:	f7f9 fec0 	bl	8000e0c <__aeabi_fdiv>
 800708c:	bd08      	pop	{r3, pc}
 800708e:	bf00      	nop
 8007090:	3f317218 	.word	0x3f317218

08007094 <logf>:
 8007094:	b538      	push	{r3, r4, r5, lr}
 8007096:	4604      	mov	r4, r0
 8007098:	f000 f828 	bl	80070ec <__ieee754_logf>
 800709c:	4621      	mov	r1, r4
 800709e:	4605      	mov	r5, r0
 80070a0:	4620      	mov	r0, r4
 80070a2:	f7f9 ffc5 	bl	8001030 <__aeabi_fcmpun>
 80070a6:	b970      	cbnz	r0, 80070c6 <logf+0x32>
 80070a8:	2100      	movs	r1, #0
 80070aa:	4620      	mov	r0, r4
 80070ac:	f7f9 ffb6 	bl	800101c <__aeabi_fcmpgt>
 80070b0:	b948      	cbnz	r0, 80070c6 <logf+0x32>
 80070b2:	2100      	movs	r1, #0
 80070b4:	4620      	mov	r0, r4
 80070b6:	f7f9 ff89 	bl	8000fcc <__aeabi_fcmpeq>
 80070ba:	b130      	cbz	r0, 80070ca <logf+0x36>
 80070bc:	f001 faf4 	bl	80086a8 <__errno>
 80070c0:	2322      	movs	r3, #34	@ 0x22
 80070c2:	4d06      	ldr	r5, [pc, #24]	@ (80070dc <logf+0x48>)
 80070c4:	6003      	str	r3, [r0, #0]
 80070c6:	4628      	mov	r0, r5
 80070c8:	bd38      	pop	{r3, r4, r5, pc}
 80070ca:	f001 faed 	bl	80086a8 <__errno>
 80070ce:	2321      	movs	r3, #33	@ 0x21
 80070d0:	6003      	str	r3, [r0, #0]
 80070d2:	4803      	ldr	r0, [pc, #12]	@ (80070e0 <logf+0x4c>)
 80070d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80070d8:	f000 b804 	b.w	80070e4 <nanf>
 80070dc:	ff800000 	.word	0xff800000
 80070e0:	08009f3f 	.word	0x08009f3f

080070e4 <nanf>:
 80070e4:	4800      	ldr	r0, [pc, #0]	@ (80070e8 <nanf+0x4>)
 80070e6:	4770      	bx	lr
 80070e8:	7fc00000 	.word	0x7fc00000

080070ec <__ieee754_logf>:
 80070ec:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80070f0:	4601      	mov	r1, r0
 80070f2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070f6:	d106      	bne.n	8007106 <__ieee754_logf+0x1a>
 80070f8:	2100      	movs	r1, #0
 80070fa:	f04f 404c 	mov.w	r0, #3422552064	@ 0xcc000000
 80070fe:	f7f9 fe85 	bl	8000e0c <__aeabi_fdiv>
 8007102:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	2800      	cmp	r0, #0
 8007108:	4604      	mov	r4, r0
 800710a:	da03      	bge.n	8007114 <__ieee754_logf+0x28>
 800710c:	f7f9 fcc0 	bl	8000a90 <__aeabi_fsub>
 8007110:	2100      	movs	r1, #0
 8007112:	e7f4      	b.n	80070fe <__ieee754_logf+0x12>
 8007114:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8007118:	db02      	blt.n	8007120 <__ieee754_logf+0x34>
 800711a:	f7f9 fcbb 	bl	8000a94 <__addsf3>
 800711e:	e7f0      	b.n	8007102 <__ieee754_logf+0x16>
 8007120:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8007124:	da35      	bge.n	8007192 <__ieee754_logf+0xa6>
 8007126:	f04f 4198 	mov.w	r1, #1275068416	@ 0x4c000000
 800712a:	f7f9 fdbb 	bl	8000ca4 <__aeabi_fmul>
 800712e:	f06f 0318 	mvn.w	r3, #24
 8007132:	4604      	mov	r4, r0
 8007134:	15e7      	asrs	r7, r4, #23
 8007136:	3f7f      	subs	r7, #127	@ 0x7f
 8007138:	441f      	add	r7, r3
 800713a:	4b76      	ldr	r3, [pc, #472]	@ (8007314 <__ieee754_logf+0x228>)
 800713c:	f3c4 0416 	ubfx	r4, r4, #0, #23
 8007140:	4423      	add	r3, r4
 8007142:	f403 0000 	and.w	r0, r3, #8388608	@ 0x800000
 8007146:	f080 507e 	eor.w	r0, r0, #1065353216	@ 0x3f800000
 800714a:	f04f 517e 	mov.w	r1, #1065353216	@ 0x3f800000
 800714e:	4320      	orrs	r0, r4
 8007150:	eb07 57d3 	add.w	r7, r7, r3, lsr #23
 8007154:	f7f9 fc9c 	bl	8000a90 <__aeabi_fsub>
 8007158:	4b6f      	ldr	r3, [pc, #444]	@ (8007318 <__ieee754_logf+0x22c>)
 800715a:	f104 020f 	add.w	r2, r4, #15
 800715e:	4013      	ands	r3, r2
 8007160:	4606      	mov	r6, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d143      	bne.n	80071ee <__ieee754_logf+0x102>
 8007166:	2100      	movs	r1, #0
 8007168:	f7f9 ff30 	bl	8000fcc <__aeabi_fcmpeq>
 800716c:	b198      	cbz	r0, 8007196 <__ieee754_logf+0xaa>
 800716e:	2f00      	cmp	r7, #0
 8007170:	f000 80cd 	beq.w	800730e <__ieee754_logf+0x222>
 8007174:	4638      	mov	r0, r7
 8007176:	f7f9 fd41 	bl	8000bfc <__aeabi_i2f>
 800717a:	4968      	ldr	r1, [pc, #416]	@ (800731c <__ieee754_logf+0x230>)
 800717c:	4605      	mov	r5, r0
 800717e:	f7f9 fd91 	bl	8000ca4 <__aeabi_fmul>
 8007182:	4967      	ldr	r1, [pc, #412]	@ (8007320 <__ieee754_logf+0x234>)
 8007184:	4604      	mov	r4, r0
 8007186:	4628      	mov	r0, r5
 8007188:	f7f9 fd8c 	bl	8000ca4 <__aeabi_fmul>
 800718c:	4601      	mov	r1, r0
 800718e:	4620      	mov	r0, r4
 8007190:	e7c3      	b.n	800711a <__ieee754_logf+0x2e>
 8007192:	2300      	movs	r3, #0
 8007194:	e7ce      	b.n	8007134 <__ieee754_logf+0x48>
 8007196:	4963      	ldr	r1, [pc, #396]	@ (8007324 <__ieee754_logf+0x238>)
 8007198:	4630      	mov	r0, r6
 800719a:	f7f9 fd83 	bl	8000ca4 <__aeabi_fmul>
 800719e:	4601      	mov	r1, r0
 80071a0:	f04f 507c 	mov.w	r0, #1056964608	@ 0x3f000000
 80071a4:	f7f9 fc74 	bl	8000a90 <__aeabi_fsub>
 80071a8:	4631      	mov	r1, r6
 80071aa:	4604      	mov	r4, r0
 80071ac:	4630      	mov	r0, r6
 80071ae:	f7f9 fd79 	bl	8000ca4 <__aeabi_fmul>
 80071b2:	4601      	mov	r1, r0
 80071b4:	4620      	mov	r0, r4
 80071b6:	f7f9 fd75 	bl	8000ca4 <__aeabi_fmul>
 80071ba:	4604      	mov	r4, r0
 80071bc:	b90f      	cbnz	r7, 80071c2 <__ieee754_logf+0xd6>
 80071be:	4621      	mov	r1, r4
 80071c0:	e078      	b.n	80072b4 <__ieee754_logf+0x1c8>
 80071c2:	4638      	mov	r0, r7
 80071c4:	f7f9 fd1a 	bl	8000bfc <__aeabi_i2f>
 80071c8:	4954      	ldr	r1, [pc, #336]	@ (800731c <__ieee754_logf+0x230>)
 80071ca:	4607      	mov	r7, r0
 80071cc:	f7f9 fd6a 	bl	8000ca4 <__aeabi_fmul>
 80071d0:	4605      	mov	r5, r0
 80071d2:	4638      	mov	r0, r7
 80071d4:	4952      	ldr	r1, [pc, #328]	@ (8007320 <__ieee754_logf+0x234>)
 80071d6:	f7f9 fd65 	bl	8000ca4 <__aeabi_fmul>
 80071da:	4601      	mov	r1, r0
 80071dc:	4620      	mov	r0, r4
 80071de:	f7f9 fc57 	bl	8000a90 <__aeabi_fsub>
 80071e2:	4631      	mov	r1, r6
 80071e4:	f7f9 fc54 	bl	8000a90 <__aeabi_fsub>
 80071e8:	4601      	mov	r1, r0
 80071ea:	4628      	mov	r0, r5
 80071ec:	e079      	b.n	80072e2 <__ieee754_logf+0x1f6>
 80071ee:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80071f2:	f7f9 fc4f 	bl	8000a94 <__addsf3>
 80071f6:	4601      	mov	r1, r0
 80071f8:	4630      	mov	r0, r6
 80071fa:	f7f9 fe07 	bl	8000e0c <__aeabi_fdiv>
 80071fe:	4681      	mov	r9, r0
 8007200:	4638      	mov	r0, r7
 8007202:	f7f9 fcfb 	bl	8000bfc <__aeabi_i2f>
 8007206:	4649      	mov	r1, r9
 8007208:	4680      	mov	r8, r0
 800720a:	4648      	mov	r0, r9
 800720c:	f7f9 fd4a 	bl	8000ca4 <__aeabi_fmul>
 8007210:	4601      	mov	r1, r0
 8007212:	4682      	mov	sl, r0
 8007214:	f7f9 fd46 	bl	8000ca4 <__aeabi_fmul>
 8007218:	4605      	mov	r5, r0
 800721a:	4943      	ldr	r1, [pc, #268]	@ (8007328 <__ieee754_logf+0x23c>)
 800721c:	f7f9 fd42 	bl	8000ca4 <__aeabi_fmul>
 8007220:	4942      	ldr	r1, [pc, #264]	@ (800732c <__ieee754_logf+0x240>)
 8007222:	f7f9 fc37 	bl	8000a94 <__addsf3>
 8007226:	4629      	mov	r1, r5
 8007228:	f7f9 fd3c 	bl	8000ca4 <__aeabi_fmul>
 800722c:	4940      	ldr	r1, [pc, #256]	@ (8007330 <__ieee754_logf+0x244>)
 800722e:	f7f9 fc31 	bl	8000a94 <__addsf3>
 8007232:	4629      	mov	r1, r5
 8007234:	f7f9 fd36 	bl	8000ca4 <__aeabi_fmul>
 8007238:	493e      	ldr	r1, [pc, #248]	@ (8007334 <__ieee754_logf+0x248>)
 800723a:	f7f9 fc2b 	bl	8000a94 <__addsf3>
 800723e:	4651      	mov	r1, sl
 8007240:	f7f9 fd30 	bl	8000ca4 <__aeabi_fmul>
 8007244:	493c      	ldr	r1, [pc, #240]	@ (8007338 <__ieee754_logf+0x24c>)
 8007246:	4682      	mov	sl, r0
 8007248:	4628      	mov	r0, r5
 800724a:	f7f9 fd2b 	bl	8000ca4 <__aeabi_fmul>
 800724e:	493b      	ldr	r1, [pc, #236]	@ (800733c <__ieee754_logf+0x250>)
 8007250:	f7f9 fc20 	bl	8000a94 <__addsf3>
 8007254:	4629      	mov	r1, r5
 8007256:	f7f9 fd25 	bl	8000ca4 <__aeabi_fmul>
 800725a:	4939      	ldr	r1, [pc, #228]	@ (8007340 <__ieee754_logf+0x254>)
 800725c:	f7f9 fc1a 	bl	8000a94 <__addsf3>
 8007260:	4629      	mov	r1, r5
 8007262:	f7f9 fd1f 	bl	8000ca4 <__aeabi_fmul>
 8007266:	4601      	mov	r1, r0
 8007268:	4650      	mov	r0, sl
 800726a:	f7f9 fc13 	bl	8000a94 <__addsf3>
 800726e:	f8df b0d4 	ldr.w	fp, [pc, #212]	@ 8007344 <__ieee754_logf+0x258>
 8007272:	4605      	mov	r5, r0
 8007274:	44a3      	add	fp, r4
 8007276:	f5c4 1457 	rsb	r4, r4, #3522560	@ 0x35c000
 800727a:	f504 7422 	add.w	r4, r4, #648	@ 0x288
 800727e:	ea44 040b 	orr.w	r4, r4, fp
 8007282:	2c00      	cmp	r4, #0
 8007284:	dd30      	ble.n	80072e8 <__ieee754_logf+0x1fc>
 8007286:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 800728a:	4630      	mov	r0, r6
 800728c:	f7f9 fd0a 	bl	8000ca4 <__aeabi_fmul>
 8007290:	4631      	mov	r1, r6
 8007292:	f7f9 fd07 	bl	8000ca4 <__aeabi_fmul>
 8007296:	4601      	mov	r1, r0
 8007298:	4604      	mov	r4, r0
 800729a:	4628      	mov	r0, r5
 800729c:	f7f9 fbfa 	bl	8000a94 <__addsf3>
 80072a0:	4649      	mov	r1, r9
 80072a2:	f7f9 fcff 	bl	8000ca4 <__aeabi_fmul>
 80072a6:	4605      	mov	r5, r0
 80072a8:	b937      	cbnz	r7, 80072b8 <__ieee754_logf+0x1cc>
 80072aa:	4601      	mov	r1, r0
 80072ac:	4620      	mov	r0, r4
 80072ae:	f7f9 fbef 	bl	8000a90 <__aeabi_fsub>
 80072b2:	4601      	mov	r1, r0
 80072b4:	4630      	mov	r0, r6
 80072b6:	e014      	b.n	80072e2 <__ieee754_logf+0x1f6>
 80072b8:	4918      	ldr	r1, [pc, #96]	@ (800731c <__ieee754_logf+0x230>)
 80072ba:	4640      	mov	r0, r8
 80072bc:	f7f9 fcf2 	bl	8000ca4 <__aeabi_fmul>
 80072c0:	4917      	ldr	r1, [pc, #92]	@ (8007320 <__ieee754_logf+0x234>)
 80072c2:	4607      	mov	r7, r0
 80072c4:	4640      	mov	r0, r8
 80072c6:	f7f9 fced 	bl	8000ca4 <__aeabi_fmul>
 80072ca:	4629      	mov	r1, r5
 80072cc:	f7f9 fbe2 	bl	8000a94 <__addsf3>
 80072d0:	4601      	mov	r1, r0
 80072d2:	4620      	mov	r0, r4
 80072d4:	f7f9 fbdc 	bl	8000a90 <__aeabi_fsub>
 80072d8:	4631      	mov	r1, r6
 80072da:	f7f9 fbd9 	bl	8000a90 <__aeabi_fsub>
 80072de:	4601      	mov	r1, r0
 80072e0:	4638      	mov	r0, r7
 80072e2:	f7f9 fbd5 	bl	8000a90 <__aeabi_fsub>
 80072e6:	e70c      	b.n	8007102 <__ieee754_logf+0x16>
 80072e8:	4601      	mov	r1, r0
 80072ea:	4630      	mov	r0, r6
 80072ec:	f7f9 fbd0 	bl	8000a90 <__aeabi_fsub>
 80072f0:	4649      	mov	r1, r9
 80072f2:	f7f9 fcd7 	bl	8000ca4 <__aeabi_fmul>
 80072f6:	4604      	mov	r4, r0
 80072f8:	2f00      	cmp	r7, #0
 80072fa:	f43f af60 	beq.w	80071be <__ieee754_logf+0xd2>
 80072fe:	4907      	ldr	r1, [pc, #28]	@ (800731c <__ieee754_logf+0x230>)
 8007300:	4640      	mov	r0, r8
 8007302:	f7f9 fccf 	bl	8000ca4 <__aeabi_fmul>
 8007306:	4906      	ldr	r1, [pc, #24]	@ (8007320 <__ieee754_logf+0x234>)
 8007308:	4605      	mov	r5, r0
 800730a:	4640      	mov	r0, r8
 800730c:	e763      	b.n	80071d6 <__ieee754_logf+0xea>
 800730e:	2000      	movs	r0, #0
 8007310:	e6f7      	b.n	8007102 <__ieee754_logf+0x16>
 8007312:	bf00      	nop
 8007314:	004afb20 	.word	0x004afb20
 8007318:	007ffff0 	.word	0x007ffff0
 800731c:	3f317180 	.word	0x3f317180
 8007320:	3717f7d1 	.word	0x3717f7d1
 8007324:	3eaaaaab 	.word	0x3eaaaaab
 8007328:	3e178897 	.word	0x3e178897
 800732c:	3e3a3325 	.word	0x3e3a3325
 8007330:	3e924925 	.word	0x3e924925
 8007334:	3f2aaaab 	.word	0x3f2aaaab
 8007338:	3e1cd04f 	.word	0x3e1cd04f
 800733c:	3e638e29 	.word	0x3e638e29
 8007340:	3ecccccd 	.word	0x3ecccccd
 8007344:	ffcf5c30 	.word	0xffcf5c30

08007348 <abort>:
 8007348:	2006      	movs	r0, #6
 800734a:	b508      	push	{r3, lr}
 800734c:	f001 f936 	bl	80085bc <raise>
 8007350:	2001      	movs	r0, #1
 8007352:	f7fa f9c0 	bl	80016d6 <_exit>
	...

08007358 <__assert_func>:
 8007358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800735a:	4614      	mov	r4, r2
 800735c:	461a      	mov	r2, r3
 800735e:	4b09      	ldr	r3, [pc, #36]	@ (8007384 <__assert_func+0x2c>)
 8007360:	4605      	mov	r5, r0
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68d8      	ldr	r0, [r3, #12]
 8007366:	b954      	cbnz	r4, 800737e <__assert_func+0x26>
 8007368:	4b07      	ldr	r3, [pc, #28]	@ (8007388 <__assert_func+0x30>)
 800736a:	461c      	mov	r4, r3
 800736c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007370:	9100      	str	r1, [sp, #0]
 8007372:	462b      	mov	r3, r5
 8007374:	4905      	ldr	r1, [pc, #20]	@ (800738c <__assert_func+0x34>)
 8007376:	f000 ffcf 	bl	8008318 <fiprintf>
 800737a:	f7ff ffe5 	bl	8007348 <abort>
 800737e:	4b04      	ldr	r3, [pc, #16]	@ (8007390 <__assert_func+0x38>)
 8007380:	e7f4      	b.n	800736c <__assert_func+0x14>
 8007382:	bf00      	nop
 8007384:	20000018 	.word	0x20000018
 8007388:	08009f3f 	.word	0x08009f3f
 800738c:	08009f11 	.word	0x08009f11
 8007390:	08009f04 	.word	0x08009f04

08007394 <calloc>:
 8007394:	4b02      	ldr	r3, [pc, #8]	@ (80073a0 <calloc+0xc>)
 8007396:	460a      	mov	r2, r1
 8007398:	4601      	mov	r1, r0
 800739a:	6818      	ldr	r0, [r3, #0]
 800739c:	f000 b802 	b.w	80073a4 <_calloc_r>
 80073a0:	20000018 	.word	0x20000018

080073a4 <_calloc_r>:
 80073a4:	b570      	push	{r4, r5, r6, lr}
 80073a6:	fba1 5402 	umull	r5, r4, r1, r2
 80073aa:	b93c      	cbnz	r4, 80073bc <_calloc_r+0x18>
 80073ac:	4629      	mov	r1, r5
 80073ae:	f000 f83f 	bl	8007430 <_malloc_r>
 80073b2:	4606      	mov	r6, r0
 80073b4:	b928      	cbnz	r0, 80073c2 <_calloc_r+0x1e>
 80073b6:	2600      	movs	r6, #0
 80073b8:	4630      	mov	r0, r6
 80073ba:	bd70      	pop	{r4, r5, r6, pc}
 80073bc:	220c      	movs	r2, #12
 80073be:	6002      	str	r2, [r0, #0]
 80073c0:	e7f9      	b.n	80073b6 <_calloc_r+0x12>
 80073c2:	462a      	mov	r2, r5
 80073c4:	4621      	mov	r1, r4
 80073c6:	f001 f8c9 	bl	800855c <memset>
 80073ca:	e7f5      	b.n	80073b8 <_calloc_r+0x14>

080073cc <malloc>:
 80073cc:	4b02      	ldr	r3, [pc, #8]	@ (80073d8 <malloc+0xc>)
 80073ce:	4601      	mov	r1, r0
 80073d0:	6818      	ldr	r0, [r3, #0]
 80073d2:	f000 b82d 	b.w	8007430 <_malloc_r>
 80073d6:	bf00      	nop
 80073d8:	20000018 	.word	0x20000018

080073dc <free>:
 80073dc:	4b02      	ldr	r3, [pc, #8]	@ (80073e8 <free+0xc>)
 80073de:	4601      	mov	r1, r0
 80073e0:	6818      	ldr	r0, [r3, #0]
 80073e2:	f001 bffd 	b.w	80093e0 <_free_r>
 80073e6:	bf00      	nop
 80073e8:	20000018 	.word	0x20000018

080073ec <sbrk_aligned>:
 80073ec:	b570      	push	{r4, r5, r6, lr}
 80073ee:	4e0f      	ldr	r6, [pc, #60]	@ (800742c <sbrk_aligned+0x40>)
 80073f0:	460c      	mov	r4, r1
 80073f2:	6831      	ldr	r1, [r6, #0]
 80073f4:	4605      	mov	r5, r0
 80073f6:	b911      	cbnz	r1, 80073fe <sbrk_aligned+0x12>
 80073f8:	f001 f934 	bl	8008664 <_sbrk_r>
 80073fc:	6030      	str	r0, [r6, #0]
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	f001 f92f 	bl	8008664 <_sbrk_r>
 8007406:	1c43      	adds	r3, r0, #1
 8007408:	d103      	bne.n	8007412 <sbrk_aligned+0x26>
 800740a:	f04f 34ff 	mov.w	r4, #4294967295
 800740e:	4620      	mov	r0, r4
 8007410:	bd70      	pop	{r4, r5, r6, pc}
 8007412:	1cc4      	adds	r4, r0, #3
 8007414:	f024 0403 	bic.w	r4, r4, #3
 8007418:	42a0      	cmp	r0, r4
 800741a:	d0f8      	beq.n	800740e <sbrk_aligned+0x22>
 800741c:	1a21      	subs	r1, r4, r0
 800741e:	4628      	mov	r0, r5
 8007420:	f001 f920 	bl	8008664 <_sbrk_r>
 8007424:	3001      	adds	r0, #1
 8007426:	d1f2      	bne.n	800740e <sbrk_aligned+0x22>
 8007428:	e7ef      	b.n	800740a <sbrk_aligned+0x1e>
 800742a:	bf00      	nop
 800742c:	2000036c 	.word	0x2000036c

08007430 <_malloc_r>:
 8007430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007434:	1ccd      	adds	r5, r1, #3
 8007436:	f025 0503 	bic.w	r5, r5, #3
 800743a:	3508      	adds	r5, #8
 800743c:	2d0c      	cmp	r5, #12
 800743e:	bf38      	it	cc
 8007440:	250c      	movcc	r5, #12
 8007442:	2d00      	cmp	r5, #0
 8007444:	4606      	mov	r6, r0
 8007446:	db01      	blt.n	800744c <_malloc_r+0x1c>
 8007448:	42a9      	cmp	r1, r5
 800744a:	d904      	bls.n	8007456 <_malloc_r+0x26>
 800744c:	230c      	movs	r3, #12
 800744e:	6033      	str	r3, [r6, #0]
 8007450:	2000      	movs	r0, #0
 8007452:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007456:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800752c <_malloc_r+0xfc>
 800745a:	f000 f869 	bl	8007530 <__malloc_lock>
 800745e:	f8d8 3000 	ldr.w	r3, [r8]
 8007462:	461c      	mov	r4, r3
 8007464:	bb44      	cbnz	r4, 80074b8 <_malloc_r+0x88>
 8007466:	4629      	mov	r1, r5
 8007468:	4630      	mov	r0, r6
 800746a:	f7ff ffbf 	bl	80073ec <sbrk_aligned>
 800746e:	1c43      	adds	r3, r0, #1
 8007470:	4604      	mov	r4, r0
 8007472:	d158      	bne.n	8007526 <_malloc_r+0xf6>
 8007474:	f8d8 4000 	ldr.w	r4, [r8]
 8007478:	4627      	mov	r7, r4
 800747a:	2f00      	cmp	r7, #0
 800747c:	d143      	bne.n	8007506 <_malloc_r+0xd6>
 800747e:	2c00      	cmp	r4, #0
 8007480:	d04b      	beq.n	800751a <_malloc_r+0xea>
 8007482:	6823      	ldr	r3, [r4, #0]
 8007484:	4639      	mov	r1, r7
 8007486:	4630      	mov	r0, r6
 8007488:	eb04 0903 	add.w	r9, r4, r3
 800748c:	f001 f8ea 	bl	8008664 <_sbrk_r>
 8007490:	4581      	cmp	r9, r0
 8007492:	d142      	bne.n	800751a <_malloc_r+0xea>
 8007494:	6821      	ldr	r1, [r4, #0]
 8007496:	4630      	mov	r0, r6
 8007498:	1a6d      	subs	r5, r5, r1
 800749a:	4629      	mov	r1, r5
 800749c:	f7ff ffa6 	bl	80073ec <sbrk_aligned>
 80074a0:	3001      	adds	r0, #1
 80074a2:	d03a      	beq.n	800751a <_malloc_r+0xea>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	442b      	add	r3, r5
 80074a8:	6023      	str	r3, [r4, #0]
 80074aa:	f8d8 3000 	ldr.w	r3, [r8]
 80074ae:	685a      	ldr	r2, [r3, #4]
 80074b0:	bb62      	cbnz	r2, 800750c <_malloc_r+0xdc>
 80074b2:	f8c8 7000 	str.w	r7, [r8]
 80074b6:	e00f      	b.n	80074d8 <_malloc_r+0xa8>
 80074b8:	6822      	ldr	r2, [r4, #0]
 80074ba:	1b52      	subs	r2, r2, r5
 80074bc:	d420      	bmi.n	8007500 <_malloc_r+0xd0>
 80074be:	2a0b      	cmp	r2, #11
 80074c0:	d917      	bls.n	80074f2 <_malloc_r+0xc2>
 80074c2:	1961      	adds	r1, r4, r5
 80074c4:	42a3      	cmp	r3, r4
 80074c6:	6025      	str	r5, [r4, #0]
 80074c8:	bf18      	it	ne
 80074ca:	6059      	strne	r1, [r3, #4]
 80074cc:	6863      	ldr	r3, [r4, #4]
 80074ce:	bf08      	it	eq
 80074d0:	f8c8 1000 	streq.w	r1, [r8]
 80074d4:	5162      	str	r2, [r4, r5]
 80074d6:	604b      	str	r3, [r1, #4]
 80074d8:	4630      	mov	r0, r6
 80074da:	f000 f82f 	bl	800753c <__malloc_unlock>
 80074de:	f104 000b 	add.w	r0, r4, #11
 80074e2:	1d23      	adds	r3, r4, #4
 80074e4:	f020 0007 	bic.w	r0, r0, #7
 80074e8:	1ac2      	subs	r2, r0, r3
 80074ea:	bf1c      	itt	ne
 80074ec:	1a1b      	subne	r3, r3, r0
 80074ee:	50a3      	strne	r3, [r4, r2]
 80074f0:	e7af      	b.n	8007452 <_malloc_r+0x22>
 80074f2:	6862      	ldr	r2, [r4, #4]
 80074f4:	42a3      	cmp	r3, r4
 80074f6:	bf0c      	ite	eq
 80074f8:	f8c8 2000 	streq.w	r2, [r8]
 80074fc:	605a      	strne	r2, [r3, #4]
 80074fe:	e7eb      	b.n	80074d8 <_malloc_r+0xa8>
 8007500:	4623      	mov	r3, r4
 8007502:	6864      	ldr	r4, [r4, #4]
 8007504:	e7ae      	b.n	8007464 <_malloc_r+0x34>
 8007506:	463c      	mov	r4, r7
 8007508:	687f      	ldr	r7, [r7, #4]
 800750a:	e7b6      	b.n	800747a <_malloc_r+0x4a>
 800750c:	461a      	mov	r2, r3
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	42a3      	cmp	r3, r4
 8007512:	d1fb      	bne.n	800750c <_malloc_r+0xdc>
 8007514:	2300      	movs	r3, #0
 8007516:	6053      	str	r3, [r2, #4]
 8007518:	e7de      	b.n	80074d8 <_malloc_r+0xa8>
 800751a:	230c      	movs	r3, #12
 800751c:	4630      	mov	r0, r6
 800751e:	6033      	str	r3, [r6, #0]
 8007520:	f000 f80c 	bl	800753c <__malloc_unlock>
 8007524:	e794      	b.n	8007450 <_malloc_r+0x20>
 8007526:	6005      	str	r5, [r0, #0]
 8007528:	e7d6      	b.n	80074d8 <_malloc_r+0xa8>
 800752a:	bf00      	nop
 800752c:	20000370 	.word	0x20000370

08007530 <__malloc_lock>:
 8007530:	4801      	ldr	r0, [pc, #4]	@ (8007538 <__malloc_lock+0x8>)
 8007532:	f001 b8e4 	b.w	80086fe <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	200004b4 	.word	0x200004b4

0800753c <__malloc_unlock>:
 800753c:	4801      	ldr	r0, [pc, #4]	@ (8007544 <__malloc_unlock+0x8>)
 800753e:	f001 b8df 	b.w	8008700 <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	200004b4 	.word	0x200004b4

08007548 <__cvt>:
 8007548:	2b00      	cmp	r3, #0
 800754a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800754e:	461d      	mov	r5, r3
 8007550:	bfbb      	ittet	lt
 8007552:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007556:	461d      	movlt	r5, r3
 8007558:	2300      	movge	r3, #0
 800755a:	232d      	movlt	r3, #45	@ 0x2d
 800755c:	b088      	sub	sp, #32
 800755e:	4614      	mov	r4, r2
 8007560:	bfb8      	it	lt
 8007562:	4614      	movlt	r4, r2
 8007564:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007566:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007568:	7013      	strb	r3, [r2, #0]
 800756a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800756c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007570:	f023 0820 	bic.w	r8, r3, #32
 8007574:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007578:	d005      	beq.n	8007586 <__cvt+0x3e>
 800757a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800757e:	d100      	bne.n	8007582 <__cvt+0x3a>
 8007580:	3601      	adds	r6, #1
 8007582:	2302      	movs	r3, #2
 8007584:	e000      	b.n	8007588 <__cvt+0x40>
 8007586:	2303      	movs	r3, #3
 8007588:	aa07      	add	r2, sp, #28
 800758a:	9204      	str	r2, [sp, #16]
 800758c:	aa06      	add	r2, sp, #24
 800758e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007592:	e9cd 3600 	strd	r3, r6, [sp]
 8007596:	4622      	mov	r2, r4
 8007598:	462b      	mov	r3, r5
 800759a:	f001 f959 	bl	8008850 <_dtoa_r>
 800759e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80075a2:	4607      	mov	r7, r0
 80075a4:	d119      	bne.n	80075da <__cvt+0x92>
 80075a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80075a8:	07db      	lsls	r3, r3, #31
 80075aa:	d50e      	bpl.n	80075ca <__cvt+0x82>
 80075ac:	eb00 0906 	add.w	r9, r0, r6
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	4620      	mov	r0, r4
 80075b6:	4629      	mov	r1, r5
 80075b8:	f7f9 f9f6 	bl	80009a8 <__aeabi_dcmpeq>
 80075bc:	b108      	cbz	r0, 80075c2 <__cvt+0x7a>
 80075be:	f8cd 901c 	str.w	r9, [sp, #28]
 80075c2:	2230      	movs	r2, #48	@ 0x30
 80075c4:	9b07      	ldr	r3, [sp, #28]
 80075c6:	454b      	cmp	r3, r9
 80075c8:	d31e      	bcc.n	8007608 <__cvt+0xc0>
 80075ca:	4638      	mov	r0, r7
 80075cc:	9b07      	ldr	r3, [sp, #28]
 80075ce:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 80075d0:	1bdb      	subs	r3, r3, r7
 80075d2:	6013      	str	r3, [r2, #0]
 80075d4:	b008      	add	sp, #32
 80075d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80075da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80075de:	eb00 0906 	add.w	r9, r0, r6
 80075e2:	d1e5      	bne.n	80075b0 <__cvt+0x68>
 80075e4:	7803      	ldrb	r3, [r0, #0]
 80075e6:	2b30      	cmp	r3, #48	@ 0x30
 80075e8:	d10a      	bne.n	8007600 <__cvt+0xb8>
 80075ea:	2200      	movs	r2, #0
 80075ec:	2300      	movs	r3, #0
 80075ee:	4620      	mov	r0, r4
 80075f0:	4629      	mov	r1, r5
 80075f2:	f7f9 f9d9 	bl	80009a8 <__aeabi_dcmpeq>
 80075f6:	b918      	cbnz	r0, 8007600 <__cvt+0xb8>
 80075f8:	f1c6 0601 	rsb	r6, r6, #1
 80075fc:	f8ca 6000 	str.w	r6, [sl]
 8007600:	f8da 3000 	ldr.w	r3, [sl]
 8007604:	4499      	add	r9, r3
 8007606:	e7d3      	b.n	80075b0 <__cvt+0x68>
 8007608:	1c59      	adds	r1, r3, #1
 800760a:	9107      	str	r1, [sp, #28]
 800760c:	701a      	strb	r2, [r3, #0]
 800760e:	e7d9      	b.n	80075c4 <__cvt+0x7c>

08007610 <__exponent>:
 8007610:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007612:	2900      	cmp	r1, #0
 8007614:	bfb6      	itet	lt
 8007616:	232d      	movlt	r3, #45	@ 0x2d
 8007618:	232b      	movge	r3, #43	@ 0x2b
 800761a:	4249      	neglt	r1, r1
 800761c:	2909      	cmp	r1, #9
 800761e:	7002      	strb	r2, [r0, #0]
 8007620:	7043      	strb	r3, [r0, #1]
 8007622:	dd29      	ble.n	8007678 <__exponent+0x68>
 8007624:	f10d 0307 	add.w	r3, sp, #7
 8007628:	461d      	mov	r5, r3
 800762a:	270a      	movs	r7, #10
 800762c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007630:	461a      	mov	r2, r3
 8007632:	fb07 1416 	mls	r4, r7, r6, r1
 8007636:	3430      	adds	r4, #48	@ 0x30
 8007638:	f802 4c01 	strb.w	r4, [r2, #-1]
 800763c:	460c      	mov	r4, r1
 800763e:	2c63      	cmp	r4, #99	@ 0x63
 8007640:	4631      	mov	r1, r6
 8007642:	f103 33ff 	add.w	r3, r3, #4294967295
 8007646:	dcf1      	bgt.n	800762c <__exponent+0x1c>
 8007648:	3130      	adds	r1, #48	@ 0x30
 800764a:	1e94      	subs	r4, r2, #2
 800764c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007650:	4623      	mov	r3, r4
 8007652:	1c41      	adds	r1, r0, #1
 8007654:	42ab      	cmp	r3, r5
 8007656:	d30a      	bcc.n	800766e <__exponent+0x5e>
 8007658:	f10d 0309 	add.w	r3, sp, #9
 800765c:	1a9b      	subs	r3, r3, r2
 800765e:	42ac      	cmp	r4, r5
 8007660:	bf88      	it	hi
 8007662:	2300      	movhi	r3, #0
 8007664:	3302      	adds	r3, #2
 8007666:	4403      	add	r3, r0
 8007668:	1a18      	subs	r0, r3, r0
 800766a:	b003      	add	sp, #12
 800766c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800766e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007672:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007676:	e7ed      	b.n	8007654 <__exponent+0x44>
 8007678:	2330      	movs	r3, #48	@ 0x30
 800767a:	3130      	adds	r1, #48	@ 0x30
 800767c:	7083      	strb	r3, [r0, #2]
 800767e:	70c1      	strb	r1, [r0, #3]
 8007680:	1d03      	adds	r3, r0, #4
 8007682:	e7f1      	b.n	8007668 <__exponent+0x58>

08007684 <_printf_float>:
 8007684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007688:	b091      	sub	sp, #68	@ 0x44
 800768a:	460c      	mov	r4, r1
 800768c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007690:	4616      	mov	r6, r2
 8007692:	461f      	mov	r7, r3
 8007694:	4605      	mov	r5, r0
 8007696:	f000 ff99 	bl	80085cc <_localeconv_r>
 800769a:	6803      	ldr	r3, [r0, #0]
 800769c:	4618      	mov	r0, r3
 800769e:	9308      	str	r3, [sp, #32]
 80076a0:	f7f8 fd56 	bl	8000150 <strlen>
 80076a4:	2300      	movs	r3, #0
 80076a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80076a8:	f8d8 3000 	ldr.w	r3, [r8]
 80076ac:	9009      	str	r0, [sp, #36]	@ 0x24
 80076ae:	3307      	adds	r3, #7
 80076b0:	f023 0307 	bic.w	r3, r3, #7
 80076b4:	f103 0208 	add.w	r2, r3, #8
 80076b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80076bc:	f8d4 b000 	ldr.w	fp, [r4]
 80076c0:	f8c8 2000 	str.w	r2, [r8]
 80076c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80076c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80076cc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ce:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80076d2:	f04f 32ff 	mov.w	r2, #4294967295
 80076d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80076da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80076de:	4b9c      	ldr	r3, [pc, #624]	@ (8007950 <_printf_float+0x2cc>)
 80076e0:	f7f9 f994 	bl	8000a0c <__aeabi_dcmpun>
 80076e4:	bb70      	cbnz	r0, 8007744 <_printf_float+0xc0>
 80076e6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80076ea:	f04f 32ff 	mov.w	r2, #4294967295
 80076ee:	4b98      	ldr	r3, [pc, #608]	@ (8007950 <_printf_float+0x2cc>)
 80076f0:	f7f9 f96e 	bl	80009d0 <__aeabi_dcmple>
 80076f4:	bb30      	cbnz	r0, 8007744 <_printf_float+0xc0>
 80076f6:	2200      	movs	r2, #0
 80076f8:	2300      	movs	r3, #0
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f9 f95d 	bl	80009bc <__aeabi_dcmplt>
 8007702:	b110      	cbz	r0, 800770a <_printf_float+0x86>
 8007704:	232d      	movs	r3, #45	@ 0x2d
 8007706:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800770a:	4a92      	ldr	r2, [pc, #584]	@ (8007954 <_printf_float+0x2d0>)
 800770c:	4b92      	ldr	r3, [pc, #584]	@ (8007958 <_printf_float+0x2d4>)
 800770e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007712:	bf94      	ite	ls
 8007714:	4690      	movls	r8, r2
 8007716:	4698      	movhi	r8, r3
 8007718:	2303      	movs	r3, #3
 800771a:	f04f 0900 	mov.w	r9, #0
 800771e:	6123      	str	r3, [r4, #16]
 8007720:	f02b 0304 	bic.w	r3, fp, #4
 8007724:	6023      	str	r3, [r4, #0]
 8007726:	4633      	mov	r3, r6
 8007728:	4621      	mov	r1, r4
 800772a:	4628      	mov	r0, r5
 800772c:	9700      	str	r7, [sp, #0]
 800772e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007730:	f000 fb14 	bl	8007d5c <_printf_common>
 8007734:	3001      	adds	r0, #1
 8007736:	f040 8090 	bne.w	800785a <_printf_float+0x1d6>
 800773a:	f04f 30ff 	mov.w	r0, #4294967295
 800773e:	b011      	add	sp, #68	@ 0x44
 8007740:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007744:	4642      	mov	r2, r8
 8007746:	464b      	mov	r3, r9
 8007748:	4640      	mov	r0, r8
 800774a:	4649      	mov	r1, r9
 800774c:	f7f9 f95e 	bl	8000a0c <__aeabi_dcmpun>
 8007750:	b148      	cbz	r0, 8007766 <_printf_float+0xe2>
 8007752:	464b      	mov	r3, r9
 8007754:	2b00      	cmp	r3, #0
 8007756:	bfb8      	it	lt
 8007758:	232d      	movlt	r3, #45	@ 0x2d
 800775a:	4a80      	ldr	r2, [pc, #512]	@ (800795c <_printf_float+0x2d8>)
 800775c:	bfb8      	it	lt
 800775e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007762:	4b7f      	ldr	r3, [pc, #508]	@ (8007960 <_printf_float+0x2dc>)
 8007764:	e7d3      	b.n	800770e <_printf_float+0x8a>
 8007766:	6863      	ldr	r3, [r4, #4]
 8007768:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	d13f      	bne.n	80077f0 <_printf_float+0x16c>
 8007770:	2306      	movs	r3, #6
 8007772:	6063      	str	r3, [r4, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 800777a:	6023      	str	r3, [r4, #0]
 800777c:	9206      	str	r2, [sp, #24]
 800777e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007780:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007784:	aa0d      	add	r2, sp, #52	@ 0x34
 8007786:	9203      	str	r2, [sp, #12]
 8007788:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 800778c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007790:	6863      	ldr	r3, [r4, #4]
 8007792:	4642      	mov	r2, r8
 8007794:	9300      	str	r3, [sp, #0]
 8007796:	4628      	mov	r0, r5
 8007798:	464b      	mov	r3, r9
 800779a:	910a      	str	r1, [sp, #40]	@ 0x28
 800779c:	f7ff fed4 	bl	8007548 <__cvt>
 80077a0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80077a2:	4680      	mov	r8, r0
 80077a4:	2947      	cmp	r1, #71	@ 0x47
 80077a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 80077a8:	d128      	bne.n	80077fc <_printf_float+0x178>
 80077aa:	1cc8      	adds	r0, r1, #3
 80077ac:	db02      	blt.n	80077b4 <_printf_float+0x130>
 80077ae:	6863      	ldr	r3, [r4, #4]
 80077b0:	4299      	cmp	r1, r3
 80077b2:	dd40      	ble.n	8007836 <_printf_float+0x1b2>
 80077b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80077b8:	fa5f fa8a 	uxtb.w	sl, sl
 80077bc:	4652      	mov	r2, sl
 80077be:	3901      	subs	r1, #1
 80077c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80077c4:	910d      	str	r1, [sp, #52]	@ 0x34
 80077c6:	f7ff ff23 	bl	8007610 <__exponent>
 80077ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80077cc:	4681      	mov	r9, r0
 80077ce:	1813      	adds	r3, r2, r0
 80077d0:	2a01      	cmp	r2, #1
 80077d2:	6123      	str	r3, [r4, #16]
 80077d4:	dc02      	bgt.n	80077dc <_printf_float+0x158>
 80077d6:	6822      	ldr	r2, [r4, #0]
 80077d8:	07d2      	lsls	r2, r2, #31
 80077da:	d501      	bpl.n	80077e0 <_printf_float+0x15c>
 80077dc:	3301      	adds	r3, #1
 80077de:	6123      	str	r3, [r4, #16]
 80077e0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d09e      	beq.n	8007726 <_printf_float+0xa2>
 80077e8:	232d      	movs	r3, #45	@ 0x2d
 80077ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80077ee:	e79a      	b.n	8007726 <_printf_float+0xa2>
 80077f0:	2947      	cmp	r1, #71	@ 0x47
 80077f2:	d1bf      	bne.n	8007774 <_printf_float+0xf0>
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d1bd      	bne.n	8007774 <_printf_float+0xf0>
 80077f8:	2301      	movs	r3, #1
 80077fa:	e7ba      	b.n	8007772 <_printf_float+0xee>
 80077fc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007800:	d9dc      	bls.n	80077bc <_printf_float+0x138>
 8007802:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007806:	d118      	bne.n	800783a <_printf_float+0x1b6>
 8007808:	2900      	cmp	r1, #0
 800780a:	6863      	ldr	r3, [r4, #4]
 800780c:	dd0b      	ble.n	8007826 <_printf_float+0x1a2>
 800780e:	6121      	str	r1, [r4, #16]
 8007810:	b913      	cbnz	r3, 8007818 <_printf_float+0x194>
 8007812:	6822      	ldr	r2, [r4, #0]
 8007814:	07d0      	lsls	r0, r2, #31
 8007816:	d502      	bpl.n	800781e <_printf_float+0x19a>
 8007818:	3301      	adds	r3, #1
 800781a:	440b      	add	r3, r1
 800781c:	6123      	str	r3, [r4, #16]
 800781e:	f04f 0900 	mov.w	r9, #0
 8007822:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007824:	e7dc      	b.n	80077e0 <_printf_float+0x15c>
 8007826:	b913      	cbnz	r3, 800782e <_printf_float+0x1aa>
 8007828:	6822      	ldr	r2, [r4, #0]
 800782a:	07d2      	lsls	r2, r2, #31
 800782c:	d501      	bpl.n	8007832 <_printf_float+0x1ae>
 800782e:	3302      	adds	r3, #2
 8007830:	e7f4      	b.n	800781c <_printf_float+0x198>
 8007832:	2301      	movs	r3, #1
 8007834:	e7f2      	b.n	800781c <_printf_float+0x198>
 8007836:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800783c:	4299      	cmp	r1, r3
 800783e:	db05      	blt.n	800784c <_printf_float+0x1c8>
 8007840:	6823      	ldr	r3, [r4, #0]
 8007842:	6121      	str	r1, [r4, #16]
 8007844:	07d8      	lsls	r0, r3, #31
 8007846:	d5ea      	bpl.n	800781e <_printf_float+0x19a>
 8007848:	1c4b      	adds	r3, r1, #1
 800784a:	e7e7      	b.n	800781c <_printf_float+0x198>
 800784c:	2900      	cmp	r1, #0
 800784e:	bfcc      	ite	gt
 8007850:	2201      	movgt	r2, #1
 8007852:	f1c1 0202 	rsble	r2, r1, #2
 8007856:	4413      	add	r3, r2
 8007858:	e7e0      	b.n	800781c <_printf_float+0x198>
 800785a:	6823      	ldr	r3, [r4, #0]
 800785c:	055a      	lsls	r2, r3, #21
 800785e:	d407      	bmi.n	8007870 <_printf_float+0x1ec>
 8007860:	6923      	ldr	r3, [r4, #16]
 8007862:	4642      	mov	r2, r8
 8007864:	4631      	mov	r1, r6
 8007866:	4628      	mov	r0, r5
 8007868:	47b8      	blx	r7
 800786a:	3001      	adds	r0, #1
 800786c:	d12b      	bne.n	80078c6 <_printf_float+0x242>
 800786e:	e764      	b.n	800773a <_printf_float+0xb6>
 8007870:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007874:	f240 80dc 	bls.w	8007a30 <_printf_float+0x3ac>
 8007878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800787c:	2200      	movs	r2, #0
 800787e:	2300      	movs	r3, #0
 8007880:	f7f9 f892 	bl	80009a8 <__aeabi_dcmpeq>
 8007884:	2800      	cmp	r0, #0
 8007886:	d033      	beq.n	80078f0 <_printf_float+0x26c>
 8007888:	2301      	movs	r3, #1
 800788a:	4631      	mov	r1, r6
 800788c:	4628      	mov	r0, r5
 800788e:	4a35      	ldr	r2, [pc, #212]	@ (8007964 <_printf_float+0x2e0>)
 8007890:	47b8      	blx	r7
 8007892:	3001      	adds	r0, #1
 8007894:	f43f af51 	beq.w	800773a <_printf_float+0xb6>
 8007898:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 800789c:	4543      	cmp	r3, r8
 800789e:	db02      	blt.n	80078a6 <_printf_float+0x222>
 80078a0:	6823      	ldr	r3, [r4, #0]
 80078a2:	07d8      	lsls	r0, r3, #31
 80078a4:	d50f      	bpl.n	80078c6 <_printf_float+0x242>
 80078a6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80078aa:	4631      	mov	r1, r6
 80078ac:	4628      	mov	r0, r5
 80078ae:	47b8      	blx	r7
 80078b0:	3001      	adds	r0, #1
 80078b2:	f43f af42 	beq.w	800773a <_printf_float+0xb6>
 80078b6:	f04f 0900 	mov.w	r9, #0
 80078ba:	f108 38ff 	add.w	r8, r8, #4294967295
 80078be:	f104 0a1a 	add.w	sl, r4, #26
 80078c2:	45c8      	cmp	r8, r9
 80078c4:	dc09      	bgt.n	80078da <_printf_float+0x256>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	079b      	lsls	r3, r3, #30
 80078ca:	f100 8102 	bmi.w	8007ad2 <_printf_float+0x44e>
 80078ce:	68e0      	ldr	r0, [r4, #12]
 80078d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078d2:	4298      	cmp	r0, r3
 80078d4:	bfb8      	it	lt
 80078d6:	4618      	movlt	r0, r3
 80078d8:	e731      	b.n	800773e <_printf_float+0xba>
 80078da:	2301      	movs	r3, #1
 80078dc:	4652      	mov	r2, sl
 80078de:	4631      	mov	r1, r6
 80078e0:	4628      	mov	r0, r5
 80078e2:	47b8      	blx	r7
 80078e4:	3001      	adds	r0, #1
 80078e6:	f43f af28 	beq.w	800773a <_printf_float+0xb6>
 80078ea:	f109 0901 	add.w	r9, r9, #1
 80078ee:	e7e8      	b.n	80078c2 <_printf_float+0x23e>
 80078f0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	dc38      	bgt.n	8007968 <_printf_float+0x2e4>
 80078f6:	2301      	movs	r3, #1
 80078f8:	4631      	mov	r1, r6
 80078fa:	4628      	mov	r0, r5
 80078fc:	4a19      	ldr	r2, [pc, #100]	@ (8007964 <_printf_float+0x2e0>)
 80078fe:	47b8      	blx	r7
 8007900:	3001      	adds	r0, #1
 8007902:	f43f af1a 	beq.w	800773a <_printf_float+0xb6>
 8007906:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800790a:	ea59 0303 	orrs.w	r3, r9, r3
 800790e:	d102      	bne.n	8007916 <_printf_float+0x292>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	07d9      	lsls	r1, r3, #31
 8007914:	d5d7      	bpl.n	80078c6 <_printf_float+0x242>
 8007916:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800791a:	4631      	mov	r1, r6
 800791c:	4628      	mov	r0, r5
 800791e:	47b8      	blx	r7
 8007920:	3001      	adds	r0, #1
 8007922:	f43f af0a 	beq.w	800773a <_printf_float+0xb6>
 8007926:	f04f 0a00 	mov.w	sl, #0
 800792a:	f104 0b1a 	add.w	fp, r4, #26
 800792e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007930:	425b      	negs	r3, r3
 8007932:	4553      	cmp	r3, sl
 8007934:	dc01      	bgt.n	800793a <_printf_float+0x2b6>
 8007936:	464b      	mov	r3, r9
 8007938:	e793      	b.n	8007862 <_printf_float+0x1de>
 800793a:	2301      	movs	r3, #1
 800793c:	465a      	mov	r2, fp
 800793e:	4631      	mov	r1, r6
 8007940:	4628      	mov	r0, r5
 8007942:	47b8      	blx	r7
 8007944:	3001      	adds	r0, #1
 8007946:	f43f aef8 	beq.w	800773a <_printf_float+0xb6>
 800794a:	f10a 0a01 	add.w	sl, sl, #1
 800794e:	e7ee      	b.n	800792e <_printf_float+0x2aa>
 8007950:	7fefffff 	.word	0x7fefffff
 8007954:	08009f40 	.word	0x08009f40
 8007958:	08009f44 	.word	0x08009f44
 800795c:	08009f48 	.word	0x08009f48
 8007960:	08009f4c 	.word	0x08009f4c
 8007964:	08009f50 	.word	0x08009f50
 8007968:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800796a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 800796e:	4553      	cmp	r3, sl
 8007970:	bfa8      	it	ge
 8007972:	4653      	movge	r3, sl
 8007974:	2b00      	cmp	r3, #0
 8007976:	4699      	mov	r9, r3
 8007978:	dc36      	bgt.n	80079e8 <_printf_float+0x364>
 800797a:	f04f 0b00 	mov.w	fp, #0
 800797e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007982:	f104 021a 	add.w	r2, r4, #26
 8007986:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007988:	930a      	str	r3, [sp, #40]	@ 0x28
 800798a:	eba3 0309 	sub.w	r3, r3, r9
 800798e:	455b      	cmp	r3, fp
 8007990:	dc31      	bgt.n	80079f6 <_printf_float+0x372>
 8007992:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007994:	459a      	cmp	sl, r3
 8007996:	dc3a      	bgt.n	8007a0e <_printf_float+0x38a>
 8007998:	6823      	ldr	r3, [r4, #0]
 800799a:	07da      	lsls	r2, r3, #31
 800799c:	d437      	bmi.n	8007a0e <_printf_float+0x38a>
 800799e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079a0:	ebaa 0903 	sub.w	r9, sl, r3
 80079a4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80079a6:	ebaa 0303 	sub.w	r3, sl, r3
 80079aa:	4599      	cmp	r9, r3
 80079ac:	bfa8      	it	ge
 80079ae:	4699      	movge	r9, r3
 80079b0:	f1b9 0f00 	cmp.w	r9, #0
 80079b4:	dc33      	bgt.n	8007a1e <_printf_float+0x39a>
 80079b6:	f04f 0800 	mov.w	r8, #0
 80079ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80079be:	f104 0b1a 	add.w	fp, r4, #26
 80079c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079c4:	ebaa 0303 	sub.w	r3, sl, r3
 80079c8:	eba3 0309 	sub.w	r3, r3, r9
 80079cc:	4543      	cmp	r3, r8
 80079ce:	f77f af7a 	ble.w	80078c6 <_printf_float+0x242>
 80079d2:	2301      	movs	r3, #1
 80079d4:	465a      	mov	r2, fp
 80079d6:	4631      	mov	r1, r6
 80079d8:	4628      	mov	r0, r5
 80079da:	47b8      	blx	r7
 80079dc:	3001      	adds	r0, #1
 80079de:	f43f aeac 	beq.w	800773a <_printf_float+0xb6>
 80079e2:	f108 0801 	add.w	r8, r8, #1
 80079e6:	e7ec      	b.n	80079c2 <_printf_float+0x33e>
 80079e8:	4642      	mov	r2, r8
 80079ea:	4631      	mov	r1, r6
 80079ec:	4628      	mov	r0, r5
 80079ee:	47b8      	blx	r7
 80079f0:	3001      	adds	r0, #1
 80079f2:	d1c2      	bne.n	800797a <_printf_float+0x2f6>
 80079f4:	e6a1      	b.n	800773a <_printf_float+0xb6>
 80079f6:	2301      	movs	r3, #1
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	920a      	str	r2, [sp, #40]	@ 0x28
 80079fe:	47b8      	blx	r7
 8007a00:	3001      	adds	r0, #1
 8007a02:	f43f ae9a 	beq.w	800773a <_printf_float+0xb6>
 8007a06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a08:	f10b 0b01 	add.w	fp, fp, #1
 8007a0c:	e7bb      	b.n	8007986 <_printf_float+0x302>
 8007a0e:	4631      	mov	r1, r6
 8007a10:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a14:	4628      	mov	r0, r5
 8007a16:	47b8      	blx	r7
 8007a18:	3001      	adds	r0, #1
 8007a1a:	d1c0      	bne.n	800799e <_printf_float+0x31a>
 8007a1c:	e68d      	b.n	800773a <_printf_float+0xb6>
 8007a1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a20:	464b      	mov	r3, r9
 8007a22:	4631      	mov	r1, r6
 8007a24:	4628      	mov	r0, r5
 8007a26:	4442      	add	r2, r8
 8007a28:	47b8      	blx	r7
 8007a2a:	3001      	adds	r0, #1
 8007a2c:	d1c3      	bne.n	80079b6 <_printf_float+0x332>
 8007a2e:	e684      	b.n	800773a <_printf_float+0xb6>
 8007a30:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007a34:	f1ba 0f01 	cmp.w	sl, #1
 8007a38:	dc01      	bgt.n	8007a3e <_printf_float+0x3ba>
 8007a3a:	07db      	lsls	r3, r3, #31
 8007a3c:	d536      	bpl.n	8007aac <_printf_float+0x428>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	4642      	mov	r2, r8
 8007a42:	4631      	mov	r1, r6
 8007a44:	4628      	mov	r0, r5
 8007a46:	47b8      	blx	r7
 8007a48:	3001      	adds	r0, #1
 8007a4a:	f43f ae76 	beq.w	800773a <_printf_float+0xb6>
 8007a4e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a52:	4631      	mov	r1, r6
 8007a54:	4628      	mov	r0, r5
 8007a56:	47b8      	blx	r7
 8007a58:	3001      	adds	r0, #1
 8007a5a:	f43f ae6e 	beq.w	800773a <_printf_float+0xb6>
 8007a5e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a62:	2200      	movs	r2, #0
 8007a64:	2300      	movs	r3, #0
 8007a66:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007a6a:	f7f8 ff9d 	bl	80009a8 <__aeabi_dcmpeq>
 8007a6e:	b9c0      	cbnz	r0, 8007aa2 <_printf_float+0x41e>
 8007a70:	4653      	mov	r3, sl
 8007a72:	f108 0201 	add.w	r2, r8, #1
 8007a76:	4631      	mov	r1, r6
 8007a78:	4628      	mov	r0, r5
 8007a7a:	47b8      	blx	r7
 8007a7c:	3001      	adds	r0, #1
 8007a7e:	d10c      	bne.n	8007a9a <_printf_float+0x416>
 8007a80:	e65b      	b.n	800773a <_printf_float+0xb6>
 8007a82:	2301      	movs	r3, #1
 8007a84:	465a      	mov	r2, fp
 8007a86:	4631      	mov	r1, r6
 8007a88:	4628      	mov	r0, r5
 8007a8a:	47b8      	blx	r7
 8007a8c:	3001      	adds	r0, #1
 8007a8e:	f43f ae54 	beq.w	800773a <_printf_float+0xb6>
 8007a92:	f108 0801 	add.w	r8, r8, #1
 8007a96:	45d0      	cmp	r8, sl
 8007a98:	dbf3      	blt.n	8007a82 <_printf_float+0x3fe>
 8007a9a:	464b      	mov	r3, r9
 8007a9c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007aa0:	e6e0      	b.n	8007864 <_printf_float+0x1e0>
 8007aa2:	f04f 0800 	mov.w	r8, #0
 8007aa6:	f104 0b1a 	add.w	fp, r4, #26
 8007aaa:	e7f4      	b.n	8007a96 <_printf_float+0x412>
 8007aac:	2301      	movs	r3, #1
 8007aae:	4642      	mov	r2, r8
 8007ab0:	e7e1      	b.n	8007a76 <_printf_float+0x3f2>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	464a      	mov	r2, r9
 8007ab6:	4631      	mov	r1, r6
 8007ab8:	4628      	mov	r0, r5
 8007aba:	47b8      	blx	r7
 8007abc:	3001      	adds	r0, #1
 8007abe:	f43f ae3c 	beq.w	800773a <_printf_float+0xb6>
 8007ac2:	f108 0801 	add.w	r8, r8, #1
 8007ac6:	68e3      	ldr	r3, [r4, #12]
 8007ac8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007aca:	1a5b      	subs	r3, r3, r1
 8007acc:	4543      	cmp	r3, r8
 8007ace:	dcf0      	bgt.n	8007ab2 <_printf_float+0x42e>
 8007ad0:	e6fd      	b.n	80078ce <_printf_float+0x24a>
 8007ad2:	f04f 0800 	mov.w	r8, #0
 8007ad6:	f104 0919 	add.w	r9, r4, #25
 8007ada:	e7f4      	b.n	8007ac6 <_printf_float+0x442>

08007adc <__sfputc_r>:
 8007adc:	6893      	ldr	r3, [r2, #8]
 8007ade:	b410      	push	{r4}
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	6093      	str	r3, [r2, #8]
 8007ae6:	da07      	bge.n	8007af8 <__sfputc_r+0x1c>
 8007ae8:	6994      	ldr	r4, [r2, #24]
 8007aea:	42a3      	cmp	r3, r4
 8007aec:	db01      	blt.n	8007af2 <__sfputc_r+0x16>
 8007aee:	290a      	cmp	r1, #10
 8007af0:	d102      	bne.n	8007af8 <__sfputc_r+0x1c>
 8007af2:	bc10      	pop	{r4}
 8007af4:	f000 bc83 	b.w	80083fe <__swbuf_r>
 8007af8:	6813      	ldr	r3, [r2, #0]
 8007afa:	1c58      	adds	r0, r3, #1
 8007afc:	6010      	str	r0, [r2, #0]
 8007afe:	7019      	strb	r1, [r3, #0]
 8007b00:	4608      	mov	r0, r1
 8007b02:	bc10      	pop	{r4}
 8007b04:	4770      	bx	lr

08007b06 <__sfputs_r>:
 8007b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	4614      	mov	r4, r2
 8007b0e:	18d5      	adds	r5, r2, r3
 8007b10:	42ac      	cmp	r4, r5
 8007b12:	d101      	bne.n	8007b18 <__sfputs_r+0x12>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e007      	b.n	8007b28 <__sfputs_r+0x22>
 8007b18:	463a      	mov	r2, r7
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b20:	f7ff ffdc 	bl	8007adc <__sfputc_r>
 8007b24:	1c43      	adds	r3, r0, #1
 8007b26:	d1f3      	bne.n	8007b10 <__sfputs_r+0xa>
 8007b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b2c <_vfiprintf_r>:
 8007b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b30:	460d      	mov	r5, r1
 8007b32:	4614      	mov	r4, r2
 8007b34:	4698      	mov	r8, r3
 8007b36:	4606      	mov	r6, r0
 8007b38:	b09d      	sub	sp, #116	@ 0x74
 8007b3a:	b118      	cbz	r0, 8007b44 <_vfiprintf_r+0x18>
 8007b3c:	6a03      	ldr	r3, [r0, #32]
 8007b3e:	b90b      	cbnz	r3, 8007b44 <_vfiprintf_r+0x18>
 8007b40:	f000 fbd2 	bl	80082e8 <__sinit>
 8007b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b46:	07d9      	lsls	r1, r3, #31
 8007b48:	d405      	bmi.n	8007b56 <_vfiprintf_r+0x2a>
 8007b4a:	89ab      	ldrh	r3, [r5, #12]
 8007b4c:	059a      	lsls	r2, r3, #22
 8007b4e:	d402      	bmi.n	8007b56 <_vfiprintf_r+0x2a>
 8007b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b52:	f000 fdd4 	bl	80086fe <__retarget_lock_acquire_recursive>
 8007b56:	89ab      	ldrh	r3, [r5, #12]
 8007b58:	071b      	lsls	r3, r3, #28
 8007b5a:	d501      	bpl.n	8007b60 <_vfiprintf_r+0x34>
 8007b5c:	692b      	ldr	r3, [r5, #16]
 8007b5e:	b99b      	cbnz	r3, 8007b88 <_vfiprintf_r+0x5c>
 8007b60:	4629      	mov	r1, r5
 8007b62:	4630      	mov	r0, r6
 8007b64:	f000 fc8a 	bl	800847c <__swsetup_r>
 8007b68:	b170      	cbz	r0, 8007b88 <_vfiprintf_r+0x5c>
 8007b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007b6c:	07dc      	lsls	r4, r3, #31
 8007b6e:	d504      	bpl.n	8007b7a <_vfiprintf_r+0x4e>
 8007b70:	f04f 30ff 	mov.w	r0, #4294967295
 8007b74:	b01d      	add	sp, #116	@ 0x74
 8007b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b7a:	89ab      	ldrh	r3, [r5, #12]
 8007b7c:	0598      	lsls	r0, r3, #22
 8007b7e:	d4f7      	bmi.n	8007b70 <_vfiprintf_r+0x44>
 8007b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007b82:	f000 fdbd 	bl	8008700 <__retarget_lock_release_recursive>
 8007b86:	e7f3      	b.n	8007b70 <_vfiprintf_r+0x44>
 8007b88:	2300      	movs	r3, #0
 8007b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b8c:	2320      	movs	r3, #32
 8007b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007b92:	2330      	movs	r3, #48	@ 0x30
 8007b94:	f04f 0901 	mov.w	r9, #1
 8007b98:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b9c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007d48 <_vfiprintf_r+0x21c>
 8007ba0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007ba4:	4623      	mov	r3, r4
 8007ba6:	469a      	mov	sl, r3
 8007ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bac:	b10a      	cbz	r2, 8007bb2 <_vfiprintf_r+0x86>
 8007bae:	2a25      	cmp	r2, #37	@ 0x25
 8007bb0:	d1f9      	bne.n	8007ba6 <_vfiprintf_r+0x7a>
 8007bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8007bb6:	d00b      	beq.n	8007bd0 <_vfiprintf_r+0xa4>
 8007bb8:	465b      	mov	r3, fp
 8007bba:	4622      	mov	r2, r4
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	f7ff ffa1 	bl	8007b06 <__sfputs_r>
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	f000 80a7 	beq.w	8007d18 <_vfiprintf_r+0x1ec>
 8007bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bcc:	445a      	add	r2, fp
 8007bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f000 809f 	beq.w	8007d18 <_vfiprintf_r+0x1ec>
 8007bda:	2300      	movs	r3, #0
 8007bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8007be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007be4:	f10a 0a01 	add.w	sl, sl, #1
 8007be8:	9304      	str	r3, [sp, #16]
 8007bea:	9307      	str	r3, [sp, #28]
 8007bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007bf2:	4654      	mov	r4, sl
 8007bf4:	2205      	movs	r2, #5
 8007bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bfa:	4853      	ldr	r0, [pc, #332]	@ (8007d48 <_vfiprintf_r+0x21c>)
 8007bfc:	f000 fd81 	bl	8008702 <memchr>
 8007c00:	9a04      	ldr	r2, [sp, #16]
 8007c02:	b9d8      	cbnz	r0, 8007c3c <_vfiprintf_r+0x110>
 8007c04:	06d1      	lsls	r1, r2, #27
 8007c06:	bf44      	itt	mi
 8007c08:	2320      	movmi	r3, #32
 8007c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c0e:	0713      	lsls	r3, r2, #28
 8007c10:	bf44      	itt	mi
 8007c12:	232b      	movmi	r3, #43	@ 0x2b
 8007c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c18:	f89a 3000 	ldrb.w	r3, [sl]
 8007c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c1e:	d015      	beq.n	8007c4c <_vfiprintf_r+0x120>
 8007c20:	4654      	mov	r4, sl
 8007c22:	2000      	movs	r0, #0
 8007c24:	f04f 0c0a 	mov.w	ip, #10
 8007c28:	9a07      	ldr	r2, [sp, #28]
 8007c2a:	4621      	mov	r1, r4
 8007c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c30:	3b30      	subs	r3, #48	@ 0x30
 8007c32:	2b09      	cmp	r3, #9
 8007c34:	d94b      	bls.n	8007cce <_vfiprintf_r+0x1a2>
 8007c36:	b1b0      	cbz	r0, 8007c66 <_vfiprintf_r+0x13a>
 8007c38:	9207      	str	r2, [sp, #28]
 8007c3a:	e014      	b.n	8007c66 <_vfiprintf_r+0x13a>
 8007c3c:	eba0 0308 	sub.w	r3, r0, r8
 8007c40:	fa09 f303 	lsl.w	r3, r9, r3
 8007c44:	4313      	orrs	r3, r2
 8007c46:	46a2      	mov	sl, r4
 8007c48:	9304      	str	r3, [sp, #16]
 8007c4a:	e7d2      	b.n	8007bf2 <_vfiprintf_r+0xc6>
 8007c4c:	9b03      	ldr	r3, [sp, #12]
 8007c4e:	1d19      	adds	r1, r3, #4
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	9103      	str	r1, [sp, #12]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	bfbb      	ittet	lt
 8007c58:	425b      	neglt	r3, r3
 8007c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8007c5e:	9307      	strge	r3, [sp, #28]
 8007c60:	9307      	strlt	r3, [sp, #28]
 8007c62:	bfb8      	it	lt
 8007c64:	9204      	strlt	r2, [sp, #16]
 8007c66:	7823      	ldrb	r3, [r4, #0]
 8007c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c6a:	d10a      	bne.n	8007c82 <_vfiprintf_r+0x156>
 8007c6c:	7863      	ldrb	r3, [r4, #1]
 8007c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c70:	d132      	bne.n	8007cd8 <_vfiprintf_r+0x1ac>
 8007c72:	9b03      	ldr	r3, [sp, #12]
 8007c74:	3402      	adds	r4, #2
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	9203      	str	r2, [sp, #12]
 8007c7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007c80:	9305      	str	r3, [sp, #20]
 8007c82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007d4c <_vfiprintf_r+0x220>
 8007c86:	2203      	movs	r2, #3
 8007c88:	4650      	mov	r0, sl
 8007c8a:	7821      	ldrb	r1, [r4, #0]
 8007c8c:	f000 fd39 	bl	8008702 <memchr>
 8007c90:	b138      	cbz	r0, 8007ca2 <_vfiprintf_r+0x176>
 8007c92:	2240      	movs	r2, #64	@ 0x40
 8007c94:	9b04      	ldr	r3, [sp, #16]
 8007c96:	eba0 000a 	sub.w	r0, r0, sl
 8007c9a:	4082      	lsls	r2, r0
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	3401      	adds	r4, #1
 8007ca0:	9304      	str	r3, [sp, #16]
 8007ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ca6:	2206      	movs	r2, #6
 8007ca8:	4829      	ldr	r0, [pc, #164]	@ (8007d50 <_vfiprintf_r+0x224>)
 8007caa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cae:	f000 fd28 	bl	8008702 <memchr>
 8007cb2:	2800      	cmp	r0, #0
 8007cb4:	d03f      	beq.n	8007d36 <_vfiprintf_r+0x20a>
 8007cb6:	4b27      	ldr	r3, [pc, #156]	@ (8007d54 <_vfiprintf_r+0x228>)
 8007cb8:	bb1b      	cbnz	r3, 8007d02 <_vfiprintf_r+0x1d6>
 8007cba:	9b03      	ldr	r3, [sp, #12]
 8007cbc:	3307      	adds	r3, #7
 8007cbe:	f023 0307 	bic.w	r3, r3, #7
 8007cc2:	3308      	adds	r3, #8
 8007cc4:	9303      	str	r3, [sp, #12]
 8007cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cc8:	443b      	add	r3, r7
 8007cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ccc:	e76a      	b.n	8007ba4 <_vfiprintf_r+0x78>
 8007cce:	460c      	mov	r4, r1
 8007cd0:	2001      	movs	r0, #1
 8007cd2:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cd6:	e7a8      	b.n	8007c2a <_vfiprintf_r+0xfe>
 8007cd8:	2300      	movs	r3, #0
 8007cda:	f04f 0c0a 	mov.w	ip, #10
 8007cde:	4619      	mov	r1, r3
 8007ce0:	3401      	adds	r4, #1
 8007ce2:	9305      	str	r3, [sp, #20]
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cea:	3a30      	subs	r2, #48	@ 0x30
 8007cec:	2a09      	cmp	r2, #9
 8007cee:	d903      	bls.n	8007cf8 <_vfiprintf_r+0x1cc>
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d0c6      	beq.n	8007c82 <_vfiprintf_r+0x156>
 8007cf4:	9105      	str	r1, [sp, #20]
 8007cf6:	e7c4      	b.n	8007c82 <_vfiprintf_r+0x156>
 8007cf8:	4604      	mov	r4, r0
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d00:	e7f0      	b.n	8007ce4 <_vfiprintf_r+0x1b8>
 8007d02:	ab03      	add	r3, sp, #12
 8007d04:	9300      	str	r3, [sp, #0]
 8007d06:	462a      	mov	r2, r5
 8007d08:	4630      	mov	r0, r6
 8007d0a:	4b13      	ldr	r3, [pc, #76]	@ (8007d58 <_vfiprintf_r+0x22c>)
 8007d0c:	a904      	add	r1, sp, #16
 8007d0e:	f7ff fcb9 	bl	8007684 <_printf_float>
 8007d12:	4607      	mov	r7, r0
 8007d14:	1c78      	adds	r0, r7, #1
 8007d16:	d1d6      	bne.n	8007cc6 <_vfiprintf_r+0x19a>
 8007d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d1a:	07d9      	lsls	r1, r3, #31
 8007d1c:	d405      	bmi.n	8007d2a <_vfiprintf_r+0x1fe>
 8007d1e:	89ab      	ldrh	r3, [r5, #12]
 8007d20:	059a      	lsls	r2, r3, #22
 8007d22:	d402      	bmi.n	8007d2a <_vfiprintf_r+0x1fe>
 8007d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d26:	f000 fceb 	bl	8008700 <__retarget_lock_release_recursive>
 8007d2a:	89ab      	ldrh	r3, [r5, #12]
 8007d2c:	065b      	lsls	r3, r3, #25
 8007d2e:	f53f af1f 	bmi.w	8007b70 <_vfiprintf_r+0x44>
 8007d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d34:	e71e      	b.n	8007b74 <_vfiprintf_r+0x48>
 8007d36:	ab03      	add	r3, sp, #12
 8007d38:	9300      	str	r3, [sp, #0]
 8007d3a:	462a      	mov	r2, r5
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	4b06      	ldr	r3, [pc, #24]	@ (8007d58 <_vfiprintf_r+0x22c>)
 8007d40:	a904      	add	r1, sp, #16
 8007d42:	f000 f87d 	bl	8007e40 <_printf_i>
 8007d46:	e7e4      	b.n	8007d12 <_vfiprintf_r+0x1e6>
 8007d48:	08009f52 	.word	0x08009f52
 8007d4c:	08009f58 	.word	0x08009f58
 8007d50:	08009f5c 	.word	0x08009f5c
 8007d54:	08007685 	.word	0x08007685
 8007d58:	08007b07 	.word	0x08007b07

08007d5c <_printf_common>:
 8007d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d60:	4616      	mov	r6, r2
 8007d62:	4698      	mov	r8, r3
 8007d64:	688a      	ldr	r2, [r1, #8]
 8007d66:	690b      	ldr	r3, [r1, #16]
 8007d68:	4607      	mov	r7, r0
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	bfb8      	it	lt
 8007d6e:	4613      	movlt	r3, r2
 8007d70:	6033      	str	r3, [r6, #0]
 8007d72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007d76:	460c      	mov	r4, r1
 8007d78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007d7c:	b10a      	cbz	r2, 8007d82 <_printf_common+0x26>
 8007d7e:	3301      	adds	r3, #1
 8007d80:	6033      	str	r3, [r6, #0]
 8007d82:	6823      	ldr	r3, [r4, #0]
 8007d84:	0699      	lsls	r1, r3, #26
 8007d86:	bf42      	ittt	mi
 8007d88:	6833      	ldrmi	r3, [r6, #0]
 8007d8a:	3302      	addmi	r3, #2
 8007d8c:	6033      	strmi	r3, [r6, #0]
 8007d8e:	6825      	ldr	r5, [r4, #0]
 8007d90:	f015 0506 	ands.w	r5, r5, #6
 8007d94:	d106      	bne.n	8007da4 <_printf_common+0x48>
 8007d96:	f104 0a19 	add.w	sl, r4, #25
 8007d9a:	68e3      	ldr	r3, [r4, #12]
 8007d9c:	6832      	ldr	r2, [r6, #0]
 8007d9e:	1a9b      	subs	r3, r3, r2
 8007da0:	42ab      	cmp	r3, r5
 8007da2:	dc2b      	bgt.n	8007dfc <_printf_common+0xa0>
 8007da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007da8:	6822      	ldr	r2, [r4, #0]
 8007daa:	3b00      	subs	r3, #0
 8007dac:	bf18      	it	ne
 8007dae:	2301      	movne	r3, #1
 8007db0:	0692      	lsls	r2, r2, #26
 8007db2:	d430      	bmi.n	8007e16 <_printf_common+0xba>
 8007db4:	4641      	mov	r1, r8
 8007db6:	4638      	mov	r0, r7
 8007db8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007dbc:	47c8      	blx	r9
 8007dbe:	3001      	adds	r0, #1
 8007dc0:	d023      	beq.n	8007e0a <_printf_common+0xae>
 8007dc2:	6823      	ldr	r3, [r4, #0]
 8007dc4:	6922      	ldr	r2, [r4, #16]
 8007dc6:	f003 0306 	and.w	r3, r3, #6
 8007dca:	2b04      	cmp	r3, #4
 8007dcc:	bf14      	ite	ne
 8007dce:	2500      	movne	r5, #0
 8007dd0:	6833      	ldreq	r3, [r6, #0]
 8007dd2:	f04f 0600 	mov.w	r6, #0
 8007dd6:	bf08      	it	eq
 8007dd8:	68e5      	ldreq	r5, [r4, #12]
 8007dda:	f104 041a 	add.w	r4, r4, #26
 8007dde:	bf08      	it	eq
 8007de0:	1aed      	subeq	r5, r5, r3
 8007de2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007de6:	bf08      	it	eq
 8007de8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007dec:	4293      	cmp	r3, r2
 8007dee:	bfc4      	itt	gt
 8007df0:	1a9b      	subgt	r3, r3, r2
 8007df2:	18ed      	addgt	r5, r5, r3
 8007df4:	42b5      	cmp	r5, r6
 8007df6:	d11a      	bne.n	8007e2e <_printf_common+0xd2>
 8007df8:	2000      	movs	r0, #0
 8007dfa:	e008      	b.n	8007e0e <_printf_common+0xb2>
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	4652      	mov	r2, sl
 8007e00:	4641      	mov	r1, r8
 8007e02:	4638      	mov	r0, r7
 8007e04:	47c8      	blx	r9
 8007e06:	3001      	adds	r0, #1
 8007e08:	d103      	bne.n	8007e12 <_printf_common+0xb6>
 8007e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e12:	3501      	adds	r5, #1
 8007e14:	e7c1      	b.n	8007d9a <_printf_common+0x3e>
 8007e16:	2030      	movs	r0, #48	@ 0x30
 8007e18:	18e1      	adds	r1, r4, r3
 8007e1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e1e:	1c5a      	adds	r2, r3, #1
 8007e20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e24:	4422      	add	r2, r4
 8007e26:	3302      	adds	r3, #2
 8007e28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e2c:	e7c2      	b.n	8007db4 <_printf_common+0x58>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4622      	mov	r2, r4
 8007e32:	4641      	mov	r1, r8
 8007e34:	4638      	mov	r0, r7
 8007e36:	47c8      	blx	r9
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d0e6      	beq.n	8007e0a <_printf_common+0xae>
 8007e3c:	3601      	adds	r6, #1
 8007e3e:	e7d9      	b.n	8007df4 <_printf_common+0x98>

08007e40 <_printf_i>:
 8007e40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e44:	7e0f      	ldrb	r7, [r1, #24]
 8007e46:	4691      	mov	r9, r2
 8007e48:	2f78      	cmp	r7, #120	@ 0x78
 8007e4a:	4680      	mov	r8, r0
 8007e4c:	460c      	mov	r4, r1
 8007e4e:	469a      	mov	sl, r3
 8007e50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e56:	d807      	bhi.n	8007e68 <_printf_i+0x28>
 8007e58:	2f62      	cmp	r7, #98	@ 0x62
 8007e5a:	d80a      	bhi.n	8007e72 <_printf_i+0x32>
 8007e5c:	2f00      	cmp	r7, #0
 8007e5e:	f000 80d3 	beq.w	8008008 <_printf_i+0x1c8>
 8007e62:	2f58      	cmp	r7, #88	@ 0x58
 8007e64:	f000 80ba 	beq.w	8007fdc <_printf_i+0x19c>
 8007e68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007e70:	e03a      	b.n	8007ee8 <_printf_i+0xa8>
 8007e72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007e76:	2b15      	cmp	r3, #21
 8007e78:	d8f6      	bhi.n	8007e68 <_printf_i+0x28>
 8007e7a:	a101      	add	r1, pc, #4	@ (adr r1, 8007e80 <_printf_i+0x40>)
 8007e7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e80:	08007ed9 	.word	0x08007ed9
 8007e84:	08007eed 	.word	0x08007eed
 8007e88:	08007e69 	.word	0x08007e69
 8007e8c:	08007e69 	.word	0x08007e69
 8007e90:	08007e69 	.word	0x08007e69
 8007e94:	08007e69 	.word	0x08007e69
 8007e98:	08007eed 	.word	0x08007eed
 8007e9c:	08007e69 	.word	0x08007e69
 8007ea0:	08007e69 	.word	0x08007e69
 8007ea4:	08007e69 	.word	0x08007e69
 8007ea8:	08007e69 	.word	0x08007e69
 8007eac:	08007fef 	.word	0x08007fef
 8007eb0:	08007f17 	.word	0x08007f17
 8007eb4:	08007fa9 	.word	0x08007fa9
 8007eb8:	08007e69 	.word	0x08007e69
 8007ebc:	08007e69 	.word	0x08007e69
 8007ec0:	08008011 	.word	0x08008011
 8007ec4:	08007e69 	.word	0x08007e69
 8007ec8:	08007f17 	.word	0x08007f17
 8007ecc:	08007e69 	.word	0x08007e69
 8007ed0:	08007e69 	.word	0x08007e69
 8007ed4:	08007fb1 	.word	0x08007fb1
 8007ed8:	6833      	ldr	r3, [r6, #0]
 8007eda:	1d1a      	adds	r2, r3, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6032      	str	r2, [r6, #0]
 8007ee0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ee4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e09e      	b.n	800802a <_printf_i+0x1ea>
 8007eec:	6833      	ldr	r3, [r6, #0]
 8007eee:	6820      	ldr	r0, [r4, #0]
 8007ef0:	1d19      	adds	r1, r3, #4
 8007ef2:	6031      	str	r1, [r6, #0]
 8007ef4:	0606      	lsls	r6, r0, #24
 8007ef6:	d501      	bpl.n	8007efc <_printf_i+0xbc>
 8007ef8:	681d      	ldr	r5, [r3, #0]
 8007efa:	e003      	b.n	8007f04 <_printf_i+0xc4>
 8007efc:	0645      	lsls	r5, r0, #25
 8007efe:	d5fb      	bpl.n	8007ef8 <_printf_i+0xb8>
 8007f00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f04:	2d00      	cmp	r5, #0
 8007f06:	da03      	bge.n	8007f10 <_printf_i+0xd0>
 8007f08:	232d      	movs	r3, #45	@ 0x2d
 8007f0a:	426d      	negs	r5, r5
 8007f0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f10:	230a      	movs	r3, #10
 8007f12:	4859      	ldr	r0, [pc, #356]	@ (8008078 <_printf_i+0x238>)
 8007f14:	e011      	b.n	8007f3a <_printf_i+0xfa>
 8007f16:	6821      	ldr	r1, [r4, #0]
 8007f18:	6833      	ldr	r3, [r6, #0]
 8007f1a:	0608      	lsls	r0, r1, #24
 8007f1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f20:	d402      	bmi.n	8007f28 <_printf_i+0xe8>
 8007f22:	0649      	lsls	r1, r1, #25
 8007f24:	bf48      	it	mi
 8007f26:	b2ad      	uxthmi	r5, r5
 8007f28:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f2a:	6033      	str	r3, [r6, #0]
 8007f2c:	bf14      	ite	ne
 8007f2e:	230a      	movne	r3, #10
 8007f30:	2308      	moveq	r3, #8
 8007f32:	4851      	ldr	r0, [pc, #324]	@ (8008078 <_printf_i+0x238>)
 8007f34:	2100      	movs	r1, #0
 8007f36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f3a:	6866      	ldr	r6, [r4, #4]
 8007f3c:	2e00      	cmp	r6, #0
 8007f3e:	bfa8      	it	ge
 8007f40:	6821      	ldrge	r1, [r4, #0]
 8007f42:	60a6      	str	r6, [r4, #8]
 8007f44:	bfa4      	itt	ge
 8007f46:	f021 0104 	bicge.w	r1, r1, #4
 8007f4a:	6021      	strge	r1, [r4, #0]
 8007f4c:	b90d      	cbnz	r5, 8007f52 <_printf_i+0x112>
 8007f4e:	2e00      	cmp	r6, #0
 8007f50:	d04b      	beq.n	8007fea <_printf_i+0x1aa>
 8007f52:	4616      	mov	r6, r2
 8007f54:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f58:	fb03 5711 	mls	r7, r3, r1, r5
 8007f5c:	5dc7      	ldrb	r7, [r0, r7]
 8007f5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f62:	462f      	mov	r7, r5
 8007f64:	42bb      	cmp	r3, r7
 8007f66:	460d      	mov	r5, r1
 8007f68:	d9f4      	bls.n	8007f54 <_printf_i+0x114>
 8007f6a:	2b08      	cmp	r3, #8
 8007f6c:	d10b      	bne.n	8007f86 <_printf_i+0x146>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	07df      	lsls	r7, r3, #31
 8007f72:	d508      	bpl.n	8007f86 <_printf_i+0x146>
 8007f74:	6923      	ldr	r3, [r4, #16]
 8007f76:	6861      	ldr	r1, [r4, #4]
 8007f78:	4299      	cmp	r1, r3
 8007f7a:	bfde      	ittt	le
 8007f7c:	2330      	movle	r3, #48	@ 0x30
 8007f7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007f82:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007f86:	1b92      	subs	r2, r2, r6
 8007f88:	6122      	str	r2, [r4, #16]
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	4621      	mov	r1, r4
 8007f8e:	4640      	mov	r0, r8
 8007f90:	f8cd a000 	str.w	sl, [sp]
 8007f94:	aa03      	add	r2, sp, #12
 8007f96:	f7ff fee1 	bl	8007d5c <_printf_common>
 8007f9a:	3001      	adds	r0, #1
 8007f9c:	d14a      	bne.n	8008034 <_printf_i+0x1f4>
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	b004      	add	sp, #16
 8007fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	f043 0320 	orr.w	r3, r3, #32
 8007fae:	6023      	str	r3, [r4, #0]
 8007fb0:	2778      	movs	r7, #120	@ 0x78
 8007fb2:	4832      	ldr	r0, [pc, #200]	@ (800807c <_printf_i+0x23c>)
 8007fb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fb8:	6823      	ldr	r3, [r4, #0]
 8007fba:	6831      	ldr	r1, [r6, #0]
 8007fbc:	061f      	lsls	r7, r3, #24
 8007fbe:	f851 5b04 	ldr.w	r5, [r1], #4
 8007fc2:	d402      	bmi.n	8007fca <_printf_i+0x18a>
 8007fc4:	065f      	lsls	r7, r3, #25
 8007fc6:	bf48      	it	mi
 8007fc8:	b2ad      	uxthmi	r5, r5
 8007fca:	6031      	str	r1, [r6, #0]
 8007fcc:	07d9      	lsls	r1, r3, #31
 8007fce:	bf44      	itt	mi
 8007fd0:	f043 0320 	orrmi.w	r3, r3, #32
 8007fd4:	6023      	strmi	r3, [r4, #0]
 8007fd6:	b11d      	cbz	r5, 8007fe0 <_printf_i+0x1a0>
 8007fd8:	2310      	movs	r3, #16
 8007fda:	e7ab      	b.n	8007f34 <_printf_i+0xf4>
 8007fdc:	4826      	ldr	r0, [pc, #152]	@ (8008078 <_printf_i+0x238>)
 8007fde:	e7e9      	b.n	8007fb4 <_printf_i+0x174>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	f023 0320 	bic.w	r3, r3, #32
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	e7f6      	b.n	8007fd8 <_printf_i+0x198>
 8007fea:	4616      	mov	r6, r2
 8007fec:	e7bd      	b.n	8007f6a <_printf_i+0x12a>
 8007fee:	6833      	ldr	r3, [r6, #0]
 8007ff0:	6825      	ldr	r5, [r4, #0]
 8007ff2:	1d18      	adds	r0, r3, #4
 8007ff4:	6961      	ldr	r1, [r4, #20]
 8007ff6:	6030      	str	r0, [r6, #0]
 8007ff8:	062e      	lsls	r6, r5, #24
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	d501      	bpl.n	8008002 <_printf_i+0x1c2>
 8007ffe:	6019      	str	r1, [r3, #0]
 8008000:	e002      	b.n	8008008 <_printf_i+0x1c8>
 8008002:	0668      	lsls	r0, r5, #25
 8008004:	d5fb      	bpl.n	8007ffe <_printf_i+0x1be>
 8008006:	8019      	strh	r1, [r3, #0]
 8008008:	2300      	movs	r3, #0
 800800a:	4616      	mov	r6, r2
 800800c:	6123      	str	r3, [r4, #16]
 800800e:	e7bc      	b.n	8007f8a <_printf_i+0x14a>
 8008010:	6833      	ldr	r3, [r6, #0]
 8008012:	2100      	movs	r1, #0
 8008014:	1d1a      	adds	r2, r3, #4
 8008016:	6032      	str	r2, [r6, #0]
 8008018:	681e      	ldr	r6, [r3, #0]
 800801a:	6862      	ldr	r2, [r4, #4]
 800801c:	4630      	mov	r0, r6
 800801e:	f000 fb70 	bl	8008702 <memchr>
 8008022:	b108      	cbz	r0, 8008028 <_printf_i+0x1e8>
 8008024:	1b80      	subs	r0, r0, r6
 8008026:	6060      	str	r0, [r4, #4]
 8008028:	6863      	ldr	r3, [r4, #4]
 800802a:	6123      	str	r3, [r4, #16]
 800802c:	2300      	movs	r3, #0
 800802e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008032:	e7aa      	b.n	8007f8a <_printf_i+0x14a>
 8008034:	4632      	mov	r2, r6
 8008036:	4649      	mov	r1, r9
 8008038:	4640      	mov	r0, r8
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	47d0      	blx	sl
 800803e:	3001      	adds	r0, #1
 8008040:	d0ad      	beq.n	8007f9e <_printf_i+0x15e>
 8008042:	6823      	ldr	r3, [r4, #0]
 8008044:	079b      	lsls	r3, r3, #30
 8008046:	d413      	bmi.n	8008070 <_printf_i+0x230>
 8008048:	68e0      	ldr	r0, [r4, #12]
 800804a:	9b03      	ldr	r3, [sp, #12]
 800804c:	4298      	cmp	r0, r3
 800804e:	bfb8      	it	lt
 8008050:	4618      	movlt	r0, r3
 8008052:	e7a6      	b.n	8007fa2 <_printf_i+0x162>
 8008054:	2301      	movs	r3, #1
 8008056:	4632      	mov	r2, r6
 8008058:	4649      	mov	r1, r9
 800805a:	4640      	mov	r0, r8
 800805c:	47d0      	blx	sl
 800805e:	3001      	adds	r0, #1
 8008060:	d09d      	beq.n	8007f9e <_printf_i+0x15e>
 8008062:	3501      	adds	r5, #1
 8008064:	68e3      	ldr	r3, [r4, #12]
 8008066:	9903      	ldr	r1, [sp, #12]
 8008068:	1a5b      	subs	r3, r3, r1
 800806a:	42ab      	cmp	r3, r5
 800806c:	dcf2      	bgt.n	8008054 <_printf_i+0x214>
 800806e:	e7eb      	b.n	8008048 <_printf_i+0x208>
 8008070:	2500      	movs	r5, #0
 8008072:	f104 0619 	add.w	r6, r4, #25
 8008076:	e7f5      	b.n	8008064 <_printf_i+0x224>
 8008078:	08009f63 	.word	0x08009f63
 800807c:	08009f74 	.word	0x08009f74

08008080 <__sflush_r>:
 8008080:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008086:	0716      	lsls	r6, r2, #28
 8008088:	4605      	mov	r5, r0
 800808a:	460c      	mov	r4, r1
 800808c:	d454      	bmi.n	8008138 <__sflush_r+0xb8>
 800808e:	684b      	ldr	r3, [r1, #4]
 8008090:	2b00      	cmp	r3, #0
 8008092:	dc02      	bgt.n	800809a <__sflush_r+0x1a>
 8008094:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008096:	2b00      	cmp	r3, #0
 8008098:	dd48      	ble.n	800812c <__sflush_r+0xac>
 800809a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800809c:	2e00      	cmp	r6, #0
 800809e:	d045      	beq.n	800812c <__sflush_r+0xac>
 80080a0:	2300      	movs	r3, #0
 80080a2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80080a6:	682f      	ldr	r7, [r5, #0]
 80080a8:	6a21      	ldr	r1, [r4, #32]
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	d030      	beq.n	8008110 <__sflush_r+0x90>
 80080ae:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80080b0:	89a3      	ldrh	r3, [r4, #12]
 80080b2:	0759      	lsls	r1, r3, #29
 80080b4:	d505      	bpl.n	80080c2 <__sflush_r+0x42>
 80080b6:	6863      	ldr	r3, [r4, #4]
 80080b8:	1ad2      	subs	r2, r2, r3
 80080ba:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80080bc:	b10b      	cbz	r3, 80080c2 <__sflush_r+0x42>
 80080be:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80080c0:	1ad2      	subs	r2, r2, r3
 80080c2:	2300      	movs	r3, #0
 80080c4:	4628      	mov	r0, r5
 80080c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80080c8:	6a21      	ldr	r1, [r4, #32]
 80080ca:	47b0      	blx	r6
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	89a3      	ldrh	r3, [r4, #12]
 80080d0:	d106      	bne.n	80080e0 <__sflush_r+0x60>
 80080d2:	6829      	ldr	r1, [r5, #0]
 80080d4:	291d      	cmp	r1, #29
 80080d6:	d82b      	bhi.n	8008130 <__sflush_r+0xb0>
 80080d8:	4a28      	ldr	r2, [pc, #160]	@ (800817c <__sflush_r+0xfc>)
 80080da:	410a      	asrs	r2, r1
 80080dc:	07d6      	lsls	r6, r2, #31
 80080de:	d427      	bmi.n	8008130 <__sflush_r+0xb0>
 80080e0:	2200      	movs	r2, #0
 80080e2:	6062      	str	r2, [r4, #4]
 80080e4:	6922      	ldr	r2, [r4, #16]
 80080e6:	04d9      	lsls	r1, r3, #19
 80080e8:	6022      	str	r2, [r4, #0]
 80080ea:	d504      	bpl.n	80080f6 <__sflush_r+0x76>
 80080ec:	1c42      	adds	r2, r0, #1
 80080ee:	d101      	bne.n	80080f4 <__sflush_r+0x74>
 80080f0:	682b      	ldr	r3, [r5, #0]
 80080f2:	b903      	cbnz	r3, 80080f6 <__sflush_r+0x76>
 80080f4:	6560      	str	r0, [r4, #84]	@ 0x54
 80080f6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080f8:	602f      	str	r7, [r5, #0]
 80080fa:	b1b9      	cbz	r1, 800812c <__sflush_r+0xac>
 80080fc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008100:	4299      	cmp	r1, r3
 8008102:	d002      	beq.n	800810a <__sflush_r+0x8a>
 8008104:	4628      	mov	r0, r5
 8008106:	f001 f96b 	bl	80093e0 <_free_r>
 800810a:	2300      	movs	r3, #0
 800810c:	6363      	str	r3, [r4, #52]	@ 0x34
 800810e:	e00d      	b.n	800812c <__sflush_r+0xac>
 8008110:	2301      	movs	r3, #1
 8008112:	4628      	mov	r0, r5
 8008114:	47b0      	blx	r6
 8008116:	4602      	mov	r2, r0
 8008118:	1c50      	adds	r0, r2, #1
 800811a:	d1c9      	bne.n	80080b0 <__sflush_r+0x30>
 800811c:	682b      	ldr	r3, [r5, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0c6      	beq.n	80080b0 <__sflush_r+0x30>
 8008122:	2b1d      	cmp	r3, #29
 8008124:	d001      	beq.n	800812a <__sflush_r+0xaa>
 8008126:	2b16      	cmp	r3, #22
 8008128:	d11d      	bne.n	8008166 <__sflush_r+0xe6>
 800812a:	602f      	str	r7, [r5, #0]
 800812c:	2000      	movs	r0, #0
 800812e:	e021      	b.n	8008174 <__sflush_r+0xf4>
 8008130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008134:	b21b      	sxth	r3, r3
 8008136:	e01a      	b.n	800816e <__sflush_r+0xee>
 8008138:	690f      	ldr	r7, [r1, #16]
 800813a:	2f00      	cmp	r7, #0
 800813c:	d0f6      	beq.n	800812c <__sflush_r+0xac>
 800813e:	0793      	lsls	r3, r2, #30
 8008140:	bf18      	it	ne
 8008142:	2300      	movne	r3, #0
 8008144:	680e      	ldr	r6, [r1, #0]
 8008146:	bf08      	it	eq
 8008148:	694b      	ldreq	r3, [r1, #20]
 800814a:	1bf6      	subs	r6, r6, r7
 800814c:	600f      	str	r7, [r1, #0]
 800814e:	608b      	str	r3, [r1, #8]
 8008150:	2e00      	cmp	r6, #0
 8008152:	ddeb      	ble.n	800812c <__sflush_r+0xac>
 8008154:	4633      	mov	r3, r6
 8008156:	463a      	mov	r2, r7
 8008158:	4628      	mov	r0, r5
 800815a:	6a21      	ldr	r1, [r4, #32]
 800815c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008160:	47e0      	blx	ip
 8008162:	2800      	cmp	r0, #0
 8008164:	dc07      	bgt.n	8008176 <__sflush_r+0xf6>
 8008166:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800816a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800816e:	f04f 30ff 	mov.w	r0, #4294967295
 8008172:	81a3      	strh	r3, [r4, #12]
 8008174:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008176:	4407      	add	r7, r0
 8008178:	1a36      	subs	r6, r6, r0
 800817a:	e7e9      	b.n	8008150 <__sflush_r+0xd0>
 800817c:	dfbffffe 	.word	0xdfbffffe

08008180 <_fflush_r>:
 8008180:	b538      	push	{r3, r4, r5, lr}
 8008182:	690b      	ldr	r3, [r1, #16]
 8008184:	4605      	mov	r5, r0
 8008186:	460c      	mov	r4, r1
 8008188:	b913      	cbnz	r3, 8008190 <_fflush_r+0x10>
 800818a:	2500      	movs	r5, #0
 800818c:	4628      	mov	r0, r5
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	b118      	cbz	r0, 800819a <_fflush_r+0x1a>
 8008192:	6a03      	ldr	r3, [r0, #32]
 8008194:	b90b      	cbnz	r3, 800819a <_fflush_r+0x1a>
 8008196:	f000 f8a7 	bl	80082e8 <__sinit>
 800819a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d0f3      	beq.n	800818a <_fflush_r+0xa>
 80081a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80081a4:	07d0      	lsls	r0, r2, #31
 80081a6:	d404      	bmi.n	80081b2 <_fflush_r+0x32>
 80081a8:	0599      	lsls	r1, r3, #22
 80081aa:	d402      	bmi.n	80081b2 <_fflush_r+0x32>
 80081ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ae:	f000 faa6 	bl	80086fe <__retarget_lock_acquire_recursive>
 80081b2:	4628      	mov	r0, r5
 80081b4:	4621      	mov	r1, r4
 80081b6:	f7ff ff63 	bl	8008080 <__sflush_r>
 80081ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081bc:	4605      	mov	r5, r0
 80081be:	07da      	lsls	r2, r3, #31
 80081c0:	d4e4      	bmi.n	800818c <_fflush_r+0xc>
 80081c2:	89a3      	ldrh	r3, [r4, #12]
 80081c4:	059b      	lsls	r3, r3, #22
 80081c6:	d4e1      	bmi.n	800818c <_fflush_r+0xc>
 80081c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081ca:	f000 fa99 	bl	8008700 <__retarget_lock_release_recursive>
 80081ce:	e7dd      	b.n	800818c <_fflush_r+0xc>

080081d0 <std>:
 80081d0:	2300      	movs	r3, #0
 80081d2:	b510      	push	{r4, lr}
 80081d4:	4604      	mov	r4, r0
 80081d6:	e9c0 3300 	strd	r3, r3, [r0]
 80081da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081de:	6083      	str	r3, [r0, #8]
 80081e0:	8181      	strh	r1, [r0, #12]
 80081e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80081e4:	81c2      	strh	r2, [r0, #14]
 80081e6:	6183      	str	r3, [r0, #24]
 80081e8:	4619      	mov	r1, r3
 80081ea:	2208      	movs	r2, #8
 80081ec:	305c      	adds	r0, #92	@ 0x5c
 80081ee:	f000 f9b5 	bl	800855c <memset>
 80081f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008228 <std+0x58>)
 80081f4:	6224      	str	r4, [r4, #32]
 80081f6:	6263      	str	r3, [r4, #36]	@ 0x24
 80081f8:	4b0c      	ldr	r3, [pc, #48]	@ (800822c <std+0x5c>)
 80081fa:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081fc:	4b0c      	ldr	r3, [pc, #48]	@ (8008230 <std+0x60>)
 80081fe:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008200:	4b0c      	ldr	r3, [pc, #48]	@ (8008234 <std+0x64>)
 8008202:	6323      	str	r3, [r4, #48]	@ 0x30
 8008204:	4b0c      	ldr	r3, [pc, #48]	@ (8008238 <std+0x68>)
 8008206:	429c      	cmp	r4, r3
 8008208:	d006      	beq.n	8008218 <std+0x48>
 800820a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800820e:	4294      	cmp	r4, r2
 8008210:	d002      	beq.n	8008218 <std+0x48>
 8008212:	33d0      	adds	r3, #208	@ 0xd0
 8008214:	429c      	cmp	r4, r3
 8008216:	d105      	bne.n	8008224 <std+0x54>
 8008218:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800821c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008220:	f000 ba6c 	b.w	80086fc <__retarget_lock_init_recursive>
 8008224:	bd10      	pop	{r4, pc}
 8008226:	bf00      	nop
 8008228:	08008379 	.word	0x08008379
 800822c:	0800839b 	.word	0x0800839b
 8008230:	080083d3 	.word	0x080083d3
 8008234:	080083f7 	.word	0x080083f7
 8008238:	20000374 	.word	0x20000374

0800823c <stdio_exit_handler>:
 800823c:	4a02      	ldr	r2, [pc, #8]	@ (8008248 <stdio_exit_handler+0xc>)
 800823e:	4903      	ldr	r1, [pc, #12]	@ (800824c <stdio_exit_handler+0x10>)
 8008240:	4803      	ldr	r0, [pc, #12]	@ (8008250 <stdio_exit_handler+0x14>)
 8008242:	f000 b87b 	b.w	800833c <_fwalk_sglue>
 8008246:	bf00      	nop
 8008248:	2000000c 	.word	0x2000000c
 800824c:	08008181 	.word	0x08008181
 8008250:	2000001c 	.word	0x2000001c

08008254 <cleanup_stdio>:
 8008254:	6841      	ldr	r1, [r0, #4]
 8008256:	4b0c      	ldr	r3, [pc, #48]	@ (8008288 <cleanup_stdio+0x34>)
 8008258:	b510      	push	{r4, lr}
 800825a:	4299      	cmp	r1, r3
 800825c:	4604      	mov	r4, r0
 800825e:	d001      	beq.n	8008264 <cleanup_stdio+0x10>
 8008260:	f7ff ff8e 	bl	8008180 <_fflush_r>
 8008264:	68a1      	ldr	r1, [r4, #8]
 8008266:	4b09      	ldr	r3, [pc, #36]	@ (800828c <cleanup_stdio+0x38>)
 8008268:	4299      	cmp	r1, r3
 800826a:	d002      	beq.n	8008272 <cleanup_stdio+0x1e>
 800826c:	4620      	mov	r0, r4
 800826e:	f7ff ff87 	bl	8008180 <_fflush_r>
 8008272:	68e1      	ldr	r1, [r4, #12]
 8008274:	4b06      	ldr	r3, [pc, #24]	@ (8008290 <cleanup_stdio+0x3c>)
 8008276:	4299      	cmp	r1, r3
 8008278:	d004      	beq.n	8008284 <cleanup_stdio+0x30>
 800827a:	4620      	mov	r0, r4
 800827c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008280:	f7ff bf7e 	b.w	8008180 <_fflush_r>
 8008284:	bd10      	pop	{r4, pc}
 8008286:	bf00      	nop
 8008288:	20000374 	.word	0x20000374
 800828c:	200003dc 	.word	0x200003dc
 8008290:	20000444 	.word	0x20000444

08008294 <global_stdio_init.part.0>:
 8008294:	b510      	push	{r4, lr}
 8008296:	4b0b      	ldr	r3, [pc, #44]	@ (80082c4 <global_stdio_init.part.0+0x30>)
 8008298:	4c0b      	ldr	r4, [pc, #44]	@ (80082c8 <global_stdio_init.part.0+0x34>)
 800829a:	4a0c      	ldr	r2, [pc, #48]	@ (80082cc <global_stdio_init.part.0+0x38>)
 800829c:	4620      	mov	r0, r4
 800829e:	601a      	str	r2, [r3, #0]
 80082a0:	2104      	movs	r1, #4
 80082a2:	2200      	movs	r2, #0
 80082a4:	f7ff ff94 	bl	80081d0 <std>
 80082a8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80082ac:	2201      	movs	r2, #1
 80082ae:	2109      	movs	r1, #9
 80082b0:	f7ff ff8e 	bl	80081d0 <std>
 80082b4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082b8:	2202      	movs	r2, #2
 80082ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082be:	2112      	movs	r1, #18
 80082c0:	f7ff bf86 	b.w	80081d0 <std>
 80082c4:	200004ac 	.word	0x200004ac
 80082c8:	20000374 	.word	0x20000374
 80082cc:	0800823d 	.word	0x0800823d

080082d0 <__sfp_lock_acquire>:
 80082d0:	4801      	ldr	r0, [pc, #4]	@ (80082d8 <__sfp_lock_acquire+0x8>)
 80082d2:	f000 ba14 	b.w	80086fe <__retarget_lock_acquire_recursive>
 80082d6:	bf00      	nop
 80082d8:	200004b5 	.word	0x200004b5

080082dc <__sfp_lock_release>:
 80082dc:	4801      	ldr	r0, [pc, #4]	@ (80082e4 <__sfp_lock_release+0x8>)
 80082de:	f000 ba0f 	b.w	8008700 <__retarget_lock_release_recursive>
 80082e2:	bf00      	nop
 80082e4:	200004b5 	.word	0x200004b5

080082e8 <__sinit>:
 80082e8:	b510      	push	{r4, lr}
 80082ea:	4604      	mov	r4, r0
 80082ec:	f7ff fff0 	bl	80082d0 <__sfp_lock_acquire>
 80082f0:	6a23      	ldr	r3, [r4, #32]
 80082f2:	b11b      	cbz	r3, 80082fc <__sinit+0x14>
 80082f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082f8:	f7ff bff0 	b.w	80082dc <__sfp_lock_release>
 80082fc:	4b04      	ldr	r3, [pc, #16]	@ (8008310 <__sinit+0x28>)
 80082fe:	6223      	str	r3, [r4, #32]
 8008300:	4b04      	ldr	r3, [pc, #16]	@ (8008314 <__sinit+0x2c>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1f5      	bne.n	80082f4 <__sinit+0xc>
 8008308:	f7ff ffc4 	bl	8008294 <global_stdio_init.part.0>
 800830c:	e7f2      	b.n	80082f4 <__sinit+0xc>
 800830e:	bf00      	nop
 8008310:	08008255 	.word	0x08008255
 8008314:	200004ac 	.word	0x200004ac

08008318 <fiprintf>:
 8008318:	b40e      	push	{r1, r2, r3}
 800831a:	b503      	push	{r0, r1, lr}
 800831c:	4601      	mov	r1, r0
 800831e:	ab03      	add	r3, sp, #12
 8008320:	4805      	ldr	r0, [pc, #20]	@ (8008338 <fiprintf+0x20>)
 8008322:	f853 2b04 	ldr.w	r2, [r3], #4
 8008326:	6800      	ldr	r0, [r0, #0]
 8008328:	9301      	str	r3, [sp, #4]
 800832a:	f7ff fbff 	bl	8007b2c <_vfiprintf_r>
 800832e:	b002      	add	sp, #8
 8008330:	f85d eb04 	ldr.w	lr, [sp], #4
 8008334:	b003      	add	sp, #12
 8008336:	4770      	bx	lr
 8008338:	20000018 	.word	0x20000018

0800833c <_fwalk_sglue>:
 800833c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008340:	4607      	mov	r7, r0
 8008342:	4688      	mov	r8, r1
 8008344:	4614      	mov	r4, r2
 8008346:	2600      	movs	r6, #0
 8008348:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800834c:	f1b9 0901 	subs.w	r9, r9, #1
 8008350:	d505      	bpl.n	800835e <_fwalk_sglue+0x22>
 8008352:	6824      	ldr	r4, [r4, #0]
 8008354:	2c00      	cmp	r4, #0
 8008356:	d1f7      	bne.n	8008348 <_fwalk_sglue+0xc>
 8008358:	4630      	mov	r0, r6
 800835a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835e:	89ab      	ldrh	r3, [r5, #12]
 8008360:	2b01      	cmp	r3, #1
 8008362:	d907      	bls.n	8008374 <_fwalk_sglue+0x38>
 8008364:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008368:	3301      	adds	r3, #1
 800836a:	d003      	beq.n	8008374 <_fwalk_sglue+0x38>
 800836c:	4629      	mov	r1, r5
 800836e:	4638      	mov	r0, r7
 8008370:	47c0      	blx	r8
 8008372:	4306      	orrs	r6, r0
 8008374:	3568      	adds	r5, #104	@ 0x68
 8008376:	e7e9      	b.n	800834c <_fwalk_sglue+0x10>

08008378 <__sread>:
 8008378:	b510      	push	{r4, lr}
 800837a:	460c      	mov	r4, r1
 800837c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008380:	f000 f94a 	bl	8008618 <_read_r>
 8008384:	2800      	cmp	r0, #0
 8008386:	bfab      	itete	ge
 8008388:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800838a:	89a3      	ldrhlt	r3, [r4, #12]
 800838c:	181b      	addge	r3, r3, r0
 800838e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008392:	bfac      	ite	ge
 8008394:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008396:	81a3      	strhlt	r3, [r4, #12]
 8008398:	bd10      	pop	{r4, pc}

0800839a <__swrite>:
 800839a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839e:	461f      	mov	r7, r3
 80083a0:	898b      	ldrh	r3, [r1, #12]
 80083a2:	4605      	mov	r5, r0
 80083a4:	05db      	lsls	r3, r3, #23
 80083a6:	460c      	mov	r4, r1
 80083a8:	4616      	mov	r6, r2
 80083aa:	d505      	bpl.n	80083b8 <__swrite+0x1e>
 80083ac:	2302      	movs	r3, #2
 80083ae:	2200      	movs	r2, #0
 80083b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083b4:	f000 f91e 	bl	80085f4 <_lseek_r>
 80083b8:	89a3      	ldrh	r3, [r4, #12]
 80083ba:	4632      	mov	r2, r6
 80083bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80083c0:	81a3      	strh	r3, [r4, #12]
 80083c2:	4628      	mov	r0, r5
 80083c4:	463b      	mov	r3, r7
 80083c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80083ce:	f000 b959 	b.w	8008684 <_write_r>

080083d2 <__sseek>:
 80083d2:	b510      	push	{r4, lr}
 80083d4:	460c      	mov	r4, r1
 80083d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083da:	f000 f90b 	bl	80085f4 <_lseek_r>
 80083de:	1c43      	adds	r3, r0, #1
 80083e0:	89a3      	ldrh	r3, [r4, #12]
 80083e2:	bf15      	itete	ne
 80083e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80083e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80083ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80083ee:	81a3      	strheq	r3, [r4, #12]
 80083f0:	bf18      	it	ne
 80083f2:	81a3      	strhne	r3, [r4, #12]
 80083f4:	bd10      	pop	{r4, pc}

080083f6 <__sclose>:
 80083f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083fa:	f000 b8eb 	b.w	80085d4 <_close_r>

080083fe <__swbuf_r>:
 80083fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008400:	460e      	mov	r6, r1
 8008402:	4614      	mov	r4, r2
 8008404:	4605      	mov	r5, r0
 8008406:	b118      	cbz	r0, 8008410 <__swbuf_r+0x12>
 8008408:	6a03      	ldr	r3, [r0, #32]
 800840a:	b90b      	cbnz	r3, 8008410 <__swbuf_r+0x12>
 800840c:	f7ff ff6c 	bl	80082e8 <__sinit>
 8008410:	69a3      	ldr	r3, [r4, #24]
 8008412:	60a3      	str	r3, [r4, #8]
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	071a      	lsls	r2, r3, #28
 8008418:	d501      	bpl.n	800841e <__swbuf_r+0x20>
 800841a:	6923      	ldr	r3, [r4, #16]
 800841c:	b943      	cbnz	r3, 8008430 <__swbuf_r+0x32>
 800841e:	4621      	mov	r1, r4
 8008420:	4628      	mov	r0, r5
 8008422:	f000 f82b 	bl	800847c <__swsetup_r>
 8008426:	b118      	cbz	r0, 8008430 <__swbuf_r+0x32>
 8008428:	f04f 37ff 	mov.w	r7, #4294967295
 800842c:	4638      	mov	r0, r7
 800842e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	6922      	ldr	r2, [r4, #16]
 8008434:	b2f6      	uxtb	r6, r6
 8008436:	1a98      	subs	r0, r3, r2
 8008438:	6963      	ldr	r3, [r4, #20]
 800843a:	4637      	mov	r7, r6
 800843c:	4283      	cmp	r3, r0
 800843e:	dc05      	bgt.n	800844c <__swbuf_r+0x4e>
 8008440:	4621      	mov	r1, r4
 8008442:	4628      	mov	r0, r5
 8008444:	f7ff fe9c 	bl	8008180 <_fflush_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	d1ed      	bne.n	8008428 <__swbuf_r+0x2a>
 800844c:	68a3      	ldr	r3, [r4, #8]
 800844e:	3b01      	subs	r3, #1
 8008450:	60a3      	str	r3, [r4, #8]
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	1c5a      	adds	r2, r3, #1
 8008456:	6022      	str	r2, [r4, #0]
 8008458:	701e      	strb	r6, [r3, #0]
 800845a:	6962      	ldr	r2, [r4, #20]
 800845c:	1c43      	adds	r3, r0, #1
 800845e:	429a      	cmp	r2, r3
 8008460:	d004      	beq.n	800846c <__swbuf_r+0x6e>
 8008462:	89a3      	ldrh	r3, [r4, #12]
 8008464:	07db      	lsls	r3, r3, #31
 8008466:	d5e1      	bpl.n	800842c <__swbuf_r+0x2e>
 8008468:	2e0a      	cmp	r6, #10
 800846a:	d1df      	bne.n	800842c <__swbuf_r+0x2e>
 800846c:	4621      	mov	r1, r4
 800846e:	4628      	mov	r0, r5
 8008470:	f7ff fe86 	bl	8008180 <_fflush_r>
 8008474:	2800      	cmp	r0, #0
 8008476:	d0d9      	beq.n	800842c <__swbuf_r+0x2e>
 8008478:	e7d6      	b.n	8008428 <__swbuf_r+0x2a>
	...

0800847c <__swsetup_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4b29      	ldr	r3, [pc, #164]	@ (8008524 <__swsetup_r+0xa8>)
 8008480:	4605      	mov	r5, r0
 8008482:	6818      	ldr	r0, [r3, #0]
 8008484:	460c      	mov	r4, r1
 8008486:	b118      	cbz	r0, 8008490 <__swsetup_r+0x14>
 8008488:	6a03      	ldr	r3, [r0, #32]
 800848a:	b90b      	cbnz	r3, 8008490 <__swsetup_r+0x14>
 800848c:	f7ff ff2c 	bl	80082e8 <__sinit>
 8008490:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008494:	0719      	lsls	r1, r3, #28
 8008496:	d422      	bmi.n	80084de <__swsetup_r+0x62>
 8008498:	06da      	lsls	r2, r3, #27
 800849a:	d407      	bmi.n	80084ac <__swsetup_r+0x30>
 800849c:	2209      	movs	r2, #9
 800849e:	602a      	str	r2, [r5, #0]
 80084a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80084a4:	f04f 30ff 	mov.w	r0, #4294967295
 80084a8:	81a3      	strh	r3, [r4, #12]
 80084aa:	e033      	b.n	8008514 <__swsetup_r+0x98>
 80084ac:	0758      	lsls	r0, r3, #29
 80084ae:	d512      	bpl.n	80084d6 <__swsetup_r+0x5a>
 80084b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084b2:	b141      	cbz	r1, 80084c6 <__swsetup_r+0x4a>
 80084b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d002      	beq.n	80084c2 <__swsetup_r+0x46>
 80084bc:	4628      	mov	r0, r5
 80084be:	f000 ff8f 	bl	80093e0 <_free_r>
 80084c2:	2300      	movs	r3, #0
 80084c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80084cc:	81a3      	strh	r3, [r4, #12]
 80084ce:	2300      	movs	r3, #0
 80084d0:	6063      	str	r3, [r4, #4]
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6023      	str	r3, [r4, #0]
 80084d6:	89a3      	ldrh	r3, [r4, #12]
 80084d8:	f043 0308 	orr.w	r3, r3, #8
 80084dc:	81a3      	strh	r3, [r4, #12]
 80084de:	6923      	ldr	r3, [r4, #16]
 80084e0:	b94b      	cbnz	r3, 80084f6 <__swsetup_r+0x7a>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80084e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80084ec:	d003      	beq.n	80084f6 <__swsetup_r+0x7a>
 80084ee:	4621      	mov	r1, r4
 80084f0:	4628      	mov	r0, r5
 80084f2:	f001 fb62 	bl	8009bba <__smakebuf_r>
 80084f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084fa:	f013 0201 	ands.w	r2, r3, #1
 80084fe:	d00a      	beq.n	8008516 <__swsetup_r+0x9a>
 8008500:	2200      	movs	r2, #0
 8008502:	60a2      	str	r2, [r4, #8]
 8008504:	6962      	ldr	r2, [r4, #20]
 8008506:	4252      	negs	r2, r2
 8008508:	61a2      	str	r2, [r4, #24]
 800850a:	6922      	ldr	r2, [r4, #16]
 800850c:	b942      	cbnz	r2, 8008520 <__swsetup_r+0xa4>
 800850e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008512:	d1c5      	bne.n	80084a0 <__swsetup_r+0x24>
 8008514:	bd38      	pop	{r3, r4, r5, pc}
 8008516:	0799      	lsls	r1, r3, #30
 8008518:	bf58      	it	pl
 800851a:	6962      	ldrpl	r2, [r4, #20]
 800851c:	60a2      	str	r2, [r4, #8]
 800851e:	e7f4      	b.n	800850a <__swsetup_r+0x8e>
 8008520:	2000      	movs	r0, #0
 8008522:	e7f7      	b.n	8008514 <__swsetup_r+0x98>
 8008524:	20000018 	.word	0x20000018

08008528 <memmove>:
 8008528:	4288      	cmp	r0, r1
 800852a:	b510      	push	{r4, lr}
 800852c:	eb01 0402 	add.w	r4, r1, r2
 8008530:	d902      	bls.n	8008538 <memmove+0x10>
 8008532:	4284      	cmp	r4, r0
 8008534:	4623      	mov	r3, r4
 8008536:	d807      	bhi.n	8008548 <memmove+0x20>
 8008538:	1e43      	subs	r3, r0, #1
 800853a:	42a1      	cmp	r1, r4
 800853c:	d008      	beq.n	8008550 <memmove+0x28>
 800853e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008542:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008546:	e7f8      	b.n	800853a <memmove+0x12>
 8008548:	4601      	mov	r1, r0
 800854a:	4402      	add	r2, r0
 800854c:	428a      	cmp	r2, r1
 800854e:	d100      	bne.n	8008552 <memmove+0x2a>
 8008550:	bd10      	pop	{r4, pc}
 8008552:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008556:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800855a:	e7f7      	b.n	800854c <memmove+0x24>

0800855c <memset>:
 800855c:	4603      	mov	r3, r0
 800855e:	4402      	add	r2, r0
 8008560:	4293      	cmp	r3, r2
 8008562:	d100      	bne.n	8008566 <memset+0xa>
 8008564:	4770      	bx	lr
 8008566:	f803 1b01 	strb.w	r1, [r3], #1
 800856a:	e7f9      	b.n	8008560 <memset+0x4>

0800856c <_raise_r>:
 800856c:	291f      	cmp	r1, #31
 800856e:	b538      	push	{r3, r4, r5, lr}
 8008570:	4605      	mov	r5, r0
 8008572:	460c      	mov	r4, r1
 8008574:	d904      	bls.n	8008580 <_raise_r+0x14>
 8008576:	2316      	movs	r3, #22
 8008578:	6003      	str	r3, [r0, #0]
 800857a:	f04f 30ff 	mov.w	r0, #4294967295
 800857e:	bd38      	pop	{r3, r4, r5, pc}
 8008580:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008582:	b112      	cbz	r2, 800858a <_raise_r+0x1e>
 8008584:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008588:	b94b      	cbnz	r3, 800859e <_raise_r+0x32>
 800858a:	4628      	mov	r0, r5
 800858c:	f000 f868 	bl	8008660 <_getpid_r>
 8008590:	4622      	mov	r2, r4
 8008592:	4601      	mov	r1, r0
 8008594:	4628      	mov	r0, r5
 8008596:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800859a:	f000 b84f 	b.w	800863c <_kill_r>
 800859e:	2b01      	cmp	r3, #1
 80085a0:	d00a      	beq.n	80085b8 <_raise_r+0x4c>
 80085a2:	1c59      	adds	r1, r3, #1
 80085a4:	d103      	bne.n	80085ae <_raise_r+0x42>
 80085a6:	2316      	movs	r3, #22
 80085a8:	6003      	str	r3, [r0, #0]
 80085aa:	2001      	movs	r0, #1
 80085ac:	e7e7      	b.n	800857e <_raise_r+0x12>
 80085ae:	2100      	movs	r1, #0
 80085b0:	4620      	mov	r0, r4
 80085b2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80085b6:	4798      	blx	r3
 80085b8:	2000      	movs	r0, #0
 80085ba:	e7e0      	b.n	800857e <_raise_r+0x12>

080085bc <raise>:
 80085bc:	4b02      	ldr	r3, [pc, #8]	@ (80085c8 <raise+0xc>)
 80085be:	4601      	mov	r1, r0
 80085c0:	6818      	ldr	r0, [r3, #0]
 80085c2:	f7ff bfd3 	b.w	800856c <_raise_r>
 80085c6:	bf00      	nop
 80085c8:	20000018 	.word	0x20000018

080085cc <_localeconv_r>:
 80085cc:	4800      	ldr	r0, [pc, #0]	@ (80085d0 <_localeconv_r+0x4>)
 80085ce:	4770      	bx	lr
 80085d0:	20000158 	.word	0x20000158

080085d4 <_close_r>:
 80085d4:	b538      	push	{r3, r4, r5, lr}
 80085d6:	2300      	movs	r3, #0
 80085d8:	4d05      	ldr	r5, [pc, #20]	@ (80085f0 <_close_r+0x1c>)
 80085da:	4604      	mov	r4, r0
 80085dc:	4608      	mov	r0, r1
 80085de:	602b      	str	r3, [r5, #0]
 80085e0:	f7f9 f8a1 	bl	8001726 <_close>
 80085e4:	1c43      	adds	r3, r0, #1
 80085e6:	d102      	bne.n	80085ee <_close_r+0x1a>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	b103      	cbz	r3, 80085ee <_close_r+0x1a>
 80085ec:	6023      	str	r3, [r4, #0]
 80085ee:	bd38      	pop	{r3, r4, r5, pc}
 80085f0:	200004b0 	.word	0x200004b0

080085f4 <_lseek_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4604      	mov	r4, r0
 80085f8:	4608      	mov	r0, r1
 80085fa:	4611      	mov	r1, r2
 80085fc:	2200      	movs	r2, #0
 80085fe:	4d05      	ldr	r5, [pc, #20]	@ (8008614 <_lseek_r+0x20>)
 8008600:	602a      	str	r2, [r5, #0]
 8008602:	461a      	mov	r2, r3
 8008604:	f7f9 f8b3 	bl	800176e <_lseek>
 8008608:	1c43      	adds	r3, r0, #1
 800860a:	d102      	bne.n	8008612 <_lseek_r+0x1e>
 800860c:	682b      	ldr	r3, [r5, #0]
 800860e:	b103      	cbz	r3, 8008612 <_lseek_r+0x1e>
 8008610:	6023      	str	r3, [r4, #0]
 8008612:	bd38      	pop	{r3, r4, r5, pc}
 8008614:	200004b0 	.word	0x200004b0

08008618 <_read_r>:
 8008618:	b538      	push	{r3, r4, r5, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	4608      	mov	r0, r1
 800861e:	4611      	mov	r1, r2
 8008620:	2200      	movs	r2, #0
 8008622:	4d05      	ldr	r5, [pc, #20]	@ (8008638 <_read_r+0x20>)
 8008624:	602a      	str	r2, [r5, #0]
 8008626:	461a      	mov	r2, r3
 8008628:	f7f9 f860 	bl	80016ec <_read>
 800862c:	1c43      	adds	r3, r0, #1
 800862e:	d102      	bne.n	8008636 <_read_r+0x1e>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	b103      	cbz	r3, 8008636 <_read_r+0x1e>
 8008634:	6023      	str	r3, [r4, #0]
 8008636:	bd38      	pop	{r3, r4, r5, pc}
 8008638:	200004b0 	.word	0x200004b0

0800863c <_kill_r>:
 800863c:	b538      	push	{r3, r4, r5, lr}
 800863e:	2300      	movs	r3, #0
 8008640:	4d06      	ldr	r5, [pc, #24]	@ (800865c <_kill_r+0x20>)
 8008642:	4604      	mov	r4, r0
 8008644:	4608      	mov	r0, r1
 8008646:	4611      	mov	r1, r2
 8008648:	602b      	str	r3, [r5, #0]
 800864a:	f7f9 f834 	bl	80016b6 <_kill>
 800864e:	1c43      	adds	r3, r0, #1
 8008650:	d102      	bne.n	8008658 <_kill_r+0x1c>
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	b103      	cbz	r3, 8008658 <_kill_r+0x1c>
 8008656:	6023      	str	r3, [r4, #0]
 8008658:	bd38      	pop	{r3, r4, r5, pc}
 800865a:	bf00      	nop
 800865c:	200004b0 	.word	0x200004b0

08008660 <_getpid_r>:
 8008660:	f7f9 b822 	b.w	80016a8 <_getpid>

08008664 <_sbrk_r>:
 8008664:	b538      	push	{r3, r4, r5, lr}
 8008666:	2300      	movs	r3, #0
 8008668:	4d05      	ldr	r5, [pc, #20]	@ (8008680 <_sbrk_r+0x1c>)
 800866a:	4604      	mov	r4, r0
 800866c:	4608      	mov	r0, r1
 800866e:	602b      	str	r3, [r5, #0]
 8008670:	f7f9 f88a 	bl	8001788 <_sbrk>
 8008674:	1c43      	adds	r3, r0, #1
 8008676:	d102      	bne.n	800867e <_sbrk_r+0x1a>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	b103      	cbz	r3, 800867e <_sbrk_r+0x1a>
 800867c:	6023      	str	r3, [r4, #0]
 800867e:	bd38      	pop	{r3, r4, r5, pc}
 8008680:	200004b0 	.word	0x200004b0

08008684 <_write_r>:
 8008684:	b538      	push	{r3, r4, r5, lr}
 8008686:	4604      	mov	r4, r0
 8008688:	4608      	mov	r0, r1
 800868a:	4611      	mov	r1, r2
 800868c:	2200      	movs	r2, #0
 800868e:	4d05      	ldr	r5, [pc, #20]	@ (80086a4 <_write_r+0x20>)
 8008690:	602a      	str	r2, [r5, #0]
 8008692:	461a      	mov	r2, r3
 8008694:	f7fd fa7a 	bl	8005b8c <_write>
 8008698:	1c43      	adds	r3, r0, #1
 800869a:	d102      	bne.n	80086a2 <_write_r+0x1e>
 800869c:	682b      	ldr	r3, [r5, #0]
 800869e:	b103      	cbz	r3, 80086a2 <_write_r+0x1e>
 80086a0:	6023      	str	r3, [r4, #0]
 80086a2:	bd38      	pop	{r3, r4, r5, pc}
 80086a4:	200004b0 	.word	0x200004b0

080086a8 <__errno>:
 80086a8:	4b01      	ldr	r3, [pc, #4]	@ (80086b0 <__errno+0x8>)
 80086aa:	6818      	ldr	r0, [r3, #0]
 80086ac:	4770      	bx	lr
 80086ae:	bf00      	nop
 80086b0:	20000018 	.word	0x20000018

080086b4 <__libc_init_array>:
 80086b4:	b570      	push	{r4, r5, r6, lr}
 80086b6:	2600      	movs	r6, #0
 80086b8:	4d0c      	ldr	r5, [pc, #48]	@ (80086ec <__libc_init_array+0x38>)
 80086ba:	4c0d      	ldr	r4, [pc, #52]	@ (80086f0 <__libc_init_array+0x3c>)
 80086bc:	1b64      	subs	r4, r4, r5
 80086be:	10a4      	asrs	r4, r4, #2
 80086c0:	42a6      	cmp	r6, r4
 80086c2:	d109      	bne.n	80086d8 <__libc_init_array+0x24>
 80086c4:	f001 faf8 	bl	8009cb8 <_init>
 80086c8:	2600      	movs	r6, #0
 80086ca:	4d0a      	ldr	r5, [pc, #40]	@ (80086f4 <__libc_init_array+0x40>)
 80086cc:	4c0a      	ldr	r4, [pc, #40]	@ (80086f8 <__libc_init_array+0x44>)
 80086ce:	1b64      	subs	r4, r4, r5
 80086d0:	10a4      	asrs	r4, r4, #2
 80086d2:	42a6      	cmp	r6, r4
 80086d4:	d105      	bne.n	80086e2 <__libc_init_array+0x2e>
 80086d6:	bd70      	pop	{r4, r5, r6, pc}
 80086d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086dc:	4798      	blx	r3
 80086de:	3601      	adds	r6, #1
 80086e0:	e7ee      	b.n	80086c0 <__libc_init_array+0xc>
 80086e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086e6:	4798      	blx	r3
 80086e8:	3601      	adds	r6, #1
 80086ea:	e7f2      	b.n	80086d2 <__libc_init_array+0x1e>
 80086ec:	0800a27c 	.word	0x0800a27c
 80086f0:	0800a27c 	.word	0x0800a27c
 80086f4:	0800a27c 	.word	0x0800a27c
 80086f8:	0800a284 	.word	0x0800a284

080086fc <__retarget_lock_init_recursive>:
 80086fc:	4770      	bx	lr

080086fe <__retarget_lock_acquire_recursive>:
 80086fe:	4770      	bx	lr

08008700 <__retarget_lock_release_recursive>:
 8008700:	4770      	bx	lr

08008702 <memchr>:
 8008702:	4603      	mov	r3, r0
 8008704:	b510      	push	{r4, lr}
 8008706:	b2c9      	uxtb	r1, r1
 8008708:	4402      	add	r2, r0
 800870a:	4293      	cmp	r3, r2
 800870c:	4618      	mov	r0, r3
 800870e:	d101      	bne.n	8008714 <memchr+0x12>
 8008710:	2000      	movs	r0, #0
 8008712:	e003      	b.n	800871c <memchr+0x1a>
 8008714:	7804      	ldrb	r4, [r0, #0]
 8008716:	3301      	adds	r3, #1
 8008718:	428c      	cmp	r4, r1
 800871a:	d1f6      	bne.n	800870a <memchr+0x8>
 800871c:	bd10      	pop	{r4, pc}

0800871e <memcpy>:
 800871e:	440a      	add	r2, r1
 8008720:	4291      	cmp	r1, r2
 8008722:	f100 33ff 	add.w	r3, r0, #4294967295
 8008726:	d100      	bne.n	800872a <memcpy+0xc>
 8008728:	4770      	bx	lr
 800872a:	b510      	push	{r4, lr}
 800872c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008730:	4291      	cmp	r1, r2
 8008732:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008736:	d1f9      	bne.n	800872c <memcpy+0xe>
 8008738:	bd10      	pop	{r4, pc}

0800873a <quorem>:
 800873a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800873e:	6903      	ldr	r3, [r0, #16]
 8008740:	690c      	ldr	r4, [r1, #16]
 8008742:	4607      	mov	r7, r0
 8008744:	42a3      	cmp	r3, r4
 8008746:	db7e      	blt.n	8008846 <quorem+0x10c>
 8008748:	3c01      	subs	r4, #1
 800874a:	00a3      	lsls	r3, r4, #2
 800874c:	f100 0514 	add.w	r5, r0, #20
 8008750:	f101 0814 	add.w	r8, r1, #20
 8008754:	9300      	str	r3, [sp, #0]
 8008756:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800875a:	9301      	str	r3, [sp, #4]
 800875c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008760:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008764:	3301      	adds	r3, #1
 8008766:	429a      	cmp	r2, r3
 8008768:	fbb2 f6f3 	udiv	r6, r2, r3
 800876c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008770:	d32e      	bcc.n	80087d0 <quorem+0x96>
 8008772:	f04f 0a00 	mov.w	sl, #0
 8008776:	46c4      	mov	ip, r8
 8008778:	46ae      	mov	lr, r5
 800877a:	46d3      	mov	fp, sl
 800877c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008780:	b298      	uxth	r0, r3
 8008782:	fb06 a000 	mla	r0, r6, r0, sl
 8008786:	0c1b      	lsrs	r3, r3, #16
 8008788:	0c02      	lsrs	r2, r0, #16
 800878a:	fb06 2303 	mla	r3, r6, r3, r2
 800878e:	f8de 2000 	ldr.w	r2, [lr]
 8008792:	b280      	uxth	r0, r0
 8008794:	b292      	uxth	r2, r2
 8008796:	1a12      	subs	r2, r2, r0
 8008798:	445a      	add	r2, fp
 800879a:	f8de 0000 	ldr.w	r0, [lr]
 800879e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80087a8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80087ac:	b292      	uxth	r2, r2
 80087ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80087b2:	45e1      	cmp	r9, ip
 80087b4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087b8:	f84e 2b04 	str.w	r2, [lr], #4
 80087bc:	d2de      	bcs.n	800877c <quorem+0x42>
 80087be:	9b00      	ldr	r3, [sp, #0]
 80087c0:	58eb      	ldr	r3, [r5, r3]
 80087c2:	b92b      	cbnz	r3, 80087d0 <quorem+0x96>
 80087c4:	9b01      	ldr	r3, [sp, #4]
 80087c6:	3b04      	subs	r3, #4
 80087c8:	429d      	cmp	r5, r3
 80087ca:	461a      	mov	r2, r3
 80087cc:	d32f      	bcc.n	800882e <quorem+0xf4>
 80087ce:	613c      	str	r4, [r7, #16]
 80087d0:	4638      	mov	r0, r7
 80087d2:	f001 f8c5 	bl	8009960 <__mcmp>
 80087d6:	2800      	cmp	r0, #0
 80087d8:	db25      	blt.n	8008826 <quorem+0xec>
 80087da:	4629      	mov	r1, r5
 80087dc:	2000      	movs	r0, #0
 80087de:	f858 2b04 	ldr.w	r2, [r8], #4
 80087e2:	f8d1 c000 	ldr.w	ip, [r1]
 80087e6:	fa1f fe82 	uxth.w	lr, r2
 80087ea:	fa1f f38c 	uxth.w	r3, ip
 80087ee:	eba3 030e 	sub.w	r3, r3, lr
 80087f2:	4403      	add	r3, r0
 80087f4:	0c12      	lsrs	r2, r2, #16
 80087f6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087fa:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087fe:	b29b      	uxth	r3, r3
 8008800:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008804:	45c1      	cmp	r9, r8
 8008806:	ea4f 4022 	mov.w	r0, r2, asr #16
 800880a:	f841 3b04 	str.w	r3, [r1], #4
 800880e:	d2e6      	bcs.n	80087de <quorem+0xa4>
 8008810:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008814:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008818:	b922      	cbnz	r2, 8008824 <quorem+0xea>
 800881a:	3b04      	subs	r3, #4
 800881c:	429d      	cmp	r5, r3
 800881e:	461a      	mov	r2, r3
 8008820:	d30b      	bcc.n	800883a <quorem+0x100>
 8008822:	613c      	str	r4, [r7, #16]
 8008824:	3601      	adds	r6, #1
 8008826:	4630      	mov	r0, r6
 8008828:	b003      	add	sp, #12
 800882a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800882e:	6812      	ldr	r2, [r2, #0]
 8008830:	3b04      	subs	r3, #4
 8008832:	2a00      	cmp	r2, #0
 8008834:	d1cb      	bne.n	80087ce <quorem+0x94>
 8008836:	3c01      	subs	r4, #1
 8008838:	e7c6      	b.n	80087c8 <quorem+0x8e>
 800883a:	6812      	ldr	r2, [r2, #0]
 800883c:	3b04      	subs	r3, #4
 800883e:	2a00      	cmp	r2, #0
 8008840:	d1ef      	bne.n	8008822 <quorem+0xe8>
 8008842:	3c01      	subs	r4, #1
 8008844:	e7ea      	b.n	800881c <quorem+0xe2>
 8008846:	2000      	movs	r0, #0
 8008848:	e7ee      	b.n	8008828 <quorem+0xee>
 800884a:	0000      	movs	r0, r0
 800884c:	0000      	movs	r0, r0
	...

08008850 <_dtoa_r>:
 8008850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008854:	4614      	mov	r4, r2
 8008856:	461d      	mov	r5, r3
 8008858:	69c7      	ldr	r7, [r0, #28]
 800885a:	b097      	sub	sp, #92	@ 0x5c
 800885c:	4683      	mov	fp, r0
 800885e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008862:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008864:	b97f      	cbnz	r7, 8008886 <_dtoa_r+0x36>
 8008866:	2010      	movs	r0, #16
 8008868:	f7fe fdb0 	bl	80073cc <malloc>
 800886c:	4602      	mov	r2, r0
 800886e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008872:	b920      	cbnz	r0, 800887e <_dtoa_r+0x2e>
 8008874:	21ef      	movs	r1, #239	@ 0xef
 8008876:	4ba8      	ldr	r3, [pc, #672]	@ (8008b18 <_dtoa_r+0x2c8>)
 8008878:	48a8      	ldr	r0, [pc, #672]	@ (8008b1c <_dtoa_r+0x2cc>)
 800887a:	f7fe fd6d 	bl	8007358 <__assert_func>
 800887e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008882:	6007      	str	r7, [r0, #0]
 8008884:	60c7      	str	r7, [r0, #12]
 8008886:	f8db 301c 	ldr.w	r3, [fp, #28]
 800888a:	6819      	ldr	r1, [r3, #0]
 800888c:	b159      	cbz	r1, 80088a6 <_dtoa_r+0x56>
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	2301      	movs	r3, #1
 8008892:	4093      	lsls	r3, r2
 8008894:	604a      	str	r2, [r1, #4]
 8008896:	608b      	str	r3, [r1, #8]
 8008898:	4658      	mov	r0, fp
 800889a:	f000 fe29 	bl	80094f0 <_Bfree>
 800889e:	2200      	movs	r2, #0
 80088a0:	f8db 301c 	ldr.w	r3, [fp, #28]
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	1e2b      	subs	r3, r5, #0
 80088a8:	bfaf      	iteee	ge
 80088aa:	2300      	movge	r3, #0
 80088ac:	2201      	movlt	r2, #1
 80088ae:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80088b2:	9303      	strlt	r3, [sp, #12]
 80088b4:	bfa8      	it	ge
 80088b6:	6033      	strge	r3, [r6, #0]
 80088b8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80088bc:	4b98      	ldr	r3, [pc, #608]	@ (8008b20 <_dtoa_r+0x2d0>)
 80088be:	bfb8      	it	lt
 80088c0:	6032      	strlt	r2, [r6, #0]
 80088c2:	ea33 0308 	bics.w	r3, r3, r8
 80088c6:	d112      	bne.n	80088ee <_dtoa_r+0x9e>
 80088c8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088cc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80088ce:	6013      	str	r3, [r2, #0]
 80088d0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80088d4:	4323      	orrs	r3, r4
 80088d6:	f000 8550 	beq.w	800937a <_dtoa_r+0xb2a>
 80088da:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088dc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008b24 <_dtoa_r+0x2d4>
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	f000 8552 	beq.w	800938a <_dtoa_r+0xb3a>
 80088e6:	f10a 0303 	add.w	r3, sl, #3
 80088ea:	f000 bd4c 	b.w	8009386 <_dtoa_r+0xb36>
 80088ee:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088f2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80088f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088fa:	2200      	movs	r2, #0
 80088fc:	2300      	movs	r3, #0
 80088fe:	f7f8 f853 	bl	80009a8 <__aeabi_dcmpeq>
 8008902:	4607      	mov	r7, r0
 8008904:	b158      	cbz	r0, 800891e <_dtoa_r+0xce>
 8008906:	2301      	movs	r3, #1
 8008908:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800890a:	6013      	str	r3, [r2, #0]
 800890c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800890e:	b113      	cbz	r3, 8008916 <_dtoa_r+0xc6>
 8008910:	4b85      	ldr	r3, [pc, #532]	@ (8008b28 <_dtoa_r+0x2d8>)
 8008912:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008914:	6013      	str	r3, [r2, #0]
 8008916:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008b2c <_dtoa_r+0x2dc>
 800891a:	f000 bd36 	b.w	800938a <_dtoa_r+0xb3a>
 800891e:	ab14      	add	r3, sp, #80	@ 0x50
 8008920:	9301      	str	r3, [sp, #4]
 8008922:	ab15      	add	r3, sp, #84	@ 0x54
 8008924:	9300      	str	r3, [sp, #0]
 8008926:	4658      	mov	r0, fp
 8008928:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800892c:	f001 f8c8 	bl	8009ac0 <__d2b>
 8008930:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008934:	4681      	mov	r9, r0
 8008936:	2e00      	cmp	r6, #0
 8008938:	d077      	beq.n	8008a2a <_dtoa_r+0x1da>
 800893a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800893e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008940:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008944:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008948:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800894c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008950:	9712      	str	r7, [sp, #72]	@ 0x48
 8008952:	4619      	mov	r1, r3
 8008954:	2200      	movs	r2, #0
 8008956:	4b76      	ldr	r3, [pc, #472]	@ (8008b30 <_dtoa_r+0x2e0>)
 8008958:	f7f7 fc06 	bl	8000168 <__aeabi_dsub>
 800895c:	a368      	add	r3, pc, #416	@ (adr r3, 8008b00 <_dtoa_r+0x2b0>)
 800895e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008962:	f7f7 fdb9 	bl	80004d8 <__aeabi_dmul>
 8008966:	a368      	add	r3, pc, #416	@ (adr r3, 8008b08 <_dtoa_r+0x2b8>)
 8008968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800896c:	f7f7 fbfe 	bl	800016c <__adddf3>
 8008970:	4604      	mov	r4, r0
 8008972:	4630      	mov	r0, r6
 8008974:	460d      	mov	r5, r1
 8008976:	f7f7 fd45 	bl	8000404 <__aeabi_i2d>
 800897a:	a365      	add	r3, pc, #404	@ (adr r3, 8008b10 <_dtoa_r+0x2c0>)
 800897c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008980:	f7f7 fdaa 	bl	80004d8 <__aeabi_dmul>
 8008984:	4602      	mov	r2, r0
 8008986:	460b      	mov	r3, r1
 8008988:	4620      	mov	r0, r4
 800898a:	4629      	mov	r1, r5
 800898c:	f7f7 fbee 	bl	800016c <__adddf3>
 8008990:	4604      	mov	r4, r0
 8008992:	460d      	mov	r5, r1
 8008994:	f7f8 f850 	bl	8000a38 <__aeabi_d2iz>
 8008998:	2200      	movs	r2, #0
 800899a:	4607      	mov	r7, r0
 800899c:	2300      	movs	r3, #0
 800899e:	4620      	mov	r0, r4
 80089a0:	4629      	mov	r1, r5
 80089a2:	f7f8 f80b 	bl	80009bc <__aeabi_dcmplt>
 80089a6:	b140      	cbz	r0, 80089ba <_dtoa_r+0x16a>
 80089a8:	4638      	mov	r0, r7
 80089aa:	f7f7 fd2b 	bl	8000404 <__aeabi_i2d>
 80089ae:	4622      	mov	r2, r4
 80089b0:	462b      	mov	r3, r5
 80089b2:	f7f7 fff9 	bl	80009a8 <__aeabi_dcmpeq>
 80089b6:	b900      	cbnz	r0, 80089ba <_dtoa_r+0x16a>
 80089b8:	3f01      	subs	r7, #1
 80089ba:	2f16      	cmp	r7, #22
 80089bc:	d853      	bhi.n	8008a66 <_dtoa_r+0x216>
 80089be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089c2:	4b5c      	ldr	r3, [pc, #368]	@ (8008b34 <_dtoa_r+0x2e4>)
 80089c4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089cc:	f7f7 fff6 	bl	80009bc <__aeabi_dcmplt>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d04a      	beq.n	8008a6a <_dtoa_r+0x21a>
 80089d4:	2300      	movs	r3, #0
 80089d6:	3f01      	subs	r7, #1
 80089d8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089da:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089dc:	1b9b      	subs	r3, r3, r6
 80089de:	1e5a      	subs	r2, r3, #1
 80089e0:	bf46      	itte	mi
 80089e2:	f1c3 0801 	rsbmi	r8, r3, #1
 80089e6:	2300      	movmi	r3, #0
 80089e8:	f04f 0800 	movpl.w	r8, #0
 80089ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80089ee:	bf48      	it	mi
 80089f0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80089f2:	2f00      	cmp	r7, #0
 80089f4:	db3b      	blt.n	8008a6e <_dtoa_r+0x21e>
 80089f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089f8:	970e      	str	r7, [sp, #56]	@ 0x38
 80089fa:	443b      	add	r3, r7
 80089fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80089fe:	2300      	movs	r3, #0
 8008a00:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a02:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a04:	2b09      	cmp	r3, #9
 8008a06:	d866      	bhi.n	8008ad6 <_dtoa_r+0x286>
 8008a08:	2b05      	cmp	r3, #5
 8008a0a:	bfc4      	itt	gt
 8008a0c:	3b04      	subgt	r3, #4
 8008a0e:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008a10:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008a12:	bfc8      	it	gt
 8008a14:	2400      	movgt	r4, #0
 8008a16:	f1a3 0302 	sub.w	r3, r3, #2
 8008a1a:	bfd8      	it	le
 8008a1c:	2401      	movle	r4, #1
 8008a1e:	2b03      	cmp	r3, #3
 8008a20:	d864      	bhi.n	8008aec <_dtoa_r+0x29c>
 8008a22:	e8df f003 	tbb	[pc, r3]
 8008a26:	382b      	.short	0x382b
 8008a28:	5636      	.short	0x5636
 8008a2a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008a2e:	441e      	add	r6, r3
 8008a30:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a34:	2b20      	cmp	r3, #32
 8008a36:	bfc1      	itttt	gt
 8008a38:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a3c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a40:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a44:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a48:	bfd6      	itet	le
 8008a4a:	f1c3 0320 	rsble	r3, r3, #32
 8008a4e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a52:	fa04 f003 	lslle.w	r0, r4, r3
 8008a56:	f7f7 fcc5 	bl	80003e4 <__aeabi_ui2d>
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a60:	3e01      	subs	r6, #1
 8008a62:	9212      	str	r2, [sp, #72]	@ 0x48
 8008a64:	e775      	b.n	8008952 <_dtoa_r+0x102>
 8008a66:	2301      	movs	r3, #1
 8008a68:	e7b6      	b.n	80089d8 <_dtoa_r+0x188>
 8008a6a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008a6c:	e7b5      	b.n	80089da <_dtoa_r+0x18a>
 8008a6e:	427b      	negs	r3, r7
 8008a70:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a72:	2300      	movs	r3, #0
 8008a74:	eba8 0807 	sub.w	r8, r8, r7
 8008a78:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a7a:	e7c2      	b.n	8008a02 <_dtoa_r+0x1b2>
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a80:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	dc35      	bgt.n	8008af2 <_dtoa_r+0x2a2>
 8008a86:	2301      	movs	r3, #1
 8008a88:	461a      	mov	r2, r3
 8008a8a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008a8e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008a90:	e00b      	b.n	8008aaa <_dtoa_r+0x25a>
 8008a92:	2301      	movs	r3, #1
 8008a94:	e7f3      	b.n	8008a7e <_dtoa_r+0x22e>
 8008a96:	2300      	movs	r3, #0
 8008a98:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a9a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a9c:	18fb      	adds	r3, r7, r3
 8008a9e:	9308      	str	r3, [sp, #32]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	9307      	str	r3, [sp, #28]
 8008aa6:	bfb8      	it	lt
 8008aa8:	2301      	movlt	r3, #1
 8008aaa:	2100      	movs	r1, #0
 8008aac:	2204      	movs	r2, #4
 8008aae:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008ab2:	f102 0514 	add.w	r5, r2, #20
 8008ab6:	429d      	cmp	r5, r3
 8008ab8:	d91f      	bls.n	8008afa <_dtoa_r+0x2aa>
 8008aba:	6041      	str	r1, [r0, #4]
 8008abc:	4658      	mov	r0, fp
 8008abe:	f000 fcd7 	bl	8009470 <_Balloc>
 8008ac2:	4682      	mov	sl, r0
 8008ac4:	2800      	cmp	r0, #0
 8008ac6:	d139      	bne.n	8008b3c <_dtoa_r+0x2ec>
 8008ac8:	4602      	mov	r2, r0
 8008aca:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ace:	4b1a      	ldr	r3, [pc, #104]	@ (8008b38 <_dtoa_r+0x2e8>)
 8008ad0:	e6d2      	b.n	8008878 <_dtoa_r+0x28>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e7e0      	b.n	8008a98 <_dtoa_r+0x248>
 8008ad6:	2401      	movs	r4, #1
 8008ad8:	2300      	movs	r3, #0
 8008ada:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008adc:	9320      	str	r3, [sp, #128]	@ 0x80
 8008ade:	f04f 33ff 	mov.w	r3, #4294967295
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008ae8:	2312      	movs	r3, #18
 8008aea:	e7d0      	b.n	8008a8e <_dtoa_r+0x23e>
 8008aec:	2301      	movs	r3, #1
 8008aee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008af0:	e7f5      	b.n	8008ade <_dtoa_r+0x28e>
 8008af2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008af4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008af8:	e7d7      	b.n	8008aaa <_dtoa_r+0x25a>
 8008afa:	3101      	adds	r1, #1
 8008afc:	0052      	lsls	r2, r2, #1
 8008afe:	e7d8      	b.n	8008ab2 <_dtoa_r+0x262>
 8008b00:	636f4361 	.word	0x636f4361
 8008b04:	3fd287a7 	.word	0x3fd287a7
 8008b08:	8b60c8b3 	.word	0x8b60c8b3
 8008b0c:	3fc68a28 	.word	0x3fc68a28
 8008b10:	509f79fb 	.word	0x509f79fb
 8008b14:	3fd34413 	.word	0x3fd34413
 8008b18:	08009f92 	.word	0x08009f92
 8008b1c:	08009fa9 	.word	0x08009fa9
 8008b20:	7ff00000 	.word	0x7ff00000
 8008b24:	08009f8e 	.word	0x08009f8e
 8008b28:	08009f51 	.word	0x08009f51
 8008b2c:	08009f50 	.word	0x08009f50
 8008b30:	3ff80000 	.word	0x3ff80000
 8008b34:	0800a0a0 	.word	0x0800a0a0
 8008b38:	0800a001 	.word	0x0800a001
 8008b3c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b40:	6018      	str	r0, [r3, #0]
 8008b42:	9b07      	ldr	r3, [sp, #28]
 8008b44:	2b0e      	cmp	r3, #14
 8008b46:	f200 80a4 	bhi.w	8008c92 <_dtoa_r+0x442>
 8008b4a:	2c00      	cmp	r4, #0
 8008b4c:	f000 80a1 	beq.w	8008c92 <_dtoa_r+0x442>
 8008b50:	2f00      	cmp	r7, #0
 8008b52:	dd33      	ble.n	8008bbc <_dtoa_r+0x36c>
 8008b54:	4b86      	ldr	r3, [pc, #536]	@ (8008d70 <_dtoa_r+0x520>)
 8008b56:	f007 020f 	and.w	r2, r7, #15
 8008b5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b5e:	05f8      	lsls	r0, r7, #23
 8008b60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b64:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b68:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b6c:	d516      	bpl.n	8008b9c <_dtoa_r+0x34c>
 8008b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b72:	4b80      	ldr	r3, [pc, #512]	@ (8008d74 <_dtoa_r+0x524>)
 8008b74:	2603      	movs	r6, #3
 8008b76:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b7a:	f7f7 fdd7 	bl	800072c <__aeabi_ddiv>
 8008b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b82:	f004 040f 	and.w	r4, r4, #15
 8008b86:	4d7b      	ldr	r5, [pc, #492]	@ (8008d74 <_dtoa_r+0x524>)
 8008b88:	b954      	cbnz	r4, 8008ba0 <_dtoa_r+0x350>
 8008b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b92:	f7f7 fdcb 	bl	800072c <__aeabi_ddiv>
 8008b96:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b9a:	e028      	b.n	8008bee <_dtoa_r+0x39e>
 8008b9c:	2602      	movs	r6, #2
 8008b9e:	e7f2      	b.n	8008b86 <_dtoa_r+0x336>
 8008ba0:	07e1      	lsls	r1, r4, #31
 8008ba2:	d508      	bpl.n	8008bb6 <_dtoa_r+0x366>
 8008ba4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ba8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008bac:	f7f7 fc94 	bl	80004d8 <__aeabi_dmul>
 8008bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008bb4:	3601      	adds	r6, #1
 8008bb6:	1064      	asrs	r4, r4, #1
 8008bb8:	3508      	adds	r5, #8
 8008bba:	e7e5      	b.n	8008b88 <_dtoa_r+0x338>
 8008bbc:	f000 80d2 	beq.w	8008d64 <_dtoa_r+0x514>
 8008bc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bc4:	427c      	negs	r4, r7
 8008bc6:	4b6a      	ldr	r3, [pc, #424]	@ (8008d70 <_dtoa_r+0x520>)
 8008bc8:	f004 020f 	and.w	r2, r4, #15
 8008bcc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd4:	f7f7 fc80 	bl	80004d8 <__aeabi_dmul>
 8008bd8:	2602      	movs	r6, #2
 8008bda:	2300      	movs	r3, #0
 8008bdc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008be0:	4d64      	ldr	r5, [pc, #400]	@ (8008d74 <_dtoa_r+0x524>)
 8008be2:	1124      	asrs	r4, r4, #4
 8008be4:	2c00      	cmp	r4, #0
 8008be6:	f040 80b2 	bne.w	8008d4e <_dtoa_r+0x4fe>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d1d3      	bne.n	8008b96 <_dtoa_r+0x346>
 8008bee:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bf2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f000 80b7 	beq.w	8008d68 <_dtoa_r+0x518>
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	4620      	mov	r0, r4
 8008bfe:	4629      	mov	r1, r5
 8008c00:	4b5d      	ldr	r3, [pc, #372]	@ (8008d78 <_dtoa_r+0x528>)
 8008c02:	f7f7 fedb 	bl	80009bc <__aeabi_dcmplt>
 8008c06:	2800      	cmp	r0, #0
 8008c08:	f000 80ae 	beq.w	8008d68 <_dtoa_r+0x518>
 8008c0c:	9b07      	ldr	r3, [sp, #28]
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	f000 80aa 	beq.w	8008d68 <_dtoa_r+0x518>
 8008c14:	9b08      	ldr	r3, [sp, #32]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	dd37      	ble.n	8008c8a <_dtoa_r+0x43a>
 8008c1a:	1e7b      	subs	r3, r7, #1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	9304      	str	r3, [sp, #16]
 8008c20:	2200      	movs	r2, #0
 8008c22:	4629      	mov	r1, r5
 8008c24:	4b55      	ldr	r3, [pc, #340]	@ (8008d7c <_dtoa_r+0x52c>)
 8008c26:	f7f7 fc57 	bl	80004d8 <__aeabi_dmul>
 8008c2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c2e:	9c08      	ldr	r4, [sp, #32]
 8008c30:	3601      	adds	r6, #1
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7f7 fbe6 	bl	8000404 <__aeabi_i2d>
 8008c38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c3c:	f7f7 fc4c 	bl	80004d8 <__aeabi_dmul>
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b4f      	ldr	r3, [pc, #316]	@ (8008d80 <_dtoa_r+0x530>)
 8008c44:	f7f7 fa92 	bl	800016c <__adddf3>
 8008c48:	4605      	mov	r5, r0
 8008c4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c4e:	2c00      	cmp	r4, #0
 8008c50:	f040 809a 	bne.w	8008d88 <_dtoa_r+0x538>
 8008c54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c58:	2200      	movs	r2, #0
 8008c5a:	4b4a      	ldr	r3, [pc, #296]	@ (8008d84 <_dtoa_r+0x534>)
 8008c5c:	f7f7 fa84 	bl	8000168 <__aeabi_dsub>
 8008c60:	4602      	mov	r2, r0
 8008c62:	460b      	mov	r3, r1
 8008c64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c68:	462a      	mov	r2, r5
 8008c6a:	4633      	mov	r3, r6
 8008c6c:	f7f7 fec4 	bl	80009f8 <__aeabi_dcmpgt>
 8008c70:	2800      	cmp	r0, #0
 8008c72:	f040 828e 	bne.w	8009192 <_dtoa_r+0x942>
 8008c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c7a:	462a      	mov	r2, r5
 8008c7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c80:	f7f7 fe9c 	bl	80009bc <__aeabi_dcmplt>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	f040 8127 	bne.w	8008ed8 <_dtoa_r+0x688>
 8008c8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c92:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	f2c0 8163 	blt.w	8008f60 <_dtoa_r+0x710>
 8008c9a:	2f0e      	cmp	r7, #14
 8008c9c:	f300 8160 	bgt.w	8008f60 <_dtoa_r+0x710>
 8008ca0:	4b33      	ldr	r3, [pc, #204]	@ (8008d70 <_dtoa_r+0x520>)
 8008ca2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008ca6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008caa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008cae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	da03      	bge.n	8008cbc <_dtoa_r+0x46c>
 8008cb4:	9b07      	ldr	r3, [sp, #28]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	f340 8100 	ble.w	8008ebc <_dtoa_r+0x66c>
 8008cbc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008cc0:	4656      	mov	r6, sl
 8008cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc6:	4620      	mov	r0, r4
 8008cc8:	4629      	mov	r1, r5
 8008cca:	f7f7 fd2f 	bl	800072c <__aeabi_ddiv>
 8008cce:	f7f7 feb3 	bl	8000a38 <__aeabi_d2iz>
 8008cd2:	4680      	mov	r8, r0
 8008cd4:	f7f7 fb96 	bl	8000404 <__aeabi_i2d>
 8008cd8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cdc:	f7f7 fbfc 	bl	80004d8 <__aeabi_dmul>
 8008ce0:	4602      	mov	r2, r0
 8008ce2:	460b      	mov	r3, r1
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	4629      	mov	r1, r5
 8008ce8:	f7f7 fa3e 	bl	8000168 <__aeabi_dsub>
 8008cec:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cf0:	9d07      	ldr	r5, [sp, #28]
 8008cf2:	f806 4b01 	strb.w	r4, [r6], #1
 8008cf6:	eba6 040a 	sub.w	r4, r6, sl
 8008cfa:	42a5      	cmp	r5, r4
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	460b      	mov	r3, r1
 8008d00:	f040 8116 	bne.w	8008f30 <_dtoa_r+0x6e0>
 8008d04:	f7f7 fa32 	bl	800016c <__adddf3>
 8008d08:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	f7f7 fe72 	bl	80009f8 <__aeabi_dcmpgt>
 8008d14:	2800      	cmp	r0, #0
 8008d16:	f040 80f8 	bne.w	8008f0a <_dtoa_r+0x6ba>
 8008d1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d1e:	4620      	mov	r0, r4
 8008d20:	4629      	mov	r1, r5
 8008d22:	f7f7 fe41 	bl	80009a8 <__aeabi_dcmpeq>
 8008d26:	b118      	cbz	r0, 8008d30 <_dtoa_r+0x4e0>
 8008d28:	f018 0f01 	tst.w	r8, #1
 8008d2c:	f040 80ed 	bne.w	8008f0a <_dtoa_r+0x6ba>
 8008d30:	4649      	mov	r1, r9
 8008d32:	4658      	mov	r0, fp
 8008d34:	f000 fbdc 	bl	80094f0 <_Bfree>
 8008d38:	2300      	movs	r3, #0
 8008d3a:	7033      	strb	r3, [r6, #0]
 8008d3c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d3e:	3701      	adds	r7, #1
 8008d40:	601f      	str	r7, [r3, #0]
 8008d42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 8320 	beq.w	800938a <_dtoa_r+0xb3a>
 8008d4a:	601e      	str	r6, [r3, #0]
 8008d4c:	e31d      	b.n	800938a <_dtoa_r+0xb3a>
 8008d4e:	07e2      	lsls	r2, r4, #31
 8008d50:	d505      	bpl.n	8008d5e <_dtoa_r+0x50e>
 8008d52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d56:	f7f7 fbbf 	bl	80004d8 <__aeabi_dmul>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	3601      	adds	r6, #1
 8008d5e:	1064      	asrs	r4, r4, #1
 8008d60:	3508      	adds	r5, #8
 8008d62:	e73f      	b.n	8008be4 <_dtoa_r+0x394>
 8008d64:	2602      	movs	r6, #2
 8008d66:	e742      	b.n	8008bee <_dtoa_r+0x39e>
 8008d68:	9c07      	ldr	r4, [sp, #28]
 8008d6a:	9704      	str	r7, [sp, #16]
 8008d6c:	e761      	b.n	8008c32 <_dtoa_r+0x3e2>
 8008d6e:	bf00      	nop
 8008d70:	0800a0a0 	.word	0x0800a0a0
 8008d74:	0800a078 	.word	0x0800a078
 8008d78:	3ff00000 	.word	0x3ff00000
 8008d7c:	40240000 	.word	0x40240000
 8008d80:	401c0000 	.word	0x401c0000
 8008d84:	40140000 	.word	0x40140000
 8008d88:	4b70      	ldr	r3, [pc, #448]	@ (8008f4c <_dtoa_r+0x6fc>)
 8008d8a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d90:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d94:	4454      	add	r4, sl
 8008d96:	2900      	cmp	r1, #0
 8008d98:	d045      	beq.n	8008e26 <_dtoa_r+0x5d6>
 8008d9a:	2000      	movs	r0, #0
 8008d9c:	496c      	ldr	r1, [pc, #432]	@ (8008f50 <_dtoa_r+0x700>)
 8008d9e:	f7f7 fcc5 	bl	800072c <__aeabi_ddiv>
 8008da2:	4633      	mov	r3, r6
 8008da4:	462a      	mov	r2, r5
 8008da6:	f7f7 f9df 	bl	8000168 <__aeabi_dsub>
 8008daa:	4656      	mov	r6, sl
 8008dac:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008db0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008db4:	f7f7 fe40 	bl	8000a38 <__aeabi_d2iz>
 8008db8:	4605      	mov	r5, r0
 8008dba:	f7f7 fb23 	bl	8000404 <__aeabi_i2d>
 8008dbe:	4602      	mov	r2, r0
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dc6:	f7f7 f9cf 	bl	8000168 <__aeabi_dsub>
 8008dca:	4602      	mov	r2, r0
 8008dcc:	460b      	mov	r3, r1
 8008dce:	3530      	adds	r5, #48	@ 0x30
 8008dd0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dd4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dd8:	f806 5b01 	strb.w	r5, [r6], #1
 8008ddc:	f7f7 fdee 	bl	80009bc <__aeabi_dcmplt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	d163      	bne.n	8008eac <_dtoa_r+0x65c>
 8008de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008de8:	2000      	movs	r0, #0
 8008dea:	495a      	ldr	r1, [pc, #360]	@ (8008f54 <_dtoa_r+0x704>)
 8008dec:	f7f7 f9bc 	bl	8000168 <__aeabi_dsub>
 8008df0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008df4:	f7f7 fde2 	bl	80009bc <__aeabi_dcmplt>
 8008df8:	2800      	cmp	r0, #0
 8008dfa:	f040 8087 	bne.w	8008f0c <_dtoa_r+0x6bc>
 8008dfe:	42a6      	cmp	r6, r4
 8008e00:	f43f af43 	beq.w	8008c8a <_dtoa_r+0x43a>
 8008e04:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e08:	2200      	movs	r2, #0
 8008e0a:	4b53      	ldr	r3, [pc, #332]	@ (8008f58 <_dtoa_r+0x708>)
 8008e0c:	f7f7 fb64 	bl	80004d8 <__aeabi_dmul>
 8008e10:	2200      	movs	r2, #0
 8008e12:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e1a:	4b4f      	ldr	r3, [pc, #316]	@ (8008f58 <_dtoa_r+0x708>)
 8008e1c:	f7f7 fb5c 	bl	80004d8 <__aeabi_dmul>
 8008e20:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e24:	e7c4      	b.n	8008db0 <_dtoa_r+0x560>
 8008e26:	4631      	mov	r1, r6
 8008e28:	4628      	mov	r0, r5
 8008e2a:	f7f7 fb55 	bl	80004d8 <__aeabi_dmul>
 8008e2e:	4656      	mov	r6, sl
 8008e30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e34:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008e36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e3a:	f7f7 fdfd 	bl	8000a38 <__aeabi_d2iz>
 8008e3e:	4605      	mov	r5, r0
 8008e40:	f7f7 fae0 	bl	8000404 <__aeabi_i2d>
 8008e44:	4602      	mov	r2, r0
 8008e46:	460b      	mov	r3, r1
 8008e48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e4c:	f7f7 f98c 	bl	8000168 <__aeabi_dsub>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	3530      	adds	r5, #48	@ 0x30
 8008e56:	f806 5b01 	strb.w	r5, [r6], #1
 8008e5a:	42a6      	cmp	r6, r4
 8008e5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e60:	f04f 0200 	mov.w	r2, #0
 8008e64:	d124      	bne.n	8008eb0 <_dtoa_r+0x660>
 8008e66:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e6a:	4b39      	ldr	r3, [pc, #228]	@ (8008f50 <_dtoa_r+0x700>)
 8008e6c:	f7f7 f97e 	bl	800016c <__adddf3>
 8008e70:	4602      	mov	r2, r0
 8008e72:	460b      	mov	r3, r1
 8008e74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e78:	f7f7 fdbe 	bl	80009f8 <__aeabi_dcmpgt>
 8008e7c:	2800      	cmp	r0, #0
 8008e7e:	d145      	bne.n	8008f0c <_dtoa_r+0x6bc>
 8008e80:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e84:	2000      	movs	r0, #0
 8008e86:	4932      	ldr	r1, [pc, #200]	@ (8008f50 <_dtoa_r+0x700>)
 8008e88:	f7f7 f96e 	bl	8000168 <__aeabi_dsub>
 8008e8c:	4602      	mov	r2, r0
 8008e8e:	460b      	mov	r3, r1
 8008e90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e94:	f7f7 fd92 	bl	80009bc <__aeabi_dcmplt>
 8008e98:	2800      	cmp	r0, #0
 8008e9a:	f43f aef6 	beq.w	8008c8a <_dtoa_r+0x43a>
 8008e9e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008ea0:	1e73      	subs	r3, r6, #1
 8008ea2:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008ea4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008ea8:	2b30      	cmp	r3, #48	@ 0x30
 8008eaa:	d0f8      	beq.n	8008e9e <_dtoa_r+0x64e>
 8008eac:	9f04      	ldr	r7, [sp, #16]
 8008eae:	e73f      	b.n	8008d30 <_dtoa_r+0x4e0>
 8008eb0:	4b29      	ldr	r3, [pc, #164]	@ (8008f58 <_dtoa_r+0x708>)
 8008eb2:	f7f7 fb11 	bl	80004d8 <__aeabi_dmul>
 8008eb6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008eba:	e7bc      	b.n	8008e36 <_dtoa_r+0x5e6>
 8008ebc:	d10c      	bne.n	8008ed8 <_dtoa_r+0x688>
 8008ebe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	4b25      	ldr	r3, [pc, #148]	@ (8008f5c <_dtoa_r+0x70c>)
 8008ec6:	f7f7 fb07 	bl	80004d8 <__aeabi_dmul>
 8008eca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ece:	f7f7 fd89 	bl	80009e4 <__aeabi_dcmpge>
 8008ed2:	2800      	cmp	r0, #0
 8008ed4:	f000 815b 	beq.w	800918e <_dtoa_r+0x93e>
 8008ed8:	2400      	movs	r4, #0
 8008eda:	4625      	mov	r5, r4
 8008edc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ede:	4656      	mov	r6, sl
 8008ee0:	43db      	mvns	r3, r3
 8008ee2:	9304      	str	r3, [sp, #16]
 8008ee4:	2700      	movs	r7, #0
 8008ee6:	4621      	mov	r1, r4
 8008ee8:	4658      	mov	r0, fp
 8008eea:	f000 fb01 	bl	80094f0 <_Bfree>
 8008eee:	2d00      	cmp	r5, #0
 8008ef0:	d0dc      	beq.n	8008eac <_dtoa_r+0x65c>
 8008ef2:	b12f      	cbz	r7, 8008f00 <_dtoa_r+0x6b0>
 8008ef4:	42af      	cmp	r7, r5
 8008ef6:	d003      	beq.n	8008f00 <_dtoa_r+0x6b0>
 8008ef8:	4639      	mov	r1, r7
 8008efa:	4658      	mov	r0, fp
 8008efc:	f000 faf8 	bl	80094f0 <_Bfree>
 8008f00:	4629      	mov	r1, r5
 8008f02:	4658      	mov	r0, fp
 8008f04:	f000 faf4 	bl	80094f0 <_Bfree>
 8008f08:	e7d0      	b.n	8008eac <_dtoa_r+0x65c>
 8008f0a:	9704      	str	r7, [sp, #16]
 8008f0c:	4633      	mov	r3, r6
 8008f0e:	461e      	mov	r6, r3
 8008f10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008f14:	2a39      	cmp	r2, #57	@ 0x39
 8008f16:	d107      	bne.n	8008f28 <_dtoa_r+0x6d8>
 8008f18:	459a      	cmp	sl, r3
 8008f1a:	d1f8      	bne.n	8008f0e <_dtoa_r+0x6be>
 8008f1c:	9a04      	ldr	r2, [sp, #16]
 8008f1e:	3201      	adds	r2, #1
 8008f20:	9204      	str	r2, [sp, #16]
 8008f22:	2230      	movs	r2, #48	@ 0x30
 8008f24:	f88a 2000 	strb.w	r2, [sl]
 8008f28:	781a      	ldrb	r2, [r3, #0]
 8008f2a:	3201      	adds	r2, #1
 8008f2c:	701a      	strb	r2, [r3, #0]
 8008f2e:	e7bd      	b.n	8008eac <_dtoa_r+0x65c>
 8008f30:	2200      	movs	r2, #0
 8008f32:	4b09      	ldr	r3, [pc, #36]	@ (8008f58 <_dtoa_r+0x708>)
 8008f34:	f7f7 fad0 	bl	80004d8 <__aeabi_dmul>
 8008f38:	2200      	movs	r2, #0
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4604      	mov	r4, r0
 8008f3e:	460d      	mov	r5, r1
 8008f40:	f7f7 fd32 	bl	80009a8 <__aeabi_dcmpeq>
 8008f44:	2800      	cmp	r0, #0
 8008f46:	f43f aebc 	beq.w	8008cc2 <_dtoa_r+0x472>
 8008f4a:	e6f1      	b.n	8008d30 <_dtoa_r+0x4e0>
 8008f4c:	0800a0a0 	.word	0x0800a0a0
 8008f50:	3fe00000 	.word	0x3fe00000
 8008f54:	3ff00000 	.word	0x3ff00000
 8008f58:	40240000 	.word	0x40240000
 8008f5c:	40140000 	.word	0x40140000
 8008f60:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f62:	2a00      	cmp	r2, #0
 8008f64:	f000 80db 	beq.w	800911e <_dtoa_r+0x8ce>
 8008f68:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f6a:	2a01      	cmp	r2, #1
 8008f6c:	f300 80bf 	bgt.w	80090ee <_dtoa_r+0x89e>
 8008f70:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008f72:	2a00      	cmp	r2, #0
 8008f74:	f000 80b7 	beq.w	80090e6 <_dtoa_r+0x896>
 8008f78:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f7c:	4646      	mov	r6, r8
 8008f7e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f80:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f82:	2101      	movs	r1, #1
 8008f84:	441a      	add	r2, r3
 8008f86:	4658      	mov	r0, fp
 8008f88:	4498      	add	r8, r3
 8008f8a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f8c:	f000 fb64 	bl	8009658 <__i2b>
 8008f90:	4605      	mov	r5, r0
 8008f92:	b15e      	cbz	r6, 8008fac <_dtoa_r+0x75c>
 8008f94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	dd08      	ble.n	8008fac <_dtoa_r+0x75c>
 8008f9a:	42b3      	cmp	r3, r6
 8008f9c:	bfa8      	it	ge
 8008f9e:	4633      	movge	r3, r6
 8008fa0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008fa2:	eba8 0803 	sub.w	r8, r8, r3
 8008fa6:	1af6      	subs	r6, r6, r3
 8008fa8:	1ad3      	subs	r3, r2, r3
 8008faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fae:	b1f3      	cbz	r3, 8008fee <_dtoa_r+0x79e>
 8008fb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	f000 80b7 	beq.w	8009126 <_dtoa_r+0x8d6>
 8008fb8:	b18c      	cbz	r4, 8008fde <_dtoa_r+0x78e>
 8008fba:	4629      	mov	r1, r5
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	4658      	mov	r0, fp
 8008fc0:	f000 fc08 	bl	80097d4 <__pow5mult>
 8008fc4:	464a      	mov	r2, r9
 8008fc6:	4601      	mov	r1, r0
 8008fc8:	4605      	mov	r5, r0
 8008fca:	4658      	mov	r0, fp
 8008fcc:	f000 fb5a 	bl	8009684 <__multiply>
 8008fd0:	4649      	mov	r1, r9
 8008fd2:	9004      	str	r0, [sp, #16]
 8008fd4:	4658      	mov	r0, fp
 8008fd6:	f000 fa8b 	bl	80094f0 <_Bfree>
 8008fda:	9b04      	ldr	r3, [sp, #16]
 8008fdc:	4699      	mov	r9, r3
 8008fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fe0:	1b1a      	subs	r2, r3, r4
 8008fe2:	d004      	beq.n	8008fee <_dtoa_r+0x79e>
 8008fe4:	4649      	mov	r1, r9
 8008fe6:	4658      	mov	r0, fp
 8008fe8:	f000 fbf4 	bl	80097d4 <__pow5mult>
 8008fec:	4681      	mov	r9, r0
 8008fee:	2101      	movs	r1, #1
 8008ff0:	4658      	mov	r0, fp
 8008ff2:	f000 fb31 	bl	8009658 <__i2b>
 8008ff6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ff8:	4604      	mov	r4, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	f000 81c9 	beq.w	8009392 <_dtoa_r+0xb42>
 8009000:	461a      	mov	r2, r3
 8009002:	4601      	mov	r1, r0
 8009004:	4658      	mov	r0, fp
 8009006:	f000 fbe5 	bl	80097d4 <__pow5mult>
 800900a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800900c:	4604      	mov	r4, r0
 800900e:	2b01      	cmp	r3, #1
 8009010:	f300 808f 	bgt.w	8009132 <_dtoa_r+0x8e2>
 8009014:	9b02      	ldr	r3, [sp, #8]
 8009016:	2b00      	cmp	r3, #0
 8009018:	f040 8087 	bne.w	800912a <_dtoa_r+0x8da>
 800901c:	9b03      	ldr	r3, [sp, #12]
 800901e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009022:	2b00      	cmp	r3, #0
 8009024:	f040 8083 	bne.w	800912e <_dtoa_r+0x8de>
 8009028:	9b03      	ldr	r3, [sp, #12]
 800902a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800902e:	0d1b      	lsrs	r3, r3, #20
 8009030:	051b      	lsls	r3, r3, #20
 8009032:	b12b      	cbz	r3, 8009040 <_dtoa_r+0x7f0>
 8009034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009036:	f108 0801 	add.w	r8, r8, #1
 800903a:	3301      	adds	r3, #1
 800903c:	9309      	str	r3, [sp, #36]	@ 0x24
 800903e:	2301      	movs	r3, #1
 8009040:	930a      	str	r3, [sp, #40]	@ 0x28
 8009042:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009044:	2b00      	cmp	r3, #0
 8009046:	f000 81aa 	beq.w	800939e <_dtoa_r+0xb4e>
 800904a:	6923      	ldr	r3, [r4, #16]
 800904c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009050:	6918      	ldr	r0, [r3, #16]
 8009052:	f000 fab5 	bl	80095c0 <__hi0bits>
 8009056:	f1c0 0020 	rsb	r0, r0, #32
 800905a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800905c:	4418      	add	r0, r3
 800905e:	f010 001f 	ands.w	r0, r0, #31
 8009062:	d071      	beq.n	8009148 <_dtoa_r+0x8f8>
 8009064:	f1c0 0320 	rsb	r3, r0, #32
 8009068:	2b04      	cmp	r3, #4
 800906a:	dd65      	ble.n	8009138 <_dtoa_r+0x8e8>
 800906c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800906e:	f1c0 001c 	rsb	r0, r0, #28
 8009072:	4403      	add	r3, r0
 8009074:	4480      	add	r8, r0
 8009076:	4406      	add	r6, r0
 8009078:	9309      	str	r3, [sp, #36]	@ 0x24
 800907a:	f1b8 0f00 	cmp.w	r8, #0
 800907e:	dd05      	ble.n	800908c <_dtoa_r+0x83c>
 8009080:	4649      	mov	r1, r9
 8009082:	4642      	mov	r2, r8
 8009084:	4658      	mov	r0, fp
 8009086:	f000 fbff 	bl	8009888 <__lshift>
 800908a:	4681      	mov	r9, r0
 800908c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800908e:	2b00      	cmp	r3, #0
 8009090:	dd05      	ble.n	800909e <_dtoa_r+0x84e>
 8009092:	4621      	mov	r1, r4
 8009094:	461a      	mov	r2, r3
 8009096:	4658      	mov	r0, fp
 8009098:	f000 fbf6 	bl	8009888 <__lshift>
 800909c:	4604      	mov	r4, r0
 800909e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d053      	beq.n	800914c <_dtoa_r+0x8fc>
 80090a4:	4621      	mov	r1, r4
 80090a6:	4648      	mov	r0, r9
 80090a8:	f000 fc5a 	bl	8009960 <__mcmp>
 80090ac:	2800      	cmp	r0, #0
 80090ae:	da4d      	bge.n	800914c <_dtoa_r+0x8fc>
 80090b0:	1e7b      	subs	r3, r7, #1
 80090b2:	4649      	mov	r1, r9
 80090b4:	9304      	str	r3, [sp, #16]
 80090b6:	220a      	movs	r2, #10
 80090b8:	2300      	movs	r3, #0
 80090ba:	4658      	mov	r0, fp
 80090bc:	f000 fa3a 	bl	8009534 <__multadd>
 80090c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090c2:	4681      	mov	r9, r0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 816c 	beq.w	80093a2 <_dtoa_r+0xb52>
 80090ca:	2300      	movs	r3, #0
 80090cc:	4629      	mov	r1, r5
 80090ce:	220a      	movs	r2, #10
 80090d0:	4658      	mov	r0, fp
 80090d2:	f000 fa2f 	bl	8009534 <__multadd>
 80090d6:	9b08      	ldr	r3, [sp, #32]
 80090d8:	4605      	mov	r5, r0
 80090da:	2b00      	cmp	r3, #0
 80090dc:	dc61      	bgt.n	80091a2 <_dtoa_r+0x952>
 80090de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090e0:	2b02      	cmp	r3, #2
 80090e2:	dc3b      	bgt.n	800915c <_dtoa_r+0x90c>
 80090e4:	e05d      	b.n	80091a2 <_dtoa_r+0x952>
 80090e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090e8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090ec:	e746      	b.n	8008f7c <_dtoa_r+0x72c>
 80090ee:	9b07      	ldr	r3, [sp, #28]
 80090f0:	1e5c      	subs	r4, r3, #1
 80090f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090f4:	42a3      	cmp	r3, r4
 80090f6:	bfbf      	itttt	lt
 80090f8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090fa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80090fc:	1ae3      	sublt	r3, r4, r3
 80090fe:	18d2      	addlt	r2, r2, r3
 8009100:	bfa8      	it	ge
 8009102:	1b1c      	subge	r4, r3, r4
 8009104:	9b07      	ldr	r3, [sp, #28]
 8009106:	bfbe      	ittt	lt
 8009108:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800910a:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800910c:	2400      	movlt	r4, #0
 800910e:	2b00      	cmp	r3, #0
 8009110:	bfb5      	itete	lt
 8009112:	eba8 0603 	sublt.w	r6, r8, r3
 8009116:	4646      	movge	r6, r8
 8009118:	2300      	movlt	r3, #0
 800911a:	9b07      	ldrge	r3, [sp, #28]
 800911c:	e730      	b.n	8008f80 <_dtoa_r+0x730>
 800911e:	4646      	mov	r6, r8
 8009120:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009122:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009124:	e735      	b.n	8008f92 <_dtoa_r+0x742>
 8009126:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009128:	e75c      	b.n	8008fe4 <_dtoa_r+0x794>
 800912a:	2300      	movs	r3, #0
 800912c:	e788      	b.n	8009040 <_dtoa_r+0x7f0>
 800912e:	9b02      	ldr	r3, [sp, #8]
 8009130:	e786      	b.n	8009040 <_dtoa_r+0x7f0>
 8009132:	2300      	movs	r3, #0
 8009134:	930a      	str	r3, [sp, #40]	@ 0x28
 8009136:	e788      	b.n	800904a <_dtoa_r+0x7fa>
 8009138:	d09f      	beq.n	800907a <_dtoa_r+0x82a>
 800913a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800913c:	331c      	adds	r3, #28
 800913e:	441a      	add	r2, r3
 8009140:	4498      	add	r8, r3
 8009142:	441e      	add	r6, r3
 8009144:	9209      	str	r2, [sp, #36]	@ 0x24
 8009146:	e798      	b.n	800907a <_dtoa_r+0x82a>
 8009148:	4603      	mov	r3, r0
 800914a:	e7f6      	b.n	800913a <_dtoa_r+0x8ea>
 800914c:	9b07      	ldr	r3, [sp, #28]
 800914e:	9704      	str	r7, [sp, #16]
 8009150:	2b00      	cmp	r3, #0
 8009152:	dc20      	bgt.n	8009196 <_dtoa_r+0x946>
 8009154:	9308      	str	r3, [sp, #32]
 8009156:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009158:	2b02      	cmp	r3, #2
 800915a:	dd1e      	ble.n	800919a <_dtoa_r+0x94a>
 800915c:	9b08      	ldr	r3, [sp, #32]
 800915e:	2b00      	cmp	r3, #0
 8009160:	f47f aebc 	bne.w	8008edc <_dtoa_r+0x68c>
 8009164:	4621      	mov	r1, r4
 8009166:	2205      	movs	r2, #5
 8009168:	4658      	mov	r0, fp
 800916a:	f000 f9e3 	bl	8009534 <__multadd>
 800916e:	4601      	mov	r1, r0
 8009170:	4604      	mov	r4, r0
 8009172:	4648      	mov	r0, r9
 8009174:	f000 fbf4 	bl	8009960 <__mcmp>
 8009178:	2800      	cmp	r0, #0
 800917a:	f77f aeaf 	ble.w	8008edc <_dtoa_r+0x68c>
 800917e:	2331      	movs	r3, #49	@ 0x31
 8009180:	4656      	mov	r6, sl
 8009182:	f806 3b01 	strb.w	r3, [r6], #1
 8009186:	9b04      	ldr	r3, [sp, #16]
 8009188:	3301      	adds	r3, #1
 800918a:	9304      	str	r3, [sp, #16]
 800918c:	e6aa      	b.n	8008ee4 <_dtoa_r+0x694>
 800918e:	9c07      	ldr	r4, [sp, #28]
 8009190:	9704      	str	r7, [sp, #16]
 8009192:	4625      	mov	r5, r4
 8009194:	e7f3      	b.n	800917e <_dtoa_r+0x92e>
 8009196:	9b07      	ldr	r3, [sp, #28]
 8009198:	9308      	str	r3, [sp, #32]
 800919a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800919c:	2b00      	cmp	r3, #0
 800919e:	f000 8104 	beq.w	80093aa <_dtoa_r+0xb5a>
 80091a2:	2e00      	cmp	r6, #0
 80091a4:	dd05      	ble.n	80091b2 <_dtoa_r+0x962>
 80091a6:	4629      	mov	r1, r5
 80091a8:	4632      	mov	r2, r6
 80091aa:	4658      	mov	r0, fp
 80091ac:	f000 fb6c 	bl	8009888 <__lshift>
 80091b0:	4605      	mov	r5, r0
 80091b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d05a      	beq.n	800926e <_dtoa_r+0xa1e>
 80091b8:	4658      	mov	r0, fp
 80091ba:	6869      	ldr	r1, [r5, #4]
 80091bc:	f000 f958 	bl	8009470 <_Balloc>
 80091c0:	4606      	mov	r6, r0
 80091c2:	b928      	cbnz	r0, 80091d0 <_dtoa_r+0x980>
 80091c4:	4602      	mov	r2, r0
 80091c6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091ca:	4b83      	ldr	r3, [pc, #524]	@ (80093d8 <_dtoa_r+0xb88>)
 80091cc:	f7ff bb54 	b.w	8008878 <_dtoa_r+0x28>
 80091d0:	692a      	ldr	r2, [r5, #16]
 80091d2:	f105 010c 	add.w	r1, r5, #12
 80091d6:	3202      	adds	r2, #2
 80091d8:	0092      	lsls	r2, r2, #2
 80091da:	300c      	adds	r0, #12
 80091dc:	f7ff fa9f 	bl	800871e <memcpy>
 80091e0:	2201      	movs	r2, #1
 80091e2:	4631      	mov	r1, r6
 80091e4:	4658      	mov	r0, fp
 80091e6:	f000 fb4f 	bl	8009888 <__lshift>
 80091ea:	462f      	mov	r7, r5
 80091ec:	4605      	mov	r5, r0
 80091ee:	f10a 0301 	add.w	r3, sl, #1
 80091f2:	9307      	str	r3, [sp, #28]
 80091f4:	9b08      	ldr	r3, [sp, #32]
 80091f6:	4453      	add	r3, sl
 80091f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091fa:	9b02      	ldr	r3, [sp, #8]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	930a      	str	r3, [sp, #40]	@ 0x28
 8009202:	9b07      	ldr	r3, [sp, #28]
 8009204:	4621      	mov	r1, r4
 8009206:	3b01      	subs	r3, #1
 8009208:	4648      	mov	r0, r9
 800920a:	9302      	str	r3, [sp, #8]
 800920c:	f7ff fa95 	bl	800873a <quorem>
 8009210:	4639      	mov	r1, r7
 8009212:	9008      	str	r0, [sp, #32]
 8009214:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009218:	4648      	mov	r0, r9
 800921a:	f000 fba1 	bl	8009960 <__mcmp>
 800921e:	462a      	mov	r2, r5
 8009220:	9009      	str	r0, [sp, #36]	@ 0x24
 8009222:	4621      	mov	r1, r4
 8009224:	4658      	mov	r0, fp
 8009226:	f000 fbb7 	bl	8009998 <__mdiff>
 800922a:	68c2      	ldr	r2, [r0, #12]
 800922c:	4606      	mov	r6, r0
 800922e:	bb02      	cbnz	r2, 8009272 <_dtoa_r+0xa22>
 8009230:	4601      	mov	r1, r0
 8009232:	4648      	mov	r0, r9
 8009234:	f000 fb94 	bl	8009960 <__mcmp>
 8009238:	4602      	mov	r2, r0
 800923a:	4631      	mov	r1, r6
 800923c:	4658      	mov	r0, fp
 800923e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009240:	f000 f956 	bl	80094f0 <_Bfree>
 8009244:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009246:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009248:	9e07      	ldr	r6, [sp, #28]
 800924a:	ea43 0102 	orr.w	r1, r3, r2
 800924e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009250:	4319      	orrs	r1, r3
 8009252:	d110      	bne.n	8009276 <_dtoa_r+0xa26>
 8009254:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009258:	d029      	beq.n	80092ae <_dtoa_r+0xa5e>
 800925a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800925c:	2b00      	cmp	r3, #0
 800925e:	dd02      	ble.n	8009266 <_dtoa_r+0xa16>
 8009260:	9b08      	ldr	r3, [sp, #32]
 8009262:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009266:	9b02      	ldr	r3, [sp, #8]
 8009268:	f883 8000 	strb.w	r8, [r3]
 800926c:	e63b      	b.n	8008ee6 <_dtoa_r+0x696>
 800926e:	4628      	mov	r0, r5
 8009270:	e7bb      	b.n	80091ea <_dtoa_r+0x99a>
 8009272:	2201      	movs	r2, #1
 8009274:	e7e1      	b.n	800923a <_dtoa_r+0x9ea>
 8009276:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009278:	2b00      	cmp	r3, #0
 800927a:	db04      	blt.n	8009286 <_dtoa_r+0xa36>
 800927c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800927e:	430b      	orrs	r3, r1
 8009280:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009282:	430b      	orrs	r3, r1
 8009284:	d120      	bne.n	80092c8 <_dtoa_r+0xa78>
 8009286:	2a00      	cmp	r2, #0
 8009288:	dded      	ble.n	8009266 <_dtoa_r+0xa16>
 800928a:	4649      	mov	r1, r9
 800928c:	2201      	movs	r2, #1
 800928e:	4658      	mov	r0, fp
 8009290:	f000 fafa 	bl	8009888 <__lshift>
 8009294:	4621      	mov	r1, r4
 8009296:	4681      	mov	r9, r0
 8009298:	f000 fb62 	bl	8009960 <__mcmp>
 800929c:	2800      	cmp	r0, #0
 800929e:	dc03      	bgt.n	80092a8 <_dtoa_r+0xa58>
 80092a0:	d1e1      	bne.n	8009266 <_dtoa_r+0xa16>
 80092a2:	f018 0f01 	tst.w	r8, #1
 80092a6:	d0de      	beq.n	8009266 <_dtoa_r+0xa16>
 80092a8:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092ac:	d1d8      	bne.n	8009260 <_dtoa_r+0xa10>
 80092ae:	2339      	movs	r3, #57	@ 0x39
 80092b0:	9a02      	ldr	r2, [sp, #8]
 80092b2:	7013      	strb	r3, [r2, #0]
 80092b4:	4633      	mov	r3, r6
 80092b6:	461e      	mov	r6, r3
 80092b8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092bc:	3b01      	subs	r3, #1
 80092be:	2a39      	cmp	r2, #57	@ 0x39
 80092c0:	d052      	beq.n	8009368 <_dtoa_r+0xb18>
 80092c2:	3201      	adds	r2, #1
 80092c4:	701a      	strb	r2, [r3, #0]
 80092c6:	e60e      	b.n	8008ee6 <_dtoa_r+0x696>
 80092c8:	2a00      	cmp	r2, #0
 80092ca:	dd07      	ble.n	80092dc <_dtoa_r+0xa8c>
 80092cc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092d0:	d0ed      	beq.n	80092ae <_dtoa_r+0xa5e>
 80092d2:	9a02      	ldr	r2, [sp, #8]
 80092d4:	f108 0301 	add.w	r3, r8, #1
 80092d8:	7013      	strb	r3, [r2, #0]
 80092da:	e604      	b.n	8008ee6 <_dtoa_r+0x696>
 80092dc:	9b07      	ldr	r3, [sp, #28]
 80092de:	9a07      	ldr	r2, [sp, #28]
 80092e0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d028      	beq.n	800933c <_dtoa_r+0xaec>
 80092ea:	4649      	mov	r1, r9
 80092ec:	2300      	movs	r3, #0
 80092ee:	220a      	movs	r2, #10
 80092f0:	4658      	mov	r0, fp
 80092f2:	f000 f91f 	bl	8009534 <__multadd>
 80092f6:	42af      	cmp	r7, r5
 80092f8:	4681      	mov	r9, r0
 80092fa:	f04f 0300 	mov.w	r3, #0
 80092fe:	f04f 020a 	mov.w	r2, #10
 8009302:	4639      	mov	r1, r7
 8009304:	4658      	mov	r0, fp
 8009306:	d107      	bne.n	8009318 <_dtoa_r+0xac8>
 8009308:	f000 f914 	bl	8009534 <__multadd>
 800930c:	4607      	mov	r7, r0
 800930e:	4605      	mov	r5, r0
 8009310:	9b07      	ldr	r3, [sp, #28]
 8009312:	3301      	adds	r3, #1
 8009314:	9307      	str	r3, [sp, #28]
 8009316:	e774      	b.n	8009202 <_dtoa_r+0x9b2>
 8009318:	f000 f90c 	bl	8009534 <__multadd>
 800931c:	4629      	mov	r1, r5
 800931e:	4607      	mov	r7, r0
 8009320:	2300      	movs	r3, #0
 8009322:	220a      	movs	r2, #10
 8009324:	4658      	mov	r0, fp
 8009326:	f000 f905 	bl	8009534 <__multadd>
 800932a:	4605      	mov	r5, r0
 800932c:	e7f0      	b.n	8009310 <_dtoa_r+0xac0>
 800932e:	9b08      	ldr	r3, [sp, #32]
 8009330:	2700      	movs	r7, #0
 8009332:	2b00      	cmp	r3, #0
 8009334:	bfcc      	ite	gt
 8009336:	461e      	movgt	r6, r3
 8009338:	2601      	movle	r6, #1
 800933a:	4456      	add	r6, sl
 800933c:	4649      	mov	r1, r9
 800933e:	2201      	movs	r2, #1
 8009340:	4658      	mov	r0, fp
 8009342:	f000 faa1 	bl	8009888 <__lshift>
 8009346:	4621      	mov	r1, r4
 8009348:	4681      	mov	r9, r0
 800934a:	f000 fb09 	bl	8009960 <__mcmp>
 800934e:	2800      	cmp	r0, #0
 8009350:	dcb0      	bgt.n	80092b4 <_dtoa_r+0xa64>
 8009352:	d102      	bne.n	800935a <_dtoa_r+0xb0a>
 8009354:	f018 0f01 	tst.w	r8, #1
 8009358:	d1ac      	bne.n	80092b4 <_dtoa_r+0xa64>
 800935a:	4633      	mov	r3, r6
 800935c:	461e      	mov	r6, r3
 800935e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009362:	2a30      	cmp	r2, #48	@ 0x30
 8009364:	d0fa      	beq.n	800935c <_dtoa_r+0xb0c>
 8009366:	e5be      	b.n	8008ee6 <_dtoa_r+0x696>
 8009368:	459a      	cmp	sl, r3
 800936a:	d1a4      	bne.n	80092b6 <_dtoa_r+0xa66>
 800936c:	9b04      	ldr	r3, [sp, #16]
 800936e:	3301      	adds	r3, #1
 8009370:	9304      	str	r3, [sp, #16]
 8009372:	2331      	movs	r3, #49	@ 0x31
 8009374:	f88a 3000 	strb.w	r3, [sl]
 8009378:	e5b5      	b.n	8008ee6 <_dtoa_r+0x696>
 800937a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800937c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093dc <_dtoa_r+0xb8c>
 8009380:	b11b      	cbz	r3, 800938a <_dtoa_r+0xb3a>
 8009382:	f10a 0308 	add.w	r3, sl, #8
 8009386:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009388:	6013      	str	r3, [r2, #0]
 800938a:	4650      	mov	r0, sl
 800938c:	b017      	add	sp, #92	@ 0x5c
 800938e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009392:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009394:	2b01      	cmp	r3, #1
 8009396:	f77f ae3d 	ble.w	8009014 <_dtoa_r+0x7c4>
 800939a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800939c:	930a      	str	r3, [sp, #40]	@ 0x28
 800939e:	2001      	movs	r0, #1
 80093a0:	e65b      	b.n	800905a <_dtoa_r+0x80a>
 80093a2:	9b08      	ldr	r3, [sp, #32]
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f77f aed6 	ble.w	8009156 <_dtoa_r+0x906>
 80093aa:	4656      	mov	r6, sl
 80093ac:	4621      	mov	r1, r4
 80093ae:	4648      	mov	r0, r9
 80093b0:	f7ff f9c3 	bl	800873a <quorem>
 80093b4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093b8:	9b08      	ldr	r3, [sp, #32]
 80093ba:	f806 8b01 	strb.w	r8, [r6], #1
 80093be:	eba6 020a 	sub.w	r2, r6, sl
 80093c2:	4293      	cmp	r3, r2
 80093c4:	ddb3      	ble.n	800932e <_dtoa_r+0xade>
 80093c6:	4649      	mov	r1, r9
 80093c8:	2300      	movs	r3, #0
 80093ca:	220a      	movs	r2, #10
 80093cc:	4658      	mov	r0, fp
 80093ce:	f000 f8b1 	bl	8009534 <__multadd>
 80093d2:	4681      	mov	r9, r0
 80093d4:	e7ea      	b.n	80093ac <_dtoa_r+0xb5c>
 80093d6:	bf00      	nop
 80093d8:	0800a001 	.word	0x0800a001
 80093dc:	08009f85 	.word	0x08009f85

080093e0 <_free_r>:
 80093e0:	b538      	push	{r3, r4, r5, lr}
 80093e2:	4605      	mov	r5, r0
 80093e4:	2900      	cmp	r1, #0
 80093e6:	d040      	beq.n	800946a <_free_r+0x8a>
 80093e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093ec:	1f0c      	subs	r4, r1, #4
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	bfb8      	it	lt
 80093f2:	18e4      	addlt	r4, r4, r3
 80093f4:	f7fe f89c 	bl	8007530 <__malloc_lock>
 80093f8:	4a1c      	ldr	r2, [pc, #112]	@ (800946c <_free_r+0x8c>)
 80093fa:	6813      	ldr	r3, [r2, #0]
 80093fc:	b933      	cbnz	r3, 800940c <_free_r+0x2c>
 80093fe:	6063      	str	r3, [r4, #4]
 8009400:	6014      	str	r4, [r2, #0]
 8009402:	4628      	mov	r0, r5
 8009404:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009408:	f7fe b898 	b.w	800753c <__malloc_unlock>
 800940c:	42a3      	cmp	r3, r4
 800940e:	d908      	bls.n	8009422 <_free_r+0x42>
 8009410:	6820      	ldr	r0, [r4, #0]
 8009412:	1821      	adds	r1, r4, r0
 8009414:	428b      	cmp	r3, r1
 8009416:	bf01      	itttt	eq
 8009418:	6819      	ldreq	r1, [r3, #0]
 800941a:	685b      	ldreq	r3, [r3, #4]
 800941c:	1809      	addeq	r1, r1, r0
 800941e:	6021      	streq	r1, [r4, #0]
 8009420:	e7ed      	b.n	80093fe <_free_r+0x1e>
 8009422:	461a      	mov	r2, r3
 8009424:	685b      	ldr	r3, [r3, #4]
 8009426:	b10b      	cbz	r3, 800942c <_free_r+0x4c>
 8009428:	42a3      	cmp	r3, r4
 800942a:	d9fa      	bls.n	8009422 <_free_r+0x42>
 800942c:	6811      	ldr	r1, [r2, #0]
 800942e:	1850      	adds	r0, r2, r1
 8009430:	42a0      	cmp	r0, r4
 8009432:	d10b      	bne.n	800944c <_free_r+0x6c>
 8009434:	6820      	ldr	r0, [r4, #0]
 8009436:	4401      	add	r1, r0
 8009438:	1850      	adds	r0, r2, r1
 800943a:	4283      	cmp	r3, r0
 800943c:	6011      	str	r1, [r2, #0]
 800943e:	d1e0      	bne.n	8009402 <_free_r+0x22>
 8009440:	6818      	ldr	r0, [r3, #0]
 8009442:	685b      	ldr	r3, [r3, #4]
 8009444:	4408      	add	r0, r1
 8009446:	6010      	str	r0, [r2, #0]
 8009448:	6053      	str	r3, [r2, #4]
 800944a:	e7da      	b.n	8009402 <_free_r+0x22>
 800944c:	d902      	bls.n	8009454 <_free_r+0x74>
 800944e:	230c      	movs	r3, #12
 8009450:	602b      	str	r3, [r5, #0]
 8009452:	e7d6      	b.n	8009402 <_free_r+0x22>
 8009454:	6820      	ldr	r0, [r4, #0]
 8009456:	1821      	adds	r1, r4, r0
 8009458:	428b      	cmp	r3, r1
 800945a:	bf01      	itttt	eq
 800945c:	6819      	ldreq	r1, [r3, #0]
 800945e:	685b      	ldreq	r3, [r3, #4]
 8009460:	1809      	addeq	r1, r1, r0
 8009462:	6021      	streq	r1, [r4, #0]
 8009464:	6063      	str	r3, [r4, #4]
 8009466:	6054      	str	r4, [r2, #4]
 8009468:	e7cb      	b.n	8009402 <_free_r+0x22>
 800946a:	bd38      	pop	{r3, r4, r5, pc}
 800946c:	20000370 	.word	0x20000370

08009470 <_Balloc>:
 8009470:	b570      	push	{r4, r5, r6, lr}
 8009472:	69c6      	ldr	r6, [r0, #28]
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	b976      	cbnz	r6, 8009498 <_Balloc+0x28>
 800947a:	2010      	movs	r0, #16
 800947c:	f7fd ffa6 	bl	80073cc <malloc>
 8009480:	4602      	mov	r2, r0
 8009482:	61e0      	str	r0, [r4, #28]
 8009484:	b920      	cbnz	r0, 8009490 <_Balloc+0x20>
 8009486:	216b      	movs	r1, #107	@ 0x6b
 8009488:	4b17      	ldr	r3, [pc, #92]	@ (80094e8 <_Balloc+0x78>)
 800948a:	4818      	ldr	r0, [pc, #96]	@ (80094ec <_Balloc+0x7c>)
 800948c:	f7fd ff64 	bl	8007358 <__assert_func>
 8009490:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009494:	6006      	str	r6, [r0, #0]
 8009496:	60c6      	str	r6, [r0, #12]
 8009498:	69e6      	ldr	r6, [r4, #28]
 800949a:	68f3      	ldr	r3, [r6, #12]
 800949c:	b183      	cbz	r3, 80094c0 <_Balloc+0x50>
 800949e:	69e3      	ldr	r3, [r4, #28]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80094a6:	b9b8      	cbnz	r0, 80094d8 <_Balloc+0x68>
 80094a8:	2101      	movs	r1, #1
 80094aa:	fa01 f605 	lsl.w	r6, r1, r5
 80094ae:	1d72      	adds	r2, r6, #5
 80094b0:	4620      	mov	r0, r4
 80094b2:	0092      	lsls	r2, r2, #2
 80094b4:	f7fd ff76 	bl	80073a4 <_calloc_r>
 80094b8:	b160      	cbz	r0, 80094d4 <_Balloc+0x64>
 80094ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80094be:	e00e      	b.n	80094de <_Balloc+0x6e>
 80094c0:	2221      	movs	r2, #33	@ 0x21
 80094c2:	2104      	movs	r1, #4
 80094c4:	4620      	mov	r0, r4
 80094c6:	f7fd ff6d 	bl	80073a4 <_calloc_r>
 80094ca:	69e3      	ldr	r3, [r4, #28]
 80094cc:	60f0      	str	r0, [r6, #12]
 80094ce:	68db      	ldr	r3, [r3, #12]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1e4      	bne.n	800949e <_Balloc+0x2e>
 80094d4:	2000      	movs	r0, #0
 80094d6:	bd70      	pop	{r4, r5, r6, pc}
 80094d8:	6802      	ldr	r2, [r0, #0]
 80094da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80094de:	2300      	movs	r3, #0
 80094e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80094e4:	e7f7      	b.n	80094d6 <_Balloc+0x66>
 80094e6:	bf00      	nop
 80094e8:	08009f92 	.word	0x08009f92
 80094ec:	0800a012 	.word	0x0800a012

080094f0 <_Bfree>:
 80094f0:	b570      	push	{r4, r5, r6, lr}
 80094f2:	69c6      	ldr	r6, [r0, #28]
 80094f4:	4605      	mov	r5, r0
 80094f6:	460c      	mov	r4, r1
 80094f8:	b976      	cbnz	r6, 8009518 <_Bfree+0x28>
 80094fa:	2010      	movs	r0, #16
 80094fc:	f7fd ff66 	bl	80073cc <malloc>
 8009500:	4602      	mov	r2, r0
 8009502:	61e8      	str	r0, [r5, #28]
 8009504:	b920      	cbnz	r0, 8009510 <_Bfree+0x20>
 8009506:	218f      	movs	r1, #143	@ 0x8f
 8009508:	4b08      	ldr	r3, [pc, #32]	@ (800952c <_Bfree+0x3c>)
 800950a:	4809      	ldr	r0, [pc, #36]	@ (8009530 <_Bfree+0x40>)
 800950c:	f7fd ff24 	bl	8007358 <__assert_func>
 8009510:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009514:	6006      	str	r6, [r0, #0]
 8009516:	60c6      	str	r6, [r0, #12]
 8009518:	b13c      	cbz	r4, 800952a <_Bfree+0x3a>
 800951a:	69eb      	ldr	r3, [r5, #28]
 800951c:	6862      	ldr	r2, [r4, #4]
 800951e:	68db      	ldr	r3, [r3, #12]
 8009520:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009524:	6021      	str	r1, [r4, #0]
 8009526:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800952a:	bd70      	pop	{r4, r5, r6, pc}
 800952c:	08009f92 	.word	0x08009f92
 8009530:	0800a012 	.word	0x0800a012

08009534 <__multadd>:
 8009534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009538:	4607      	mov	r7, r0
 800953a:	460c      	mov	r4, r1
 800953c:	461e      	mov	r6, r3
 800953e:	2000      	movs	r0, #0
 8009540:	690d      	ldr	r5, [r1, #16]
 8009542:	f101 0c14 	add.w	ip, r1, #20
 8009546:	f8dc 3000 	ldr.w	r3, [ip]
 800954a:	3001      	adds	r0, #1
 800954c:	b299      	uxth	r1, r3
 800954e:	fb02 6101 	mla	r1, r2, r1, r6
 8009552:	0c1e      	lsrs	r6, r3, #16
 8009554:	0c0b      	lsrs	r3, r1, #16
 8009556:	fb02 3306 	mla	r3, r2, r6, r3
 800955a:	b289      	uxth	r1, r1
 800955c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009560:	4285      	cmp	r5, r0
 8009562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009566:	f84c 1b04 	str.w	r1, [ip], #4
 800956a:	dcec      	bgt.n	8009546 <__multadd+0x12>
 800956c:	b30e      	cbz	r6, 80095b2 <__multadd+0x7e>
 800956e:	68a3      	ldr	r3, [r4, #8]
 8009570:	42ab      	cmp	r3, r5
 8009572:	dc19      	bgt.n	80095a8 <__multadd+0x74>
 8009574:	6861      	ldr	r1, [r4, #4]
 8009576:	4638      	mov	r0, r7
 8009578:	3101      	adds	r1, #1
 800957a:	f7ff ff79 	bl	8009470 <_Balloc>
 800957e:	4680      	mov	r8, r0
 8009580:	b928      	cbnz	r0, 800958e <__multadd+0x5a>
 8009582:	4602      	mov	r2, r0
 8009584:	21ba      	movs	r1, #186	@ 0xba
 8009586:	4b0c      	ldr	r3, [pc, #48]	@ (80095b8 <__multadd+0x84>)
 8009588:	480c      	ldr	r0, [pc, #48]	@ (80095bc <__multadd+0x88>)
 800958a:	f7fd fee5 	bl	8007358 <__assert_func>
 800958e:	6922      	ldr	r2, [r4, #16]
 8009590:	f104 010c 	add.w	r1, r4, #12
 8009594:	3202      	adds	r2, #2
 8009596:	0092      	lsls	r2, r2, #2
 8009598:	300c      	adds	r0, #12
 800959a:	f7ff f8c0 	bl	800871e <memcpy>
 800959e:	4621      	mov	r1, r4
 80095a0:	4638      	mov	r0, r7
 80095a2:	f7ff ffa5 	bl	80094f0 <_Bfree>
 80095a6:	4644      	mov	r4, r8
 80095a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80095ac:	3501      	adds	r5, #1
 80095ae:	615e      	str	r6, [r3, #20]
 80095b0:	6125      	str	r5, [r4, #16]
 80095b2:	4620      	mov	r0, r4
 80095b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80095b8:	0800a001 	.word	0x0800a001
 80095bc:	0800a012 	.word	0x0800a012

080095c0 <__hi0bits>:
 80095c0:	4603      	mov	r3, r0
 80095c2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80095c6:	bf3a      	itte	cc
 80095c8:	0403      	lslcc	r3, r0, #16
 80095ca:	2010      	movcc	r0, #16
 80095cc:	2000      	movcs	r0, #0
 80095ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80095d2:	bf3c      	itt	cc
 80095d4:	021b      	lslcc	r3, r3, #8
 80095d6:	3008      	addcc	r0, #8
 80095d8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80095dc:	bf3c      	itt	cc
 80095de:	011b      	lslcc	r3, r3, #4
 80095e0:	3004      	addcc	r0, #4
 80095e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80095e6:	bf3c      	itt	cc
 80095e8:	009b      	lslcc	r3, r3, #2
 80095ea:	3002      	addcc	r0, #2
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	db05      	blt.n	80095fc <__hi0bits+0x3c>
 80095f0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80095f4:	f100 0001 	add.w	r0, r0, #1
 80095f8:	bf08      	it	eq
 80095fa:	2020      	moveq	r0, #32
 80095fc:	4770      	bx	lr

080095fe <__lo0bits>:
 80095fe:	6803      	ldr	r3, [r0, #0]
 8009600:	4602      	mov	r2, r0
 8009602:	f013 0007 	ands.w	r0, r3, #7
 8009606:	d00b      	beq.n	8009620 <__lo0bits+0x22>
 8009608:	07d9      	lsls	r1, r3, #31
 800960a:	d421      	bmi.n	8009650 <__lo0bits+0x52>
 800960c:	0798      	lsls	r0, r3, #30
 800960e:	bf49      	itett	mi
 8009610:	085b      	lsrmi	r3, r3, #1
 8009612:	089b      	lsrpl	r3, r3, #2
 8009614:	2001      	movmi	r0, #1
 8009616:	6013      	strmi	r3, [r2, #0]
 8009618:	bf5c      	itt	pl
 800961a:	2002      	movpl	r0, #2
 800961c:	6013      	strpl	r3, [r2, #0]
 800961e:	4770      	bx	lr
 8009620:	b299      	uxth	r1, r3
 8009622:	b909      	cbnz	r1, 8009628 <__lo0bits+0x2a>
 8009624:	2010      	movs	r0, #16
 8009626:	0c1b      	lsrs	r3, r3, #16
 8009628:	b2d9      	uxtb	r1, r3
 800962a:	b909      	cbnz	r1, 8009630 <__lo0bits+0x32>
 800962c:	3008      	adds	r0, #8
 800962e:	0a1b      	lsrs	r3, r3, #8
 8009630:	0719      	lsls	r1, r3, #28
 8009632:	bf04      	itt	eq
 8009634:	091b      	lsreq	r3, r3, #4
 8009636:	3004      	addeq	r0, #4
 8009638:	0799      	lsls	r1, r3, #30
 800963a:	bf04      	itt	eq
 800963c:	089b      	lsreq	r3, r3, #2
 800963e:	3002      	addeq	r0, #2
 8009640:	07d9      	lsls	r1, r3, #31
 8009642:	d403      	bmi.n	800964c <__lo0bits+0x4e>
 8009644:	085b      	lsrs	r3, r3, #1
 8009646:	f100 0001 	add.w	r0, r0, #1
 800964a:	d003      	beq.n	8009654 <__lo0bits+0x56>
 800964c:	6013      	str	r3, [r2, #0]
 800964e:	4770      	bx	lr
 8009650:	2000      	movs	r0, #0
 8009652:	4770      	bx	lr
 8009654:	2020      	movs	r0, #32
 8009656:	4770      	bx	lr

08009658 <__i2b>:
 8009658:	b510      	push	{r4, lr}
 800965a:	460c      	mov	r4, r1
 800965c:	2101      	movs	r1, #1
 800965e:	f7ff ff07 	bl	8009470 <_Balloc>
 8009662:	4602      	mov	r2, r0
 8009664:	b928      	cbnz	r0, 8009672 <__i2b+0x1a>
 8009666:	f240 1145 	movw	r1, #325	@ 0x145
 800966a:	4b04      	ldr	r3, [pc, #16]	@ (800967c <__i2b+0x24>)
 800966c:	4804      	ldr	r0, [pc, #16]	@ (8009680 <__i2b+0x28>)
 800966e:	f7fd fe73 	bl	8007358 <__assert_func>
 8009672:	2301      	movs	r3, #1
 8009674:	6144      	str	r4, [r0, #20]
 8009676:	6103      	str	r3, [r0, #16]
 8009678:	bd10      	pop	{r4, pc}
 800967a:	bf00      	nop
 800967c:	0800a001 	.word	0x0800a001
 8009680:	0800a012 	.word	0x0800a012

08009684 <__multiply>:
 8009684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009688:	4614      	mov	r4, r2
 800968a:	690a      	ldr	r2, [r1, #16]
 800968c:	6923      	ldr	r3, [r4, #16]
 800968e:	460f      	mov	r7, r1
 8009690:	429a      	cmp	r2, r3
 8009692:	bfa2      	ittt	ge
 8009694:	4623      	movge	r3, r4
 8009696:	460c      	movge	r4, r1
 8009698:	461f      	movge	r7, r3
 800969a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800969e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80096a2:	68a3      	ldr	r3, [r4, #8]
 80096a4:	6861      	ldr	r1, [r4, #4]
 80096a6:	eb0a 0609 	add.w	r6, sl, r9
 80096aa:	42b3      	cmp	r3, r6
 80096ac:	b085      	sub	sp, #20
 80096ae:	bfb8      	it	lt
 80096b0:	3101      	addlt	r1, #1
 80096b2:	f7ff fedd 	bl	8009470 <_Balloc>
 80096b6:	b930      	cbnz	r0, 80096c6 <__multiply+0x42>
 80096b8:	4602      	mov	r2, r0
 80096ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80096be:	4b43      	ldr	r3, [pc, #268]	@ (80097cc <__multiply+0x148>)
 80096c0:	4843      	ldr	r0, [pc, #268]	@ (80097d0 <__multiply+0x14c>)
 80096c2:	f7fd fe49 	bl	8007358 <__assert_func>
 80096c6:	f100 0514 	add.w	r5, r0, #20
 80096ca:	462b      	mov	r3, r5
 80096cc:	2200      	movs	r2, #0
 80096ce:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80096d2:	4543      	cmp	r3, r8
 80096d4:	d321      	bcc.n	800971a <__multiply+0x96>
 80096d6:	f107 0114 	add.w	r1, r7, #20
 80096da:	f104 0214 	add.w	r2, r4, #20
 80096de:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80096e2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80096e6:	9302      	str	r3, [sp, #8]
 80096e8:	1b13      	subs	r3, r2, r4
 80096ea:	3b15      	subs	r3, #21
 80096ec:	f023 0303 	bic.w	r3, r3, #3
 80096f0:	3304      	adds	r3, #4
 80096f2:	f104 0715 	add.w	r7, r4, #21
 80096f6:	42ba      	cmp	r2, r7
 80096f8:	bf38      	it	cc
 80096fa:	2304      	movcc	r3, #4
 80096fc:	9301      	str	r3, [sp, #4]
 80096fe:	9b02      	ldr	r3, [sp, #8]
 8009700:	9103      	str	r1, [sp, #12]
 8009702:	428b      	cmp	r3, r1
 8009704:	d80c      	bhi.n	8009720 <__multiply+0x9c>
 8009706:	2e00      	cmp	r6, #0
 8009708:	dd03      	ble.n	8009712 <__multiply+0x8e>
 800970a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800970e:	2b00      	cmp	r3, #0
 8009710:	d05a      	beq.n	80097c8 <__multiply+0x144>
 8009712:	6106      	str	r6, [r0, #16]
 8009714:	b005      	add	sp, #20
 8009716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971a:	f843 2b04 	str.w	r2, [r3], #4
 800971e:	e7d8      	b.n	80096d2 <__multiply+0x4e>
 8009720:	f8b1 a000 	ldrh.w	sl, [r1]
 8009724:	f1ba 0f00 	cmp.w	sl, #0
 8009728:	d023      	beq.n	8009772 <__multiply+0xee>
 800972a:	46a9      	mov	r9, r5
 800972c:	f04f 0c00 	mov.w	ip, #0
 8009730:	f104 0e14 	add.w	lr, r4, #20
 8009734:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009738:	f8d9 3000 	ldr.w	r3, [r9]
 800973c:	fa1f fb87 	uxth.w	fp, r7
 8009740:	b29b      	uxth	r3, r3
 8009742:	fb0a 330b 	mla	r3, sl, fp, r3
 8009746:	4463      	add	r3, ip
 8009748:	f8d9 c000 	ldr.w	ip, [r9]
 800974c:	0c3f      	lsrs	r7, r7, #16
 800974e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8009752:	fb0a c707 	mla	r7, sl, r7, ip
 8009756:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800975a:	b29b      	uxth	r3, r3
 800975c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009760:	4572      	cmp	r2, lr
 8009762:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009766:	f849 3b04 	str.w	r3, [r9], #4
 800976a:	d8e3      	bhi.n	8009734 <__multiply+0xb0>
 800976c:	9b01      	ldr	r3, [sp, #4]
 800976e:	f845 c003 	str.w	ip, [r5, r3]
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	3104      	adds	r1, #4
 8009776:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800977a:	f1b9 0f00 	cmp.w	r9, #0
 800977e:	d021      	beq.n	80097c4 <__multiply+0x140>
 8009780:	46ae      	mov	lr, r5
 8009782:	f04f 0a00 	mov.w	sl, #0
 8009786:	682b      	ldr	r3, [r5, #0]
 8009788:	f104 0c14 	add.w	ip, r4, #20
 800978c:	f8bc b000 	ldrh.w	fp, [ip]
 8009790:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8009794:	b29b      	uxth	r3, r3
 8009796:	fb09 770b 	mla	r7, r9, fp, r7
 800979a:	4457      	add	r7, sl
 800979c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80097a0:	f84e 3b04 	str.w	r3, [lr], #4
 80097a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80097a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097ac:	f8be 3000 	ldrh.w	r3, [lr]
 80097b0:	4562      	cmp	r2, ip
 80097b2:	fb09 330a 	mla	r3, r9, sl, r3
 80097b6:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80097ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80097be:	d8e5      	bhi.n	800978c <__multiply+0x108>
 80097c0:	9f01      	ldr	r7, [sp, #4]
 80097c2:	51eb      	str	r3, [r5, r7]
 80097c4:	3504      	adds	r5, #4
 80097c6:	e79a      	b.n	80096fe <__multiply+0x7a>
 80097c8:	3e01      	subs	r6, #1
 80097ca:	e79c      	b.n	8009706 <__multiply+0x82>
 80097cc:	0800a001 	.word	0x0800a001
 80097d0:	0800a012 	.word	0x0800a012

080097d4 <__pow5mult>:
 80097d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097d8:	4615      	mov	r5, r2
 80097da:	f012 0203 	ands.w	r2, r2, #3
 80097de:	4607      	mov	r7, r0
 80097e0:	460e      	mov	r6, r1
 80097e2:	d007      	beq.n	80097f4 <__pow5mult+0x20>
 80097e4:	4c25      	ldr	r4, [pc, #148]	@ (800987c <__pow5mult+0xa8>)
 80097e6:	3a01      	subs	r2, #1
 80097e8:	2300      	movs	r3, #0
 80097ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80097ee:	f7ff fea1 	bl	8009534 <__multadd>
 80097f2:	4606      	mov	r6, r0
 80097f4:	10ad      	asrs	r5, r5, #2
 80097f6:	d03d      	beq.n	8009874 <__pow5mult+0xa0>
 80097f8:	69fc      	ldr	r4, [r7, #28]
 80097fa:	b97c      	cbnz	r4, 800981c <__pow5mult+0x48>
 80097fc:	2010      	movs	r0, #16
 80097fe:	f7fd fde5 	bl	80073cc <malloc>
 8009802:	4602      	mov	r2, r0
 8009804:	61f8      	str	r0, [r7, #28]
 8009806:	b928      	cbnz	r0, 8009814 <__pow5mult+0x40>
 8009808:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800980c:	4b1c      	ldr	r3, [pc, #112]	@ (8009880 <__pow5mult+0xac>)
 800980e:	481d      	ldr	r0, [pc, #116]	@ (8009884 <__pow5mult+0xb0>)
 8009810:	f7fd fda2 	bl	8007358 <__assert_func>
 8009814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009818:	6004      	str	r4, [r0, #0]
 800981a:	60c4      	str	r4, [r0, #12]
 800981c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009824:	b94c      	cbnz	r4, 800983a <__pow5mult+0x66>
 8009826:	f240 2171 	movw	r1, #625	@ 0x271
 800982a:	4638      	mov	r0, r7
 800982c:	f7ff ff14 	bl	8009658 <__i2b>
 8009830:	2300      	movs	r3, #0
 8009832:	4604      	mov	r4, r0
 8009834:	f8c8 0008 	str.w	r0, [r8, #8]
 8009838:	6003      	str	r3, [r0, #0]
 800983a:	f04f 0900 	mov.w	r9, #0
 800983e:	07eb      	lsls	r3, r5, #31
 8009840:	d50a      	bpl.n	8009858 <__pow5mult+0x84>
 8009842:	4631      	mov	r1, r6
 8009844:	4622      	mov	r2, r4
 8009846:	4638      	mov	r0, r7
 8009848:	f7ff ff1c 	bl	8009684 <__multiply>
 800984c:	4680      	mov	r8, r0
 800984e:	4631      	mov	r1, r6
 8009850:	4638      	mov	r0, r7
 8009852:	f7ff fe4d 	bl	80094f0 <_Bfree>
 8009856:	4646      	mov	r6, r8
 8009858:	106d      	asrs	r5, r5, #1
 800985a:	d00b      	beq.n	8009874 <__pow5mult+0xa0>
 800985c:	6820      	ldr	r0, [r4, #0]
 800985e:	b938      	cbnz	r0, 8009870 <__pow5mult+0x9c>
 8009860:	4622      	mov	r2, r4
 8009862:	4621      	mov	r1, r4
 8009864:	4638      	mov	r0, r7
 8009866:	f7ff ff0d 	bl	8009684 <__multiply>
 800986a:	6020      	str	r0, [r4, #0]
 800986c:	f8c0 9000 	str.w	r9, [r0]
 8009870:	4604      	mov	r4, r0
 8009872:	e7e4      	b.n	800983e <__pow5mult+0x6a>
 8009874:	4630      	mov	r0, r6
 8009876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800987a:	bf00      	nop
 800987c:	0800a06c 	.word	0x0800a06c
 8009880:	08009f92 	.word	0x08009f92
 8009884:	0800a012 	.word	0x0800a012

08009888 <__lshift>:
 8009888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800988c:	460c      	mov	r4, r1
 800988e:	4607      	mov	r7, r0
 8009890:	4691      	mov	r9, r2
 8009892:	6923      	ldr	r3, [r4, #16]
 8009894:	6849      	ldr	r1, [r1, #4]
 8009896:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800989a:	68a3      	ldr	r3, [r4, #8]
 800989c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80098a0:	f108 0601 	add.w	r6, r8, #1
 80098a4:	42b3      	cmp	r3, r6
 80098a6:	db0b      	blt.n	80098c0 <__lshift+0x38>
 80098a8:	4638      	mov	r0, r7
 80098aa:	f7ff fde1 	bl	8009470 <_Balloc>
 80098ae:	4605      	mov	r5, r0
 80098b0:	b948      	cbnz	r0, 80098c6 <__lshift+0x3e>
 80098b2:	4602      	mov	r2, r0
 80098b4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80098b8:	4b27      	ldr	r3, [pc, #156]	@ (8009958 <__lshift+0xd0>)
 80098ba:	4828      	ldr	r0, [pc, #160]	@ (800995c <__lshift+0xd4>)
 80098bc:	f7fd fd4c 	bl	8007358 <__assert_func>
 80098c0:	3101      	adds	r1, #1
 80098c2:	005b      	lsls	r3, r3, #1
 80098c4:	e7ee      	b.n	80098a4 <__lshift+0x1c>
 80098c6:	2300      	movs	r3, #0
 80098c8:	f100 0114 	add.w	r1, r0, #20
 80098cc:	f100 0210 	add.w	r2, r0, #16
 80098d0:	4618      	mov	r0, r3
 80098d2:	4553      	cmp	r3, sl
 80098d4:	db33      	blt.n	800993e <__lshift+0xb6>
 80098d6:	6920      	ldr	r0, [r4, #16]
 80098d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80098dc:	f104 0314 	add.w	r3, r4, #20
 80098e0:	f019 091f 	ands.w	r9, r9, #31
 80098e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80098e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80098ec:	d02b      	beq.n	8009946 <__lshift+0xbe>
 80098ee:	468a      	mov	sl, r1
 80098f0:	2200      	movs	r2, #0
 80098f2:	f1c9 0e20 	rsb	lr, r9, #32
 80098f6:	6818      	ldr	r0, [r3, #0]
 80098f8:	fa00 f009 	lsl.w	r0, r0, r9
 80098fc:	4310      	orrs	r0, r2
 80098fe:	f84a 0b04 	str.w	r0, [sl], #4
 8009902:	f853 2b04 	ldr.w	r2, [r3], #4
 8009906:	459c      	cmp	ip, r3
 8009908:	fa22 f20e 	lsr.w	r2, r2, lr
 800990c:	d8f3      	bhi.n	80098f6 <__lshift+0x6e>
 800990e:	ebac 0304 	sub.w	r3, ip, r4
 8009912:	3b15      	subs	r3, #21
 8009914:	f023 0303 	bic.w	r3, r3, #3
 8009918:	3304      	adds	r3, #4
 800991a:	f104 0015 	add.w	r0, r4, #21
 800991e:	4584      	cmp	ip, r0
 8009920:	bf38      	it	cc
 8009922:	2304      	movcc	r3, #4
 8009924:	50ca      	str	r2, [r1, r3]
 8009926:	b10a      	cbz	r2, 800992c <__lshift+0xa4>
 8009928:	f108 0602 	add.w	r6, r8, #2
 800992c:	3e01      	subs	r6, #1
 800992e:	4638      	mov	r0, r7
 8009930:	4621      	mov	r1, r4
 8009932:	612e      	str	r6, [r5, #16]
 8009934:	f7ff fddc 	bl	80094f0 <_Bfree>
 8009938:	4628      	mov	r0, r5
 800993a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800993e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009942:	3301      	adds	r3, #1
 8009944:	e7c5      	b.n	80098d2 <__lshift+0x4a>
 8009946:	3904      	subs	r1, #4
 8009948:	f853 2b04 	ldr.w	r2, [r3], #4
 800994c:	459c      	cmp	ip, r3
 800994e:	f841 2f04 	str.w	r2, [r1, #4]!
 8009952:	d8f9      	bhi.n	8009948 <__lshift+0xc0>
 8009954:	e7ea      	b.n	800992c <__lshift+0xa4>
 8009956:	bf00      	nop
 8009958:	0800a001 	.word	0x0800a001
 800995c:	0800a012 	.word	0x0800a012

08009960 <__mcmp>:
 8009960:	4603      	mov	r3, r0
 8009962:	690a      	ldr	r2, [r1, #16]
 8009964:	6900      	ldr	r0, [r0, #16]
 8009966:	b530      	push	{r4, r5, lr}
 8009968:	1a80      	subs	r0, r0, r2
 800996a:	d10e      	bne.n	800998a <__mcmp+0x2a>
 800996c:	3314      	adds	r3, #20
 800996e:	3114      	adds	r1, #20
 8009970:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009974:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009978:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800997c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009980:	4295      	cmp	r5, r2
 8009982:	d003      	beq.n	800998c <__mcmp+0x2c>
 8009984:	d205      	bcs.n	8009992 <__mcmp+0x32>
 8009986:	f04f 30ff 	mov.w	r0, #4294967295
 800998a:	bd30      	pop	{r4, r5, pc}
 800998c:	42a3      	cmp	r3, r4
 800998e:	d3f3      	bcc.n	8009978 <__mcmp+0x18>
 8009990:	e7fb      	b.n	800998a <__mcmp+0x2a>
 8009992:	2001      	movs	r0, #1
 8009994:	e7f9      	b.n	800998a <__mcmp+0x2a>
	...

08009998 <__mdiff>:
 8009998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800999c:	4689      	mov	r9, r1
 800999e:	4606      	mov	r6, r0
 80099a0:	4611      	mov	r1, r2
 80099a2:	4648      	mov	r0, r9
 80099a4:	4614      	mov	r4, r2
 80099a6:	f7ff ffdb 	bl	8009960 <__mcmp>
 80099aa:	1e05      	subs	r5, r0, #0
 80099ac:	d112      	bne.n	80099d4 <__mdiff+0x3c>
 80099ae:	4629      	mov	r1, r5
 80099b0:	4630      	mov	r0, r6
 80099b2:	f7ff fd5d 	bl	8009470 <_Balloc>
 80099b6:	4602      	mov	r2, r0
 80099b8:	b928      	cbnz	r0, 80099c6 <__mdiff+0x2e>
 80099ba:	f240 2137 	movw	r1, #567	@ 0x237
 80099be:	4b3e      	ldr	r3, [pc, #248]	@ (8009ab8 <__mdiff+0x120>)
 80099c0:	483e      	ldr	r0, [pc, #248]	@ (8009abc <__mdiff+0x124>)
 80099c2:	f7fd fcc9 	bl	8007358 <__assert_func>
 80099c6:	2301      	movs	r3, #1
 80099c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80099cc:	4610      	mov	r0, r2
 80099ce:	b003      	add	sp, #12
 80099d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099d4:	bfbc      	itt	lt
 80099d6:	464b      	movlt	r3, r9
 80099d8:	46a1      	movlt	r9, r4
 80099da:	4630      	mov	r0, r6
 80099dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80099e0:	bfba      	itte	lt
 80099e2:	461c      	movlt	r4, r3
 80099e4:	2501      	movlt	r5, #1
 80099e6:	2500      	movge	r5, #0
 80099e8:	f7ff fd42 	bl	8009470 <_Balloc>
 80099ec:	4602      	mov	r2, r0
 80099ee:	b918      	cbnz	r0, 80099f8 <__mdiff+0x60>
 80099f0:	f240 2145 	movw	r1, #581	@ 0x245
 80099f4:	4b30      	ldr	r3, [pc, #192]	@ (8009ab8 <__mdiff+0x120>)
 80099f6:	e7e3      	b.n	80099c0 <__mdiff+0x28>
 80099f8:	f100 0b14 	add.w	fp, r0, #20
 80099fc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009a00:	f109 0310 	add.w	r3, r9, #16
 8009a04:	60c5      	str	r5, [r0, #12]
 8009a06:	f04f 0c00 	mov.w	ip, #0
 8009a0a:	f109 0514 	add.w	r5, r9, #20
 8009a0e:	46d9      	mov	r9, fp
 8009a10:	6926      	ldr	r6, [r4, #16]
 8009a12:	f104 0e14 	add.w	lr, r4, #20
 8009a16:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009a1a:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009a1e:	9301      	str	r3, [sp, #4]
 8009a20:	9b01      	ldr	r3, [sp, #4]
 8009a22:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009a26:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009a2a:	b281      	uxth	r1, r0
 8009a2c:	9301      	str	r3, [sp, #4]
 8009a2e:	fa1f f38a 	uxth.w	r3, sl
 8009a32:	1a5b      	subs	r3, r3, r1
 8009a34:	0c00      	lsrs	r0, r0, #16
 8009a36:	4463      	add	r3, ip
 8009a38:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009a3c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009a40:	b29b      	uxth	r3, r3
 8009a42:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009a46:	4576      	cmp	r6, lr
 8009a48:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009a4c:	f849 3b04 	str.w	r3, [r9], #4
 8009a50:	d8e6      	bhi.n	8009a20 <__mdiff+0x88>
 8009a52:	1b33      	subs	r3, r6, r4
 8009a54:	3b15      	subs	r3, #21
 8009a56:	f023 0303 	bic.w	r3, r3, #3
 8009a5a:	3415      	adds	r4, #21
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	42a6      	cmp	r6, r4
 8009a60:	bf38      	it	cc
 8009a62:	2304      	movcc	r3, #4
 8009a64:	441d      	add	r5, r3
 8009a66:	445b      	add	r3, fp
 8009a68:	461e      	mov	r6, r3
 8009a6a:	462c      	mov	r4, r5
 8009a6c:	4544      	cmp	r4, r8
 8009a6e:	d30e      	bcc.n	8009a8e <__mdiff+0xf6>
 8009a70:	f108 0103 	add.w	r1, r8, #3
 8009a74:	1b49      	subs	r1, r1, r5
 8009a76:	f021 0103 	bic.w	r1, r1, #3
 8009a7a:	3d03      	subs	r5, #3
 8009a7c:	45a8      	cmp	r8, r5
 8009a7e:	bf38      	it	cc
 8009a80:	2100      	movcc	r1, #0
 8009a82:	440b      	add	r3, r1
 8009a84:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009a88:	b199      	cbz	r1, 8009ab2 <__mdiff+0x11a>
 8009a8a:	6117      	str	r7, [r2, #16]
 8009a8c:	e79e      	b.n	80099cc <__mdiff+0x34>
 8009a8e:	46e6      	mov	lr, ip
 8009a90:	f854 1b04 	ldr.w	r1, [r4], #4
 8009a94:	fa1f fc81 	uxth.w	ip, r1
 8009a98:	44f4      	add	ip, lr
 8009a9a:	0c08      	lsrs	r0, r1, #16
 8009a9c:	4471      	add	r1, lr
 8009a9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009aa2:	b289      	uxth	r1, r1
 8009aa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009aa8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009aac:	f846 1b04 	str.w	r1, [r6], #4
 8009ab0:	e7dc      	b.n	8009a6c <__mdiff+0xd4>
 8009ab2:	3f01      	subs	r7, #1
 8009ab4:	e7e6      	b.n	8009a84 <__mdiff+0xec>
 8009ab6:	bf00      	nop
 8009ab8:	0800a001 	.word	0x0800a001
 8009abc:	0800a012 	.word	0x0800a012

08009ac0 <__d2b>:
 8009ac0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009ac4:	2101      	movs	r1, #1
 8009ac6:	4690      	mov	r8, r2
 8009ac8:	4699      	mov	r9, r3
 8009aca:	9e08      	ldr	r6, [sp, #32]
 8009acc:	f7ff fcd0 	bl	8009470 <_Balloc>
 8009ad0:	4604      	mov	r4, r0
 8009ad2:	b930      	cbnz	r0, 8009ae2 <__d2b+0x22>
 8009ad4:	4602      	mov	r2, r0
 8009ad6:	f240 310f 	movw	r1, #783	@ 0x30f
 8009ada:	4b23      	ldr	r3, [pc, #140]	@ (8009b68 <__d2b+0xa8>)
 8009adc:	4823      	ldr	r0, [pc, #140]	@ (8009b6c <__d2b+0xac>)
 8009ade:	f7fd fc3b 	bl	8007358 <__assert_func>
 8009ae2:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009ae6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009aea:	b10d      	cbz	r5, 8009af0 <__d2b+0x30>
 8009aec:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	f1b8 0300 	subs.w	r3, r8, #0
 8009af6:	d024      	beq.n	8009b42 <__d2b+0x82>
 8009af8:	4668      	mov	r0, sp
 8009afa:	9300      	str	r3, [sp, #0]
 8009afc:	f7ff fd7f 	bl	80095fe <__lo0bits>
 8009b00:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009b04:	b1d8      	cbz	r0, 8009b3e <__d2b+0x7e>
 8009b06:	f1c0 0320 	rsb	r3, r0, #32
 8009b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8009b0e:	430b      	orrs	r3, r1
 8009b10:	40c2      	lsrs	r2, r0
 8009b12:	6163      	str	r3, [r4, #20]
 8009b14:	9201      	str	r2, [sp, #4]
 8009b16:	9b01      	ldr	r3, [sp, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	bf0c      	ite	eq
 8009b1c:	2201      	moveq	r2, #1
 8009b1e:	2202      	movne	r2, #2
 8009b20:	61a3      	str	r3, [r4, #24]
 8009b22:	6122      	str	r2, [r4, #16]
 8009b24:	b1ad      	cbz	r5, 8009b52 <__d2b+0x92>
 8009b26:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009b2a:	4405      	add	r5, r0
 8009b2c:	6035      	str	r5, [r6, #0]
 8009b2e:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009b32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b34:	6018      	str	r0, [r3, #0]
 8009b36:	4620      	mov	r0, r4
 8009b38:	b002      	add	sp, #8
 8009b3a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009b3e:	6161      	str	r1, [r4, #20]
 8009b40:	e7e9      	b.n	8009b16 <__d2b+0x56>
 8009b42:	a801      	add	r0, sp, #4
 8009b44:	f7ff fd5b 	bl	80095fe <__lo0bits>
 8009b48:	9b01      	ldr	r3, [sp, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	6163      	str	r3, [r4, #20]
 8009b4e:	3020      	adds	r0, #32
 8009b50:	e7e7      	b.n	8009b22 <__d2b+0x62>
 8009b52:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009b56:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009b5a:	6030      	str	r0, [r6, #0]
 8009b5c:	6918      	ldr	r0, [r3, #16]
 8009b5e:	f7ff fd2f 	bl	80095c0 <__hi0bits>
 8009b62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009b66:	e7e4      	b.n	8009b32 <__d2b+0x72>
 8009b68:	0800a001 	.word	0x0800a001
 8009b6c:	0800a012 	.word	0x0800a012

08009b70 <__swhatbuf_r>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	460c      	mov	r4, r1
 8009b74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009b78:	4615      	mov	r5, r2
 8009b7a:	2900      	cmp	r1, #0
 8009b7c:	461e      	mov	r6, r3
 8009b7e:	b096      	sub	sp, #88	@ 0x58
 8009b80:	da0c      	bge.n	8009b9c <__swhatbuf_r+0x2c>
 8009b82:	89a3      	ldrh	r3, [r4, #12]
 8009b84:	2100      	movs	r1, #0
 8009b86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009b8a:	bf14      	ite	ne
 8009b8c:	2340      	movne	r3, #64	@ 0x40
 8009b8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009b92:	2000      	movs	r0, #0
 8009b94:	6031      	str	r1, [r6, #0]
 8009b96:	602b      	str	r3, [r5, #0]
 8009b98:	b016      	add	sp, #88	@ 0x58
 8009b9a:	bd70      	pop	{r4, r5, r6, pc}
 8009b9c:	466a      	mov	r2, sp
 8009b9e:	f000 f849 	bl	8009c34 <_fstat_r>
 8009ba2:	2800      	cmp	r0, #0
 8009ba4:	dbed      	blt.n	8009b82 <__swhatbuf_r+0x12>
 8009ba6:	9901      	ldr	r1, [sp, #4]
 8009ba8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009bac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009bb0:	4259      	negs	r1, r3
 8009bb2:	4159      	adcs	r1, r3
 8009bb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009bb8:	e7eb      	b.n	8009b92 <__swhatbuf_r+0x22>

08009bba <__smakebuf_r>:
 8009bba:	898b      	ldrh	r3, [r1, #12]
 8009bbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bbe:	079d      	lsls	r5, r3, #30
 8009bc0:	4606      	mov	r6, r0
 8009bc2:	460c      	mov	r4, r1
 8009bc4:	d507      	bpl.n	8009bd6 <__smakebuf_r+0x1c>
 8009bc6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	6123      	str	r3, [r4, #16]
 8009bce:	2301      	movs	r3, #1
 8009bd0:	6163      	str	r3, [r4, #20]
 8009bd2:	b003      	add	sp, #12
 8009bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bd6:	466a      	mov	r2, sp
 8009bd8:	ab01      	add	r3, sp, #4
 8009bda:	f7ff ffc9 	bl	8009b70 <__swhatbuf_r>
 8009bde:	9f00      	ldr	r7, [sp, #0]
 8009be0:	4605      	mov	r5, r0
 8009be2:	4639      	mov	r1, r7
 8009be4:	4630      	mov	r0, r6
 8009be6:	f7fd fc23 	bl	8007430 <_malloc_r>
 8009bea:	b948      	cbnz	r0, 8009c00 <__smakebuf_r+0x46>
 8009bec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009bf0:	059a      	lsls	r2, r3, #22
 8009bf2:	d4ee      	bmi.n	8009bd2 <__smakebuf_r+0x18>
 8009bf4:	f023 0303 	bic.w	r3, r3, #3
 8009bf8:	f043 0302 	orr.w	r3, r3, #2
 8009bfc:	81a3      	strh	r3, [r4, #12]
 8009bfe:	e7e2      	b.n	8009bc6 <__smakebuf_r+0xc>
 8009c00:	89a3      	ldrh	r3, [r4, #12]
 8009c02:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c0a:	81a3      	strh	r3, [r4, #12]
 8009c0c:	9b01      	ldr	r3, [sp, #4]
 8009c0e:	6020      	str	r0, [r4, #0]
 8009c10:	b15b      	cbz	r3, 8009c2a <__smakebuf_r+0x70>
 8009c12:	4630      	mov	r0, r6
 8009c14:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009c18:	f000 f81e 	bl	8009c58 <_isatty_r>
 8009c1c:	b128      	cbz	r0, 8009c2a <__smakebuf_r+0x70>
 8009c1e:	89a3      	ldrh	r3, [r4, #12]
 8009c20:	f023 0303 	bic.w	r3, r3, #3
 8009c24:	f043 0301 	orr.w	r3, r3, #1
 8009c28:	81a3      	strh	r3, [r4, #12]
 8009c2a:	89a3      	ldrh	r3, [r4, #12]
 8009c2c:	431d      	orrs	r5, r3
 8009c2e:	81a5      	strh	r5, [r4, #12]
 8009c30:	e7cf      	b.n	8009bd2 <__smakebuf_r+0x18>
	...

08009c34 <_fstat_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	2300      	movs	r3, #0
 8009c38:	4d06      	ldr	r5, [pc, #24]	@ (8009c54 <_fstat_r+0x20>)
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	4611      	mov	r1, r2
 8009c40:	602b      	str	r3, [r5, #0]
 8009c42:	f7f7 fd7b 	bl	800173c <_fstat>
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	d102      	bne.n	8009c50 <_fstat_r+0x1c>
 8009c4a:	682b      	ldr	r3, [r5, #0]
 8009c4c:	b103      	cbz	r3, 8009c50 <_fstat_r+0x1c>
 8009c4e:	6023      	str	r3, [r4, #0]
 8009c50:	bd38      	pop	{r3, r4, r5, pc}
 8009c52:	bf00      	nop
 8009c54:	200004b0 	.word	0x200004b0

08009c58 <_isatty_r>:
 8009c58:	b538      	push	{r3, r4, r5, lr}
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	4d05      	ldr	r5, [pc, #20]	@ (8009c74 <_isatty_r+0x1c>)
 8009c5e:	4604      	mov	r4, r0
 8009c60:	4608      	mov	r0, r1
 8009c62:	602b      	str	r3, [r5, #0]
 8009c64:	f7f7 fd79 	bl	800175a <_isatty>
 8009c68:	1c43      	adds	r3, r0, #1
 8009c6a:	d102      	bne.n	8009c72 <_isatty_r+0x1a>
 8009c6c:	682b      	ldr	r3, [r5, #0]
 8009c6e:	b103      	cbz	r3, 8009c72 <_isatty_r+0x1a>
 8009c70:	6023      	str	r3, [r4, #0]
 8009c72:	bd38      	pop	{r3, r4, r5, pc}
 8009c74:	200004b0 	.word	0x200004b0

08009c78 <__ascii_mbtowc>:
 8009c78:	b082      	sub	sp, #8
 8009c7a:	b901      	cbnz	r1, 8009c7e <__ascii_mbtowc+0x6>
 8009c7c:	a901      	add	r1, sp, #4
 8009c7e:	b142      	cbz	r2, 8009c92 <__ascii_mbtowc+0x1a>
 8009c80:	b14b      	cbz	r3, 8009c96 <__ascii_mbtowc+0x1e>
 8009c82:	7813      	ldrb	r3, [r2, #0]
 8009c84:	600b      	str	r3, [r1, #0]
 8009c86:	7812      	ldrb	r2, [r2, #0]
 8009c88:	1e10      	subs	r0, r2, #0
 8009c8a:	bf18      	it	ne
 8009c8c:	2001      	movne	r0, #1
 8009c8e:	b002      	add	sp, #8
 8009c90:	4770      	bx	lr
 8009c92:	4610      	mov	r0, r2
 8009c94:	e7fb      	b.n	8009c8e <__ascii_mbtowc+0x16>
 8009c96:	f06f 0001 	mvn.w	r0, #1
 8009c9a:	e7f8      	b.n	8009c8e <__ascii_mbtowc+0x16>

08009c9c <__ascii_wctomb>:
 8009c9c:	4603      	mov	r3, r0
 8009c9e:	4608      	mov	r0, r1
 8009ca0:	b141      	cbz	r1, 8009cb4 <__ascii_wctomb+0x18>
 8009ca2:	2aff      	cmp	r2, #255	@ 0xff
 8009ca4:	d904      	bls.n	8009cb0 <__ascii_wctomb+0x14>
 8009ca6:	228a      	movs	r2, #138	@ 0x8a
 8009ca8:	f04f 30ff 	mov.w	r0, #4294967295
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	4770      	bx	lr
 8009cb0:	2001      	movs	r0, #1
 8009cb2:	700a      	strb	r2, [r1, #0]
 8009cb4:	4770      	bx	lr
	...

08009cb8 <_init>:
 8009cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cba:	bf00      	nop
 8009cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cbe:	bc08      	pop	{r3}
 8009cc0:	469e      	mov	lr, r3
 8009cc2:	4770      	bx	lr

08009cc4 <_fini>:
 8009cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cc6:	bf00      	nop
 8009cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cca:	bc08      	pop	{r3}
 8009ccc:	469e      	mov	lr, r3
 8009cce:	4770      	bx	lr
