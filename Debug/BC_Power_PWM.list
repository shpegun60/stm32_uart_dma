
BC_Power_PWM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  080000b8  080000b8  000010b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011a4  08006ce0  08006ce0  00007ce0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e84  08007e84  0000906c  2**0
                  CONTENTS
  4 .ARM          00000000  08007e84  08007e84  0000906c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007e84  08007e84  0000906c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08007e84  08007e84  00008e84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   0000000c  08007e90  08007e90  00008e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08007e9c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000006c  08007f08  0000906c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005cc  08007f08  000095cc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000906c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049797  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00009cee  00000000  00000000  0005282b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loclists 0000e33e  00000000  00000000  0005c519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001098  00000000  00000000  0006a858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001582  00000000  00000000  0006b8f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e65f  00000000  00000000  0006ce72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002a10a  00000000  00000000  0008b4d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b76a4  00000000  00000000  000b55db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016cc7f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039e8  00000000  00000000  0016ccc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001706ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	@ (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	@ (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	@ (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	2000006c 	.word	0x2000006c
 80000d8:	00000000 	.word	0x00000000
 80000dc:	08006cc4 	.word	0x08006cc4

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	@ (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	@ (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	@ (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			@ (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	20000070 	.word	0x20000070
 80000fc:	08006cc4 	.word	0x08006cc4

08000100 <__gnu_thumb1_case_shi>:
 8000100:	b403      	push	{r0, r1}
 8000102:	4671      	mov	r1, lr
 8000104:	0849      	lsrs	r1, r1, #1
 8000106:	0040      	lsls	r0, r0, #1
 8000108:	0049      	lsls	r1, r1, #1
 800010a:	5e09      	ldrsh	r1, [r1, r0]
 800010c:	0049      	lsls	r1, r1, #1
 800010e:	448e      	add	lr, r1
 8000110:	bc03      	pop	{r0, r1}
 8000112:	4770      	bx	lr

08000114 <__udivsi3>:
 8000114:	2200      	movs	r2, #0
 8000116:	0843      	lsrs	r3, r0, #1
 8000118:	428b      	cmp	r3, r1
 800011a:	d374      	bcc.n	8000206 <__udivsi3+0xf2>
 800011c:	0903      	lsrs	r3, r0, #4
 800011e:	428b      	cmp	r3, r1
 8000120:	d35f      	bcc.n	80001e2 <__udivsi3+0xce>
 8000122:	0a03      	lsrs	r3, r0, #8
 8000124:	428b      	cmp	r3, r1
 8000126:	d344      	bcc.n	80001b2 <__udivsi3+0x9e>
 8000128:	0b03      	lsrs	r3, r0, #12
 800012a:	428b      	cmp	r3, r1
 800012c:	d328      	bcc.n	8000180 <__udivsi3+0x6c>
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d30d      	bcc.n	8000150 <__udivsi3+0x3c>
 8000134:	22ff      	movs	r2, #255	@ 0xff
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	ba12      	rev	r2, r2
 800013a:	0c03      	lsrs	r3, r0, #16
 800013c:	428b      	cmp	r3, r1
 800013e:	d302      	bcc.n	8000146 <__udivsi3+0x32>
 8000140:	1212      	asrs	r2, r2, #8
 8000142:	0209      	lsls	r1, r1, #8
 8000144:	d065      	beq.n	8000212 <__udivsi3+0xfe>
 8000146:	0b03      	lsrs	r3, r0, #12
 8000148:	428b      	cmp	r3, r1
 800014a:	d319      	bcc.n	8000180 <__udivsi3+0x6c>
 800014c:	e000      	b.n	8000150 <__udivsi3+0x3c>
 800014e:	0a09      	lsrs	r1, r1, #8
 8000150:	0bc3      	lsrs	r3, r0, #15
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x46>
 8000156:	03cb      	lsls	r3, r1, #15
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b83      	lsrs	r3, r0, #14
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x52>
 8000162:	038b      	lsls	r3, r1, #14
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b43      	lsrs	r3, r0, #13
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x5e>
 800016e:	034b      	lsls	r3, r1, #13
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b03      	lsrs	r3, r0, #12
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x6a>
 800017a:	030b      	lsls	r3, r1, #12
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0ac3      	lsrs	r3, r0, #11
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x76>
 8000186:	02cb      	lsls	r3, r1, #11
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a83      	lsrs	r3, r0, #10
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x82>
 8000192:	028b      	lsls	r3, r1, #10
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a43      	lsrs	r3, r0, #9
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x8e>
 800019e:	024b      	lsls	r3, r1, #9
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a03      	lsrs	r3, r0, #8
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x9a>
 80001aa:	020b      	lsls	r3, r1, #8
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	d2cd      	bcs.n	800014e <__udivsi3+0x3a>
 80001b2:	09c3      	lsrs	r3, r0, #7
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xa8>
 80001b8:	01cb      	lsls	r3, r1, #7
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0983      	lsrs	r3, r0, #6
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xb4>
 80001c4:	018b      	lsls	r3, r1, #6
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0943      	lsrs	r3, r0, #5
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xc0>
 80001d0:	014b      	lsls	r3, r1, #5
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0903      	lsrs	r3, r0, #4
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xcc>
 80001dc:	010b      	lsls	r3, r1, #4
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	08c3      	lsrs	r3, r0, #3
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xd8>
 80001e8:	00cb      	lsls	r3, r1, #3
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0883      	lsrs	r3, r0, #2
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xe4>
 80001f4:	008b      	lsls	r3, r1, #2
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0843      	lsrs	r3, r0, #1
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xf0>
 8000200:	004b      	lsls	r3, r1, #1
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	1a41      	subs	r1, r0, r1
 8000208:	d200      	bcs.n	800020c <__udivsi3+0xf8>
 800020a:	4601      	mov	r1, r0
 800020c:	4152      	adcs	r2, r2
 800020e:	4610      	mov	r0, r2
 8000210:	4770      	bx	lr
 8000212:	e7ff      	b.n	8000214 <__udivsi3+0x100>
 8000214:	b501      	push	{r0, lr}
 8000216:	2000      	movs	r0, #0
 8000218:	f000 f8f0 	bl	80003fc <__aeabi_idiv0>
 800021c:	bd02      	pop	{r1, pc}
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_uidivmod>:
 8000220:	2900      	cmp	r1, #0
 8000222:	d0f7      	beq.n	8000214 <__udivsi3+0x100>
 8000224:	e776      	b.n	8000114 <__udivsi3>
 8000226:	4770      	bx	lr

08000228 <__divsi3>:
 8000228:	4603      	mov	r3, r0
 800022a:	430b      	orrs	r3, r1
 800022c:	d47f      	bmi.n	800032e <__divsi3+0x106>
 800022e:	2200      	movs	r2, #0
 8000230:	0843      	lsrs	r3, r0, #1
 8000232:	428b      	cmp	r3, r1
 8000234:	d374      	bcc.n	8000320 <__divsi3+0xf8>
 8000236:	0903      	lsrs	r3, r0, #4
 8000238:	428b      	cmp	r3, r1
 800023a:	d35f      	bcc.n	80002fc <__divsi3+0xd4>
 800023c:	0a03      	lsrs	r3, r0, #8
 800023e:	428b      	cmp	r3, r1
 8000240:	d344      	bcc.n	80002cc <__divsi3+0xa4>
 8000242:	0b03      	lsrs	r3, r0, #12
 8000244:	428b      	cmp	r3, r1
 8000246:	d328      	bcc.n	800029a <__divsi3+0x72>
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d30d      	bcc.n	800026a <__divsi3+0x42>
 800024e:	22ff      	movs	r2, #255	@ 0xff
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	ba12      	rev	r2, r2
 8000254:	0c03      	lsrs	r3, r0, #16
 8000256:	428b      	cmp	r3, r1
 8000258:	d302      	bcc.n	8000260 <__divsi3+0x38>
 800025a:	1212      	asrs	r2, r2, #8
 800025c:	0209      	lsls	r1, r1, #8
 800025e:	d065      	beq.n	800032c <__divsi3+0x104>
 8000260:	0b03      	lsrs	r3, r0, #12
 8000262:	428b      	cmp	r3, r1
 8000264:	d319      	bcc.n	800029a <__divsi3+0x72>
 8000266:	e000      	b.n	800026a <__divsi3+0x42>
 8000268:	0a09      	lsrs	r1, r1, #8
 800026a:	0bc3      	lsrs	r3, r0, #15
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x4c>
 8000270:	03cb      	lsls	r3, r1, #15
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b83      	lsrs	r3, r0, #14
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x58>
 800027c:	038b      	lsls	r3, r1, #14
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b43      	lsrs	r3, r0, #13
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x64>
 8000288:	034b      	lsls	r3, r1, #13
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b03      	lsrs	r3, r0, #12
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x70>
 8000294:	030b      	lsls	r3, r1, #12
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0ac3      	lsrs	r3, r0, #11
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x7c>
 80002a0:	02cb      	lsls	r3, r1, #11
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a83      	lsrs	r3, r0, #10
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x88>
 80002ac:	028b      	lsls	r3, r1, #10
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a43      	lsrs	r3, r0, #9
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x94>
 80002b8:	024b      	lsls	r3, r1, #9
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a03      	lsrs	r3, r0, #8
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0xa0>
 80002c4:	020b      	lsls	r3, r1, #8
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	d2cd      	bcs.n	8000268 <__divsi3+0x40>
 80002cc:	09c3      	lsrs	r3, r0, #7
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xae>
 80002d2:	01cb      	lsls	r3, r1, #7
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0983      	lsrs	r3, r0, #6
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xba>
 80002de:	018b      	lsls	r3, r1, #6
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0943      	lsrs	r3, r0, #5
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xc6>
 80002ea:	014b      	lsls	r3, r1, #5
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0903      	lsrs	r3, r0, #4
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xd2>
 80002f6:	010b      	lsls	r3, r1, #4
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	08c3      	lsrs	r3, r0, #3
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xde>
 8000302:	00cb      	lsls	r3, r1, #3
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0883      	lsrs	r3, r0, #2
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xea>
 800030e:	008b      	lsls	r3, r1, #2
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0843      	lsrs	r3, r0, #1
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xf6>
 800031a:	004b      	lsls	r3, r1, #1
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	1a41      	subs	r1, r0, r1
 8000322:	d200      	bcs.n	8000326 <__divsi3+0xfe>
 8000324:	4601      	mov	r1, r0
 8000326:	4152      	adcs	r2, r2
 8000328:	4610      	mov	r0, r2
 800032a:	4770      	bx	lr
 800032c:	e05d      	b.n	80003ea <__divsi3+0x1c2>
 800032e:	0fca      	lsrs	r2, r1, #31
 8000330:	d000      	beq.n	8000334 <__divsi3+0x10c>
 8000332:	4249      	negs	r1, r1
 8000334:	1003      	asrs	r3, r0, #32
 8000336:	d300      	bcc.n	800033a <__divsi3+0x112>
 8000338:	4240      	negs	r0, r0
 800033a:	4053      	eors	r3, r2
 800033c:	2200      	movs	r2, #0
 800033e:	469c      	mov	ip, r3
 8000340:	0903      	lsrs	r3, r0, #4
 8000342:	428b      	cmp	r3, r1
 8000344:	d32d      	bcc.n	80003a2 <__divsi3+0x17a>
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d312      	bcc.n	8000372 <__divsi3+0x14a>
 800034c:	22fc      	movs	r2, #252	@ 0xfc
 800034e:	0189      	lsls	r1, r1, #6
 8000350:	ba12      	rev	r2, r2
 8000352:	0a03      	lsrs	r3, r0, #8
 8000354:	428b      	cmp	r3, r1
 8000356:	d30c      	bcc.n	8000372 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	1192      	asrs	r2, r2, #6
 800035c:	428b      	cmp	r3, r1
 800035e:	d308      	bcc.n	8000372 <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d304      	bcc.n	8000372 <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	d03a      	beq.n	80003e2 <__divsi3+0x1ba>
 800036c:	1192      	asrs	r2, r2, #6
 800036e:	e000      	b.n	8000372 <__divsi3+0x14a>
 8000370:	0989      	lsrs	r1, r1, #6
 8000372:	09c3      	lsrs	r3, r0, #7
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x154>
 8000378:	01cb      	lsls	r3, r1, #7
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0983      	lsrs	r3, r0, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x160>
 8000384:	018b      	lsls	r3, r1, #6
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0943      	lsrs	r3, r0, #5
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x16c>
 8000390:	014b      	lsls	r3, r1, #5
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0903      	lsrs	r3, r0, #4
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x178>
 800039c:	010b      	lsls	r3, r1, #4
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	08c3      	lsrs	r3, r0, #3
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x184>
 80003a8:	00cb      	lsls	r3, r1, #3
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0883      	lsrs	r3, r0, #2
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x190>
 80003b4:	008b      	lsls	r3, r1, #2
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	d2d9      	bcs.n	8000370 <__divsi3+0x148>
 80003bc:	0843      	lsrs	r3, r0, #1
 80003be:	428b      	cmp	r3, r1
 80003c0:	d301      	bcc.n	80003c6 <__divsi3+0x19e>
 80003c2:	004b      	lsls	r3, r1, #1
 80003c4:	1ac0      	subs	r0, r0, r3
 80003c6:	4152      	adcs	r2, r2
 80003c8:	1a41      	subs	r1, r0, r1
 80003ca:	d200      	bcs.n	80003ce <__divsi3+0x1a6>
 80003cc:	4601      	mov	r1, r0
 80003ce:	4663      	mov	r3, ip
 80003d0:	4152      	adcs	r2, r2
 80003d2:	105b      	asrs	r3, r3, #1
 80003d4:	4610      	mov	r0, r2
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x1b4>
 80003d8:	4240      	negs	r0, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d500      	bpl.n	80003e0 <__divsi3+0x1b8>
 80003de:	4249      	negs	r1, r1
 80003e0:	4770      	bx	lr
 80003e2:	4663      	mov	r3, ip
 80003e4:	105b      	asrs	r3, r3, #1
 80003e6:	d300      	bcc.n	80003ea <__divsi3+0x1c2>
 80003e8:	4240      	negs	r0, r0
 80003ea:	b501      	push	{r0, lr}
 80003ec:	2000      	movs	r0, #0
 80003ee:	f000 f805 	bl	80003fc <__aeabi_idiv0>
 80003f2:	bd02      	pop	{r1, pc}

080003f4 <__aeabi_idivmod>:
 80003f4:	2900      	cmp	r1, #0
 80003f6:	d0f8      	beq.n	80003ea <__divsi3+0x1c2>
 80003f8:	e716      	b.n	8000228 <__divsi3>
 80003fa:	4770      	bx	lr

080003fc <__aeabi_idiv0>:
 80003fc:	4770      	bx	lr
 80003fe:	46c0      	nop			@ (mov r8, r8)

08000400 <__aeabi_cfrcmple>:
 8000400:	4684      	mov	ip, r0
 8000402:	0008      	movs	r0, r1
 8000404:	4661      	mov	r1, ip
 8000406:	e7ff      	b.n	8000408 <__aeabi_cfcmpeq>

08000408 <__aeabi_cfcmpeq>:
 8000408:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800040a:	f000 fb6d 	bl	8000ae8 <__lesf2>
 800040e:	2800      	cmp	r0, #0
 8000410:	d401      	bmi.n	8000416 <__aeabi_cfcmpeq+0xe>
 8000412:	2100      	movs	r1, #0
 8000414:	42c8      	cmn	r0, r1
 8000416:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000418 <__aeabi_fcmpeq>:
 8000418:	b510      	push	{r4, lr}
 800041a:	f000 faed 	bl	80009f8 <__eqsf2>
 800041e:	4240      	negs	r0, r0
 8000420:	3001      	adds	r0, #1
 8000422:	bd10      	pop	{r4, pc}

08000424 <__aeabi_fcmplt>:
 8000424:	b510      	push	{r4, lr}
 8000426:	f000 fb5f 	bl	8000ae8 <__lesf2>
 800042a:	2800      	cmp	r0, #0
 800042c:	db01      	blt.n	8000432 <__aeabi_fcmplt+0xe>
 800042e:	2000      	movs	r0, #0
 8000430:	bd10      	pop	{r4, pc}
 8000432:	2001      	movs	r0, #1
 8000434:	bd10      	pop	{r4, pc}
 8000436:	46c0      	nop			@ (mov r8, r8)

08000438 <__aeabi_fcmple>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fb55 	bl	8000ae8 <__lesf2>
 800043e:	2800      	cmp	r0, #0
 8000440:	dd01      	ble.n	8000446 <__aeabi_fcmple+0xe>
 8000442:	2000      	movs	r0, #0
 8000444:	bd10      	pop	{r4, pc}
 8000446:	2001      	movs	r0, #1
 8000448:	bd10      	pop	{r4, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)

0800044c <__aeabi_fcmpgt>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 fafb 	bl	8000a48 <__gesf2>
 8000452:	2800      	cmp	r0, #0
 8000454:	dc01      	bgt.n	800045a <__aeabi_fcmpgt+0xe>
 8000456:	2000      	movs	r0, #0
 8000458:	bd10      	pop	{r4, pc}
 800045a:	2001      	movs	r0, #1
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			@ (mov r8, r8)

08000460 <__aeabi_fcmpge>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 faf1 	bl	8000a48 <__gesf2>
 8000466:	2800      	cmp	r0, #0
 8000468:	da01      	bge.n	800046e <__aeabi_fcmpge+0xe>
 800046a:	2000      	movs	r0, #0
 800046c:	bd10      	pop	{r4, pc}
 800046e:	2001      	movs	r0, #1
 8000470:	bd10      	pop	{r4, pc}
 8000472:	46c0      	nop			@ (mov r8, r8)

08000474 <__aeabi_f2uiz>:
 8000474:	219e      	movs	r1, #158	@ 0x9e
 8000476:	b510      	push	{r4, lr}
 8000478:	05c9      	lsls	r1, r1, #23
 800047a:	1c04      	adds	r4, r0, #0
 800047c:	f7ff fff0 	bl	8000460 <__aeabi_fcmpge>
 8000480:	2800      	cmp	r0, #0
 8000482:	d103      	bne.n	800048c <__aeabi_f2uiz+0x18>
 8000484:	1c20      	adds	r0, r4, #0
 8000486:	f000 fe75 	bl	8001174 <__aeabi_f2iz>
 800048a:	bd10      	pop	{r4, pc}
 800048c:	219e      	movs	r1, #158	@ 0x9e
 800048e:	1c20      	adds	r0, r4, #0
 8000490:	05c9      	lsls	r1, r1, #23
 8000492:	f000 fcb5 	bl	8000e00 <__aeabi_fsub>
 8000496:	f000 fe6d 	bl	8001174 <__aeabi_f2iz>
 800049a:	2380      	movs	r3, #128	@ 0x80
 800049c:	061b      	lsls	r3, r3, #24
 800049e:	469c      	mov	ip, r3
 80004a0:	4460      	add	r0, ip
 80004a2:	e7f2      	b.n	800048a <__aeabi_f2uiz+0x16>

080004a4 <__aeabi_fadd>:
 80004a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004a6:	46ce      	mov	lr, r9
 80004a8:	4647      	mov	r7, r8
 80004aa:	0243      	lsls	r3, r0, #9
 80004ac:	0a5a      	lsrs	r2, r3, #9
 80004ae:	024e      	lsls	r6, r1, #9
 80004b0:	0045      	lsls	r5, r0, #1
 80004b2:	0fc4      	lsrs	r4, r0, #31
 80004b4:	0048      	lsls	r0, r1, #1
 80004b6:	4691      	mov	r9, r2
 80004b8:	0e2d      	lsrs	r5, r5, #24
 80004ba:	0a72      	lsrs	r2, r6, #9
 80004bc:	0e00      	lsrs	r0, r0, #24
 80004be:	4694      	mov	ip, r2
 80004c0:	b580      	push	{r7, lr}
 80004c2:	099b      	lsrs	r3, r3, #6
 80004c4:	0fc9      	lsrs	r1, r1, #31
 80004c6:	09b6      	lsrs	r6, r6, #6
 80004c8:	1a2a      	subs	r2, r5, r0
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d021      	beq.n	8000512 <__aeabi_fadd+0x6e>
 80004ce:	2a00      	cmp	r2, #0
 80004d0:	dd0d      	ble.n	80004ee <__aeabi_fadd+0x4a>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	d12d      	bne.n	8000532 <__aeabi_fadd+0x8e>
 80004d6:	2e00      	cmp	r6, #0
 80004d8:	d100      	bne.n	80004dc <__aeabi_fadd+0x38>
 80004da:	e08d      	b.n	80005f8 <__aeabi_fadd+0x154>
 80004dc:	1e51      	subs	r1, r2, #1
 80004de:	2a01      	cmp	r2, #1
 80004e0:	d100      	bne.n	80004e4 <__aeabi_fadd+0x40>
 80004e2:	e11d      	b.n	8000720 <__aeabi_fadd+0x27c>
 80004e4:	2aff      	cmp	r2, #255	@ 0xff
 80004e6:	d100      	bne.n	80004ea <__aeabi_fadd+0x46>
 80004e8:	e0ab      	b.n	8000642 <__aeabi_fadd+0x19e>
 80004ea:	000a      	movs	r2, r1
 80004ec:	e027      	b.n	800053e <__aeabi_fadd+0x9a>
 80004ee:	2a00      	cmp	r2, #0
 80004f0:	d04d      	beq.n	800058e <__aeabi_fadd+0xea>
 80004f2:	1b42      	subs	r2, r0, r5
 80004f4:	2d00      	cmp	r5, #0
 80004f6:	d000      	beq.n	80004fa <__aeabi_fadd+0x56>
 80004f8:	e0cc      	b.n	8000694 <__aeabi_fadd+0x1f0>
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d100      	bne.n	8000500 <__aeabi_fadd+0x5c>
 80004fe:	e079      	b.n	80005f4 <__aeabi_fadd+0x150>
 8000500:	1e54      	subs	r4, r2, #1
 8000502:	2a01      	cmp	r2, #1
 8000504:	d100      	bne.n	8000508 <__aeabi_fadd+0x64>
 8000506:	e128      	b.n	800075a <__aeabi_fadd+0x2b6>
 8000508:	2aff      	cmp	r2, #255	@ 0xff
 800050a:	d100      	bne.n	800050e <__aeabi_fadd+0x6a>
 800050c:	e097      	b.n	800063e <__aeabi_fadd+0x19a>
 800050e:	0022      	movs	r2, r4
 8000510:	e0c5      	b.n	800069e <__aeabi_fadd+0x1fa>
 8000512:	2a00      	cmp	r2, #0
 8000514:	dc00      	bgt.n	8000518 <__aeabi_fadd+0x74>
 8000516:	e096      	b.n	8000646 <__aeabi_fadd+0x1a2>
 8000518:	2800      	cmp	r0, #0
 800051a:	d04f      	beq.n	80005bc <__aeabi_fadd+0x118>
 800051c:	2dff      	cmp	r5, #255	@ 0xff
 800051e:	d100      	bne.n	8000522 <__aeabi_fadd+0x7e>
 8000520:	e08f      	b.n	8000642 <__aeabi_fadd+0x19e>
 8000522:	2180      	movs	r1, #128	@ 0x80
 8000524:	04c9      	lsls	r1, r1, #19
 8000526:	430e      	orrs	r6, r1
 8000528:	2a1b      	cmp	r2, #27
 800052a:	dd51      	ble.n	80005d0 <__aeabi_fadd+0x12c>
 800052c:	002a      	movs	r2, r5
 800052e:	3301      	adds	r3, #1
 8000530:	e018      	b.n	8000564 <__aeabi_fadd+0xc0>
 8000532:	2dff      	cmp	r5, #255	@ 0xff
 8000534:	d100      	bne.n	8000538 <__aeabi_fadd+0x94>
 8000536:	e084      	b.n	8000642 <__aeabi_fadd+0x19e>
 8000538:	2180      	movs	r1, #128	@ 0x80
 800053a:	04c9      	lsls	r1, r1, #19
 800053c:	430e      	orrs	r6, r1
 800053e:	2101      	movs	r1, #1
 8000540:	2a1b      	cmp	r2, #27
 8000542:	dc08      	bgt.n	8000556 <__aeabi_fadd+0xb2>
 8000544:	0031      	movs	r1, r6
 8000546:	2020      	movs	r0, #32
 8000548:	40d1      	lsrs	r1, r2
 800054a:	1a82      	subs	r2, r0, r2
 800054c:	4096      	lsls	r6, r2
 800054e:	0032      	movs	r2, r6
 8000550:	1e50      	subs	r0, r2, #1
 8000552:	4182      	sbcs	r2, r0
 8000554:	4311      	orrs	r1, r2
 8000556:	1a5b      	subs	r3, r3, r1
 8000558:	015a      	lsls	r2, r3, #5
 800055a:	d459      	bmi.n	8000610 <__aeabi_fadd+0x16c>
 800055c:	2107      	movs	r1, #7
 800055e:	002a      	movs	r2, r5
 8000560:	4019      	ands	r1, r3
 8000562:	d049      	beq.n	80005f8 <__aeabi_fadd+0x154>
 8000564:	210f      	movs	r1, #15
 8000566:	4019      	ands	r1, r3
 8000568:	2904      	cmp	r1, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fadd+0xca>
 800056c:	3304      	adds	r3, #4
 800056e:	0159      	lsls	r1, r3, #5
 8000570:	d542      	bpl.n	80005f8 <__aeabi_fadd+0x154>
 8000572:	1c50      	adds	r0, r2, #1
 8000574:	2afe      	cmp	r2, #254	@ 0xfe
 8000576:	d03a      	beq.n	80005ee <__aeabi_fadd+0x14a>
 8000578:	019b      	lsls	r3, r3, #6
 800057a:	b2c0      	uxtb	r0, r0
 800057c:	0a5b      	lsrs	r3, r3, #9
 800057e:	05c0      	lsls	r0, r0, #23
 8000580:	4318      	orrs	r0, r3
 8000582:	07e4      	lsls	r4, r4, #31
 8000584:	4320      	orrs	r0, r4
 8000586:	bcc0      	pop	{r6, r7}
 8000588:	46b9      	mov	r9, r7
 800058a:	46b0      	mov	r8, r6
 800058c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800058e:	20fe      	movs	r0, #254	@ 0xfe
 8000590:	4680      	mov	r8, r0
 8000592:	1c6f      	adds	r7, r5, #1
 8000594:	0038      	movs	r0, r7
 8000596:	4647      	mov	r7, r8
 8000598:	4207      	tst	r7, r0
 800059a:	d000      	beq.n	800059e <__aeabi_fadd+0xfa>
 800059c:	e08e      	b.n	80006bc <__aeabi_fadd+0x218>
 800059e:	2d00      	cmp	r5, #0
 80005a0:	d000      	beq.n	80005a4 <__aeabi_fadd+0x100>
 80005a2:	e0b4      	b.n	800070e <__aeabi_fadd+0x26a>
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x106>
 80005a8:	e0db      	b.n	8000762 <__aeabi_fadd+0x2be>
 80005aa:	2e00      	cmp	r6, #0
 80005ac:	d06c      	beq.n	8000688 <__aeabi_fadd+0x1e4>
 80005ae:	1b98      	subs	r0, r3, r6
 80005b0:	0145      	lsls	r5, r0, #5
 80005b2:	d400      	bmi.n	80005b6 <__aeabi_fadd+0x112>
 80005b4:	e0f7      	b.n	80007a6 <__aeabi_fadd+0x302>
 80005b6:	000c      	movs	r4, r1
 80005b8:	1af3      	subs	r3, r6, r3
 80005ba:	e03d      	b.n	8000638 <__aeabi_fadd+0x194>
 80005bc:	2e00      	cmp	r6, #0
 80005be:	d01b      	beq.n	80005f8 <__aeabi_fadd+0x154>
 80005c0:	1e51      	subs	r1, r2, #1
 80005c2:	2a01      	cmp	r2, #1
 80005c4:	d100      	bne.n	80005c8 <__aeabi_fadd+0x124>
 80005c6:	e082      	b.n	80006ce <__aeabi_fadd+0x22a>
 80005c8:	2aff      	cmp	r2, #255	@ 0xff
 80005ca:	d03a      	beq.n	8000642 <__aeabi_fadd+0x19e>
 80005cc:	000a      	movs	r2, r1
 80005ce:	e7ab      	b.n	8000528 <__aeabi_fadd+0x84>
 80005d0:	0031      	movs	r1, r6
 80005d2:	2020      	movs	r0, #32
 80005d4:	40d1      	lsrs	r1, r2
 80005d6:	1a82      	subs	r2, r0, r2
 80005d8:	4096      	lsls	r6, r2
 80005da:	0032      	movs	r2, r6
 80005dc:	1e50      	subs	r0, r2, #1
 80005de:	4182      	sbcs	r2, r0
 80005e0:	430a      	orrs	r2, r1
 80005e2:	189b      	adds	r3, r3, r2
 80005e4:	015a      	lsls	r2, r3, #5
 80005e6:	d5b9      	bpl.n	800055c <__aeabi_fadd+0xb8>
 80005e8:	1c6a      	adds	r2, r5, #1
 80005ea:	2dfe      	cmp	r5, #254	@ 0xfe
 80005ec:	d175      	bne.n	80006da <__aeabi_fadd+0x236>
 80005ee:	20ff      	movs	r0, #255	@ 0xff
 80005f0:	2300      	movs	r3, #0
 80005f2:	e7c4      	b.n	800057e <__aeabi_fadd+0xda>
 80005f4:	000c      	movs	r4, r1
 80005f6:	0033      	movs	r3, r6
 80005f8:	08db      	lsrs	r3, r3, #3
 80005fa:	2aff      	cmp	r2, #255	@ 0xff
 80005fc:	d146      	bne.n	800068c <__aeabi_fadd+0x1e8>
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d0f5      	beq.n	80005ee <__aeabi_fadd+0x14a>
 8000602:	2280      	movs	r2, #128	@ 0x80
 8000604:	03d2      	lsls	r2, r2, #15
 8000606:	4313      	orrs	r3, r2
 8000608:	025b      	lsls	r3, r3, #9
 800060a:	20ff      	movs	r0, #255	@ 0xff
 800060c:	0a5b      	lsrs	r3, r3, #9
 800060e:	e7b6      	b.n	800057e <__aeabi_fadd+0xda>
 8000610:	019f      	lsls	r7, r3, #6
 8000612:	09bf      	lsrs	r7, r7, #6
 8000614:	0038      	movs	r0, r7
 8000616:	f000 fe19 	bl	800124c <__clzsi2>
 800061a:	3805      	subs	r0, #5
 800061c:	4087      	lsls	r7, r0
 800061e:	4285      	cmp	r5, r0
 8000620:	dc24      	bgt.n	800066c <__aeabi_fadd+0x1c8>
 8000622:	003b      	movs	r3, r7
 8000624:	2120      	movs	r1, #32
 8000626:	1b42      	subs	r2, r0, r5
 8000628:	3201      	adds	r2, #1
 800062a:	40d3      	lsrs	r3, r2
 800062c:	1a8a      	subs	r2, r1, r2
 800062e:	4097      	lsls	r7, r2
 8000630:	1e7a      	subs	r2, r7, #1
 8000632:	4197      	sbcs	r7, r2
 8000634:	2200      	movs	r2, #0
 8000636:	433b      	orrs	r3, r7
 8000638:	0759      	lsls	r1, r3, #29
 800063a:	d193      	bne.n	8000564 <__aeabi_fadd+0xc0>
 800063c:	e797      	b.n	800056e <__aeabi_fadd+0xca>
 800063e:	000c      	movs	r4, r1
 8000640:	0033      	movs	r3, r6
 8000642:	08db      	lsrs	r3, r3, #3
 8000644:	e7db      	b.n	80005fe <__aeabi_fadd+0x15a>
 8000646:	2a00      	cmp	r2, #0
 8000648:	d014      	beq.n	8000674 <__aeabi_fadd+0x1d0>
 800064a:	1b42      	subs	r2, r0, r5
 800064c:	2d00      	cmp	r5, #0
 800064e:	d14b      	bne.n	80006e8 <__aeabi_fadd+0x244>
 8000650:	2b00      	cmp	r3, #0
 8000652:	d0d0      	beq.n	80005f6 <__aeabi_fadd+0x152>
 8000654:	1e51      	subs	r1, r2, #1
 8000656:	2a01      	cmp	r2, #1
 8000658:	d100      	bne.n	800065c <__aeabi_fadd+0x1b8>
 800065a:	e09e      	b.n	800079a <__aeabi_fadd+0x2f6>
 800065c:	2aff      	cmp	r2, #255	@ 0xff
 800065e:	d0ef      	beq.n	8000640 <__aeabi_fadd+0x19c>
 8000660:	000a      	movs	r2, r1
 8000662:	2a1b      	cmp	r2, #27
 8000664:	dd5f      	ble.n	8000726 <__aeabi_fadd+0x282>
 8000666:	0002      	movs	r2, r0
 8000668:	1c73      	adds	r3, r6, #1
 800066a:	e77b      	b.n	8000564 <__aeabi_fadd+0xc0>
 800066c:	4b50      	ldr	r3, [pc, #320]	@ (80007b0 <__aeabi_fadd+0x30c>)
 800066e:	1a2a      	subs	r2, r5, r0
 8000670:	403b      	ands	r3, r7
 8000672:	e7e1      	b.n	8000638 <__aeabi_fadd+0x194>
 8000674:	21fe      	movs	r1, #254	@ 0xfe
 8000676:	1c6a      	adds	r2, r5, #1
 8000678:	4211      	tst	r1, r2
 800067a:	d13b      	bne.n	80006f4 <__aeabi_fadd+0x250>
 800067c:	2d00      	cmp	r5, #0
 800067e:	d15d      	bne.n	800073c <__aeabi_fadd+0x298>
 8000680:	2b00      	cmp	r3, #0
 8000682:	d07f      	beq.n	8000784 <__aeabi_fadd+0x2e0>
 8000684:	2e00      	cmp	r6, #0
 8000686:	d17f      	bne.n	8000788 <__aeabi_fadd+0x2e4>
 8000688:	2200      	movs	r2, #0
 800068a:	08db      	lsrs	r3, r3, #3
 800068c:	025b      	lsls	r3, r3, #9
 800068e:	0a5b      	lsrs	r3, r3, #9
 8000690:	b2d0      	uxtb	r0, r2
 8000692:	e774      	b.n	800057e <__aeabi_fadd+0xda>
 8000694:	28ff      	cmp	r0, #255	@ 0xff
 8000696:	d0d2      	beq.n	800063e <__aeabi_fadd+0x19a>
 8000698:	2480      	movs	r4, #128	@ 0x80
 800069a:	04e4      	lsls	r4, r4, #19
 800069c:	4323      	orrs	r3, r4
 800069e:	2401      	movs	r4, #1
 80006a0:	2a1b      	cmp	r2, #27
 80006a2:	dc07      	bgt.n	80006b4 <__aeabi_fadd+0x210>
 80006a4:	001c      	movs	r4, r3
 80006a6:	2520      	movs	r5, #32
 80006a8:	40d4      	lsrs	r4, r2
 80006aa:	1aaa      	subs	r2, r5, r2
 80006ac:	4093      	lsls	r3, r2
 80006ae:	1e5a      	subs	r2, r3, #1
 80006b0:	4193      	sbcs	r3, r2
 80006b2:	431c      	orrs	r4, r3
 80006b4:	1b33      	subs	r3, r6, r4
 80006b6:	0005      	movs	r5, r0
 80006b8:	000c      	movs	r4, r1
 80006ba:	e74d      	b.n	8000558 <__aeabi_fadd+0xb4>
 80006bc:	1b9f      	subs	r7, r3, r6
 80006be:	017a      	lsls	r2, r7, #5
 80006c0:	d422      	bmi.n	8000708 <__aeabi_fadd+0x264>
 80006c2:	2f00      	cmp	r7, #0
 80006c4:	d1a6      	bne.n	8000614 <__aeabi_fadd+0x170>
 80006c6:	2400      	movs	r4, #0
 80006c8:	2000      	movs	r0, #0
 80006ca:	2300      	movs	r3, #0
 80006cc:	e757      	b.n	800057e <__aeabi_fadd+0xda>
 80006ce:	199b      	adds	r3, r3, r6
 80006d0:	2501      	movs	r5, #1
 80006d2:	3201      	adds	r2, #1
 80006d4:	0159      	lsls	r1, r3, #5
 80006d6:	d400      	bmi.n	80006da <__aeabi_fadd+0x236>
 80006d8:	e740      	b.n	800055c <__aeabi_fadd+0xb8>
 80006da:	2101      	movs	r1, #1
 80006dc:	4835      	ldr	r0, [pc, #212]	@ (80007b4 <__aeabi_fadd+0x310>)
 80006de:	4019      	ands	r1, r3
 80006e0:	085b      	lsrs	r3, r3, #1
 80006e2:	4003      	ands	r3, r0
 80006e4:	430b      	orrs	r3, r1
 80006e6:	e7a7      	b.n	8000638 <__aeabi_fadd+0x194>
 80006e8:	28ff      	cmp	r0, #255	@ 0xff
 80006ea:	d0a9      	beq.n	8000640 <__aeabi_fadd+0x19c>
 80006ec:	2180      	movs	r1, #128	@ 0x80
 80006ee:	04c9      	lsls	r1, r1, #19
 80006f0:	430b      	orrs	r3, r1
 80006f2:	e7b6      	b.n	8000662 <__aeabi_fadd+0x1be>
 80006f4:	2aff      	cmp	r2, #255	@ 0xff
 80006f6:	d100      	bne.n	80006fa <__aeabi_fadd+0x256>
 80006f8:	e779      	b.n	80005ee <__aeabi_fadd+0x14a>
 80006fa:	199b      	adds	r3, r3, r6
 80006fc:	085b      	lsrs	r3, r3, #1
 80006fe:	0759      	lsls	r1, r3, #29
 8000700:	d000      	beq.n	8000704 <__aeabi_fadd+0x260>
 8000702:	e72f      	b.n	8000564 <__aeabi_fadd+0xc0>
 8000704:	08db      	lsrs	r3, r3, #3
 8000706:	e7c1      	b.n	800068c <__aeabi_fadd+0x1e8>
 8000708:	000c      	movs	r4, r1
 800070a:	1af7      	subs	r7, r6, r3
 800070c:	e782      	b.n	8000614 <__aeabi_fadd+0x170>
 800070e:	2b00      	cmp	r3, #0
 8000710:	d12c      	bne.n	800076c <__aeabi_fadd+0x2c8>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d193      	bne.n	800063e <__aeabi_fadd+0x19a>
 8000716:	2380      	movs	r3, #128	@ 0x80
 8000718:	2400      	movs	r4, #0
 800071a:	20ff      	movs	r0, #255	@ 0xff
 800071c:	03db      	lsls	r3, r3, #15
 800071e:	e72e      	b.n	800057e <__aeabi_fadd+0xda>
 8000720:	2501      	movs	r5, #1
 8000722:	1b9b      	subs	r3, r3, r6
 8000724:	e718      	b.n	8000558 <__aeabi_fadd+0xb4>
 8000726:	0019      	movs	r1, r3
 8000728:	2520      	movs	r5, #32
 800072a:	40d1      	lsrs	r1, r2
 800072c:	1aaa      	subs	r2, r5, r2
 800072e:	4093      	lsls	r3, r2
 8000730:	1e5a      	subs	r2, r3, #1
 8000732:	4193      	sbcs	r3, r2
 8000734:	430b      	orrs	r3, r1
 8000736:	0005      	movs	r5, r0
 8000738:	199b      	adds	r3, r3, r6
 800073a:	e753      	b.n	80005e4 <__aeabi_fadd+0x140>
 800073c:	2b00      	cmp	r3, #0
 800073e:	d100      	bne.n	8000742 <__aeabi_fadd+0x29e>
 8000740:	e77e      	b.n	8000640 <__aeabi_fadd+0x19c>
 8000742:	2e00      	cmp	r6, #0
 8000744:	d100      	bne.n	8000748 <__aeabi_fadd+0x2a4>
 8000746:	e77c      	b.n	8000642 <__aeabi_fadd+0x19e>
 8000748:	2280      	movs	r2, #128	@ 0x80
 800074a:	03d2      	lsls	r2, r2, #15
 800074c:	4591      	cmp	r9, r2
 800074e:	d302      	bcc.n	8000756 <__aeabi_fadd+0x2b2>
 8000750:	4594      	cmp	ip, r2
 8000752:	d200      	bcs.n	8000756 <__aeabi_fadd+0x2b2>
 8000754:	0033      	movs	r3, r6
 8000756:	08db      	lsrs	r3, r3, #3
 8000758:	e753      	b.n	8000602 <__aeabi_fadd+0x15e>
 800075a:	000c      	movs	r4, r1
 800075c:	1af3      	subs	r3, r6, r3
 800075e:	3501      	adds	r5, #1
 8000760:	e6fa      	b.n	8000558 <__aeabi_fadd+0xb4>
 8000762:	2e00      	cmp	r6, #0
 8000764:	d0af      	beq.n	80006c6 <__aeabi_fadd+0x222>
 8000766:	000c      	movs	r4, r1
 8000768:	0033      	movs	r3, r6
 800076a:	e78d      	b.n	8000688 <__aeabi_fadd+0x1e4>
 800076c:	2e00      	cmp	r6, #0
 800076e:	d100      	bne.n	8000772 <__aeabi_fadd+0x2ce>
 8000770:	e767      	b.n	8000642 <__aeabi_fadd+0x19e>
 8000772:	2280      	movs	r2, #128	@ 0x80
 8000774:	03d2      	lsls	r2, r2, #15
 8000776:	4591      	cmp	r9, r2
 8000778:	d3ed      	bcc.n	8000756 <__aeabi_fadd+0x2b2>
 800077a:	4594      	cmp	ip, r2
 800077c:	d2eb      	bcs.n	8000756 <__aeabi_fadd+0x2b2>
 800077e:	000c      	movs	r4, r1
 8000780:	0033      	movs	r3, r6
 8000782:	e7e8      	b.n	8000756 <__aeabi_fadd+0x2b2>
 8000784:	0033      	movs	r3, r6
 8000786:	e77f      	b.n	8000688 <__aeabi_fadd+0x1e4>
 8000788:	199b      	adds	r3, r3, r6
 800078a:	2200      	movs	r2, #0
 800078c:	0159      	lsls	r1, r3, #5
 800078e:	d5b9      	bpl.n	8000704 <__aeabi_fadd+0x260>
 8000790:	4a07      	ldr	r2, [pc, #28]	@ (80007b0 <__aeabi_fadd+0x30c>)
 8000792:	4013      	ands	r3, r2
 8000794:	08db      	lsrs	r3, r3, #3
 8000796:	2201      	movs	r2, #1
 8000798:	e778      	b.n	800068c <__aeabi_fadd+0x1e8>
 800079a:	199b      	adds	r3, r3, r6
 800079c:	3201      	adds	r2, #1
 800079e:	3501      	adds	r5, #1
 80007a0:	0159      	lsls	r1, r3, #5
 80007a2:	d49a      	bmi.n	80006da <__aeabi_fadd+0x236>
 80007a4:	e6da      	b.n	800055c <__aeabi_fadd+0xb8>
 80007a6:	1e03      	subs	r3, r0, #0
 80007a8:	d08d      	beq.n	80006c6 <__aeabi_fadd+0x222>
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	e76e      	b.n	800068c <__aeabi_fadd+0x1e8>
 80007ae:	46c0      	nop			@ (mov r8, r8)
 80007b0:	fbffffff 	.word	0xfbffffff
 80007b4:	7dffffff 	.word	0x7dffffff

080007b8 <__aeabi_fdiv>:
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	46d6      	mov	lr, sl
 80007c0:	0244      	lsls	r4, r0, #9
 80007c2:	b5c0      	push	{r6, r7, lr}
 80007c4:	0047      	lsls	r7, r0, #1
 80007c6:	1c0e      	adds	r6, r1, #0
 80007c8:	0a64      	lsrs	r4, r4, #9
 80007ca:	0e3f      	lsrs	r7, r7, #24
 80007cc:	0fc5      	lsrs	r5, r0, #31
 80007ce:	2f00      	cmp	r7, #0
 80007d0:	d03c      	beq.n	800084c <__aeabi_fdiv+0x94>
 80007d2:	2fff      	cmp	r7, #255	@ 0xff
 80007d4:	d042      	beq.n	800085c <__aeabi_fdiv+0xa4>
 80007d6:	2300      	movs	r3, #0
 80007d8:	2280      	movs	r2, #128	@ 0x80
 80007da:	4699      	mov	r9, r3
 80007dc:	469a      	mov	sl, r3
 80007de:	00e4      	lsls	r4, r4, #3
 80007e0:	04d2      	lsls	r2, r2, #19
 80007e2:	4314      	orrs	r4, r2
 80007e4:	3f7f      	subs	r7, #127	@ 0x7f
 80007e6:	0273      	lsls	r3, r6, #9
 80007e8:	0a5b      	lsrs	r3, r3, #9
 80007ea:	4698      	mov	r8, r3
 80007ec:	0073      	lsls	r3, r6, #1
 80007ee:	0e1b      	lsrs	r3, r3, #24
 80007f0:	0ff6      	lsrs	r6, r6, #31
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d01b      	beq.n	800082e <__aeabi_fdiv+0x76>
 80007f6:	2bff      	cmp	r3, #255	@ 0xff
 80007f8:	d013      	beq.n	8000822 <__aeabi_fdiv+0x6a>
 80007fa:	4642      	mov	r2, r8
 80007fc:	2180      	movs	r1, #128	@ 0x80
 80007fe:	00d2      	lsls	r2, r2, #3
 8000800:	04c9      	lsls	r1, r1, #19
 8000802:	4311      	orrs	r1, r2
 8000804:	4688      	mov	r8, r1
 8000806:	2000      	movs	r0, #0
 8000808:	3b7f      	subs	r3, #127	@ 0x7f
 800080a:	0029      	movs	r1, r5
 800080c:	1aff      	subs	r7, r7, r3
 800080e:	464b      	mov	r3, r9
 8000810:	4071      	eors	r1, r6
 8000812:	b2c9      	uxtb	r1, r1
 8000814:	2b0f      	cmp	r3, #15
 8000816:	d900      	bls.n	800081a <__aeabi_fdiv+0x62>
 8000818:	e0b5      	b.n	8000986 <__aeabi_fdiv+0x1ce>
 800081a:	4a74      	ldr	r2, [pc, #464]	@ (80009ec <__aeabi_fdiv+0x234>)
 800081c:	009b      	lsls	r3, r3, #2
 800081e:	58d3      	ldr	r3, [r2, r3]
 8000820:	469f      	mov	pc, r3
 8000822:	4643      	mov	r3, r8
 8000824:	2b00      	cmp	r3, #0
 8000826:	d13f      	bne.n	80008a8 <__aeabi_fdiv+0xf0>
 8000828:	3fff      	subs	r7, #255	@ 0xff
 800082a:	3302      	adds	r3, #2
 800082c:	e003      	b.n	8000836 <__aeabi_fdiv+0x7e>
 800082e:	4643      	mov	r3, r8
 8000830:	2b00      	cmp	r3, #0
 8000832:	d12d      	bne.n	8000890 <__aeabi_fdiv+0xd8>
 8000834:	2301      	movs	r3, #1
 8000836:	0029      	movs	r1, r5
 8000838:	464a      	mov	r2, r9
 800083a:	4071      	eors	r1, r6
 800083c:	b2c9      	uxtb	r1, r1
 800083e:	431a      	orrs	r2, r3
 8000840:	2a0e      	cmp	r2, #14
 8000842:	d838      	bhi.n	80008b6 <__aeabi_fdiv+0xfe>
 8000844:	486a      	ldr	r0, [pc, #424]	@ (80009f0 <__aeabi_fdiv+0x238>)
 8000846:	0092      	lsls	r2, r2, #2
 8000848:	5882      	ldr	r2, [r0, r2]
 800084a:	4697      	mov	pc, r2
 800084c:	2c00      	cmp	r4, #0
 800084e:	d113      	bne.n	8000878 <__aeabi_fdiv+0xc0>
 8000850:	2304      	movs	r3, #4
 8000852:	4699      	mov	r9, r3
 8000854:	3b03      	subs	r3, #3
 8000856:	2700      	movs	r7, #0
 8000858:	469a      	mov	sl, r3
 800085a:	e7c4      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 800085c:	2c00      	cmp	r4, #0
 800085e:	d105      	bne.n	800086c <__aeabi_fdiv+0xb4>
 8000860:	2308      	movs	r3, #8
 8000862:	4699      	mov	r9, r3
 8000864:	3b06      	subs	r3, #6
 8000866:	27ff      	movs	r7, #255	@ 0xff
 8000868:	469a      	mov	sl, r3
 800086a:	e7bc      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 800086c:	230c      	movs	r3, #12
 800086e:	4699      	mov	r9, r3
 8000870:	3b09      	subs	r3, #9
 8000872:	27ff      	movs	r7, #255	@ 0xff
 8000874:	469a      	mov	sl, r3
 8000876:	e7b6      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 8000878:	0020      	movs	r0, r4
 800087a:	f000 fce7 	bl	800124c <__clzsi2>
 800087e:	2776      	movs	r7, #118	@ 0x76
 8000880:	1f43      	subs	r3, r0, #5
 8000882:	409c      	lsls	r4, r3
 8000884:	2300      	movs	r3, #0
 8000886:	427f      	negs	r7, r7
 8000888:	4699      	mov	r9, r3
 800088a:	469a      	mov	sl, r3
 800088c:	1a3f      	subs	r7, r7, r0
 800088e:	e7aa      	b.n	80007e6 <__aeabi_fdiv+0x2e>
 8000890:	4640      	mov	r0, r8
 8000892:	f000 fcdb 	bl	800124c <__clzsi2>
 8000896:	4642      	mov	r2, r8
 8000898:	1f43      	subs	r3, r0, #5
 800089a:	409a      	lsls	r2, r3
 800089c:	2376      	movs	r3, #118	@ 0x76
 800089e:	425b      	negs	r3, r3
 80008a0:	1a1b      	subs	r3, r3, r0
 80008a2:	4690      	mov	r8, r2
 80008a4:	2000      	movs	r0, #0
 80008a6:	e7b0      	b.n	800080a <__aeabi_fdiv+0x52>
 80008a8:	2303      	movs	r3, #3
 80008aa:	464a      	mov	r2, r9
 80008ac:	431a      	orrs	r2, r3
 80008ae:	4691      	mov	r9, r2
 80008b0:	2003      	movs	r0, #3
 80008b2:	33fc      	adds	r3, #252	@ 0xfc
 80008b4:	e7a9      	b.n	800080a <__aeabi_fdiv+0x52>
 80008b6:	000d      	movs	r5, r1
 80008b8:	20ff      	movs	r0, #255	@ 0xff
 80008ba:	2200      	movs	r2, #0
 80008bc:	05c0      	lsls	r0, r0, #23
 80008be:	07ed      	lsls	r5, r5, #31
 80008c0:	4310      	orrs	r0, r2
 80008c2:	4328      	orrs	r0, r5
 80008c4:	bce0      	pop	{r5, r6, r7}
 80008c6:	46ba      	mov	sl, r7
 80008c8:	46b1      	mov	r9, r6
 80008ca:	46a8      	mov	r8, r5
 80008cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ce:	000d      	movs	r5, r1
 80008d0:	2000      	movs	r0, #0
 80008d2:	2200      	movs	r2, #0
 80008d4:	e7f2      	b.n	80008bc <__aeabi_fdiv+0x104>
 80008d6:	4653      	mov	r3, sl
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d0ed      	beq.n	80008b8 <__aeabi_fdiv+0x100>
 80008dc:	2b03      	cmp	r3, #3
 80008de:	d033      	beq.n	8000948 <__aeabi_fdiv+0x190>
 80008e0:	46a0      	mov	r8, r4
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d105      	bne.n	80008f2 <__aeabi_fdiv+0x13a>
 80008e6:	2000      	movs	r0, #0
 80008e8:	2200      	movs	r2, #0
 80008ea:	e7e7      	b.n	80008bc <__aeabi_fdiv+0x104>
 80008ec:	0035      	movs	r5, r6
 80008ee:	2803      	cmp	r0, #3
 80008f0:	d07a      	beq.n	80009e8 <__aeabi_fdiv+0x230>
 80008f2:	003b      	movs	r3, r7
 80008f4:	337f      	adds	r3, #127	@ 0x7f
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	dd2d      	ble.n	8000956 <__aeabi_fdiv+0x19e>
 80008fa:	4642      	mov	r2, r8
 80008fc:	0752      	lsls	r2, r2, #29
 80008fe:	d007      	beq.n	8000910 <__aeabi_fdiv+0x158>
 8000900:	220f      	movs	r2, #15
 8000902:	4641      	mov	r1, r8
 8000904:	400a      	ands	r2, r1
 8000906:	2a04      	cmp	r2, #4
 8000908:	d002      	beq.n	8000910 <__aeabi_fdiv+0x158>
 800090a:	2204      	movs	r2, #4
 800090c:	4694      	mov	ip, r2
 800090e:	44e0      	add	r8, ip
 8000910:	4642      	mov	r2, r8
 8000912:	0112      	lsls	r2, r2, #4
 8000914:	d505      	bpl.n	8000922 <__aeabi_fdiv+0x16a>
 8000916:	4642      	mov	r2, r8
 8000918:	4b36      	ldr	r3, [pc, #216]	@ (80009f4 <__aeabi_fdiv+0x23c>)
 800091a:	401a      	ands	r2, r3
 800091c:	003b      	movs	r3, r7
 800091e:	4690      	mov	r8, r2
 8000920:	3380      	adds	r3, #128	@ 0x80
 8000922:	2bfe      	cmp	r3, #254	@ 0xfe
 8000924:	dcc8      	bgt.n	80008b8 <__aeabi_fdiv+0x100>
 8000926:	4642      	mov	r2, r8
 8000928:	0192      	lsls	r2, r2, #6
 800092a:	0a52      	lsrs	r2, r2, #9
 800092c:	b2d8      	uxtb	r0, r3
 800092e:	e7c5      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000930:	2280      	movs	r2, #128	@ 0x80
 8000932:	2500      	movs	r5, #0
 8000934:	20ff      	movs	r0, #255	@ 0xff
 8000936:	03d2      	lsls	r2, r2, #15
 8000938:	e7c0      	b.n	80008bc <__aeabi_fdiv+0x104>
 800093a:	2280      	movs	r2, #128	@ 0x80
 800093c:	03d2      	lsls	r2, r2, #15
 800093e:	4214      	tst	r4, r2
 8000940:	d002      	beq.n	8000948 <__aeabi_fdiv+0x190>
 8000942:	4643      	mov	r3, r8
 8000944:	4213      	tst	r3, r2
 8000946:	d049      	beq.n	80009dc <__aeabi_fdiv+0x224>
 8000948:	2280      	movs	r2, #128	@ 0x80
 800094a:	03d2      	lsls	r2, r2, #15
 800094c:	4322      	orrs	r2, r4
 800094e:	0252      	lsls	r2, r2, #9
 8000950:	20ff      	movs	r0, #255	@ 0xff
 8000952:	0a52      	lsrs	r2, r2, #9
 8000954:	e7b2      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000956:	2201      	movs	r2, #1
 8000958:	1ad3      	subs	r3, r2, r3
 800095a:	2b1b      	cmp	r3, #27
 800095c:	dcc3      	bgt.n	80008e6 <__aeabi_fdiv+0x12e>
 800095e:	4642      	mov	r2, r8
 8000960:	40da      	lsrs	r2, r3
 8000962:	4643      	mov	r3, r8
 8000964:	379e      	adds	r7, #158	@ 0x9e
 8000966:	40bb      	lsls	r3, r7
 8000968:	1e59      	subs	r1, r3, #1
 800096a:	418b      	sbcs	r3, r1
 800096c:	431a      	orrs	r2, r3
 800096e:	0753      	lsls	r3, r2, #29
 8000970:	d004      	beq.n	800097c <__aeabi_fdiv+0x1c4>
 8000972:	230f      	movs	r3, #15
 8000974:	4013      	ands	r3, r2
 8000976:	2b04      	cmp	r3, #4
 8000978:	d000      	beq.n	800097c <__aeabi_fdiv+0x1c4>
 800097a:	3204      	adds	r2, #4
 800097c:	0153      	lsls	r3, r2, #5
 800097e:	d529      	bpl.n	80009d4 <__aeabi_fdiv+0x21c>
 8000980:	2001      	movs	r0, #1
 8000982:	2200      	movs	r2, #0
 8000984:	e79a      	b.n	80008bc <__aeabi_fdiv+0x104>
 8000986:	4642      	mov	r2, r8
 8000988:	0163      	lsls	r3, r4, #5
 800098a:	0155      	lsls	r5, r2, #5
 800098c:	42ab      	cmp	r3, r5
 800098e:	d215      	bcs.n	80009bc <__aeabi_fdiv+0x204>
 8000990:	201b      	movs	r0, #27
 8000992:	2200      	movs	r2, #0
 8000994:	3f01      	subs	r7, #1
 8000996:	2601      	movs	r6, #1
 8000998:	001c      	movs	r4, r3
 800099a:	0052      	lsls	r2, r2, #1
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	2c00      	cmp	r4, #0
 80009a0:	db01      	blt.n	80009a6 <__aeabi_fdiv+0x1ee>
 80009a2:	429d      	cmp	r5, r3
 80009a4:	d801      	bhi.n	80009aa <__aeabi_fdiv+0x1f2>
 80009a6:	1b5b      	subs	r3, r3, r5
 80009a8:	4332      	orrs	r2, r6
 80009aa:	3801      	subs	r0, #1
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d1f3      	bne.n	8000998 <__aeabi_fdiv+0x1e0>
 80009b0:	1e58      	subs	r0, r3, #1
 80009b2:	4183      	sbcs	r3, r0
 80009b4:	4313      	orrs	r3, r2
 80009b6:	4698      	mov	r8, r3
 80009b8:	000d      	movs	r5, r1
 80009ba:	e79a      	b.n	80008f2 <__aeabi_fdiv+0x13a>
 80009bc:	201a      	movs	r0, #26
 80009be:	2201      	movs	r2, #1
 80009c0:	1b5b      	subs	r3, r3, r5
 80009c2:	e7e8      	b.n	8000996 <__aeabi_fdiv+0x1de>
 80009c4:	3b02      	subs	r3, #2
 80009c6:	425a      	negs	r2, r3
 80009c8:	4153      	adcs	r3, r2
 80009ca:	425b      	negs	r3, r3
 80009cc:	0035      	movs	r5, r6
 80009ce:	2200      	movs	r2, #0
 80009d0:	b2d8      	uxtb	r0, r3
 80009d2:	e773      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009d4:	0192      	lsls	r2, r2, #6
 80009d6:	2000      	movs	r0, #0
 80009d8:	0a52      	lsrs	r2, r2, #9
 80009da:	e76f      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009dc:	431a      	orrs	r2, r3
 80009de:	0252      	lsls	r2, r2, #9
 80009e0:	0035      	movs	r5, r6
 80009e2:	20ff      	movs	r0, #255	@ 0xff
 80009e4:	0a52      	lsrs	r2, r2, #9
 80009e6:	e769      	b.n	80008bc <__aeabi_fdiv+0x104>
 80009e8:	4644      	mov	r4, r8
 80009ea:	e7ad      	b.n	8000948 <__aeabi_fdiv+0x190>
 80009ec:	08006ce0 	.word	0x08006ce0
 80009f0:	08006d20 	.word	0x08006d20
 80009f4:	f7ffffff 	.word	0xf7ffffff

080009f8 <__eqsf2>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	0042      	lsls	r2, r0, #1
 80009fc:	024e      	lsls	r6, r1, #9
 80009fe:	004c      	lsls	r4, r1, #1
 8000a00:	0245      	lsls	r5, r0, #9
 8000a02:	0a6d      	lsrs	r5, r5, #9
 8000a04:	0e12      	lsrs	r2, r2, #24
 8000a06:	0fc3      	lsrs	r3, r0, #31
 8000a08:	0a76      	lsrs	r6, r6, #9
 8000a0a:	0e24      	lsrs	r4, r4, #24
 8000a0c:	0fc9      	lsrs	r1, r1, #31
 8000a0e:	2aff      	cmp	r2, #255	@ 0xff
 8000a10:	d010      	beq.n	8000a34 <__eqsf2+0x3c>
 8000a12:	2cff      	cmp	r4, #255	@ 0xff
 8000a14:	d00c      	beq.n	8000a30 <__eqsf2+0x38>
 8000a16:	2001      	movs	r0, #1
 8000a18:	42a2      	cmp	r2, r4
 8000a1a:	d10a      	bne.n	8000a32 <__eqsf2+0x3a>
 8000a1c:	42b5      	cmp	r5, r6
 8000a1e:	d108      	bne.n	8000a32 <__eqsf2+0x3a>
 8000a20:	428b      	cmp	r3, r1
 8000a22:	d00f      	beq.n	8000a44 <__eqsf2+0x4c>
 8000a24:	2a00      	cmp	r2, #0
 8000a26:	d104      	bne.n	8000a32 <__eqsf2+0x3a>
 8000a28:	0028      	movs	r0, r5
 8000a2a:	1e43      	subs	r3, r0, #1
 8000a2c:	4198      	sbcs	r0, r3
 8000a2e:	e000      	b.n	8000a32 <__eqsf2+0x3a>
 8000a30:	2001      	movs	r0, #1
 8000a32:	bd70      	pop	{r4, r5, r6, pc}
 8000a34:	2001      	movs	r0, #1
 8000a36:	2cff      	cmp	r4, #255	@ 0xff
 8000a38:	d1fb      	bne.n	8000a32 <__eqsf2+0x3a>
 8000a3a:	4335      	orrs	r5, r6
 8000a3c:	d1f9      	bne.n	8000a32 <__eqsf2+0x3a>
 8000a3e:	404b      	eors	r3, r1
 8000a40:	0018      	movs	r0, r3
 8000a42:	e7f6      	b.n	8000a32 <__eqsf2+0x3a>
 8000a44:	2000      	movs	r0, #0
 8000a46:	e7f4      	b.n	8000a32 <__eqsf2+0x3a>

08000a48 <__gesf2>:
 8000a48:	b530      	push	{r4, r5, lr}
 8000a4a:	0042      	lsls	r2, r0, #1
 8000a4c:	0244      	lsls	r4, r0, #9
 8000a4e:	024d      	lsls	r5, r1, #9
 8000a50:	0fc3      	lsrs	r3, r0, #31
 8000a52:	0048      	lsls	r0, r1, #1
 8000a54:	0a64      	lsrs	r4, r4, #9
 8000a56:	0e12      	lsrs	r2, r2, #24
 8000a58:	0a6d      	lsrs	r5, r5, #9
 8000a5a:	0e00      	lsrs	r0, r0, #24
 8000a5c:	0fc9      	lsrs	r1, r1, #31
 8000a5e:	2aff      	cmp	r2, #255	@ 0xff
 8000a60:	d019      	beq.n	8000a96 <__gesf2+0x4e>
 8000a62:	28ff      	cmp	r0, #255	@ 0xff
 8000a64:	d00b      	beq.n	8000a7e <__gesf2+0x36>
 8000a66:	2a00      	cmp	r2, #0
 8000a68:	d11e      	bne.n	8000aa8 <__gesf2+0x60>
 8000a6a:	2800      	cmp	r0, #0
 8000a6c:	d10b      	bne.n	8000a86 <__gesf2+0x3e>
 8000a6e:	2d00      	cmp	r5, #0
 8000a70:	d027      	beq.n	8000ac2 <__gesf2+0x7a>
 8000a72:	2c00      	cmp	r4, #0
 8000a74:	d134      	bne.n	8000ae0 <__gesf2+0x98>
 8000a76:	2900      	cmp	r1, #0
 8000a78:	d02f      	beq.n	8000ada <__gesf2+0x92>
 8000a7a:	0008      	movs	r0, r1
 8000a7c:	bd30      	pop	{r4, r5, pc}
 8000a7e:	2d00      	cmp	r5, #0
 8000a80:	d128      	bne.n	8000ad4 <__gesf2+0x8c>
 8000a82:	2a00      	cmp	r2, #0
 8000a84:	d101      	bne.n	8000a8a <__gesf2+0x42>
 8000a86:	2c00      	cmp	r4, #0
 8000a88:	d0f5      	beq.n	8000a76 <__gesf2+0x2e>
 8000a8a:	428b      	cmp	r3, r1
 8000a8c:	d107      	bne.n	8000a9e <__gesf2+0x56>
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d023      	beq.n	8000ada <__gesf2+0x92>
 8000a92:	0018      	movs	r0, r3
 8000a94:	e7f2      	b.n	8000a7c <__gesf2+0x34>
 8000a96:	2c00      	cmp	r4, #0
 8000a98:	d11c      	bne.n	8000ad4 <__gesf2+0x8c>
 8000a9a:	28ff      	cmp	r0, #255	@ 0xff
 8000a9c:	d014      	beq.n	8000ac8 <__gesf2+0x80>
 8000a9e:	1e58      	subs	r0, r3, #1
 8000aa0:	2302      	movs	r3, #2
 8000aa2:	4018      	ands	r0, r3
 8000aa4:	3801      	subs	r0, #1
 8000aa6:	e7e9      	b.n	8000a7c <__gesf2+0x34>
 8000aa8:	2800      	cmp	r0, #0
 8000aaa:	d0f8      	beq.n	8000a9e <__gesf2+0x56>
 8000aac:	428b      	cmp	r3, r1
 8000aae:	d1f6      	bne.n	8000a9e <__gesf2+0x56>
 8000ab0:	4282      	cmp	r2, r0
 8000ab2:	dcf4      	bgt.n	8000a9e <__gesf2+0x56>
 8000ab4:	dbeb      	blt.n	8000a8e <__gesf2+0x46>
 8000ab6:	42ac      	cmp	r4, r5
 8000ab8:	d8f1      	bhi.n	8000a9e <__gesf2+0x56>
 8000aba:	2000      	movs	r0, #0
 8000abc:	42ac      	cmp	r4, r5
 8000abe:	d2dd      	bcs.n	8000a7c <__gesf2+0x34>
 8000ac0:	e7e5      	b.n	8000a8e <__gesf2+0x46>
 8000ac2:	2c00      	cmp	r4, #0
 8000ac4:	d0da      	beq.n	8000a7c <__gesf2+0x34>
 8000ac6:	e7ea      	b.n	8000a9e <__gesf2+0x56>
 8000ac8:	2d00      	cmp	r5, #0
 8000aca:	d103      	bne.n	8000ad4 <__gesf2+0x8c>
 8000acc:	428b      	cmp	r3, r1
 8000ace:	d1e6      	bne.n	8000a9e <__gesf2+0x56>
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	e7d3      	b.n	8000a7c <__gesf2+0x34>
 8000ad4:	2002      	movs	r0, #2
 8000ad6:	4240      	negs	r0, r0
 8000ad8:	e7d0      	b.n	8000a7c <__gesf2+0x34>
 8000ada:	2001      	movs	r0, #1
 8000adc:	4240      	negs	r0, r0
 8000ade:	e7cd      	b.n	8000a7c <__gesf2+0x34>
 8000ae0:	428b      	cmp	r3, r1
 8000ae2:	d0e8      	beq.n	8000ab6 <__gesf2+0x6e>
 8000ae4:	e7db      	b.n	8000a9e <__gesf2+0x56>
 8000ae6:	46c0      	nop			@ (mov r8, r8)

08000ae8 <__lesf2>:
 8000ae8:	b530      	push	{r4, r5, lr}
 8000aea:	0042      	lsls	r2, r0, #1
 8000aec:	0244      	lsls	r4, r0, #9
 8000aee:	024d      	lsls	r5, r1, #9
 8000af0:	0fc3      	lsrs	r3, r0, #31
 8000af2:	0048      	lsls	r0, r1, #1
 8000af4:	0a64      	lsrs	r4, r4, #9
 8000af6:	0e12      	lsrs	r2, r2, #24
 8000af8:	0a6d      	lsrs	r5, r5, #9
 8000afa:	0e00      	lsrs	r0, r0, #24
 8000afc:	0fc9      	lsrs	r1, r1, #31
 8000afe:	2aff      	cmp	r2, #255	@ 0xff
 8000b00:	d01a      	beq.n	8000b38 <__lesf2+0x50>
 8000b02:	28ff      	cmp	r0, #255	@ 0xff
 8000b04:	d00e      	beq.n	8000b24 <__lesf2+0x3c>
 8000b06:	2a00      	cmp	r2, #0
 8000b08:	d11e      	bne.n	8000b48 <__lesf2+0x60>
 8000b0a:	2800      	cmp	r0, #0
 8000b0c:	d10e      	bne.n	8000b2c <__lesf2+0x44>
 8000b0e:	2d00      	cmp	r5, #0
 8000b10:	d02a      	beq.n	8000b68 <__lesf2+0x80>
 8000b12:	2c00      	cmp	r4, #0
 8000b14:	d00c      	beq.n	8000b30 <__lesf2+0x48>
 8000b16:	428b      	cmp	r3, r1
 8000b18:	d01d      	beq.n	8000b56 <__lesf2+0x6e>
 8000b1a:	1e58      	subs	r0, r3, #1
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	4018      	ands	r0, r3
 8000b20:	3801      	subs	r0, #1
 8000b22:	e010      	b.n	8000b46 <__lesf2+0x5e>
 8000b24:	2d00      	cmp	r5, #0
 8000b26:	d10d      	bne.n	8000b44 <__lesf2+0x5c>
 8000b28:	2a00      	cmp	r2, #0
 8000b2a:	d120      	bne.n	8000b6e <__lesf2+0x86>
 8000b2c:	2c00      	cmp	r4, #0
 8000b2e:	d11e      	bne.n	8000b6e <__lesf2+0x86>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	d023      	beq.n	8000b7c <__lesf2+0x94>
 8000b34:	0008      	movs	r0, r1
 8000b36:	e006      	b.n	8000b46 <__lesf2+0x5e>
 8000b38:	2c00      	cmp	r4, #0
 8000b3a:	d103      	bne.n	8000b44 <__lesf2+0x5c>
 8000b3c:	28ff      	cmp	r0, #255	@ 0xff
 8000b3e:	d1ec      	bne.n	8000b1a <__lesf2+0x32>
 8000b40:	2d00      	cmp	r5, #0
 8000b42:	d017      	beq.n	8000b74 <__lesf2+0x8c>
 8000b44:	2002      	movs	r0, #2
 8000b46:	bd30      	pop	{r4, r5, pc}
 8000b48:	2800      	cmp	r0, #0
 8000b4a:	d0e6      	beq.n	8000b1a <__lesf2+0x32>
 8000b4c:	428b      	cmp	r3, r1
 8000b4e:	d1e4      	bne.n	8000b1a <__lesf2+0x32>
 8000b50:	4282      	cmp	r2, r0
 8000b52:	dce2      	bgt.n	8000b1a <__lesf2+0x32>
 8000b54:	db04      	blt.n	8000b60 <__lesf2+0x78>
 8000b56:	42ac      	cmp	r4, r5
 8000b58:	d8df      	bhi.n	8000b1a <__lesf2+0x32>
 8000b5a:	2000      	movs	r0, #0
 8000b5c:	42ac      	cmp	r4, r5
 8000b5e:	d2f2      	bcs.n	8000b46 <__lesf2+0x5e>
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d00b      	beq.n	8000b7c <__lesf2+0x94>
 8000b64:	0018      	movs	r0, r3
 8000b66:	e7ee      	b.n	8000b46 <__lesf2+0x5e>
 8000b68:	2c00      	cmp	r4, #0
 8000b6a:	d0ec      	beq.n	8000b46 <__lesf2+0x5e>
 8000b6c:	e7d5      	b.n	8000b1a <__lesf2+0x32>
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d1d3      	bne.n	8000b1a <__lesf2+0x32>
 8000b72:	e7f5      	b.n	8000b60 <__lesf2+0x78>
 8000b74:	2000      	movs	r0, #0
 8000b76:	428b      	cmp	r3, r1
 8000b78:	d0e5      	beq.n	8000b46 <__lesf2+0x5e>
 8000b7a:	e7ce      	b.n	8000b1a <__lesf2+0x32>
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	4240      	negs	r0, r0
 8000b80:	e7e1      	b.n	8000b46 <__lesf2+0x5e>
 8000b82:	46c0      	nop			@ (mov r8, r8)

08000b84 <__aeabi_fmul>:
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	464f      	mov	r7, r9
 8000b88:	4646      	mov	r6, r8
 8000b8a:	46d6      	mov	lr, sl
 8000b8c:	0243      	lsls	r3, r0, #9
 8000b8e:	0a5b      	lsrs	r3, r3, #9
 8000b90:	0045      	lsls	r5, r0, #1
 8000b92:	b5c0      	push	{r6, r7, lr}
 8000b94:	4699      	mov	r9, r3
 8000b96:	1c0f      	adds	r7, r1, #0
 8000b98:	0e2d      	lsrs	r5, r5, #24
 8000b9a:	0fc6      	lsrs	r6, r0, #31
 8000b9c:	2d00      	cmp	r5, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_fmul+0x1e>
 8000ba0:	e088      	b.n	8000cb4 <__aeabi_fmul+0x130>
 8000ba2:	2dff      	cmp	r5, #255	@ 0xff
 8000ba4:	d100      	bne.n	8000ba8 <__aeabi_fmul+0x24>
 8000ba6:	e08d      	b.n	8000cc4 <__aeabi_fmul+0x140>
 8000ba8:	2280      	movs	r2, #128	@ 0x80
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	04d2      	lsls	r2, r2, #19
 8000bae:	431a      	orrs	r2, r3
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	4691      	mov	r9, r2
 8000bb4:	4698      	mov	r8, r3
 8000bb6:	469a      	mov	sl, r3
 8000bb8:	3d7f      	subs	r5, #127	@ 0x7f
 8000bba:	027c      	lsls	r4, r7, #9
 8000bbc:	007b      	lsls	r3, r7, #1
 8000bbe:	0a64      	lsrs	r4, r4, #9
 8000bc0:	0e1b      	lsrs	r3, r3, #24
 8000bc2:	0fff      	lsrs	r7, r7, #31
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d068      	beq.n	8000c9a <__aeabi_fmul+0x116>
 8000bc8:	2bff      	cmp	r3, #255	@ 0xff
 8000bca:	d021      	beq.n	8000c10 <__aeabi_fmul+0x8c>
 8000bcc:	2280      	movs	r2, #128	@ 0x80
 8000bce:	00e4      	lsls	r4, r4, #3
 8000bd0:	04d2      	lsls	r2, r2, #19
 8000bd2:	4314      	orrs	r4, r2
 8000bd4:	4642      	mov	r2, r8
 8000bd6:	3b7f      	subs	r3, #127	@ 0x7f
 8000bd8:	195b      	adds	r3, r3, r5
 8000bda:	2100      	movs	r1, #0
 8000bdc:	1c5d      	adds	r5, r3, #1
 8000bde:	2a0a      	cmp	r2, #10
 8000be0:	dc2e      	bgt.n	8000c40 <__aeabi_fmul+0xbc>
 8000be2:	407e      	eors	r6, r7
 8000be4:	4642      	mov	r2, r8
 8000be6:	2a02      	cmp	r2, #2
 8000be8:	dc23      	bgt.n	8000c32 <__aeabi_fmul+0xae>
 8000bea:	3a01      	subs	r2, #1
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d900      	bls.n	8000bf2 <__aeabi_fmul+0x6e>
 8000bf0:	e0bd      	b.n	8000d6e <__aeabi_fmul+0x1ea>
 8000bf2:	2902      	cmp	r1, #2
 8000bf4:	d06e      	beq.n	8000cd4 <__aeabi_fmul+0x150>
 8000bf6:	2901      	cmp	r1, #1
 8000bf8:	d12c      	bne.n	8000c54 <__aeabi_fmul+0xd0>
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	05c0      	lsls	r0, r0, #23
 8000c00:	07f6      	lsls	r6, r6, #31
 8000c02:	4310      	orrs	r0, r2
 8000c04:	4330      	orrs	r0, r6
 8000c06:	bce0      	pop	{r5, r6, r7}
 8000c08:	46ba      	mov	sl, r7
 8000c0a:	46b1      	mov	r9, r6
 8000c0c:	46a8      	mov	r8, r5
 8000c0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c10:	002b      	movs	r3, r5
 8000c12:	33ff      	adds	r3, #255	@ 0xff
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d065      	beq.n	8000ce4 <__aeabi_fmul+0x160>
 8000c18:	2203      	movs	r2, #3
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	4311      	orrs	r1, r2
 8000c1e:	0032      	movs	r2, r6
 8000c20:	3501      	adds	r5, #1
 8000c22:	4688      	mov	r8, r1
 8000c24:	407a      	eors	r2, r7
 8000c26:	35ff      	adds	r5, #255	@ 0xff
 8000c28:	290a      	cmp	r1, #10
 8000c2a:	dd00      	ble.n	8000c2e <__aeabi_fmul+0xaa>
 8000c2c:	e0d8      	b.n	8000de0 <__aeabi_fmul+0x25c>
 8000c2e:	0016      	movs	r6, r2
 8000c30:	2103      	movs	r1, #3
 8000c32:	4640      	mov	r0, r8
 8000c34:	2201      	movs	r2, #1
 8000c36:	4082      	lsls	r2, r0
 8000c38:	20a6      	movs	r0, #166	@ 0xa6
 8000c3a:	00c0      	lsls	r0, r0, #3
 8000c3c:	4202      	tst	r2, r0
 8000c3e:	d020      	beq.n	8000c82 <__aeabi_fmul+0xfe>
 8000c40:	4653      	mov	r3, sl
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d046      	beq.n	8000cd4 <__aeabi_fmul+0x150>
 8000c46:	2b03      	cmp	r3, #3
 8000c48:	d100      	bne.n	8000c4c <__aeabi_fmul+0xc8>
 8000c4a:	e0bb      	b.n	8000dc4 <__aeabi_fmul+0x240>
 8000c4c:	4651      	mov	r1, sl
 8000c4e:	464c      	mov	r4, r9
 8000c50:	2901      	cmp	r1, #1
 8000c52:	d0d2      	beq.n	8000bfa <__aeabi_fmul+0x76>
 8000c54:	002b      	movs	r3, r5
 8000c56:	337f      	adds	r3, #127	@ 0x7f
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dd70      	ble.n	8000d3e <__aeabi_fmul+0x1ba>
 8000c5c:	0762      	lsls	r2, r4, #29
 8000c5e:	d004      	beq.n	8000c6a <__aeabi_fmul+0xe6>
 8000c60:	220f      	movs	r2, #15
 8000c62:	4022      	ands	r2, r4
 8000c64:	2a04      	cmp	r2, #4
 8000c66:	d000      	beq.n	8000c6a <__aeabi_fmul+0xe6>
 8000c68:	3404      	adds	r4, #4
 8000c6a:	0122      	lsls	r2, r4, #4
 8000c6c:	d503      	bpl.n	8000c76 <__aeabi_fmul+0xf2>
 8000c6e:	4b63      	ldr	r3, [pc, #396]	@ (8000dfc <__aeabi_fmul+0x278>)
 8000c70:	401c      	ands	r4, r3
 8000c72:	002b      	movs	r3, r5
 8000c74:	3380      	adds	r3, #128	@ 0x80
 8000c76:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c78:	dc2c      	bgt.n	8000cd4 <__aeabi_fmul+0x150>
 8000c7a:	01a2      	lsls	r2, r4, #6
 8000c7c:	0a52      	lsrs	r2, r2, #9
 8000c7e:	b2d8      	uxtb	r0, r3
 8000c80:	e7bd      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000c82:	2090      	movs	r0, #144	@ 0x90
 8000c84:	0080      	lsls	r0, r0, #2
 8000c86:	4202      	tst	r2, r0
 8000c88:	d127      	bne.n	8000cda <__aeabi_fmul+0x156>
 8000c8a:	38b9      	subs	r0, #185	@ 0xb9
 8000c8c:	38ff      	subs	r0, #255	@ 0xff
 8000c8e:	4210      	tst	r0, r2
 8000c90:	d06d      	beq.n	8000d6e <__aeabi_fmul+0x1ea>
 8000c92:	003e      	movs	r6, r7
 8000c94:	46a1      	mov	r9, r4
 8000c96:	468a      	mov	sl, r1
 8000c98:	e7d2      	b.n	8000c40 <__aeabi_fmul+0xbc>
 8000c9a:	2c00      	cmp	r4, #0
 8000c9c:	d141      	bne.n	8000d22 <__aeabi_fmul+0x19e>
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	4642      	mov	r2, r8
 8000ca2:	431a      	orrs	r2, r3
 8000ca4:	4690      	mov	r8, r2
 8000ca6:	002b      	movs	r3, r5
 8000ca8:	4642      	mov	r2, r8
 8000caa:	2101      	movs	r1, #1
 8000cac:	1c5d      	adds	r5, r3, #1
 8000cae:	2a0a      	cmp	r2, #10
 8000cb0:	dd97      	ble.n	8000be2 <__aeabi_fmul+0x5e>
 8000cb2:	e7c5      	b.n	8000c40 <__aeabi_fmul+0xbc>
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d126      	bne.n	8000d06 <__aeabi_fmul+0x182>
 8000cb8:	2304      	movs	r3, #4
 8000cba:	4698      	mov	r8, r3
 8000cbc:	3b03      	subs	r3, #3
 8000cbe:	2500      	movs	r5, #0
 8000cc0:	469a      	mov	sl, r3
 8000cc2:	e77a      	b.n	8000bba <__aeabi_fmul+0x36>
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d118      	bne.n	8000cfa <__aeabi_fmul+0x176>
 8000cc8:	2308      	movs	r3, #8
 8000cca:	4698      	mov	r8, r3
 8000ccc:	3b06      	subs	r3, #6
 8000cce:	25ff      	movs	r5, #255	@ 0xff
 8000cd0:	469a      	mov	sl, r3
 8000cd2:	e772      	b.n	8000bba <__aeabi_fmul+0x36>
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	e791      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000cda:	2280      	movs	r2, #128	@ 0x80
 8000cdc:	2600      	movs	r6, #0
 8000cde:	20ff      	movs	r0, #255	@ 0xff
 8000ce0:	03d2      	lsls	r2, r2, #15
 8000ce2:	e78c      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000ce4:	4641      	mov	r1, r8
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	3501      	adds	r5, #1
 8000cea:	4311      	orrs	r1, r2
 8000cec:	4688      	mov	r8, r1
 8000cee:	35ff      	adds	r5, #255	@ 0xff
 8000cf0:	290a      	cmp	r1, #10
 8000cf2:	dca5      	bgt.n	8000c40 <__aeabi_fmul+0xbc>
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	407e      	eors	r6, r7
 8000cf8:	e774      	b.n	8000be4 <__aeabi_fmul+0x60>
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	4698      	mov	r8, r3
 8000cfe:	3b09      	subs	r3, #9
 8000d00:	25ff      	movs	r5, #255	@ 0xff
 8000d02:	469a      	mov	sl, r3
 8000d04:	e759      	b.n	8000bba <__aeabi_fmul+0x36>
 8000d06:	0018      	movs	r0, r3
 8000d08:	f000 faa0 	bl	800124c <__clzsi2>
 8000d0c:	464a      	mov	r2, r9
 8000d0e:	1f43      	subs	r3, r0, #5
 8000d10:	2576      	movs	r5, #118	@ 0x76
 8000d12:	409a      	lsls	r2, r3
 8000d14:	2300      	movs	r3, #0
 8000d16:	426d      	negs	r5, r5
 8000d18:	4691      	mov	r9, r2
 8000d1a:	4698      	mov	r8, r3
 8000d1c:	469a      	mov	sl, r3
 8000d1e:	1a2d      	subs	r5, r5, r0
 8000d20:	e74b      	b.n	8000bba <__aeabi_fmul+0x36>
 8000d22:	0020      	movs	r0, r4
 8000d24:	f000 fa92 	bl	800124c <__clzsi2>
 8000d28:	4642      	mov	r2, r8
 8000d2a:	1f43      	subs	r3, r0, #5
 8000d2c:	409c      	lsls	r4, r3
 8000d2e:	1a2b      	subs	r3, r5, r0
 8000d30:	3b76      	subs	r3, #118	@ 0x76
 8000d32:	2100      	movs	r1, #0
 8000d34:	1c5d      	adds	r5, r3, #1
 8000d36:	2a0a      	cmp	r2, #10
 8000d38:	dc00      	bgt.n	8000d3c <__aeabi_fmul+0x1b8>
 8000d3a:	e752      	b.n	8000be2 <__aeabi_fmul+0x5e>
 8000d3c:	e780      	b.n	8000c40 <__aeabi_fmul+0xbc>
 8000d3e:	2201      	movs	r2, #1
 8000d40:	1ad3      	subs	r3, r2, r3
 8000d42:	2b1b      	cmp	r3, #27
 8000d44:	dd00      	ble.n	8000d48 <__aeabi_fmul+0x1c4>
 8000d46:	e758      	b.n	8000bfa <__aeabi_fmul+0x76>
 8000d48:	359e      	adds	r5, #158	@ 0x9e
 8000d4a:	0022      	movs	r2, r4
 8000d4c:	40ac      	lsls	r4, r5
 8000d4e:	40da      	lsrs	r2, r3
 8000d50:	1e63      	subs	r3, r4, #1
 8000d52:	419c      	sbcs	r4, r3
 8000d54:	4322      	orrs	r2, r4
 8000d56:	0753      	lsls	r3, r2, #29
 8000d58:	d004      	beq.n	8000d64 <__aeabi_fmul+0x1e0>
 8000d5a:	230f      	movs	r3, #15
 8000d5c:	4013      	ands	r3, r2
 8000d5e:	2b04      	cmp	r3, #4
 8000d60:	d000      	beq.n	8000d64 <__aeabi_fmul+0x1e0>
 8000d62:	3204      	adds	r2, #4
 8000d64:	0153      	lsls	r3, r2, #5
 8000d66:	d537      	bpl.n	8000dd8 <__aeabi_fmul+0x254>
 8000d68:	2001      	movs	r0, #1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	e747      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000d6e:	0c21      	lsrs	r1, r4, #16
 8000d70:	464a      	mov	r2, r9
 8000d72:	0424      	lsls	r4, r4, #16
 8000d74:	0c24      	lsrs	r4, r4, #16
 8000d76:	0027      	movs	r7, r4
 8000d78:	0c10      	lsrs	r0, r2, #16
 8000d7a:	0412      	lsls	r2, r2, #16
 8000d7c:	0c12      	lsrs	r2, r2, #16
 8000d7e:	4344      	muls	r4, r0
 8000d80:	4357      	muls	r7, r2
 8000d82:	4348      	muls	r0, r1
 8000d84:	4351      	muls	r1, r2
 8000d86:	0c3a      	lsrs	r2, r7, #16
 8000d88:	1909      	adds	r1, r1, r4
 8000d8a:	1852      	adds	r2, r2, r1
 8000d8c:	4294      	cmp	r4, r2
 8000d8e:	d903      	bls.n	8000d98 <__aeabi_fmul+0x214>
 8000d90:	2180      	movs	r1, #128	@ 0x80
 8000d92:	0249      	lsls	r1, r1, #9
 8000d94:	468c      	mov	ip, r1
 8000d96:	4460      	add	r0, ip
 8000d98:	043f      	lsls	r7, r7, #16
 8000d9a:	0411      	lsls	r1, r2, #16
 8000d9c:	0c3f      	lsrs	r7, r7, #16
 8000d9e:	19c9      	adds	r1, r1, r7
 8000da0:	018c      	lsls	r4, r1, #6
 8000da2:	1e67      	subs	r7, r4, #1
 8000da4:	41bc      	sbcs	r4, r7
 8000da6:	0c12      	lsrs	r2, r2, #16
 8000da8:	0e89      	lsrs	r1, r1, #26
 8000daa:	1812      	adds	r2, r2, r0
 8000dac:	430c      	orrs	r4, r1
 8000dae:	0192      	lsls	r2, r2, #6
 8000db0:	4314      	orrs	r4, r2
 8000db2:	0112      	lsls	r2, r2, #4
 8000db4:	d50e      	bpl.n	8000dd4 <__aeabi_fmul+0x250>
 8000db6:	2301      	movs	r3, #1
 8000db8:	0862      	lsrs	r2, r4, #1
 8000dba:	401c      	ands	r4, r3
 8000dbc:	4314      	orrs	r4, r2
 8000dbe:	e749      	b.n	8000c54 <__aeabi_fmul+0xd0>
 8000dc0:	003e      	movs	r6, r7
 8000dc2:	46a1      	mov	r9, r4
 8000dc4:	2280      	movs	r2, #128	@ 0x80
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	03d2      	lsls	r2, r2, #15
 8000dca:	431a      	orrs	r2, r3
 8000dcc:	0252      	lsls	r2, r2, #9
 8000dce:	20ff      	movs	r0, #255	@ 0xff
 8000dd0:	0a52      	lsrs	r2, r2, #9
 8000dd2:	e714      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000dd4:	001d      	movs	r5, r3
 8000dd6:	e73d      	b.n	8000c54 <__aeabi_fmul+0xd0>
 8000dd8:	0192      	lsls	r2, r2, #6
 8000dda:	2000      	movs	r0, #0
 8000ddc:	0a52      	lsrs	r2, r2, #9
 8000dde:	e70e      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000de0:	290f      	cmp	r1, #15
 8000de2:	d1ed      	bne.n	8000dc0 <__aeabi_fmul+0x23c>
 8000de4:	2280      	movs	r2, #128	@ 0x80
 8000de6:	464b      	mov	r3, r9
 8000de8:	03d2      	lsls	r2, r2, #15
 8000dea:	4213      	tst	r3, r2
 8000dec:	d0ea      	beq.n	8000dc4 <__aeabi_fmul+0x240>
 8000dee:	4214      	tst	r4, r2
 8000df0:	d1e8      	bne.n	8000dc4 <__aeabi_fmul+0x240>
 8000df2:	003e      	movs	r6, r7
 8000df4:	20ff      	movs	r0, #255	@ 0xff
 8000df6:	4322      	orrs	r2, r4
 8000df8:	e701      	b.n	8000bfe <__aeabi_fmul+0x7a>
 8000dfa:	46c0      	nop			@ (mov r8, r8)
 8000dfc:	f7ffffff 	.word	0xf7ffffff

08000e00 <__aeabi_fsub>:
 8000e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e02:	4647      	mov	r7, r8
 8000e04:	46ce      	mov	lr, r9
 8000e06:	024e      	lsls	r6, r1, #9
 8000e08:	0243      	lsls	r3, r0, #9
 8000e0a:	0045      	lsls	r5, r0, #1
 8000e0c:	0a72      	lsrs	r2, r6, #9
 8000e0e:	0fc4      	lsrs	r4, r0, #31
 8000e10:	0048      	lsls	r0, r1, #1
 8000e12:	b580      	push	{r7, lr}
 8000e14:	4694      	mov	ip, r2
 8000e16:	0a5f      	lsrs	r7, r3, #9
 8000e18:	0e2d      	lsrs	r5, r5, #24
 8000e1a:	099b      	lsrs	r3, r3, #6
 8000e1c:	0e00      	lsrs	r0, r0, #24
 8000e1e:	0fc9      	lsrs	r1, r1, #31
 8000e20:	09b6      	lsrs	r6, r6, #6
 8000e22:	28ff      	cmp	r0, #255	@ 0xff
 8000e24:	d024      	beq.n	8000e70 <__aeabi_fsub+0x70>
 8000e26:	2201      	movs	r2, #1
 8000e28:	4051      	eors	r1, r2
 8000e2a:	1a2a      	subs	r2, r5, r0
 8000e2c:	428c      	cmp	r4, r1
 8000e2e:	d00f      	beq.n	8000e50 <__aeabi_fsub+0x50>
 8000e30:	2a00      	cmp	r2, #0
 8000e32:	dc00      	bgt.n	8000e36 <__aeabi_fsub+0x36>
 8000e34:	e16a      	b.n	800110c <__aeabi_fsub+0x30c>
 8000e36:	2800      	cmp	r0, #0
 8000e38:	d135      	bne.n	8000ea6 <__aeabi_fsub+0xa6>
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d100      	bne.n	8000e40 <__aeabi_fsub+0x40>
 8000e3e:	e0a2      	b.n	8000f86 <__aeabi_fsub+0x186>
 8000e40:	1e51      	subs	r1, r2, #1
 8000e42:	2a01      	cmp	r2, #1
 8000e44:	d100      	bne.n	8000e48 <__aeabi_fsub+0x48>
 8000e46:	e124      	b.n	8001092 <__aeabi_fsub+0x292>
 8000e48:	2aff      	cmp	r2, #255	@ 0xff
 8000e4a:	d021      	beq.n	8000e90 <__aeabi_fsub+0x90>
 8000e4c:	000a      	movs	r2, r1
 8000e4e:	e02f      	b.n	8000eb0 <__aeabi_fsub+0xb0>
 8000e50:	2a00      	cmp	r2, #0
 8000e52:	dc00      	bgt.n	8000e56 <__aeabi_fsub+0x56>
 8000e54:	e167      	b.n	8001126 <__aeabi_fsub+0x326>
 8000e56:	2800      	cmp	r0, #0
 8000e58:	d05e      	beq.n	8000f18 <__aeabi_fsub+0x118>
 8000e5a:	2dff      	cmp	r5, #255	@ 0xff
 8000e5c:	d018      	beq.n	8000e90 <__aeabi_fsub+0x90>
 8000e5e:	2180      	movs	r1, #128	@ 0x80
 8000e60:	04c9      	lsls	r1, r1, #19
 8000e62:	430e      	orrs	r6, r1
 8000e64:	2a1b      	cmp	r2, #27
 8000e66:	dc00      	bgt.n	8000e6a <__aeabi_fsub+0x6a>
 8000e68:	e076      	b.n	8000f58 <__aeabi_fsub+0x158>
 8000e6a:	002a      	movs	r2, r5
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	e032      	b.n	8000ed6 <__aeabi_fsub+0xd6>
 8000e70:	002a      	movs	r2, r5
 8000e72:	3aff      	subs	r2, #255	@ 0xff
 8000e74:	4691      	mov	r9, r2
 8000e76:	2e00      	cmp	r6, #0
 8000e78:	d042      	beq.n	8000f00 <__aeabi_fsub+0x100>
 8000e7a:	428c      	cmp	r4, r1
 8000e7c:	d055      	beq.n	8000f2a <__aeabi_fsub+0x12a>
 8000e7e:	464a      	mov	r2, r9
 8000e80:	2a00      	cmp	r2, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_fsub+0x86>
 8000e84:	e09c      	b.n	8000fc0 <__aeabi_fsub+0x1c0>
 8000e86:	2d00      	cmp	r5, #0
 8000e88:	d100      	bne.n	8000e8c <__aeabi_fsub+0x8c>
 8000e8a:	e077      	b.n	8000f7c <__aeabi_fsub+0x17c>
 8000e8c:	000c      	movs	r4, r1
 8000e8e:	0033      	movs	r3, r6
 8000e90:	08db      	lsrs	r3, r3, #3
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d100      	bne.n	8000e98 <__aeabi_fsub+0x98>
 8000e96:	e06e      	b.n	8000f76 <__aeabi_fsub+0x176>
 8000e98:	2280      	movs	r2, #128	@ 0x80
 8000e9a:	03d2      	lsls	r2, r2, #15
 8000e9c:	4313      	orrs	r3, r2
 8000e9e:	025b      	lsls	r3, r3, #9
 8000ea0:	20ff      	movs	r0, #255	@ 0xff
 8000ea2:	0a5b      	lsrs	r3, r3, #9
 8000ea4:	e024      	b.n	8000ef0 <__aeabi_fsub+0xf0>
 8000ea6:	2dff      	cmp	r5, #255	@ 0xff
 8000ea8:	d0f2      	beq.n	8000e90 <__aeabi_fsub+0x90>
 8000eaa:	2180      	movs	r1, #128	@ 0x80
 8000eac:	04c9      	lsls	r1, r1, #19
 8000eae:	430e      	orrs	r6, r1
 8000eb0:	2101      	movs	r1, #1
 8000eb2:	2a1b      	cmp	r2, #27
 8000eb4:	dc08      	bgt.n	8000ec8 <__aeabi_fsub+0xc8>
 8000eb6:	0031      	movs	r1, r6
 8000eb8:	2020      	movs	r0, #32
 8000eba:	40d1      	lsrs	r1, r2
 8000ebc:	1a82      	subs	r2, r0, r2
 8000ebe:	4096      	lsls	r6, r2
 8000ec0:	0032      	movs	r2, r6
 8000ec2:	1e50      	subs	r0, r2, #1
 8000ec4:	4182      	sbcs	r2, r0
 8000ec6:	4311      	orrs	r1, r2
 8000ec8:	1a5b      	subs	r3, r3, r1
 8000eca:	015a      	lsls	r2, r3, #5
 8000ecc:	d460      	bmi.n	8000f90 <__aeabi_fsub+0x190>
 8000ece:	2107      	movs	r1, #7
 8000ed0:	002a      	movs	r2, r5
 8000ed2:	4019      	ands	r1, r3
 8000ed4:	d057      	beq.n	8000f86 <__aeabi_fsub+0x186>
 8000ed6:	210f      	movs	r1, #15
 8000ed8:	4019      	ands	r1, r3
 8000eda:	2904      	cmp	r1, #4
 8000edc:	d000      	beq.n	8000ee0 <__aeabi_fsub+0xe0>
 8000ede:	3304      	adds	r3, #4
 8000ee0:	0159      	lsls	r1, r3, #5
 8000ee2:	d550      	bpl.n	8000f86 <__aeabi_fsub+0x186>
 8000ee4:	1c50      	adds	r0, r2, #1
 8000ee6:	2afe      	cmp	r2, #254	@ 0xfe
 8000ee8:	d045      	beq.n	8000f76 <__aeabi_fsub+0x176>
 8000eea:	019b      	lsls	r3, r3, #6
 8000eec:	b2c0      	uxtb	r0, r0
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	05c0      	lsls	r0, r0, #23
 8000ef2:	4318      	orrs	r0, r3
 8000ef4:	07e4      	lsls	r4, r4, #31
 8000ef6:	4320      	orrs	r0, r4
 8000ef8:	bcc0      	pop	{r6, r7}
 8000efa:	46b9      	mov	r9, r7
 8000efc:	46b0      	mov	r8, r6
 8000efe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f00:	2201      	movs	r2, #1
 8000f02:	4051      	eors	r1, r2
 8000f04:	428c      	cmp	r4, r1
 8000f06:	d1ba      	bne.n	8000e7e <__aeabi_fsub+0x7e>
 8000f08:	464a      	mov	r2, r9
 8000f0a:	2a00      	cmp	r2, #0
 8000f0c:	d010      	beq.n	8000f30 <__aeabi_fsub+0x130>
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d100      	bne.n	8000f14 <__aeabi_fsub+0x114>
 8000f12:	e098      	b.n	8001046 <__aeabi_fsub+0x246>
 8000f14:	2300      	movs	r3, #0
 8000f16:	e7bb      	b.n	8000e90 <__aeabi_fsub+0x90>
 8000f18:	2e00      	cmp	r6, #0
 8000f1a:	d034      	beq.n	8000f86 <__aeabi_fsub+0x186>
 8000f1c:	1e51      	subs	r1, r2, #1
 8000f1e:	2a01      	cmp	r2, #1
 8000f20:	d06e      	beq.n	8001000 <__aeabi_fsub+0x200>
 8000f22:	2aff      	cmp	r2, #255	@ 0xff
 8000f24:	d0b4      	beq.n	8000e90 <__aeabi_fsub+0x90>
 8000f26:	000a      	movs	r2, r1
 8000f28:	e79c      	b.n	8000e64 <__aeabi_fsub+0x64>
 8000f2a:	2a00      	cmp	r2, #0
 8000f2c:	d000      	beq.n	8000f30 <__aeabi_fsub+0x130>
 8000f2e:	e088      	b.n	8001042 <__aeabi_fsub+0x242>
 8000f30:	20fe      	movs	r0, #254	@ 0xfe
 8000f32:	1c6a      	adds	r2, r5, #1
 8000f34:	4210      	tst	r0, r2
 8000f36:	d000      	beq.n	8000f3a <__aeabi_fsub+0x13a>
 8000f38:	e092      	b.n	8001060 <__aeabi_fsub+0x260>
 8000f3a:	2d00      	cmp	r5, #0
 8000f3c:	d000      	beq.n	8000f40 <__aeabi_fsub+0x140>
 8000f3e:	e0a4      	b.n	800108a <__aeabi_fsub+0x28a>
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fsub+0x146>
 8000f44:	e0cb      	b.n	80010de <__aeabi_fsub+0x2de>
 8000f46:	2e00      	cmp	r6, #0
 8000f48:	d000      	beq.n	8000f4c <__aeabi_fsub+0x14c>
 8000f4a:	e0ca      	b.n	80010e2 <__aeabi_fsub+0x2e2>
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	08db      	lsrs	r3, r3, #3
 8000f50:	025b      	lsls	r3, r3, #9
 8000f52:	0a5b      	lsrs	r3, r3, #9
 8000f54:	b2d0      	uxtb	r0, r2
 8000f56:	e7cb      	b.n	8000ef0 <__aeabi_fsub+0xf0>
 8000f58:	0031      	movs	r1, r6
 8000f5a:	2020      	movs	r0, #32
 8000f5c:	40d1      	lsrs	r1, r2
 8000f5e:	1a82      	subs	r2, r0, r2
 8000f60:	4096      	lsls	r6, r2
 8000f62:	0032      	movs	r2, r6
 8000f64:	1e50      	subs	r0, r2, #1
 8000f66:	4182      	sbcs	r2, r0
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	189b      	adds	r3, r3, r2
 8000f6c:	015a      	lsls	r2, r3, #5
 8000f6e:	d5ae      	bpl.n	8000ece <__aeabi_fsub+0xce>
 8000f70:	1c6a      	adds	r2, r5, #1
 8000f72:	2dfe      	cmp	r5, #254	@ 0xfe
 8000f74:	d14a      	bne.n	800100c <__aeabi_fsub+0x20c>
 8000f76:	20ff      	movs	r0, #255	@ 0xff
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e7b9      	b.n	8000ef0 <__aeabi_fsub+0xf0>
 8000f7c:	22ff      	movs	r2, #255	@ 0xff
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d14b      	bne.n	800101a <__aeabi_fsub+0x21a>
 8000f82:	000c      	movs	r4, r1
 8000f84:	0033      	movs	r3, r6
 8000f86:	08db      	lsrs	r3, r3, #3
 8000f88:	2aff      	cmp	r2, #255	@ 0xff
 8000f8a:	d100      	bne.n	8000f8e <__aeabi_fsub+0x18e>
 8000f8c:	e781      	b.n	8000e92 <__aeabi_fsub+0x92>
 8000f8e:	e7df      	b.n	8000f50 <__aeabi_fsub+0x150>
 8000f90:	019f      	lsls	r7, r3, #6
 8000f92:	09bf      	lsrs	r7, r7, #6
 8000f94:	0038      	movs	r0, r7
 8000f96:	f000 f959 	bl	800124c <__clzsi2>
 8000f9a:	3805      	subs	r0, #5
 8000f9c:	4087      	lsls	r7, r0
 8000f9e:	4285      	cmp	r5, r0
 8000fa0:	dc21      	bgt.n	8000fe6 <__aeabi_fsub+0x1e6>
 8000fa2:	003b      	movs	r3, r7
 8000fa4:	2120      	movs	r1, #32
 8000fa6:	1b42      	subs	r2, r0, r5
 8000fa8:	3201      	adds	r2, #1
 8000faa:	40d3      	lsrs	r3, r2
 8000fac:	1a8a      	subs	r2, r1, r2
 8000fae:	4097      	lsls	r7, r2
 8000fb0:	1e7a      	subs	r2, r7, #1
 8000fb2:	4197      	sbcs	r7, r2
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	433b      	orrs	r3, r7
 8000fb8:	0759      	lsls	r1, r3, #29
 8000fba:	d000      	beq.n	8000fbe <__aeabi_fsub+0x1be>
 8000fbc:	e78b      	b.n	8000ed6 <__aeabi_fsub+0xd6>
 8000fbe:	e78f      	b.n	8000ee0 <__aeabi_fsub+0xe0>
 8000fc0:	20fe      	movs	r0, #254	@ 0xfe
 8000fc2:	1c6a      	adds	r2, r5, #1
 8000fc4:	4210      	tst	r0, r2
 8000fc6:	d112      	bne.n	8000fee <__aeabi_fsub+0x1ee>
 8000fc8:	2d00      	cmp	r5, #0
 8000fca:	d152      	bne.n	8001072 <__aeabi_fsub+0x272>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d07c      	beq.n	80010ca <__aeabi_fsub+0x2ca>
 8000fd0:	2e00      	cmp	r6, #0
 8000fd2:	d0bb      	beq.n	8000f4c <__aeabi_fsub+0x14c>
 8000fd4:	1b9a      	subs	r2, r3, r6
 8000fd6:	0150      	lsls	r0, r2, #5
 8000fd8:	d400      	bmi.n	8000fdc <__aeabi_fsub+0x1dc>
 8000fda:	e08b      	b.n	80010f4 <__aeabi_fsub+0x2f4>
 8000fdc:	2401      	movs	r4, #1
 8000fde:	2200      	movs	r2, #0
 8000fe0:	1af3      	subs	r3, r6, r3
 8000fe2:	400c      	ands	r4, r1
 8000fe4:	e7e8      	b.n	8000fb8 <__aeabi_fsub+0x1b8>
 8000fe6:	4b56      	ldr	r3, [pc, #344]	@ (8001140 <__aeabi_fsub+0x340>)
 8000fe8:	1a2a      	subs	r2, r5, r0
 8000fea:	403b      	ands	r3, r7
 8000fec:	e7e4      	b.n	8000fb8 <__aeabi_fsub+0x1b8>
 8000fee:	1b9f      	subs	r7, r3, r6
 8000ff0:	017a      	lsls	r2, r7, #5
 8000ff2:	d446      	bmi.n	8001082 <__aeabi_fsub+0x282>
 8000ff4:	2f00      	cmp	r7, #0
 8000ff6:	d1cd      	bne.n	8000f94 <__aeabi_fsub+0x194>
 8000ff8:	2400      	movs	r4, #0
 8000ffa:	2000      	movs	r0, #0
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	e777      	b.n	8000ef0 <__aeabi_fsub+0xf0>
 8001000:	199b      	adds	r3, r3, r6
 8001002:	2501      	movs	r5, #1
 8001004:	3201      	adds	r2, #1
 8001006:	0159      	lsls	r1, r3, #5
 8001008:	d400      	bmi.n	800100c <__aeabi_fsub+0x20c>
 800100a:	e760      	b.n	8000ece <__aeabi_fsub+0xce>
 800100c:	2101      	movs	r1, #1
 800100e:	484d      	ldr	r0, [pc, #308]	@ (8001144 <__aeabi_fsub+0x344>)
 8001010:	4019      	ands	r1, r3
 8001012:	085b      	lsrs	r3, r3, #1
 8001014:	4003      	ands	r3, r0
 8001016:	430b      	orrs	r3, r1
 8001018:	e7ce      	b.n	8000fb8 <__aeabi_fsub+0x1b8>
 800101a:	1e57      	subs	r7, r2, #1
 800101c:	2a01      	cmp	r2, #1
 800101e:	d05a      	beq.n	80010d6 <__aeabi_fsub+0x2d6>
 8001020:	000c      	movs	r4, r1
 8001022:	2aff      	cmp	r2, #255	@ 0xff
 8001024:	d033      	beq.n	800108e <__aeabi_fsub+0x28e>
 8001026:	2201      	movs	r2, #1
 8001028:	2f1b      	cmp	r7, #27
 800102a:	dc07      	bgt.n	800103c <__aeabi_fsub+0x23c>
 800102c:	2120      	movs	r1, #32
 800102e:	1bc9      	subs	r1, r1, r7
 8001030:	001a      	movs	r2, r3
 8001032:	408b      	lsls	r3, r1
 8001034:	40fa      	lsrs	r2, r7
 8001036:	1e59      	subs	r1, r3, #1
 8001038:	418b      	sbcs	r3, r1
 800103a:	431a      	orrs	r2, r3
 800103c:	0005      	movs	r5, r0
 800103e:	1ab3      	subs	r3, r6, r2
 8001040:	e743      	b.n	8000eca <__aeabi_fsub+0xca>
 8001042:	2d00      	cmp	r5, #0
 8001044:	d123      	bne.n	800108e <__aeabi_fsub+0x28e>
 8001046:	22ff      	movs	r2, #255	@ 0xff
 8001048:	2b00      	cmp	r3, #0
 800104a:	d09b      	beq.n	8000f84 <__aeabi_fsub+0x184>
 800104c:	1e51      	subs	r1, r2, #1
 800104e:	2a01      	cmp	r2, #1
 8001050:	d0d6      	beq.n	8001000 <__aeabi_fsub+0x200>
 8001052:	2aff      	cmp	r2, #255	@ 0xff
 8001054:	d01b      	beq.n	800108e <__aeabi_fsub+0x28e>
 8001056:	291b      	cmp	r1, #27
 8001058:	dd2c      	ble.n	80010b4 <__aeabi_fsub+0x2b4>
 800105a:	0002      	movs	r2, r0
 800105c:	1c73      	adds	r3, r6, #1
 800105e:	e73a      	b.n	8000ed6 <__aeabi_fsub+0xd6>
 8001060:	2aff      	cmp	r2, #255	@ 0xff
 8001062:	d088      	beq.n	8000f76 <__aeabi_fsub+0x176>
 8001064:	199b      	adds	r3, r3, r6
 8001066:	085b      	lsrs	r3, r3, #1
 8001068:	0759      	lsls	r1, r3, #29
 800106a:	d000      	beq.n	800106e <__aeabi_fsub+0x26e>
 800106c:	e733      	b.n	8000ed6 <__aeabi_fsub+0xd6>
 800106e:	08db      	lsrs	r3, r3, #3
 8001070:	e76e      	b.n	8000f50 <__aeabi_fsub+0x150>
 8001072:	2b00      	cmp	r3, #0
 8001074:	d110      	bne.n	8001098 <__aeabi_fsub+0x298>
 8001076:	2e00      	cmp	r6, #0
 8001078:	d043      	beq.n	8001102 <__aeabi_fsub+0x302>
 800107a:	2401      	movs	r4, #1
 800107c:	0033      	movs	r3, r6
 800107e:	400c      	ands	r4, r1
 8001080:	e706      	b.n	8000e90 <__aeabi_fsub+0x90>
 8001082:	2401      	movs	r4, #1
 8001084:	1af7      	subs	r7, r6, r3
 8001086:	400c      	ands	r4, r1
 8001088:	e784      	b.n	8000f94 <__aeabi_fsub+0x194>
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <__aeabi_fsub+0x298>
 800108e:	0033      	movs	r3, r6
 8001090:	e6fe      	b.n	8000e90 <__aeabi_fsub+0x90>
 8001092:	2501      	movs	r5, #1
 8001094:	1b9b      	subs	r3, r3, r6
 8001096:	e718      	b.n	8000eca <__aeabi_fsub+0xca>
 8001098:	2e00      	cmp	r6, #0
 800109a:	d100      	bne.n	800109e <__aeabi_fsub+0x29e>
 800109c:	e6f8      	b.n	8000e90 <__aeabi_fsub+0x90>
 800109e:	2280      	movs	r2, #128	@ 0x80
 80010a0:	03d2      	lsls	r2, r2, #15
 80010a2:	4297      	cmp	r7, r2
 80010a4:	d304      	bcc.n	80010b0 <__aeabi_fsub+0x2b0>
 80010a6:	4594      	cmp	ip, r2
 80010a8:	d202      	bcs.n	80010b0 <__aeabi_fsub+0x2b0>
 80010aa:	2401      	movs	r4, #1
 80010ac:	0033      	movs	r3, r6
 80010ae:	400c      	ands	r4, r1
 80010b0:	08db      	lsrs	r3, r3, #3
 80010b2:	e6f1      	b.n	8000e98 <__aeabi_fsub+0x98>
 80010b4:	001a      	movs	r2, r3
 80010b6:	2520      	movs	r5, #32
 80010b8:	40ca      	lsrs	r2, r1
 80010ba:	1a69      	subs	r1, r5, r1
 80010bc:	408b      	lsls	r3, r1
 80010be:	1e59      	subs	r1, r3, #1
 80010c0:	418b      	sbcs	r3, r1
 80010c2:	4313      	orrs	r3, r2
 80010c4:	0005      	movs	r5, r0
 80010c6:	199b      	adds	r3, r3, r6
 80010c8:	e750      	b.n	8000f6c <__aeabi_fsub+0x16c>
 80010ca:	2e00      	cmp	r6, #0
 80010cc:	d094      	beq.n	8000ff8 <__aeabi_fsub+0x1f8>
 80010ce:	2401      	movs	r4, #1
 80010d0:	0033      	movs	r3, r6
 80010d2:	400c      	ands	r4, r1
 80010d4:	e73a      	b.n	8000f4c <__aeabi_fsub+0x14c>
 80010d6:	000c      	movs	r4, r1
 80010d8:	2501      	movs	r5, #1
 80010da:	1af3      	subs	r3, r6, r3
 80010dc:	e6f5      	b.n	8000eca <__aeabi_fsub+0xca>
 80010de:	0033      	movs	r3, r6
 80010e0:	e734      	b.n	8000f4c <__aeabi_fsub+0x14c>
 80010e2:	199b      	adds	r3, r3, r6
 80010e4:	2200      	movs	r2, #0
 80010e6:	0159      	lsls	r1, r3, #5
 80010e8:	d5c1      	bpl.n	800106e <__aeabi_fsub+0x26e>
 80010ea:	4a15      	ldr	r2, [pc, #84]	@ (8001140 <__aeabi_fsub+0x340>)
 80010ec:	4013      	ands	r3, r2
 80010ee:	08db      	lsrs	r3, r3, #3
 80010f0:	2201      	movs	r2, #1
 80010f2:	e72d      	b.n	8000f50 <__aeabi_fsub+0x150>
 80010f4:	2a00      	cmp	r2, #0
 80010f6:	d100      	bne.n	80010fa <__aeabi_fsub+0x2fa>
 80010f8:	e77e      	b.n	8000ff8 <__aeabi_fsub+0x1f8>
 80010fa:	0013      	movs	r3, r2
 80010fc:	2200      	movs	r2, #0
 80010fe:	08db      	lsrs	r3, r3, #3
 8001100:	e726      	b.n	8000f50 <__aeabi_fsub+0x150>
 8001102:	2380      	movs	r3, #128	@ 0x80
 8001104:	2400      	movs	r4, #0
 8001106:	20ff      	movs	r0, #255	@ 0xff
 8001108:	03db      	lsls	r3, r3, #15
 800110a:	e6f1      	b.n	8000ef0 <__aeabi_fsub+0xf0>
 800110c:	2a00      	cmp	r2, #0
 800110e:	d100      	bne.n	8001112 <__aeabi_fsub+0x312>
 8001110:	e756      	b.n	8000fc0 <__aeabi_fsub+0x1c0>
 8001112:	1b47      	subs	r7, r0, r5
 8001114:	003a      	movs	r2, r7
 8001116:	2d00      	cmp	r5, #0
 8001118:	d100      	bne.n	800111c <__aeabi_fsub+0x31c>
 800111a:	e730      	b.n	8000f7e <__aeabi_fsub+0x17e>
 800111c:	2280      	movs	r2, #128	@ 0x80
 800111e:	04d2      	lsls	r2, r2, #19
 8001120:	000c      	movs	r4, r1
 8001122:	4313      	orrs	r3, r2
 8001124:	e77f      	b.n	8001026 <__aeabi_fsub+0x226>
 8001126:	2a00      	cmp	r2, #0
 8001128:	d100      	bne.n	800112c <__aeabi_fsub+0x32c>
 800112a:	e701      	b.n	8000f30 <__aeabi_fsub+0x130>
 800112c:	1b41      	subs	r1, r0, r5
 800112e:	2d00      	cmp	r5, #0
 8001130:	d101      	bne.n	8001136 <__aeabi_fsub+0x336>
 8001132:	000a      	movs	r2, r1
 8001134:	e788      	b.n	8001048 <__aeabi_fsub+0x248>
 8001136:	2280      	movs	r2, #128	@ 0x80
 8001138:	04d2      	lsls	r2, r2, #19
 800113a:	4313      	orrs	r3, r2
 800113c:	e78b      	b.n	8001056 <__aeabi_fsub+0x256>
 800113e:	46c0      	nop			@ (mov r8, r8)
 8001140:	fbffffff 	.word	0xfbffffff
 8001144:	7dffffff 	.word	0x7dffffff

08001148 <__aeabi_fcmpun>:
 8001148:	0243      	lsls	r3, r0, #9
 800114a:	024a      	lsls	r2, r1, #9
 800114c:	0040      	lsls	r0, r0, #1
 800114e:	0049      	lsls	r1, r1, #1
 8001150:	0a5b      	lsrs	r3, r3, #9
 8001152:	0a52      	lsrs	r2, r2, #9
 8001154:	0e09      	lsrs	r1, r1, #24
 8001156:	0e00      	lsrs	r0, r0, #24
 8001158:	28ff      	cmp	r0, #255	@ 0xff
 800115a:	d006      	beq.n	800116a <__aeabi_fcmpun+0x22>
 800115c:	2000      	movs	r0, #0
 800115e:	29ff      	cmp	r1, #255	@ 0xff
 8001160:	d102      	bne.n	8001168 <__aeabi_fcmpun+0x20>
 8001162:	1e53      	subs	r3, r2, #1
 8001164:	419a      	sbcs	r2, r3
 8001166:	0010      	movs	r0, r2
 8001168:	4770      	bx	lr
 800116a:	38fe      	subs	r0, #254	@ 0xfe
 800116c:	2b00      	cmp	r3, #0
 800116e:	d1fb      	bne.n	8001168 <__aeabi_fcmpun+0x20>
 8001170:	e7f4      	b.n	800115c <__aeabi_fcmpun+0x14>
 8001172:	46c0      	nop			@ (mov r8, r8)

08001174 <__aeabi_f2iz>:
 8001174:	0241      	lsls	r1, r0, #9
 8001176:	0042      	lsls	r2, r0, #1
 8001178:	0fc3      	lsrs	r3, r0, #31
 800117a:	0a49      	lsrs	r1, r1, #9
 800117c:	2000      	movs	r0, #0
 800117e:	0e12      	lsrs	r2, r2, #24
 8001180:	2a7e      	cmp	r2, #126	@ 0x7e
 8001182:	dd03      	ble.n	800118c <__aeabi_f2iz+0x18>
 8001184:	2a9d      	cmp	r2, #157	@ 0x9d
 8001186:	dd02      	ble.n	800118e <__aeabi_f2iz+0x1a>
 8001188:	4a09      	ldr	r2, [pc, #36]	@ (80011b0 <__aeabi_f2iz+0x3c>)
 800118a:	1898      	adds	r0, r3, r2
 800118c:	4770      	bx	lr
 800118e:	2080      	movs	r0, #128	@ 0x80
 8001190:	0400      	lsls	r0, r0, #16
 8001192:	4301      	orrs	r1, r0
 8001194:	2a95      	cmp	r2, #149	@ 0x95
 8001196:	dc07      	bgt.n	80011a8 <__aeabi_f2iz+0x34>
 8001198:	2096      	movs	r0, #150	@ 0x96
 800119a:	1a82      	subs	r2, r0, r2
 800119c:	40d1      	lsrs	r1, r2
 800119e:	4248      	negs	r0, r1
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d1f3      	bne.n	800118c <__aeabi_f2iz+0x18>
 80011a4:	0008      	movs	r0, r1
 80011a6:	e7f1      	b.n	800118c <__aeabi_f2iz+0x18>
 80011a8:	3a96      	subs	r2, #150	@ 0x96
 80011aa:	4091      	lsls	r1, r2
 80011ac:	e7f7      	b.n	800119e <__aeabi_f2iz+0x2a>
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	7fffffff 	.word	0x7fffffff

080011b4 <__aeabi_i2f>:
 80011b4:	b570      	push	{r4, r5, r6, lr}
 80011b6:	2800      	cmp	r0, #0
 80011b8:	d013      	beq.n	80011e2 <__aeabi_i2f+0x2e>
 80011ba:	17c3      	asrs	r3, r0, #31
 80011bc:	18c5      	adds	r5, r0, r3
 80011be:	405d      	eors	r5, r3
 80011c0:	0fc4      	lsrs	r4, r0, #31
 80011c2:	0028      	movs	r0, r5
 80011c4:	f000 f842 	bl	800124c <__clzsi2>
 80011c8:	239e      	movs	r3, #158	@ 0x9e
 80011ca:	0001      	movs	r1, r0
 80011cc:	1a1b      	subs	r3, r3, r0
 80011ce:	2b96      	cmp	r3, #150	@ 0x96
 80011d0:	dc0f      	bgt.n	80011f2 <__aeabi_i2f+0x3e>
 80011d2:	2808      	cmp	r0, #8
 80011d4:	d034      	beq.n	8001240 <__aeabi_i2f+0x8c>
 80011d6:	3908      	subs	r1, #8
 80011d8:	408d      	lsls	r5, r1
 80011da:	026d      	lsls	r5, r5, #9
 80011dc:	0a6d      	lsrs	r5, r5, #9
 80011de:	b2d8      	uxtb	r0, r3
 80011e0:	e002      	b.n	80011e8 <__aeabi_i2f+0x34>
 80011e2:	2400      	movs	r4, #0
 80011e4:	2000      	movs	r0, #0
 80011e6:	2500      	movs	r5, #0
 80011e8:	05c0      	lsls	r0, r0, #23
 80011ea:	4328      	orrs	r0, r5
 80011ec:	07e4      	lsls	r4, r4, #31
 80011ee:	4320      	orrs	r0, r4
 80011f0:	bd70      	pop	{r4, r5, r6, pc}
 80011f2:	2b99      	cmp	r3, #153	@ 0x99
 80011f4:	dc16      	bgt.n	8001224 <__aeabi_i2f+0x70>
 80011f6:	1f42      	subs	r2, r0, #5
 80011f8:	2805      	cmp	r0, #5
 80011fa:	d000      	beq.n	80011fe <__aeabi_i2f+0x4a>
 80011fc:	4095      	lsls	r5, r2
 80011fe:	002a      	movs	r2, r5
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <__aeabi_i2f+0x94>)
 8001202:	4002      	ands	r2, r0
 8001204:	076e      	lsls	r6, r5, #29
 8001206:	d009      	beq.n	800121c <__aeabi_i2f+0x68>
 8001208:	260f      	movs	r6, #15
 800120a:	4035      	ands	r5, r6
 800120c:	2d04      	cmp	r5, #4
 800120e:	d005      	beq.n	800121c <__aeabi_i2f+0x68>
 8001210:	3204      	adds	r2, #4
 8001212:	0155      	lsls	r5, r2, #5
 8001214:	d502      	bpl.n	800121c <__aeabi_i2f+0x68>
 8001216:	239f      	movs	r3, #159	@ 0x9f
 8001218:	4002      	ands	r2, r0
 800121a:	1a5b      	subs	r3, r3, r1
 800121c:	0192      	lsls	r2, r2, #6
 800121e:	0a55      	lsrs	r5, r2, #9
 8001220:	b2d8      	uxtb	r0, r3
 8001222:	e7e1      	b.n	80011e8 <__aeabi_i2f+0x34>
 8001224:	2205      	movs	r2, #5
 8001226:	1a12      	subs	r2, r2, r0
 8001228:	0028      	movs	r0, r5
 800122a:	40d0      	lsrs	r0, r2
 800122c:	0002      	movs	r2, r0
 800122e:	0008      	movs	r0, r1
 8001230:	301b      	adds	r0, #27
 8001232:	4085      	lsls	r5, r0
 8001234:	0028      	movs	r0, r5
 8001236:	1e45      	subs	r5, r0, #1
 8001238:	41a8      	sbcs	r0, r5
 800123a:	4302      	orrs	r2, r0
 800123c:	0015      	movs	r5, r2
 800123e:	e7de      	b.n	80011fe <__aeabi_i2f+0x4a>
 8001240:	026d      	lsls	r5, r5, #9
 8001242:	2096      	movs	r0, #150	@ 0x96
 8001244:	0a6d      	lsrs	r5, r5, #9
 8001246:	e7cf      	b.n	80011e8 <__aeabi_i2f+0x34>
 8001248:	fbffffff 	.word	0xfbffffff

0800124c <__clzsi2>:
 800124c:	211c      	movs	r1, #28
 800124e:	2301      	movs	r3, #1
 8001250:	041b      	lsls	r3, r3, #16
 8001252:	4298      	cmp	r0, r3
 8001254:	d301      	bcc.n	800125a <__clzsi2+0xe>
 8001256:	0c00      	lsrs	r0, r0, #16
 8001258:	3910      	subs	r1, #16
 800125a:	0a1b      	lsrs	r3, r3, #8
 800125c:	4298      	cmp	r0, r3
 800125e:	d301      	bcc.n	8001264 <__clzsi2+0x18>
 8001260:	0a00      	lsrs	r0, r0, #8
 8001262:	3908      	subs	r1, #8
 8001264:	091b      	lsrs	r3, r3, #4
 8001266:	4298      	cmp	r0, r3
 8001268:	d301      	bcc.n	800126e <__clzsi2+0x22>
 800126a:	0900      	lsrs	r0, r0, #4
 800126c:	3904      	subs	r1, #4
 800126e:	a202      	add	r2, pc, #8	@ (adr r2, 8001278 <__clzsi2+0x2c>)
 8001270:	5c10      	ldrb	r0, [r2, r0]
 8001272:	1840      	adds	r0, r0, r1
 8001274:	4770      	bx	lr
 8001276:	46c0      	nop			@ (mov r8, r8)
 8001278:	02020304 	.word	0x02020304
 800127c:	01010101 	.word	0x01010101
	...

08001288 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8001288:	b500      	push	{lr}
 800128a:	b085      	sub	sp, #20

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800128c:	220c      	movs	r2, #12
 800128e:	2100      	movs	r1, #0
 8001290:	a801      	add	r0, sp, #4
 8001292:	f005 faea 	bl	800686a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001296:	483f      	ldr	r0, [pc, #252]	@ (8001394 <MX_ADC1_Init+0x10c>)
 8001298:	4b3f      	ldr	r3, [pc, #252]	@ (8001398 <MX_ADC1_Init+0x110>)
 800129a:	6003      	str	r3, [r0, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800129c:	2380      	movs	r3, #128	@ 0x80
 800129e:	05db      	lsls	r3, r3, #23
 80012a0:	6043      	str	r3, [r0, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80012a2:	2300      	movs	r3, #0
 80012a4:	6083      	str	r3, [r0, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80012a6:	60c3      	str	r3, [r0, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80012a8:	2280      	movs	r2, #128	@ 0x80
 80012aa:	0392      	lsls	r2, r2, #14
 80012ac:	6102      	str	r2, [r0, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012ae:	2204      	movs	r2, #4
 80012b0:	6142      	str	r2, [r0, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80012b2:	7603      	strb	r3, [r0, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80012b4:	7643      	strb	r3, [r0, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80012b6:	3a03      	subs	r2, #3
 80012b8:	7682      	strb	r2, [r0, #26]
  hadc1.Init.NbrOfConversion = 6;
 80012ba:	2106      	movs	r1, #6
 80012bc:	61c1      	str	r1, [r0, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80012be:	6243      	str	r3, [r0, #36]	@ 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80012c0:	6283      	str	r3, [r0, #40]	@ 0x28
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80012c2:	3126      	adds	r1, #38	@ 0x26
 80012c4:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	0149      	lsls	r1, r1, #5
 80012ca:	6301      	str	r1, [r0, #48]	@ 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_12CYCLES_5;
 80012cc:	2103      	movs	r1, #3
 80012ce:	6341      	str	r1, [r0, #52]	@ 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_12CYCLES_5;
 80012d0:	6381      	str	r1, [r0, #56]	@ 0x38
  hadc1.Init.OversamplingMode = ENABLE;
 80012d2:	3139      	adds	r1, #57	@ 0x39
 80012d4:	5442      	strb	r2, [r0, r1]
  hadc1.Init.Oversampling.Ratio = ADC_OVERSAMPLING_RATIO_32;
 80012d6:	320f      	adds	r2, #15
 80012d8:	6402      	str	r2, [r0, #64]	@ 0x40
  hadc1.Init.Oversampling.RightBitShift = ADC_RIGHTBITSHIFT_5;
 80012da:	3290      	adds	r2, #144	@ 0x90
 80012dc:	6442      	str	r2, [r0, #68]	@ 0x44
  hadc1.Init.Oversampling.TriggeredMode = ADC_TRIGGEREDMODE_SINGLE_TRIGGER;
 80012de:	6483      	str	r3, [r0, #72]	@ 0x48
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80012e0:	64c3      	str	r3, [r0, #76]	@ 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80012e2:	f000 fb15 	bl	8001910 <HAL_ADC_Init>
 80012e6:	2800      	cmp	r0, #0
 80012e8:	d13e      	bne.n	8001368 <MX_ADC1_Init+0xe0>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012ea:	2301      	movs	r3, #1
 80012ec:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80012ee:	2300      	movs	r3, #0
 80012f0:	9302      	str	r3, [sp, #8]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80012f2:	9303      	str	r3, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80012f4:	4827      	ldr	r0, [pc, #156]	@ (8001394 <MX_ADC1_Init+0x10c>)
 80012f6:	a901      	add	r1, sp, #4
 80012f8:	f000 fc78 	bl	8001bec <HAL_ADC_ConfigChannel>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d136      	bne.n	800136e <MX_ADC1_Init+0xe6>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001300:	4b26      	ldr	r3, [pc, #152]	@ (800139c <MX_ADC1_Init+0x114>)
 8001302:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001304:	2304      	movs	r3, #4
 8001306:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001308:	4822      	ldr	r0, [pc, #136]	@ (8001394 <MX_ADC1_Init+0x10c>)
 800130a:	a901      	add	r1, sp, #4
 800130c:	f000 fc6e 	bl	8001bec <HAL_ADC_ConfigChannel>
 8001310:	2800      	cmp	r0, #0
 8001312:	d12f      	bne.n	8001374 <MX_ADC1_Init+0xec>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001314:	4b22      	ldr	r3, [pc, #136]	@ (80013a0 <MX_ADC1_Init+0x118>)
 8001316:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001318:	2308      	movs	r3, #8
 800131a:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800131c:	481d      	ldr	r0, [pc, #116]	@ (8001394 <MX_ADC1_Init+0x10c>)
 800131e:	a901      	add	r1, sp, #4
 8001320:	f000 fc64 	bl	8001bec <HAL_ADC_ConfigChannel>
 8001324:	2800      	cmp	r0, #0
 8001326:	d128      	bne.n	800137a <MX_ADC1_Init+0xf2>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8001328:	4b1e      	ldr	r3, [pc, #120]	@ (80013a4 <MX_ADC1_Init+0x11c>)
 800132a:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 800132c:	230c      	movs	r3, #12
 800132e:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001330:	4818      	ldr	r0, [pc, #96]	@ (8001394 <MX_ADC1_Init+0x10c>)
 8001332:	a901      	add	r1, sp, #4
 8001334:	f000 fc5a 	bl	8001bec <HAL_ADC_ConfigChannel>
 8001338:	2800      	cmp	r0, #0
 800133a:	d121      	bne.n	8001380 <MX_ADC1_Init+0xf8>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800133c:	4b1a      	ldr	r3, [pc, #104]	@ (80013a8 <MX_ADC1_Init+0x120>)
 800133e:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001340:	2310      	movs	r3, #16
 8001342:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001344:	4813      	ldr	r0, [pc, #76]	@ (8001394 <MX_ADC1_Init+0x10c>)
 8001346:	a901      	add	r1, sp, #4
 8001348:	f000 fc50 	bl	8001bec <HAL_ADC_ConfigChannel>
 800134c:	2800      	cmp	r0, #0
 800134e:	d11a      	bne.n	8001386 <MX_ADC1_Init+0xfe>
    Error_Handler();
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001350:	4b16      	ldr	r3, [pc, #88]	@ (80013ac <MX_ADC1_Init+0x124>)
 8001352:	9301      	str	r3, [sp, #4]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001354:	2314      	movs	r3, #20
 8001356:	9302      	str	r3, [sp, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001358:	480e      	ldr	r0, [pc, #56]	@ (8001394 <MX_ADC1_Init+0x10c>)
 800135a:	a901      	add	r1, sp, #4
 800135c:	f000 fc46 	bl	8001bec <HAL_ADC_ConfigChannel>
 8001360:	2800      	cmp	r0, #0
 8001362:	d113      	bne.n	800138c <MX_ADC1_Init+0x104>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001364:	b005      	add	sp, #20
 8001366:	bd00      	pop	{pc}
    Error_Handler();
 8001368:	f000 f8fa 	bl	8001560 <Error_Handler>
 800136c:	e7bd      	b.n	80012ea <MX_ADC1_Init+0x62>
    Error_Handler();
 800136e:	f000 f8f7 	bl	8001560 <Error_Handler>
 8001372:	e7c5      	b.n	8001300 <MX_ADC1_Init+0x78>
    Error_Handler();
 8001374:	f000 f8f4 	bl	8001560 <Error_Handler>
 8001378:	e7cc      	b.n	8001314 <MX_ADC1_Init+0x8c>
    Error_Handler();
 800137a:	f000 f8f1 	bl	8001560 <Error_Handler>
 800137e:	e7d3      	b.n	8001328 <MX_ADC1_Init+0xa0>
    Error_Handler();
 8001380:	f000 f8ee 	bl	8001560 <Error_Handler>
 8001384:	e7da      	b.n	800133c <MX_ADC1_Init+0xb4>
    Error_Handler();
 8001386:	f000 f8eb 	bl	8001560 <Error_Handler>
 800138a:	e7e1      	b.n	8001350 <MX_ADC1_Init+0xc8>
    Error_Handler();
 800138c:	f000 f8e8 	bl	8001560 <Error_Handler>
}
 8001390:	e7e8      	b.n	8001364 <MX_ADC1_Init+0xdc>
 8001392:	46c0      	nop			@ (mov r8, r8)
 8001394:	200000e4 	.word	0x200000e4
 8001398:	40012400 	.word	0x40012400
 800139c:	04000002 	.word	0x04000002
 80013a0:	08000004 	.word	0x08000004
 80013a4:	0c000008 	.word	0x0c000008
 80013a8:	10000010 	.word	0x10000010
 80013ac:	14000020 	.word	0x14000020

080013b0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80013b0:	b510      	push	{r4, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	2214      	movs	r2, #20
 80013b8:	2100      	movs	r1, #0
 80013ba:	a803      	add	r0, sp, #12
 80013bc:	f005 fa55 	bl	800686a <memset>
  if(adcHandle->Instance==ADC1)
 80013c0:	4b1e      	ldr	r3, [pc, #120]	@ (800143c <HAL_ADC_MspInit+0x8c>)
 80013c2:	6822      	ldr	r2, [r4, #0]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d001      	beq.n	80013cc <HAL_ADC_MspInit+0x1c>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80013c8:	b008      	add	sp, #32
 80013ca:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC_CLK_ENABLE();
 80013cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001440 <HAL_ADC_MspInit+0x90>)
 80013ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013d0:	2180      	movs	r1, #128	@ 0x80
 80013d2:	0349      	lsls	r1, r1, #13
 80013d4:	430a      	orrs	r2, r1
 80013d6:	641a      	str	r2, [r3, #64]	@ 0x40
 80013d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80013da:	400a      	ands	r2, r1
 80013dc:	9201      	str	r2, [sp, #4]
 80013de:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80013e2:	2201      	movs	r2, #1
 80013e4:	4311      	orrs	r1, r2
 80013e6:	6359      	str	r1, [r3, #52]	@ 0x34
 80013e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ea:	401a      	ands	r2, r3
 80013ec:	9202      	str	r2, [sp, #8]
 80013ee:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80013f0:	233f      	movs	r3, #63	@ 0x3f
 80013f2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013f4:	3b3c      	subs	r3, #60	@ 0x3c
 80013f6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f8:	20a0      	movs	r0, #160	@ 0xa0
 80013fa:	a903      	add	r1, sp, #12
 80013fc:	05c0      	lsls	r0, r0, #23
 80013fe:	f001 f82f 	bl	8002460 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA1_Channel3;
 8001402:	4810      	ldr	r0, [pc, #64]	@ (8001444 <HAL_ADC_MspInit+0x94>)
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <HAL_ADC_MspInit+0x98>)
 8001406:	6003      	str	r3, [r0, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001408:	2305      	movs	r3, #5
 800140a:	6043      	str	r3, [r0, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140c:	2300      	movs	r3, #0
 800140e:	6083      	str	r3, [r0, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	60c3      	str	r3, [r0, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001412:	2280      	movs	r2, #128	@ 0x80
 8001414:	6102      	str	r2, [r0, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001416:	3280      	adds	r2, #128	@ 0x80
 8001418:	6142      	str	r2, [r0, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800141a:	2280      	movs	r2, #128	@ 0x80
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	6182      	str	r2, [r0, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001420:	61c3      	str	r3, [r0, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001422:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001424:	f000 fe82 	bl	800212c <HAL_DMA_Init>
 8001428:	2800      	cmp	r0, #0
 800142a:	d103      	bne.n	8001434 <HAL_ADC_MspInit+0x84>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <HAL_ADC_MspInit+0x94>)
 800142e:	6523      	str	r3, [r4, #80]	@ 0x50
 8001430:	629c      	str	r4, [r3, #40]	@ 0x28
}
 8001432:	e7c9      	b.n	80013c8 <HAL_ADC_MspInit+0x18>
      Error_Handler();
 8001434:	f000 f894 	bl	8001560 <Error_Handler>
 8001438:	e7f8      	b.n	800142c <HAL_ADC_MspInit+0x7c>
 800143a:	46c0      	nop			@ (mov r8, r8)
 800143c:	40012400 	.word	0x40012400
 8001440:	40021000 	.word	0x40021000
 8001444:	20000088 	.word	0x20000088
 8001448:	40020030 	.word	0x40020030

0800144c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800144c:	b500      	push	{lr}
 800144e:	b083      	sub	sp, #12

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <MX_DMA_Init+0x3c>)
 8001452:	6b91      	ldr	r1, [r2, #56]	@ 0x38
 8001454:	2301      	movs	r3, #1
 8001456:	4319      	orrs	r1, r3
 8001458:	6391      	str	r1, [r2, #56]	@ 0x38
 800145a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800145c:	4013      	ands	r3, r2
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	9b01      	ldr	r3, [sp, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001462:	2200      	movs	r2, #0
 8001464:	2100      	movs	r1, #0
 8001466:	2009      	movs	r0, #9
 8001468:	f000 fdc8 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800146c:	2009      	movs	r0, #9
 800146e:	f000 fdf7 	bl	8002060 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	200a      	movs	r0, #10
 8001478:	f000 fdc0 	bl	8001ffc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800147c:	200a      	movs	r0, #10
 800147e:	f000 fdef 	bl	8002060 <HAL_NVIC_EnableIRQ>

}
 8001482:	b003      	add	sp, #12
 8001484:	bd00      	pop	{pc}
 8001486:	46c0      	nop			@ (mov r8, r8)
 8001488:	40021000 	.word	0x40021000

0800148c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800148c:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800148e:	4b0d      	ldr	r3, [pc, #52]	@ (80014c4 <MX_GPIO_Init+0x38>)
 8001490:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001492:	2220      	movs	r2, #32
 8001494:	4311      	orrs	r1, r2
 8001496:	6359      	str	r1, [r3, #52]	@ 0x34
 8001498:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800149a:	400a      	ands	r2, r1
 800149c:	9201      	str	r2, [sp, #4]
 800149e:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014a2:	2201      	movs	r2, #1
 80014a4:	4311      	orrs	r1, r2
 80014a6:	6359      	str	r1, [r3, #52]	@ 0x34
 80014a8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014aa:	400a      	ands	r2, r1
 80014ac:	9202      	str	r2, [sp, #8]
 80014ae:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80014b2:	2202      	movs	r2, #2
 80014b4:	4311      	orrs	r1, r2
 80014b6:	6359      	str	r1, [r3, #52]	@ 0x34
 80014b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80014ba:	401a      	ands	r2, r3
 80014bc:	9203      	str	r2, [sp, #12]
 80014be:	9b03      	ldr	r3, [sp, #12]

}
 80014c0:	b004      	add	sp, #16
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014c8:	b500      	push	{lr}
 80014ca:	b093      	sub	sp, #76	@ 0x4c
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014cc:	2234      	movs	r2, #52	@ 0x34
 80014ce:	2100      	movs	r1, #0
 80014d0:	a805      	add	r0, sp, #20
 80014d2:	f005 f9ca 	bl	800686a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014d6:	2210      	movs	r2, #16
 80014d8:	2100      	movs	r1, #0
 80014da:	a801      	add	r0, sp, #4
 80014dc:	f005 f9c5 	bl	800686a <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e0:	2080      	movs	r0, #128	@ 0x80
 80014e2:	0080      	lsls	r0, r0, #2
 80014e4:	f001 f8a8 	bl	8002638 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80014e8:	2302      	movs	r3, #2
 80014ea:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80014ec:	2280      	movs	r2, #128	@ 0x80
 80014ee:	0052      	lsls	r2, r2, #1
 80014f0:	9208      	str	r2, [sp, #32]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80014f2:	2200      	movs	r2, #0
 80014f4:	9209      	str	r2, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80014f6:	2140      	movs	r1, #64	@ 0x40
 80014f8:	910a      	str	r1, [sp, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fa:	930c      	str	r3, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80014fc:	930d      	str	r3, [sp, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80014fe:	920e      	str	r2, [sp, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLN = 8;
 8001500:	3306      	adds	r3, #6
 8001502:	930f      	str	r3, [sp, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001504:	2380      	movs	r3, #128	@ 0x80
 8001506:	029b      	lsls	r3, r3, #10
 8001508:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800150a:	2380      	movs	r3, #128	@ 0x80
 800150c:	059b      	lsls	r3, r3, #22
 800150e:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001510:	a805      	add	r0, sp, #20
 8001512:	f001 f8c3 	bl	800269c <HAL_RCC_OscConfig>
 8001516:	2800      	cmp	r0, #0
 8001518:	d10e      	bne.n	8001538 <SystemClock_Config+0x70>
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800151a:	2307      	movs	r3, #7
 800151c:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800151e:	3b05      	subs	r3, #5
 8001520:	9302      	str	r3, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001522:	2300      	movs	r3, #0
 8001524:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001526:	9304      	str	r3, [sp, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001528:	2102      	movs	r1, #2
 800152a:	a801      	add	r0, sp, #4
 800152c:	f001 fb9c 	bl	8002c68 <HAL_RCC_ClockConfig>
 8001530:	2800      	cmp	r0, #0
 8001532:	d103      	bne.n	800153c <SystemClock_Config+0x74>
  {
    Error_Handler();
  }
}
 8001534:	b013      	add	sp, #76	@ 0x4c
 8001536:	bd00      	pop	{pc}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153a:	e7fe      	b.n	800153a <SystemClock_Config+0x72>
 800153c:	b672      	cpsid	i
 800153e:	e7fe      	b.n	800153e <SystemClock_Config+0x76>

08001540 <main>:
{
 8001540:	b510      	push	{r4, lr}
  HAL_Init();
 8001542:	f000 f9b3 	bl	80018ac <HAL_Init>
  SystemClock_Config();
 8001546:	f7ff ffbf 	bl	80014c8 <SystemClock_Config>
  MX_GPIO_Init();
 800154a:	f7ff ff9f 	bl	800148c <MX_GPIO_Init>
  MX_DMA_Init();
 800154e:	f7ff ff7d 	bl	800144c <MX_DMA_Init>
  MX_USART1_UART_Init();
 8001552:	f000 f89f 	bl	8001694 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8001556:	f7ff fe97 	bl	8001288 <MX_ADC1_Init>
  app_core();
 800155a:	f002 fcc9 	bl	8003ef0 <app_core>
  while (1)
 800155e:	e7fe      	b.n	800155e <main+0x1e>

08001560 <Error_Handler>:
 8001560:	b672      	cpsid	i
  while (1)
 8001562:	e7fe      	b.n	8001562 <Error_Handler+0x2>

08001564 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001564:	b500      	push	{lr}
 8001566:	b083      	sub	sp, #12

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_MspInit+0x34>)
 800156a:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800156c:	2201      	movs	r2, #1
 800156e:	4311      	orrs	r1, r2
 8001570:	6419      	str	r1, [r3, #64]	@ 0x40
 8001572:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001574:	400a      	ands	r2, r1
 8001576:	9200      	str	r2, [sp, #0]
 8001578:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800157a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800157c:	2180      	movs	r1, #128	@ 0x80
 800157e:	0549      	lsls	r1, r1, #21
 8001580:	430a      	orrs	r2, r1
 8001582:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001586:	400b      	ands	r3, r1
 8001588:	9301      	str	r3, [sp, #4]
 800158a:	9b01      	ldr	r3, [sp, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800158c:	20c0      	movs	r0, #192	@ 0xc0
 800158e:	00c0      	lsls	r0, r0, #3
 8001590:	f000 f9b2 	bl	80018f8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001594:	b003      	add	sp, #12
 8001596:	bd00      	pop	{pc}
 8001598:	40021000 	.word	0x40021000

0800159c <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800159c:	e7fe      	b.n	800159c <NMI_Handler>

0800159e <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800159e:	e7fe      	b.n	800159e <HardFault_Handler>

080015a0 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015a4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a6:	f000 f995 	bl	80018d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015aa:	bd10      	pop	{r4, pc}

080015ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80015ac:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80015ae:	4802      	ldr	r0, [pc, #8]	@ (80015b8 <DMA1_Channel1_IRQHandler+0xc>)
 80015b0:	f000 feee 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80015b4:	bd10      	pop	{r4, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	200001a8 	.word	0x200001a8

080015bc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80015bc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80015be:	4803      	ldr	r0, [pc, #12]	@ (80015cc <DMA1_Channel2_3_IRQHandler+0x10>)
 80015c0:	f000 fee6 	bl	8002390 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_adc1);
 80015c4:	4802      	ldr	r0, [pc, #8]	@ (80015d0 <DMA1_Channel2_3_IRQHandler+0x14>)
 80015c6:	f000 fee3 	bl	8002390 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80015ca:	bd10      	pop	{r4, pc}
 80015cc:	2000014c 	.word	0x2000014c
 80015d0:	20000088 	.word	0x20000088

080015d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80015d4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80015d6:	4c06      	ldr	r4, [pc, #24]	@ (80015f0 <USART1_IRQHandler+0x1c>)
 80015d8:	0020      	movs	r0, r4
 80015da:	f001 fe73 	bl	80032c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(&huart1);
 80015de:	0020      	movs	r0, r4
 80015e0:	f004 f85a 	bl	8005698 <getContainerUartInstance>
  if(uart_instance) {
 80015e4:	2800      	cmp	r0, #0
 80015e6:	d001      	beq.n	80015ec <USART1_IRQHandler+0x18>
	  USER_UART_IRQHandler(uart_instance);
 80015e8:	f004 f845 	bl	8005676 <USER_UART_IRQHandler>
  }

  /* USER CODE END USART1_IRQn 1 */
}
 80015ec:	bd10      	pop	{r4, pc}
 80015ee:	46c0      	nop			@ (mov r8, r8)
 80015f0:	20000204 	.word	0x20000204

080015f4 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80015f4:	2001      	movs	r0, #1
 80015f6:	4770      	bx	lr

080015f8 <_kill>:

int _kill(int pid, int sig)
{
 80015f8:	b510      	push	{r4, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80015fa:	f005 f9e7 	bl	80069cc <__errno>
 80015fe:	2316      	movs	r3, #22
 8001600:	6003      	str	r3, [r0, #0]
  return -1;
 8001602:	2001      	movs	r0, #1
}
 8001604:	4240      	negs	r0, r0
 8001606:	bd10      	pop	{r4, pc}

08001608 <_exit>:

void _exit (int status)
{
 8001608:	b510      	push	{r4, lr}
  errno = EINVAL;
 800160a:	f005 f9df 	bl	80069cc <__errno>
 800160e:	2316      	movs	r3, #22
 8001610:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 8001612:	e7fe      	b.n	8001612 <_exit+0xa>

08001614 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001614:	b570      	push	{r4, r5, r6, lr}
 8001616:	1e16      	subs	r6, r2, #0
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001618:	dd07      	ble.n	800162a <_read+0x16>
 800161a:	000c      	movs	r4, r1
 800161c:	188d      	adds	r5, r1, r2
  {
    *ptr++ = __io_getchar();
 800161e:	e000      	b.n	8001622 <_read+0xe>
 8001620:	bf00      	nop
 8001622:	7020      	strb	r0, [r4, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001624:	3401      	adds	r4, #1
 8001626:	42ac      	cmp	r4, r5
 8001628:	d1f9      	bne.n	800161e <_read+0xa>
  }

  return len;
}
 800162a:	0030      	movs	r0, r6
 800162c:	bd70      	pop	{r4, r5, r6, pc}

0800162e <_close>:
}

int _close(int file)
{
  (void)file;
  return -1;
 800162e:	2001      	movs	r0, #1
}
 8001630:	4240      	negs	r0, r0
 8001632:	4770      	bx	lr

08001634 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8001634:	2380      	movs	r3, #128	@ 0x80
 8001636:	019b      	lsls	r3, r3, #6
 8001638:	604b      	str	r3, [r1, #4]
  return 0;
}
 800163a:	2000      	movs	r0, #0
 800163c:	4770      	bx	lr

0800163e <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 800163e:	2001      	movs	r0, #1
 8001640:	4770      	bx	lr

08001642 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8001642:	2000      	movs	r0, #0
 8001644:	4770      	bx	lr
	...

08001648 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001648:	b510      	push	{r4, lr}
 800164a:	0003      	movs	r3, r0
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800164c:	4a0c      	ldr	r2, [pc, #48]	@ (8001680 <_sbrk+0x38>)
 800164e:	490d      	ldr	r1, [pc, #52]	@ (8001684 <_sbrk+0x3c>)
 8001650:	1a52      	subs	r2, r2, r1
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001652:	490d      	ldr	r1, [pc, #52]	@ (8001688 <_sbrk+0x40>)
 8001654:	6809      	ldr	r1, [r1, #0]
 8001656:	2900      	cmp	r1, #0
 8001658:	d007      	beq.n	800166a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800165a:	490b      	ldr	r1, [pc, #44]	@ (8001688 <_sbrk+0x40>)
 800165c:	6808      	ldr	r0, [r1, #0]
 800165e:	18c3      	adds	r3, r0, r3
 8001660:	4293      	cmp	r3, r2
 8001662:	d806      	bhi.n	8001672 <_sbrk+0x2a>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8001664:	4a08      	ldr	r2, [pc, #32]	@ (8001688 <_sbrk+0x40>)
 8001666:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
}
 8001668:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 800166a:	4907      	ldr	r1, [pc, #28]	@ (8001688 <_sbrk+0x40>)
 800166c:	4807      	ldr	r0, [pc, #28]	@ (800168c <_sbrk+0x44>)
 800166e:	6008      	str	r0, [r1, #0]
 8001670:	e7f3      	b.n	800165a <_sbrk+0x12>
    errno = ENOMEM;
 8001672:	f005 f9ab 	bl	80069cc <__errno>
 8001676:	230c      	movs	r3, #12
 8001678:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 800167a:	2001      	movs	r0, #1
 800167c:	4240      	negs	r0, r0
 800167e:	e7f3      	b.n	8001668 <_sbrk+0x20>
 8001680:	20009000 	.word	0x20009000
 8001684:	00000400 	.word	0x00000400
 8001688:	20000148 	.word	0x20000148
 800168c:	200005d0 	.word	0x200005d0

08001690 <SystemInit>:
{
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001690:	4770      	bx	lr
	...

08001694 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001694:	b510      	push	{r4, lr}
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001696:	4819      	ldr	r0, [pc, #100]	@ (80016fc <MX_USART1_UART_Init+0x68>)
 8001698:	4b19      	ldr	r3, [pc, #100]	@ (8001700 <MX_USART1_UART_Init+0x6c>)
 800169a:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 800169c:	23e1      	movs	r3, #225	@ 0xe1
 800169e:	025b      	lsls	r3, r3, #9
 80016a0:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	2300      	movs	r3, #0
 80016a4:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a6:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016a8:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016aa:	220c      	movs	r2, #12
 80016ac:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ae:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016b2:	6203      	str	r3, [r0, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016b4:	6243      	str	r3, [r0, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016b6:	6283      	str	r3, [r0, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016b8:	f002 fabe 	bl	8003c38 <HAL_UART_Init>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d111      	bne.n	80016e4 <MX_USART1_UART_Init+0x50>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016c0:	480e      	ldr	r0, [pc, #56]	@ (80016fc <MX_USART1_UART_Init+0x68>)
 80016c2:	2100      	movs	r1, #0
 80016c4:	f002 fbc6 	bl	8003e54 <HAL_UARTEx_SetTxFifoThreshold>
 80016c8:	2800      	cmp	r0, #0
 80016ca:	d10e      	bne.n	80016ea <MX_USART1_UART_Init+0x56>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016cc:	480b      	ldr	r0, [pc, #44]	@ (80016fc <MX_USART1_UART_Init+0x68>)
 80016ce:	2100      	movs	r1, #0
 80016d0:	f002 fbe6 	bl	8003ea0 <HAL_UARTEx_SetRxFifoThreshold>
 80016d4:	2800      	cmp	r0, #0
 80016d6:	d10b      	bne.n	80016f0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80016d8:	4808      	ldr	r0, [pc, #32]	@ (80016fc <MX_USART1_UART_Init+0x68>)
 80016da:	f002 fb9b 	bl	8003e14 <HAL_UARTEx_DisableFifoMode>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d109      	bne.n	80016f6 <MX_USART1_UART_Init+0x62>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e2:	bd10      	pop	{r4, pc}
    Error_Handler();
 80016e4:	f7ff ff3c 	bl	8001560 <Error_Handler>
 80016e8:	e7ea      	b.n	80016c0 <MX_USART1_UART_Init+0x2c>
    Error_Handler();
 80016ea:	f7ff ff39 	bl	8001560 <Error_Handler>
 80016ee:	e7ed      	b.n	80016cc <MX_USART1_UART_Init+0x38>
    Error_Handler();
 80016f0:	f7ff ff36 	bl	8001560 <Error_Handler>
 80016f4:	e7f0      	b.n	80016d8 <MX_USART1_UART_Init+0x44>
    Error_Handler();
 80016f6:	f7ff ff33 	bl	8001560 <Error_Handler>
}
 80016fa:	e7f2      	b.n	80016e2 <MX_USART1_UART_Init+0x4e>
 80016fc:	20000204 	.word	0x20000204
 8001700:	40013800 	.word	0x40013800

08001704 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001704:	b530      	push	{r4, r5, lr}
 8001706:	b08f      	sub	sp, #60	@ 0x3c
 8001708:	0004      	movs	r4, r0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	2214      	movs	r2, #20
 800170c:	2100      	movs	r1, #0
 800170e:	a809      	add	r0, sp, #36	@ 0x24
 8001710:	f005 f8ab 	bl	800686a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001714:	221c      	movs	r2, #28
 8001716:	2100      	movs	r1, #0
 8001718:	a802      	add	r0, sp, #8
 800171a:	f005 f8a6 	bl	800686a <memset>
  if(uartHandle->Instance==USART1)
 800171e:	4b33      	ldr	r3, [pc, #204]	@ (80017ec <HAL_UART_MspInit+0xe8>)
 8001720:	6822      	ldr	r2, [r4, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d001      	beq.n	800172a <HAL_UART_MspInit+0x26>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001726:	b00f      	add	sp, #60	@ 0x3c
 8001728:	bd30      	pop	{r4, r5, pc}
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800172a:	2301      	movs	r3, #1
 800172c:	9302      	str	r3, [sp, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800172e:	a802      	add	r0, sp, #8
 8001730:	f001 fb82 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 8001734:	2800      	cmp	r0, #0
 8001736:	d14f      	bne.n	80017d8 <HAL_UART_MspInit+0xd4>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <HAL_UART_MspInit+0xec>)
 800173a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800173c:	2180      	movs	r1, #128	@ 0x80
 800173e:	01c9      	lsls	r1, r1, #7
 8001740:	430a      	orrs	r2, r1
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40
 8001744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001746:	400a      	ands	r2, r1
 8001748:	9200      	str	r2, [sp, #0]
 800174a:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800174e:	2202      	movs	r2, #2
 8001750:	4311      	orrs	r1, r2
 8001752:	6359      	str	r1, [r3, #52]	@ 0x34
 8001754:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001756:	4013      	ands	r3, r2
 8001758:	9301      	str	r3, [sp, #4]
 800175a:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175c:	23c0      	movs	r3, #192	@ 0xc0
 800175e:	9309      	str	r3, [sp, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	920a      	str	r2, [sp, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2500      	movs	r5, #0
 8001764:	950b      	str	r5, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001766:	950c      	str	r5, [sp, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF0_USART1;
 8001768:	950d      	str	r5, [sp, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800176a:	a909      	add	r1, sp, #36	@ 0x24
 800176c:	4821      	ldr	r0, [pc, #132]	@ (80017f4 <HAL_UART_MspInit+0xf0>)
 800176e:	f000 fe77 	bl	8002460 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA1_Channel1;
 8001772:	4821      	ldr	r0, [pc, #132]	@ (80017f8 <HAL_UART_MspInit+0xf4>)
 8001774:	4b21      	ldr	r3, [pc, #132]	@ (80017fc <HAL_UART_MspInit+0xf8>)
 8001776:	6003      	str	r3, [r0, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8001778:	2332      	movs	r3, #50	@ 0x32
 800177a:	6043      	str	r3, [r0, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800177c:	6085      	str	r5, [r0, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177e:	60c5      	str	r5, [r0, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001780:	334e      	adds	r3, #78	@ 0x4e
 8001782:	6103      	str	r3, [r0, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001784:	6145      	str	r5, [r0, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001786:	6185      	str	r5, [r0, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001788:	61c5      	str	r5, [r0, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800178a:	6205      	str	r5, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800178c:	f000 fcce 	bl	800212c <HAL_DMA_Init>
 8001790:	2800      	cmp	r0, #0
 8001792:	d124      	bne.n	80017de <HAL_UART_MspInit+0xda>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8001794:	2280      	movs	r2, #128	@ 0x80
 8001796:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_UART_MspInit+0xf4>)
 8001798:	50a3      	str	r3, [r4, r2]
 800179a:	629c      	str	r4, [r3, #40]	@ 0x28
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800179c:	4818      	ldr	r0, [pc, #96]	@ (8001800 <HAL_UART_MspInit+0xfc>)
 800179e:	4b19      	ldr	r3, [pc, #100]	@ (8001804 <HAL_UART_MspInit+0x100>)
 80017a0:	6003      	str	r3, [r0, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80017a2:	2333      	movs	r3, #51	@ 0x33
 80017a4:	6043      	str	r3, [r0, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017a6:	3b23      	subs	r3, #35	@ 0x23
 80017a8:	6083      	str	r3, [r0, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017aa:	2300      	movs	r3, #0
 80017ac:	60c3      	str	r3, [r0, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017ae:	6102      	str	r2, [r0, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017b0:	6143      	str	r3, [r0, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017b2:	6183      	str	r3, [r0, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80017b4:	61c3      	str	r3, [r0, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017b6:	6203      	str	r3, [r0, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80017b8:	f000 fcb8 	bl	800212c <HAL_DMA_Init>
 80017bc:	2800      	cmp	r0, #0
 80017be:	d111      	bne.n	80017e4 <HAL_UART_MspInit+0xe0>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80017c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_UART_MspInit+0xfc>)
 80017c2:	67e3      	str	r3, [r4, #124]	@ 0x7c
 80017c4:	629c      	str	r4, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80017c6:	2200      	movs	r2, #0
 80017c8:	2100      	movs	r1, #0
 80017ca:	201b      	movs	r0, #27
 80017cc:	f000 fc16 	bl	8001ffc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017d0:	201b      	movs	r0, #27
 80017d2:	f000 fc45 	bl	8002060 <HAL_NVIC_EnableIRQ>
}
 80017d6:	e7a6      	b.n	8001726 <HAL_UART_MspInit+0x22>
      Error_Handler();
 80017d8:	f7ff fec2 	bl	8001560 <Error_Handler>
 80017dc:	e7ac      	b.n	8001738 <HAL_UART_MspInit+0x34>
      Error_Handler();
 80017de:	f7ff febf 	bl	8001560 <Error_Handler>
 80017e2:	e7d7      	b.n	8001794 <HAL_UART_MspInit+0x90>
      Error_Handler();
 80017e4:	f7ff febc 	bl	8001560 <Error_Handler>
 80017e8:	e7ea      	b.n	80017c0 <HAL_UART_MspInit+0xbc>
 80017ea:	46c0      	nop			@ (mov r8, r8)
 80017ec:	40013800 	.word	0x40013800
 80017f0:	40021000 	.word	0x40021000
 80017f4:	50000400 	.word	0x50000400
 80017f8:	200001a8 	.word	0x200001a8
 80017fc:	40020008 	.word	0x40020008
 8001800:	2000014c 	.word	0x2000014c
 8001804:	4002001c 	.word	0x4002001c

08001808 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001808:	480d      	ldr	r0, [pc, #52]	@ (8001840 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800180a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800180c:	f7ff ff40 	bl	8001690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001810:	480c      	ldr	r0, [pc, #48]	@ (8001844 <LoopForever+0x6>)
  ldr r1, =_edata
 8001812:	490d      	ldr	r1, [pc, #52]	@ (8001848 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001814:	4a0d      	ldr	r2, [pc, #52]	@ (800184c <LoopForever+0xe>)
  movs r3, #0
 8001816:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001818:	e002      	b.n	8001820 <LoopCopyDataInit>

0800181a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800181c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800181e:	3304      	adds	r3, #4

08001820 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001820:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001822:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001824:	d3f9      	bcc.n	800181a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001826:	4a0a      	ldr	r2, [pc, #40]	@ (8001850 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001828:	4c0a      	ldr	r4, [pc, #40]	@ (8001854 <LoopForever+0x16>)
  movs r3, #0
 800182a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800182c:	e001      	b.n	8001832 <LoopFillZerobss>

0800182e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800182e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001830:	3204      	adds	r2, #4

08001832 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001832:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001834:	d3fb      	bcc.n	800182e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001836:	f005 f8cf 	bl	80069d8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800183a:	f7ff fe81 	bl	8001540 <main>

0800183e <LoopForever>:

LoopForever:
  b LoopForever
 800183e:	e7fe      	b.n	800183e <LoopForever>
  ldr   r0, =_estack
 8001840:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 800184c:	08007e9c 	.word	0x08007e9c
  ldr r2, =_sbss
 8001850:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001854:	200005cc 	.word	0x200005cc

08001858 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_IRQHandler>
	...

0800185c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800185c:	b570      	push	{r4, r5, r6, lr}
 800185e:	0004      	movs	r4, r0
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8001860:	4b0f      	ldr	r3, [pc, #60]	@ (80018a0 <HAL_InitTick+0x44>)
 8001862:	7819      	ldrb	r1, [r3, #0]
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001864:	2001      	movs	r0, #1
  if ((uint32_t)uwTickFreq != 0U)
 8001866:	2900      	cmp	r1, #0
 8001868:	d100      	bne.n	800186c <HAL_InitTick+0x10>
  }

  /* Return function status */
  return status;
}
 800186a:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 800186c:	4d0d      	ldr	r5, [pc, #52]	@ (80018a4 <HAL_InitTick+0x48>)
 800186e:	20fa      	movs	r0, #250	@ 0xfa
 8001870:	0080      	lsls	r0, r0, #2
 8001872:	f7fe fc4f 	bl	8000114 <__udivsi3>
 8001876:	0001      	movs	r1, r0
 8001878:	6828      	ldr	r0, [r5, #0]
 800187a:	f7fe fc4b 	bl	8000114 <__udivsi3>
 800187e:	f000 fbfb 	bl	8002078 <HAL_SYSTICK_Config>
 8001882:	0003      	movs	r3, r0
      status = HAL_ERROR;
 8001884:	2001      	movs	r0, #1
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1ef      	bne.n	800186a <HAL_InitTick+0xe>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800188a:	2c03      	cmp	r4, #3
 800188c:	d8ed      	bhi.n	800186a <HAL_InitTick+0xe>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188e:	2200      	movs	r2, #0
 8001890:	0021      	movs	r1, r4
 8001892:	4240      	negs	r0, r0
 8001894:	f000 fbb2 	bl	8001ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001898:	4b03      	ldr	r3, [pc, #12]	@ (80018a8 <HAL_InitTick+0x4c>)
 800189a:	601c      	str	r4, [r3, #0]
  HAL_StatusTypeDef  status = HAL_OK;
 800189c:	2000      	movs	r0, #0
 800189e:	e7e4      	b.n	800186a <HAL_InitTick+0xe>
 80018a0:	20000004 	.word	0x20000004
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000008 	.word	0x20000008

080018ac <HAL_Init>:
{
 80018ac:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ae:	4a08      	ldr	r2, [pc, #32]	@ (80018d0 <HAL_Init+0x24>)
 80018b0:	6811      	ldr	r1, [r2, #0]
 80018b2:	2380      	movs	r3, #128	@ 0x80
 80018b4:	005b      	lsls	r3, r3, #1
 80018b6:	430b      	orrs	r3, r1
 80018b8:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ba:	2003      	movs	r0, #3
 80018bc:	f7ff ffce 	bl	800185c <HAL_InitTick>
 80018c0:	1e04      	subs	r4, r0, #0
 80018c2:	d002      	beq.n	80018ca <HAL_Init+0x1e>
    status = HAL_ERROR;
 80018c4:	2401      	movs	r4, #1
}
 80018c6:	0020      	movs	r0, r4
 80018c8:	bd10      	pop	{r4, pc}
  HAL_MspInit();
 80018ca:	f7ff fe4b 	bl	8001564 <HAL_MspInit>
 80018ce:	e7fa      	b.n	80018c6 <HAL_Init+0x1a>
 80018d0:	40022000 	.word	0x40022000

080018d4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80018d4:	4a03      	ldr	r2, [pc, #12]	@ (80018e4 <HAL_IncTick+0x10>)
 80018d6:	6811      	ldr	r1, [r2, #0]
 80018d8:	4b03      	ldr	r3, [pc, #12]	@ (80018e8 <HAL_IncTick+0x14>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	185b      	adds	r3, r3, r1
 80018de:	6013      	str	r3, [r2, #0]
}
 80018e0:	4770      	bx	lr
 80018e2:	46c0      	nop			@ (mov r8, r8)
 80018e4:	20000298 	.word	0x20000298
 80018e8:	20000004 	.word	0x20000004

080018ec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80018ec:	4b01      	ldr	r3, [pc, #4]	@ (80018f4 <HAL_GetTick+0x8>)
 80018ee:	6818      	ldr	r0, [r3, #0]
}
 80018f0:	4770      	bx	lr
 80018f2:	46c0      	nop			@ (mov r8, r8)
 80018f4:	20000298 	.word	0x20000298

080018f8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80018f8:	4a03      	ldr	r2, [pc, #12]	@ (8001908 <HAL_SYSCFG_StrobeDBattpinsConfig+0x10>)
 80018fa:	6813      	ldr	r3, [r2, #0]
 80018fc:	4903      	ldr	r1, [pc, #12]	@ (800190c <HAL_SYSCFG_StrobeDBattpinsConfig+0x14>)
 80018fe:	400b      	ands	r3, r1
 8001900:	4303      	orrs	r3, r0
 8001902:	6013      	str	r3, [r2, #0]
}
 8001904:	4770      	bx	lr
 8001906:	46c0      	nop			@ (mov r8, r8)
 8001908:	40010000 	.word	0x40010000
 800190c:	fffff9ff 	.word	0xfffff9ff

08001910 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001910:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001912:	b083      	sub	sp, #12
 8001914:	0004      	movs	r4, r0
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cfgr1 = 0UL;
  uint32_t tmp_cfgr2 = 0UL;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001916:	2300      	movs	r3, #0
 8001918:	9301      	str	r3, [sp, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800191a:	2800      	cmp	r0, #0
 800191c:	d100      	bne.n	8001920 <HAL_ADC_Init+0x10>
 800191e:	e0ff      	b.n	8001b20 <HAL_ADC_Init+0x210>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001920:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001922:	2b00      	cmp	r3, #0
 8001924:	d100      	bne.n	8001928 <HAL_ADC_Init+0x18>
 8001926:	e0b6      	b.n	8001a96 <HAL_ADC_Init+0x186>

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001928:	6823      	ldr	r3, [r4, #0]
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	00d2      	lsls	r2, r2, #3
 800192e:	d417      	bmi.n	8001960 <HAL_ADC_Init+0x50>
  MODIFY_REG(ADCx->CR,
 8001930:	6899      	ldr	r1, [r3, #8]
 8001932:	4a7c      	ldr	r2, [pc, #496]	@ (8001b24 <HAL_ADC_Init+0x214>)
 8001934:	4011      	ands	r1, r2
 8001936:	2280      	movs	r2, #128	@ 0x80
 8001938:	0552      	lsls	r2, r2, #21
 800193a:	430a      	orrs	r2, r1
 800193c:	609a      	str	r2, [r3, #8]
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800193e:	4b7a      	ldr	r3, [pc, #488]	@ (8001b28 <HAL_ADC_Init+0x218>)
 8001940:	6818      	ldr	r0, [r3, #0]
 8001942:	497a      	ldr	r1, [pc, #488]	@ (8001b2c <HAL_ADC_Init+0x21c>)
 8001944:	f7fe fbe6 	bl	8000114 <__udivsi3>
 8001948:	3001      	adds	r0, #1
 800194a:	0040      	lsls	r0, r0, #1
 800194c:	9001      	str	r0, [sp, #4]
    while (wait_loop_index != 0UL)
 800194e:	9b01      	ldr	r3, [sp, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <HAL_ADC_Init+0x50>
    {
      wait_loop_index--;
 8001954:	9b01      	ldr	r3, [sp, #4]
 8001956:	3b01      	subs	r3, #1
 8001958:	9301      	str	r3, [sp, #4]
    while (wait_loop_index != 0UL)
 800195a:	9b01      	ldr	r3, [sp, #4]
 800195c:	2b00      	cmp	r3, #0
 800195e:	d1f9      	bne.n	8001954 <HAL_ADC_Init+0x44>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001960:	6821      	ldr	r1, [r4, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001962:	688b      	ldr	r3, [r1, #8]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	2000      	movs	r0, #0
 8001966:	00db      	lsls	r3, r3, #3
 8001968:	d408      	bmi.n	800197c <HAL_ADC_Init+0x6c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800196a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800196c:	2210      	movs	r2, #16
 800196e:	4313      	orrs	r3, r2
 8001970:	65a3      	str	r3, [r4, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001972:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001974:	3a0f      	subs	r2, #15
 8001976:	4313      	orrs	r3, r2
 8001978:	65e3      	str	r3, [r4, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800197a:	3001      	adds	r0, #1
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800197c:	688d      	ldr	r5, [r1, #8]
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800197e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001980:	2310      	movs	r3, #16
 8001982:	4013      	ands	r3, r2
 8001984:	2204      	movs	r2, #4
 8001986:	402a      	ands	r2, r5
 8001988:	4313      	orrs	r3, r2
 800198a:	d000      	beq.n	800198e <HAL_ADC_Init+0x7e>
 800198c:	e0c1      	b.n	8001b12 <HAL_ADC_Init+0x202>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800198e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001990:	4a67      	ldr	r2, [pc, #412]	@ (8001b30 <HAL_ADC_Init+0x220>)
 8001992:	4013      	ands	r3, r2
 8001994:	3206      	adds	r2, #6
 8001996:	32ff      	adds	r2, #255	@ 0xff
 8001998:	4313      	orrs	r3, r2
 800199a:	65a3      	str	r3, [r4, #88]	@ 0x58
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800199c:	688b      	ldr	r3, [r1, #8]
 800199e:	07db      	lsls	r3, r3, #31
 80019a0:	d44f      	bmi.n	8001a42 <HAL_ADC_Init+0x132>
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019a2:	7ea5      	ldrb	r5, [r4, #26]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 80019a4:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80019a6:	1e73      	subs	r3, r6, #1
 80019a8:	419e      	sbcs	r6, r3
 80019aa:	0336      	lsls	r6, r6, #12
 80019ac:	68a2      	ldr	r2, [r4, #8]
 80019ae:	68e3      	ldr	r3, [r4, #12]
 80019b0:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80019b2:	7e23      	ldrb	r3, [r4, #24]
 80019b4:	039b      	lsls	r3, r3, #14
 80019b6:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80019b8:	7e63      	ldrb	r3, [r4, #25]
 80019ba:	03db      	lsls	r3, r3, #15
 80019bc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80019be:	036b      	lsls	r3, r5, #13
 80019c0:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019c2:	6923      	ldr	r3, [r4, #16]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db6d      	blt.n	8001aa4 <HAL_ADC_Init+0x194>
 80019c8:	2780      	movs	r7, #128	@ 0x80
 80019ca:	03bf      	lsls	r7, r7, #14
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80019cc:	232c      	movs	r3, #44	@ 0x2c
 80019ce:	5ce3      	ldrb	r3, [r4, r3]
 80019d0:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80019d2:	4313      	orrs	r3, r2
 80019d4:	4333      	orrs	r3, r6
 80019d6:	433b      	orrs	r3, r7

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80019d8:	2220      	movs	r2, #32
 80019da:	5ca2      	ldrb	r2, [r4, r2]
 80019dc:	2a01      	cmp	r2, #1
 80019de:	d064      	beq.n	8001aaa <HAL_ADC_Init+0x19a>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80019e2:	2a00      	cmp	r2, #0
 80019e4:	d005      	beq.n	80019f2 <HAL_ADC_Init+0xe2>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80019e6:	25e0      	movs	r5, #224	@ 0xe0
 80019e8:	006d      	lsls	r5, r5, #1
 80019ea:	402a      	ands	r2, r5
 80019ec:	6aa5      	ldr	r5, [r4, #40]	@ 0x28
 80019ee:	432a      	orrs	r2, r5
 80019f0:	4313      	orrs	r3, r2
                      hadc->Init.ExternalTrigConvEdge);
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80019f2:	68ca      	ldr	r2, [r1, #12]
 80019f4:	4d4f      	ldr	r5, [pc, #316]	@ (8001b34 <HAL_ADC_Init+0x224>)
 80019f6:	402a      	ands	r2, r5
 80019f8:	4313      	orrs	r3, r2
 80019fa:	60cb      	str	r3, [r1, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80019fc:	6863      	ldr	r3, [r4, #4]
 80019fe:	0f9b      	lsrs	r3, r3, #30
 8001a00:	079b      	lsls	r3, r3, #30
 8001a02:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8001a04:	431a      	orrs	r2, r3
                    hadc->Init.TriggerFrequencyMode
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001a06:	213c      	movs	r1, #60	@ 0x3c
 8001a08:	5c61      	ldrb	r1, [r4, r1]
 8001a0a:	2901      	cmp	r1, #1
 8001a0c:	d05c      	beq.n	8001ac8 <HAL_ADC_Init+0x1b8>
                      hadc->Init.Oversampling.RightBitShift |
                      hadc->Init.Oversampling.TriggeredMode
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001a0e:	6821      	ldr	r1, [r4, #0]
 8001a10:	690b      	ldr	r3, [r1, #16]
 8001a12:	4d49      	ldr	r5, [pc, #292]	@ (8001b38 <HAL_ADC_Init+0x228>)
 8001a14:	402b      	ands	r3, r5
 8001a16:	4313      	orrs	r3, r2
 8001a18:	610b      	str	r3, [r1, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001a1a:	6862      	ldr	r2, [r4, #4]
 8001a1c:	0053      	lsls	r3, r2, #1
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	2180      	movs	r1, #128	@ 0x80
 8001a22:	05c9      	lsls	r1, r1, #23
 8001a24:	428b      	cmp	r3, r1
 8001a26:	d00c      	beq.n	8001a42 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001a28:	2380      	movs	r3, #128	@ 0x80
 8001a2a:	061b      	lsls	r3, r3, #24
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d008      	beq.n	8001a42 <HAL_ADC_Init+0x132>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001a30:	4942      	ldr	r1, [pc, #264]	@ (8001b3c <HAL_ADC_Init+0x22c>)
 8001a32:	680b      	ldr	r3, [r1, #0]
 8001a34:	4d42      	ldr	r5, [pc, #264]	@ (8001b40 <HAL_ADC_Init+0x230>)
 8001a36:	402b      	ands	r3, r5
 8001a38:	25f0      	movs	r5, #240	@ 0xf0
 8001a3a:	03ad      	lsls	r5, r5, #14
 8001a3c:	402a      	ands	r2, r5
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	600b      	str	r3, [r1, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001a42:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001a44:	6953      	ldr	r3, [r2, #20]
 8001a46:	2107      	movs	r1, #7
 8001a48:	438b      	bics	r3, r1
 8001a4a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8001a4c:	430b      	orrs	r3, r1
 8001a4e:	6153      	str	r3, [r2, #20]
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001a50:	6821      	ldr	r1, [r4, #0]
 8001a52:	694a      	ldr	r2, [r1, #20]
 8001a54:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001a56:	011b      	lsls	r3, r3, #4
 8001a58:	2570      	movs	r5, #112	@ 0x70
 8001a5a:	43aa      	bics	r2, r5
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	614b      	str	r3, [r1, #20]
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001a60:	6923      	ldr	r3, [r4, #16]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d13a      	bne.n	8001adc <HAL_ADC_Init+0x1cc>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001a66:	6822      	ldr	r2, [r4, #0]
 8001a68:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001a6a:	3b10      	subs	r3, #16
 8001a6c:	430b      	orrs	r3, r1
 8001a6e:	6293      	str	r3, [r2, #40]	@ 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001a70:	6823      	ldr	r3, [r4, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8001a72:	695a      	ldr	r2, [r3, #20]
 8001a74:	2307      	movs	r3, #7
 8001a76:	4013      	ands	r3, r2
 8001a78:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d040      	beq.n	8001b00 <HAL_ADC_Init+0x1f0>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a7e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001a80:	2212      	movs	r2, #18
 8001a82:	4393      	bics	r3, r2
 8001a84:	3a02      	subs	r2, #2
 8001a86:	4313      	orrs	r3, r2
 8001a88:	65a3      	str	r3, [r4, #88]	@ 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8a:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001a8c:	3a0f      	subs	r2, #15
 8001a8e:	4313      	orrs	r3, r2
 8001a90:	65e3      	str	r3, [r4, #92]	@ 0x5c

      tmp_hal_status = HAL_ERROR;
 8001a92:	2001      	movs	r0, #1
 8001a94:	e042      	b.n	8001b1c <HAL_ADC_Init+0x20c>
    HAL_ADC_MspInit(hadc);
 8001a96:	f7ff fc8b 	bl	80013b0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	65e3      	str	r3, [r4, #92]	@ 0x5c
    hadc->Lock = HAL_UNLOCKED;
 8001a9e:	2254      	movs	r2, #84	@ 0x54
 8001aa0:	54a3      	strb	r3, [r4, r2]
 8001aa2:	e741      	b.n	8001928 <HAL_ADC_Init+0x18>
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	085f      	lsrs	r7, r3, #1
 8001aa8:	e790      	b.n	80019cc <HAL_ADC_Init+0xbc>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001aaa:	2d00      	cmp	r5, #0
 8001aac:	d103      	bne.n	8001ab6 <HAL_ADC_Init+0x1a6>
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001aae:	2280      	movs	r2, #128	@ 0x80
 8001ab0:	0252      	lsls	r2, r2, #9
 8001ab2:	4313      	orrs	r3, r2
 8001ab4:	e794      	b.n	80019e0 <HAL_ADC_Init+0xd0>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ab6:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001ab8:	2520      	movs	r5, #32
 8001aba:	432a      	orrs	r2, r5
 8001abc:	65a2      	str	r2, [r4, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001abe:	6de2      	ldr	r2, [r4, #92]	@ 0x5c
 8001ac0:	3d1f      	subs	r5, #31
 8001ac2:	432a      	orrs	r2, r5
 8001ac4:	65e2      	str	r2, [r4, #92]	@ 0x5c
 8001ac6:	e78b      	b.n	80019e0 <HAL_ADC_Init+0xd0>
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001ac8:	6c21      	ldr	r1, [r4, #64]	@ 0x40
 8001aca:	6c65      	ldr	r5, [r4, #68]	@ 0x44
 8001acc:	4329      	orrs	r1, r5
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	431a      	orrs	r2, r3
 8001ada:	e798      	b.n	8001a0e <HAL_ADC_Init+0xfe>
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001adc:	2280      	movs	r2, #128	@ 0x80
 8001ade:	0392      	lsls	r2, r2, #14
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d1c5      	bne.n	8001a70 <HAL_ADC_Init+0x160>
      MODIFY_REG(hadc->Instance->CHSELR,
 8001ae4:	6821      	ldr	r1, [r4, #0]
 8001ae6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8001ae8:	69e3      	ldr	r3, [r4, #28]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	221c      	movs	r2, #28
 8001af0:	401a      	ands	r2, r3
 8001af2:	2310      	movs	r3, #16
 8001af4:	425b      	negs	r3, r3
 8001af6:	4093      	lsls	r3, r2
 8001af8:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 8001afa:	4313      	orrs	r3, r2
 8001afc:	628b      	str	r3, [r1, #40]	@ 0x28
 8001afe:	e7b7      	b.n	8001a70 <HAL_ADC_Init+0x160>
      ADC_CLEAR_ERRORCODE(hadc);
 8001b00:	2300      	movs	r3, #0
 8001b02:	65e3      	str	r3, [r4, #92]	@ 0x5c
      ADC_STATE_CLR_SET(hadc->State,
 8001b04:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b06:	2203      	movs	r2, #3
 8001b08:	4393      	bics	r3, r2
 8001b0a:	3a02      	subs	r2, #2
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8001b10:	e004      	b.n	8001b1c <HAL_ADC_Init+0x20c>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001b14:	2210      	movs	r2, #16
 8001b16:	4313      	orrs	r3, r2
 8001b18:	65a3      	str	r3, [r4, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8001b1a:	2001      	movs	r0, #1
  }

  return tmp_hal_status;
}
 8001b1c:	b003      	add	sp, #12
 8001b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8001b20:	2001      	movs	r0, #1
 8001b22:	e7fb      	b.n	8001b1c <HAL_ADC_Init+0x20c>
 8001b24:	6fffffe8 	.word	0x6fffffe8
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	00030d40 	.word	0x00030d40
 8001b30:	fffffefd 	.word	0xfffffefd
 8001b34:	ffde0201 	.word	0xffde0201
 8001b38:	1ffffc02 	.word	0x1ffffc02
 8001b3c:	40012708 	.word	0x40012708
 8001b40:	ffc3ffff 	.word	0xffc3ffff

08001b44 <HAL_ADC_ConvHalfCpltCallback>:
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001b44:	4770      	bx	lr

08001b46 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001b46:	b510      	push	{r4, lr}

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b48:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8001b4a:	f7ff fffb 	bl	8001b44 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b4e:	bd10      	pop	{r4, pc}

08001b50 <HAL_ADC_ErrorCallback>:
}
 8001b50:	4770      	bx	lr

08001b52 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8001b52:	b510      	push	{r4, lr}
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b54:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8001b56:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001b58:	2240      	movs	r2, #64	@ 0x40
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	6583      	str	r3, [r0, #88]	@ 0x58

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001b5e:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001b60:	3a3c      	subs	r2, #60	@ 0x3c
 8001b62:	4313      	orrs	r3, r2
 8001b64:	65c3      	str	r3, [r0, #92]	@ 0x5c

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001b66:	f7ff fff3 	bl	8001b50 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b6a:	bd10      	pop	{r4, pc}

08001b6c <ADC_DMAConvCplt>:
{
 8001b6c:	b510      	push	{r4, lr}
 8001b6e:	0003      	movs	r3, r0
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001b70:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8001b72:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001b74:	2150      	movs	r1, #80	@ 0x50
 8001b76:	4211      	tst	r1, r2
 8001b78:	d12a      	bne.n	8001bd0 <ADC_DMAConvCplt+0x64>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b7a:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001b7c:	2380      	movs	r3, #128	@ 0x80
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	4313      	orrs	r3, r2
 8001b82:	6583      	str	r3, [r0, #88]	@ 0x58
    if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001b84:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8001b86:	68d9      	ldr	r1, [r3, #12]
 8001b88:	22c0      	movs	r2, #192	@ 0xc0
 8001b8a:	0112      	lsls	r2, r2, #4
 8001b8c:	4211      	tst	r1, r2
 8001b8e:	d113      	bne.n	8001bb8 <ADC_DMAConvCplt+0x4c>
        && (hadc->Init.ContinuousConvMode == DISABLE)
 8001b90:	7e82      	ldrb	r2, [r0, #26]
 8001b92:	2a00      	cmp	r2, #0
 8001b94:	d110      	bne.n	8001bb8 <ADC_DMAConvCplt+0x4c>
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	0712      	lsls	r2, r2, #28
 8001b9a:	d50d      	bpl.n	8001bb8 <ADC_DMAConvCplt+0x4c>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001b9c:	689a      	ldr	r2, [r3, #8]
 8001b9e:	0752      	lsls	r2, r2, #29
 8001ba0:	d40d      	bmi.n	8001bbe <ADC_DMAConvCplt+0x52>
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	210c      	movs	r1, #12
 8001ba6:	438a      	bics	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]
          ADC_STATE_CLR_SET(hadc->State,
 8001baa:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001bac:	4a0e      	ldr	r2, [pc, #56]	@ (8001be8 <ADC_DMAConvCplt+0x7c>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	3204      	adds	r2, #4
 8001bb2:	32ff      	adds	r2, #255	@ 0xff
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	6583      	str	r3, [r0, #88]	@ 0x58
    HAL_ADC_ConvCpltCallback(hadc);
 8001bb8:	f003 fb0e 	bl	80051d8 <HAL_ADC_ConvCpltCallback>
}
 8001bbc:	bd10      	pop	{r4, pc}
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001bbe:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 8001bc0:	2220      	movs	r2, #32
 8001bc2:	4313      	orrs	r3, r2
 8001bc4:	6583      	str	r3, [r0, #88]	@ 0x58
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8001bc8:	3a1f      	subs	r2, #31
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	65c3      	str	r3, [r0, #92]	@ 0x5c
 8001bce:	e7f3      	b.n	8001bb8 <ADC_DMAConvCplt+0x4c>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001bd0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8001bd2:	06d2      	lsls	r2, r2, #27
 8001bd4:	d404      	bmi.n	8001be0 <ADC_DMAConvCplt+0x74>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bd6:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8001bd8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001bda:	0018      	movs	r0, r3
 8001bdc:	4790      	blx	r2
}
 8001bde:	e7ed      	b.n	8001bbc <ADC_DMAConvCplt+0x50>
      HAL_ADC_ErrorCallback(hadc);
 8001be0:	f7ff ffb6 	bl	8001b50 <HAL_ADC_ErrorCallback>
 8001be4:	e7ea      	b.n	8001bbc <ADC_DMAConvCplt+0x50>
 8001be6:	46c0      	nop			@ (mov r8, r8)
 8001be8:	fffffefe 	.word	0xfffffefe

08001bec <HAL_ADC_ConfigChannel>:
{
 8001bec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	9301      	str	r3, [sp, #4]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001bf6:	6905      	ldr	r5, [r0, #16]
  __HAL_LOCK(hadc);
 8001bf8:	3354      	adds	r3, #84	@ 0x54
 8001bfa:	5cc3      	ldrb	r3, [r0, r3]
 8001bfc:	2b01      	cmp	r3, #1
 8001bfe:	d100      	bne.n	8001c02 <HAL_ADC_ConfigChannel+0x16>
 8001c00:	e11e      	b.n	8001e40 <HAL_ADC_ConfigChannel+0x254>
 8001c02:	2354      	movs	r3, #84	@ 0x54
 8001c04:	2201      	movs	r2, #1
 8001c06:	54c2      	strb	r2, [r0, r3]
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001c08:	6800      	ldr	r0, [r0, #0]
 8001c0a:	6883      	ldr	r3, [r0, #8]
 8001c0c:	3203      	adds	r2, #3
 8001c0e:	0017      	movs	r7, r2
 8001c10:	401f      	ands	r7, r3
 8001c12:	421a      	tst	r2, r3
 8001c14:	d009      	beq.n	8001c2a <HAL_ADC_ConfigChannel+0x3e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001c16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001c18:	321c      	adds	r2, #28
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	65a3      	str	r3, [r4, #88]	@ 0x58
    tmp_hal_status = HAL_ERROR;
 8001c1e:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8001c20:	2354      	movs	r3, #84	@ 0x54
 8001c22:	2200      	movs	r2, #0
 8001c24:	54e2      	strb	r2, [r4, r3]
}
 8001c26:	b003      	add	sp, #12
 8001c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (pConfig->Rank != ADC_RANK_NONE)
 8001c2a:	684a      	ldr	r2, [r1, #4]
 8001c2c:	2a02      	cmp	r2, #2
 8001c2e:	d100      	bne.n	8001c32 <HAL_ADC_ConfigChannel+0x46>
 8001c30:	e0c4      	b.n	8001dbc <HAL_ADC_ConfigChannel+0x1d0>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c32:	2304      	movs	r3, #4
 8001c34:	439d      	bics	r5, r3
 8001c36:	2680      	movs	r6, #128	@ 0x80
 8001c38:	0636      	lsls	r6, r6, #24
 8001c3a:	42b5      	cmp	r5, r6
 8001c3c:	d021      	beq.n	8001c82 <HAL_ADC_ConfigChannel+0x96>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001c3e:	231f      	movs	r3, #31
 8001c40:	401a      	ands	r2, r3
 8001c42:	3b10      	subs	r3, #16
 8001c44:	4093      	lsls	r3, r2
 8001c46:	6e26      	ldr	r6, [r4, #96]	@ 0x60
 8001c48:	439e      	bics	r6, r3
 8001c4a:	680b      	ldr	r3, [r1, #0]
 8001c4c:	035d      	lsls	r5, r3, #13
 8001c4e:	d148      	bne.n	8001ce2 <HAL_ADC_ConfigChannel+0xf6>
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	0edf      	lsrs	r7, r3, #27
 8001c54:	003b      	movs	r3, r7
 8001c56:	4093      	lsls	r3, r2
 8001c58:	4333      	orrs	r3, r6
 8001c5a:	6623      	str	r3, [r4, #96]	@ 0x60
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001c5c:	684a      	ldr	r2, [r1, #4]
 8001c5e:	0893      	lsrs	r3, r2, #2
 8001c60:	3301      	adds	r3, #1
 8001c62:	69e5      	ldr	r5, [r4, #28]
 8001c64:	42ab      	cmp	r3, r5
 8001c66:	d812      	bhi.n	8001c8e <HAL_ADC_ConfigChannel+0xa2>
  MODIFY_REG(ADCx->CHSELR,
 8001c68:	6a86      	ldr	r6, [r0, #40]	@ 0x28
 8001c6a:	251f      	movs	r5, #31
 8001c6c:	4015      	ands	r5, r2
 8001c6e:	680b      	ldr	r3, [r1, #0]
 8001c70:	0e9b      	lsrs	r3, r3, #26
 8001c72:	220f      	movs	r2, #15
 8001c74:	4013      	ands	r3, r2
 8001c76:	40ab      	lsls	r3, r5
 8001c78:	40aa      	lsls	r2, r5
 8001c7a:	4396      	bics	r6, r2
 8001c7c:	4333      	orrs	r3, r6
 8001c7e:	6283      	str	r3, [r0, #40]	@ 0x28
}
 8001c80:	e005      	b.n	8001c8e <HAL_ADC_ConfigChannel+0xa2>
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001c82:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001c84:	680b      	ldr	r3, [r1, #0]
 8001c86:	035b      	lsls	r3, r3, #13
 8001c88:	0b5b      	lsrs	r3, r3, #13
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	6283      	str	r3, [r0, #40]	@ 0x28
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001c8e:	6825      	ldr	r5, [r4, #0]
  MODIFY_REG(ADCx->SMPR,
 8001c90:	6968      	ldr	r0, [r5, #20]
 8001c92:	680a      	ldr	r2, [r1, #0]
 8001c94:	0212      	lsls	r2, r2, #8
 8001c96:	688b      	ldr	r3, [r1, #8]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	4e6a      	ldr	r6, [pc, #424]	@ (8001e44 <HAL_ADC_ConfigChannel+0x258>)
 8001c9c:	4033      	ands	r3, r6
 8001c9e:	4390      	bics	r0, r2
 8001ca0:	4303      	orrs	r3, r0
 8001ca2:	616b      	str	r3, [r5, #20]
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ca4:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ca6:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	dab9      	bge.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001cac:	4a66      	ldr	r2, [pc, #408]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001cae:	6812      	ldr	r2, [r2, #0]
 8001cb0:	25e0      	movs	r5, #224	@ 0xe0
 8001cb2:	046d      	lsls	r5, r5, #17
 8001cb4:	4015      	ands	r5, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001cb6:	4965      	ldr	r1, [pc, #404]	@ (8001e4c <HAL_ADC_ConfigChannel+0x260>)
 8001cb8:	428b      	cmp	r3, r1
 8001cba:	d050      	beq.n	8001d5e <HAL_ADC_ConfigChannel+0x172>
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001cbc:	4864      	ldr	r0, [pc, #400]	@ (8001e50 <HAL_ADC_ConfigChannel+0x264>)
 8001cbe:	4283      	cmp	r3, r0
 8001cc0:	d06e      	beq.n	8001da0 <HAL_ADC_ConfigChannel+0x1b4>
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cc2:	4964      	ldr	r1, [pc, #400]	@ (8001e54 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cc4:	2000      	movs	r0, #0
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001cc6:	428b      	cmp	r3, r1
 8001cc8:	d1aa      	bne.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
 8001cca:	0252      	lsls	r2, r2, #9
 8001ccc:	d4a8      	bmi.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001cce:	495e      	ldr	r1, [pc, #376]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001cd0:	680b      	ldr	r3, [r1, #0]
 8001cd2:	4a61      	ldr	r2, [pc, #388]	@ (8001e58 <HAL_ADC_ConfigChannel+0x26c>)
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	432b      	orrs	r3, r5
 8001cd8:	2280      	movs	r2, #128	@ 0x80
 8001cda:	03d2      	lsls	r2, r2, #15
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
}
 8001ce0:	e79e      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001ce2:	07dd      	lsls	r5, r3, #31
 8001ce4:	d4b6      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001ce6:	2701      	movs	r7, #1
 8001ce8:	079d      	lsls	r5, r3, #30
 8001cea:	d4b3      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001cec:	3701      	adds	r7, #1
 8001cee:	075d      	lsls	r5, r3, #29
 8001cf0:	d4b0      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001cf2:	3701      	adds	r7, #1
 8001cf4:	071d      	lsls	r5, r3, #28
 8001cf6:	d4ad      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001cf8:	3701      	adds	r7, #1
 8001cfa:	06dd      	lsls	r5, r3, #27
 8001cfc:	d4aa      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001cfe:	3701      	adds	r7, #1
 8001d00:	069d      	lsls	r5, r3, #26
 8001d02:	d4a7      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d04:	3701      	adds	r7, #1
 8001d06:	065d      	lsls	r5, r3, #25
 8001d08:	d4a4      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d0a:	3701      	adds	r7, #1
 8001d0c:	061d      	lsls	r5, r3, #24
 8001d0e:	d4a1      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d10:	3701      	adds	r7, #1
 8001d12:	05dd      	lsls	r5, r3, #23
 8001d14:	d49e      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d16:	3701      	adds	r7, #1
 8001d18:	059d      	lsls	r5, r3, #22
 8001d1a:	d49b      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d1c:	3701      	adds	r7, #1
 8001d1e:	055d      	lsls	r5, r3, #21
 8001d20:	d498      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d22:	3701      	adds	r7, #1
 8001d24:	051d      	lsls	r5, r3, #20
 8001d26:	d495      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d28:	3701      	adds	r7, #1
 8001d2a:	04dd      	lsls	r5, r3, #19
 8001d2c:	d492      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d2e:	3701      	adds	r7, #1
 8001d30:	049d      	lsls	r5, r3, #18
 8001d32:	d48f      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d34:	3701      	adds	r7, #1
 8001d36:	045d      	lsls	r5, r3, #17
 8001d38:	d48c      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d3a:	3701      	adds	r7, #1
 8001d3c:	041d      	lsls	r5, r3, #16
 8001d3e:	d489      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d40:	3701      	adds	r7, #1
 8001d42:	03dd      	lsls	r5, r3, #15
 8001d44:	d486      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d46:	3701      	adds	r7, #1
 8001d48:	039d      	lsls	r5, r3, #14
 8001d4a:	d483      	bmi.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d4c:	2580      	movs	r5, #128	@ 0x80
 8001d4e:	02ed      	lsls	r5, r5, #11
 8001d50:	001f      	movs	r7, r3
 8001d52:	402f      	ands	r7, r5
 8001d54:	422b      	tst	r3, r5
 8001d56:	d100      	bne.n	8001d5a <HAL_ADC_ConfigChannel+0x16e>
 8001d58:	e77c      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
 8001d5a:	2712      	movs	r7, #18
 8001d5c:	e77a      	b.n	8001c54 <HAL_ADC_ConfigChannel+0x68>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001d5e:	0212      	lsls	r2, r2, #8
 8001d60:	d500      	bpl.n	8001d64 <HAL_ADC_ConfigChannel+0x178>
 8001d62:	e75d      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001d64:	4938      	ldr	r1, [pc, #224]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001d66:	680b      	ldr	r3, [r1, #0]
 8001d68:	4a3b      	ldr	r2, [pc, #236]	@ (8001e58 <HAL_ADC_ConfigChannel+0x26c>)
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	432b      	orrs	r3, r5
 8001d6e:	2280      	movs	r2, #128	@ 0x80
 8001d70:	0412      	lsls	r2, r2, #16
 8001d72:	4313      	orrs	r3, r2
 8001d74:	600b      	str	r3, [r1, #0]
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d76:	4b39      	ldr	r3, [pc, #228]	@ (8001e5c <HAL_ADC_ConfigChannel+0x270>)
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	4939      	ldr	r1, [pc, #228]	@ (8001e60 <HAL_ADC_ConfigChannel+0x274>)
 8001d7c:	f7fe f9ca 	bl	8000114 <__udivsi3>
 8001d80:	3001      	adds	r0, #1
 8001d82:	0043      	lsls	r3, r0, #1
 8001d84:	181b      	adds	r3, r3, r0
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001d8a:	9b01      	ldr	r3, [sp, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d055      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x250>
            wait_loop_index--;
 8001d90:	9b01      	ldr	r3, [sp, #4]
 8001d92:	3b01      	subs	r3, #1
 8001d94:	9301      	str	r3, [sp, #4]
          while (wait_loop_index != 0UL)
 8001d96:	9b01      	ldr	r3, [sp, #4]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f9      	bne.n	8001d90 <HAL_ADC_ConfigChannel+0x1a4>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d9c:	2000      	movs	r0, #0
 8001d9e:	e73f      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
 8001da0:	2000      	movs	r0, #0
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001da2:	01d2      	lsls	r2, r2, #7
 8001da4:	d500      	bpl.n	8001da8 <HAL_ADC_ConfigChannel+0x1bc>
 8001da6:	e73b      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
 8001da8:	4927      	ldr	r1, [pc, #156]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001daa:	680b      	ldr	r3, [r1, #0]
 8001dac:	4a2a      	ldr	r2, [pc, #168]	@ (8001e58 <HAL_ADC_ConfigChannel+0x26c>)
 8001dae:	4013      	ands	r3, r2
 8001db0:	432b      	orrs	r3, r5
 8001db2:	2280      	movs	r2, #128	@ 0x80
 8001db4:	0452      	lsls	r2, r2, #17
 8001db6:	4313      	orrs	r3, r2
 8001db8:	600b      	str	r3, [r1, #0]
}
 8001dba:	e731      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001dbc:	2304      	movs	r3, #4
 8001dbe:	439d      	bics	r5, r3
 8001dc0:	2380      	movs	r3, #128	@ 0x80
 8001dc2:	061b      	lsls	r3, r3, #24
 8001dc4:	429d      	cmp	r5, r3
 8001dc6:	d01c      	beq.n	8001e02 <HAL_ADC_ConfigChannel+0x216>
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dc8:	680b      	ldr	r3, [r1, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dca:	2000      	movs	r0, #0
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	db00      	blt.n	8001dd2 <HAL_ADC_ConfigChannel+0x1e6>
 8001dd0:	e726      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001dd2:	4a1d      	ldr	r2, [pc, #116]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001dd4:	6812      	ldr	r2, [r2, #0]
        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001dd6:	491d      	ldr	r1, [pc, #116]	@ (8001e4c <HAL_ADC_ConfigChannel+0x260>)
 8001dd8:	428b      	cmp	r3, r1
 8001dda:	d019      	beq.n	8001e10 <HAL_ADC_ConfigChannel+0x224>
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ddc:	491c      	ldr	r1, [pc, #112]	@ (8001e50 <HAL_ADC_ConfigChannel+0x264>)
 8001dde:	428b      	cmp	r3, r1
 8001de0:	d021      	beq.n	8001e26 <HAL_ADC_ConfigChannel+0x23a>
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001de2:	491c      	ldr	r1, [pc, #112]	@ (8001e54 <HAL_ADC_ConfigChannel+0x268>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001de4:	2000      	movs	r0, #0
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001de6:	428b      	cmp	r3, r1
 8001de8:	d000      	beq.n	8001dec <HAL_ADC_ConfigChannel+0x200>
 8001dea:	e719      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001dec:	4816      	ldr	r0, [pc, #88]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001dee:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001df0:	23c0      	movs	r3, #192	@ 0xc0
 8001df2:	045b      	lsls	r3, r3, #17
 8001df4:	4013      	ands	r3, r2
 8001df6:	4a18      	ldr	r2, [pc, #96]	@ (8001e58 <HAL_ADC_ConfigChannel+0x26c>)
 8001df8:	400a      	ands	r2, r1
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dfe:	2000      	movs	r0, #0
}
 8001e00:	e70e      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001e02:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 8001e04:	680b      	ldr	r3, [r1, #0]
 8001e06:	035b      	lsls	r3, r3, #13
 8001e08:	0b5b      	lsrs	r3, r3, #13
 8001e0a:	439a      	bics	r2, r3
 8001e0c:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8001e0e:	e7db      	b.n	8001dc8 <HAL_ADC_ConfigChannel+0x1dc>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e10:	480d      	ldr	r0, [pc, #52]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001e12:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e14:	23a0      	movs	r3, #160	@ 0xa0
 8001e16:	045b      	lsls	r3, r3, #17
 8001e18:	4013      	ands	r3, r2
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e58 <HAL_ADC_ConfigChannel+0x26c>)
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e22:	2000      	movs	r0, #0
}
 8001e24:	e6fc      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001e26:	4808      	ldr	r0, [pc, #32]	@ (8001e48 <HAL_ADC_ConfigChannel+0x25c>)
 8001e28:	6801      	ldr	r1, [r0, #0]
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001e2a:	23c0      	movs	r3, #192	@ 0xc0
 8001e2c:	041b      	lsls	r3, r3, #16
 8001e2e:	4013      	ands	r3, r2
 8001e30:	4a09      	ldr	r2, [pc, #36]	@ (8001e58 <HAL_ADC_ConfigChannel+0x26c>)
 8001e32:	400a      	ands	r2, r1
 8001e34:	4313      	orrs	r3, r2
 8001e36:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e38:	2000      	movs	r0, #0
}
 8001e3a:	e6f1      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	e6ef      	b.n	8001c20 <HAL_ADC_ConfigChannel+0x34>
  __HAL_LOCK(hadc);
 8001e40:	2002      	movs	r0, #2
 8001e42:	e6f0      	b.n	8001c26 <HAL_ADC_ConfigChannel+0x3a>
 8001e44:	07ffff00 	.word	0x07ffff00
 8001e48:	40012708 	.word	0x40012708
 8001e4c:	b0001000 	.word	0xb0001000
 8001e50:	b8004000 	.word	0xb8004000
 8001e54:	b4002000 	.word	0xb4002000
 8001e58:	fe3fffff 	.word	0xfe3fffff
 8001e5c:	20000000 	.word	0x20000000
 8001e60:	00030d40 	.word	0x00030d40

08001e64 <ADC_Enable>:
{
 8001e64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e66:	b083      	sub	sp, #12
 8001e68:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0UL;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	9301      	str	r3, [sp, #4]
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e6e:	6803      	ldr	r3, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001e70:	689a      	ldr	r2, [r3, #8]
  return HAL_OK;
 8001e72:	2000      	movs	r0, #0
 8001e74:	07d2      	lsls	r2, r2, #31
 8001e76:	d434      	bmi.n	8001ee2 <ADC_Enable+0x7e>
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e78:	6899      	ldr	r1, [r3, #8]
 8001e7a:	4a2c      	ldr	r2, [pc, #176]	@ (8001f2c <ADC_Enable+0xc8>)
 8001e7c:	4211      	tst	r1, r2
 8001e7e:	d127      	bne.n	8001ed0 <ADC_Enable+0x6c>
  MODIFY_REG(ADCx->CR,
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	492b      	ldr	r1, [pc, #172]	@ (8001f30 <ADC_Enable+0xcc>)
 8001e84:	400a      	ands	r2, r1
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001e8c:	4b29      	ldr	r3, [pc, #164]	@ (8001f34 <ADC_Enable+0xd0>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e90:	021b      	lsls	r3, r3, #8
 8001e92:	d50f      	bpl.n	8001eb4 <ADC_Enable+0x50>
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e94:	4b28      	ldr	r3, [pc, #160]	@ (8001f38 <ADC_Enable+0xd4>)
 8001e96:	6818      	ldr	r0, [r3, #0]
 8001e98:	4928      	ldr	r1, [pc, #160]	@ (8001f3c <ADC_Enable+0xd8>)
 8001e9a:	f7fe f93b 	bl	8000114 <__udivsi3>
 8001e9e:	3001      	adds	r0, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001ea0:	9001      	str	r0, [sp, #4]
      while (wait_loop_index != 0UL)
 8001ea2:	9b01      	ldr	r3, [sp, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <ADC_Enable+0x50>
        wait_loop_index--;
 8001ea8:	9b01      	ldr	r3, [sp, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	9301      	str	r3, [sp, #4]
      while (wait_loop_index != 0UL)
 8001eae:	9b01      	ldr	r3, [sp, #4]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1f9      	bne.n	8001ea8 <ADC_Enable+0x44>
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001eb4:	7e63      	ldrb	r3, [r4, #25]
  return HAL_OK;
 8001eb6:	2000      	movs	r0, #0
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d012      	beq.n	8001ee2 <ADC_Enable+0x7e>
      tickstart = HAL_GetTick();
 8001ebc:	f7ff fd16 	bl	80018ec <HAL_GetTick>
 8001ec0:	0006      	movs	r6, r0
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ec2:	6823      	ldr	r3, [r4, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	07d2      	lsls	r2, r2, #31
 8001ec8:	d42d      	bmi.n	8001f26 <ADC_Enable+0xc2>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eca:	2501      	movs	r5, #1
  MODIFY_REG(ADCx->CR,
 8001ecc:	4f18      	ldr	r7, [pc, #96]	@ (8001f30 <ADC_Enable+0xcc>)
 8001ece:	e00e      	b.n	8001eee <ADC_Enable+0x8a>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ed0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001ed2:	2210      	movs	r2, #16
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	65a3      	str	r3, [r4, #88]	@ 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ed8:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001eda:	3a0f      	subs	r2, #15
 8001edc:	4313      	orrs	r3, r2
 8001ede:	65e3      	str	r3, [r4, #92]	@ 0x5c
      return HAL_ERROR;
 8001ee0:	3001      	adds	r0, #1
}
 8001ee2:	b003      	add	sp, #12
 8001ee4:	bdf0      	pop	{r4, r5, r6, r7, pc}
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ee6:	6823      	ldr	r3, [r4, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	4215      	tst	r5, r2
 8001eec:	d119      	bne.n	8001f22 <ADC_Enable+0xbe>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001eee:	689a      	ldr	r2, [r3, #8]
 8001ef0:	4215      	tst	r5, r2
 8001ef2:	d103      	bne.n	8001efc <ADC_Enable+0x98>
  MODIFY_REG(ADCx->CR,
 8001ef4:	689a      	ldr	r2, [r3, #8]
 8001ef6:	403a      	ands	r2, r7
 8001ef8:	432a      	orrs	r2, r5
 8001efa:	609a      	str	r2, [r3, #8]
        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001efc:	f7ff fcf6 	bl	80018ec <HAL_GetTick>
 8001f00:	1b80      	subs	r0, r0, r6
 8001f02:	2802      	cmp	r0, #2
 8001f04:	d9ef      	bls.n	8001ee6 <ADC_Enable+0x82>
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001f06:	6823      	ldr	r3, [r4, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	421d      	tst	r5, r3
 8001f0c:	d1eb      	bne.n	8001ee6 <ADC_Enable+0x82>
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f0e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8001f10:	2210      	movs	r2, #16
 8001f12:	4313      	orrs	r3, r2
 8001f14:	65a3      	str	r3, [r4, #88]	@ 0x58
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f16:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8001f18:	3a0f      	subs	r2, #15
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	65e3      	str	r3, [r4, #92]	@ 0x5c
            return HAL_ERROR;
 8001f1e:	2001      	movs	r0, #1
 8001f20:	e7df      	b.n	8001ee2 <ADC_Enable+0x7e>
  return HAL_OK;
 8001f22:	2000      	movs	r0, #0
 8001f24:	e7dd      	b.n	8001ee2 <ADC_Enable+0x7e>
 8001f26:	2000      	movs	r0, #0
 8001f28:	e7db      	b.n	8001ee2 <ADC_Enable+0x7e>
 8001f2a:	46c0      	nop			@ (mov r8, r8)
 8001f2c:	80000017 	.word	0x80000017
 8001f30:	7fffffe8 	.word	0x7fffffe8
 8001f34:	40012708 	.word	0x40012708
 8001f38:	20000000 	.word	0x20000000
 8001f3c:	00030d40 	.word	0x00030d40

08001f40 <HAL_ADC_Start_DMA>:
{
 8001f40:	b570      	push	{r4, r5, r6, lr}
 8001f42:	0004      	movs	r4, r0
 8001f44:	000d      	movs	r5, r1
 8001f46:	0016      	movs	r6, r2
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f48:	6802      	ldr	r2, [r0, #0]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001f4a:	6893      	ldr	r3, [r2, #8]
    tmp_hal_status = HAL_BUSY;
 8001f4c:	2002      	movs	r0, #2
 8001f4e:	075b      	lsls	r3, r3, #29
 8001f50:	d41c      	bmi.n	8001f8c <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8001f52:	2354      	movs	r3, #84	@ 0x54
 8001f54:	5ce3      	ldrb	r3, [r4, r3]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d044      	beq.n	8001fe4 <HAL_ADC_Start_DMA+0xa4>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	2154      	movs	r1, #84	@ 0x54
 8001f5e:	5463      	strb	r3, [r4, r1]
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) == 0UL)
 8001f60:	68d1      	ldr	r1, [r2, #12]
 8001f62:	420b      	tst	r3, r1
 8001f64:	d10d      	bne.n	8001f82 <HAL_ADC_Start_DMA+0x42>
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001f66:	6893      	ldr	r3, [r2, #8]
 8001f68:	07db      	lsls	r3, r3, #31
 8001f6a:	d505      	bpl.n	8001f78 <HAL_ADC_Start_DMA+0x38>
  MODIFY_REG(ADCx->CR,
 8001f6c:	6893      	ldr	r3, [r2, #8]
 8001f6e:	491e      	ldr	r1, [pc, #120]	@ (8001fe8 <HAL_ADC_Start_DMA+0xa8>)
 8001f70:	400b      	ands	r3, r1
 8001f72:	2102      	movs	r1, #2
 8001f74:	430b      	orrs	r3, r1
 8001f76:	6093      	str	r3, [r2, #8]
      hadc->Instance->CFGR1 |= ADC_CFGR1_DMAEN;
 8001f78:	6822      	ldr	r2, [r4, #0]
 8001f7a:	68d3      	ldr	r3, [r2, #12]
 8001f7c:	2101      	movs	r1, #1
 8001f7e:	430b      	orrs	r3, r1
 8001f80:	60d3      	str	r3, [r2, #12]
    tmp_hal_status = ADC_Enable(hadc);
 8001f82:	0020      	movs	r0, r4
 8001f84:	f7ff ff6e 	bl	8001e64 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8001f88:	2800      	cmp	r0, #0
 8001f8a:	d000      	beq.n	8001f8e <HAL_ADC_Start_DMA+0x4e>
}
 8001f8c:	bd70      	pop	{r4, r5, r6, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8001f8e:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8001f90:	4b16      	ldr	r3, [pc, #88]	@ (8001fec <HAL_ADC_Start_DMA+0xac>)
 8001f92:	401a      	ands	r2, r3
 8001f94:	2380      	movs	r3, #128	@ 0x80
 8001f96:	005b      	lsls	r3, r3, #1
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	65a3      	str	r3, [r4, #88]	@ 0x58
      ADC_CLEAR_ERRORCODE(hadc);
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	65e3      	str	r3, [r4, #92]	@ 0x5c
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001fa0:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001fa2:	4913      	ldr	r1, [pc, #76]	@ (8001ff0 <HAL_ADC_Start_DMA+0xb0>)
 8001fa4:	62d1      	str	r1, [r2, #44]	@ 0x2c
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001fa6:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001fa8:	4912      	ldr	r1, [pc, #72]	@ (8001ff4 <HAL_ADC_Start_DMA+0xb4>)
 8001faa:	6311      	str	r1, [r2, #48]	@ 0x30
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001fac:	6d22      	ldr	r2, [r4, #80]	@ 0x50
 8001fae:	4912      	ldr	r1, [pc, #72]	@ (8001ff8 <HAL_ADC_Start_DMA+0xb8>)
 8001fb0:	6351      	str	r1, [r2, #52]	@ 0x34
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001fb2:	6822      	ldr	r2, [r4, #0]
 8001fb4:	211c      	movs	r1, #28
 8001fb6:	6011      	str	r1, [r2, #0]
      __HAL_UNLOCK(hadc);
 8001fb8:	2254      	movs	r2, #84	@ 0x54
 8001fba:	54a3      	strb	r3, [r4, r2]
      __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001fbc:	6822      	ldr	r2, [r4, #0]
 8001fbe:	6853      	ldr	r3, [r2, #4]
 8001fc0:	390c      	subs	r1, #12
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6053      	str	r3, [r2, #4]
      tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001fc6:	6821      	ldr	r1, [r4, #0]
 8001fc8:	3140      	adds	r1, #64	@ 0x40
 8001fca:	6d20      	ldr	r0, [r4, #80]	@ 0x50
 8001fcc:	0033      	movs	r3, r6
 8001fce:	002a      	movs	r2, r5
 8001fd0:	f000 f910 	bl	80021f4 <HAL_DMA_Start_IT>
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001fd4:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(ADCx->CR,
 8001fd6:	6893      	ldr	r3, [r2, #8]
 8001fd8:	4903      	ldr	r1, [pc, #12]	@ (8001fe8 <HAL_ADC_Start_DMA+0xa8>)
 8001fda:	400b      	ands	r3, r1
 8001fdc:	2104      	movs	r1, #4
 8001fde:	430b      	orrs	r3, r1
 8001fe0:	6093      	str	r3, [r2, #8]
}
 8001fe2:	e7d3      	b.n	8001f8c <HAL_ADC_Start_DMA+0x4c>
    __HAL_LOCK(hadc);
 8001fe4:	2002      	movs	r0, #2
 8001fe6:	e7d1      	b.n	8001f8c <HAL_ADC_Start_DMA+0x4c>
 8001fe8:	7fffffe8 	.word	0x7fffffe8
 8001fec:	fffff0fe 	.word	0xfffff0fe
 8001ff0:	08001b6d 	.word	0x08001b6d
 8001ff4:	08001b47 	.word	0x08001b47
 8001ff8:	08001b53 	.word	0x08001b53

08001ffc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ffc:	b570      	push	{r4, r5, r6, lr}
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	2800      	cmp	r0, #0
 8002000:	db14      	blt.n	800202c <HAL_NVIC_SetPriority+0x30>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002002:	0884      	lsrs	r4, r0, #2
 8002004:	00a4      	lsls	r4, r4, #2
 8002006:	4b14      	ldr	r3, [pc, #80]	@ (8002058 <HAL_NVIC_SetPriority+0x5c>)
 8002008:	469c      	mov	ip, r3
 800200a:	4464      	add	r4, ip
 800200c:	26c0      	movs	r6, #192	@ 0xc0
 800200e:	00b6      	lsls	r6, r6, #2
 8002010:	59a5      	ldr	r5, [r4, r6]
 8002012:	2203      	movs	r2, #3
 8002014:	4002      	ands	r2, r0
 8002016:	00d2      	lsls	r2, r2, #3
 8002018:	23ff      	movs	r3, #255	@ 0xff
 800201a:	0018      	movs	r0, r3
 800201c:	4090      	lsls	r0, r2
 800201e:	4385      	bics	r5, r0
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002020:	0189      	lsls	r1, r1, #6
 8002022:	400b      	ands	r3, r1
 8002024:	4093      	lsls	r3, r2
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002026:	432b      	orrs	r3, r5
 8002028:	51a3      	str	r3, [r4, r6]
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
}
 800202a:	bd70      	pop	{r4, r5, r6, pc}
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800202c:	230f      	movs	r3, #15
 800202e:	4003      	ands	r3, r0
 8002030:	3b08      	subs	r3, #8
 8002032:	089b      	lsrs	r3, r3, #2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	4a09      	ldr	r2, [pc, #36]	@ (800205c <HAL_NVIC_SetPriority+0x60>)
 8002038:	4694      	mov	ip, r2
 800203a:	4463      	add	r3, ip
 800203c:	69dc      	ldr	r4, [r3, #28]
 800203e:	2203      	movs	r2, #3
 8002040:	4010      	ands	r0, r2
 8002042:	00c0      	lsls	r0, r0, #3
 8002044:	32fc      	adds	r2, #252	@ 0xfc
 8002046:	0015      	movs	r5, r2
 8002048:	4085      	lsls	r5, r0
 800204a:	43ac      	bics	r4, r5
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800204c:	0189      	lsls	r1, r1, #6
 800204e:	400a      	ands	r2, r1
 8002050:	4082      	lsls	r2, r0
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002052:	4322      	orrs	r2, r4
 8002054:	61da      	str	r2, [r3, #28]
 8002056:	e7e8      	b.n	800202a <HAL_NVIC_SetPriority+0x2e>
 8002058:	e000e100 	.word	0xe000e100
 800205c:	e000ed00 	.word	0xe000ed00

08002060 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8002060:	2800      	cmp	r0, #0
 8002062:	db05      	blt.n	8002070 <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002064:	221f      	movs	r2, #31
 8002066:	4002      	ands	r2, r0
 8002068:	2301      	movs	r3, #1
 800206a:	4093      	lsls	r3, r2
 800206c:	4a01      	ldr	r2, [pc, #4]	@ (8002074 <HAL_NVIC_EnableIRQ+0x14>)
 800206e:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8002070:	4770      	bx	lr
 8002072:	46c0      	nop			@ (mov r8, r8)
 8002074:	e000e100 	.word	0xe000e100

08002078 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002078:	3801      	subs	r0, #1
 800207a:	2380      	movs	r3, #128	@ 0x80
 800207c:	045b      	lsls	r3, r3, #17
 800207e:	4298      	cmp	r0, r3
 8002080:	d20f      	bcs.n	80020a2 <HAL_SYSTICK_Config+0x2a>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a09      	ldr	r2, [pc, #36]	@ (80020a8 <HAL_SYSTICK_Config+0x30>)
 8002084:	6050      	str	r0, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002086:	4809      	ldr	r0, [pc, #36]	@ (80020ac <HAL_SYSTICK_Config+0x34>)
 8002088:	6a03      	ldr	r3, [r0, #32]
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	0a1b      	lsrs	r3, r3, #8
 800208e:	21c0      	movs	r1, #192	@ 0xc0
 8002090:	0609      	lsls	r1, r1, #24
 8002092:	430b      	orrs	r3, r1
 8002094:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002096:	2300      	movs	r3, #0
 8002098:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	3307      	adds	r3, #7
 800209c:	6013      	str	r3, [r2, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800209e:	2000      	movs	r0, #0
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
 80020a0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80020a2:	2001      	movs	r0, #1
  return SysTick_Config(TicksNumb);
 80020a4:	e7fc      	b.n	80020a0 <HAL_SYSTICK_Config+0x28>
 80020a6:	46c0      	nop			@ (mov r8, r8)
 80020a8:	e000e010 	.word	0xe000e010
 80020ac:	e000ed00 	.word	0xe000ed00

080020b0 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020b0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80020b2:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 80020b4:	6cc5      	ldr	r5, [r0, #76]	@ 0x4c
 80020b6:	6065      	str	r5, [r4, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80020b8:	6d04      	ldr	r4, [r0, #80]	@ 0x50
 80020ba:	2c00      	cmp	r4, #0
 80020bc:	d002      	beq.n	80020c4 <DMA_SetConfig+0x14>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020be:	6d44      	ldr	r4, [r0, #84]	@ 0x54
 80020c0:	6d85      	ldr	r5, [r0, #88]	@ 0x58
 80020c2:	6065      	str	r5, [r4, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80020c4:	4e0b      	ldr	r6, [pc, #44]	@ (80020f4 <DMA_SetConfig+0x44>)
 80020c6:	6877      	ldr	r7, [r6, #4]
 80020c8:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 80020ca:	241c      	movs	r4, #28
 80020cc:	4025      	ands	r5, r4
 80020ce:	3c1b      	subs	r4, #27
 80020d0:	40ac      	lsls	r4, r5
 80020d2:	433c      	orrs	r4, r7
 80020d4:	6074      	str	r4, [r6, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80020d6:	6804      	ldr	r4, [r0, #0]
 80020d8:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020da:	6883      	ldr	r3, [r0, #8]
 80020dc:	2b10      	cmp	r3, #16
 80020de:	d004      	beq.n	80020ea <DMA_SetConfig+0x3a>
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80020e0:	6803      	ldr	r3, [r0, #0]
 80020e2:	6099      	str	r1, [r3, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80020e4:	6803      	ldr	r3, [r0, #0]
 80020e6:	60da      	str	r2, [r3, #12]
  }
}
 80020e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hdma->Instance->CPAR = DstAddress;
 80020ea:	6803      	ldr	r3, [r0, #0]
 80020ec:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = SrcAddress;
 80020ee:	6803      	ldr	r3, [r0, #0]
 80020f0:	60d9      	str	r1, [r3, #12]
 80020f2:	e7f9      	b.n	80020e8 <DMA_SetConfig+0x38>
 80020f4:	40020000 	.word	0x40020000

080020f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80020f8:	b510      	push	{r4, lr}
 80020fa:	0004      	movs	r4, r0
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80020fc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80020fe:	089b      	lsrs	r3, r3, #2
 8002100:	4a08      	ldr	r2, [pc, #32]	@ (8002124 <DMA_CalcDMAMUXChannelBaseAndMask+0x2c>)
 8002102:	4694      	mov	ip, r2
 8002104:	4463      	add	r3, ip
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	6443      	str	r3, [r0, #68]	@ 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800210a:	7800      	ldrb	r0, [r0, #0]
 800210c:	3808      	subs	r0, #8
 800210e:	2114      	movs	r1, #20
 8002110:	f7fe f800 	bl	8000114 <__udivsi3>
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002114:	4b04      	ldr	r3, [pc, #16]	@ (8002128 <DMA_CalcDMAMUXChannelBaseAndMask+0x30>)
 8002116:	64a3      	str	r3, [r4, #72]	@ 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8002118:	231f      	movs	r3, #31
 800211a:	4018      	ands	r0, r3
 800211c:	3b1e      	subs	r3, #30
 800211e:	4083      	lsls	r3, r0
 8002120:	64e3      	str	r3, [r4, #76]	@ 0x4c
}
 8002122:	bd10      	pop	{r4, pc}
 8002124:	10008200 	.word	0x10008200
 8002128:	40020880 	.word	0x40020880

0800212c <HAL_DMA_Init>:
{
 800212c:	b570      	push	{r4, r5, r6, lr}
 800212e:	1e04      	subs	r4, r0, #0
  if (hdma == NULL)
 8002130:	d055      	beq.n	80021de <HAL_DMA_Init+0xb2>
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002132:	6805      	ldr	r5, [r0, #0]
 8002134:	4b2b      	ldr	r3, [pc, #172]	@ (80021e4 <HAL_DMA_Init+0xb8>)
 8002136:	18e8      	adds	r0, r5, r3
 8002138:	2114      	movs	r1, #20
 800213a:	f7fd ffeb 	bl	8000114 <__udivsi3>
 800213e:	0080      	lsls	r0, r0, #2
 8002140:	6420      	str	r0, [r4, #64]	@ 0x40
  hdma->State = HAL_DMA_STATE_BUSY;
 8002142:	2325      	movs	r3, #37	@ 0x25
 8002144:	2202      	movs	r2, #2
 8002146:	54e2      	strb	r2, [r4, r3]
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002148:	682b      	ldr	r3, [r5, #0]
 800214a:	4a27      	ldr	r2, [pc, #156]	@ (80021e8 <HAL_DMA_Init+0xbc>)
 800214c:	4013      	ands	r3, r2
 800214e:	602b      	str	r3, [r5, #0]
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8002150:	6822      	ldr	r2, [r4, #0]
 8002152:	6811      	ldr	r1, [r2, #0]
 8002154:	68a3      	ldr	r3, [r4, #8]
 8002156:	68e0      	ldr	r0, [r4, #12]
 8002158:	4303      	orrs	r3, r0
 800215a:	6920      	ldr	r0, [r4, #16]
 800215c:	4303      	orrs	r3, r0
 800215e:	6960      	ldr	r0, [r4, #20]
 8002160:	4303      	orrs	r3, r0
 8002162:	69a0      	ldr	r0, [r4, #24]
 8002164:	4303      	orrs	r3, r0
 8002166:	69e0      	ldr	r0, [r4, #28]
 8002168:	4303      	orrs	r3, r0
 800216a:	6a20      	ldr	r0, [r4, #32]
 800216c:	4303      	orrs	r3, r0
 800216e:	430b      	orrs	r3, r1
 8002170:	6013      	str	r3, [r2, #0]
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002172:	0020      	movs	r0, r4
 8002174:	f7ff ffc0 	bl	80020f8 <DMA_CalcDMAMUXChannelBaseAndMask>
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002178:	2380      	movs	r3, #128	@ 0x80
 800217a:	01db      	lsls	r3, r3, #7
 800217c:	68a2      	ldr	r2, [r4, #8]
 800217e:	429a      	cmp	r2, r3
 8002180:	d018      	beq.n	80021b4 <HAL_DMA_Init+0x88>
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002182:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002184:	6863      	ldr	r3, [r4, #4]
 8002186:	213f      	movs	r1, #63	@ 0x3f
 8002188:	400b      	ands	r3, r1
 800218a:	6013      	str	r3, [r2, #0]
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800218c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800218e:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
 8002190:	605a      	str	r2, [r3, #4]
  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002192:	6863      	ldr	r3, [r4, #4]
 8002194:	1e5a      	subs	r2, r3, #1
 8002196:	2a03      	cmp	r2, #3
 8002198:	d90f      	bls.n	80021ba <HAL_DMA_Init+0x8e>
    hdma->DMAmuxRequestGen = 0U;
 800219a:	2300      	movs	r3, #0
 800219c:	6523      	str	r3, [r4, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800219e:	6563      	str	r3, [r4, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80021a0:	65a3      	str	r3, [r4, #88]	@ 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021a2:	2300      	movs	r3, #0
 80021a4:	63e3      	str	r3, [r4, #60]	@ 0x3c
  hdma->State = HAL_DMA_STATE_READY;
 80021a6:	2225      	movs	r2, #37	@ 0x25
 80021a8:	2101      	movs	r1, #1
 80021aa:	54a1      	strb	r1, [r4, r2]
  __HAL_UNLOCK(hdma);
 80021ac:	3a01      	subs	r2, #1
 80021ae:	54a3      	strb	r3, [r4, r2]
  return HAL_OK;
 80021b0:	2000      	movs	r0, #0
}
 80021b2:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80021b4:	2300      	movs	r3, #0
 80021b6:	6063      	str	r3, [r4, #4]
 80021b8:	e7e3      	b.n	8002182 <HAL_DMA_Init+0x56>
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80021ba:	223f      	movs	r2, #63	@ 0x3f
 80021bc:	4013      	ands	r3, r2

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80021be:	4a0b      	ldr	r2, [pc, #44]	@ (80021ec <HAL_DMA_Init+0xc0>)
 80021c0:	189a      	adds	r2, r3, r2
 80021c2:	0092      	lsls	r2, r2, #2
 80021c4:	6522      	str	r2, [r4, #80]	@ 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80021c6:	490a      	ldr	r1, [pc, #40]	@ (80021f0 <HAL_DMA_Init+0xc4>)
 80021c8:	6561      	str	r1, [r4, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80021ca:	3b01      	subs	r3, #1
 80021cc:	2101      	movs	r1, #1
 80021ce:	4099      	lsls	r1, r3
 80021d0:	65a1      	str	r1, [r4, #88]	@ 0x58
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80021d6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80021d8:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 80021da:	605a      	str	r2, [r3, #4]
 80021dc:	e7e1      	b.n	80021a2 <HAL_DMA_Init+0x76>
    return HAL_ERROR;
 80021de:	2001      	movs	r0, #1
 80021e0:	e7e7      	b.n	80021b2 <HAL_DMA_Init+0x86>
 80021e2:	46c0      	nop			@ (mov r8, r8)
 80021e4:	bffdfff8 	.word	0xbffdfff8
 80021e8:	ffff800f 	.word	0xffff800f
 80021ec:	1000823f 	.word	0x1000823f
 80021f0:	40020940 	.word	0x40020940

080021f4 <HAL_DMA_Start_IT>:
{
 80021f4:	b570      	push	{r4, r5, r6, lr}
 80021f6:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 80021f8:	2024      	movs	r0, #36	@ 0x24
 80021fa:	5c20      	ldrb	r0, [r4, r0]
 80021fc:	2801      	cmp	r0, #1
 80021fe:	d045      	beq.n	800228c <HAL_DMA_Start_IT+0x98>
 8002200:	2024      	movs	r0, #36	@ 0x24
 8002202:	2501      	movs	r5, #1
 8002204:	5425      	strb	r5, [r4, r0]
  if (hdma->State == HAL_DMA_STATE_READY)
 8002206:	3001      	adds	r0, #1
 8002208:	5c20      	ldrb	r0, [r4, r0]
 800220a:	2801      	cmp	r0, #1
 800220c:	d006      	beq.n	800221c <HAL_DMA_Start_IT+0x28>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800220e:	2380      	movs	r3, #128	@ 0x80
 8002210:	63e3      	str	r3, [r4, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 8002212:	3b5c      	subs	r3, #92	@ 0x5c
 8002214:	2200      	movs	r2, #0
 8002216:	54e2      	strb	r2, [r4, r3]
    status = HAL_ERROR;
 8002218:	2001      	movs	r0, #1
}
 800221a:	bd70      	pop	{r4, r5, r6, pc}
    hdma->State = HAL_DMA_STATE_BUSY;
 800221c:	3024      	adds	r0, #36	@ 0x24
 800221e:	3501      	adds	r5, #1
 8002220:	5425      	strb	r5, [r4, r0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002222:	2000      	movs	r0, #0
 8002224:	63e0      	str	r0, [r4, #60]	@ 0x3c
    __HAL_DMA_DISABLE(hdma);
 8002226:	6825      	ldr	r5, [r4, #0]
 8002228:	6828      	ldr	r0, [r5, #0]
 800222a:	2601      	movs	r6, #1
 800222c:	43b0      	bics	r0, r6
 800222e:	6028      	str	r0, [r5, #0]
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002230:	0020      	movs	r0, r4
 8002232:	f7ff ff3d 	bl	80020b0 <DMA_SetConfig>
    if (NULL != hdma->XferHalfCpltCallback)
 8002236:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8002238:	2b00      	cmp	r3, #0
 800223a:	d01c      	beq.n	8002276 <HAL_DMA_Start_IT+0x82>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800223c:	6822      	ldr	r2, [r4, #0]
 800223e:	6813      	ldr	r3, [r2, #0]
 8002240:	210e      	movs	r1, #14
 8002242:	430b      	orrs	r3, r1
 8002244:	6013      	str	r3, [r2, #0]
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002246:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8002248:	6813      	ldr	r3, [r2, #0]
 800224a:	03db      	lsls	r3, r3, #15
 800224c:	d504      	bpl.n	8002258 <HAL_DMA_Start_IT+0x64>
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800224e:	6811      	ldr	r1, [r2, #0]
 8002250:	2380      	movs	r3, #128	@ 0x80
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	430b      	orrs	r3, r1
 8002256:	6013      	str	r3, [r2, #0]
    if (hdma->DMAmuxRequestGen != 0U)
 8002258:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_DMA_Start_IT+0x74>
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800225e:	6819      	ldr	r1, [r3, #0]
 8002260:	2280      	movs	r2, #128	@ 0x80
 8002262:	0052      	lsls	r2, r2, #1
 8002264:	430a      	orrs	r2, r1
 8002266:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(hdma);
 8002268:	6822      	ldr	r2, [r4, #0]
 800226a:	6813      	ldr	r3, [r2, #0]
 800226c:	2101      	movs	r1, #1
 800226e:	430b      	orrs	r3, r1
 8002270:	6013      	str	r3, [r2, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002272:	2000      	movs	r0, #0
 8002274:	e7d1      	b.n	800221a <HAL_DMA_Start_IT+0x26>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002276:	6822      	ldr	r2, [r4, #0]
 8002278:	6813      	ldr	r3, [r2, #0]
 800227a:	2104      	movs	r1, #4
 800227c:	438b      	bics	r3, r1
 800227e:	6013      	str	r3, [r2, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002280:	6822      	ldr	r2, [r4, #0]
 8002282:	6813      	ldr	r3, [r2, #0]
 8002284:	3106      	adds	r1, #6
 8002286:	430b      	orrs	r3, r1
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e7dc      	b.n	8002246 <HAL_DMA_Start_IT+0x52>
  __HAL_LOCK(hdma);
 800228c:	2002      	movs	r0, #2
 800228e:	e7c4      	b.n	800221a <HAL_DMA_Start_IT+0x26>

08002290 <HAL_DMA_Abort>:
{
 8002290:	b530      	push	{r4, r5, lr}
  if (NULL == hdma)
 8002292:	2800      	cmp	r0, #0
 8002294:	d036      	beq.n	8002304 <HAL_DMA_Abort+0x74>
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002296:	2325      	movs	r3, #37	@ 0x25
 8002298:	5cc3      	ldrb	r3, [r0, r3]
 800229a:	2b02      	cmp	r3, #2
 800229c:	d006      	beq.n	80022ac <HAL_DMA_Abort+0x1c>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800229e:	2304      	movs	r3, #4
 80022a0:	63c3      	str	r3, [r0, #60]	@ 0x3c
    __HAL_UNLOCK(hdma);
 80022a2:	3320      	adds	r3, #32
 80022a4:	2200      	movs	r2, #0
 80022a6:	54c2      	strb	r2, [r0, r3]
    return HAL_ERROR;
 80022a8:	2001      	movs	r0, #1
}
 80022aa:	bd30      	pop	{r4, r5, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80022ac:	6802      	ldr	r2, [r0, #0]
 80022ae:	6813      	ldr	r3, [r2, #0]
 80022b0:	210e      	movs	r1, #14
 80022b2:	438b      	bics	r3, r1
 80022b4:	6013      	str	r3, [r2, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80022b6:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	4913      	ldr	r1, [pc, #76]	@ (8002308 <HAL_DMA_Abort+0x78>)
 80022bc:	400b      	ands	r3, r1
 80022be:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80022c0:	6801      	ldr	r1, [r0, #0]
 80022c2:	680a      	ldr	r2, [r1, #0]
 80022c4:	2301      	movs	r3, #1
 80022c6:	439a      	bics	r2, r3
 80022c8:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80022ca:	4910      	ldr	r1, [pc, #64]	@ (800230c <HAL_DMA_Abort+0x7c>)
 80022cc:	684c      	ldr	r4, [r1, #4]
 80022ce:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80022d0:	251c      	movs	r5, #28
 80022d2:	402a      	ands	r2, r5
 80022d4:	4093      	lsls	r3, r2
 80022d6:	4323      	orrs	r3, r4
 80022d8:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80022da:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 80022dc:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80022de:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 80022e0:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <HAL_DMA_Abort+0x64>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	4907      	ldr	r1, [pc, #28]	@ (8002308 <HAL_DMA_Abort+0x78>)
 80022ea:	400a      	ands	r2, r1
 80022ec:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80022ee:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80022f0:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80022f2:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	2325      	movs	r3, #37	@ 0x25
 80022f6:	2201      	movs	r2, #1
 80022f8:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 80022fa:	3b01      	subs	r3, #1
 80022fc:	2200      	movs	r2, #0
 80022fe:	54c2      	strb	r2, [r0, r3]
  return HAL_OK;
 8002300:	2000      	movs	r0, #0
 8002302:	e7d2      	b.n	80022aa <HAL_DMA_Abort+0x1a>
    return HAL_ERROR;
 8002304:	2001      	movs	r0, #1
 8002306:	e7d0      	b.n	80022aa <HAL_DMA_Abort+0x1a>
 8002308:	fffffeff 	.word	0xfffffeff
 800230c:	40020000 	.word	0x40020000

08002310 <HAL_DMA_Abort_IT>:
{
 8002310:	b570      	push	{r4, r5, r6, lr}
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002312:	2325      	movs	r3, #37	@ 0x25
 8002314:	5cc3      	ldrb	r3, [r0, r3]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800231a:	2304      	movs	r3, #4
 800231c:	63c3      	str	r3, [r0, #60]	@ 0x3c
    status = HAL_ERROR;
 800231e:	2001      	movs	r0, #1
}
 8002320:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002322:	6802      	ldr	r2, [r0, #0]
 8002324:	6813      	ldr	r3, [r2, #0]
 8002326:	210e      	movs	r1, #14
 8002328:	438b      	bics	r3, r1
 800232a:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 800232c:	6801      	ldr	r1, [r0, #0]
 800232e:	680a      	ldr	r2, [r1, #0]
 8002330:	2301      	movs	r3, #1
 8002332:	439a      	bics	r2, r3
 8002334:	600a      	str	r2, [r1, #0]
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002336:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 8002338:	680a      	ldr	r2, [r1, #0]
 800233a:	4c13      	ldr	r4, [pc, #76]	@ (8002388 <HAL_DMA_Abort_IT+0x78>)
 800233c:	4022      	ands	r2, r4
 800233e:	600a      	str	r2, [r1, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8002340:	4912      	ldr	r1, [pc, #72]	@ (800238c <HAL_DMA_Abort_IT+0x7c>)
 8002342:	684c      	ldr	r4, [r1, #4]
 8002344:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002346:	251c      	movs	r5, #28
 8002348:	402a      	ands	r2, r5
 800234a:	4093      	lsls	r3, r2
 800234c:	4323      	orrs	r3, r4
 800234e:	604b      	str	r3, [r1, #4]
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002350:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8002352:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8002354:	605a      	str	r2, [r3, #4]
    if (hdma->DMAmuxRequestGen != 0U)
 8002356:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8002358:	2b00      	cmp	r3, #0
 800235a:	d006      	beq.n	800236a <HAL_DMA_Abort_IT+0x5a>
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	490a      	ldr	r1, [pc, #40]	@ (8002388 <HAL_DMA_Abort_IT+0x78>)
 8002360:	400a      	ands	r2, r1
 8002362:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002364:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8002366:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8002368:	605a      	str	r2, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 800236a:	2325      	movs	r3, #37	@ 0x25
 800236c:	2201      	movs	r2, #1
 800236e:	54c2      	strb	r2, [r0, r3]
    __HAL_UNLOCK(hdma);
 8002370:	3b01      	subs	r3, #1
 8002372:	2200      	movs	r2, #0
 8002374:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferAbortCallback != NULL)
 8002376:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_DMA_Abort_IT+0x72>
      hdma->XferAbortCallback(hdma);
 800237c:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2000      	movs	r0, #0
 8002380:	e7ce      	b.n	8002320 <HAL_DMA_Abort_IT+0x10>
 8002382:	2000      	movs	r0, #0
 8002384:	e7cc      	b.n	8002320 <HAL_DMA_Abort_IT+0x10>
 8002386:	46c0      	nop			@ (mov r8, r8)
 8002388:	fffffeff 	.word	0xfffffeff
 800238c:	40020000 	.word	0x40020000

08002390 <HAL_DMA_IRQHandler>:
{
 8002390:	b570      	push	{r4, r5, r6, lr}
  uint32_t flag_it = DMA1->ISR;
 8002392:	4b31      	ldr	r3, [pc, #196]	@ (8002458 <HAL_DMA_IRQHandler+0xc8>)
 8002394:	6819      	ldr	r1, [r3, #0]
  uint32_t source_it = hdma->Instance->CCR;
 8002396:	6804      	ldr	r4, [r0, #0]
 8002398:	6825      	ldr	r5, [r4, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800239a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800239c:	221c      	movs	r2, #28
 800239e:	4013      	ands	r3, r2
 80023a0:	3a18      	subs	r2, #24
 80023a2:	409a      	lsls	r2, r3
 80023a4:	4211      	tst	r1, r2
 80023a6:	d016      	beq.n	80023d6 <HAL_DMA_IRQHandler+0x46>
 80023a8:	076a      	lsls	r2, r5, #29
 80023aa:	d514      	bpl.n	80023d6 <HAL_DMA_IRQHandler+0x46>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023ac:	6823      	ldr	r3, [r4, #0]
 80023ae:	069b      	lsls	r3, r3, #26
 80023b0:	d403      	bmi.n	80023ba <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80023b2:	6823      	ldr	r3, [r4, #0]
 80023b4:	2204      	movs	r2, #4
 80023b6:	4393      	bics	r3, r2
 80023b8:	6023      	str	r3, [r4, #0]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80023ba:	4927      	ldr	r1, [pc, #156]	@ (8002458 <HAL_DMA_IRQHandler+0xc8>)
 80023bc:	684c      	ldr	r4, [r1, #4]
 80023be:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80023c0:	231c      	movs	r3, #28
 80023c2:	401a      	ands	r2, r3
 80023c4:	3b18      	subs	r3, #24
 80023c6:	4093      	lsls	r3, r2
 80023c8:	4323      	orrs	r3, r4
 80023ca:	604b      	str	r3, [r1, #4]
      if (hdma->XferHalfCpltCallback != NULL)
 80023cc:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d000      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x44>
        hdma->XferHalfCpltCallback(hdma);
 80023d2:	4798      	blx	r3
}
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80023d6:	2202      	movs	r2, #2
 80023d8:	409a      	lsls	r2, r3
 80023da:	4211      	tst	r1, r2
 80023dc:	d01c      	beq.n	8002418 <HAL_DMA_IRQHandler+0x88>
 80023de:	07aa      	lsls	r2, r5, #30
 80023e0:	d51a      	bpl.n	8002418 <HAL_DMA_IRQHandler+0x88>
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80023e2:	6823      	ldr	r3, [r4, #0]
 80023e4:	069b      	lsls	r3, r3, #26
 80023e6:	d406      	bmi.n	80023f6 <HAL_DMA_IRQHandler+0x66>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	220a      	movs	r2, #10
 80023ec:	4393      	bics	r3, r2
 80023ee:	6023      	str	r3, [r4, #0]
        hdma->State = HAL_DMA_STATE_READY;
 80023f0:	2325      	movs	r3, #37	@ 0x25
 80023f2:	3a09      	subs	r2, #9
 80023f4:	54c2      	strb	r2, [r0, r3]
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80023f6:	4918      	ldr	r1, [pc, #96]	@ (8002458 <HAL_DMA_IRQHandler+0xc8>)
 80023f8:	684c      	ldr	r4, [r1, #4]
 80023fa:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 80023fc:	231c      	movs	r3, #28
 80023fe:	401a      	ands	r2, r3
 8002400:	3b1a      	subs	r3, #26
 8002402:	4093      	lsls	r3, r2
 8002404:	4323      	orrs	r3, r4
 8002406:	604b      	str	r3, [r1, #4]
      __HAL_UNLOCK(hdma);
 8002408:	2324      	movs	r3, #36	@ 0x24
 800240a:	2200      	movs	r2, #0
 800240c:	54c2      	strb	r2, [r0, r3]
      if (hdma->XferCpltCallback != NULL)
 800240e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0df      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x44>
        hdma->XferCpltCallback(hdma);
 8002414:	4798      	blx	r3
 8002416:	e7dd      	b.n	80023d4 <HAL_DMA_IRQHandler+0x44>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8002418:	2208      	movs	r2, #8
 800241a:	409a      	lsls	r2, r3
 800241c:	4211      	tst	r1, r2
 800241e:	d0d9      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x44>
 8002420:	072d      	lsls	r5, r5, #28
 8002422:	d5d7      	bpl.n	80023d4 <HAL_DMA_IRQHandler+0x44>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002424:	6823      	ldr	r3, [r4, #0]
 8002426:	220e      	movs	r2, #14
 8002428:	4393      	bics	r3, r2
 800242a:	6023      	str	r3, [r4, #0]
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800242c:	490a      	ldr	r1, [pc, #40]	@ (8002458 <HAL_DMA_IRQHandler+0xc8>)
 800242e:	684c      	ldr	r4, [r1, #4]
 8002430:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8002432:	231c      	movs	r3, #28
 8002434:	401a      	ands	r2, r3
 8002436:	3b1b      	subs	r3, #27
 8002438:	001d      	movs	r5, r3
 800243a:	4095      	lsls	r5, r2
 800243c:	002a      	movs	r2, r5
 800243e:	4322      	orrs	r2, r4
 8002440:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002442:	63c3      	str	r3, [r0, #60]	@ 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 8002444:	2225      	movs	r2, #37	@ 0x25
 8002446:	5483      	strb	r3, [r0, r2]
    __HAL_UNLOCK(hdma);
 8002448:	3323      	adds	r3, #35	@ 0x23
 800244a:	2200      	movs	r2, #0
 800244c:	54c2      	strb	r2, [r0, r3]
    if (hdma->XferErrorCallback != NULL)
 800244e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0bf      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x44>
      hdma->XferErrorCallback(hdma);
 8002454:	4798      	blx	r3
  return;
 8002456:	e7bd      	b.n	80023d4 <HAL_DMA_IRQHandler+0x44>
 8002458:	40020000 	.word	0x40020000

0800245c <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 800245c:	6bc0      	ldr	r0, [r0, #60]	@ 0x3c
}
 800245e:	4770      	bx	lr

08002460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002460:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002462:	46de      	mov	lr, fp
 8002464:	4657      	mov	r7, sl
 8002466:	464e      	mov	r6, r9
 8002468:	4645      	mov	r5, r8
 800246a:	b5e0      	push	{r5, r6, r7, lr}
 800246c:	b083      	sub	sp, #12
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800246e:	680f      	ldr	r7, [r1, #0]
 8002470:	2f00      	cmp	r7, #0
 8002472:	d100      	bne.n	8002476 <HAL_GPIO_Init+0x16>
 8002474:	e0d1      	b.n	800261a <HAL_GPIO_Init+0x1ba>
 8002476:	2200      	movs	r2, #0
  uint32_t position = 0x00u;
 8002478:	2300      	movs	r3, #0
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800247a:	2401      	movs	r4, #1
 800247c:	46a0      	mov	r8, r4

    if (iocurrent != 0x00u)
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800247e:	3402      	adds	r4, #2
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002480:	4d69      	ldr	r5, [pc, #420]	@ (8002628 <HAL_GPIO_Init+0x1c8>)
 8002482:	46ab      	mov	fp, r5
 8002484:	e052      	b.n	800252c <HAL_GPIO_Init+0xcc>
        temp = GPIOx->OSPEEDR;
 8002486:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002488:	0025      	movs	r5, r4
 800248a:	4095      	lsls	r5, r2
 800248c:	43af      	bics	r7, r5
 800248e:	46b9      	mov	r9, r7
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002490:	68cf      	ldr	r7, [r1, #12]
 8002492:	4097      	lsls	r7, r2
 8002494:	464d      	mov	r5, r9
 8002496:	432f      	orrs	r7, r5
        GPIOx->OSPEEDR = temp;
 8002498:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800249a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800249c:	43b7      	bics	r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800249e:	684e      	ldr	r6, [r1, #4]
 80024a0:	0936      	lsrs	r6, r6, #4
 80024a2:	4645      	mov	r5, r8
 80024a4:	402e      	ands	r6, r5
 80024a6:	409e      	lsls	r6, r3
 80024a8:	433e      	orrs	r6, r7
        GPIOx->OTYPER = temp;
 80024aa:	6046      	str	r6, [r0, #4]
 80024ac:	e04a      	b.n	8002544 <HAL_GPIO_Init+0xe4>
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80024ae:	2600      	movs	r6, #0
 80024b0:	4655      	mov	r5, sl
 80024b2:	40ae      	lsls	r6, r5
 80024b4:	464d      	mov	r5, r9
 80024b6:	432e      	orrs	r6, r5
        EXTI->EXTICR[position >> 2u] = temp;
 80024b8:	663e      	str	r6, [r7, #96]	@ 0x60
        temp = EXTI->RTSR1;
 80024ba:	465d      	mov	r5, fp
 80024bc:	682d      	ldr	r5, [r5, #0]
 80024be:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
 80024c0:	4665      	mov	r5, ip
 80024c2:	43ed      	mvns	r5, r5
 80024c4:	9501      	str	r5, [sp, #4]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024c6:	684d      	ldr	r5, [r1, #4]
 80024c8:	2680      	movs	r6, #128	@ 0x80
 80024ca:	0376      	lsls	r6, r6, #13
 80024cc:	4235      	tst	r5, r6
 80024ce:	d000      	beq.n	80024d2 <HAL_GPIO_Init+0x72>
 80024d0:	e094      	b.n	80025fc <HAL_GPIO_Init+0x19c>
        temp &= ~(iocurrent);
 80024d2:	4656      	mov	r6, sl
 80024d4:	9d01      	ldr	r5, [sp, #4]
 80024d6:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->RTSR1 = temp;
 80024d8:	465d      	mov	r5, fp
 80024da:	602e      	str	r6, [r5, #0]

        temp = EXTI->FTSR1;
 80024dc:	686d      	ldr	r5, [r5, #4]
 80024de:	46aa      	mov	sl, r5
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024e0:	684d      	ldr	r5, [r1, #4]
 80024e2:	2680      	movs	r6, #128	@ 0x80
 80024e4:	03b6      	lsls	r6, r6, #14
 80024e6:	4235      	tst	r5, r6
 80024e8:	d000      	beq.n	80024ec <HAL_GPIO_Init+0x8c>
 80024ea:	e08b      	b.n	8002604 <HAL_GPIO_Init+0x1a4>
        temp &= ~(iocurrent);
 80024ec:	4656      	mov	r6, sl
 80024ee:	9d01      	ldr	r5, [sp, #4]
 80024f0:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->FTSR1 = temp;
 80024f2:	465d      	mov	r5, fp
 80024f4:	606e      	str	r6, [r5, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80024f6:	2684      	movs	r6, #132	@ 0x84
 80024f8:	59ae      	ldr	r6, [r5, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80024fa:	684d      	ldr	r5, [r1, #4]
 80024fc:	03ad      	lsls	r5, r5, #14
 80024fe:	d500      	bpl.n	8002502 <HAL_GPIO_Init+0xa2>
 8002500:	e084      	b.n	800260c <HAL_GPIO_Init+0x1ac>
        temp &= ~(iocurrent);
 8002502:	9d01      	ldr	r5, [sp, #4]
 8002504:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->EMR1 = temp;
 8002506:	2584      	movs	r5, #132	@ 0x84
 8002508:	465f      	mov	r7, fp
 800250a:	517e      	str	r6, [r7, r5]

        temp = EXTI->IMR1;
 800250c:	2680      	movs	r6, #128	@ 0x80
 800250e:	59be      	ldr	r6, [r7, r6]
        temp &= ~(iocurrent);
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002510:	684d      	ldr	r5, [r1, #4]
 8002512:	03ed      	lsls	r5, r5, #15
 8002514:	d47d      	bmi.n	8002612 <HAL_GPIO_Init+0x1b2>
        temp &= ~(iocurrent);
 8002516:	9d01      	ldr	r5, [sp, #4]
 8002518:	402e      	ands	r6, r5
        {
          temp |= iocurrent;
        }
        EXTI->IMR1 = temp;
 800251a:	2780      	movs	r7, #128	@ 0x80
 800251c:	465d      	mov	r5, fp
 800251e:	51ee      	str	r6, [r5, r7]
      }
    }

    position++;
 8002520:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002522:	680f      	ldr	r7, [r1, #0]
 8002524:	3202      	adds	r2, #2
 8002526:	003e      	movs	r6, r7
 8002528:	40de      	lsrs	r6, r3
 800252a:	d076      	beq.n	800261a <HAL_GPIO_Init+0x1ba>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800252c:	4646      	mov	r6, r8
 800252e:	409e      	lsls	r6, r3
 8002530:	003d      	movs	r5, r7
 8002532:	4035      	ands	r5, r6
 8002534:	46ac      	mov	ip, r5
    if (iocurrent != 0x00u)
 8002536:	4237      	tst	r7, r6
 8002538:	d0f2      	beq.n	8002520 <HAL_GPIO_Init+0xc0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800253a:	684f      	ldr	r7, [r1, #4]
 800253c:	4027      	ands	r7, r4
 800253e:	3f01      	subs	r7, #1
 8002540:	2f01      	cmp	r7, #1
 8002542:	d9a0      	bls.n	8002486 <HAL_GPIO_Init+0x26>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002544:	684e      	ldr	r6, [r1, #4]
 8002546:	4026      	ands	r6, r4
 8002548:	2e03      	cmp	r6, #3
 800254a:	d022      	beq.n	8002592 <HAL_GPIO_Init+0x132>
        temp = GPIOx->PUPDR;
 800254c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800254e:	0026      	movs	r6, r4
 8002550:	4096      	lsls	r6, r2
 8002552:	43b7      	bics	r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002554:	688e      	ldr	r6, [r1, #8]
 8002556:	4096      	lsls	r6, r2
 8002558:	433e      	orrs	r6, r7
        GPIOx->PUPDR = temp;
 800255a:	60c6      	str	r6, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255c:	684e      	ldr	r6, [r1, #4]
 800255e:	4026      	ands	r6, r4
 8002560:	2e02      	cmp	r6, #2
 8002562:	d116      	bne.n	8002592 <HAL_GPIO_Init+0x132>
        temp = GPIOx->AFR[position >> 3u];
 8002564:	08de      	lsrs	r6, r3, #3
 8002566:	00b6      	lsls	r6, r6, #2
 8002568:	1985      	adds	r5, r0, r6
 800256a:	9501      	str	r5, [sp, #4]
 800256c:	6a2d      	ldr	r5, [r5, #32]
 800256e:	46aa      	mov	sl, r5
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002570:	2707      	movs	r7, #7
 8002572:	401f      	ands	r7, r3
 8002574:	00bf      	lsls	r7, r7, #2
 8002576:	250f      	movs	r5, #15
 8002578:	40bd      	lsls	r5, r7
 800257a:	46a9      	mov	r9, r5
 800257c:	4655      	mov	r5, sl
 800257e:	464e      	mov	r6, r9
 8002580:	43b5      	bics	r5, r6
 8002582:	46aa      	mov	sl, r5
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002584:	690d      	ldr	r5, [r1, #16]
 8002586:	40bd      	lsls	r5, r7
 8002588:	002f      	movs	r7, r5
 800258a:	4655      	mov	r5, sl
 800258c:	432f      	orrs	r7, r5
        GPIOx->AFR[position >> 3u] = temp;
 800258e:	9d01      	ldr	r5, [sp, #4]
 8002590:	622f      	str	r7, [r5, #32]
      temp = GPIOx->MODER;
 8002592:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002594:	0026      	movs	r6, r4
 8002596:	4096      	lsls	r6, r2
 8002598:	43b7      	bics	r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800259a:	684e      	ldr	r6, [r1, #4]
 800259c:	4026      	ands	r6, r4
 800259e:	4096      	lsls	r6, r2
 80025a0:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80025a2:	6006      	str	r6, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025a4:	684e      	ldr	r6, [r1, #4]
 80025a6:	25c0      	movs	r5, #192	@ 0xc0
 80025a8:	02ad      	lsls	r5, r5, #10
 80025aa:	422e      	tst	r6, r5
 80025ac:	d0b8      	beq.n	8002520 <HAL_GPIO_Init+0xc0>
        temp = EXTI->EXTICR[position >> 2u];
 80025ae:	089f      	lsrs	r7, r3, #2
 80025b0:	00bf      	lsls	r7, r7, #2
 80025b2:	4d1d      	ldr	r5, [pc, #116]	@ (8002628 <HAL_GPIO_Init+0x1c8>)
 80025b4:	46a9      	mov	r9, r5
 80025b6:	444f      	add	r7, r9
 80025b8:	6e3d      	ldr	r5, [r7, #96]	@ 0x60
 80025ba:	9501      	str	r5, [sp, #4]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80025bc:	0025      	movs	r5, r4
 80025be:	401d      	ands	r5, r3
 80025c0:	00ed      	lsls	r5, r5, #3
 80025c2:	46aa      	mov	sl, r5
 80025c4:	250f      	movs	r5, #15
 80025c6:	4656      	mov	r6, sl
 80025c8:	40b5      	lsls	r5, r6
 80025ca:	9e01      	ldr	r6, [sp, #4]
 80025cc:	43ae      	bics	r6, r5
 80025ce:	46b1      	mov	r9, r6
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80025d0:	25a0      	movs	r5, #160	@ 0xa0
 80025d2:	05ed      	lsls	r5, r5, #23
 80025d4:	42a8      	cmp	r0, r5
 80025d6:	d100      	bne.n	80025da <HAL_GPIO_Init+0x17a>
 80025d8:	e769      	b.n	80024ae <HAL_GPIO_Init+0x4e>
 80025da:	4e14      	ldr	r6, [pc, #80]	@ (800262c <HAL_GPIO_Init+0x1cc>)
 80025dc:	42b0      	cmp	r0, r6
 80025de:	d009      	beq.n	80025f4 <HAL_GPIO_Init+0x194>
 80025e0:	4e13      	ldr	r6, [pc, #76]	@ (8002630 <HAL_GPIO_Init+0x1d0>)
 80025e2:	42b0      	cmp	r0, r6
 80025e4:	d008      	beq.n	80025f8 <HAL_GPIO_Init+0x198>
 80025e6:	4d13      	ldr	r5, [pc, #76]	@ (8002634 <HAL_GPIO_Init+0x1d4>)
 80025e8:	1946      	adds	r6, r0, r5
 80025ea:	1e75      	subs	r5, r6, #1
 80025ec:	41ae      	sbcs	r6, r5
 80025ee:	0076      	lsls	r6, r6, #1
 80025f0:	3603      	adds	r6, #3
 80025f2:	e75d      	b.n	80024b0 <HAL_GPIO_Init+0x50>
 80025f4:	2601      	movs	r6, #1
 80025f6:	e75b      	b.n	80024b0 <HAL_GPIO_Init+0x50>
 80025f8:	2602      	movs	r6, #2
 80025fa:	e759      	b.n	80024b0 <HAL_GPIO_Init+0x50>
          temp |= iocurrent;
 80025fc:	4665      	mov	r5, ip
 80025fe:	4656      	mov	r6, sl
 8002600:	432e      	orrs	r6, r5
 8002602:	e769      	b.n	80024d8 <HAL_GPIO_Init+0x78>
          temp |= iocurrent;
 8002604:	4665      	mov	r5, ip
 8002606:	4656      	mov	r6, sl
 8002608:	432e      	orrs	r6, r5
 800260a:	e772      	b.n	80024f2 <HAL_GPIO_Init+0x92>
          temp |= iocurrent;
 800260c:	4665      	mov	r5, ip
 800260e:	432e      	orrs	r6, r5
 8002610:	e779      	b.n	8002506 <HAL_GPIO_Init+0xa6>
          temp |= iocurrent;
 8002612:	4665      	mov	r5, ip
 8002614:	4335      	orrs	r5, r6
 8002616:	002e      	movs	r6, r5
 8002618:	e77f      	b.n	800251a <HAL_GPIO_Init+0xba>
  }
}
 800261a:	b003      	add	sp, #12
 800261c:	bcf0      	pop	{r4, r5, r6, r7}
 800261e:	46bb      	mov	fp, r7
 8002620:	46b2      	mov	sl, r6
 8002622:	46a9      	mov	r9, r5
 8002624:	46a0      	mov	r8, r4
 8002626:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002628:	40021800 	.word	0x40021800
 800262c:	50000400 	.word	0x50000400
 8002630:	50000800 	.word	0x50000800
 8002634:	affff400 	.word	0xaffff400

08002638 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002638:	b510      	push	{r4, lr}
 800263a:	0002      	movs	r2, r0
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800263c:	4913      	ldr	r1, [pc, #76]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0x54>)
 800263e:	680b      	ldr	r3, [r1, #0]
 8002640:	4813      	ldr	r0, [pc, #76]	@ (8002690 <HAL_PWREx_ControlVoltageScaling+0x58>)
 8002642:	4003      	ands	r3, r0
 8002644:	4313      	orrs	r3, r2
 8002646:	600b      	str	r3, [r1, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002648:	2380      	movs	r3, #128	@ 0x80
 800264a:	009b      	lsls	r3, r3, #2
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 800264c:	2000      	movs	r0, #0
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800264e:	429a      	cmp	r2, r3
 8002650:	d000      	beq.n	8002654 <HAL_PWREx_ControlVoltageScaling+0x1c>
}
 8002652:	bd10      	pop	{r4, pc}
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002654:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_PWREx_ControlVoltageScaling+0x5c>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	0058      	lsls	r0, r3, #1
 800265a:	18c0      	adds	r0, r0, r3
 800265c:	0040      	lsls	r0, r0, #1
 800265e:	490e      	ldr	r1, [pc, #56]	@ (8002698 <HAL_PWREx_ControlVoltageScaling+0x60>)
 8002660:	f7fd fd58 	bl	8000114 <__udivsi3>
 8002664:	3001      	adds	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002666:	4b09      	ldr	r3, [pc, #36]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002668:	695b      	ldr	r3, [r3, #20]
 800266a:	055b      	lsls	r3, r3, #21
 800266c:	d50a      	bpl.n	8002684 <HAL_PWREx_ControlVoltageScaling+0x4c>
 800266e:	4907      	ldr	r1, [pc, #28]	@ (800268c <HAL_PWREx_ControlVoltageScaling+0x54>)
 8002670:	2280      	movs	r2, #128	@ 0x80
 8002672:	00d2      	lsls	r2, r2, #3
        wait_loop_index--;
 8002674:	3801      	subs	r0, #1
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002676:	694b      	ldr	r3, [r1, #20]
 8002678:	4213      	tst	r3, r2
 800267a:	d005      	beq.n	8002688 <HAL_PWREx_ControlVoltageScaling+0x50>
      if (wait_loop_index != 0U)
 800267c:	2800      	cmp	r0, #0
 800267e:	d1f9      	bne.n	8002674 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8002680:	2003      	movs	r0, #3
 8002682:	e7e6      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x1a>
  return HAL_OK;
 8002684:	2000      	movs	r0, #0
 8002686:	e7e4      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x1a>
 8002688:	2000      	movs	r0, #0
 800268a:	e7e2      	b.n	8002652 <HAL_PWREx_ControlVoltageScaling+0x1a>
 800268c:	40007000 	.word	0x40007000
 8002690:	fffff9ff 	.word	0xfffff9ff
 8002694:	20000000 	.word	0x20000000
 8002698:	000f4240 	.word	0x000f4240

0800269c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800269e:	46ce      	mov	lr, r9
 80026a0:	4647      	mov	r7, r8
 80026a2:	b580      	push	{r7, lr}
 80026a4:	b083      	sub	sp, #12
 80026a6:	1e04      	subs	r4, r0, #0
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	d100      	bne.n	80026ac <HAL_RCC_OscConfig+0x10>
 80026aa:	e23e      	b.n	8002b2a <HAL_RCC_OscConfig+0x48e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	07db      	lsls	r3, r3, #31
 80026b0:	d538      	bpl.n	8002724 <HAL_RCC_OscConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026b2:	4ac7      	ldr	r2, [pc, #796]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80026b4:	6891      	ldr	r1, [r2, #8]
 80026b6:	2338      	movs	r3, #56	@ 0x38
 80026b8:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026ba:	68d2      	ldr	r2, [r2, #12]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80026bc:	2b10      	cmp	r3, #16
 80026be:	d026      	beq.n	800270e <HAL_RCC_OscConfig+0x72>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80026c0:	2b08      	cmp	r3, #8
 80026c2:	d027      	beq.n	8002714 <HAL_RCC_OscConfig+0x78>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026c4:	6863      	ldr	r3, [r4, #4]
 80026c6:	2280      	movs	r2, #128	@ 0x80
 80026c8:	0252      	lsls	r2, r2, #9
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d07a      	beq.n	80027c4 <HAL_RCC_OscConfig+0x128>
 80026ce:	22a0      	movs	r2, #160	@ 0xa0
 80026d0:	02d2      	lsls	r2, r2, #11
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d07d      	beq.n	80027d2 <HAL_RCC_OscConfig+0x136>
 80026d6:	4bbe      	ldr	r3, [pc, #760]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	49be      	ldr	r1, [pc, #760]	@ (80029d4 <HAL_RCC_OscConfig+0x338>)
 80026dc:	400a      	ands	r2, r1
 80026de:	601a      	str	r2, [r3, #0]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	49bd      	ldr	r1, [pc, #756]	@ (80029d8 <HAL_RCC_OscConfig+0x33c>)
 80026e4:	400a      	ands	r2, r1
 80026e6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026e8:	6863      	ldr	r3, [r4, #4]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d07d      	beq.n	80027ea <HAL_RCC_OscConfig+0x14e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ee:	f7ff f8fd 	bl	80018ec <HAL_GetTick>
 80026f2:	0005      	movs	r5, r0

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026f4:	4fb6      	ldr	r7, [pc, #728]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80026f6:	2680      	movs	r6, #128	@ 0x80
 80026f8:	02b6      	lsls	r6, r6, #10
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	4233      	tst	r3, r6
 80026fe:	d111      	bne.n	8002724 <HAL_RCC_OscConfig+0x88>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002700:	f7ff f8f4 	bl	80018ec <HAL_GetTick>
 8002704:	1b40      	subs	r0, r0, r5
 8002706:	2864      	cmp	r0, #100	@ 0x64
 8002708:	d9f7      	bls.n	80026fa <HAL_RCC_OscConfig+0x5e>
          {
            return HAL_TIMEOUT;
 800270a:	2003      	movs	r0, #3
 800270c:	e20e      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800270e:	43d2      	mvns	r2, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002710:	0792      	lsls	r2, r2, #30
 8002712:	d1d7      	bne.n	80026c4 <HAL_RCC_OscConfig+0x28>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002714:	4bae      	ldr	r3, [pc, #696]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	039b      	lsls	r3, r3, #14
 800271a:	d503      	bpl.n	8002724 <HAL_RCC_OscConfig+0x88>
 800271c:	6863      	ldr	r3, [r4, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d100      	bne.n	8002724 <HAL_RCC_OscConfig+0x88>
 8002722:	e208      	b.n	8002b36 <HAL_RCC_OscConfig+0x49a>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002724:	6823      	ldr	r3, [r4, #0]
 8002726:	079b      	lsls	r3, r3, #30
 8002728:	d52a      	bpl.n	8002780 <HAL_RCC_OscConfig+0xe4>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800272a:	4aa9      	ldr	r2, [pc, #676]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800272c:	6891      	ldr	r1, [r2, #8]
 800272e:	2338      	movs	r3, #56	@ 0x38
 8002730:	400b      	ands	r3, r1
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002732:	68d2      	ldr	r2, [r2, #12]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002734:	2b10      	cmp	r3, #16
 8002736:	d068      	beq.n	800280a <HAL_RCC_OscConfig+0x16e>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002738:	2b00      	cmp	r3, #0
 800273a:	d16b      	bne.n	8002814 <HAL_RCC_OscConfig+0x178>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800273c:	4ba4      	ldr	r3, [pc, #656]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	055b      	lsls	r3, r3, #21
 8002742:	d500      	bpl.n	8002746 <HAL_RCC_OscConfig+0xaa>
 8002744:	e21a      	b.n	8002b7c <HAL_RCC_OscConfig+0x4e0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002746:	49a2      	ldr	r1, [pc, #648]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002748:	684a      	ldr	r2, [r1, #4]
 800274a:	6963      	ldr	r3, [r4, #20]
 800274c:	021b      	lsls	r3, r3, #8
 800274e:	48a3      	ldr	r0, [pc, #652]	@ (80029dc <HAL_RCC_OscConfig+0x340>)
 8002750:	4002      	ands	r2, r0
 8002752:	4313      	orrs	r3, r2
 8002754:	604b      	str	r3, [r1, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002756:	4a9e      	ldr	r2, [pc, #632]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002758:	6813      	ldr	r3, [r2, #0]
 800275a:	49a1      	ldr	r1, [pc, #644]	@ (80029e0 <HAL_RCC_OscConfig+0x344>)
 800275c:	400b      	ands	r3, r1
 800275e:	6921      	ldr	r1, [r4, #16]
 8002760:	430b      	orrs	r3, r1
 8002762:	6013      	str	r3, [r2, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	499f      	ldr	r1, [pc, #636]	@ (80029e4 <HAL_RCC_OscConfig+0x348>)
 8002768:	049b      	lsls	r3, r3, #18
 800276a:	0f5b      	lsrs	r3, r3, #29
 800276c:	4a9e      	ldr	r2, [pc, #632]	@ (80029e8 <HAL_RCC_OscConfig+0x34c>)
 800276e:	40da      	lsrs	r2, r3
 8002770:	600a      	str	r2, [r1, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002772:	4b9e      	ldr	r3, [pc, #632]	@ (80029ec <HAL_RCC_OscConfig+0x350>)
 8002774:	6818      	ldr	r0, [r3, #0]
 8002776:	f7ff f871 	bl	800185c <HAL_InitTick>
 800277a:	2800      	cmp	r0, #0
 800277c:	d000      	beq.n	8002780 <HAL_RCC_OscConfig+0xe4>
 800277e:	e1dc      	b.n	8002b3a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002780:	6823      	ldr	r3, [r4, #0]
 8002782:	071b      	lsls	r3, r3, #28
 8002784:	d400      	bmi.n	8002788 <HAL_RCC_OscConfig+0xec>
 8002786:	e08b      	b.n	80028a0 <HAL_RCC_OscConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002788:	4b91      	ldr	r3, [pc, #580]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	2338      	movs	r3, #56	@ 0x38
 800278e:	4013      	ands	r3, r2
 8002790:	2b18      	cmp	r3, #24
 8002792:	d07d      	beq.n	8002890 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002794:	69a3      	ldr	r3, [r4, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d100      	bne.n	800279c <HAL_RCC_OscConfig+0x100>
 800279a:	e0c4      	b.n	8002926 <HAL_RCC_OscConfig+0x28a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800279c:	4a8c      	ldr	r2, [pc, #560]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800279e:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 80027a0:	2101      	movs	r1, #1
 80027a2:	430b      	orrs	r3, r1
 80027a4:	6613      	str	r3, [r2, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a6:	f7ff f8a1 	bl	80018ec <HAL_GetTick>
 80027aa:	0005      	movs	r5, r0

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027ac:	4f88      	ldr	r7, [pc, #544]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80027ae:	2602      	movs	r6, #2
 80027b0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80027b2:	421e      	tst	r6, r3
 80027b4:	d174      	bne.n	80028a0 <HAL_RCC_OscConfig+0x204>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b6:	f7ff f899 	bl	80018ec <HAL_GetTick>
 80027ba:	1b40      	subs	r0, r0, r5
 80027bc:	2802      	cmp	r0, #2
 80027be:	d9f7      	bls.n	80027b0 <HAL_RCC_OscConfig+0x114>
          {
            return HAL_TIMEOUT;
 80027c0:	2003      	movs	r0, #3
 80027c2:	e1b3      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027c4:	4a82      	ldr	r2, [pc, #520]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80027c6:	6811      	ldr	r1, [r2, #0]
 80027c8:	2380      	movs	r3, #128	@ 0x80
 80027ca:	025b      	lsls	r3, r3, #9
 80027cc:	430b      	orrs	r3, r1
 80027ce:	6013      	str	r3, [r2, #0]
 80027d0:	e78a      	b.n	80026e8 <HAL_RCC_OscConfig+0x4c>
 80027d2:	4b7f      	ldr	r3, [pc, #508]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80027d4:	6819      	ldr	r1, [r3, #0]
 80027d6:	2280      	movs	r2, #128	@ 0x80
 80027d8:	02d2      	lsls	r2, r2, #11
 80027da:	430a      	orrs	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	2280      	movs	r2, #128	@ 0x80
 80027e2:	0252      	lsls	r2, r2, #9
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	e77e      	b.n	80026e8 <HAL_RCC_OscConfig+0x4c>
        tickstart = HAL_GetTick();
 80027ea:	f7ff f87f 	bl	80018ec <HAL_GetTick>
 80027ee:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027f0:	4f77      	ldr	r7, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80027f2:	2680      	movs	r6, #128	@ 0x80
 80027f4:	02b6      	lsls	r6, r6, #10
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	4233      	tst	r3, r6
 80027fa:	d093      	beq.n	8002724 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027fc:	f7ff f876 	bl	80018ec <HAL_GetTick>
 8002800:	1b40      	subs	r0, r0, r5
 8002802:	2864      	cmp	r0, #100	@ 0x64
 8002804:	d9f7      	bls.n	80027f6 <HAL_RCC_OscConfig+0x15a>
            return HAL_TIMEOUT;
 8002806:	2003      	movs	r0, #3
 8002808:	e190      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800280a:	3b0d      	subs	r3, #13
 800280c:	4013      	ands	r3, r2
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 800280e:	2b02      	cmp	r3, #2
 8002810:	d100      	bne.n	8002814 <HAL_RCC_OscConfig+0x178>
 8002812:	e1a3      	b.n	8002b5c <HAL_RCC_OscConfig+0x4c0>
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002814:	68e3      	ldr	r3, [r4, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d024      	beq.n	8002864 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800281a:	4a6d      	ldr	r2, [pc, #436]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800281c:	6813      	ldr	r3, [r2, #0]
 800281e:	4970      	ldr	r1, [pc, #448]	@ (80029e0 <HAL_RCC_OscConfig+0x344>)
 8002820:	400b      	ands	r3, r1
 8002822:	6921      	ldr	r1, [r4, #16]
 8002824:	430b      	orrs	r3, r1
 8002826:	6013      	str	r3, [r2, #0]
        __HAL_RCC_HSI_ENABLE();
 8002828:	6811      	ldr	r1, [r2, #0]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	430b      	orrs	r3, r1
 8002830:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002832:	f7ff f85b 	bl	80018ec <HAL_GetTick>
 8002836:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002838:	4f65      	ldr	r7, [pc, #404]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800283a:	2680      	movs	r6, #128	@ 0x80
 800283c:	00f6      	lsls	r6, r6, #3
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	4233      	tst	r3, r6
 8002842:	d106      	bne.n	8002852 <HAL_RCC_OscConfig+0x1b6>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff f852 	bl	80018ec <HAL_GetTick>
 8002848:	1b40      	subs	r0, r0, r5
 800284a:	2802      	cmp	r0, #2
 800284c:	d9f7      	bls.n	800283e <HAL_RCC_OscConfig+0x1a2>
            return HAL_TIMEOUT;
 800284e:	2003      	movs	r0, #3
 8002850:	e16c      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	495f      	ldr	r1, [pc, #380]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002854:	684a      	ldr	r2, [r1, #4]
 8002856:	6963      	ldr	r3, [r4, #20]
 8002858:	021b      	lsls	r3, r3, #8
 800285a:	4860      	ldr	r0, [pc, #384]	@ (80029dc <HAL_RCC_OscConfig+0x340>)
 800285c:	4002      	ands	r2, r0
 800285e:	4313      	orrs	r3, r2
 8002860:	604b      	str	r3, [r1, #4]
 8002862:	e78d      	b.n	8002780 <HAL_RCC_OscConfig+0xe4>
        __HAL_RCC_HSI_DISABLE();
 8002864:	4a5a      	ldr	r2, [pc, #360]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002866:	6813      	ldr	r3, [r2, #0]
 8002868:	4961      	ldr	r1, [pc, #388]	@ (80029f0 <HAL_RCC_OscConfig+0x354>)
 800286a:	400b      	ands	r3, r1
 800286c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800286e:	f7ff f83d 	bl	80018ec <HAL_GetTick>
 8002872:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002874:	4f56      	ldr	r7, [pc, #344]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002876:	2680      	movs	r6, #128	@ 0x80
 8002878:	00f6      	lsls	r6, r6, #3
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	4233      	tst	r3, r6
 800287e:	d100      	bne.n	8002882 <HAL_RCC_OscConfig+0x1e6>
 8002880:	e77e      	b.n	8002780 <HAL_RCC_OscConfig+0xe4>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002882:	f7ff f833 	bl	80018ec <HAL_GetTick>
 8002886:	1b40      	subs	r0, r0, r5
 8002888:	2802      	cmp	r0, #2
 800288a:	d9f6      	bls.n	800287a <HAL_RCC_OscConfig+0x1de>
            return HAL_TIMEOUT;
 800288c:	2003      	movs	r0, #3
 800288e:	e14d      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8002890:	4b4f      	ldr	r3, [pc, #316]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002892:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002894:	079b      	lsls	r3, r3, #30
 8002896:	d503      	bpl.n	80028a0 <HAL_RCC_OscConfig+0x204>
 8002898:	69a3      	ldr	r3, [r4, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d100      	bne.n	80028a0 <HAL_RCC_OscConfig+0x204>
 800289e:	e14e      	b.n	8002b3e <HAL_RCC_OscConfig+0x4a2>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028a0:	6823      	ldr	r3, [r4, #0]
 80028a2:	075b      	lsls	r3, r3, #29
 80028a4:	d400      	bmi.n	80028a8 <HAL_RCC_OscConfig+0x20c>
 80028a6:	e0ac      	b.n	8002a02 <HAL_RCC_OscConfig+0x366>

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80028a8:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80028aa:	689a      	ldr	r2, [r3, #8]
 80028ac:	2338      	movs	r3, #56	@ 0x38
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b20      	cmp	r3, #32
 80028b2:	d04c      	beq.n	800294e <HAL_RCC_OscConfig+0x2b2>
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028b4:	4b46      	ldr	r3, [pc, #280]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80028b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 80028b8:	2200      	movs	r2, #0
 80028ba:	4691      	mov	r9, r2
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	d40b      	bmi.n	80028d8 <HAL_RCC_OscConfig+0x23c>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80028c0:	4b43      	ldr	r3, [pc, #268]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80028c2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80028c4:	2180      	movs	r1, #128	@ 0x80
 80028c6:	0549      	lsls	r1, r1, #21
 80028c8:	430a      	orrs	r2, r1
 80028ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ce:	400b      	ands	r3, r1
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	9b01      	ldr	r3, [sp, #4]
        pwrclkchanged = SET;
 80028d4:	2301      	movs	r3, #1
 80028d6:	4699      	mov	r9, r3
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_RCC_OscConfig+0x358>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	05db      	lsls	r3, r3, #23
 80028de:	d53f      	bpl.n	8002960 <HAL_RCC_OscConfig+0x2c4>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028e0:	68a3      	ldr	r3, [r4, #8]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d052      	beq.n	800298c <HAL_RCC_OscConfig+0x2f0>
 80028e6:	2b05      	cmp	r3, #5
 80028e8:	d056      	beq.n	8002998 <HAL_RCC_OscConfig+0x2fc>
 80028ea:	4b39      	ldr	r3, [pc, #228]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80028ec:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028ee:	2101      	movs	r1, #1
 80028f0:	438a      	bics	r2, r1
 80028f2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80028f4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80028f6:	3103      	adds	r1, #3
 80028f8:	438a      	bics	r2, r1
 80028fa:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028fc:	68a3      	ldr	r3, [r4, #8]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d054      	beq.n	80029ac <HAL_RCC_OscConfig+0x310>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f7fe fff3 	bl	80018ec <HAL_GetTick>
 8002906:	0006      	movs	r6, r0

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800290a:	4698      	mov	r8, r3
 800290c:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800290e:	4d3a      	ldr	r5, [pc, #232]	@ (80029f8 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002910:	4643      	mov	r3, r8
 8002912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002914:	421f      	tst	r7, r3
 8002916:	d171      	bne.n	80029fc <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002918:	f7fe ffe8 	bl	80018ec <HAL_GetTick>
 800291c:	1b80      	subs	r0, r0, r6
 800291e:	42a8      	cmp	r0, r5
 8002920:	d9f6      	bls.n	8002910 <HAL_RCC_OscConfig+0x274>
          {
            return HAL_TIMEOUT;
 8002922:	2003      	movs	r0, #3
 8002924:	e102      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_LSI_DISABLE();
 8002926:	4a2a      	ldr	r2, [pc, #168]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002928:	6e13      	ldr	r3, [r2, #96]	@ 0x60
 800292a:	2101      	movs	r1, #1
 800292c:	438b      	bics	r3, r1
 800292e:	6613      	str	r3, [r2, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8002930:	f7fe ffdc 	bl	80018ec <HAL_GetTick>
 8002934:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002936:	4f26      	ldr	r7, [pc, #152]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002938:	2602      	movs	r6, #2
 800293a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800293c:	421e      	tst	r6, r3
 800293e:	d0af      	beq.n	80028a0 <HAL_RCC_OscConfig+0x204>
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002940:	f7fe ffd4 	bl	80018ec <HAL_GetTick>
 8002944:	1b40      	subs	r0, r0, r5
 8002946:	2802      	cmp	r0, #2
 8002948:	d9f7      	bls.n	800293a <HAL_RCC_OscConfig+0x29e>
            return HAL_TIMEOUT;
 800294a:	2003      	movs	r0, #3
 800294c:	e0ee      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800294e:	4b20      	ldr	r3, [pc, #128]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 8002950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002952:	079b      	lsls	r3, r3, #30
 8002954:	d555      	bpl.n	8002a02 <HAL_RCC_OscConfig+0x366>
 8002956:	68a3      	ldr	r3, [r4, #8]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d152      	bne.n	8002a02 <HAL_RCC_OscConfig+0x366>
        return HAL_ERROR;
 800295c:	2001      	movs	r0, #1
 800295e:	e0e5      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002960:	4a24      	ldr	r2, [pc, #144]	@ (80029f4 <HAL_RCC_OscConfig+0x358>)
 8002962:	6811      	ldr	r1, [r2, #0]
 8002964:	2380      	movs	r3, #128	@ 0x80
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	430b      	orrs	r3, r1
 800296a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800296c:	f7fe ffbe 	bl	80018ec <HAL_GetTick>
 8002970:	0006      	movs	r6, r0
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	4d20      	ldr	r5, [pc, #128]	@ (80029f4 <HAL_RCC_OscConfig+0x358>)
 8002974:	2780      	movs	r7, #128	@ 0x80
 8002976:	007f      	lsls	r7, r7, #1
 8002978:	682b      	ldr	r3, [r5, #0]
 800297a:	423b      	tst	r3, r7
 800297c:	d1b0      	bne.n	80028e0 <HAL_RCC_OscConfig+0x244>
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800297e:	f7fe ffb5 	bl	80018ec <HAL_GetTick>
 8002982:	1b80      	subs	r0, r0, r6
 8002984:	2802      	cmp	r0, #2
 8002986:	d9f7      	bls.n	8002978 <HAL_RCC_OscConfig+0x2dc>
            return HAL_TIMEOUT;
 8002988:	2003      	movs	r0, #3
 800298a:	e0cf      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800298c:	4a10      	ldr	r2, [pc, #64]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800298e:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002990:	2101      	movs	r1, #1
 8002992:	430b      	orrs	r3, r1
 8002994:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002996:	e7b1      	b.n	80028fc <HAL_RCC_OscConfig+0x260>
 8002998:	4b0d      	ldr	r3, [pc, #52]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 800299a:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800299c:	2104      	movs	r1, #4
 800299e:	430a      	orrs	r2, r1
 80029a0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029a2:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80029a4:	3903      	subs	r1, #3
 80029a6:	430a      	orrs	r2, r1
 80029a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80029aa:	e7a7      	b.n	80028fc <HAL_RCC_OscConfig+0x260>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe ff9e 	bl	80018ec <HAL_GetTick>
 80029b0:	0006      	movs	r6, r0

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029b2:	4b07      	ldr	r3, [pc, #28]	@ (80029d0 <HAL_RCC_OscConfig+0x334>)
 80029b4:	4698      	mov	r8, r3
 80029b6:	2702      	movs	r7, #2
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	4d0f      	ldr	r5, [pc, #60]	@ (80029f8 <HAL_RCC_OscConfig+0x35c>)
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029ba:	4643      	mov	r3, r8
 80029bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029be:	421f      	tst	r7, r3
 80029c0:	d01c      	beq.n	80029fc <HAL_RCC_OscConfig+0x360>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c2:	f7fe ff93 	bl	80018ec <HAL_GetTick>
 80029c6:	1b80      	subs	r0, r0, r6
 80029c8:	42a8      	cmp	r0, r5
 80029ca:	d9f6      	bls.n	80029ba <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 80029cc:	2003      	movs	r0, #3
 80029ce:	e0ad      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
 80029d0:	40021000 	.word	0x40021000
 80029d4:	fffeffff 	.word	0xfffeffff
 80029d8:	fffbffff 	.word	0xfffbffff
 80029dc:	ffff80ff 	.word	0xffff80ff
 80029e0:	ffffc7ff 	.word	0xffffc7ff
 80029e4:	20000000 	.word	0x20000000
 80029e8:	00f42400 	.word	0x00f42400
 80029ec:	20000008 	.word	0x20000008
 80029f0:	fffffeff 	.word	0xfffffeff
 80029f4:	40007000 	.word	0x40007000
 80029f8:	00001388 	.word	0x00001388
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80029fc:	464b      	mov	r3, r9
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d021      	beq.n	8002a46 <HAL_RCC_OscConfig+0x3aa>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a02:	69e3      	ldr	r3, [r4, #28]
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8002a04:	2000      	movs	r0, #0
  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d100      	bne.n	8002a0c <HAL_RCC_OscConfig+0x370>
 8002a0a:	e08f      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a0c:	4a62      	ldr	r2, [pc, #392]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a0e:	6891      	ldr	r1, [r2, #8]
 8002a10:	2238      	movs	r2, #56	@ 0x38
 8002a12:	400a      	ands	r2, r1
 8002a14:	2a10      	cmp	r2, #16
 8002a16:	d064      	beq.n	8002ae2 <HAL_RCC_OscConfig+0x446>
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d01a      	beq.n	8002a52 <HAL_RCC_OscConfig+0x3b6>
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	4a5e      	ldr	r2, [pc, #376]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a1e:	6813      	ldr	r3, [r2, #0]
 8002a20:	495e      	ldr	r1, [pc, #376]	@ (8002b9c <HAL_RCC_OscConfig+0x500>)
 8002a22:	400b      	ands	r3, r1
 8002a24:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a26:	f7fe ff61 	bl	80018ec <HAL_GetTick>
 8002a2a:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a2c:	4e5a      	ldr	r6, [pc, #360]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a2e:	2580      	movs	r5, #128	@ 0x80
 8002a30:	04ad      	lsls	r5, r5, #18
 8002a32:	6833      	ldr	r3, [r6, #0]
 8002a34:	422b      	tst	r3, r5
 8002a36:	d04d      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x438>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a38:	f7fe ff58 	bl	80018ec <HAL_GetTick>
 8002a3c:	1b00      	subs	r0, r0, r4
 8002a3e:	2802      	cmp	r0, #2
 8002a40:	d9f7      	bls.n	8002a32 <HAL_RCC_OscConfig+0x396>
            return HAL_TIMEOUT;
 8002a42:	2003      	movs	r0, #3
 8002a44:	e072      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PWR_CLK_DISABLE();
 8002a46:	4a54      	ldr	r2, [pc, #336]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a48:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002a4a:	4955      	ldr	r1, [pc, #340]	@ (8002ba0 <HAL_RCC_OscConfig+0x504>)
 8002a4c:	400b      	ands	r3, r1
 8002a4e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002a50:	e7d7      	b.n	8002a02 <HAL_RCC_OscConfig+0x366>
        __HAL_RCC_PLL_DISABLE();
 8002a52:	4a51      	ldr	r2, [pc, #324]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a54:	6813      	ldr	r3, [r2, #0]
 8002a56:	4951      	ldr	r1, [pc, #324]	@ (8002b9c <HAL_RCC_OscConfig+0x500>)
 8002a58:	400b      	ands	r3, r1
 8002a5a:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8002a5c:	f7fe ff46 	bl	80018ec <HAL_GetTick>
 8002a60:	0005      	movs	r5, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a62:	4f4d      	ldr	r7, [pc, #308]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a64:	2680      	movs	r6, #128	@ 0x80
 8002a66:	04b6      	lsls	r6, r6, #18
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	4233      	tst	r3, r6
 8002a6c:	d006      	beq.n	8002a7c <HAL_RCC_OscConfig+0x3e0>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a6e:	f7fe ff3d 	bl	80018ec <HAL_GetTick>
 8002a72:	1b40      	subs	r0, r0, r5
 8002a74:	2802      	cmp	r0, #2
 8002a76:	d9f7      	bls.n	8002a68 <HAL_RCC_OscConfig+0x3cc>
            return HAL_TIMEOUT;
 8002a78:	2003      	movs	r0, #3
 8002a7a:	e057      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a7c:	4a46      	ldr	r2, [pc, #280]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002a7e:	68d1      	ldr	r1, [r2, #12]
 8002a80:	6a23      	ldr	r3, [r4, #32]
 8002a82:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8002a84:	4303      	orrs	r3, r0
 8002a86:	4847      	ldr	r0, [pc, #284]	@ (8002ba4 <HAL_RCC_OscConfig+0x508>)
 8002a88:	4001      	ands	r1, r0
 8002a8a:	430b      	orrs	r3, r1
 8002a8c:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002a8e:	430b      	orrs	r3, r1
 8002a90:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8002a92:	430b      	orrs	r3, r1
 8002a94:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8002a96:	0209      	lsls	r1, r1, #8
 8002a98:	430b      	orrs	r3, r1
 8002a9a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLL_ENABLE();
 8002a9c:	6811      	ldr	r1, [r2, #0]
 8002a9e:	2380      	movs	r3, #128	@ 0x80
 8002aa0:	045b      	lsls	r3, r3, #17
 8002aa2:	430b      	orrs	r3, r1
 8002aa4:	6013      	str	r3, [r2, #0]
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002aa6:	68d1      	ldr	r1, [r2, #12]
 8002aa8:	2380      	movs	r3, #128	@ 0x80
 8002aaa:	055b      	lsls	r3, r3, #21
 8002aac:	430b      	orrs	r3, r1
 8002aae:	60d3      	str	r3, [r2, #12]
        tickstart = HAL_GetTick();
 8002ab0:	f7fe ff1c 	bl	80018ec <HAL_GetTick>
 8002ab4:	0004      	movs	r4, r0
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab6:	4e38      	ldr	r6, [pc, #224]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002ab8:	2580      	movs	r5, #128	@ 0x80
 8002aba:	04ad      	lsls	r5, r5, #18
 8002abc:	6833      	ldr	r3, [r6, #0]
 8002abe:	422b      	tst	r3, r5
 8002ac0:	d106      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x434>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe ff13 	bl	80018ec <HAL_GetTick>
 8002ac6:	1b00      	subs	r0, r0, r4
 8002ac8:	2802      	cmp	r0, #2
 8002aca:	d9f7      	bls.n	8002abc <HAL_RCC_OscConfig+0x420>
            return HAL_TIMEOUT;
 8002acc:	2003      	movs	r0, #3
 8002ace:	e02d      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
  return HAL_OK;
 8002ad0:	2000      	movs	r0, #0
 8002ad2:	e02b      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002ad4:	4a30      	ldr	r2, [pc, #192]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002ad6:	68d3      	ldr	r3, [r2, #12]
 8002ad8:	4933      	ldr	r1, [pc, #204]	@ (8002ba8 <HAL_RCC_OscConfig+0x50c>)
 8002ada:	400b      	ands	r3, r1
 8002adc:	60d3      	str	r3, [r2, #12]
  return HAL_OK;
 8002ade:	2000      	movs	r0, #0
 8002ae0:	e024      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d02d      	beq.n	8002b42 <HAL_RCC_OscConfig+0x4a6>
        temp_pllckcfg = RCC->PLLCFGR;
 8002ae6:	4b2c      	ldr	r3, [pc, #176]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002ae8:	68da      	ldr	r2, [r3, #12]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	2303      	movs	r3, #3
 8002aec:	4013      	ands	r3, r2
 8002aee:	6a21      	ldr	r1, [r4, #32]
          return HAL_ERROR;
 8002af0:	2001      	movs	r0, #1
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002af2:	428b      	cmp	r3, r1
 8002af4:	d11a      	bne.n	8002b2c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002af6:	2370      	movs	r3, #112	@ 0x70
 8002af8:	4013      	ands	r3, r2
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002afa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8002afc:	428b      	cmp	r3, r1
 8002afe:	d115      	bne.n	8002b2c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b00:	21fe      	movs	r1, #254	@ 0xfe
 8002b02:	01c9      	lsls	r1, r1, #7
 8002b04:	4011      	ands	r1, r2
 8002b06:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002b08:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b0a:	4299      	cmp	r1, r3
 8002b0c:	d10e      	bne.n	8002b2c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b0e:	23f8      	movs	r3, #248	@ 0xf8
 8002b10:	039b      	lsls	r3, r3, #14
 8002b12:	4013      	ands	r3, r2
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b14:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8002b16:	428b      	cmp	r3, r1
 8002b18:	d108      	bne.n	8002b2c <HAL_RCC_OscConfig+0x490>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b1a:	0f53      	lsrs	r3, r2, #29
 8002b1c:	075b      	lsls	r3, r3, #29
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b1e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8002b20:	1a9b      	subs	r3, r3, r2
 8002b22:	1e5a      	subs	r2, r3, #1
 8002b24:	4193      	sbcs	r3, r2
 8002b26:	b2d8      	uxtb	r0, r3
 8002b28:	e000      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
    return HAL_ERROR;
 8002b2a:	2001      	movs	r0, #1
}
 8002b2c:	b003      	add	sp, #12
 8002b2e:	bcc0      	pop	{r6, r7}
 8002b30:	46b9      	mov	r9, r7
 8002b32:	46b0      	mov	r8, r6
 8002b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
        return HAL_ERROR;
 8002b36:	2001      	movs	r0, #1
 8002b38:	e7f8      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
          return HAL_ERROR;
 8002b3a:	2001      	movs	r0, #1
 8002b3c:	e7f6      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8002b3e:	2001      	movs	r0, #1
 8002b40:	e7f4      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8002b42:	2001      	movs	r0, #1
 8002b44:	e7f2      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        return HAL_ERROR;
 8002b46:	2001      	movs	r0, #1
 8002b48:	e7f0      	b.n	8002b2c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b4a:	4913      	ldr	r1, [pc, #76]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002b4c:	684a      	ldr	r2, [r1, #4]
 8002b4e:	6963      	ldr	r3, [r4, #20]
 8002b50:	021b      	lsls	r3, r3, #8
 8002b52:	4816      	ldr	r0, [pc, #88]	@ (8002bac <HAL_RCC_OscConfig+0x510>)
 8002b54:	4002      	ands	r2, r0
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5a:	e60a      	b.n	8002772 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	055b      	lsls	r3, r3, #21
 8002b62:	d5f2      	bpl.n	8002b4a <HAL_RCC_OscConfig+0x4ae>
 8002b64:	68e3      	ldr	r3, [r4, #12]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ed      	beq.n	8002b46 <HAL_RCC_OscConfig+0x4aa>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b6a:	490b      	ldr	r1, [pc, #44]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002b6c:	684a      	ldr	r2, [r1, #4]
 8002b6e:	6963      	ldr	r3, [r4, #20]
 8002b70:	021b      	lsls	r3, r3, #8
 8002b72:	480e      	ldr	r0, [pc, #56]	@ (8002bac <HAL_RCC_OscConfig+0x510>)
 8002b74:	4002      	ands	r2, r0
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b7a:	e5fa      	b.n	8002772 <HAL_RCC_OscConfig+0xd6>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b7c:	68e3      	ldr	r3, [r4, #12]
        return HAL_ERROR;
 8002b7e:	2001      	movs	r0, #1
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0d3      	beq.n	8002b2c <HAL_RCC_OscConfig+0x490>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b84:	4904      	ldr	r1, [pc, #16]	@ (8002b98 <HAL_RCC_OscConfig+0x4fc>)
 8002b86:	684a      	ldr	r2, [r1, #4]
 8002b88:	6963      	ldr	r3, [r4, #20]
 8002b8a:	021b      	lsls	r3, r3, #8
 8002b8c:	4807      	ldr	r0, [pc, #28]	@ (8002bac <HAL_RCC_OscConfig+0x510>)
 8002b8e:	4002      	ands	r2, r0
 8002b90:	4313      	orrs	r3, r2
 8002b92:	604b      	str	r3, [r1, #4]
        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b94:	e5df      	b.n	8002756 <HAL_RCC_OscConfig+0xba>
 8002b96:	46c0      	nop			@ (mov r8, r8)
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	feffffff 	.word	0xfeffffff
 8002ba0:	efffffff 	.word	0xefffffff
 8002ba4:	1fc1808c 	.word	0x1fc1808c
 8002ba8:	effefffc 	.word	0xeffefffc
 8002bac:	ffff80ff 	.word	0xffff80ff

08002bb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bb0:	b510      	push	{r4, lr}
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002bb2:	4b29      	ldr	r3, [pc, #164]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2238      	movs	r2, #56	@ 0x38
 8002bb8:	421a      	tst	r2, r3
 8002bba:	d106      	bne.n	8002bca <HAL_RCC_GetSysClockFreq+0x1a>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002bbc:	4b26      	ldr	r3, [pc, #152]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	049b      	lsls	r3, r3, #18
 8002bc2:	0f5b      	lsrs	r3, r3, #29

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002bc4:	4825      	ldr	r0, [pc, #148]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xac>)
 8002bc6:	40d8      	lsrs	r0, r3
  {
    sysclockfreq = 0U;
  }

  return sysclockfreq;
}
 8002bc8:	bd10      	pop	{r4, pc}
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bca:	4b23      	ldr	r3, [pc, #140]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002bcc:	689a      	ldr	r2, [r3, #8]
 8002bce:	2338      	movs	r3, #56	@ 0x38
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	2b08      	cmp	r3, #8
 8002bd4:	d03a      	beq.n	8002c4c <HAL_RCC_GetSysClockFreq+0x9c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002bd6:	4b20      	ldr	r3, [pc, #128]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002bd8:	689a      	ldr	r2, [r3, #8]
 8002bda:	2338      	movs	r3, #56	@ 0x38
 8002bdc:	4013      	ands	r3, r2
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d014      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x5c>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002be2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002be4:	689a      	ldr	r2, [r3, #8]
 8002be6:	2338      	movs	r3, #56	@ 0x38
 8002be8:	4013      	ands	r3, r2
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d030      	beq.n	8002c50 <HAL_RCC_GetSysClockFreq+0xa0>
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002bee:	4b1a      	ldr	r3, [pc, #104]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	2038      	movs	r0, #56	@ 0x38
 8002bf4:	4018      	ands	r0, r3
    sysclockfreq = LSI_VALUE;
 8002bf6:	3818      	subs	r0, #24
 8002bf8:	1e43      	subs	r3, r0, #1
 8002bfa:	4198      	sbcs	r0, r3
 8002bfc:	4240      	negs	r0, r0
 8002bfe:	4b18      	ldr	r3, [pc, #96]	@ (8002c60 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002c00:	4018      	ands	r0, r3
 8002c02:	23fa      	movs	r3, #250	@ 0xfa
 8002c04:	01db      	lsls	r3, r3, #7
 8002c06:	469c      	mov	ip, r3
 8002c08:	4460      	add	r0, ip
 8002c0a:	e7dd      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x18>
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c0c:	4a12      	ldr	r2, [pc, #72]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c0e:	68d3      	ldr	r3, [r2, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c10:	68d1      	ldr	r1, [r2, #12]
 8002c12:	0649      	lsls	r1, r1, #25
 8002c14:	0f49      	lsrs	r1, r1, #29
 8002c16:	3101      	adds	r1, #1
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002c18:	43db      	mvns	r3, r3
    switch (pllsource)
 8002c1a:	079b      	lsls	r3, r3, #30
 8002c1c:	d00e      	beq.n	8002c3c <HAL_RCC_GetSysClockFreq+0x8c>
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002c1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c20:	68dc      	ldr	r4, [r3, #12]
 8002c22:	0464      	lsls	r4, r4, #17
 8002c24:	0e64      	lsrs	r4, r4, #25
 8002c26:	480d      	ldr	r0, [pc, #52]	@ (8002c5c <HAL_RCC_GetSysClockFreq+0xac>)
 8002c28:	f7fd fa74 	bl	8000114 <__udivsi3>
 8002c2c:	4360      	muls	r0, r4
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c58 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002c30:	68d9      	ldr	r1, [r3, #12]
 8002c32:	0f49      	lsrs	r1, r1, #29
 8002c34:	3101      	adds	r1, #1
    sysclockfreq = pllvco / pllr;
 8002c36:	f7fd fa6d 	bl	8000114 <__udivsi3>
 8002c3a:	e7c5      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x18>
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002c3c:	68d4      	ldr	r4, [r2, #12]
 8002c3e:	0464      	lsls	r4, r4, #17
 8002c40:	0e64      	lsrs	r4, r4, #25
 8002c42:	4808      	ldr	r0, [pc, #32]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c44:	f7fd fa66 	bl	8000114 <__udivsi3>
 8002c48:	4360      	muls	r0, r4
        break;
 8002c4a:	e7f0      	b.n	8002c2e <HAL_RCC_GetSysClockFreq+0x7e>
    sysclockfreq = HSE_VALUE;
 8002c4c:	4805      	ldr	r0, [pc, #20]	@ (8002c64 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002c4e:	e7bb      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x18>
    sysclockfreq = LSE_VALUE;
 8002c50:	2080      	movs	r0, #128	@ 0x80
 8002c52:	0200      	lsls	r0, r0, #8
 8002c54:	e7b8      	b.n	8002bc8 <HAL_RCC_GetSysClockFreq+0x18>
 8002c56:	46c0      	nop			@ (mov r8, r8)
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	00f42400 	.word	0x00f42400
 8002c60:	ffff8300 	.word	0xffff8300
 8002c64:	007a1200 	.word	0x007a1200

08002c68 <HAL_RCC_ClockConfig>:
{
 8002c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c6a:	46ce      	mov	lr, r9
 8002c6c:	4647      	mov	r7, r8
 8002c6e:	b580      	push	{r7, lr}
 8002c70:	0004      	movs	r4, r0
 8002c72:	000d      	movs	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8002c74:	2800      	cmp	r0, #0
 8002c76:	d100      	bne.n	8002c7a <HAL_RCC_ClockConfig+0x12>
 8002c78:	e0b6      	b.n	8002de8 <HAL_RCC_ClockConfig+0x180>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8002df0 <HAL_RCC_ClockConfig+0x188>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	2307      	movs	r3, #7
 8002c80:	4013      	ands	r3, r2
 8002c82:	428b      	cmp	r3, r1
 8002c84:	d321      	bcc.n	8002cca <HAL_RCC_ClockConfig+0x62>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c86:	6823      	ldr	r3, [r4, #0]
 8002c88:	079a      	lsls	r2, r3, #30
 8002c8a:	d50e      	bpl.n	8002caa <HAL_RCC_ClockConfig+0x42>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c8c:	075b      	lsls	r3, r3, #29
 8002c8e:	d505      	bpl.n	8002c9c <HAL_RCC_ClockConfig+0x34>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c90:	4a58      	ldr	r2, [pc, #352]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002c92:	6891      	ldr	r1, [r2, #8]
 8002c94:	23e0      	movs	r3, #224	@ 0xe0
 8002c96:	01db      	lsls	r3, r3, #7
 8002c98:	430b      	orrs	r3, r1
 8002c9a:	6093      	str	r3, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c9c:	4a55      	ldr	r2, [pc, #340]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002c9e:	6893      	ldr	r3, [r2, #8]
 8002ca0:	4955      	ldr	r1, [pc, #340]	@ (8002df8 <HAL_RCC_ClockConfig+0x190>)
 8002ca2:	400b      	ands	r3, r1
 8002ca4:	68a1      	ldr	r1, [r4, #8]
 8002ca6:	430b      	orrs	r3, r1
 8002ca8:	6093      	str	r3, [r2, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002caa:	6823      	ldr	r3, [r4, #0]
 8002cac:	07db      	lsls	r3, r3, #31
 8002cae:	d55b      	bpl.n	8002d68 <HAL_RCC_ClockConfig+0x100>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cb0:	6863      	ldr	r3, [r4, #4]
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d023      	beq.n	8002cfe <HAL_RCC_ClockConfig+0x96>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cb6:	2b02      	cmp	r3, #2
 8002cb8:	d042      	beq.n	8002d40 <HAL_RCC_ClockConfig+0xd8>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d146      	bne.n	8002d4c <HAL_RCC_ClockConfig+0xe4>
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002cbe:	4a4d      	ldr	r2, [pc, #308]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002cc0:	6812      	ldr	r2, [r2, #0]
 8002cc2:	0552      	lsls	r2, r2, #21
 8002cc4:	d420      	bmi.n	8002d08 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8002cc6:	2001      	movs	r0, #1
 8002cc8:	e070      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cca:	4a49      	ldr	r2, [pc, #292]	@ (8002df0 <HAL_RCC_ClockConfig+0x188>)
 8002ccc:	6813      	ldr	r3, [r2, #0]
 8002cce:	2107      	movs	r1, #7
 8002cd0:	438b      	bics	r3, r1
 8002cd2:	432b      	orrs	r3, r5
 8002cd4:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002cd6:	f7fe fe09 	bl	80018ec <HAL_GetTick>
 8002cda:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002cdc:	4b44      	ldr	r3, [pc, #272]	@ (8002df0 <HAL_RCC_ClockConfig+0x188>)
 8002cde:	4698      	mov	r8, r3
 8002ce0:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ce2:	4b46      	ldr	r3, [pc, #280]	@ (8002dfc <HAL_RCC_ClockConfig+0x194>)
 8002ce4:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002ce6:	4643      	mov	r3, r8
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	403b      	ands	r3, r7
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	d0ca      	beq.n	8002c86 <HAL_RCC_ClockConfig+0x1e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cf0:	f7fe fdfc 	bl	80018ec <HAL_GetTick>
 8002cf4:	1b80      	subs	r0, r0, r6
 8002cf6:	4548      	cmp	r0, r9
 8002cf8:	d9f5      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x7e>
        return HAL_TIMEOUT;
 8002cfa:	2003      	movs	r0, #3
 8002cfc:	e056      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002cfe:	4a3d      	ldr	r2, [pc, #244]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d00:	6812      	ldr	r2, [r2, #0]
 8002d02:	0392      	lsls	r2, r2, #14
 8002d04:	d400      	bmi.n	8002d08 <HAL_RCC_ClockConfig+0xa0>
 8002d06:	e071      	b.n	8002dec <HAL_RCC_ClockConfig+0x184>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d08:	493a      	ldr	r1, [pc, #232]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d0a:	688a      	ldr	r2, [r1, #8]
 8002d0c:	2007      	movs	r0, #7
 8002d0e:	4382      	bics	r2, r0
 8002d10:	4313      	orrs	r3, r2
 8002d12:	608b      	str	r3, [r1, #8]
    tickstart = HAL_GetTick();
 8002d14:	f7fe fdea 	bl	80018ec <HAL_GetTick>
 8002d18:	0006      	movs	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b36      	ldr	r3, [pc, #216]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d1c:	4698      	mov	r8, r3
 8002d1e:	2738      	movs	r7, #56	@ 0x38
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d20:	4b36      	ldr	r3, [pc, #216]	@ (8002dfc <HAL_RCC_ClockConfig+0x194>)
 8002d22:	4699      	mov	r9, r3
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d24:	4643      	mov	r3, r8
 8002d26:	689a      	ldr	r2, [r3, #8]
 8002d28:	403a      	ands	r2, r7
 8002d2a:	6863      	ldr	r3, [r4, #4]
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	429a      	cmp	r2, r3
 8002d30:	d01a      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x100>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d32:	f7fe fddb 	bl	80018ec <HAL_GetTick>
 8002d36:	1b80      	subs	r0, r0, r6
 8002d38:	4548      	cmp	r0, r9
 8002d3a:	d9f3      	bls.n	8002d24 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 8002d3c:	2003      	movs	r0, #3
 8002d3e:	e035      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002d40:	4a2c      	ldr	r2, [pc, #176]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	0192      	lsls	r2, r2, #6
 8002d46:	d4df      	bmi.n	8002d08 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8002d48:	2001      	movs	r0, #1
 8002d4a:	e02f      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002d4c:	2b03      	cmp	r3, #3
 8002d4e:	d005      	beq.n	8002d5c <HAL_RCC_ClockConfig+0xf4>
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d50:	4a28      	ldr	r2, [pc, #160]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d52:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d54:	0792      	lsls	r2, r2, #30
 8002d56:	d4d7      	bmi.n	8002d08 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8002d58:	2001      	movs	r0, #1
 8002d5a:	e027      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002d5c:	4a25      	ldr	r2, [pc, #148]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d5e:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002d60:	0792      	lsls	r2, r2, #30
 8002d62:	d4d1      	bmi.n	8002d08 <HAL_RCC_ClockConfig+0xa0>
        return HAL_ERROR;
 8002d64:	2001      	movs	r0, #1
 8002d66:	e021      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <HAL_RCC_ClockConfig+0x188>)
 8002d6a:	681a      	ldr	r2, [r3, #0]
 8002d6c:	2307      	movs	r3, #7
 8002d6e:	4013      	ands	r3, r2
 8002d70:	42ab      	cmp	r3, r5
 8002d72:	d81f      	bhi.n	8002db4 <HAL_RCC_ClockConfig+0x14c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d74:	6823      	ldr	r3, [r4, #0]
 8002d76:	075b      	lsls	r3, r3, #29
 8002d78:	d506      	bpl.n	8002d88 <HAL_RCC_ClockConfig+0x120>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d7c:	6893      	ldr	r3, [r2, #8]
 8002d7e:	4920      	ldr	r1, [pc, #128]	@ (8002e00 <HAL_RCC_ClockConfig+0x198>)
 8002d80:	400b      	ands	r3, r1
 8002d82:	68e1      	ldr	r1, [r4, #12]
 8002d84:	430b      	orrs	r3, r1
 8002d86:	6093      	str	r3, [r2, #8]
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d88:	f7ff ff12 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8002d8c:	4b19      	ldr	r3, [pc, #100]	@ (8002df4 <HAL_RCC_ClockConfig+0x18c>)
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	491c      	ldr	r1, [pc, #112]	@ (8002e04 <HAL_RCC_ClockConfig+0x19c>)
 8002d92:	4a1d      	ldr	r2, [pc, #116]	@ (8002e08 <HAL_RCC_ClockConfig+0x1a0>)
 8002d94:	051b      	lsls	r3, r3, #20
 8002d96:	0f1b      	lsrs	r3, r3, #28
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	589b      	ldr	r3, [r3, r2]
 8002d9c:	221f      	movs	r2, #31
 8002d9e:	4013      	ands	r3, r2
 8002da0:	40d8      	lsrs	r0, r3
 8002da2:	6008      	str	r0, [r1, #0]
  return HAL_InitTick(uwTickPrio);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_RCC_ClockConfig+0x1a4>)
 8002da6:	6818      	ldr	r0, [r3, #0]
 8002da8:	f7fe fd58 	bl	800185c <HAL_InitTick>
}
 8002dac:	bcc0      	pop	{r6, r7}
 8002dae:	46b9      	mov	r9, r7
 8002db0:	46b0      	mov	r8, r6
 8002db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002db4:	4a0e      	ldr	r2, [pc, #56]	@ (8002df0 <HAL_RCC_ClockConfig+0x188>)
 8002db6:	6813      	ldr	r3, [r2, #0]
 8002db8:	2107      	movs	r1, #7
 8002dba:	438b      	bics	r3, r1
 8002dbc:	432b      	orrs	r3, r5
 8002dbe:	6013      	str	r3, [r2, #0]
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fd94 	bl	80018ec <HAL_GetTick>
 8002dc4:	0006      	movs	r6, r0
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8002df0 <HAL_RCC_ClockConfig+0x188>)
 8002dc8:	4698      	mov	r8, r3
 8002dca:	2707      	movs	r7, #7
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_RCC_ClockConfig+0x194>)
 8002dce:	4699      	mov	r9, r3
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002dd0:	4643      	mov	r3, r8
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	403b      	ands	r3, r7
 8002dd6:	42ab      	cmp	r3, r5
 8002dd8:	d0cc      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x10c>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dda:	f7fe fd87 	bl	80018ec <HAL_GetTick>
 8002dde:	1b80      	subs	r0, r0, r6
 8002de0:	4548      	cmp	r0, r9
 8002de2:	d9f5      	bls.n	8002dd0 <HAL_RCC_ClockConfig+0x168>
        return HAL_TIMEOUT;
 8002de4:	2003      	movs	r0, #3
 8002de6:	e7e1      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
    return HAL_ERROR;
 8002de8:	2001      	movs	r0, #1
 8002dea:	e7df      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
        return HAL_ERROR;
 8002dec:	2001      	movs	r0, #1
 8002dee:	e7dd      	b.n	8002dac <HAL_RCC_ClockConfig+0x144>
 8002df0:	40022000 	.word	0x40022000
 8002df4:	40021000 	.word	0x40021000
 8002df8:	fffff0ff 	.word	0xfffff0ff
 8002dfc:	00001388 	.word	0x00001388
 8002e00:	ffff8fff 	.word	0xffff8fff
 8002e04:	20000000 	.word	0x20000000
 8002e08:	08006d7c 	.word	0x08006d7c
 8002e0c:	20000008 	.word	0x20000008

08002e10 <HAL_RCC_GetPCLK1Freq>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002e10:	4b06      	ldr	r3, [pc, #24]	@ (8002e2c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002e12:	689b      	ldr	r3, [r3, #8]
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8002e14:	4a06      	ldr	r2, [pc, #24]	@ (8002e30 <HAL_RCC_GetPCLK1Freq+0x20>)
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002e16:	4907      	ldr	r1, [pc, #28]	@ (8002e34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e18:	045b      	lsls	r3, r3, #17
 8002e1a:	0f5b      	lsrs	r3, r3, #29
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	585b      	ldr	r3, [r3, r1]
 8002e20:	211f      	movs	r1, #31
 8002e22:	400b      	ands	r3, r1
 8002e24:	6810      	ldr	r0, [r2, #0]
 8002e26:	40d8      	lsrs	r0, r3
}
 8002e28:	4770      	bx	lr
 8002e2a:	46c0      	nop			@ (mov r8, r8)
 8002e2c:	40021000 	.word	0x40021000
 8002e30:	20000000 	.word	0x20000000
 8002e34:	08006d5c 	.word	0x08006d5c

08002e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e3a:	46d6      	mov	lr, sl
 8002e3c:	464f      	mov	r7, r9
 8002e3e:	4646      	mov	r6, r8
 8002e40:	b5c0      	push	{r6, r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	0004      	movs	r4, r0

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e46:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e48:	2000      	movs	r0, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e4a:	039b      	lsls	r3, r3, #14
 8002e4c:	d52a      	bpl.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6c>

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e4e:	4b5c      	ldr	r3, [pc, #368]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    FlagStatus       pwrclkchanged = RESET;
 8002e52:	2200      	movs	r2, #0
 8002e54:	4692      	mov	sl, r2
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	d40b      	bmi.n	8002e72 <HAL_RCCEx_PeriphCLKConfig+0x3a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e5a:	4b59      	ldr	r3, [pc, #356]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002e5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e5e:	2180      	movs	r1, #128	@ 0x80
 8002e60:	0549      	lsls	r1, r1, #21
 8002e62:	430a      	orrs	r2, r1
 8002e64:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	400b      	ands	r3, r1
 8002e6a:	9301      	str	r3, [sp, #4]
 8002e6c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	469a      	mov	sl, r3
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e72:	4a54      	ldr	r2, [pc, #336]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e74:	6811      	ldr	r1, [r2, #0]
 8002e76:	2380      	movs	r3, #128	@ 0x80
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	430b      	orrs	r3, r1
 8002e7c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e7e:	f7fe fd35 	bl	80018ec <HAL_GetTick>
 8002e82:	0005      	movs	r5, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e84:	4f4f      	ldr	r7, [pc, #316]	@ (8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002e86:	2680      	movs	r6, #128	@ 0x80
 8002e88:	0076      	lsls	r6, r6, #1
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	4233      	tst	r3, r6
 8002e8e:	d000      	beq.n	8002e92 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 8002e90:	e084      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x164>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e92:	f7fe fd2b 	bl	80018ec <HAL_GetTick>
 8002e96:	1b40      	subs	r0, r0, r5
 8002e98:	2802      	cmp	r0, #2
 8002e9a:	d9f6      	bls.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x52>
      {
        ret = HAL_TIMEOUT;
 8002e9c:	2003      	movs	r0, #3
      /* set overall return value */
      status = ret;
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e9e:	4653      	mov	r3, sl
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d067      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea4:	6823      	ldr	r3, [r4, #0]
 8002ea6:	07db      	lsls	r3, r3, #31
 8002ea8:	d506      	bpl.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eaa:	4a45      	ldr	r2, [pc, #276]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002eac:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002eae:	2103      	movs	r1, #3
 8002eb0:	438b      	bics	r3, r1
 8002eb2:	6861      	ldr	r1, [r4, #4]
 8002eb4:	430b      	orrs	r3, r1
 8002eb6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002eb8:	6823      	ldr	r3, [r4, #0]
 8002eba:	079b      	lsls	r3, r3, #30
 8002ebc:	d506      	bpl.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x94>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ebe:	4a40      	ldr	r2, [pc, #256]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ec0:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002ec2:	210c      	movs	r1, #12
 8002ec4:	438b      	bics	r3, r1
 8002ec6:	68a1      	ldr	r1, [r4, #8]
 8002ec8:	430b      	orrs	r3, r1
 8002eca:	6553      	str	r3, [r2, #84]	@ 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ecc:	6823      	ldr	r3, [r4, #0]
 8002ece:	069b      	lsls	r3, r3, #26
 8002ed0:	d506      	bpl.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ed4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002ed6:	493c      	ldr	r1, [pc, #240]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8002ed8:	400b      	ands	r3, r1
 8002eda:	68e1      	ldr	r1, [r4, #12]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	6553      	str	r3, [r2, #84]	@ 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ee0:	6823      	ldr	r3, [r4, #0]
 8002ee2:	045b      	lsls	r3, r3, #17
 8002ee4:	d50b      	bpl.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ee6:	4a36      	ldr	r2, [pc, #216]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002ee8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002eea:	009b      	lsls	r3, r3, #2
 8002eec:	089b      	lsrs	r3, r3, #2
 8002eee:	6961      	ldr	r1, [r4, #20]
 8002ef0:	430b      	orrs	r3, r1
 8002ef2:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002ef4:	2380      	movs	r3, #128	@ 0x80
 8002ef6:	05db      	lsls	r3, r3, #23
 8002ef8:	6962      	ldr	r2, [r4, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d040      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x148>
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002efe:	6823      	ldr	r3, [r4, #0]
 8002f00:	051b      	lsls	r3, r3, #20
 8002f02:	d50b      	bpl.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002f04:	4a2e      	ldr	r2, [pc, #184]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f06:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 8002f08:	4930      	ldr	r1, [pc, #192]	@ (8002fcc <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8002f0a:	400b      	ands	r3, r1
 8002f0c:	6921      	ldr	r1, [r4, #16]
 8002f0e:	430b      	orrs	r3, r1
 8002f10:	6553      	str	r3, [r2, #84]	@ 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002f12:	2380      	movs	r3, #128	@ 0x80
 8002f14:	01db      	lsls	r3, r3, #7
 8002f16:	6922      	ldr	r2, [r4, #16]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d038      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x156>
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
}
 8002f1c:	b002      	add	sp, #8
 8002f1e:	bce0      	pop	{r5, r6, r7}
 8002f20:	46ba      	mov	sl, r7
 8002f22:	46b1      	mov	r9, r6
 8002f24:	46a8      	mov	r8, r5
 8002f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f28:	69a2      	ldr	r2, [r4, #24]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d00d      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x112>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f2e:	4a24      	ldr	r2, [pc, #144]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f30:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002f32:	4927      	ldr	r1, [pc, #156]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002f34:	400b      	ands	r3, r1
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f36:	6dd0      	ldr	r0, [r2, #92]	@ 0x5c
 8002f38:	2180      	movs	r1, #128	@ 0x80
 8002f3a:	0249      	lsls	r1, r1, #9
 8002f3c:	4301      	orrs	r1, r0
 8002f3e:	65d1      	str	r1, [r2, #92]	@ 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f40:	6dd1      	ldr	r1, [r2, #92]	@ 0x5c
 8002f42:	4824      	ldr	r0, [pc, #144]	@ (8002fd4 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
 8002f44:	4001      	ands	r1, r0
 8002f46:	65d1      	str	r1, [r2, #92]	@ 0x5c
        RCC->BDCR = tmpregister;
 8002f48:	65d3      	str	r3, [r2, #92]	@ 0x5c
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f4a:	07db      	lsls	r3, r3, #31
 8002f4c:	d52e      	bpl.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x174>
        tickstart = HAL_GetTick();
 8002f4e:	f7fe fccd 	bl	80018ec <HAL_GetTick>
 8002f52:	0005      	movs	r5, r0
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f54:	4b1a      	ldr	r3, [pc, #104]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f56:	4698      	mov	r8, r3
 8002f58:	2602      	movs	r6, #2
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f5a:	4b1f      	ldr	r3, [pc, #124]	@ (8002fd8 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8002f5c:	4699      	mov	r9, r3
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5e:	4643      	mov	r3, r8
 8002f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f62:	421e      	tst	r6, r3
 8002f64:	d122      	bne.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x174>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f66:	f7fe fcc1 	bl	80018ec <HAL_GetTick>
 8002f6a:	1b40      	subs	r0, r0, r5
 8002f6c:	4548      	cmp	r0, r9
 8002f6e:	d9f6      	bls.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x126>
            ret = HAL_TIMEOUT;
 8002f70:	2003      	movs	r0, #3
 8002f72:	e794      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4a12      	ldr	r2, [pc, #72]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f76:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8002f78:	4918      	ldr	r1, [pc, #96]	@ (8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f7a:	400b      	ands	r3, r1
 8002f7c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8002f7e:	e791      	b.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x6c>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f80:	4a0f      	ldr	r2, [pc, #60]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f82:	68d1      	ldr	r1, [r2, #12]
 8002f84:	2380      	movs	r3, #128	@ 0x80
 8002f86:	025b      	lsls	r3, r3, #9
 8002f88:	430b      	orrs	r3, r1
 8002f8a:	60d3      	str	r3, [r2, #12]
 8002f8c:	e7b7      	b.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0xc6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f90:	68d1      	ldr	r1, [r2, #12]
 8002f92:	2380      	movs	r3, #128	@ 0x80
 8002f94:	025b      	lsls	r3, r3, #9
 8002f96:	430b      	orrs	r3, r1
 8002f98:	60d3      	str	r3, [r2, #12]
  return status;
 8002f9a:	e7bf      	b.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f9c:	4b08      	ldr	r3, [pc, #32]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002f9e:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 8002fa0:	22c0      	movs	r2, #192	@ 0xc0
 8002fa2:	0092      	lsls	r2, r2, #2
 8002fa4:	000b      	movs	r3, r1
 8002fa6:	4013      	ands	r3, r2
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fa8:	4211      	tst	r1, r2
 8002faa:	d1bd      	bne.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0xf0>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fac:	4a04      	ldr	r2, [pc, #16]	@ (8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002fae:	6dd3      	ldr	r3, [r2, #92]	@ 0x5c
 8002fb0:	4907      	ldr	r1, [pc, #28]	@ (8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	69a1      	ldr	r1, [r4, #24]
 8002fb6:	430b      	orrs	r3, r1
 8002fb8:	65d3      	str	r3, [r2, #92]	@ 0x5c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002fba:	2000      	movs	r0, #0
 8002fbc:	e76f      	b.n	8002e9e <HAL_RCCEx_PeriphCLKConfig+0x66>
 8002fbe:	46c0      	nop			@ (mov r8, r8)
 8002fc0:	40021000 	.word	0x40021000
 8002fc4:	40007000 	.word	0x40007000
 8002fc8:	ffffcfff 	.word	0xffffcfff
 8002fcc:	ffff3fff 	.word	0xffff3fff
 8002fd0:	fffffcff 	.word	0xfffffcff
 8002fd4:	fffeffff 	.word	0xfffeffff
 8002fd8:	00001388 	.word	0x00001388
 8002fdc:	efffffff 	.word	0xefffffff

08002fe0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8002fe0:	b530      	push	{r4, r5, lr}
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fe2:	f3ef 8410 	mrs	r4, PRIMASK
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f382 8810 	msr	PRIMASK, r2
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8002fec:	6801      	ldr	r1, [r0, #0]
 8002fee:	680b      	ldr	r3, [r1, #0]
 8002ff0:	25c0      	movs	r5, #192	@ 0xc0
 8002ff2:	43ab      	bics	r3, r5
 8002ff4:	600b      	str	r3, [r1, #0]
 8002ff6:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ffa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ffe:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003002:	6802      	ldr	r2, [r0, #0]
 8003004:	6893      	ldr	r3, [r2, #8]
 8003006:	4c04      	ldr	r4, [pc, #16]	@ (8003018 <UART_EndTxTransfer+0x38>)
 8003008:	4023      	ands	r3, r4
 800300a:	6093      	str	r3, [r2, #8]
 800300c:	f381 8810 	msr	PRIMASK, r1

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003010:	2388      	movs	r3, #136	@ 0x88
 8003012:	2220      	movs	r2, #32
 8003014:	50c2      	str	r2, [r0, r3]
}
 8003016:	bd30      	pop	{r4, r5, pc}
 8003018:	ff7fffff 	.word	0xff7fffff

0800301c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800301c:	b530      	push	{r4, r5, lr}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800301e:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003022:	2201      	movs	r2, #1
 8003024:	f382 8810 	msr	PRIMASK, r2
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003028:	6801      	ldr	r1, [r0, #0]
 800302a:	680b      	ldr	r3, [r1, #0]
 800302c:	4d12      	ldr	r5, [pc, #72]	@ (8003078 <UART_EndRxTransfer+0x5c>)
 800302e:	402b      	ands	r3, r5
 8003030:	600b      	str	r3, [r1, #0]
 8003032:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003036:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303a:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800303e:	6802      	ldr	r2, [r0, #0]
 8003040:	6893      	ldr	r3, [r2, #8]
 8003042:	4c0e      	ldr	r4, [pc, #56]	@ (800307c <UART_EndRxTransfer+0x60>)
 8003044:	4023      	ands	r3, r4
 8003046:	6093      	str	r3, [r2, #8]
 8003048:	f381 8810 	msr	PRIMASK, r1

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800304c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800304e:	2b01      	cmp	r3, #1
 8003050:	d006      	beq.n	8003060 <UART_EndRxTransfer+0x44>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003052:	238c      	movs	r3, #140	@ 0x8c
 8003054:	2220      	movs	r2, #32
 8003056:	50c2      	str	r2, [r0, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003058:	2300      	movs	r3, #0
 800305a:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800305c:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800305e:	bd30      	pop	{r4, r5, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003060:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003064:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003068:	6802      	ldr	r2, [r0, #0]
 800306a:	6813      	ldr	r3, [r2, #0]
 800306c:	2410      	movs	r4, #16
 800306e:	43a3      	bics	r3, r4
 8003070:	6013      	str	r3, [r2, #0]
 8003072:	f381 8810 	msr	PRIMASK, r1
}
 8003076:	e7ec      	b.n	8003052 <UART_EndRxTransfer+0x36>
 8003078:	fffffedf 	.word	0xfffffedf
 800307c:	effffffe 	.word	0xeffffffe

08003080 <HAL_UART_Transmit_DMA>:
{
 8003080:	b510      	push	{r4, lr}
 8003082:	0004      	movs	r4, r0
 8003084:	0013      	movs	r3, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003086:	2288      	movs	r2, #136	@ 0x88
 8003088:	5882      	ldr	r2, [r0, r2]
 800308a:	2a20      	cmp	r2, #32
 800308c:	d149      	bne.n	8003122 <HAL_UART_Transmit_DMA+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800308e:	2900      	cmp	r1, #0
 8003090:	d049      	beq.n	8003126 <HAL_UART_Transmit_DMA+0xa6>
 8003092:	2b00      	cmp	r3, #0
 8003094:	d049      	beq.n	800312a <HAL_UART_Transmit_DMA+0xaa>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003096:	2280      	movs	r2, #128	@ 0x80
 8003098:	0152      	lsls	r2, r2, #5
 800309a:	6880      	ldr	r0, [r0, #8]
 800309c:	4290      	cmp	r0, r2
 800309e:	d028      	beq.n	80030f2 <HAL_UART_Transmit_DMA+0x72>
    huart->pTxBuffPtr  = pData;
 80030a0:	6521      	str	r1, [r4, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80030a2:	2254      	movs	r2, #84	@ 0x54
 80030a4:	52a3      	strh	r3, [r4, r2]
    huart->TxXferCount = Size;
 80030a6:	3202      	adds	r2, #2
 80030a8:	52a3      	strh	r3, [r4, r2]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030aa:	323a      	adds	r2, #58	@ 0x3a
 80030ac:	2100      	movs	r1, #0
 80030ae:	50a1      	str	r1, [r4, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030b0:	3a08      	subs	r2, #8
 80030b2:	3121      	adds	r1, #33	@ 0x21
 80030b4:	50a1      	str	r1, [r4, r2]
    if (huart->hdmatx != NULL)
 80030b6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80030b8:	2a00      	cmp	r2, #0
 80030ba:	d021      	beq.n	8003100 <HAL_UART_Transmit_DMA+0x80>
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80030bc:	491c      	ldr	r1, [pc, #112]	@ (8003130 <HAL_UART_Transmit_DMA+0xb0>)
 80030be:	62d1      	str	r1, [r2, #44]	@ 0x2c
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80030c0:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80030c2:	491c      	ldr	r1, [pc, #112]	@ (8003134 <HAL_UART_Transmit_DMA+0xb4>)
 80030c4:	6311      	str	r1, [r2, #48]	@ 0x30
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80030c6:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80030c8:	491b      	ldr	r1, [pc, #108]	@ (8003138 <HAL_UART_Transmit_DMA+0xb8>)
 80030ca:	6351      	str	r1, [r2, #52]	@ 0x34
      huart->hdmatx->XferAbortCallback = NULL;
 80030cc:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 80030ce:	2100      	movs	r1, #0
 80030d0:	6391      	str	r1, [r2, #56]	@ 0x38
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80030d2:	6822      	ldr	r2, [r4, #0]
 80030d4:	3228      	adds	r2, #40	@ 0x28
 80030d6:	6d21      	ldr	r1, [r4, #80]	@ 0x50
 80030d8:	6fe0      	ldr	r0, [r4, #124]	@ 0x7c
 80030da:	f7ff f88b 	bl	80021f4 <HAL_DMA_Start_IT>
 80030de:	2800      	cmp	r0, #0
 80030e0:	d00e      	beq.n	8003100 <HAL_UART_Transmit_DMA+0x80>
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80030e2:	2390      	movs	r3, #144	@ 0x90
 80030e4:	2210      	movs	r2, #16
 80030e6:	50e2      	str	r2, [r4, r3]
        huart->gState = HAL_UART_STATE_READY;
 80030e8:	3b08      	subs	r3, #8
 80030ea:	3210      	adds	r2, #16
 80030ec:	50e2      	str	r2, [r4, r3]
        return HAL_ERROR;
 80030ee:	2001      	movs	r0, #1
 80030f0:	e018      	b.n	8003124 <HAL_UART_Transmit_DMA+0xa4>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030f2:	6922      	ldr	r2, [r4, #16]
 80030f4:	2a00      	cmp	r2, #0
 80030f6:	d1d3      	bne.n	80030a0 <HAL_UART_Transmit_DMA+0x20>
      if ((((uint32_t)pData) & 1U) != 0U)
 80030f8:	07ca      	lsls	r2, r1, #31
 80030fa:	d5d1      	bpl.n	80030a0 <HAL_UART_Transmit_DMA+0x20>
        return  HAL_ERROR;
 80030fc:	2001      	movs	r0, #1
 80030fe:	e011      	b.n	8003124 <HAL_UART_Transmit_DMA+0xa4>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8003100:	6823      	ldr	r3, [r4, #0]
 8003102:	2240      	movs	r2, #64	@ 0x40
 8003104:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003106:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800310a:	2301      	movs	r3, #1
 800310c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003110:	6822      	ldr	r2, [r4, #0]
 8003112:	6893      	ldr	r3, [r2, #8]
 8003114:	2080      	movs	r0, #128	@ 0x80
 8003116:	4303      	orrs	r3, r0
 8003118:	6093      	str	r3, [r2, #8]
 800311a:	f381 8810 	msr	PRIMASK, r1
    return HAL_OK;
 800311e:	2000      	movs	r0, #0
 8003120:	e000      	b.n	8003124 <HAL_UART_Transmit_DMA+0xa4>
    return HAL_BUSY;
 8003122:	2002      	movs	r0, #2
}
 8003124:	bd10      	pop	{r4, pc}
      return HAL_ERROR;
 8003126:	2001      	movs	r0, #1
 8003128:	e7fc      	b.n	8003124 <HAL_UART_Transmit_DMA+0xa4>
 800312a:	2001      	movs	r0, #1
 800312c:	e7fa      	b.n	8003124 <HAL_UART_Transmit_DMA+0xa4>
 800312e:	46c0      	nop			@ (mov r8, r8)
 8003130:	08003205 	.word	0x08003205
 8003134:	08003251 	.word	0x08003251
 8003138:	0800325d 	.word	0x0800325d

0800313c <HAL_UART_AbortReceive>:
{
 800313c:	b570      	push	{r4, r5, r6, lr}
 800313e:	0004      	movs	r4, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003140:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003144:	2201      	movs	r2, #1
 8003146:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE));
 800314a:	6821      	ldr	r1, [r4, #0]
 800314c:	680b      	ldr	r3, [r1, #0]
 800314e:	4d2b      	ldr	r5, [pc, #172]	@ (80031fc <HAL_UART_AbortReceive+0xc0>)
 8003150:	402b      	ands	r3, r5
 8003152:	600b      	str	r3, [r1, #0]
 8003154:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003158:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800315c:	f382 8810 	msr	PRIMASK, r2
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE | USART_CR3_RXFTIE);
 8003160:	6822      	ldr	r2, [r4, #0]
 8003162:	6893      	ldr	r3, [r2, #8]
 8003164:	4826      	ldr	r0, [pc, #152]	@ (8003200 <HAL_UART_AbortReceive+0xc4>)
 8003166:	4003      	ands	r3, r0
 8003168:	6093      	str	r3, [r2, #8]
 800316a:	f381 8810 	msr	PRIMASK, r1
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800316e:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
 8003170:	2b01      	cmp	r3, #1
 8003172:	d02c      	beq.n	80031ce <HAL_UART_AbortReceive+0x92>
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003174:	6823      	ldr	r3, [r4, #0]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	065b      	lsls	r3, r3, #25
 800317a:	d517      	bpl.n	80031ac <HAL_UART_AbortReceive+0x70>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800317c:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	2301      	movs	r3, #1
 8003182:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003186:	6822      	ldr	r2, [r4, #0]
 8003188:	6893      	ldr	r3, [r2, #8]
 800318a:	2040      	movs	r0, #64	@ 0x40
 800318c:	4383      	bics	r3, r0
 800318e:	6093      	str	r3, [r2, #8]
 8003190:	f381 8810 	msr	PRIMASK, r1
    if (huart->hdmarx != NULL)
 8003194:	2380      	movs	r3, #128	@ 0x80
 8003196:	58e3      	ldr	r3, [r4, r3]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d007      	beq.n	80031ac <HAL_UART_AbortReceive+0x70>
      huart->hdmarx->XferAbortCallback = NULL;
 800319c:	2200      	movs	r2, #0
 800319e:	639a      	str	r2, [r3, #56]	@ 0x38
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80031a0:	2380      	movs	r3, #128	@ 0x80
 80031a2:	58e0      	ldr	r0, [r4, r3]
 80031a4:	f7ff f874 	bl	8002290 <HAL_DMA_Abort>
 80031a8:	2800      	cmp	r0, #0
 80031aa:	d11c      	bne.n	80031e6 <HAL_UART_AbortReceive+0xaa>
  huart->RxXferCount = 0U;
 80031ac:	2200      	movs	r2, #0
 80031ae:	235e      	movs	r3, #94	@ 0x5e
 80031b0:	52e2      	strh	r2, [r4, r3]
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80031b2:	6823      	ldr	r3, [r4, #0]
 80031b4:	210f      	movs	r1, #15
 80031b6:	6219      	str	r1, [r3, #32]
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80031b8:	6821      	ldr	r1, [r4, #0]
 80031ba:	698b      	ldr	r3, [r1, #24]
 80031bc:	2008      	movs	r0, #8
 80031be:	4303      	orrs	r3, r0
 80031c0:	618b      	str	r3, [r1, #24]
  huart->RxState = HAL_UART_STATE_READY;
 80031c2:	238c      	movs	r3, #140	@ 0x8c
 80031c4:	2120      	movs	r1, #32
 80031c6:	50e1      	str	r1, [r4, r3]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031c8:	66e2      	str	r2, [r4, #108]	@ 0x6c
  return HAL_OK;
 80031ca:	2000      	movs	r0, #0
}
 80031cc:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031ce:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031d2:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80031d6:	6822      	ldr	r2, [r4, #0]
 80031d8:	6813      	ldr	r3, [r2, #0]
 80031da:	2010      	movs	r0, #16
 80031dc:	4383      	bics	r3, r0
 80031de:	6013      	str	r3, [r2, #0]
 80031e0:	f381 8810 	msr	PRIMASK, r1
}
 80031e4:	e7c6      	b.n	8003174 <HAL_UART_AbortReceive+0x38>
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80031e6:	2380      	movs	r3, #128	@ 0x80
 80031e8:	58e0      	ldr	r0, [r4, r3]
 80031ea:	f7ff f937 	bl	800245c <HAL_DMA_GetError>
 80031ee:	2820      	cmp	r0, #32
 80031f0:	d1dc      	bne.n	80031ac <HAL_UART_AbortReceive+0x70>
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80031f2:	2390      	movs	r3, #144	@ 0x90
 80031f4:	2210      	movs	r2, #16
 80031f6:	50e2      	str	r2, [r4, r3]
          return HAL_TIMEOUT;
 80031f8:	381d      	subs	r0, #29
 80031fa:	e7e7      	b.n	80031cc <HAL_UART_AbortReceive+0x90>
 80031fc:	fffffedf 	.word	0xfffffedf
 8003200:	effffffe 	.word	0xeffffffe

08003204 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003204:	b510      	push	{r4, lr}
 8003206:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003208:	6a80      	ldr	r0, [r0, #40]	@ 0x28

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	069b      	lsls	r3, r3, #26
 8003210:	d41a      	bmi.n	8003248 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0U;
 8003212:	2356      	movs	r3, #86	@ 0x56
 8003214:	2200      	movs	r2, #0
 8003216:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003218:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800321c:	3201      	adds	r2, #1
 800321e:	f382 8810 	msr	PRIMASK, r2

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8003222:	6801      	ldr	r1, [r0, #0]
 8003224:	688b      	ldr	r3, [r1, #8]
 8003226:	2480      	movs	r4, #128	@ 0x80
 8003228:	43a3      	bics	r3, r4
 800322a:	608b      	str	r3, [r1, #8]
 800322c:	f38c 8810 	msr	PRIMASK, ip
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003230:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003234:	f382 8810 	msr	PRIMASK, r2

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003238:	6802      	ldr	r2, [r0, #0]
 800323a:	6813      	ldr	r3, [r2, #0]
 800323c:	2040      	movs	r0, #64	@ 0x40
 800323e:	4303      	orrs	r3, r0
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	f381 8810 	msr	PRIMASK, r1
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003246:	bd10      	pop	{r4, pc}
    HAL_UART_TxCpltCallback(huart);
 8003248:	f002 fa3e 	bl	80056c8 <HAL_UART_TxCpltCallback>
}
 800324c:	e7fb      	b.n	8003246 <UART_DMATransmitCplt+0x42>

0800324e <HAL_UART_TxHalfCpltCallback>:
}
 800324e:	4770      	bx	lr

08003250 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003250:	b510      	push	{r4, lr}
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003252:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8003254:	f7ff fffb 	bl	800324e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003258:	bd10      	pop	{r4, pc}

0800325a <HAL_UART_RxHalfCpltCallback>:
}
 800325a:	4770      	bx	lr

0800325c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800325c:	b570      	push	{r4, r5, r6, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800325e:	6a84      	ldr	r4, [r0, #40]	@ 0x28

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003260:	2388      	movs	r3, #136	@ 0x88
 8003262:	58e2      	ldr	r2, [r4, r3]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8003264:	3304      	adds	r3, #4
 8003266:	58e5      	ldr	r5, [r4, r3]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003268:	6823      	ldr	r3, [r4, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	d501      	bpl.n	8003274 <UART_DMAError+0x18>
 8003270:	2a21      	cmp	r2, #33	@ 0x21
 8003272:	d00e      	beq.n	8003292 <UART_DMAError+0x36>
    huart->TxXferCount = 0U;
    UART_EndTxTransfer(huart);
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003274:	6823      	ldr	r3, [r4, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	065b      	lsls	r3, r3, #25
 800327a:	d501      	bpl.n	8003280 <UART_DMAError+0x24>
 800327c:	2d22      	cmp	r5, #34	@ 0x22
 800327e:	d00f      	beq.n	80032a0 <UART_DMAError+0x44>
  {
    huart->RxXferCount = 0U;
    UART_EndRxTransfer(huart);
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003280:	2290      	movs	r2, #144	@ 0x90
 8003282:	58a3      	ldr	r3, [r4, r2]
 8003284:	2110      	movs	r1, #16
 8003286:	430b      	orrs	r3, r1
 8003288:	50a3      	str	r3, [r4, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800328a:	0020      	movs	r0, r4
 800328c:	f002 fa2c 	bl	80056e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003290:	bd70      	pop	{r4, r5, r6, pc}
    huart->TxXferCount = 0U;
 8003292:	2356      	movs	r3, #86	@ 0x56
 8003294:	2200      	movs	r2, #0
 8003296:	52e2      	strh	r2, [r4, r3]
    UART_EndTxTransfer(huart);
 8003298:	0020      	movs	r0, r4
 800329a:	f7ff fea1 	bl	8002fe0 <UART_EndTxTransfer>
 800329e:	e7e9      	b.n	8003274 <UART_DMAError+0x18>
    huart->RxXferCount = 0U;
 80032a0:	235e      	movs	r3, #94	@ 0x5e
 80032a2:	2200      	movs	r2, #0
 80032a4:	52e2      	strh	r2, [r4, r3]
    UART_EndRxTransfer(huart);
 80032a6:	0020      	movs	r0, r4
 80032a8:	f7ff feb8 	bl	800301c <UART_EndRxTransfer>
 80032ac:	e7e8      	b.n	8003280 <UART_DMAError+0x24>

080032ae <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80032ae:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80032b0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxXferCount = 0U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	225e      	movs	r2, #94	@ 0x5e
 80032b6:	5283      	strh	r3, [r0, r2]
  huart->TxXferCount = 0U;
 80032b8:	3a08      	subs	r2, #8
 80032ba:	5283      	strh	r3, [r0, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80032bc:	f002 fa14 	bl	80056e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80032c0:	bd10      	pop	{r4, pc}

080032c2 <HAL_UARTEx_RxEventCallback>:
}
 80032c2:	4770      	bx	lr

080032c4 <HAL_UART_IRQHandler>:
{
 80032c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032c6:	0004      	movs	r4, r0
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80032c8:	6802      	ldr	r2, [r0, #0]
 80032ca:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80032cc:	6811      	ldr	r1, [r2, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80032ce:	6890      	ldr	r0, [r2, #8]
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80032d0:	4dbb      	ldr	r5, [pc, #748]	@ (80035c0 <HAL_UART_IRQHandler+0x2fc>)
  if (errorflags == 0U)
 80032d2:	422b      	tst	r3, r5
 80032d4:	d10e      	bne.n	80032f4 <HAL_UART_IRQHandler+0x30>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80032d6:	069d      	lsls	r5, r3, #26
 80032d8:	d512      	bpl.n	8003300 <HAL_UART_IRQHandler+0x3c>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80032da:	2520      	movs	r5, #32
 80032dc:	400d      	ands	r5, r1
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80032de:	2680      	movs	r6, #128	@ 0x80
 80032e0:	0576      	lsls	r6, r6, #21
 80032e2:	4006      	ands	r6, r0
 80032e4:	4335      	orrs	r5, r6
 80032e6:	d00b      	beq.n	8003300 <HAL_UART_IRQHandler+0x3c>
      if (huart->RxISR != NULL)
 80032e8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02a      	beq.n	8003344 <HAL_UART_IRQHandler+0x80>
        huart->RxISR(huart);
 80032ee:	0020      	movs	r0, r4
 80032f0:	4798      	blx	r3
 80032f2:	e027      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80032f4:	4eb3      	ldr	r6, [pc, #716]	@ (80035c4 <HAL_UART_IRQHandler+0x300>)
 80032f6:	4006      	ands	r6, r0
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80032f8:	4db3      	ldr	r5, [pc, #716]	@ (80035c8 <HAL_UART_IRQHandler+0x304>)
 80032fa:	400d      	ands	r5, r1
 80032fc:	4335      	orrs	r5, r6
 80032fe:	d122      	bne.n	8003346 <HAL_UART_IRQHandler+0x82>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003300:	6ee5      	ldr	r5, [r4, #108]	@ 0x6c
 8003302:	2d01      	cmp	r5, #1
 8003304:	d100      	bne.n	8003308 <HAL_UART_IRQHandler+0x44>
 8003306:	e0ad      	b.n	8003464 <HAL_UART_IRQHandler+0x1a0>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003308:	02dd      	lsls	r5, r3, #11
 800330a:	d502      	bpl.n	8003312 <HAL_UART_IRQHandler+0x4e>
 800330c:	0245      	lsls	r5, r0, #9
 800330e:	d500      	bpl.n	8003312 <HAL_UART_IRQHandler+0x4e>
 8003310:	e147      	b.n	80035a2 <HAL_UART_IRQHandler+0x2de>
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003312:	061a      	lsls	r2, r3, #24
 8003314:	d507      	bpl.n	8003326 <HAL_UART_IRQHandler+0x62>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003316:	2280      	movs	r2, #128	@ 0x80
 8003318:	400a      	ands	r2, r1
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800331a:	2580      	movs	r5, #128	@ 0x80
 800331c:	042d      	lsls	r5, r5, #16
 800331e:	4028      	ands	r0, r5
 8003320:	4302      	orrs	r2, r0
 8003322:	d000      	beq.n	8003326 <HAL_UART_IRQHandler+0x62>
 8003324:	e144      	b.n	80035b0 <HAL_UART_IRQHandler+0x2ec>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003326:	065a      	lsls	r2, r3, #25
 8003328:	d502      	bpl.n	8003330 <HAL_UART_IRQHandler+0x6c>
 800332a:	064a      	lsls	r2, r1, #25
 800332c:	d500      	bpl.n	8003330 <HAL_UART_IRQHandler+0x6c>
 800332e:	e155      	b.n	80035dc <HAL_UART_IRQHandler+0x318>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003330:	021a      	lsls	r2, r3, #8
 8003332:	d502      	bpl.n	800333a <HAL_UART_IRQHandler+0x76>
 8003334:	004a      	lsls	r2, r1, #1
 8003336:	d500      	bpl.n	800333a <HAL_UART_IRQHandler+0x76>
 8003338:	e165      	b.n	8003606 <HAL_UART_IRQHandler+0x342>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800333a:	01db      	lsls	r3, r3, #7
 800333c:	d502      	bpl.n	8003344 <HAL_UART_IRQHandler+0x80>
 800333e:	2900      	cmp	r1, #0
 8003340:	da00      	bge.n	8003344 <HAL_UART_IRQHandler+0x80>
 8003342:	e164      	b.n	800360e <HAL_UART_IRQHandler+0x34a>
}
 8003344:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003346:	07dd      	lsls	r5, r3, #31
 8003348:	d507      	bpl.n	800335a <HAL_UART_IRQHandler+0x96>
 800334a:	05cd      	lsls	r5, r1, #23
 800334c:	d505      	bpl.n	800335a <HAL_UART_IRQHandler+0x96>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800334e:	2701      	movs	r7, #1
 8003350:	6217      	str	r7, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003352:	2590      	movs	r5, #144	@ 0x90
 8003354:	5962      	ldr	r2, [r4, r5]
 8003356:	433a      	orrs	r2, r7
 8003358:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800335a:	079a      	lsls	r2, r3, #30
 800335c:	d56e      	bpl.n	800343c <HAL_UART_IRQHandler+0x178>
 800335e:	07c2      	lsls	r2, r0, #31
 8003360:	d511      	bpl.n	8003386 <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	2502      	movs	r5, #2
 8003366:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003368:	2790      	movs	r7, #144	@ 0x90
 800336a:	59e2      	ldr	r2, [r4, r7]
 800336c:	3502      	adds	r5, #2
 800336e:	432a      	orrs	r2, r5
 8003370:	51e2      	str	r2, [r4, r7]
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003372:	421d      	tst	r5, r3
 8003374:	d007      	beq.n	8003386 <HAL_UART_IRQHandler+0xc2>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003376:	6822      	ldr	r2, [r4, #0]
 8003378:	2504      	movs	r5, #4
 800337a:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800337c:	358c      	adds	r5, #140	@ 0x8c
 800337e:	5962      	ldr	r2, [r4, r5]
 8003380:	2702      	movs	r7, #2
 8003382:	433a      	orrs	r2, r7
 8003384:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003386:	071a      	lsls	r2, r3, #28
 8003388:	d50a      	bpl.n	80033a0 <HAL_UART_IRQHandler+0xdc>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800338a:	2220      	movs	r2, #32
 800338c:	400a      	ands	r2, r1
 800338e:	4332      	orrs	r2, r6
 8003390:	d006      	beq.n	80033a0 <HAL_UART_IRQHandler+0xdc>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003392:	6822      	ldr	r2, [r4, #0]
 8003394:	2608      	movs	r6, #8
 8003396:	6216      	str	r6, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003398:	2590      	movs	r5, #144	@ 0x90
 800339a:	5962      	ldr	r2, [r4, r5]
 800339c:	4332      	orrs	r2, r6
 800339e:	5162      	str	r2, [r4, r5]
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033a0:	051a      	lsls	r2, r3, #20
 80033a2:	d50a      	bpl.n	80033ba <HAL_UART_IRQHandler+0xf6>
 80033a4:	014a      	lsls	r2, r1, #5
 80033a6:	d508      	bpl.n	80033ba <HAL_UART_IRQHandler+0xf6>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033a8:	6822      	ldr	r2, [r4, #0]
 80033aa:	2580      	movs	r5, #128	@ 0x80
 80033ac:	012d      	lsls	r5, r5, #4
 80033ae:	6215      	str	r5, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033b0:	2590      	movs	r5, #144	@ 0x90
 80033b2:	5962      	ldr	r2, [r4, r5]
 80033b4:	2620      	movs	r6, #32
 80033b6:	4332      	orrs	r2, r6
 80033b8:	5162      	str	r2, [r4, r5]
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033ba:	2290      	movs	r2, #144	@ 0x90
 80033bc:	58a2      	ldr	r2, [r4, r2]
 80033be:	2a00      	cmp	r2, #0
 80033c0:	d0c0      	beq.n	8003344 <HAL_UART_IRQHandler+0x80>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80033c2:	069b      	lsls	r3, r3, #26
 80033c4:	d50b      	bpl.n	80033de <HAL_UART_IRQHandler+0x11a>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80033c6:	2320      	movs	r3, #32
 80033c8:	400b      	ands	r3, r1
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80033ca:	2280      	movs	r2, #128	@ 0x80
 80033cc:	0552      	lsls	r2, r2, #21
 80033ce:	4002      	ands	r2, r0
 80033d0:	4313      	orrs	r3, r2
 80033d2:	d004      	beq.n	80033de <HAL_UART_IRQHandler+0x11a>
        if (huart->RxISR != NULL)
 80033d4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d001      	beq.n	80033de <HAL_UART_IRQHandler+0x11a>
          huart->RxISR(huart);
 80033da:	0020      	movs	r0, r4
 80033dc:	4798      	blx	r3
      errorcode = huart->ErrorCode;
 80033de:	2390      	movs	r3, #144	@ 0x90
 80033e0:	58e1      	ldr	r1, [r4, r3]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033e2:	6823      	ldr	r3, [r4, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	2340      	movs	r3, #64	@ 0x40
 80033e8:	4013      	ands	r3, r2
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033ea:	2228      	movs	r2, #40	@ 0x28
 80033ec:	400a      	ands	r2, r1
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033ee:	4313      	orrs	r3, r2
 80033f0:	d031      	beq.n	8003456 <HAL_UART_IRQHandler+0x192>
        UART_EndRxTransfer(huart);
 80033f2:	0020      	movs	r0, r4
 80033f4:	f7ff fe12 	bl	800301c <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	6823      	ldr	r3, [r4, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	065b      	lsls	r3, r3, #25
 80033fe:	d526      	bpl.n	800344e <HAL_UART_IRQHandler+0x18a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003400:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003404:	2301      	movs	r3, #1
 8003406:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800340a:	6822      	ldr	r2, [r4, #0]
 800340c:	6893      	ldr	r3, [r2, #8]
 800340e:	2040      	movs	r0, #64	@ 0x40
 8003410:	4383      	bics	r3, r0
 8003412:	6093      	str	r3, [r2, #8]
 8003414:	f381 8810 	msr	PRIMASK, r1
          if (huart->hdmarx != NULL)
 8003418:	2380      	movs	r3, #128	@ 0x80
 800341a:	58e3      	ldr	r3, [r4, r3]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_UART_IRQHandler+0x182>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003420:	4a6a      	ldr	r2, [pc, #424]	@ (80035cc <HAL_UART_IRQHandler+0x308>)
 8003422:	639a      	str	r2, [r3, #56]	@ 0x38
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003424:	2380      	movs	r3, #128	@ 0x80
 8003426:	58e0      	ldr	r0, [r4, r3]
 8003428:	f7fe ff72 	bl	8002310 <HAL_DMA_Abort_IT>
 800342c:	2800      	cmp	r0, #0
 800342e:	d100      	bne.n	8003432 <HAL_UART_IRQHandler+0x16e>
 8003430:	e788      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003432:	2380      	movs	r3, #128	@ 0x80
 8003434:	58e0      	ldr	r0, [r4, r3]
 8003436:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8003438:	4798      	blx	r3
 800343a:	e783      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800343c:	075a      	lsls	r2, r3, #29
 800343e:	d5a2      	bpl.n	8003386 <HAL_UART_IRQHandler+0xc2>
 8003440:	07c2      	lsls	r2, r0, #31
 8003442:	d5a0      	bpl.n	8003386 <HAL_UART_IRQHandler+0xc2>
 8003444:	e797      	b.n	8003376 <HAL_UART_IRQHandler+0xb2>
            HAL_UART_ErrorCallback(huart);
 8003446:	0020      	movs	r0, r4
 8003448:	f002 f94e 	bl	80056e8 <HAL_UART_ErrorCallback>
 800344c:	e77a      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
          HAL_UART_ErrorCallback(huart);
 800344e:	0020      	movs	r0, r4
 8003450:	f002 f94a 	bl	80056e8 <HAL_UART_ErrorCallback>
 8003454:	e776      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
        HAL_UART_ErrorCallback(huart);
 8003456:	0020      	movs	r0, r4
 8003458:	f002 f946 	bl	80056e8 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800345c:	2390      	movs	r3, #144	@ 0x90
 800345e:	2200      	movs	r2, #0
 8003460:	50e2      	str	r2, [r4, r3]
 8003462:	e76f      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003464:	06dd      	lsls	r5, r3, #27
 8003466:	d400      	bmi.n	800346a <HAL_UART_IRQHandler+0x1a6>
 8003468:	e74e      	b.n	8003308 <HAL_UART_IRQHandler+0x44>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800346a:	06cd      	lsls	r5, r1, #27
 800346c:	d400      	bmi.n	8003470 <HAL_UART_IRQHandler+0x1ac>
 800346e:	e74b      	b.n	8003308 <HAL_UART_IRQHandler+0x44>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003470:	2310      	movs	r3, #16
 8003472:	6213      	str	r3, [r2, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003474:	6823      	ldr	r3, [r4, #0]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	065b      	lsls	r3, r3, #25
 800347a:	d555      	bpl.n	8003528 <HAL_UART_IRQHandler+0x264>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	58e2      	ldr	r2, [r4, r3]
 8003480:	6813      	ldr	r3, [r2, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	b29b      	uxth	r3, r3
      if ((nb_remaining_rx_data > 0U)
 8003486:	2b00      	cmp	r3, #0
 8003488:	d100      	bne.n	800348c <HAL_UART_IRQHandler+0x1c8>
 800348a:	e75b      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800348c:	215c      	movs	r1, #92	@ 0x5c
 800348e:	5a61      	ldrh	r1, [r4, r1]
 8003490:	4299      	cmp	r1, r3
 8003492:	d800      	bhi.n	8003496 <HAL_UART_IRQHandler+0x1d2>
 8003494:	e756      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
        huart->RxXferCount = nb_remaining_rx_data;
 8003496:	215e      	movs	r1, #94	@ 0x5e
 8003498:	5263      	strh	r3, [r4, r1]
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800349a:	6813      	ldr	r3, [r2, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	069b      	lsls	r3, r3, #26
 80034a0:	d50b      	bpl.n	80034ba <HAL_UART_IRQHandler+0x1f6>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034a2:	2302      	movs	r3, #2
 80034a4:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034a6:	335c      	adds	r3, #92	@ 0x5c
 80034a8:	5ae3      	ldrh	r3, [r4, r3]
 80034aa:	225c      	movs	r2, #92	@ 0x5c
 80034ac:	5aa1      	ldrh	r1, [r4, r2]
 80034ae:	1ac9      	subs	r1, r1, r3
 80034b0:	b289      	uxth	r1, r1
 80034b2:	0020      	movs	r0, r4
 80034b4:	f7ff ff05 	bl	80032c2 <HAL_UARTEx_RxEventCallback>
 80034b8:	e744      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034ba:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034be:	2301      	movs	r3, #1
 80034c0:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034c4:	6821      	ldr	r1, [r4, #0]
 80034c6:	680a      	ldr	r2, [r1, #0]
 80034c8:	4d41      	ldr	r5, [pc, #260]	@ (80035d0 <HAL_UART_IRQHandler+0x30c>)
 80034ca:	402a      	ands	r2, r5
 80034cc:	600a      	str	r2, [r1, #0]
 80034ce:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d2:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d6:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034da:	6821      	ldr	r1, [r4, #0]
 80034dc:	688a      	ldr	r2, [r1, #8]
 80034de:	439a      	bics	r2, r3
 80034e0:	608a      	str	r2, [r1, #8]
 80034e2:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e6:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ea:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ee:	6821      	ldr	r1, [r4, #0]
 80034f0:	688a      	ldr	r2, [r1, #8]
 80034f2:	3542      	adds	r5, #66	@ 0x42
 80034f4:	35ff      	adds	r5, #255	@ 0xff
 80034f6:	43aa      	bics	r2, r5
 80034f8:	608a      	str	r2, [r1, #8]
 80034fa:	f380 8810 	msr	PRIMASK, r0
          huart->RxState = HAL_UART_STATE_READY;
 80034fe:	228c      	movs	r2, #140	@ 0x8c
 8003500:	2120      	movs	r1, #32
 8003502:	50a1      	str	r1, [r4, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003504:	2200      	movs	r2, #0
 8003506:	66e2      	str	r2, [r4, #108]	@ 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003508:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	f383 8810 	msr	PRIMASK, r3
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003510:	6822      	ldr	r2, [r4, #0]
 8003512:	6813      	ldr	r3, [r2, #0]
 8003514:	2010      	movs	r0, #16
 8003516:	4383      	bics	r3, r0
 8003518:	6013      	str	r3, [r2, #0]
 800351a:	f381 8810 	msr	PRIMASK, r1
          (void)HAL_DMA_Abort(huart->hdmarx);
 800351e:	2380      	movs	r3, #128	@ 0x80
 8003520:	58e0      	ldr	r0, [r4, r3]
 8003522:	f7fe feb5 	bl	8002290 <HAL_DMA_Abort>
 8003526:	e7bc      	b.n	80034a2 <HAL_UART_IRQHandler+0x1de>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003528:	215e      	movs	r1, #94	@ 0x5e
 800352a:	5a62      	ldrh	r2, [r4, r1]
 800352c:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800352e:	5a63      	ldrh	r3, [r4, r1]
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d100      	bne.n	8003538 <HAL_UART_IRQHandler+0x274>
 8003536:	e705      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003538:	235c      	movs	r3, #92	@ 0x5c
 800353a:	5ae1      	ldrh	r1, [r4, r3]
 800353c:	1a89      	subs	r1, r1, r2
 800353e:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8003540:	2900      	cmp	r1, #0
 8003542:	d100      	bne.n	8003546 <HAL_UART_IRQHandler+0x282>
 8003544:	e6fe      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003546:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800354a:	3b5b      	subs	r3, #91	@ 0x5b
 800354c:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003550:	6820      	ldr	r0, [r4, #0]
 8003552:	6802      	ldr	r2, [r0, #0]
 8003554:	4e1f      	ldr	r6, [pc, #124]	@ (80035d4 <HAL_UART_IRQHandler+0x310>)
 8003556:	4032      	ands	r2, r6
 8003558:	6002      	str	r2, [r0, #0]
 800355a:	f385 8810 	msr	PRIMASK, r5
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800355e:	f3ef 8510 	mrs	r5, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003562:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003566:	6820      	ldr	r0, [r4, #0]
 8003568:	6882      	ldr	r2, [r0, #8]
 800356a:	4e1b      	ldr	r6, [pc, #108]	@ (80035d8 <HAL_UART_IRQHandler+0x314>)
 800356c:	4032      	ands	r2, r6
 800356e:	6082      	str	r2, [r0, #8]
 8003570:	f385 8810 	msr	PRIMASK, r5
        huart->RxState = HAL_UART_STATE_READY;
 8003574:	228c      	movs	r2, #140	@ 0x8c
 8003576:	2020      	movs	r0, #32
 8003578:	50a0      	str	r0, [r4, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800357a:	2200      	movs	r2, #0
 800357c:	66e2      	str	r2, [r4, #108]	@ 0x6c
        huart->RxISR = NULL;
 800357e:	6762      	str	r2, [r4, #116]	@ 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003580:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003584:	f383 8810 	msr	PRIMASK, r3
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003588:	6822      	ldr	r2, [r4, #0]
 800358a:	6813      	ldr	r3, [r2, #0]
 800358c:	2510      	movs	r5, #16
 800358e:	43ab      	bics	r3, r5
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	f380 8810 	msr	PRIMASK, r0
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003596:	2302      	movs	r3, #2
 8003598:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800359a:	0020      	movs	r0, r4
 800359c:	f7ff fe91 	bl	80032c2 <HAL_UARTEx_RxEventCallback>
 80035a0:	e6d0      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80035a2:	2380      	movs	r3, #128	@ 0x80
 80035a4:	035b      	lsls	r3, r3, #13
 80035a6:	6213      	str	r3, [r2, #32]
    HAL_UARTEx_WakeupCallback(huart);
 80035a8:	0020      	movs	r0, r4
 80035aa:	f000 fc2f 	bl	8003e0c <HAL_UARTEx_WakeupCallback>
    return;
 80035ae:	e6c9      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
    if (huart->TxISR != NULL)
 80035b0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d100      	bne.n	80035b8 <HAL_UART_IRQHandler+0x2f4>
 80035b6:	e6c5      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
      huart->TxISR(huart);
 80035b8:	0020      	movs	r0, r4
 80035ba:	4798      	blx	r3
 80035bc:	e6c2      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
 80035be:	46c0      	nop			@ (mov r8, r8)
 80035c0:	0000080f 	.word	0x0000080f
 80035c4:	10000001 	.word	0x10000001
 80035c8:	04000120 	.word	0x04000120
 80035cc:	080032af 	.word	0x080032af
 80035d0:	fffffeff 	.word	0xfffffeff
 80035d4:	fffffedf 	.word	0xfffffedf
 80035d8:	effffffe 	.word	0xeffffffe
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035dc:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035e0:	2301      	movs	r3, #1
 80035e2:	f383 8810 	msr	PRIMASK, r3
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035e6:	6822      	ldr	r2, [r4, #0]
 80035e8:	6813      	ldr	r3, [r2, #0]
 80035ea:	2040      	movs	r0, #64	@ 0x40
 80035ec:	4383      	bics	r3, r0
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	f381 8810 	msr	PRIMASK, r1

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035f4:	2388      	movs	r3, #136	@ 0x88
 80035f6:	2220      	movs	r2, #32
 80035f8:	50e2      	str	r2, [r4, r3]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035fa:	2300      	movs	r3, #0
 80035fc:	67a3      	str	r3, [r4, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035fe:	0020      	movs	r0, r4
 8003600:	f002 f862 	bl	80056c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003604:	e69e      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8003606:	0020      	movs	r0, r4
 8003608:	f000 fc02 	bl	8003e10 <HAL_UARTEx_TxFifoEmptyCallback>
    return;
 800360c:	e69a      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800360e:	0020      	movs	r0, r4
 8003610:	f000 fbfd 	bl	8003e0e <HAL_UARTEx_RxFifoFullCallback>
    return;
 8003614:	e696      	b.n	8003344 <HAL_UART_IRQHandler+0x80>
 8003616:	46c0      	nop			@ (mov r8, r8)

08003618 <UART_DMARxHalfCplt>:
{
 8003618:	b510      	push	{r4, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800361a:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800361c:	2301      	movs	r3, #1
 800361e:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003620:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003622:	2b01      	cmp	r3, #1
 8003624:	d002      	beq.n	800362c <UART_DMARxHalfCplt+0x14>
    HAL_UART_RxHalfCpltCallback(huart);
 8003626:	f7ff fe18 	bl	800325a <HAL_UART_RxHalfCpltCallback>
}
 800362a:	bd10      	pop	{r4, pc}
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800362c:	335b      	adds	r3, #91	@ 0x5b
 800362e:	5ac1      	ldrh	r1, [r0, r3]
 8003630:	0849      	lsrs	r1, r1, #1
 8003632:	f7ff fe46 	bl	80032c2 <HAL_UARTEx_RxEventCallback>
 8003636:	e7f8      	b.n	800362a <UART_DMARxHalfCplt+0x12>

08003638 <UART_DMAReceiveCplt>:
{
 8003638:	b570      	push	{r4, r5, r6, lr}
 800363a:	0003      	movs	r3, r0
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800363c:	6a80      	ldr	r0, [r0, #40]	@ 0x28
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	069b      	lsls	r3, r3, #26
 8003644:	d429      	bmi.n	800369a <UART_DMAReceiveCplt+0x62>
    huart->RxXferCount = 0U;
 8003646:	235e      	movs	r3, #94	@ 0x5e
 8003648:	2200      	movs	r2, #0
 800364a:	52c2      	strh	r2, [r0, r3]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003650:	3b5d      	subs	r3, #93	@ 0x5d
 8003652:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003656:	6801      	ldr	r1, [r0, #0]
 8003658:	680a      	ldr	r2, [r1, #0]
 800365a:	4d1c      	ldr	r5, [pc, #112]	@ (80036cc <UART_DMAReceiveCplt+0x94>)
 800365c:	402a      	ands	r2, r5
 800365e:	600a      	str	r2, [r1, #0]
 8003660:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003664:	f3ef 8410 	mrs	r4, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003668:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800366c:	6801      	ldr	r1, [r0, #0]
 800366e:	688a      	ldr	r2, [r1, #8]
 8003670:	439a      	bics	r2, r3
 8003672:	608a      	str	r2, [r1, #8]
 8003674:	f384 8810 	msr	PRIMASK, r4
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003678:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003680:	6802      	ldr	r2, [r0, #0]
 8003682:	6893      	ldr	r3, [r2, #8]
 8003684:	2440      	movs	r4, #64	@ 0x40
 8003686:	43a3      	bics	r3, r4
 8003688:	6093      	str	r3, [r2, #8]
 800368a:	f381 8810 	msr	PRIMASK, r1
    huart->RxState = HAL_UART_STATE_READY;
 800368e:	238c      	movs	r3, #140	@ 0x8c
 8003690:	2220      	movs	r2, #32
 8003692:	50c2      	str	r2, [r0, r3]
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003694:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d007      	beq.n	80036aa <UART_DMAReceiveCplt+0x72>
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800369a:	2300      	movs	r3, #0
 800369c:	6703      	str	r3, [r0, #112]	@ 0x70
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800369e:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d00e      	beq.n	80036c2 <UART_DMAReceiveCplt+0x8a>
    HAL_UART_RxCpltCallback(huart);
 80036a4:	f002 f818 	bl	80056d8 <HAL_UART_RxCpltCallback>
}
 80036a8:	bd70      	pop	{r4, r5, r6, pc}
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80036aa:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ae:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b2:	6802      	ldr	r2, [r0, #0]
 80036b4:	6813      	ldr	r3, [r2, #0]
 80036b6:	3c30      	subs	r4, #48	@ 0x30
 80036b8:	43a3      	bics	r3, r4
 80036ba:	6013      	str	r3, [r2, #0]
 80036bc:	f381 8810 	msr	PRIMASK, r1
}
 80036c0:	e7eb      	b.n	800369a <UART_DMAReceiveCplt+0x62>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036c2:	335b      	adds	r3, #91	@ 0x5b
 80036c4:	5ac1      	ldrh	r1, [r0, r3]
 80036c6:	f7ff fdfc 	bl	80032c2 <HAL_UARTEx_RxEventCallback>
 80036ca:	e7ed      	b.n	80036a8 <UART_DMAReceiveCplt+0x70>
 80036cc:	fffffeff 	.word	0xfffffeff

080036d0 <UART_SetConfig>:
{
 80036d0:	b570      	push	{r4, r5, r6, lr}
 80036d2:	0004      	movs	r4, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	680a      	ldr	r2, [r1, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036d8:	6883      	ldr	r3, [r0, #8]
 80036da:	6900      	ldr	r0, [r0, #16]
 80036dc:	4303      	orrs	r3, r0
 80036de:	6960      	ldr	r0, [r4, #20]
 80036e0:	4303      	orrs	r3, r0
 80036e2:	69e0      	ldr	r0, [r4, #28]
 80036e4:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036e6:	4873      	ldr	r0, [pc, #460]	@ (80038b4 <UART_SetConfig+0x1e4>)
 80036e8:	4002      	ands	r2, r0
 80036ea:	4313      	orrs	r3, r2
 80036ec:	600b      	str	r3, [r1, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ee:	6822      	ldr	r2, [r4, #0]
 80036f0:	6853      	ldr	r3, [r2, #4]
 80036f2:	4971      	ldr	r1, [pc, #452]	@ (80038b8 <UART_SetConfig+0x1e8>)
 80036f4:	400b      	ands	r3, r1
 80036f6:	68e1      	ldr	r1, [r4, #12]
 80036f8:	430b      	orrs	r3, r1
 80036fa:	6053      	str	r3, [r2, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80036fc:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80036fe:	6821      	ldr	r1, [r4, #0]
 8003700:	688a      	ldr	r2, [r1, #8]
    tmpreg |= huart->Init.OneBitSampling;
 8003702:	6a20      	ldr	r0, [r4, #32]
 8003704:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003706:	486d      	ldr	r0, [pc, #436]	@ (80038bc <UART_SetConfig+0x1ec>)
 8003708:	4002      	ands	r2, r0
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800370e:	6822      	ldr	r2, [r4, #0]
 8003710:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 8003712:	210f      	movs	r1, #15
 8003714:	438b      	bics	r3, r1
 8003716:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003718:	430b      	orrs	r3, r1
 800371a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800371c:	6823      	ldr	r3, [r4, #0]
 800371e:	4a68      	ldr	r2, [pc, #416]	@ (80038c0 <UART_SetConfig+0x1f0>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d01e      	beq.n	8003762 <UART_SetConfig+0x92>
 8003724:	4a67      	ldr	r2, [pc, #412]	@ (80038c4 <UART_SetConfig+0x1f4>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d030      	beq.n	800378c <UART_SetConfig+0xbc>
 800372a:	4a67      	ldr	r2, [pc, #412]	@ (80038c8 <UART_SetConfig+0x1f8>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d100      	bne.n	8003732 <UART_SetConfig+0x62>
 8003730:	e08c      	b.n	800384c <UART_SetConfig+0x17c>
 8003732:	4a66      	ldr	r2, [pc, #408]	@ (80038cc <UART_SetConfig+0x1fc>)
 8003734:	4694      	mov	ip, r2
 8003736:	4463      	add	r3, ip
 8003738:	1e5a      	subs	r2, r3, #1
 800373a:	4193      	sbcs	r3, r2
 800373c:	011b      	lsls	r3, r3, #4
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800373e:	2280      	movs	r2, #128	@ 0x80
 8003740:	0212      	lsls	r2, r2, #8
 8003742:	69e1      	ldr	r1, [r4, #28]
 8003744:	4291      	cmp	r1, r2
 8003746:	d100      	bne.n	800374a <UART_SetConfig+0x7a>
 8003748:	e0ab      	b.n	80038a2 <UART_SetConfig+0x1d2>
    switch (clocksource)
 800374a:	2001      	movs	r0, #1
 800374c:	2b02      	cmp	r3, #2
 800374e:	d944      	bls.n	80037da <UART_SetConfig+0x10a>
  huart->NbTxDataToProcess = 1;
 8003750:	2301      	movs	r3, #1
 8003752:	226a      	movs	r2, #106	@ 0x6a
 8003754:	52a3      	strh	r3, [r4, r2]
  huart->NbRxDataToProcess = 1;
 8003756:	3a02      	subs	r2, #2
 8003758:	52a3      	strh	r3, [r4, r2]
  huart->RxISR = NULL;
 800375a:	2300      	movs	r3, #0
 800375c:	6763      	str	r3, [r4, #116]	@ 0x74
  huart->TxISR = NULL;
 800375e:	67a3      	str	r3, [r4, #120]	@ 0x78
}
 8003760:	bd70      	pop	{r4, r5, r6, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003762:	4b5b      	ldr	r3, [pc, #364]	@ (80038d0 <UART_SetConfig+0x200>)
 8003764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003766:	2303      	movs	r3, #3
 8003768:	4013      	ands	r3, r2
 800376a:	2b02      	cmp	r3, #2
 800376c:	d067      	beq.n	800383e <UART_SetConfig+0x16e>
 800376e:	d85f      	bhi.n	8003830 <UART_SetConfig+0x160>
 8003770:	2b00      	cmp	r3, #0
 8003772:	d02a      	beq.n	80037ca <UART_SetConfig+0xfa>
        ret = HAL_ERROR;
 8003774:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003776:	2b01      	cmp	r3, #1
 8003778:	d1ea      	bne.n	8003750 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800377a:	2380      	movs	r3, #128	@ 0x80
 800377c:	021b      	lsls	r3, r3, #8
 800377e:	69e2      	ldr	r2, [r4, #28]
 8003780:	429a      	cmp	r2, r3
 8003782:	d014      	beq.n	80037ae <UART_SetConfig+0xde>
        pclk = HAL_RCC_GetSysClockFreq();
 8003784:	f7ff fa14 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 8003788:	0003      	movs	r3, r0
        break;
 800378a:	e02b      	b.n	80037e4 <UART_SetConfig+0x114>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800378c:	4b50      	ldr	r3, [pc, #320]	@ (80038d0 <UART_SetConfig+0x200>)
 800378e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003790:	230c      	movs	r3, #12
 8003792:	4013      	ands	r3, r2
 8003794:	2b08      	cmp	r3, #8
 8003796:	d044      	beq.n	8003822 <UART_SetConfig+0x152>
 8003798:	d80d      	bhi.n	80037b6 <UART_SetConfig+0xe6>
 800379a:	2b00      	cmp	r3, #0
 800379c:	d017      	beq.n	80037ce <UART_SetConfig+0xfe>
        ret = HAL_ERROR;
 800379e:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d1d5      	bne.n	8003750 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037a4:	2380      	movs	r3, #128	@ 0x80
 80037a6:	021b      	lsls	r3, r3, #8
 80037a8:	69e2      	ldr	r2, [r4, #28]
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d1ea      	bne.n	8003784 <UART_SetConfig+0xb4>
        pclk = HAL_RCC_GetSysClockFreq();
 80037ae:	f7ff f9ff 	bl	8002bb0 <HAL_RCC_GetSysClockFreq>
 80037b2:	0003      	movs	r3, r0
        break;
 80037b4:	e052      	b.n	800385c <UART_SetConfig+0x18c>
        ret = HAL_ERROR;
 80037b6:	2001      	movs	r0, #1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037b8:	2b0c      	cmp	r3, #12
 80037ba:	d1c9      	bne.n	8003750 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037bc:	69e3      	ldr	r3, [r4, #28]
 80037be:	2280      	movs	r2, #128	@ 0x80
 80037c0:	0212      	lsls	r2, r2, #8
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d04e      	beq.n	8003864 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 80037c6:	0013      	movs	r3, r2
 80037c8:	e00f      	b.n	80037ea <UART_SetConfig+0x11a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037ca:	2300      	movs	r3, #0
 80037cc:	e7b7      	b.n	800373e <UART_SetConfig+0x6e>
 80037ce:	2300      	movs	r3, #0
 80037d0:	e7b5      	b.n	800373e <UART_SetConfig+0x6e>
        pclk = (uint32_t) HSI_VALUE;
 80037d2:	4b40      	ldr	r3, [pc, #256]	@ (80038d4 <UART_SetConfig+0x204>)
 80037d4:	e046      	b.n	8003864 <UART_SetConfig+0x194>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d6:	4b3f      	ldr	r3, [pc, #252]	@ (80038d4 <UART_SetConfig+0x204>)
 80037d8:	e044      	b.n	8003864 <UART_SetConfig+0x194>
    switch (clocksource)
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d11f      	bne.n	800381e <UART_SetConfig+0x14e>
        pclk = HAL_RCC_GetPCLK1Freq();
 80037de:	f7ff fb17 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 80037e2:	0003      	movs	r3, r0
    if (pclk != 0U)
 80037e4:	2000      	movs	r0, #0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0b2      	beq.n	8003750 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037ea:	6865      	ldr	r5, [r4, #4]
 80037ec:	4a3a      	ldr	r2, [pc, #232]	@ (80038d8 <UART_SetConfig+0x208>)
 80037ee:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80037f0:	0049      	lsls	r1, r1, #1
 80037f2:	5a89      	ldrh	r1, [r1, r2]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f7fc fc8d 	bl	8000114 <__udivsi3>
 80037fa:	086b      	lsrs	r3, r5, #1
 80037fc:	18c0      	adds	r0, r0, r3
 80037fe:	0029      	movs	r1, r5
 8003800:	f7fc fc88 	bl	8000114 <__udivsi3>
 8003804:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003806:	0001      	movs	r1, r0
 8003808:	3910      	subs	r1, #16
 800380a:	4a34      	ldr	r2, [pc, #208]	@ (80038dc <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 800380c:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800380e:	4291      	cmp	r1, r2
 8003810:	d89e      	bhi.n	8003750 <UART_SetConfig+0x80>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003812:	6822      	ldr	r2, [r4, #0]
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	0c1b      	lsrs	r3, r3, #16
 8003818:	60d3      	str	r3, [r2, #12]
 800381a:	2000      	movs	r0, #0
 800381c:	e798      	b.n	8003750 <UART_SetConfig+0x80>
    switch (clocksource)
 800381e:	2001      	movs	r0, #1
 8003820:	e796      	b.n	8003750 <UART_SetConfig+0x80>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003822:	2380      	movs	r3, #128	@ 0x80
 8003824:	021b      	lsls	r3, r3, #8
 8003826:	69e2      	ldr	r2, [r4, #28]
 8003828:	429a      	cmp	r2, r3
 800382a:	d0d2      	beq.n	80037d2 <UART_SetConfig+0x102>
 800382c:	4b29      	ldr	r3, [pc, #164]	@ (80038d4 <UART_SetConfig+0x204>)
 800382e:	e7dc      	b.n	80037ea <UART_SetConfig+0x11a>
 8003830:	69e3      	ldr	r3, [r4, #28]
 8003832:	2280      	movs	r2, #128	@ 0x80
 8003834:	0212      	lsls	r2, r2, #8
 8003836:	4293      	cmp	r3, r2
 8003838:	d014      	beq.n	8003864 <UART_SetConfig+0x194>
        pclk = (uint32_t) LSE_VALUE;
 800383a:	0013      	movs	r3, r2
 800383c:	e7d5      	b.n	80037ea <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800383e:	2380      	movs	r3, #128	@ 0x80
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	69e2      	ldr	r2, [r4, #28]
 8003844:	429a      	cmp	r2, r3
 8003846:	d0c6      	beq.n	80037d6 <UART_SetConfig+0x106>
        pclk = (uint32_t) HSI_VALUE;
 8003848:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <UART_SetConfig+0x204>)
 800384a:	e7ce      	b.n	80037ea <UART_SetConfig+0x11a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800384c:	2380      	movs	r3, #128	@ 0x80
 800384e:	021b      	lsls	r3, r3, #8
 8003850:	69e2      	ldr	r2, [r4, #28]
 8003852:	429a      	cmp	r2, r3
 8003854:	d1c3      	bne.n	80037de <UART_SetConfig+0x10e>
        pclk = HAL_RCC_GetPCLK1Freq();
 8003856:	f7ff fadb 	bl	8002e10 <HAL_RCC_GetPCLK1Freq>
 800385a:	0003      	movs	r3, r0
    if (pclk != 0U)
 800385c:	2000      	movs	r0, #0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d100      	bne.n	8003864 <UART_SetConfig+0x194>
 8003862:	e775      	b.n	8003750 <UART_SetConfig+0x80>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003864:	6865      	ldr	r5, [r4, #4]
 8003866:	4a1c      	ldr	r2, [pc, #112]	@ (80038d8 <UART_SetConfig+0x208>)
 8003868:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800386a:	0049      	lsls	r1, r1, #1
 800386c:	5a89      	ldrh	r1, [r1, r2]
 800386e:	0018      	movs	r0, r3
 8003870:	f7fc fc50 	bl	8000114 <__udivsi3>
 8003874:	0040      	lsls	r0, r0, #1
 8003876:	086b      	lsrs	r3, r5, #1
 8003878:	18c0      	adds	r0, r0, r3
 800387a:	0029      	movs	r1, r5
 800387c:	f7fc fc4a 	bl	8000114 <__udivsi3>
 8003880:	0003      	movs	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003882:	0001      	movs	r1, r0
 8003884:	3910      	subs	r1, #16
 8003886:	4a15      	ldr	r2, [pc, #84]	@ (80038dc <UART_SetConfig+0x20c>)
        ret = HAL_ERROR;
 8003888:	2001      	movs	r0, #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800388a:	4291      	cmp	r1, r2
 800388c:	d900      	bls.n	8003890 <UART_SetConfig+0x1c0>
 800388e:	e75f      	b.n	8003750 <UART_SetConfig+0x80>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003890:	4a13      	ldr	r2, [pc, #76]	@ (80038e0 <UART_SetConfig+0x210>)
 8003892:	401a      	ands	r2, r3
        huart->Instance->BRR = brrtemp;
 8003894:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003896:	071b      	lsls	r3, r3, #28
 8003898:	0f5b      	lsrs	r3, r3, #29
        huart->Instance->BRR = brrtemp;
 800389a:	4313      	orrs	r3, r2
 800389c:	60cb      	str	r3, [r1, #12]
 800389e:	2000      	movs	r0, #0
 80038a0:	e756      	b.n	8003750 <UART_SetConfig+0x80>
    switch (clocksource)
 80038a2:	2001      	movs	r0, #1
 80038a4:	2b04      	cmp	r3, #4
 80038a6:	d900      	bls.n	80038aa <UART_SetConfig+0x1da>
 80038a8:	e752      	b.n	8003750 <UART_SetConfig+0x80>
 80038aa:	2001      	movs	r0, #1
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d000      	beq.n	80038b2 <UART_SetConfig+0x1e2>
 80038b0:	e74e      	b.n	8003750 <UART_SetConfig+0x80>
 80038b2:	e7d0      	b.n	8003856 <UART_SetConfig+0x186>
 80038b4:	cfff69f3 	.word	0xcfff69f3
 80038b8:	ffffcfff 	.word	0xffffcfff
 80038bc:	11fff4ff 	.word	0x11fff4ff
 80038c0:	40013800 	.word	0x40013800
 80038c4:	40004400 	.word	0x40004400
 80038c8:	40004800 	.word	0x40004800
 80038cc:	bfffb400 	.word	0xbfffb400
 80038d0:	40021000 	.word	0x40021000
 80038d4:	00f42400 	.word	0x00f42400
 80038d8:	08006dbc 	.word	0x08006dbc
 80038dc:	0000ffef 	.word	0x0000ffef
 80038e0:	0000fff0 	.word	0x0000fff0

080038e4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80038e4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80038e6:	071b      	lsls	r3, r3, #28
 80038e8:	d506      	bpl.n	80038f8 <UART_AdvFeatureConfig+0x14>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80038ea:	6802      	ldr	r2, [r0, #0]
 80038ec:	6853      	ldr	r3, [r2, #4]
 80038ee:	492c      	ldr	r1, [pc, #176]	@ (80039a0 <UART_AdvFeatureConfig+0xbc>)
 80038f0:	400b      	ands	r3, r1
 80038f2:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038f8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80038fa:	07db      	lsls	r3, r3, #31
 80038fc:	d506      	bpl.n	800390c <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038fe:	6802      	ldr	r2, [r0, #0]
 8003900:	6853      	ldr	r3, [r2, #4]
 8003902:	4928      	ldr	r1, [pc, #160]	@ (80039a4 <UART_AdvFeatureConfig+0xc0>)
 8003904:	400b      	ands	r3, r1
 8003906:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8003908:	430b      	orrs	r3, r1
 800390a:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800390c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800390e:	079b      	lsls	r3, r3, #30
 8003910:	d506      	bpl.n	8003920 <UART_AdvFeatureConfig+0x3c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003912:	6802      	ldr	r2, [r0, #0]
 8003914:	6853      	ldr	r3, [r2, #4]
 8003916:	4924      	ldr	r1, [pc, #144]	@ (80039a8 <UART_AdvFeatureConfig+0xc4>)
 8003918:	400b      	ands	r3, r1
 800391a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 800391c:	430b      	orrs	r3, r1
 800391e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003920:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003922:	075b      	lsls	r3, r3, #29
 8003924:	d506      	bpl.n	8003934 <UART_AdvFeatureConfig+0x50>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003926:	6802      	ldr	r2, [r0, #0]
 8003928:	6853      	ldr	r3, [r2, #4]
 800392a:	4920      	ldr	r1, [pc, #128]	@ (80039ac <UART_AdvFeatureConfig+0xc8>)
 800392c:	400b      	ands	r3, r1
 800392e:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8003930:	430b      	orrs	r3, r1
 8003932:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003934:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8003936:	06db      	lsls	r3, r3, #27
 8003938:	d506      	bpl.n	8003948 <UART_AdvFeatureConfig+0x64>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800393a:	6802      	ldr	r2, [r0, #0]
 800393c:	6893      	ldr	r3, [r2, #8]
 800393e:	491c      	ldr	r1, [pc, #112]	@ (80039b0 <UART_AdvFeatureConfig+0xcc>)
 8003940:	400b      	ands	r3, r1
 8003942:	6bc1      	ldr	r1, [r0, #60]	@ 0x3c
 8003944:	430b      	orrs	r3, r1
 8003946:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003948:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800394a:	069b      	lsls	r3, r3, #26
 800394c:	d506      	bpl.n	800395c <UART_AdvFeatureConfig+0x78>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800394e:	6802      	ldr	r2, [r0, #0]
 8003950:	6893      	ldr	r3, [r2, #8]
 8003952:	4918      	ldr	r1, [pc, #96]	@ (80039b4 <UART_AdvFeatureConfig+0xd0>)
 8003954:	400b      	ands	r3, r1
 8003956:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 8003958:	430b      	orrs	r3, r1
 800395a:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800395c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800395e:	065b      	lsls	r3, r3, #25
 8003960:	d50b      	bpl.n	800397a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003962:	6802      	ldr	r2, [r0, #0]
 8003964:	6853      	ldr	r3, [r2, #4]
 8003966:	4914      	ldr	r1, [pc, #80]	@ (80039b8 <UART_AdvFeatureConfig+0xd4>)
 8003968:	400b      	ands	r3, r1
 800396a:	6c41      	ldr	r1, [r0, #68]	@ 0x44
 800396c:	430b      	orrs	r3, r1
 800396e:	6053      	str	r3, [r2, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003970:	2380      	movs	r3, #128	@ 0x80
 8003972:	035b      	lsls	r3, r3, #13
 8003974:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8003976:	429a      	cmp	r2, r3
 8003978:	d00a      	beq.n	8003990 <UART_AdvFeatureConfig+0xac>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800397a:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800397c:	061b      	lsls	r3, r3, #24
 800397e:	d506      	bpl.n	800398e <UART_AdvFeatureConfig+0xaa>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003980:	6802      	ldr	r2, [r0, #0]
 8003982:	6853      	ldr	r3, [r2, #4]
 8003984:	490d      	ldr	r1, [pc, #52]	@ (80039bc <UART_AdvFeatureConfig+0xd8>)
 8003986:	400b      	ands	r3, r1
 8003988:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800398a:	430b      	orrs	r3, r1
 800398c:	6053      	str	r3, [r2, #4]
}
 800398e:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003990:	6802      	ldr	r2, [r0, #0]
 8003992:	6853      	ldr	r3, [r2, #4]
 8003994:	490a      	ldr	r1, [pc, #40]	@ (80039c0 <UART_AdvFeatureConfig+0xdc>)
 8003996:	400b      	ands	r3, r1
 8003998:	6c81      	ldr	r1, [r0, #72]	@ 0x48
 800399a:	430b      	orrs	r3, r1
 800399c:	6053      	str	r3, [r2, #4]
 800399e:	e7ec      	b.n	800397a <UART_AdvFeatureConfig+0x96>
 80039a0:	ffff7fff 	.word	0xffff7fff
 80039a4:	fffdffff 	.word	0xfffdffff
 80039a8:	fffeffff 	.word	0xfffeffff
 80039ac:	fffbffff 	.word	0xfffbffff
 80039b0:	ffffefff 	.word	0xffffefff
 80039b4:	ffffdfff 	.word	0xffffdfff
 80039b8:	ffefffff 	.word	0xffefffff
 80039bc:	fff7ffff 	.word	0xfff7ffff
 80039c0:	ff9fffff 	.word	0xff9fffff

080039c4 <UART_WaitOnFlagUntilTimeout>:
{
 80039c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c6:	46ce      	mov	lr, r9
 80039c8:	4647      	mov	r7, r8
 80039ca:	b580      	push	{r7, lr}
 80039cc:	4680      	mov	r8, r0
 80039ce:	000d      	movs	r5, r1
 80039d0:	0016      	movs	r6, r2
 80039d2:	4699      	mov	r9, r3
 80039d4:	9f08      	ldr	r7, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039d6:	4643      	mov	r3, r8
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	69dc      	ldr	r4, [r3, #28]
 80039dc:	402c      	ands	r4, r5
 80039de:	1b64      	subs	r4, r4, r5
 80039e0:	4262      	negs	r2, r4
 80039e2:	4154      	adcs	r4, r2
 80039e4:	42b4      	cmp	r4, r6
 80039e6:	d136      	bne.n	8003a56 <UART_WaitOnFlagUntilTimeout+0x92>
    if (Timeout != HAL_MAX_DELAY)
 80039e8:	1c7a      	adds	r2, r7, #1
 80039ea:	d0f6      	beq.n	80039da <UART_WaitOnFlagUntilTimeout+0x16>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ec:	f7fd ff7e 	bl	80018ec <HAL_GetTick>
 80039f0:	464b      	mov	r3, r9
 80039f2:	1ac0      	subs	r0, r0, r3
 80039f4:	42b8      	cmp	r0, r7
 80039f6:	d833      	bhi.n	8003a60 <UART_WaitOnFlagUntilTimeout+0x9c>
 80039f8:	2f00      	cmp	r7, #0
 80039fa:	d033      	beq.n	8003a64 <UART_WaitOnFlagUntilTimeout+0xa0>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80039fc:	4643      	mov	r3, r8
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	6813      	ldr	r3, [r2, #0]
 8003a02:	075b      	lsls	r3, r3, #29
 8003a04:	d5e7      	bpl.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x12>
 8003a06:	002b      	movs	r3, r5
 8003a08:	3b40      	subs	r3, #64	@ 0x40
 8003a0a:	2140      	movs	r1, #64	@ 0x40
 8003a0c:	438b      	bics	r3, r1
 8003a0e:	d0e2      	beq.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x12>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a10:	69d3      	ldr	r3, [r2, #28]
 8003a12:	071b      	lsls	r3, r3, #28
 8003a14:	d411      	bmi.n	8003a3a <UART_WaitOnFlagUntilTimeout+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a16:	69d3      	ldr	r3, [r2, #28]
 8003a18:	051b      	lsls	r3, r3, #20
 8003a1a:	d5dc      	bpl.n	80039d6 <UART_WaitOnFlagUntilTimeout+0x12>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003a1c:	2380      	movs	r3, #128	@ 0x80
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	6213      	str	r3, [r2, #32]
          UART_EndRxTransfer(huart);
 8003a22:	4640      	mov	r0, r8
 8003a24:	f7ff fafa 	bl	800301c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003a28:	2390      	movs	r3, #144	@ 0x90
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	4641      	mov	r1, r8
 8003a2e:	50ca      	str	r2, [r1, r3]
          __HAL_UNLOCK(huart);
 8003a30:	3b0c      	subs	r3, #12
 8003a32:	2200      	movs	r2, #0
 8003a34:	54ca      	strb	r2, [r1, r3]
          return HAL_TIMEOUT;
 8003a36:	2003      	movs	r0, #3
 8003a38:	e00e      	b.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x94>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a3a:	2408      	movs	r4, #8
 8003a3c:	6214      	str	r4, [r2, #32]
          UART_EndRxTransfer(huart);
 8003a3e:	4640      	mov	r0, r8
 8003a40:	f7ff faec 	bl	800301c <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a44:	2390      	movs	r3, #144	@ 0x90
 8003a46:	4642      	mov	r2, r8
 8003a48:	50d4      	str	r4, [r2, r3]
          __HAL_UNLOCK(huart);
 8003a4a:	3b0c      	subs	r3, #12
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	4641      	mov	r1, r8
 8003a50:	54ca      	strb	r2, [r1, r3]
          return HAL_ERROR;
 8003a52:	2001      	movs	r0, #1
 8003a54:	e000      	b.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x94>
  return HAL_OK;
 8003a56:	2000      	movs	r0, #0
}
 8003a58:	bcc0      	pop	{r6, r7}
 8003a5a:	46b9      	mov	r9, r7
 8003a5c:	46b0      	mov	r8, r6
 8003a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return HAL_TIMEOUT;
 8003a60:	2003      	movs	r0, #3
 8003a62:	e7f9      	b.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x94>
 8003a64:	2003      	movs	r0, #3
 8003a66:	e7f7      	b.n	8003a58 <UART_WaitOnFlagUntilTimeout+0x94>

08003a68 <HAL_UART_Transmit>:
{
 8003a68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a6a:	46ce      	mov	lr, r9
 8003a6c:	4647      	mov	r7, r8
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b083      	sub	sp, #12
 8003a72:	0004      	movs	r4, r0
 8003a74:	000d      	movs	r5, r1
 8003a76:	0016      	movs	r6, r2
 8003a78:	001f      	movs	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003a7a:	2388      	movs	r3, #136	@ 0x88
 8003a7c:	58c3      	ldr	r3, [r0, r3]
 8003a7e:	2b20      	cmp	r3, #32
 8003a80:	d168      	bne.n	8003b54 <HAL_UART_Transmit+0xec>
    if ((pData == NULL) || (Size == 0U))
 8003a82:	2900      	cmp	r1, #0
 8003a84:	d100      	bne.n	8003a88 <HAL_UART_Transmit+0x20>
 8003a86:	e06b      	b.n	8003b60 <HAL_UART_Transmit+0xf8>
 8003a88:	2a00      	cmp	r2, #0
 8003a8a:	d100      	bne.n	8003a8e <HAL_UART_Transmit+0x26>
 8003a8c:	e06a      	b.n	8003b64 <HAL_UART_Transmit+0xfc>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a8e:	2380      	movs	r3, #128	@ 0x80
 8003a90:	015b      	lsls	r3, r3, #5
 8003a92:	6882      	ldr	r2, [r0, #8]
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d104      	bne.n	8003aa2 <HAL_UART_Transmit+0x3a>
 8003a98:	6903      	ldr	r3, [r0, #16]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <HAL_UART_Transmit+0x3a>
      if ((((uint32_t)pData) & 1U) != 0U)
 8003a9e:	07cb      	lsls	r3, r1, #31
 8003aa0:	d462      	bmi.n	8003b68 <HAL_UART_Transmit+0x100>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa2:	2390      	movs	r3, #144	@ 0x90
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	50e2      	str	r2, [r4, r3]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003aa8:	3b08      	subs	r3, #8
 8003aaa:	3221      	adds	r2, #33	@ 0x21
 8003aac:	50e2      	str	r2, [r4, r3]
    tickstart = HAL_GetTick();
 8003aae:	f7fd ff1d 	bl	80018ec <HAL_GetTick>
 8003ab2:	4680      	mov	r8, r0
    huart->TxXferSize  = Size;
 8003ab4:	2354      	movs	r3, #84	@ 0x54
 8003ab6:	52e6      	strh	r6, [r4, r3]
    huart->TxXferCount = Size;
 8003ab8:	3302      	adds	r3, #2
 8003aba:	52e6      	strh	r6, [r4, r3]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003abc:	2380      	movs	r3, #128	@ 0x80
 8003abe:	015b      	lsls	r3, r3, #5
 8003ac0:	68a2      	ldr	r2, [r4, #8]
      pdata16bits = NULL;
 8003ac2:	2100      	movs	r1, #0
 8003ac4:	4689      	mov	r9, r1
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d006      	beq.n	8003ad8 <HAL_UART_Transmit+0x70>
    while (huart->TxXferCount > 0U)
 8003aca:	2356      	movs	r3, #86	@ 0x56
 8003acc:	5ae3      	ldrh	r3, [r4, r3]
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d02d      	beq.n	8003b30 <HAL_UART_Transmit+0xc8>
      huart->TxXferCount--;
 8003ad4:	2656      	movs	r6, #86	@ 0x56
 8003ad6:	e01b      	b.n	8003b10 <HAL_UART_Transmit+0xa8>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ad8:	6923      	ldr	r3, [r4, #16]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d1f5      	bne.n	8003aca <HAL_UART_Transmit+0x62>
      pdata16bits = (const uint16_t *) pData;
 8003ade:	46a9      	mov	r9, r5
      pdata8bits  = NULL;
 8003ae0:	2500      	movs	r5, #0
 8003ae2:	e7f2      	b.n	8003aca <HAL_UART_Transmit+0x62>
        huart->gState = HAL_UART_STATE_READY;
 8003ae4:	2388      	movs	r3, #136	@ 0x88
 8003ae6:	2220      	movs	r2, #32
 8003ae8:	50e2      	str	r2, [r4, r3]
        return HAL_TIMEOUT;
 8003aea:	2003      	movs	r0, #3
 8003aec:	e033      	b.n	8003b56 <HAL_UART_Transmit+0xee>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	464b      	mov	r3, r9
 8003af2:	881b      	ldrh	r3, [r3, #0]
 8003af4:	05db      	lsls	r3, r3, #23
 8003af6:	0ddb      	lsrs	r3, r3, #23
 8003af8:	6293      	str	r3, [r2, #40]	@ 0x28
        pdata16bits++;
 8003afa:	2302      	movs	r3, #2
 8003afc:	469c      	mov	ip, r3
 8003afe:	44e1      	add	r9, ip
      huart->TxXferCount--;
 8003b00:	5ba2      	ldrh	r2, [r4, r6]
 8003b02:	3a01      	subs	r2, #1
 8003b04:	b292      	uxth	r2, r2
 8003b06:	53a2      	strh	r2, [r4, r6]
    while (huart->TxXferCount > 0U)
 8003b08:	5ba3      	ldrh	r3, [r4, r6]
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d00f      	beq.n	8003b30 <HAL_UART_Transmit+0xc8>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003b10:	9700      	str	r7, [sp, #0]
 8003b12:	4643      	mov	r3, r8
 8003b14:	2200      	movs	r2, #0
 8003b16:	2180      	movs	r1, #128	@ 0x80
 8003b18:	0020      	movs	r0, r4
 8003b1a:	f7ff ff53 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003b1e:	2800      	cmp	r0, #0
 8003b20:	d1e0      	bne.n	8003ae4 <HAL_UART_Transmit+0x7c>
      if (pdata8bits == NULL)
 8003b22:	2d00      	cmp	r5, #0
 8003b24:	d0e3      	beq.n	8003aee <HAL_UART_Transmit+0x86>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b26:	6823      	ldr	r3, [r4, #0]
 8003b28:	782a      	ldrb	r2, [r5, #0]
 8003b2a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003b2c:	3501      	adds	r5, #1
 8003b2e:	e7e7      	b.n	8003b00 <HAL_UART_Transmit+0x98>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b30:	9700      	str	r7, [sp, #0]
 8003b32:	4643      	mov	r3, r8
 8003b34:	2200      	movs	r2, #0
 8003b36:	2140      	movs	r1, #64	@ 0x40
 8003b38:	0020      	movs	r0, r4
 8003b3a:	f7ff ff43 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003b3e:	2800      	cmp	r0, #0
 8003b40:	d103      	bne.n	8003b4a <HAL_UART_Transmit+0xe2>
    huart->gState = HAL_UART_STATE_READY;
 8003b42:	2388      	movs	r3, #136	@ 0x88
 8003b44:	2220      	movs	r2, #32
 8003b46:	50e2      	str	r2, [r4, r3]
    return HAL_OK;
 8003b48:	e005      	b.n	8003b56 <HAL_UART_Transmit+0xee>
      huart->gState = HAL_UART_STATE_READY;
 8003b4a:	2388      	movs	r3, #136	@ 0x88
 8003b4c:	2220      	movs	r2, #32
 8003b4e:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003b50:	2003      	movs	r0, #3
 8003b52:	e000      	b.n	8003b56 <HAL_UART_Transmit+0xee>
    return HAL_BUSY;
 8003b54:	2002      	movs	r0, #2
}
 8003b56:	b003      	add	sp, #12
 8003b58:	bcc0      	pop	{r6, r7}
 8003b5a:	46b9      	mov	r9, r7
 8003b5c:	46b0      	mov	r8, r6
 8003b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      return  HAL_ERROR;
 8003b60:	2001      	movs	r0, #1
 8003b62:	e7f8      	b.n	8003b56 <HAL_UART_Transmit+0xee>
 8003b64:	2001      	movs	r0, #1
 8003b66:	e7f6      	b.n	8003b56 <HAL_UART_Transmit+0xee>
        return  HAL_ERROR;
 8003b68:	2001      	movs	r0, #1
 8003b6a:	e7f4      	b.n	8003b56 <HAL_UART_Transmit+0xee>

08003b6c <UART_CheckIdleState>:
{
 8003b6c:	b530      	push	{r4, r5, lr}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b72:	2390      	movs	r3, #144	@ 0x90
 8003b74:	2200      	movs	r2, #0
 8003b76:	50c2      	str	r2, [r0, r3]
  tickstart = HAL_GetTick();
 8003b78:	f7fd feb8 	bl	80018ec <HAL_GetTick>
 8003b7c:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b7e:	6823      	ldr	r3, [r4, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	071b      	lsls	r3, r3, #28
 8003b84:	d411      	bmi.n	8003baa <UART_CheckIdleState+0x3e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b86:	6823      	ldr	r3, [r4, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	075b      	lsls	r3, r3, #29
 8003b8c:	d429      	bmi.n	8003be2 <UART_CheckIdleState+0x76>
  huart->gState = HAL_UART_STATE_READY;
 8003b8e:	2320      	movs	r3, #32
 8003b90:	2288      	movs	r2, #136	@ 0x88
 8003b92:	50a3      	str	r3, [r4, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003b94:	3204      	adds	r2, #4
 8003b96:	50a3      	str	r3, [r4, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	66e3      	str	r3, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b9c:	6723      	str	r3, [r4, #112]	@ 0x70
  return HAL_OK;
 8003b9e:	2000      	movs	r0, #0
      __HAL_UNLOCK(huart);
 8003ba0:	2384      	movs	r3, #132	@ 0x84
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	54e2      	strb	r2, [r4, r3]
}
 8003ba6:	b003      	add	sp, #12
 8003ba8:	bd30      	pop	{r4, r5, pc}
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003baa:	2180      	movs	r1, #128	@ 0x80
 8003bac:	4b20      	ldr	r3, [pc, #128]	@ (8003c30 <UART_CheckIdleState+0xc4>)
 8003bae:	9300      	str	r3, [sp, #0]
 8003bb0:	0003      	movs	r3, r0
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	0389      	lsls	r1, r1, #14
 8003bb6:	0020      	movs	r0, r4
 8003bb8:	f7ff ff04 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003bbc:	2800      	cmp	r0, #0
 8003bbe:	d0e2      	beq.n	8003b86 <UART_CheckIdleState+0x1a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bc0:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	f383 8810 	msr	PRIMASK, r3
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003bca:	6822      	ldr	r2, [r4, #0]
 8003bcc:	6813      	ldr	r3, [r2, #0]
 8003bce:	2080      	movs	r0, #128	@ 0x80
 8003bd0:	4383      	bics	r3, r0
 8003bd2:	6013      	str	r3, [r2, #0]
 8003bd4:	f381 8810 	msr	PRIMASK, r1
      huart->gState = HAL_UART_STATE_READY;
 8003bd8:	2388      	movs	r3, #136	@ 0x88
 8003bda:	2220      	movs	r2, #32
 8003bdc:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003bde:	387d      	subs	r0, #125	@ 0x7d
 8003be0:	e7de      	b.n	8003ba0 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003be2:	2180      	movs	r1, #128	@ 0x80
 8003be4:	4b12      	ldr	r3, [pc, #72]	@ (8003c30 <UART_CheckIdleState+0xc4>)
 8003be6:	9300      	str	r3, [sp, #0]
 8003be8:	002b      	movs	r3, r5
 8003bea:	2200      	movs	r2, #0
 8003bec:	03c9      	lsls	r1, r1, #15
 8003bee:	0020      	movs	r0, r4
 8003bf0:	f7ff fee8 	bl	80039c4 <UART_WaitOnFlagUntilTimeout>
 8003bf4:	2800      	cmp	r0, #0
 8003bf6:	d0ca      	beq.n	8003b8e <UART_CheckIdleState+0x22>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bf8:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003c02:	6821      	ldr	r1, [r4, #0]
 8003c04:	680b      	ldr	r3, [r1, #0]
 8003c06:	4d0b      	ldr	r5, [pc, #44]	@ (8003c34 <UART_CheckIdleState+0xc8>)
 8003c08:	402b      	ands	r3, r5
 8003c0a:	600b      	str	r3, [r1, #0]
 8003c0c:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c10:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c14:	f382 8810 	msr	PRIMASK, r2
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c18:	6821      	ldr	r1, [r4, #0]
 8003c1a:	688b      	ldr	r3, [r1, #8]
 8003c1c:	4393      	bics	r3, r2
 8003c1e:	608b      	str	r3, [r1, #8]
 8003c20:	f380 8810 	msr	PRIMASK, r0
      huart->RxState = HAL_UART_STATE_READY;
 8003c24:	238c      	movs	r3, #140	@ 0x8c
 8003c26:	321f      	adds	r2, #31
 8003c28:	50e2      	str	r2, [r4, r3]
      return HAL_TIMEOUT;
 8003c2a:	2003      	movs	r0, #3
 8003c2c:	e7b8      	b.n	8003ba0 <UART_CheckIdleState+0x34>
 8003c2e:	46c0      	nop			@ (mov r8, r8)
 8003c30:	01ffffff 	.word	0x01ffffff
 8003c34:	fffffedf 	.word	0xfffffedf

08003c38 <HAL_UART_Init>:
{
 8003c38:	b510      	push	{r4, lr}
 8003c3a:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 8003c3c:	d030      	beq.n	8003ca0 <HAL_UART_Init+0x68>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003c3e:	2388      	movs	r3, #136	@ 0x88
 8003c40:	58c3      	ldr	r3, [r0, r3]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d022      	beq.n	8003c8c <HAL_UART_Init+0x54>
  huart->gState = HAL_UART_STATE_BUSY;
 8003c46:	2388      	movs	r3, #136	@ 0x88
 8003c48:	2224      	movs	r2, #36	@ 0x24
 8003c4a:	50e2      	str	r2, [r4, r3]
  __HAL_UART_DISABLE(huart);
 8003c4c:	6822      	ldr	r2, [r4, #0]
 8003c4e:	6813      	ldr	r3, [r2, #0]
 8003c50:	2101      	movs	r1, #1
 8003c52:	438b      	bics	r3, r1
 8003c54:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c56:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d11d      	bne.n	8003c98 <HAL_UART_Init+0x60>
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c5c:	0020      	movs	r0, r4
 8003c5e:	f7ff fd37 	bl	80036d0 <UART_SetConfig>
 8003c62:	2801      	cmp	r0, #1
 8003c64:	d011      	beq.n	8003c8a <HAL_UART_Init+0x52>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c66:	6822      	ldr	r2, [r4, #0]
 8003c68:	6853      	ldr	r3, [r2, #4]
 8003c6a:	490e      	ldr	r1, [pc, #56]	@ (8003ca4 <HAL_UART_Init+0x6c>)
 8003c6c:	400b      	ands	r3, r1
 8003c6e:	6053      	str	r3, [r2, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	6893      	ldr	r3, [r2, #8]
 8003c74:	212a      	movs	r1, #42	@ 0x2a
 8003c76:	438b      	bics	r3, r1
 8003c78:	6093      	str	r3, [r2, #8]
  __HAL_UART_ENABLE(huart);
 8003c7a:	6822      	ldr	r2, [r4, #0]
 8003c7c:	6813      	ldr	r3, [r2, #0]
 8003c7e:	3929      	subs	r1, #41	@ 0x29
 8003c80:	430b      	orrs	r3, r1
 8003c82:	6013      	str	r3, [r2, #0]
  return (UART_CheckIdleState(huart));
 8003c84:	0020      	movs	r0, r4
 8003c86:	f7ff ff71 	bl	8003b6c <UART_CheckIdleState>
}
 8003c8a:	bd10      	pop	{r4, pc}
    huart->Lock = HAL_UNLOCKED;
 8003c8c:	3384      	adds	r3, #132	@ 0x84
 8003c8e:	2200      	movs	r2, #0
 8003c90:	54c2      	strb	r2, [r0, r3]
    HAL_UART_MspInit(huart);
 8003c92:	f7fd fd37 	bl	8001704 <HAL_UART_MspInit>
 8003c96:	e7d6      	b.n	8003c46 <HAL_UART_Init+0xe>
    UART_AdvFeatureConfig(huart);
 8003c98:	0020      	movs	r0, r4
 8003c9a:	f7ff fe23 	bl	80038e4 <UART_AdvFeatureConfig>
 8003c9e:	e7dd      	b.n	8003c5c <HAL_UART_Init+0x24>
    return HAL_ERROR;
 8003ca0:	2001      	movs	r0, #1
 8003ca2:	e7f2      	b.n	8003c8a <HAL_UART_Init+0x52>
 8003ca4:	ffffb7ff 	.word	0xffffb7ff

08003ca8 <UART_Start_Receive_DMA>:
{
 8003ca8:	b510      	push	{r4, lr}
 8003caa:	0004      	movs	r4, r0
 8003cac:	0013      	movs	r3, r2
  huart->pRxBuffPtr = pData;
 8003cae:	6581      	str	r1, [r0, #88]	@ 0x58
  huart->RxXferSize = Size;
 8003cb0:	225c      	movs	r2, #92	@ 0x5c
 8003cb2:	5283      	strh	r3, [r0, r2]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cb4:	3234      	adds	r2, #52	@ 0x34
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	5081      	str	r1, [r0, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cba:	3a04      	subs	r2, #4
 8003cbc:	3122      	adds	r1, #34	@ 0x22
 8003cbe:	5081      	str	r1, [r0, r2]
  if (huart->hdmarx != NULL)
 8003cc0:	3a0c      	subs	r2, #12
 8003cc2:	5882      	ldr	r2, [r0, r2]
 8003cc4:	2a00      	cmp	r2, #0
 8003cc6:	d013      	beq.n	8003cf0 <UART_Start_Receive_DMA+0x48>
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cc8:	4921      	ldr	r1, [pc, #132]	@ (8003d50 <UART_Start_Receive_DMA+0xa8>)
 8003cca:	62d1      	str	r1, [r2, #44]	@ 0x2c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003ccc:	2080      	movs	r0, #128	@ 0x80
 8003cce:	5822      	ldr	r2, [r4, r0]
 8003cd0:	4920      	ldr	r1, [pc, #128]	@ (8003d54 <UART_Start_Receive_DMA+0xac>)
 8003cd2:	6311      	str	r1, [r2, #48]	@ 0x30
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cd4:	5822      	ldr	r2, [r4, r0]
 8003cd6:	4920      	ldr	r1, [pc, #128]	@ (8003d58 <UART_Start_Receive_DMA+0xb0>)
 8003cd8:	6351      	str	r1, [r2, #52]	@ 0x34
    huart->hdmarx->XferAbortCallback = NULL;
 8003cda:	5822      	ldr	r2, [r4, r0]
 8003cdc:	2100      	movs	r1, #0
 8003cde:	6391      	str	r1, [r2, #56]	@ 0x38
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003ce0:	6da2      	ldr	r2, [r4, #88]	@ 0x58
 8003ce2:	6821      	ldr	r1, [r4, #0]
 8003ce4:	3124      	adds	r1, #36	@ 0x24
 8003ce6:	5820      	ldr	r0, [r4, r0]
 8003ce8:	f7fe fa84 	bl	80021f4 <HAL_DMA_Start_IT>
 8003cec:	2800      	cmp	r0, #0
 8003cee:	d126      	bne.n	8003d3e <UART_Start_Receive_DMA+0x96>
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003cf0:	6923      	ldr	r3, [r4, #16]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d00b      	beq.n	8003d0e <UART_Start_Receive_DMA+0x66>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf6:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	f383 8810 	msr	PRIMASK, r3
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d00:	6822      	ldr	r2, [r4, #0]
 8003d02:	6810      	ldr	r0, [r2, #0]
 8003d04:	33ff      	adds	r3, #255	@ 0xff
 8003d06:	4303      	orrs	r3, r0
 8003d08:	6013      	str	r3, [r2, #0]
 8003d0a:	f381 8810 	msr	PRIMASK, r1
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0e:	f3ef 8010 	mrs	r0, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d12:	2301      	movs	r3, #1
 8003d14:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d18:	6821      	ldr	r1, [r4, #0]
 8003d1a:	688a      	ldr	r2, [r1, #8]
 8003d1c:	431a      	orrs	r2, r3
 8003d1e:	608a      	str	r2, [r1, #8]
 8003d20:	f380 8810 	msr	PRIMASK, r0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d24:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d28:	f383 8810 	msr	PRIMASK, r3
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2c:	6822      	ldr	r2, [r4, #0]
 8003d2e:	6893      	ldr	r3, [r2, #8]
 8003d30:	2040      	movs	r0, #64	@ 0x40
 8003d32:	4303      	orrs	r3, r0
 8003d34:	6093      	str	r3, [r2, #8]
 8003d36:	f381 8810 	msr	PRIMASK, r1
  return HAL_OK;
 8003d3a:	2000      	movs	r0, #0
}
 8003d3c:	bd10      	pop	{r4, pc}
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d3e:	2390      	movs	r3, #144	@ 0x90
 8003d40:	2210      	movs	r2, #16
 8003d42:	50e2      	str	r2, [r4, r3]
      huart->RxState = HAL_UART_STATE_READY;
 8003d44:	3b04      	subs	r3, #4
 8003d46:	3210      	adds	r2, #16
 8003d48:	50e2      	str	r2, [r4, r3]
      return HAL_ERROR;
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	e7f6      	b.n	8003d3c <UART_Start_Receive_DMA+0x94>
 8003d4e:	46c0      	nop			@ (mov r8, r8)
 8003d50:	08003639 	.word	0x08003639
 8003d54:	08003619 	.word	0x08003619
 8003d58:	0800325d 	.word	0x0800325d

08003d5c <HAL_UART_Receive_DMA>:
{
 8003d5c:	b570      	push	{r4, r5, r6, lr}
 8003d5e:	0003      	movs	r3, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d60:	208c      	movs	r0, #140	@ 0x8c
 8003d62:	5818      	ldr	r0, [r3, r0]
 8003d64:	2820      	cmp	r0, #32
 8003d66:	d125      	bne.n	8003db4 <HAL_UART_Receive_DMA+0x58>
    if ((pData == NULL) || (Size == 0U))
 8003d68:	2900      	cmp	r1, #0
 8003d6a:	d025      	beq.n	8003db8 <HAL_UART_Receive_DMA+0x5c>
 8003d6c:	2a00      	cmp	r2, #0
 8003d6e:	d025      	beq.n	8003dbc <HAL_UART_Receive_DMA+0x60>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d70:	2080      	movs	r0, #128	@ 0x80
 8003d72:	0140      	lsls	r0, r0, #5
 8003d74:	689c      	ldr	r4, [r3, #8]
 8003d76:	4284      	cmp	r4, r0
 8003d78:	d105      	bne.n	8003d86 <HAL_UART_Receive_DMA+0x2a>
 8003d7a:	6918      	ldr	r0, [r3, #16]
 8003d7c:	2800      	cmp	r0, #0
 8003d7e:	d102      	bne.n	8003d86 <HAL_UART_Receive_DMA+0x2a>
        return  HAL_ERROR;
 8003d80:	3001      	adds	r0, #1
      if ((((uint32_t)pData) & 1U) != 0U)
 8003d82:	07cc      	lsls	r4, r1, #31
 8003d84:	d417      	bmi.n	8003db6 <HAL_UART_Receive_DMA+0x5a>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d86:	2000      	movs	r0, #0
 8003d88:	66d8      	str	r0, [r3, #108]	@ 0x6c
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003d8a:	6818      	ldr	r0, [r3, #0]
 8003d8c:	6840      	ldr	r0, [r0, #4]
 8003d8e:	0200      	lsls	r0, r0, #8
 8003d90:	d50c      	bpl.n	8003dac <HAL_UART_Receive_DMA+0x50>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d92:	f3ef 8c10 	mrs	ip, PRIMASK
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d96:	2001      	movs	r0, #1
 8003d98:	f380 8810 	msr	PRIMASK, r0
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003d9c:	681c      	ldr	r4, [r3, #0]
 8003d9e:	6825      	ldr	r5, [r4, #0]
 8003da0:	2080      	movs	r0, #128	@ 0x80
 8003da2:	04c0      	lsls	r0, r0, #19
 8003da4:	4328      	orrs	r0, r5
 8003da6:	6020      	str	r0, [r4, #0]
 8003da8:	f38c 8810 	msr	PRIMASK, ip
    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003dac:	0018      	movs	r0, r3
 8003dae:	f7ff ff7b 	bl	8003ca8 <UART_Start_Receive_DMA>
 8003db2:	e000      	b.n	8003db6 <HAL_UART_Receive_DMA+0x5a>
    return HAL_BUSY;
 8003db4:	2002      	movs	r0, #2
}
 8003db6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8003db8:	2001      	movs	r0, #1
 8003dba:	e7fc      	b.n	8003db6 <HAL_UART_Receive_DMA+0x5a>
 8003dbc:	2001      	movs	r0, #1
 8003dbe:	e7fa      	b.n	8003db6 <HAL_UART_Receive_DMA+0x5a>

08003dc0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc2:	0004      	movs	r4, r0
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003dc4:	6e43      	ldr	r3, [r0, #100]	@ 0x64
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <UARTEx_SetNbDataToProcess+0x18>
  {
    huart->NbTxDataToProcess = 1U;
 8003dca:	336a      	adds	r3, #106	@ 0x6a
 8003dcc:	2201      	movs	r2, #1
 8003dce:	52c2      	strh	r2, [r0, r3]
    huart->NbRxDataToProcess = 1U;
 8003dd0:	2001      	movs	r0, #1
 8003dd2:	2368      	movs	r3, #104	@ 0x68
 8003dd4:	52e0      	strh	r0, [r4, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003dd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003dd8:	6803      	ldr	r3, [r0, #0]
 8003dda:	689d      	ldr	r5, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	0f5b      	lsrs	r3, r3, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003de0:	4f08      	ldr	r7, [pc, #32]	@ (8003e04 <UARTEx_SetNbDataToProcess+0x44>)
 8003de2:	5cf8      	ldrb	r0, [r7, r3]
 8003de4:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003de6:	4e08      	ldr	r6, [pc, #32]	@ (8003e08 <UARTEx_SetNbDataToProcess+0x48>)
 8003de8:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003dea:	f7fc fa1d 	bl	8000228 <__divsi3>
 8003dee:	236a      	movs	r3, #106	@ 0x6a
 8003df0:	52e0      	strh	r0, [r4, r3]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003df2:	012b      	lsls	r3, r5, #4
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003df4:	0f5b      	lsrs	r3, r3, #29
 8003df6:	5cf8      	ldrb	r0, [r7, r3]
 8003df8:	00c0      	lsls	r0, r0, #3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003dfa:	5cf1      	ldrb	r1, [r6, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003dfc:	f7fc fa14 	bl	8000228 <__divsi3>
 8003e00:	b280      	uxth	r0, r0
 8003e02:	e7e6      	b.n	8003dd2 <UARTEx_SetNbDataToProcess+0x12>
 8003e04:	08006ddc 	.word	0x08006ddc
 8003e08:	08006dd4 	.word	0x08006dd4

08003e0c <HAL_UARTEx_WakeupCallback>:
}
 8003e0c:	4770      	bx	lr

08003e0e <HAL_UARTEx_RxFifoFullCallback>:
}
 8003e0e:	4770      	bx	lr

08003e10 <HAL_UARTEx_TxFifoEmptyCallback>:
}
 8003e10:	4770      	bx	lr
	...

08003e14 <HAL_UARTEx_DisableFifoMode>:
{
 8003e14:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 8003e16:	2384      	movs	r3, #132	@ 0x84
 8003e18:	5cc3      	ldrb	r3, [r0, r3]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d015      	beq.n	8003e4a <HAL_UARTEx_DisableFifoMode+0x36>
 8003e1e:	2484      	movs	r4, #132	@ 0x84
 8003e20:	2601      	movs	r6, #1
 8003e22:	5506      	strb	r6, [r0, r4]
  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	2588      	movs	r5, #136	@ 0x88
 8003e26:	2324      	movs	r3, #36	@ 0x24
 8003e28:	5143      	str	r3, [r0, r5]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e2a:	6802      	ldr	r2, [r0, #0]
 8003e2c:	6813      	ldr	r3, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003e2e:	6811      	ldr	r1, [r2, #0]
 8003e30:	43b1      	bics	r1, r6
 8003e32:	6011      	str	r1, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003e34:	4a06      	ldr	r2, [pc, #24]	@ (8003e50 <HAL_UARTEx_DisableFifoMode+0x3c>)
 8003e36:	4013      	ands	r3, r2
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003e38:	2200      	movs	r2, #0
 8003e3a:	6642      	str	r2, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e3c:	6801      	ldr	r1, [r0, #0]
 8003e3e:	600b      	str	r3, [r1, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003e40:	2320      	movs	r3, #32
 8003e42:	5143      	str	r3, [r0, r5]
  __HAL_UNLOCK(huart);
 8003e44:	5502      	strb	r2, [r0, r4]
  return HAL_OK;
 8003e46:	2000      	movs	r0, #0
}
 8003e48:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	e7fc      	b.n	8003e48 <HAL_UARTEx_DisableFifoMode+0x34>
 8003e4e:	46c0      	nop			@ (mov r8, r8)
 8003e50:	dfffffff 	.word	0xdfffffff

08003e54 <HAL_UARTEx_SetTxFifoThreshold>:
{
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	0004      	movs	r4, r0
 8003e58:	000a      	movs	r2, r1
  __HAL_LOCK(huart);
 8003e5a:	2384      	movs	r3, #132	@ 0x84
 8003e5c:	5cc3      	ldrb	r3, [r0, r3]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d01b      	beq.n	8003e9a <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8003e62:	2584      	movs	r5, #132	@ 0x84
 8003e64:	2001      	movs	r0, #1
 8003e66:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003e68:	2688      	movs	r6, #136	@ 0x88
 8003e6a:	2324      	movs	r3, #36	@ 0x24
 8003e6c:	51a3      	str	r3, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003e6e:	6823      	ldr	r3, [r4, #0]
 8003e70:	681f      	ldr	r7, [r3, #0]
  __HAL_UART_DISABLE(huart);
 8003e72:	6819      	ldr	r1, [r3, #0]
 8003e74:	4381      	bics	r1, r0
 8003e76:	6019      	str	r1, [r3, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003e78:	6820      	ldr	r0, [r4, #0]
 8003e7a:	6883      	ldr	r3, [r0, #8]
 8003e7c:	00db      	lsls	r3, r3, #3
 8003e7e:	08d9      	lsrs	r1, r3, #3
 8003e80:	4311      	orrs	r1, r2
 8003e82:	6081      	str	r1, [r0, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003e84:	0020      	movs	r0, r4
 8003e86:	f7ff ff9b 	bl	8003dc0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003e8a:	6823      	ldr	r3, [r4, #0]
 8003e8c:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003e8e:	2320      	movs	r3, #32
 8003e90:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003e92:	2300      	movs	r3, #0
 8003e94:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003e96:	2000      	movs	r0, #0
}
 8003e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003e9a:	2002      	movs	r0, #2
 8003e9c:	e7fc      	b.n	8003e98 <HAL_UARTEx_SetTxFifoThreshold+0x44>
	...

08003ea0 <HAL_UARTEx_SetRxFifoThreshold>:
{
 8003ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ea2:	0004      	movs	r4, r0
 8003ea4:	000b      	movs	r3, r1
  __HAL_LOCK(huart);
 8003ea6:	2284      	movs	r2, #132	@ 0x84
 8003ea8:	5c82      	ldrb	r2, [r0, r2]
 8003eaa:	2a01      	cmp	r2, #1
 8003eac:	d01b      	beq.n	8003ee6 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8003eae:	2584      	movs	r5, #132	@ 0x84
 8003eb0:	2001      	movs	r0, #1
 8003eb2:	5560      	strb	r0, [r4, r5]
  huart->gState = HAL_UART_STATE_BUSY;
 8003eb4:	2688      	movs	r6, #136	@ 0x88
 8003eb6:	2224      	movs	r2, #36	@ 0x24
 8003eb8:	51a2      	str	r2, [r4, r6]
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003eba:	6822      	ldr	r2, [r4, #0]
 8003ebc:	6817      	ldr	r7, [r2, #0]
  __HAL_UART_DISABLE(huart);
 8003ebe:	6811      	ldr	r1, [r2, #0]
 8003ec0:	4381      	bics	r1, r0
 8003ec2:	6011      	str	r1, [r2, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003ec4:	6822      	ldr	r2, [r4, #0]
 8003ec6:	6891      	ldr	r1, [r2, #8]
 8003ec8:	4808      	ldr	r0, [pc, #32]	@ (8003eec <HAL_UARTEx_SetRxFifoThreshold+0x4c>)
 8003eca:	4001      	ands	r1, r0
 8003ecc:	4319      	orrs	r1, r3
 8003ece:	6091      	str	r1, [r2, #8]
  UARTEx_SetNbDataToProcess(huart);
 8003ed0:	0020      	movs	r0, r4
 8003ed2:	f7ff ff75 	bl	8003dc0 <UARTEx_SetNbDataToProcess>
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ed6:	6823      	ldr	r3, [r4, #0]
 8003ed8:	601f      	str	r7, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8003eda:	2320      	movs	r3, #32
 8003edc:	51a3      	str	r3, [r4, r6]
  __HAL_UNLOCK(huart);
 8003ede:	2300      	movs	r3, #0
 8003ee0:	5563      	strb	r3, [r4, r5]
  return HAL_OK;
 8003ee2:	2000      	movs	r0, #0
}
 8003ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	e7fc      	b.n	8003ee4 <HAL_UARTEx_SetRxFifoThreshold+0x44>
 8003eea:	46c0      	nop			@ (mov r8, r8)
 8003eec:	f1ffffff 	.word	0xf1ffffff

08003ef0 <app_core>:
 */
#include "app_core.h"
#include "bc_power.h"

void app_core()
{
 8003ef0:	b510      	push	{r4, lr}
	auto& app = BC_Power::instance();
 8003ef2:	f000 f999 	bl	8004228 <_ZN8BC_Power8instanceEv>
	app.loop();
 8003ef6:	f000 f8a1 	bl	800403c <_ZN8BC_Power4loopEv>
}
 8003efa:	bd10      	pop	{r4, pc}

08003efc <_ZN8BC_Power16uart_tx_callbackEaP13PoolContainer>:

    bool init(const reg capacity);

public:
    inline void clear() { tail = 0; head = 0; }
    inline bool isEmpty() const { return tail == head; }
 8003efc:	690a      	ldr	r2, [r1, #16]
 8003efe:	694b      	ldr	r3, [r1, #20]
	}
}

void BC_Power::uart_tx_callback(const status_t status, PoolContainer* const pool)
{
	if(!pool->isEmpty()) {
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d002      	beq.n	8003f0a <_ZN8BC_Power16uart_tx_callbackEaP13PoolContainer+0xe>

protected:
    inline void setHead(const reg new_head) {head = new_head; }
    inline void incrementHead() {++head;}
    inline void setTail(const reg new_tail) {tail = new_tail; }
    inline void incrementTail() {++tail; }
 8003f04:	690b      	ldr	r3, [r1, #16]
 8003f06:	3301      	adds	r3, #1
 8003f08:	610b      	str	r3, [r1, #16]
		pool->nextReadPos();
	}
}
 8003f0a:	4770      	bx	lr

08003f0c <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation>:
    public:
      static bool
      _M_manager(_Any_data& __dest, const _Any_data& __source,
		 _Manager_operation __op)
      {
	switch (__op)
 8003f0c:	2a01      	cmp	r2, #1
 8003f0e:	d102      	bne.n	8003f16 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0xa>
	  case __get_type_info:
	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	    break;
#endif
	  case __get_functor_ptr:
	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
 8003f10:	6001      	str	r1, [r0, #0]

	  default:
	    _Base::_M_manager(__dest, __source, __op);
	  }
	return false;
      }
 8003f12:	2000      	movs	r0, #0
 8003f14:	4770      	bx	lr
	  switch (__op)
 8003f16:	2a02      	cmp	r2, #2
 8003f18:	d003      	beq.n	8003f22 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x16>
 8003f1a:	d8fa      	bhi.n	8003f12 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	      __dest._M_access<const type_info*>() = nullptr;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	6003      	str	r3, [r0, #0]
	      break;
 8003f20:	e7f7      	b.n	8003f12 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 8003f22:	680b      	ldr	r3, [r1, #0]
 8003f24:	6003      	str	r3, [r0, #0]
	  }
 8003f26:	e7f4      	b.n	8003f12 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E10_M_managerERSt9_Any_dataRKS6_St18_Manager_operation+0x6>

08003f28 <_ZN13PoolContainerD0Ev>:
class PoolContainer : public RingBase
{
public:
	PoolContainer() = default;
	// std::vector and std::unique_ptr will take care of memory deallocation
	~PoolContainer() override final = default;
 8003f28:	b570      	push	{r4, r5, r6, lr}
 8003f2a:	0006      	movs	r6, r0
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8003f64 <_ZN13PoolContainerD0Ev+0x3c>)
 8003f2e:	6003      	str	r3, [r0, #0]
       *  responsibility.
       */
      _GLIBCXX20_CONSTEXPR
      ~vector() _GLIBCXX_NOEXCEPT
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003f30:	6984      	ldr	r4, [r0, #24]
 8003f32:	69c5      	ldr	r5, [r0, #28]
    {
      template<typename _ForwardIterator>
	static _GLIBCXX20_CONSTEXPR void
	__destroy(_ForwardIterator __first, _ForwardIterator __last)
	{
	  for (; __first != __last; ++__first)
 8003f34:	42ac      	cmp	r4, r5
 8003f36:	d10f      	bne.n	8003f58 <_ZN13PoolContainerD0Ev+0x30>
	_M_deallocate(_M_impl._M_start,
 8003f38:	69b0      	ldr	r0, [r6, #24]
	if (__p)
 8003f3a:	2800      	cmp	r0, #0
 8003f3c:	d003      	beq.n	8003f46 <_ZN13PoolContainerD0Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003f3e:	6a31      	ldr	r1, [r6, #32]
 8003f40:	1a09      	subs	r1, r1, r0
	    _GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n),
				     std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8003f42:	f001 fbd9 	bl	80056f8 <_ZdlPvj>
 8003f46:	2128      	movs	r1, #40	@ 0x28
 8003f48:	0030      	movs	r0, r6
 8003f4a:	f001 fbd5 	bl	80056f8 <_ZdlPvj>
 8003f4e:	0030      	movs	r0, r6
 8003f50:	bd70      	pop	{r4, r5, r6, pc}
 8003f52:	3404      	adds	r4, #4
 8003f54:	42a5      	cmp	r5, r4
 8003f56:	d0ef      	beq.n	8003f38 <_ZN13PoolContainerD0Ev+0x10>
      constexpr
#endif
      ~unique_ptr()
      {
	auto& __ptr = _M_t._M_ptr();
	if (__ptr != nullptr)
 8003f58:	6820      	ldr	r0, [r4, #0]
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	d0f9      	beq.n	8003f52 <_ZN13PoolContainerD0Ev+0x2a>
	  delete [] __ptr;
 8003f5e:	f001 fbcf 	bl	8005700 <_ZdaPv>
	}
 8003f62:	e7f6      	b.n	8003f52 <_ZN13PoolContainerD0Ev+0x2a>
 8003f64:	08006dec 	.word	0x08006dec

08003f68 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E9_M_invokeERKSt9_Any_dataS1_Oh>:

      static _Res
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8003f68:	b570      	push	{r4, r5, r6, lr}
 8003f6a:	0004      	movs	r4, r0
		if(!m_txPool.isFull()) {
 8003f6c:	6803      	ldr	r3, [r0, #0]
    inline bool isFull() const { return (((head ^ tail) & xor_msk) == cap); }
 8003f6e:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8003f70:	6e99      	ldr	r1, [r3, #104]	@ 0x68
 8003f72:	4048      	eors	r0, r1
 8003f74:	6e59      	ldr	r1, [r3, #100]	@ 0x64
 8003f76:	4001      	ands	r1, r0
 8003f78:	6dd8      	ldr	r0, [r3, #92]	@ 0x5c
 8003f7a:	4281      	cmp	r1, r0
 8003f7c:	d100      	bne.n	8003f80 <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E9_M_invokeERKSt9_Any_dataS1_Oh+0x18>
      {
	return std::__invoke_r<_Res>(*_Base::_M_get_pointer(__functor),
				     std::forward<_ArgTypes>(__args)...);
      }
 8003f7e:	bd70      	pop	{r4, r5, r6, pc}
    { return static_cast<_Up&&>(__t); }

  template<typename _Res, typename _Fn, typename... _Args>
    constexpr _Res
    __invoke_impl(__invoke_other, _Fn&& __f, _Args&&... __args)
    { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
 8003f80:	7815      	ldrb	r5, [r2, #0]
			m_parser.newPack(10);
 8003f82:	3380      	adds	r3, #128	@ 0x80
 8003f84:	0018      	movs	r0, r3
 8003f86:	210a      	movs	r1, #10
 8003f88:	f000 f997 	bl	80042ba <_ZN16RawParserDynamic7newPackEt>
			m_parser.addTx(id);
 8003f8c:	6820      	ldr	r0, [r4, #0]
 8003f8e:	3080      	adds	r0, #128	@ 0x80
 8003f90:	0029      	movs	r1, r5
 8003f92:	f000 fa6c 	bl	800446e <_ZN16RawParserDynamic5addTxIhEEbT_>
			RingBuff& tx_data = m_parser.endPack();
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	3080      	adds	r0, #128	@ 0x80
 8003f9a:	f000 f9ff 	bl	800439c <_ZN16RawParserDynamic7endPackEv>
				     std::forward<_ArgTypes>(__args)...);
 8003f9e:	e7ee      	b.n	8003f7e <_ZNSt17_Function_handlerIFvR8RingBuffhEZN8BC_PowerC4EvEUlS1_hE_E9_M_invokeERKSt9_Any_dataS1_Oh+0x16>

08003fa0 <_ZN8BC_Power16uart_rx_callbackEPhmP16RawParserDynamic>:

void BC_Power::uart_rx_callback(u8* const data, u32 const size, RawParserDynamic* const raw_p)
{
 8003fa0:	b510      	push	{r4, lr}
 8003fa2:	0003      	movs	r3, r0
	m_in.inputRing.putc(b);
}

inline void RawParserDynamic::proceedIncomeBytes(u8* const data, const reg len)
{
	m_in.inputRing.put(data, len);
 8003fa4:	3210      	adds	r2, #16
 8003fa6:	0010      	movs	r0, r2
 8003fa8:	000a      	movs	r2, r1
 8003faa:	0019      	movs	r1, r3
 8003fac:	f000 feb2 	bl	8004d14 <_ZN8RingBuff3putEPKvj>
	raw_p->proceedIncomeBytes(data, size);
}
 8003fb0:	bd10      	pop	{r4, pc}
	...

08003fb4 <_ZN13PoolContainerD1Ev>:
 8003fb4:	b570      	push	{r4, r5, r6, lr}
 8003fb6:	0006      	movs	r6, r0
 8003fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8003fe8 <_ZN13PoolContainerD1Ev+0x34>)
 8003fba:	6003      	str	r3, [r0, #0]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003fbc:	6984      	ldr	r4, [r0, #24]
 8003fbe:	69c5      	ldr	r5, [r0, #28]
 8003fc0:	42ac      	cmp	r4, r5
 8003fc2:	d10b      	bne.n	8003fdc <_ZN13PoolContainerD1Ev+0x28>
	_M_deallocate(_M_impl._M_start,
 8003fc4:	69b0      	ldr	r0, [r6, #24]
	if (__p)
 8003fc6:	2800      	cmp	r0, #0
 8003fc8:	d003      	beq.n	8003fd2 <_ZN13PoolContainerD1Ev+0x1e>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8003fca:	6a31      	ldr	r1, [r6, #32]
 8003fcc:	1a09      	subs	r1, r1, r0
 8003fce:	f001 fb93 	bl	80056f8 <_ZdlPvj>
 8003fd2:	0030      	movs	r0, r6
 8003fd4:	bd70      	pop	{r4, r5, r6, pc}
 8003fd6:	3404      	adds	r4, #4
 8003fd8:	42a5      	cmp	r5, r4
 8003fda:	d0f3      	beq.n	8003fc4 <_ZN13PoolContainerD1Ev+0x10>
	if (__ptr != nullptr)
 8003fdc:	6820      	ldr	r0, [r4, #0]
 8003fde:	2800      	cmp	r0, #0
 8003fe0:	d0f9      	beq.n	8003fd6 <_ZN13PoolContainerD1Ev+0x22>
	  delete [] __ptr;
 8003fe2:	f001 fb8d 	bl	8005700 <_ZdaPv>
	}
 8003fe6:	e7f6      	b.n	8003fd6 <_ZN13PoolContainerD1Ev+0x22>
 8003fe8:	08006dec 	.word	0x08006dec

08003fec <__tcf_0>:
	static BC_Power instance;
 8003fec:	b570      	push	{r4, r5, r6, lr}
 * ******************************************************
 */
class BC_Power
{
	BC_Power();
	~BC_Power() = default;
 8003fee:	4c10      	ldr	r4, [pc, #64]	@ (8004030 <__tcf_0+0x44>)
 8003ff0:	0020      	movs	r0, r4
 8003ff2:	f000 fccb 	bl	800498c <_ZN16RawParserDynamicD1Ev>
 8003ff6:	0020      	movs	r0, r4
 8003ff8:	3880      	subs	r0, #128	@ 0x80
 8003ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <__tcf_0+0x48>)
 8003ffc:	6583      	str	r3, [r0, #88]	@ 0x58
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8003ffe:	6f04      	ldr	r4, [r0, #112]	@ 0x70
 8004000:	6f45      	ldr	r5, [r0, #116]	@ 0x74
 8004002:	42ac      	cmp	r4, r5
 8004004:	d10e      	bne.n	8004024 <__tcf_0+0x38>
	_M_deallocate(_M_impl._M_start,
 8004006:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <__tcf_0+0x4c>)
 8004008:	6f18      	ldr	r0, [r3, #112]	@ 0x70
	if (__p)
 800400a:	2800      	cmp	r0, #0
 800400c:	d003      	beq.n	8004016 <__tcf_0+0x2a>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800400e:	6f99      	ldr	r1, [r3, #120]	@ 0x78
 8004010:	1a09      	subs	r1, r1, r0
 8004012:	f001 fb71 	bl	80056f8 <_ZdlPvj>
 8004016:	4808      	ldr	r0, [pc, #32]	@ (8004038 <__tcf_0+0x4c>)
 8004018:	f001 f99c 	bl	8005354 <_ZN12Stm32ADC_dmaD1Ev>
 800401c:	bd70      	pop	{r4, r5, r6, pc}
 800401e:	3404      	adds	r4, #4
 8004020:	42a5      	cmp	r5, r4
 8004022:	d0f0      	beq.n	8004006 <__tcf_0+0x1a>
	if (__ptr != nullptr)
 8004024:	6820      	ldr	r0, [r4, #0]
 8004026:	2800      	cmp	r0, #0
 8004028:	d0f9      	beq.n	800401e <__tcf_0+0x32>
	  delete [] __ptr;
 800402a:	f001 fb69 	bl	8005700 <_ZdaPv>
	}
 800402e:	e7f6      	b.n	800401e <__tcf_0+0x32>
 8004030:	20000320 	.word	0x20000320
 8004034:	08006dec 	.word	0x08006dec
 8004038:	200002a0 	.word	0x200002a0

0800403c <_ZN8BC_Power4loopEv>:
{
 800403c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800403e:	46c6      	mov	lr, r8
 8004040:	b500      	push	{lr}
 8004042:	0005      	movs	r5, r0
	m_adc.start();
 8004044:	f001 f8ac 	bl	80051a0 <_ZN12Stm32ADC_dma5startEv>
		m_parser.proceed(time);
 8004048:	002e      	movs	r6, r5
 800404a:	3680      	adds	r6, #128	@ 0x80
 * @param   -
 * @return  Booleon value:
 *           - true: device is busy
 *           - false: device is idle
 *****************************************************************************/
static inline bool UART_IsTxBusy(stm32_DMA_uart_t* const self) { return self->isTxBusy_; }
 800404c:	002f      	movs	r7, r5
 800404e:	372c      	adds	r7, #44	@ 0x2c
			txPoolElem* const elem = static_cast<txPoolElem*>(m_txPool.getWriteBuffer());
 8004050:	2358      	movs	r3, #88	@ 0x58
 8004052:	4698      	mov	r8, r3
 8004054:	44a8      	add	r8, r5
		const u32 time = HAL_GetTick();
 8004056:	f7fd fc49 	bl	80018ec <HAL_GetTick>
 800405a:	0004      	movs	r4, r0
		m_adc.proceed(time);
 800405c:	0001      	movs	r1, r0
 800405e:	0028      	movs	r0, r5
 8004060:	f001 f8ab 	bl	80051ba <_ZN12Stm32ADC_dma7proceedEm>
		m_parser.proceed(time);
 8004064:	0021      	movs	r1, r4
 8004066:	0030      	movs	r0, r6
 8004068:	f000 fb16 	bl	8004698 <_ZN16RawParserDynamic7proceedEm>
    inline bool isEmpty() const { return tail == head; }
 800406c:	6eaa      	ldr	r2, [r5, #104]	@ 0x68
 800406e:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
		if(!m_txPool.isEmpty() && !UART_IsTxBusy(&m_uart)) {
 8004070:	429a      	cmp	r2, r3
 8004072:	d0f0      	beq.n	8004056 <_ZN8BC_Power4loopEv+0x1a>
 8004074:	793b      	ldrb	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1ed      	bne.n	8004056 <_ZN8BC_Power4loopEv+0x1a>
			txPoolElem* const elem = static_cast<txPoolElem*>(m_txPool.getWriteBuffer());
 800407a:	4640      	mov	r0, r8
 800407c:	f000 fcc4 	bl	8004a08 <_ZN13PoolContainer14getWriteBufferEv>
 8004080:	0001      	movs	r1, r0
			UART_SendBuffer(&m_uart, elem->data, elem->size);
 8004082:	8802      	ldrh	r2, [r0, #0]
 8004084:	3102      	adds	r1, #2
 8004086:	0038      	movs	r0, r7
 8004088:	f001 f9ba 	bl	8005400 <UART_SendBuffer>
 800408c:	e7e3      	b.n	8004056 <_ZN8BC_Power4loopEv+0x1a>
	...

08004090 <_ZN8BC_Power7init_hwEv>:


//--------------------------------------------------------
void BC_Power::init_hw()
{
 8004090:	b500      	push	{lr}
 8004092:	b083      	sub	sp, #12
	//init adc ----------------------------------------
	extern ADC_HandleTypeDef hadc1;
	Stm32ADC_dma::Init adc_init = {
 8004094:	4b04      	ldr	r3, [pc, #16]	@ (80040a8 <_ZN8BC_Power7init_hwEv+0x18>)
 8004096:	9300      	str	r3, [sp, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	9301      	str	r3, [sp, #4]
			.hadc = &hadc1,
			.filter = 1/512
	};

	m_adc.init(adc_init);
 800409c:	4669      	mov	r1, sp
 800409e:	f001 f91b 	bl	80052d8 <_ZN12Stm32ADC_dma4initERKNS_4InitE>
}
 80040a2:	b003      	add	sp, #12
 80040a4:	bd00      	pop	{pc}
 80040a6:	46c0      	nop			@ (mov r8, r8)
 80040a8:	200000e4 	.word	0x200000e4

080040ac <_ZN8BC_PowerC1Ev>:
BC_Power::BC_Power()
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	46ce      	mov	lr, r9
 80040b0:	4647      	mov	r7, r8
 80040b2:	b580      	push	{r7, lr}
 80040b4:	b08d      	sub	sp, #52	@ 0x34
 80040b6:	0005      	movs	r5, r0
		ADC_HandleTypeDef* hadc;
		float filter;
	};

public:
	Stm32ADC_dma() = default;
 80040b8:	2400      	movs	r4, #0
 80040ba:	6004      	str	r4, [r0, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	7104      	strb	r4, [r0, #4]
 80040c0:	6084      	str	r4, [r0, #8]
 80040c2:	7304      	strb	r4, [r0, #12]
#include "my_cpp_types.h"

class FP_MovingAverageBase
{
public:
	FP_MovingAverageBase() = default;
 80040c4:	7504      	strb	r4, [r0, #20]
 80040c6:	7544      	strb	r4, [r0, #21]
 80040c8:	7584      	strb	r4, [r0, #22]
 80040ca:	2300      	movs	r3, #0
 80040cc:	6183      	str	r3, [r0, #24]
 80040ce:	61c4      	str	r4, [r0, #28]
#include "FPMovingAverageBase.h"

class FP_MovingAverageArray: public FP_MovingAverageBase
{
public:
	FP_MovingAverageArray() = default;
 80040d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004208 <_ZN8BC_PowerC1Ev+0x15c>)
 80040d2:	6103      	str	r3, [r0, #16]
 80040d4:	6204      	str	r4, [r0, #32]
 80040d6:	6244      	str	r4, [r0, #36]	@ 0x24
 80040d8:	2328      	movs	r3, #40	@ 0x28
 80040da:	54c4      	strb	r4, [r0, r3]
 80040dc:	0006      	movs	r6, r0
 80040de:	3658      	adds	r6, #88	@ 0x58
	RingBase() = default;
 80040e0:	65c4      	str	r4, [r0, #92]	@ 0x5c
 80040e2:	6604      	str	r4, [r0, #96]	@ 0x60
 80040e4:	6644      	str	r4, [r0, #100]	@ 0x64
 80040e6:	6684      	str	r4, [r0, #104]	@ 0x68
 80040e8:	66c4      	str	r4, [r0, #108]	@ 0x6c
	PoolContainer() = default;
 80040ea:	4b48      	ldr	r3, [pc, #288]	@ (800420c <_ZN8BC_PowerC1Ev+0x160>)
 80040ec:	6583      	str	r3, [r0, #88]	@ 0x58
	: _M_start(), _M_finish(), _M_end_of_storage()
 80040ee:	6704      	str	r4, [r0, #112]	@ 0x70
 80040f0:	6744      	str	r4, [r0, #116]	@ 0x74
 80040f2:	6784      	str	r4, [r0, #120]	@ 0x78
 80040f4:	84b4      	strh	r4, [r6, #36]	@ 0x24
	struct RX_handler {
 80040f6:	2100      	movs	r1, #0
 80040f8:	2384      	movs	r3, #132	@ 0x84
 80040fa:	54c1      	strb	r1, [r0, r3]
 80040fc:	3084      	adds	r0, #132	@ 0x84
 80040fe:	6044      	str	r4, [r0, #4]
 8004100:	002b      	movs	r3, r5
 8004102:	3390      	adds	r3, #144	@ 0x90
 8004104:	605c      	str	r4, [r3, #4]
 8004106:	609c      	str	r4, [r3, #8]
 8004108:	60dc      	str	r4, [r3, #12]
 800410a:	611c      	str	r4, [r3, #16]
 800410c:	615c      	str	r4, [r3, #20]
class CrcCalculator;

class RingBuff : public RingBase
{
public:
	RingBuff() = default;
 800410e:	4940      	ldr	r1, [pc, #256]	@ (8004210 <_ZN8BC_PowerC1Ev+0x164>)
 8004110:	2790      	movs	r7, #144	@ 0x90
 8004112:	51e9      	str	r1, [r5, r7]
 8004114:	619c      	str	r4, [r3, #24]
 8004116:	771a      	strb	r2, [r3, #28]
 8004118:	3320      	adds	r3, #32
 800411a:	605c      	str	r4, [r3, #4]
 800411c:	609c      	str	r4, [r3, #8]
 800411e:	60dc      	str	r4, [r3, #12]
 8004120:	611c      	str	r4, [r3, #16]
 8004122:	615c      	str	r4, [r3, #20]
 8004124:	3720      	adds	r7, #32
 8004126:	51e9      	str	r1, [r5, r7]
 8004128:	619c      	str	r4, [r3, #24]
 800412a:	771a      	strb	r2, [r3, #28]
 800412c:	64c4      	str	r4, [r0, #76]	@ 0x4c
 800412e:	6504      	str	r4, [r0, #80]	@ 0x50
 8004130:	3328      	adds	r3, #40	@ 0x28
 8004132:	701a      	strb	r2, [r3, #0]
    _Rb_tree_node_base	_M_header;
    size_t		_M_node_count; // Keeps track of size of tree.

    _Rb_tree_header() _GLIBCXX_NOEXCEPT
    {
      _M_header._M_color = _S_red;
 8004134:	23e0      	movs	r3, #224	@ 0xe0
 8004136:	54ea      	strb	r2, [r5, r3]
    }

    void
    _M_reset()
    {
      _M_header._M_parent = 0;
 8004138:	002b      	movs	r3, r5
 800413a:	33e0      	adds	r3, #224	@ 0xe0
 800413c:	605c      	str	r4, [r3, #4]
      _M_header._M_left = &_M_header;
 800413e:	609b      	str	r3, [r3, #8]
      _M_header._M_right = &_M_header;
 8004140:	60db      	str	r3, [r3, #12]
      _M_node_count = 0;
 8004142:	611c      	str	r4, [r3, #16]
 8004144:	3314      	adds	r3, #20
 8004146:	605c      	str	r4, [r3, #4]
 8004148:	609c      	str	r4, [r3, #8]
 800414a:	60dc      	str	r4, [r3, #12]
 800414c:	611c      	str	r4, [r3, #16]
 800414e:	615c      	str	r4, [r3, #20]
 8004150:	20f4      	movs	r0, #244	@ 0xf4
 8004152:	5029      	str	r1, [r5, r0]
 8004154:	619c      	str	r4, [r3, #24]
 8004156:	771a      	strb	r2, [r3, #28]
	struct TX_handler {
 8004158:	621c      	str	r4, [r3, #32]
 800415a:	625c      	str	r4, [r3, #36]	@ 0x24
      /**
       *  @brief Creates an empty function call wrapper.
       *  @post @c !(bool)*this
       */
      function(nullptr_t) noexcept
      : _Function_base() { }
 800415c:	002f      	movs	r7, r5
 800415e:	371d      	adds	r7, #29
 8004160:	37ff      	adds	r7, #255	@ 0xff
 8004162:	220c      	movs	r2, #12
 8004164:	2100      	movs	r1, #0
 8004166:	0038      	movs	r0, r7
 8004168:	f002 fb7f 	bl	800686a <memset>
 800416c:	60fc      	str	r4, [r7, #12]
	m_txPool.init(4, sizeof(txPoolElem) + 128);
 800416e:	2282      	movs	r2, #130	@ 0x82
 8004170:	2104      	movs	r1, #4
 8004172:	0030      	movs	r0, r6
 8004174:	f000 fcc2 	bl	8004afc <_ZN13PoolContainer4initEtt>
	txPoolElem* const elem = static_cast<txPoolElem*>(m_txPool.getWriteBuffer());
 8004178:	0030      	movs	r0, r6
 800417a:	f000 fc45 	bl	8004a08 <_ZN13PoolContainer14getWriteBufferEv>
 800417e:	0007      	movs	r7, r0
	UART_Init(&m_uart, &huart1, 128);
 8004180:	232c      	movs	r3, #44	@ 0x2c
 8004182:	4699      	mov	r9, r3
 8004184:	44a9      	add	r9, r5
 8004186:	4923      	ldr	r1, [pc, #140]	@ (8004214 <_ZN8BC_PowerC1Ev+0x168>)
 8004188:	2280      	movs	r2, #128	@ 0x80
 800418a:	4648      	mov	r0, r9
 800418c:	f001 fa22 	bl	80055d4 <UART_Init>
	UART_SetTxcallback(&m_uart, reinterpret_cast<uart_tx_callback_t>(uart_tx_callback), &m_txPool);
 8004190:	4921      	ldr	r1, [pc, #132]	@ (8004218 <_ZN8BC_PowerC1Ev+0x16c>)
 8004192:	0032      	movs	r2, r6
 8004194:	4648      	mov	r0, r9
 8004196:	f001 f958 	bl	800544a <UART_SetTxcallback>
	UART_SetRxCallback(&m_uart, reinterpret_cast<uart_rx_callback_t>(uart_rx_callback), &m_parser);
 800419a:	2380      	movs	r3, #128	@ 0x80
 800419c:	4698      	mov	r8, r3
 800419e:	44a8      	add	r8, r5
 80041a0:	491e      	ldr	r1, [pc, #120]	@ (800421c <_ZN8BC_PowerC1Ev+0x170>)
 80041a2:	4642      	mov	r2, r8
 80041a4:	4648      	mov	r0, r9
 80041a6:	f001 f9f7 	bl	8005598 <UART_SetRxCallback>
	RawParserDynamic::Init rawp_init = {
 80041aa:	ae01      	add	r6, sp, #4
 80041ac:	221c      	movs	r2, #28
 80041ae:	2100      	movs	r1, #0
 80041b0:	0030      	movs	r0, r6
 80041b2:	f002 fb5a 	bl	800686a <memset>
 80041b6:	231a      	movs	r3, #26
 80041b8:	7033      	strb	r3, [r6, #0]
 80041ba:	3366      	adds	r3, #102	@ 0x66
 80041bc:	9302      	str	r3, [sp, #8]
 80041be:	2280      	movs	r2, #128	@ 0x80
 80041c0:	0052      	lsls	r2, r2, #1
 80041c2:	9203      	str	r2, [sp, #12]
 80041c4:	9305      	str	r3, [sp, #20]
			.txBuffer = elem->data,
 80041c6:	3702      	adds	r7, #2
	};
 80041c8:	9706      	str	r7, [sp, #24]
	m_parser.init(rawp_init);
 80041ca:	0031      	movs	r1, r6
 80041cc:	4640      	mov	r0, r8
 80041ce:	f000 f843 	bl	8004258 <_ZN16RawParserDynamic4initERKNS_4InitE>
      // 2774. std::function construction vs assignment
      template<typename _Functor,
	       typename _Constraints = _Requires<_Callable<_Functor>>>
	function(_Functor&& __f)
	noexcept(_Handler<_Functor>::template _S_nothrow_init<_Functor>())
	: _Function_base()
 80041d2:	9409      	str	r4, [sp, #36]	@ 0x24
	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
 80041d4:	9508      	str	r5, [sp, #32]

	  if (_My_handler::_M_not_empty_function(__f))
	    {
	      _My_handler::_M_init_functor(_M_functor,
					   std::forward<_Functor>(__f));
	      _M_invoker = &_My_handler::_M_invoke;
 80041d6:	4b12      	ldr	r3, [pc, #72]	@ (8004220 <_ZN8BC_PowerC1Ev+0x174>)
 80041d8:	930b      	str	r3, [sp, #44]	@ 0x2c
	      _M_manager = &_My_handler::_M_manager;
 80041da:	4b12      	ldr	r3, [pc, #72]	@ (8004224 <_ZN8BC_PowerC1Ev+0x178>)
 80041dc:	930a      	str	r3, [sp, #40]	@ 0x28
	m_parser.subscribe(0x01, [&](RingBuff& data, const u8 id) {
 80041de:	aa08      	add	r2, sp, #32
 80041e0:	2101      	movs	r1, #1
 80041e2:	4640      	mov	r0, r8
 80041e4:	f000 fb74 	bl	80048d0 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE>
      if (_M_manager)
 80041e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d003      	beq.n	80041f6 <_ZN8BC_PowerC1Ev+0x14a>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80041ee:	2203      	movs	r2, #3
 80041f0:	a908      	add	r1, sp, #32
 80041f2:	0008      	movs	r0, r1
 80041f4:	4798      	blx	r3
	init_hw();
 80041f6:	0028      	movs	r0, r5
 80041f8:	f7ff ff4a 	bl	8004090 <_ZN8BC_Power7init_hwEv>
}
 80041fc:	0028      	movs	r0, r5
 80041fe:	b00d      	add	sp, #52	@ 0x34
 8004200:	bcc0      	pop	{r6, r7}
 8004202:	46b9      	mov	r9, r7
 8004204:	46b0      	mov	r8, r6
 8004206:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004208:	08007d40 	.word	0x08007d40
 800420c:	08006dec 	.word	0x08006dec
 8004210:	08006e30 	.word	0x08006e30
 8004214:	20000204 	.word	0x20000204
 8004218:	08003efd 	.word	0x08003efd
 800421c:	08003fa1 	.word	0x08003fa1
 8004220:	08003f69 	.word	0x08003f69
 8004224:	08003f0d 	.word	0x08003f0d

08004228 <_ZN8BC_Power8instanceEv>:
{
 8004228:	b510      	push	{r4, lr}
	static BC_Power instance;
 800422a:	4808      	ldr	r0, [pc, #32]	@ (800424c <_ZN8BC_Power8instanceEv+0x24>)
 800422c:	f001 fa6c 	bl	8005708 <__cxa_guard_acquire>
 8004230:	2800      	cmp	r0, #0
 8004232:	d101      	bne.n	8004238 <_ZN8BC_Power8instanceEv+0x10>
	return instance;
 8004234:	4806      	ldr	r0, [pc, #24]	@ (8004250 <_ZN8BC_Power8instanceEv+0x28>)
}
 8004236:	bd10      	pop	{r4, pc}
	static BC_Power instance;
 8004238:	4805      	ldr	r0, [pc, #20]	@ (8004250 <_ZN8BC_Power8instanceEv+0x28>)
 800423a:	f7ff ff37 	bl	80040ac <_ZN8BC_PowerC1Ev>
 800423e:	4805      	ldr	r0, [pc, #20]	@ (8004254 <_ZN8BC_Power8instanceEv+0x2c>)
 8004240:	f001 fcf0 	bl	8005c24 <atexit>
 8004244:	4801      	ldr	r0, [pc, #4]	@ (800424c <_ZN8BC_Power8instanceEv+0x24>)
 8004246:	f001 fa6c 	bl	8005722 <__cxa_guard_release>
 800424a:	e7f3      	b.n	8004234 <_ZN8BC_Power8instanceEv+0xc>
 800424c:	2000029c 	.word	0x2000029c
 8004250:	200002a0 	.word	0x200002a0
 8004254:	08003fed 	.word	0x08003fed

08004258 <_ZN16RawParserDynamic4initERKNS_4InitE>:
 * INIT
 * *********************************************************
 */

bool RawParserDynamic::init(const Init &strategy)
{
 8004258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800425a:	0004      	movs	r4, r0
 800425c:	000d      	movs	r5, r1
	if((EXTENDED_LEN_CMD != SB) && (SB == 0)) {
 800425e:	7803      	ldrb	r3, [r0, #0]
		return false;
 8004260:	2000      	movs	r0, #0
	if((EXTENDED_LEN_CMD != SB) && (SB == 0)) {
 8004262:	2b00      	cmp	r3, #0
 8004264:	d100      	bne.n	8004268 <_ZN16RawParserDynamic4initERKNS_4InitE+0x10>
	// TX init --------------------------------------------------------------
	m_out.frameStream.init(strategy.txBuffer, strategy.txFrameSize);
	m_out.txCRC = CrcFactory::createCRC(strategy.crc_strategy);

	return true;
}
 8004266:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	SB = strategy.SB;
 8004268:	780b      	ldrb	r3, [r1, #0]
 800426a:	7023      	strb	r3, [r4, #0]
	m_in.inputRing.init(nullptr, strategy.rxRingSize);
 800426c:	684a      	ldr	r2, [r1, #4]
 800426e:	0020      	movs	r0, r4
 8004270:	3010      	adds	r0, #16
 8004272:	2100      	movs	r1, #0
 8004274:	f000 fce2 	bl	8004c3c <_ZN8RingBuff4initEPvj>
	m_in.frameStream.init(strategy.rxBuffer, strategy.rxFrameSize);
 8004278:	68aa      	ldr	r2, [r5, #8]
 800427a:	68e9      	ldr	r1, [r5, #12]
 800427c:	0020      	movs	r0, r4
 800427e:	3030      	adds	r0, #48	@ 0x30
 8004280:	f000 fcdc 	bl	8004c3c <_ZN8RingBuff4initEPvj>
	CrcCalculator* const crc = CrcFactory::createCRC(strategy.crc_strategy);
 8004284:	7e28      	ldrb	r0, [r5, #24]
 8004286:	f000 fe05 	bl	8004e94 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE>
 800428a:	1e06      	subs	r6, r0, #0
	if(crc) {
 800428c:	d008      	beq.n	80042a0 <_ZN16RawParserDynamic4initERKNS_4InitE+0x48>
		m_in.checkCRC = crc;
 800428e:	6520      	str	r0, [r4, #80]	@ 0x50
		m_in.rxCRC = new CrcBase(*crc);
 8004290:	2008      	movs	r0, #8
 8004292:	f001 fa49 	bl	8005728 <_Znwj>
 8004296:	0007      	movs	r7, r0
 8004298:	0031      	movs	r1, r6
 800429a:	f000 fdc6 	bl	8004e2a <_ZN7CrcBaseC1ERKS_>
 800429e:	6567      	str	r7, [r4, #84]	@ 0x54
	m_out.frameStream.init(strategy.txBuffer, strategy.txFrameSize);
 80042a0:	692a      	ldr	r2, [r5, #16]
 80042a2:	6969      	ldr	r1, [r5, #20]
 80042a4:	0020      	movs	r0, r4
 80042a6:	3074      	adds	r0, #116	@ 0x74
 80042a8:	f000 fcc8 	bl	8004c3c <_ZN8RingBuff4initEPvj>
	m_out.txCRC = CrcFactory::createCRC(strategy.crc_strategy);
 80042ac:	7e28      	ldrb	r0, [r5, #24]
 80042ae:	f000 fdf1 	bl	8004e94 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE>
 80042b2:	2394      	movs	r3, #148	@ 0x94
 80042b4:	50e0      	str	r0, [r4, r3]
	return true;
 80042b6:	2001      	movs	r0, #1
 80042b8:	e7d5      	b.n	8004266 <_ZN16RawParserDynamic4initERKNS_4InitE+0xe>

080042ba <_ZN16RawParserDynamic7newPackEt>:
 * *********************************************************
 * TX
 * *********************************************************
 */
bool RawParserDynamic::newPack(u16 len)
{
 80042ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042bc:	b083      	sub	sp, #12
 80042be:	0005      	movs	r5, r0
 80042c0:	1e0c      	subs	r4, r1, #0
	if(len == 0 || len > m_out.frameStream.capacity()) {
 80042c2:	d062      	beq.n	800438a <_ZN16RawParserDynamic7newPackEt+0xd0>
 80042c4:	000e      	movs	r6, r1
 80042c6:	6f83      	ldr	r3, [r0, #120]	@ 0x78
 80042c8:	4299      	cmp	r1, r3
 80042ca:	d861      	bhi.n	8004390 <_ZN16RawParserDynamic7newPackEt+0xd6>
		return false;
	}
	// do logic ------------------------------------------------
	if(m_out.txCRC) {
 80042cc:	2394      	movs	r3, #148	@ 0x94
 80042ce:	58c3      	ldr	r3, [r0, r3]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d002      	beq.n	80042da <_ZN16RawParserDynamic7newPackEt+0x20>
	// Copy constructor
	CrcCalculator(const CrcCalculator& other);
	//destructor
	~CrcCalculator() = default;

	inline void init() { m_init_f(m_crc); }
 80042d4:	6818      	ldr	r0, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	4798      	blx	r3
    inline void clear() { tail = 0; head = 0; }
 80042da:	2300      	movs	r3, #0
 80042dc:	2284      	movs	r2, #132	@ 0x84
 80042de:	50ab      	str	r3, [r5, r2]
 80042e0:	3204      	adds	r2, #4
 80042e2:	50ab      	str	r3, [r5, r2]
		m_out.txCRC->init();
	}

	m_out.frameStream.clear();
	m_out.lengthControl = len;
 80042e4:	3398      	adds	r3, #152	@ 0x98
 80042e6:	50ee      	str	r6, [r5, r3]

	m_out.frameStream.putc(SB);
 80042e8:	002e      	movs	r6, r5
 80042ea:	3674      	adds	r6, #116	@ 0x74
 80042ec:	7829      	ldrb	r1, [r5, #0]
 80042ee:	0030      	movs	r0, r6
 80042f0:	f000 fd54 	bl	8004d9c <_ZN8RingBuff4putcEh>

	if(len > EXTENDED_LEN_SEPARATOR) {
 80042f4:	2cfb      	cmp	r4, #251	@ 0xfb
 80042f6:	d813      	bhi.n	8004320 <_ZN16RawParserDynamic7newPackEt+0x66>
			const u8 arr[3] = {EXTENDED_LEN_CMD, len_l, len_h};
			m_out.txCRC->array(arr, sizeof(arr));
		}

	} else {
		const u16 len_reg = (len >= SB) ? (len + 1U) : len;
 80042f8:	782b      	ldrb	r3, [r5, #0]
 80042fa:	42a3      	cmp	r3, r4
 80042fc:	d801      	bhi.n	8004302 <_ZN16RawParserDynamic7newPackEt+0x48>
 80042fe:	3401      	adds	r4, #1
 8004300:	b2a4      	uxth	r4, r4
		m_out.frameStream.putc(len_reg);
 8004302:	b2e4      	uxtb	r4, r4
 8004304:	0021      	movs	r1, r4
 8004306:	0030      	movs	r0, r6
 8004308:	f000 fd48 	bl	8004d9c <_ZN8RingBuff4putcEh>

		if(m_out.txCRC) {
 800430c:	2394      	movs	r3, #148	@ 0x94
 800430e:	58eb      	ldr	r3, [r5, r3]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d041      	beq.n	8004398 <_ZN16RawParserDynamic7newPackEt+0xde>
	inline void array(const u8* const data, const reg len) { m_array_f(m_crc, data, len); }
	inline void byte(const u8 data) { m_byte_f(m_crc, data); }
 8004314:	6818      	ldr	r0, [r3, #0]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	0021      	movs	r1, r4
 800431a:	4798      	blx	r3
			m_out.txCRC->byte(len_reg);
		}
	}
	return true;
 800431c:	2001      	movs	r0, #1
 800431e:	e035      	b.n	800438c <_ZN16RawParserDynamic7newPackEt+0xd2>
		const u8 len_l = static_cast<u8>(len & 0xFF);
 8004320:	b2e7      	uxtb	r7, r4
		const u8 len_h = static_cast<u8>((len >> 8) & 0xFF);
 8004322:	0a24      	lsrs	r4, r4, #8
		m_out.frameStream.putc(EXTENDED_LEN_CMD);
 8004324:	21ff      	movs	r1, #255	@ 0xff
 8004326:	0030      	movs	r0, r6
 8004328:	f000 fd38 	bl	8004d9c <_ZN8RingBuff4putcEh>
 * TX
 * *********************************************************
 */
inline void RawParserDynamic::_pushToTX(const u8 c)
{
	if(c == SB) {
 800432c:	782b      	ldrb	r3, [r5, #0]
 800432e:	429f      	cmp	r7, r3
 8004330:	d019      	beq.n	8004366 <_ZN16RawParserDynamic7newPackEt+0xac>
		const u8 arr[2] = {SB, SB};
		m_out.frameStream.put(arr, sizeof(arr));
	} else {
		m_out.frameStream.putc(c);
 8004332:	0039      	movs	r1, r7
 8004334:	0030      	movs	r0, r6
 8004336:	f000 fd31 	bl	8004d9c <_ZN8RingBuff4putcEh>
	if(c == SB) {
 800433a:	782b      	ldrb	r3, [r5, #0]
 800433c:	429c      	cmp	r4, r3
 800433e:	d01b      	beq.n	8004378 <_ZN16RawParserDynamic7newPackEt+0xbe>
		m_out.frameStream.putc(c);
 8004340:	0021      	movs	r1, r4
 8004342:	0030      	movs	r0, r6
 8004344:	f000 fd2a 	bl	8004d9c <_ZN8RingBuff4putcEh>
		if(m_out.txCRC) {
 8004348:	2394      	movs	r3, #148	@ 0x94
 800434a:	58eb      	ldr	r3, [r5, r3]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d021      	beq.n	8004394 <_ZN16RawParserDynamic7newPackEt+0xda>
			const u8 arr[3] = {EXTENDED_LEN_CMD, len_l, len_h};
 8004350:	a901      	add	r1, sp, #4
 8004352:	22ff      	movs	r2, #255	@ 0xff
 8004354:	700a      	strb	r2, [r1, #0]
 8004356:	704f      	strb	r7, [r1, #1]
 8004358:	708c      	strb	r4, [r1, #2]
	inline void array(const u8* const data, const reg len) { m_array_f(m_crc, data, len); }
 800435a:	6818      	ldr	r0, [r3, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	3afc      	subs	r2, #252	@ 0xfc
 8004360:	4798      	blx	r3
	return true;
 8004362:	2001      	movs	r0, #1
 8004364:	e012      	b.n	800438c <_ZN16RawParserDynamic7newPackEt+0xd2>
		const u8 arr[2] = {SB, SB};
 8004366:	466a      	mov	r2, sp
 8004368:	7113      	strb	r3, [r2, #4]
 800436a:	7153      	strb	r3, [r2, #5]
		m_out.frameStream.put(arr, sizeof(arr));
 800436c:	2202      	movs	r2, #2
 800436e:	a901      	add	r1, sp, #4
 8004370:	0030      	movs	r0, r6
 8004372:	f000 fccf 	bl	8004d14 <_ZN8RingBuff3putEPKvj>
 8004376:	e7e0      	b.n	800433a <_ZN16RawParserDynamic7newPackEt+0x80>
		const u8 arr[2] = {SB, SB};
 8004378:	466a      	mov	r2, sp
 800437a:	7113      	strb	r3, [r2, #4]
 800437c:	7153      	strb	r3, [r2, #5]
		m_out.frameStream.put(arr, sizeof(arr));
 800437e:	2202      	movs	r2, #2
 8004380:	a901      	add	r1, sp, #4
 8004382:	0030      	movs	r0, r6
 8004384:	f000 fcc6 	bl	8004d14 <_ZN8RingBuff3putEPKvj>
 8004388:	e7de      	b.n	8004348 <_ZN16RawParserDynamic7newPackEt+0x8e>
		return false;
 800438a:	2000      	movs	r0, #0
}
 800438c:	b003      	add	sp, #12
 800438e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return false;
 8004390:	2000      	movs	r0, #0
 8004392:	e7fb      	b.n	800438c <_ZN16RawParserDynamic7newPackEt+0xd2>
	return true;
 8004394:	2001      	movs	r0, #1
 8004396:	e7f9      	b.n	800438c <_ZN16RawParserDynamic7newPackEt+0xd2>
 8004398:	2001      	movs	r0, #1
 800439a:	e7f7      	b.n	800438c <_ZN16RawParserDynamic7newPackEt+0xd2>

0800439c <_ZN16RawParserDynamic7endPackEv>:

RingBuff& RawParserDynamic::endPack()
{
 800439c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800439e:	46ce      	mov	lr, r9
 80043a0:	4647      	mov	r7, r8
 80043a2:	b580      	push	{r7, lr}
 80043a4:	b083      	sub	sp, #12
 80043a6:	0004      	movs	r4, r0
	// fill remaining len
	if(m_out.txCRC) {
 80043a8:	2394      	movs	r3, #148	@ 0x94
 80043aa:	58c3      	ldr	r3, [r0, r3]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d023      	beq.n	80043f8 <_ZN16RawParserDynamic7endPackEv+0x5c>

		while(m_out.lengthControl--) {
 80043b0:	2298      	movs	r2, #152	@ 0x98
 80043b2:	5883      	ldr	r3, [r0, r2]
 80043b4:	1e59      	subs	r1, r3, #1
 80043b6:	5081      	str	r1, [r0, r2]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d011      	beq.n	80043e0 <_ZN16RawParserDynamic7endPackEv+0x44>
			m_out.frameStream.putc(0x00);
 80043bc:	0007      	movs	r7, r0
 80043be:	3774      	adds	r7, #116	@ 0x74
			m_out.txCRC->byte(0x00);
 80043c0:	2694      	movs	r6, #148	@ 0x94
		while(m_out.lengthControl--) {
 80043c2:	2598      	movs	r5, #152	@ 0x98
			m_out.frameStream.putc(0x00);
 80043c4:	2100      	movs	r1, #0
 80043c6:	0038      	movs	r0, r7
 80043c8:	f000 fce8 	bl	8004d9c <_ZN8RingBuff4putcEh>
			m_out.txCRC->byte(0x00);
 80043cc:	59a3      	ldr	r3, [r4, r6]
	inline void byte(const u8 data) { m_byte_f(m_crc, data); }
 80043ce:	6818      	ldr	r0, [r3, #0]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	2100      	movs	r1, #0
 80043d4:	4798      	blx	r3
		while(m_out.lengthControl--) {
 80043d6:	5963      	ldr	r3, [r4, r5]
 80043d8:	1e5a      	subs	r2, r3, #1
 80043da:	5162      	str	r2, [r4, r5]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d1f1      	bne.n	80043c4 <_ZN16RawParserDynamic7endPackEv+0x28>
		}

		CrcCalculator& crc = *(m_out.txCRC);
 80043e0:	2394      	movs	r3, #148	@ 0x94
 80043e2:	58e7      	ldr	r7, [r4, r3]
    void put(const reg index, const u8 b);
    u8& operator[](const reg index);
    const u8& operator[](const reg index) const;

    inline void* const crc() const { return m_crc; }
    inline u8 size() const { return m_crc_size; }
 80043e4:	793b      	ldrb	r3, [r7, #4]
 80043e6:	4698      	mov	r8, r3
		u8 const tx_crc_size = crc.size();
		LittleEndianGeneric(crc.crc(), tx_crc_size);

		for(u8 i = 0; i != tx_crc_size; ++i) {
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d017      	beq.n	800441c <_ZN16RawParserDynamic7endPackEv+0x80>
 80043ec:	2500      	movs	r5, #0
		m_out.frameStream.putc(c);
 80043ee:	2374      	movs	r3, #116	@ 0x74
 80043f0:	4699      	mov	r9, r3
 80043f2:	44a1      	add	r9, r4
		const u8 arr[2] = {SB, SB};
 80043f4:	ae01      	add	r6, sp, #4
 80043f6:	e02e      	b.n	8004456 <_ZN16RawParserDynamic7endPackEv+0xba>
			_pushToTX(crc[i]);
		}

	} else {
		while(m_out.lengthControl--) {
 80043f8:	2298      	movs	r2, #152	@ 0x98
 80043fa:	5883      	ldr	r3, [r0, r2]
 80043fc:	1e59      	subs	r1, r3, #1
 80043fe:	5081      	str	r1, [r0, r2]
			m_out.frameStream.putc(0x00);
 8004400:	0006      	movs	r6, r0
 8004402:	3674      	adds	r6, #116	@ 0x74
		while(m_out.lengthControl--) {
 8004404:	2598      	movs	r5, #152	@ 0x98
 8004406:	2b00      	cmp	r3, #0
 8004408:	d008      	beq.n	800441c <_ZN16RawParserDynamic7endPackEv+0x80>
			m_out.frameStream.putc(0x00);
 800440a:	2100      	movs	r1, #0
 800440c:	0030      	movs	r0, r6
 800440e:	f000 fcc5 	bl	8004d9c <_ZN8RingBuff4putcEh>
		while(m_out.lengthControl--) {
 8004412:	5963      	ldr	r3, [r4, r5]
 8004414:	1e5a      	subs	r2, r3, #1
 8004416:	5162      	str	r2, [r4, r5]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f6      	bne.n	800440a <_ZN16RawParserDynamic7endPackEv+0x6e>
    bool _M_empty() const { return !_M_manager; }
 800441c:	0023      	movs	r3, r4
 800441e:	339c      	adds	r3, #156	@ 0x9c
		}
	}

	if(m_out.sender) {
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d005      	beq.n	8004432 <_ZN16RawParserDynamic7endPackEv+0x96>
		m_out.sender(m_out.frameStream);
 8004426:	0021      	movs	r1, r4
 8004428:	3174      	adds	r1, #116	@ 0x74
      _Res
      operator()(_ArgTypes... __args) const
      {
	if (_M_empty())
	  __throw_bad_function_call();
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800442a:	0020      	movs	r0, r4
 800442c:	309c      	adds	r0, #156	@ 0x9c
 800442e:	68c3      	ldr	r3, [r0, #12]
 8004430:	4798      	blx	r3
	}
	return m_out.frameStream;
 8004432:	0020      	movs	r0, r4
 8004434:	3074      	adds	r0, #116	@ 0x74
}
 8004436:	b003      	add	sp, #12
 8004438:	bcc0      	pop	{r6, r7}
 800443a:	46b9      	mov	r9, r7
 800443c:	46b0      	mov	r8, r6
 800443e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004440:	7033      	strb	r3, [r6, #0]
 8004442:	7073      	strb	r3, [r6, #1]
		m_out.frameStream.put(arr, sizeof(arr));
 8004444:	2202      	movs	r2, #2
 8004446:	0031      	movs	r1, r6
 8004448:	4648      	mov	r0, r9
 800444a:	f000 fc63 	bl	8004d14 <_ZN8RingBuff3putEPKvj>
		for(u8 i = 0; i != tx_crc_size; ++i) {
 800444e:	3501      	adds	r5, #1
 8004450:	b2eb      	uxtb	r3, r5
 8004452:	4543      	cmp	r3, r8
 8004454:	d0e2      	beq.n	800441c <_ZN16RawParserDynamic7endPackEv+0x80>
			_pushToTX(crc[i]);
 8004456:	0029      	movs	r1, r5
 8004458:	0038      	movs	r0, r7
 800445a:	f000 fd0b 	bl	8004e74 <_ZN7CrcBaseixEj>
 800445e:	7801      	ldrb	r1, [r0, #0]
	if(c == SB) {
 8004460:	7823      	ldrb	r3, [r4, #0]
 8004462:	4299      	cmp	r1, r3
 8004464:	d0ec      	beq.n	8004440 <_ZN16RawParserDynamic7endPackEv+0xa4>
		m_out.frameStream.putc(c);
 8004466:	4648      	mov	r0, r9
 8004468:	f000 fc98 	bl	8004d9c <_ZN8RingBuff4putcEh>
 800446c:	e7ef      	b.n	800444e <_ZN16RawParserDynamic7endPackEv+0xb2>

0800446e <_ZN16RawParserDynamic5addTxIhEEbT_>:


template<> bool RawParserDynamic::addTx<u8>(const u8 c)
{
 800446e:	b570      	push	{r4, r5, r6, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	0004      	movs	r4, r0
 8004474:	000d      	movs	r5, r1
	const reg remaining_len = m_out.lengthControl;
 8004476:	2398      	movs	r3, #152	@ 0x98
 8004478:	58c6      	ldr	r6, [r0, r3]
	if(remaining_len < sizeof(u8)) {
 800447a:	2e00      	cmp	r6, #0
 800447c:	d01e      	beq.n	80044bc <_ZN16RawParserDynamic5addTxIhEEbT_+0x4e>
		return false;
	}

	if(m_out.txCRC) {
 800447e:	3b04      	subs	r3, #4
 8004480:	58c3      	ldr	r3, [r0, r3]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d002      	beq.n	800448c <_ZN16RawParserDynamic5addTxIhEEbT_+0x1e>
 8004486:	6818      	ldr	r0, [r3, #0]
 8004488:	691b      	ldr	r3, [r3, #16]
 800448a:	4798      	blx	r3
	if(c == SB) {
 800448c:	7823      	ldrb	r3, [r4, #0]
 800448e:	429d      	cmp	r5, r3
 8004490:	d00a      	beq.n	80044a8 <_ZN16RawParserDynamic5addTxIhEEbT_+0x3a>
		m_out.frameStream.putc(c);
 8004492:	0020      	movs	r0, r4
 8004494:	3074      	adds	r0, #116	@ 0x74
 8004496:	0029      	movs	r1, r5
 8004498:	f000 fc80 	bl	8004d9c <_ZN8RingBuff4putcEh>
		m_out.txCRC->byte(c);
	}

	_pushToTX(c);

	m_out.lengthControl = remaining_len - sizeof(u8);
 800449c:	3e01      	subs	r6, #1
 800449e:	2398      	movs	r3, #152	@ 0x98
 80044a0:	50e6      	str	r6, [r4, r3]
	return true;
 80044a2:	2001      	movs	r0, #1
}
 80044a4:	b002      	add	sp, #8
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
		const u8 arr[2] = {SB, SB};
 80044a8:	466a      	mov	r2, sp
 80044aa:	7113      	strb	r3, [r2, #4]
 80044ac:	7153      	strb	r3, [r2, #5]
		m_out.frameStream.put(arr, sizeof(arr));
 80044ae:	0020      	movs	r0, r4
 80044b0:	3074      	adds	r0, #116	@ 0x74
 80044b2:	2202      	movs	r2, #2
 80044b4:	a901      	add	r1, sp, #4
 80044b6:	f000 fc2d 	bl	8004d14 <_ZN8RingBuff3putEPKvj>
 80044ba:	e7ef      	b.n	800449c <_ZN16RawParserDynamic5addTxIhEEbT_+0x2e>
		return false;
 80044bc:	2000      	movs	r0, #0
 80044be:	e7f1      	b.n	80044a4 <_ZN16RawParserDynamic5addTxIhEEbT_+0x36>

080044c0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_>:

  template<typename _Key, typename _Val, typename _KeyOfValue,
	   typename _Compare, typename _Alloc>
    typename _Rb_tree<_Key, _Val, _KeyOfValue,
		      _Compare, _Alloc>::iterator
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80044c0:	b510      	push	{r4, lr}
 80044c2:	0004      	movs	r4, r0
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80044c4:	6883      	ldr	r3, [r0, #8]
      { return &this->_M_impl._M_header; }
 80044c6:	3404      	adds	r4, #4
      while (__x != 0)
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d012      	beq.n	80044f2 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x32>
    struct less : public binary_function<_Tp, _Tp, bool>
    {
      _GLIBCXX14_CONSTEXPR
      bool
      operator()(const _Tp& __x, const _Tp& __y) const
      { return __x < __y; }
 80044cc:	7809      	ldrb	r1, [r1, #0]
 80044ce:	0020      	movs	r0, r4
 80044d0:	e002      	b.n	80044d8 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x18>
      { return static_cast<_Link_type>(__x->_M_right); }
 80044d2:	68db      	ldr	r3, [r3, #12]
      while (__x != 0)
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d005      	beq.n	80044e4 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x24>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80044d8:	7c1a      	ldrb	r2, [r3, #16]
 80044da:	428a      	cmp	r2, r1
 80044dc:	d3f9      	bcc.n	80044d2 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x12>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80044de:	0018      	movs	r0, r3
	  __y = __x, __x = _S_left(__x);
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	e7f7      	b.n	80044d4 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x14>
    find(const _Key& __k)
    {
      iterator __j = _M_lower_bound(_M_begin(), _M_end(), __k);
      return (__j == end()
	      || _M_impl._M_key_compare(__k,
					_S_key(__j._M_node))) ? end() : __j;
 80044e4:	4284      	cmp	r4, r0
 80044e6:	d003      	beq.n	80044f0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x30>
	      || _M_impl._M_key_compare(__k,
 80044e8:	7c03      	ldrb	r3, [r0, #16]
 80044ea:	428b      	cmp	r3, r1
 80044ec:	d900      	bls.n	80044f0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x30>
 80044ee:	0020      	movs	r0, r4
    }
 80044f0:	bd10      	pop	{r4, pc}
      while (__x != 0)
 80044f2:	0020      	movs	r0, r4
 80044f4:	e7fc      	b.n	80044f0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_+0x30>
	...

080044f8 <_ZN16RawParserDynamic12_proceedByteEhb>:
{
 80044f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044fa:	b083      	sub	sp, #12
 80044fc:	0004      	movs	r4, r0
 80044fe:	000d      	movs	r5, r1
	if (newFrame) {
 8004500:	2a00      	cmp	r2, #0
 8004502:	d027      	beq.n	8004554 <_ZN16RawParserDynamic12_proceedByteEhb+0x5c>
		if(m_in.checkCRC) {
 8004504:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <_ZN16RawParserDynamic12_proceedByteEhb+0x1e>
	inline void init() { m_init_f(m_crc); }
 800450a:	6818      	ldr	r0, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	4798      	blx	r3
			m_in.crcIndex = 0;
 8004510:	2358      	movs	r3, #88	@ 0x58
 8004512:	2200      	movs	r2, #0
 8004514:	54e2      	strb	r2, [r4, r3]
 8004516:	2300      	movs	r3, #0
 8004518:	6423      	str	r3, [r4, #64]	@ 0x40
 800451a:	6463      	str	r3, [r4, #68]	@ 0x44
		m_in.tmpReceiveLen = 0;
 800451c:	60a3      	str	r3, [r4, #8]
		m_in.rxState = RECEIVE_LEN_0;
 800451e:	7323      	strb	r3, [r4, #12]
		if(m_in.checkCRC) {
 8004520:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <_ZN16RawParserDynamic12_proceedByteEhb+0x36>
	inline void byte(const u8 data) { m_byte_f(m_crc, data); }
 8004526:	6818      	ldr	r0, [r3, #0]
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	0029      	movs	r1, r5
 800452c:	4798      	blx	r3
		if(EXTENDED_LEN_CMD == b) {
 800452e:	2dff      	cmp	r5, #255	@ 0xff
 8004530:	d017      	beq.n	8004562 <_ZN16RawParserDynamic12_proceedByteEhb+0x6a>
			const reg rx_len = m_in.tmpReceiveLen = ((b > SB) ? (b - 1U) : b);
 8004532:	7823      	ldrb	r3, [r4, #0]
 8004534:	42ab      	cmp	r3, r5
 8004536:	419b      	sbcs	r3, r3
 8004538:	425b      	negs	r3, r3
 800453a:	1aeb      	subs	r3, r5, r3
 800453c:	60a3      	str	r3, [r4, #8]
 800453e:	2200      	movs	r2, #0
 8004540:	6422      	str	r2, [r4, #64]	@ 0x40
 8004542:	6462      	str	r2, [r4, #68]	@ 0x44
			if(rx_len > m_in.frameStream.capacity() || rx_len == 0) {
 8004544:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8004546:	4293      	cmp	r3, r2
 8004548:	d80e      	bhi.n	8004568 <_ZN16RawParserDynamic12_proceedByteEhb+0x70>
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00c      	beq.n	8004568 <_ZN16RawParserDynamic12_proceedByteEhb+0x70>
			m_in.rxState = RECEIVE_DATA;
 800454e:	2303      	movs	r3, #3
 8004550:	7323      	strb	r3, [r4, #12]
 8004552:	e015      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
	switch(m_in.rxState) {
 8004554:	7b03      	ldrb	r3, [r0, #12]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d812      	bhi.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
 800455a:	009b      	lsls	r3, r3, #2
 800455c:	4a4d      	ldr	r2, [pc, #308]	@ (8004694 <_ZN16RawParserDynamic12_proceedByteEhb+0x19c>)
 800455e:	58d3      	ldr	r3, [r2, r3]
 8004560:	469f      	mov	pc, r3
			m_in.rxState = RECEIVE_LEN_LOW;
 8004562:	2301      	movs	r3, #1
 8004564:	7323      	strb	r3, [r4, #12]
 8004566:	e00b      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
				m_in.rxState = RECEIVE_COMPLEATE;
 8004568:	230c      	movs	r3, #12
 800456a:	7323      	strb	r3, [r4, #12]
				return;
 800456c:	e008      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
		if(m_in.checkCRC) {
 800456e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004570:	2b00      	cmp	r3, #0
 8004572:	d002      	beq.n	800457a <_ZN16RawParserDynamic12_proceedByteEhb+0x82>
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	4798      	blx	r3
		m_in.tmpReceiveLen = b;    // read low byte
 800457a:	60a5      	str	r5, [r4, #8]
		m_in.rxState = RECEIVE_LEN_HIGH;
 800457c:	2302      	movs	r3, #2
 800457e:	7323      	strb	r3, [r4, #12]
}
 8004580:	b003      	add	sp, #12
 8004582:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(m_in.checkCRC) {
 8004584:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8004586:	2b00      	cmp	r3, #0
 8004588:	d002      	beq.n	8004590 <_ZN16RawParserDynamic12_proceedByteEhb+0x98>
 800458a:	6818      	ldr	r0, [r3, #0]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	4798      	blx	r3
		reg rx_len = (static_cast<reg>(b << 8U) | m_in.tmpReceiveLen) & 0x0000FFFFUL ; // read high byte
 8004590:	022d      	lsls	r5, r5, #8
 8004592:	68a3      	ldr	r3, [r4, #8]
 8004594:	431d      	orrs	r5, r3
 8004596:	042d      	lsls	r5, r5, #16
 8004598:	0c2d      	lsrs	r5, r5, #16
		m_in.tmpReceiveLen = rx_len;
 800459a:	60a5      	str	r5, [r4, #8]
 800459c:	2300      	movs	r3, #0
 800459e:	6423      	str	r3, [r4, #64]	@ 0x40
 80045a0:	6463      	str	r3, [r4, #68]	@ 0x44
		if(rx_len > m_in.frameStream.capacity() || rx_len == 0) {
 80045a2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80045a4:	429d      	cmp	r5, r3
 80045a6:	d804      	bhi.n	80045b2 <_ZN16RawParserDynamic12_proceedByteEhb+0xba>
 80045a8:	2d00      	cmp	r5, #0
 80045aa:	d002      	beq.n	80045b2 <_ZN16RawParserDynamic12_proceedByteEhb+0xba>
		m_in.rxState = RECEIVE_DATA;
 80045ac:	2303      	movs	r3, #3
 80045ae:	7323      	strb	r3, [r4, #12]
		break;}
 80045b0:	e7e6      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
			m_in.rxState = RECEIVE_COMPLEATE;
 80045b2:	230c      	movs	r3, #12
 80045b4:	7323      	strb	r3, [r4, #12]
			return;
 80045b6:	e7e3      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
		m_in.frameStream.putc(b);
 80045b8:	0006      	movs	r6, r0
 80045ba:	3630      	adds	r6, #48	@ 0x30
 80045bc:	0030      	movs	r0, r6
 80045be:	f000 fbed 	bl	8004d9c <_ZN8RingBuff4putcEh>
    inline reg getHead() const { return head; }
 80045c2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
		if (/*m_in.frameStream.length()*/m_in.frameStream.getHead() == m_in.tmpReceiveLen) {
 80045c4:	68a2      	ldr	r2, [r4, #8]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d1da      	bne.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
			if(m_in.checkCRC && m_in.rxCRC) {
 80045ca:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d005      	beq.n	80045dc <_ZN16RawParserDynamic12_proceedByteEhb+0xe4>
 80045d0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d002      	beq.n	80045dc <_ZN16RawParserDynamic12_proceedByteEhb+0xe4>
				m_in.rxState = RECEIVE_CRC;
 80045d6:	2304      	movs	r3, #4
 80045d8:	7323      	strb	r3, [r4, #12]
 80045da:	e7d1      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
	const u8 cmd = m_in.frameStream.getc();
 80045dc:	0030      	movs	r0, r6
 80045de:	f000 fb86 	bl	8004cee <_ZN8RingBuff4getcEv>
 80045e2:	0005      	movs	r5, r0
 80045e4:	466b      	mov	r3, sp
 80045e6:	1d99      	adds	r1, r3, #6
 80045e8:	7008      	strb	r0, [r1, #0]
       *  past-the-end ( @c end() ) iterator.
       */

      iterator
      find(const key_type& __x)
      { return _M_t.find(__x); }
 80045ea:	0020      	movs	r0, r4
 80045ec:	305c      	adds	r0, #92	@ 0x5c
 80045ee:	f7ff ff67 	bl	80044c0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_>
 80045f2:	0003      	movs	r3, r0
      { return iterator(&this->_M_impl._M_header); }
 80045f4:	0022      	movs	r2, r4
 80045f6:	3260      	adds	r2, #96	@ 0x60
	if (it != m_in.handlers.end()) {
 80045f8:	4290      	cmp	r0, r2
 80045fa:	d00a      	beq.n	8004612 <_ZN16RawParserDynamic12_proceedByteEhb+0x11a>
		it->second(m_in.frameStream, cmd);
 80045fc:	466a      	mov	r2, sp
 80045fe:	71d5      	strb	r5, [r2, #7]
	if (_M_empty())
 8004600:	69c2      	ldr	r2, [r0, #28]
 8004602:	2a00      	cmp	r2, #0
 8004604:	d008      	beq.n	8004618 <_ZN16RawParserDynamic12_proceedByteEhb+0x120>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004606:	3014      	adds	r0, #20
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	466a      	mov	r2, sp
 800460c:	3207      	adds	r2, #7
 800460e:	0031      	movs	r1, r6
 8004610:	4798      	blx	r3
				m_in.rxState = RECEIVE_COMPLEATE;
 8004612:	230c      	movs	r3, #12
 8004614:	7323      	strb	r3, [r4, #12]
 8004616:	e7b3      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
	  __throw_bad_function_call();
 8004618:	f001 f965 	bl	80058e6 <_ZSt25__throw_bad_function_callv>
		CrcBase& rx_crc = (*m_in.rxCRC);
 800461c:	6d47      	ldr	r7, [r0, #84]	@ 0x54
		rx_crc[m_in.crcIndex] = b;
 800461e:	2658      	movs	r6, #88	@ 0x58
 8004620:	5d81      	ldrb	r1, [r0, r6]
 8004622:	0038      	movs	r0, r7
 8004624:	f000 fc26 	bl	8004e74 <_ZN7CrcBaseixEj>
 8004628:	7005      	strb	r5, [r0, #0]
		++m_in.crcIndex;
 800462a:	5da3      	ldrb	r3, [r4, r6]
 800462c:	3301      	adds	r3, #1
 800462e:	b2db      	uxtb	r3, r3
 8004630:	55a3      	strb	r3, [r4, r6]
		if(m_in.crcIndex == rx_crc.size()) {
 8004632:	793a      	ldrb	r2, [r7, #4]
 8004634:	429a      	cmp	r2, r3
 8004636:	d1a3      	bne.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
			CrcCalculator& calculated_crc = (*m_in.checkCRC);
 8004638:	6d25      	ldr	r5, [r4, #80]	@ 0x50
			RingBuff::crc_from(calculated_crc, m_in.frameStream);
 800463a:	0026      	movs	r6, r4
 800463c:	3630      	adds	r6, #48	@ 0x30
 800463e:	0031      	movs	r1, r6
 8004640:	0028      	movs	r0, r5
 8004642:	f000 fbc3 	bl	8004dcc <_ZN8RingBuff8crc_fromER13CrcCalculatorRKS_>
			if(rx_crc == calculated_crc) {
 8004646:	0029      	movs	r1, r5
 8004648:	0038      	movs	r0, r7
 800464a:	f000 fc04 	bl	8004e56 <_ZNK7CrcBaseeqERKS_>
 800464e:	2800      	cmp	r0, #0
 8004650:	d102      	bne.n	8004658 <_ZN16RawParserDynamic12_proceedByteEhb+0x160>
			m_in.rxState = RECEIVE_COMPLEATE;
 8004652:	230c      	movs	r3, #12
 8004654:	7323      	strb	r3, [r4, #12]
 8004656:	e793      	b.n	8004580 <_ZN16RawParserDynamic12_proceedByteEhb+0x88>
	const u8 cmd = m_in.frameStream.getc();
 8004658:	0030      	movs	r0, r6
 800465a:	f000 fb48 	bl	8004cee <_ZN8RingBuff4getcEv>
 800465e:	0005      	movs	r5, r0
 8004660:	466b      	mov	r3, sp
 8004662:	1d99      	adds	r1, r3, #6
 8004664:	7008      	strb	r0, [r1, #0]
 8004666:	0020      	movs	r0, r4
 8004668:	305c      	adds	r0, #92	@ 0x5c
 800466a:	f7ff ff29 	bl	80044c0 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE4findERS1_>
 800466e:	0003      	movs	r3, r0
 8004670:	0022      	movs	r2, r4
 8004672:	3260      	adds	r2, #96	@ 0x60
	if (it != m_in.handlers.end()) {
 8004674:	4290      	cmp	r0, r2
 8004676:	d0ec      	beq.n	8004652 <_ZN16RawParserDynamic12_proceedByteEhb+0x15a>
		it->second(m_in.frameStream, cmd);
 8004678:	466a      	mov	r2, sp
 800467a:	71d5      	strb	r5, [r2, #7]
	if (_M_empty())
 800467c:	69c2      	ldr	r2, [r0, #28]
 800467e:	2a00      	cmp	r2, #0
 8004680:	d006      	beq.n	8004690 <_ZN16RawParserDynamic12_proceedByteEhb+0x198>
	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8004682:	3014      	adds	r0, #20
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	466a      	mov	r2, sp
 8004688:	3207      	adds	r2, #7
 800468a:	0031      	movs	r1, r6
 800468c:	4798      	blx	r3
}
 800468e:	e7e0      	b.n	8004652 <_ZN16RawParserDynamic12_proceedByteEhb+0x15a>
	  __throw_bad_function_call();
 8004690:	f001 f929 	bl	80058e6 <_ZSt25__throw_bad_function_callv>
 8004694:	08006df4 	.word	0x08006df4

08004698 <_ZN16RawParserDynamic7proceedEm>:
{
 8004698:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469a:	b085      	sub	sp, #20
 800469c:	0005      	movs	r5, r0
    inline bool isEmpty() const { return tail == head; }
 800469e:	6a02      	ldr	r2, [r0, #32]
 80046a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
	while(!m_in.inputRing.isEmpty()) {
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d02f      	beq.n	8004706 <_ZN16RawParserDynamic7proceedEm+0x6e>
				m_in.triggerSB = true;
 80046a6:	2701      	movs	r7, #1
 80046a8:	e022      	b.n	80046f0 <_ZN16RawParserDynamic7proceedEm+0x58>
					_proceedByte(ch, true);
 80046aa:	003a      	movs	r2, r7
 80046ac:	0028      	movs	r0, r5
 80046ae:	f7ff ff23 	bl	80044f8 <_ZN16RawParserDynamic12_proceedByteEhb>
				m_in.triggerSB = false;
 80046b2:	2300      	movs	r3, #0
 80046b4:	712b      	strb	r3, [r5, #4]
		for(reg i = 0; i != len; ++i) {
 80046b6:	3401      	adds	r4, #1
 80046b8:	42b4      	cmp	r4, r6
 80046ba:	d015      	beq.n	80046e8 <_ZN16RawParserDynamic7proceedEm+0x50>
			const u8 ch = buffer[i];
 80046bc:	7821      	ldrb	r1, [r4, #0]
			if (m_in.triggerSB) {
 80046be:	792b      	ldrb	r3, [r5, #4]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <_ZN16RawParserDynamic7proceedEm+0x3c>
				if(SB == ch) { 		//{SB}{SB} -> {SB}
 80046c4:	782b      	ldrb	r3, [r5, #0]
 80046c6:	428b      	cmp	r3, r1
 80046c8:	d1ef      	bne.n	80046aa <_ZN16RawParserDynamic7proceedEm+0x12>
					_proceedByte(ch, false);
 80046ca:	2200      	movs	r2, #0
 80046cc:	0028      	movs	r0, r5
 80046ce:	f7ff ff13 	bl	80044f8 <_ZN16RawParserDynamic12_proceedByteEhb>
 80046d2:	e7ee      	b.n	80046b2 <_ZN16RawParserDynamic7proceedEm+0x1a>
			} else if (SB == ch) { 	//{!SB}{SB} -> set flag and skip step
 80046d4:	782b      	ldrb	r3, [r5, #0]
 80046d6:	428b      	cmp	r3, r1
 80046d8:	d101      	bne.n	80046de <_ZN16RawParserDynamic7proceedEm+0x46>
				m_in.triggerSB = true;
 80046da:	712f      	strb	r7, [r5, #4]
 80046dc:	e7eb      	b.n	80046b6 <_ZN16RawParserDynamic7proceedEm+0x1e>
				_proceedByte(ch, false);
 80046de:	2200      	movs	r2, #0
 80046e0:	0028      	movs	r0, r5
 80046e2:	f7ff ff09 	bl	80044f8 <_ZN16RawParserDynamic12_proceedByteEhb>
 80046e6:	e7e6      	b.n	80046b6 <_ZN16RawParserDynamic7proceedEm+0x1e>
 80046e8:	6a2a      	ldr	r2, [r5, #32]
 80046ea:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
	while(!m_in.inputRing.isEmpty()) {
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d00a      	beq.n	8004706 <_ZN16RawParserDynamic7proceedEm+0x6e>
		const reg len = m_in.inputRing.get(buffer, sizeof(buffer));
 80046f0:	0028      	movs	r0, r5
 80046f2:	3010      	adds	r0, #16
 80046f4:	220a      	movs	r2, #10
 80046f6:	a901      	add	r1, sp, #4
 80046f8:	f000 fab7 	bl	8004c6a <_ZN8RingBuff3getEPvj>
		for(reg i = 0; i != len; ++i) {
 80046fc:	2800      	cmp	r0, #0
 80046fe:	d0f3      	beq.n	80046e8 <_ZN16RawParserDynamic7proceedEm+0x50>
 8004700:	ac01      	add	r4, sp, #4
 8004702:	1826      	adds	r6, r4, r0
 8004704:	e7da      	b.n	80046bc <_ZN16RawParserDynamic7proceedEm+0x24>
}
 8004706:	b005      	add	sp, #20
 8004708:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800470a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800470a:	b570      	push	{r4, r5, r6, lr}
 800470c:	0006      	movs	r6, r0
 800470e:	1e0c      	subs	r4, r1, #0
      while (__x != 0)
 8004710:	d109      	bne.n	8004726 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0x1c>
    }
 8004712:	bd70      	pop	{r4, r5, r6, pc}
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8004714:	2203      	movs	r2, #3
 8004716:	0001      	movs	r1, r0
 8004718:	4798      	blx	r3
 800471a:	2124      	movs	r1, #36	@ 0x24
 800471c:	0028      	movs	r0, r5
 800471e:	f000 ffeb 	bl	80056f8 <_ZdlPvj>
      while (__x != 0)
 8004722:	2c00      	cmp	r4, #0
 8004724:	d0f5      	beq.n	8004712 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0x8>
	  _M_erase(_S_right(__x));
 8004726:	68e1      	ldr	r1, [r4, #12]
 8004728:	0030      	movs	r0, r6
 800472a:	f7ff ffee 	bl	800470a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 800472e:	0025      	movs	r5, r4
      { return static_cast<_Link_type>(__x->_M_left); }
 8004730:	68a4      	ldr	r4, [r4, #8]
    class function<_Res(_ArgTypes...)>
 8004732:	0028      	movs	r0, r5
 8004734:	3014      	adds	r0, #20
      if (_M_manager)
 8004736:	69eb      	ldr	r3, [r5, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d1eb      	bne.n	8004714 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0xa>
 800473c:	e7ed      	b.n	800471a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E+0x10>

0800473e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_>:
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 800473e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004740:	46c6      	mov	lr, r8
 8004742:	b500      	push	{lr}
 8004744:	0006      	movs	r6, r0
 8004746:	4690      	mov	r8, r2
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 8004748:	688c      	ldr	r4, [r1, #8]
      while (__x != 0)
 800474a:	2c00      	cmp	r4, #0
 800474c:	d003      	beq.n	8004756 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x18>
 800474e:	7812      	ldrb	r2, [r2, #0]
      { return static_cast<_Link_type>(__x->_M_right); }
 8004750:	2700      	movs	r7, #0
 8004752:	2001      	movs	r0, #1
 8004754:	e00e      	b.n	8004774 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x36>
      { return &this->_M_impl._M_header; }
 8004756:	1d0c      	adds	r4, r1, #4
	  if (__j == begin())
 8004758:	68cb      	ldr	r3, [r1, #12]
 800475a:	42a3      	cmp	r3, r4
 800475c:	d01f      	beq.n	800479e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x60>
	_M_node = _Rb_tree_decrement(_M_node);
 800475e:	0020      	movs	r0, r4
 8004760:	f001 f857 	bl	8005812 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	return *this;
 8004764:	0027      	movs	r7, r4
	_M_node = _Rb_tree_decrement(_M_node);
 8004766:	0004      	movs	r4, r0
	return *this;
 8004768:	e00d      	b.n	8004786 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x48>
      { return static_cast<_Link_type>(__x->_M_right); }
 800476a:	68e3      	ldr	r3, [r4, #12]
 800476c:	003d      	movs	r5, r7
      while (__x != 0)
 800476e:	2b00      	cmp	r3, #0
 8004770:	d006      	beq.n	8004780 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x42>
 8004772:	001c      	movs	r4, r3
	  __x = __comp ? _S_left(__x) : _S_right(__x);
 8004774:	7c23      	ldrb	r3, [r4, #16]
 8004776:	4293      	cmp	r3, r2
 8004778:	d9f7      	bls.n	800476a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x2c>
      { return static_cast<_Link_type>(__x->_M_left); }
 800477a:	68a3      	ldr	r3, [r4, #8]
 800477c:	0005      	movs	r5, r0
 800477e:	e7f6      	b.n	800476e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x30>
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004780:	0027      	movs	r7, r4
      if (__comp)
 8004782:	2d00      	cmp	r5, #0
 8004784:	d1e8      	bne.n	8004758 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x1a>
      if (_M_impl._M_key_compare(_S_key(__j._M_node), __k))
 8004786:	7c22      	ldrb	r2, [r4, #16]
 8004788:	4643      	mov	r3, r8
 800478a:	781b      	ldrb	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d20a      	bcs.n	80047a6 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x68>
			   _MoveConstructiblePair<_U1, _U2>()
			  && _PCCP::template
			   _ImplicitlyMoveConvertiblePair<_U1, _U2>(),
                         bool>::type=true>
	constexpr pair(_U1&& __x, _U2&& __y)
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004790:	2300      	movs	r3, #0
 8004792:	6033      	str	r3, [r6, #0]
 8004794:	6077      	str	r7, [r6, #4]
    }
 8004796:	0030      	movs	r0, r6
 8004798:	bc80      	pop	{r7}
 800479a:	46b8      	mov	r8, r7
 800479c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800479e:	2300      	movs	r3, #0
 80047a0:	6033      	str	r3, [r6, #0]
 80047a2:	6074      	str	r4, [r6, #4]
 80047a4:	e7f7      	b.n	8004796 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x58>
      : first(__a), second(__b) { }
 80047a6:	6034      	str	r4, [r6, #0]
 80047a8:	2300      	movs	r3, #0
 80047aa:	6073      	str	r3, [r6, #4]
 80047ac:	e7f3      	b.n	8004796 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_+0x58>

080047ae <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>:
      _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80047ae:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047b0:	46d6      	mov	lr, sl
 80047b2:	464f      	mov	r7, r9
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b085      	sub	sp, #20
 80047b8:	0006      	movs	r6, r0
 80047ba:	9101      	str	r1, [sp, #4]
 80047bc:	001d      	movs	r5, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 80047be:	2024      	movs	r0, #36	@ 0x24
 80047c0:	f000 ffb2 	bl	8005728 <_Znwj>
 80047c4:	0004      	movs	r4, r0
	     typename... _Args2, size_t... _Indexes2>
      _GLIBCXX20_CONSTEXPR inline
      pair<_T1, _T2>::
      pair(tuple<_Args1...>& __tuple1, tuple<_Args2...>& __tuple2,
	   _Index_tuple<_Indexes1...>, _Index_tuple<_Indexes2...>)
      : first(std::forward<_Args1>(std::get<_Indexes1>(__tuple1))...),
 80047c6:	682b      	ldr	r3, [r5, #0]
 80047c8:	781f      	ldrb	r7, [r3, #0]
 80047ca:	7407      	strb	r7, [r0, #16]
      : _Function_base() { }
 80047cc:	3014      	adds	r0, #20
 80047ce:	220c      	movs	r2, #12
 80047d0:	2100      	movs	r1, #0
 80047d2:	f002 f84a 	bl	800686a <memset>
 80047d6:	2300      	movs	r3, #0
 80047d8:	6223      	str	r3, [r4, #32]
      operator()(_Pair& __x) const
      { return __x.first; }

      const typename _Pair::first_type&
      operator()(const _Pair& __x) const
      { return __x.first; }
 80047da:	3310      	adds	r3, #16
 80047dc:	469a      	mov	sl, r3
 80047de:	44a2      	add	sl, r4
 80047e0:	9d01      	ldr	r5, [sp, #4]
      { return &this->_M_impl._M_header; }
 80047e2:	1d33      	adds	r3, r6, #4
 80047e4:	4699      	mov	r9, r3
      if (__pos._M_node == _M_end())
 80047e6:	42ab      	cmp	r3, r5
 80047e8:	d022      	beq.n	8004830 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x82>
      { return __x < __y; }
 80047ea:	9a01      	ldr	r2, [sp, #4]
 80047ec:	7c13      	ldrb	r3, [r2, #16]
      else if (_M_impl._M_key_compare(__k, _S_key(__pos._M_node)))
 80047ee:	42bb      	cmp	r3, r7
 80047f0:	d943      	bls.n	800487a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0xcc>
	  if (__pos._M_node == _M_leftmost()) // begin()
 80047f2:	68f3      	ldr	r3, [r6, #12]
 80047f4:	42ab      	cmp	r3, r5
 80047f6:	d05d      	beq.n	80048b4 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x106>
	_M_node = _Rb_tree_decrement(_M_node);
 80047f8:	0010      	movs	r0, r2
 80047fa:	f001 f80a 	bl	8005812 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(_S_key((--__before)._M_node), __k))
 80047fe:	7c03      	ldrb	r3, [r0, #16]
 8004800:	42bb      	cmp	r3, r7
 8004802:	d232      	bcs.n	800486a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0xbc>
	      if (_S_right(__before._M_node) == 0)
 8004804:	68c3      	ldr	r3, [r0, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d060      	beq.n	80048cc <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x11e>
 800480a:	9a01      	ldr	r2, [sp, #4]
			    || _M_impl._M_key_compare(_S_key(__z),
 800480c:	2001      	movs	r0, #1
 800480e:	2a00      	cmp	r2, #0
 8004810:	d053      	beq.n	80048ba <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x10c>
      _Rb_tree_insert_and_rebalance(__insert_left, __z, __p,
 8004812:	464b      	mov	r3, r9
 8004814:	002a      	movs	r2, r5
 8004816:	0021      	movs	r1, r4
 8004818:	f000 ffff 	bl	800581a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>
      ++_M_impl._M_node_count;
 800481c:	6973      	ldr	r3, [r6, #20]
 800481e:	3301      	adds	r3, #1
 8004820:	6173      	str	r3, [r6, #20]
      _Rb_tree_iterator(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 8004822:	0025      	movs	r5, r4
      }
 8004824:	0028      	movs	r0, r5
 8004826:	b005      	add	sp, #20
 8004828:	bcc0      	pop	{r6, r7}
 800482a:	46ba      	mov	sl, r7
 800482c:	46b1      	mov	r9, r6
 800482e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	      && _M_impl._M_key_compare(_S_key(_M_rightmost()), __k))
 8004830:	6973      	ldr	r3, [r6, #20]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d003      	beq.n	800483e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x90>
 8004836:	6935      	ldr	r5, [r6, #16]
 8004838:	7c2b      	ldrb	r3, [r5, #16]
 800483a:	42bb      	cmp	r3, r7
 800483c:	d33d      	bcc.n	80048ba <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x10c>
	    return _M_get_insert_unique_pos(__k);
 800483e:	4652      	mov	r2, sl
 8004840:	0031      	movs	r1, r6
 8004842:	a802      	add	r0, sp, #8
 8004844:	f7ff ff7b 	bl	800473e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_>
 8004848:	9d02      	ldr	r5, [sp, #8]
 800484a:	9b03      	ldr	r3, [sp, #12]
	if (__res.second)
 800484c:	2b00      	cmp	r3, #0
 800484e:	d12e      	bne.n	80048ae <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x100>
      if (_M_manager)
 8004850:	69e3      	ldr	r3, [r4, #28]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d004      	beq.n	8004860 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0xb2>
    class function<_Res(_ArgTypes...)>
 8004856:	0020      	movs	r0, r4
 8004858:	3014      	adds	r0, #20
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800485a:	2203      	movs	r2, #3
 800485c:	0001      	movs	r1, r0
 800485e:	4798      	blx	r3
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004860:	2124      	movs	r1, #36	@ 0x24
 8004862:	0020      	movs	r0, r4
 8004864:	f000 ff48 	bl	80056f8 <_ZdlPvj>
      }
 8004868:	e7dc      	b.n	8004824 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x76>
	    return _M_get_insert_unique_pos(__k);
 800486a:	4652      	mov	r2, sl
 800486c:	0031      	movs	r1, r6
 800486e:	a802      	add	r0, sp, #8
 8004870:	f7ff ff65 	bl	800473e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_>
 8004874:	9d02      	ldr	r5, [sp, #8]
 8004876:	9b03      	ldr	r3, [sp, #12]
 8004878:	e7e8      	b.n	800484c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x9e>
      else if (_M_impl._M_key_compare(_S_key(__pos._M_node), __k))
 800487a:	42bb      	cmp	r3, r7
 800487c:	d2e8      	bcs.n	8004850 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0xa2>
	  if (__pos._M_node == _M_rightmost())
 800487e:	6933      	ldr	r3, [r6, #16]
 8004880:	42ab      	cmp	r3, r5
 8004882:	d019      	beq.n	80048b8 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x10a>
	_M_node = _Rb_tree_increment(_M_node);
 8004884:	9801      	ldr	r0, [sp, #4]
 8004886:	f000 ffc0 	bl	800580a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>
	  else if (_M_impl._M_key_compare(__k, _S_key((++__after)._M_node)))
 800488a:	7c03      	ldrb	r3, [r0, #16]
 800488c:	42bb      	cmp	r3, r7
 800488e:	d906      	bls.n	800489e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0xf0>
	      if (_S_right(__pos._M_node) == 0)
 8004890:	9b01      	ldr	r3, [sp, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d012      	beq.n	80048be <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x110>
	: first(std::forward<_U1>(__x)), second(std::forward<_U2>(__y)) { }
 8004898:	0005      	movs	r5, r0
			    || _M_impl._M_key_compare(_S_key(__z),
 800489a:	2001      	movs	r0, #1
 800489c:	e7b9      	b.n	8004812 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x64>
	    return _M_get_insert_unique_pos(__k);
 800489e:	4652      	mov	r2, sl
 80048a0:	0031      	movs	r1, r6
 80048a2:	a802      	add	r0, sp, #8
 80048a4:	f7ff ff4b 	bl	800473e <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE24_M_get_insert_unique_posERS1_>
 80048a8:	9d02      	ldr	r5, [sp, #8]
 80048aa:	9b03      	ldr	r3, [sp, #12]
 80048ac:	e7ce      	b.n	800484c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x9e>
 80048ae:	002a      	movs	r2, r5
 80048b0:	001d      	movs	r5, r3
 80048b2:	e7ab      	b.n	800480c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x5e>
 80048b4:	9a01      	ldr	r2, [sp, #4]
 80048b6:	e7a9      	b.n	800480c <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x5e>
      : first(__a), second(__b) { }
 80048b8:	001d      	movs	r5, r3
      bool __insert_left = (__x != 0 || __p == _M_end()
 80048ba:	45a9      	cmp	r9, r5
 80048bc:	d004      	beq.n	80048c8 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x11a>
			    || _M_impl._M_key_compare(_S_key(__z),
 80048be:	7c28      	ldrb	r0, [r5, #16]
 80048c0:	4287      	cmp	r7, r0
 80048c2:	4180      	sbcs	r0, r0
 80048c4:	4240      	negs	r0, r0
 80048c6:	e7a4      	b.n	8004812 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x64>
 80048c8:	2001      	movs	r0, #1
 80048ca:	e7a2      	b.n	8004812 <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x64>
 80048cc:	0005      	movs	r5, r0
    _Rb_tree<_Key, _Val, _KeyOfValue, _Compare, _Alloc>::
 80048ce:	e7f4      	b.n	80048ba <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_+0x10c>

080048d0 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE>:
{
 80048d0:	b570      	push	{r4, r5, r6, lr}
 80048d2:	b08c      	sub	sp, #48	@ 0x30
 80048d4:	0016      	movs	r6, r2
 80048d6:	230f      	movs	r3, #15
 80048d8:	446b      	add	r3, sp
 80048da:	7019      	strb	r1, [r3, #0]
      { return static_cast<_Link_type>(this->_M_impl._M_header._M_parent); }
 80048dc:	6e43      	ldr	r3, [r0, #100]	@ 0x64
      { return &this->_M_impl._M_header; }
 80048de:	0002      	movs	r2, r0
 80048e0:	3260      	adds	r2, #96	@ 0x60
      while (__x != 0)
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d04e      	beq.n	8004984 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0xb4>
 80048e6:	210f      	movs	r1, #15
 80048e8:	4469      	add	r1, sp
 80048ea:	780d      	ldrb	r5, [r1, #0]
 80048ec:	0014      	movs	r4, r2
 80048ee:	e002      	b.n	80048f6 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x26>
      { return static_cast<_Link_type>(__x->_M_right); }
 80048f0:	68db      	ldr	r3, [r3, #12]
      while (__x != 0)
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x32>
	if (!_M_impl._M_key_compare(_S_key(__x), __k))
 80048f6:	7c19      	ldrb	r1, [r3, #16]
 80048f8:	42a9      	cmp	r1, r5
 80048fa:	d3f9      	bcc.n	80048f0 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x20>
      _S_left(_Base_ptr __x) _GLIBCXX_NOEXCEPT
 80048fc:	001c      	movs	r4, r3
	  __y = __x, __x = _S_left(__x);
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	e7f7      	b.n	80048f2 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x22>
	if (__i == end() || key_comp()(__k, (*__i).first))
 8004902:	42a2      	cmp	r2, r4
 8004904:	d002      	beq.n	800490c <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x3c>
 8004906:	7c23      	ldrb	r3, [r4, #16]
 8004908:	42ab      	cmp	r3, r5
 800490a:	d90b      	bls.n	8004924 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x54>
      : _M_head_impl(__h) { }
 800490c:	230f      	movs	r3, #15
 800490e:	446b      	add	r3, sp
 8004910:	930b      	str	r3, [sp, #44]	@ 0x2c
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8004912:	4a1d      	ldr	r2, [pc, #116]	@ (8004988 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0xb8>)
       *  pointing to the first element that has a greater value than given key
       *  or end() if no such element exists.
       */
      iterator
      lower_bound(const key_type& __x)
      { return _M_t.lower_bound(__x); }
 8004914:	305c      	adds	r0, #92	@ 0x5c
	  __i = _M_t._M_emplace_hint_unique(__i, std::piecewise_construct,
 8004916:	ab0a      	add	r3, sp, #40	@ 0x28
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	ab0b      	add	r3, sp, #44	@ 0x2c
 800491c:	0021      	movs	r1, r4
 800491e:	f7ff ff46 	bl	80047ae <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE22_M_emplace_hint_uniqueIJRKSt21piecewise_construct_tSt5tupleIJRS1_EESI_IJEEEEESt17_Rb_tree_iteratorIS7_ESt23_Rb_tree_const_iteratorIS7_EDpOT_>
 8004922:	0004      	movs	r4, r0
      : _Function_base()
 8004924:	220c      	movs	r2, #12
 8004926:	2100      	movs	r1, #0
 8004928:	a806      	add	r0, sp, #24
 800492a:	f001 ff9e 	bl	800686a <memset>
 800492e:	2300      	movs	r3, #0
 8004930:	9309      	str	r3, [sp, #36]	@ 0x24
    bool _M_empty() const { return !_M_manager; }
 8004932:	68b3      	ldr	r3, [r6, #8]
	if (static_cast<bool>(__x))
 8004934:	2b00      	cmp	r3, #0
 8004936:	d007      	beq.n	8004948 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x78>
	    __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8004938:	2202      	movs	r2, #2
 800493a:	0031      	movs	r1, r6
 800493c:	a806      	add	r0, sp, #24
 800493e:	4798      	blx	r3
	    _M_invoker = __x._M_invoker;
 8004940:	68f3      	ldr	r3, [r6, #12]
 8004942:	9309      	str	r3, [sp, #36]	@ 0x24
	    _M_manager = __x._M_manager;
 8004944:	68b3      	ldr	r3, [r6, #8]
 8004946:	9308      	str	r3, [sp, #32]
    {
#if __cplusplus < 201103L
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)
#endif
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004948:	ad04      	add	r5, sp, #16
 800494a:	ae06      	add	r6, sp, #24
 800494c:	2208      	movs	r2, #8
 800494e:	0031      	movs	r1, r6
 8004950:	0028      	movs	r0, r5
 8004952:	f002 f873 	bl	8006a3c <memcpy>
      __a = _GLIBCXX_MOVE(__b);
 8004956:	0023      	movs	r3, r4
 8004958:	3314      	adds	r3, #20
 800495a:	cb03      	ldmia	r3!, {r0, r1}
 800495c:	c603      	stmia	r6!, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 800495e:	3b08      	subs	r3, #8
 8004960:	cd06      	ldmia	r5!, {r1, r2}
 8004962:	c306      	stmia	r3!, {r1, r2}
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8004964:	9a08      	ldr	r2, [sp, #32]
      __a = _GLIBCXX_MOVE(__b);
 8004966:	69e3      	ldr	r3, [r4, #28]
 8004968:	9308      	str	r3, [sp, #32]
      __b = _GLIBCXX_MOVE(__tmp);
 800496a:	61e2      	str	r2, [r4, #28]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 800496c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
      __a = _GLIBCXX_MOVE(__b);
 800496e:	6a21      	ldr	r1, [r4, #32]
 8004970:	9109      	str	r1, [sp, #36]	@ 0x24
      __b = _GLIBCXX_MOVE(__tmp);
 8004972:	6222      	str	r2, [r4, #32]
      if (_M_manager)
 8004974:	2b00      	cmp	r3, #0
 8004976:	d003      	beq.n	8004980 <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0xb0>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8004978:	2203      	movs	r2, #3
 800497a:	0029      	movs	r1, r5
 800497c:	0028      	movs	r0, r5
 800497e:	4798      	blx	r3
}
 8004980:	b00c      	add	sp, #48	@ 0x30
 8004982:	bd70      	pop	{r4, r5, r6, pc}
      while (__x != 0)
 8004984:	0014      	movs	r4, r2
 8004986:	e7c1      	b.n	800490c <_ZN16RawParserDynamic9subscribeEhSt8functionIFvR8RingBuffhEE+0x3c>
 8004988:	08006e08 	.word	0x08006e08

0800498c <_ZN16RawParserDynamicD1Ev>:
RawParserDynamic::~RawParserDynamic()
 800498c:	b570      	push	{r4, r5, r6, lr}
 800498e:	0004      	movs	r4, r0
	if(m_in.checkCRC) {
 8004990:	6d05      	ldr	r5, [r0, #80]	@ 0x50
 8004992:	2d00      	cmp	r5, #0
 8004994:	d010      	beq.n	80049b8 <_ZN16RawParserDynamicD1Ev+0x2c>
	~CrcCalculator() = default;
 8004996:	0028      	movs	r0, r5
 8004998:	f000 fa56 	bl	8004e48 <_ZN7CrcBaseD1Ev>
		delete m_in.checkCRC;
 800499c:	2114      	movs	r1, #20
 800499e:	0028      	movs	r0, r5
 80049a0:	f000 feaa 	bl	80056f8 <_ZdlPvj>
		delete m_in.rxCRC;
 80049a4:	6d65      	ldr	r5, [r4, #84]	@ 0x54
 80049a6:	2d00      	cmp	r5, #0
 80049a8:	d006      	beq.n	80049b8 <_ZN16RawParserDynamicD1Ev+0x2c>
 80049aa:	0028      	movs	r0, r5
 80049ac:	f000 fa4c 	bl	8004e48 <_ZN7CrcBaseD1Ev>
 80049b0:	2108      	movs	r1, #8
 80049b2:	0028      	movs	r0, r5
 80049b4:	f000 fea0 	bl	80056f8 <_ZdlPvj>
	if(m_out.txCRC) {
 80049b8:	2394      	movs	r3, #148	@ 0x94
 80049ba:	58e5      	ldr	r5, [r4, r3]
 80049bc:	2d00      	cmp	r5, #0
 80049be:	d006      	beq.n	80049ce <_ZN16RawParserDynamicD1Ev+0x42>
 80049c0:	0028      	movs	r0, r5
 80049c2:	f000 fa41 	bl	8004e48 <_ZN7CrcBaseD1Ev>
		delete m_out.txCRC;
 80049c6:	2114      	movs	r1, #20
 80049c8:	0028      	movs	r0, r5
 80049ca:	f000 fe95 	bl	80056f8 <_ZdlPvj>
      if (_M_manager)
 80049ce:	0023      	movs	r3, r4
 80049d0:	339c      	adds	r3, #156	@ 0x9c
 80049d2:	689b      	ldr	r3, [r3, #8]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d004      	beq.n	80049e2 <_ZN16RawParserDynamicD1Ev+0x56>
    class function<_Res(_ArgTypes...)>
 80049d8:	0020      	movs	r0, r4
 80049da:	309c      	adds	r0, #156	@ 0x9c
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80049dc:	2203      	movs	r2, #3
 80049de:	0001      	movs	r1, r0
 80049e0:	4798      	blx	r3
	struct TX_handler {
 80049e2:	0020      	movs	r0, r4
 80049e4:	3074      	adds	r0, #116	@ 0x74
 80049e6:	f000 f90f 	bl	8004c08 <_ZN8RingBuffD1Ev>
      { _M_erase(_M_begin()); }
 80049ea:	6e61      	ldr	r1, [r4, #100]	@ 0x64
      ~map() = default;
 80049ec:	0020      	movs	r0, r4
 80049ee:	305c      	adds	r0, #92	@ 0x5c
 80049f0:	f7ff fe8b 	bl	800470a <_ZNSt8_Rb_treeIhSt4pairIKhSt8functionIFvR8RingBuffhEEESt10_Select1stIS7_ESt4lessIhESaIS7_EE8_M_eraseEPSt13_Rb_tree_nodeIS7_E>
	struct RX_handler {
 80049f4:	0020      	movs	r0, r4
 80049f6:	3030      	adds	r0, #48	@ 0x30
 80049f8:	f000 f906 	bl	8004c08 <_ZN8RingBuffD1Ev>
 80049fc:	0020      	movs	r0, r4
 80049fe:	3010      	adds	r0, #16
 8004a00:	f000 f902 	bl	8004c08 <_ZN8RingBuffD1Ev>
}
 8004a04:	0020      	movs	r0, r4
 8004a06:	bd70      	pop	{r4, r5, r6, pc}

08004a08 <_ZN13PoolContainer14getWriteBufferEv>:
    inline bool isFull() const { return (((head ^ tail) & xor_msk) == cap); }
    inline reg length() const { return head - tail; }

    inline reg capacity() const { return cap; }
    inline reg getMask() const { return msk; }
    inline reg getHead() const { return head; }
 8004a08:	6942      	ldr	r2, [r0, #20]

void* const PoolContainer::getWriteBuffer()
{
	const reg head_reg 	= getHead();
	const reg msk_reg 	= getMask();
	const reg wr_pos 	= head_reg & msk_reg;
 8004a0a:	6883      	ldr	r3, [r0, #8]
 8004a0c:	4013      	ands	r3, r2
      pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
 8004a0e:	6982      	ldr	r2, [r0, #24]
 8004a10:	009b      	lsls	r3, r3, #2

	return m_pool[wr_pos].get();
 8004a12:	5898      	ldr	r0, [r3, r2]
}
 8004a14:	4770      	bx	lr
	...

08004a18 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_>:
#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      _GLIBCXX20_CONSTEXPR
      void
      vector<_Tp, _Alloc>::
 8004a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004a1a:	46de      	mov	lr, fp
 8004a1c:	4657      	mov	r7, sl
 8004a1e:	464e      	mov	r6, r9
 8004a20:	4645      	mov	r5, r8
 8004a22:	b5e0      	push	{r5, r6, r7, lr}
 8004a24:	b083      	sub	sp, #12
 8004a26:	4680      	mov	r8, r0
 8004a28:	4689      	mov	r9, r1
 8004a2a:	4692      	mov	sl, r2
 8004a2c:	000c      	movs	r4, r1
      // [23.2.4.2] capacity
      /**  Returns the number of elements in the %vector.  */
      _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
      size_type
      size() const _GLIBCXX_NOEXCEPT
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004a2e:	6845      	ldr	r5, [r0, #4]
 8004a30:	6807      	ldr	r7, [r0, #0]
 8004a32:	1beb      	subs	r3, r5, r7
 8004a34:	109b      	asrs	r3, r3, #2
      // Called by _M_fill_insert, _M_insert_aux etc.
      _GLIBCXX20_CONSTEXPR
      size_type
      _M_check_len(size_type __n, const char* __s) const
      {
	if (max_size() - size() < __n)
 8004a36:	4a2f      	ldr	r2, [pc, #188]	@ (8004af4 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xdc>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d013      	beq.n	8004a64 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x4c>
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
	return __b;
      return __a;
 8004a3c:	001a      	movs	r2, r3
      if (__a < __b)
 8004a3e:	42bd      	cmp	r5, r7
 8004a40:	d013      	beq.n	8004a6a <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x52>
	  __throw_length_error(__N(__s));

	const size_type __len = size() + (std::max)(size(), __n);
 8004a42:	189a      	adds	r2, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d814      	bhi.n	8004a72 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x5a>
 8004a48:	9201      	str	r2, [sp, #4]
 8004a4a:	2380      	movs	r3, #128	@ 0x80
 8004a4c:	059b      	lsls	r3, r3, #22
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d301      	bcc.n	8004a56 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x3e>
 8004a52:	4b28      	ldr	r3, [pc, #160]	@ (8004af4 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xdc>)
 8004a54:	9301      	str	r3, [sp, #4]
    _GLIBCXX_NODISCARD _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8004a56:	464b      	mov	r3, r9
 8004a58:	1bdb      	subs	r3, r3, r7
 8004a5a:	469b      	mov	fp, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004a5c:	2600      	movs	r6, #0
 8004a5e:	2a00      	cmp	r2, #0
 8004a60:	d011      	beq.n	8004a86 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x6e>
 8004a62:	e00b      	b.n	8004a7c <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x64>
	  __throw_length_error(__N(__s));
 8004a64:	4824      	ldr	r0, [pc, #144]	@ (8004af8 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xe0>)
 8004a66:	f000 ff3b 	bl	80058e0 <_ZSt20__throw_length_errorPKc>
	return __b;
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	e7e9      	b.n	8004a42 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x2a>
	_ValueType;
      typedef typename iterator_traits<_ForwardIterator>::value_type
	_ValueType2;
      static_assert(std::is_same<_ValueType, _ValueType2>::value,
	  "relocation is only possible for values of the same type");
      _ForwardIterator __cur = __result;
 8004a6e:	0030      	movs	r0, r6
 8004a70:	e01b      	b.n	8004aaa <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x92>
 8004a72:	464b      	mov	r3, r9
 8004a74:	1bdb      	subs	r3, r3, r7
 8004a76:	469b      	mov	fp, r3
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8004a78:	4b1e      	ldr	r3, [pc, #120]	@ (8004af4 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xdc>)
 8004a7a:	9301      	str	r3, [sp, #4]
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004a7c:	9b01      	ldr	r3, [sp, #4]
 8004a7e:	0098      	lsls	r0, r3, #2
 8004a80:	f000 fe52 	bl	8005728 <_Znwj>
 8004a84:	0006      	movs	r6, r0
      _Tuple_impl(_Tuple_impl&&) = default;
 8004a86:	4653      	mov	r3, sl
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	465a      	mov	r2, fp
 8004a8c:	50b3      	str	r3, [r6, r2]
      { __u._M_ptr() = nullptr; }
 8004a8e:	2300      	movs	r3, #0
 8004a90:	4652      	mov	r2, sl
 8004a92:	6013      	str	r3, [r2, #0]
      for (; __first != __last; ++__first, (void)++__cur)
 8004a94:	42bc      	cmp	r4, r7
 8004a96:	d0ea      	beq.n	8004a6e <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x56>
 8004a98:	464b      	mov	r3, r9
 8004a9a:	1bd8      	subs	r0, r3, r7
 8004a9c:	1830      	adds	r0, r6, r0
 8004a9e:	003a      	movs	r2, r7
      _ForwardIterator __cur = __result;
 8004aa0:	0033      	movs	r3, r6
 8004aa2:	ca02      	ldmia	r2!, {r1}
 8004aa4:	c302      	stmia	r3!, {r1}
      for (; __first != __last; ++__first, (void)++__cur)
 8004aa6:	4283      	cmp	r3, r0
 8004aa8:	d1fb      	bne.n	8004aa2 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0x8a>
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
					 __new_start, _M_get_Tp_allocator());

	      ++__new_finish;
 8004aaa:	1d03      	adds	r3, r0, #4
 8004aac:	469a      	mov	sl, r3
 8004aae:	42ac      	cmp	r4, r5
 8004ab0:	d007      	beq.n	8004ac2 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xaa>
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1ae9      	subs	r1, r5, r3
      _ForwardIterator __cur = __result;
 8004ab6:	4653      	mov	r3, sl
 8004ab8:	cc04      	ldmia	r4!, {r2}
 8004aba:	c304      	stmia	r3!, {r2}
      for (; __first != __last; ++__first, (void)++__cur)
 8004abc:	42ac      	cmp	r4, r5
 8004abe:	d1fb      	bne.n	8004ab8 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xa0>
 8004ac0:	448a      	add	sl, r1
	if (__p)
 8004ac2:	2f00      	cmp	r7, #0
 8004ac4:	d005      	beq.n	8004ad2 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_+0xba>
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
		    this->_M_impl._M_end_of_storage - __old_start);
 8004ac6:	4643      	mov	r3, r8
 8004ac8:	6899      	ldr	r1, [r3, #8]
 8004aca:	1bc9      	subs	r1, r1, r7
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004acc:	0038      	movs	r0, r7
 8004ace:	f000 fe13 	bl	80056f8 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 8004ad2:	4643      	mov	r3, r8
 8004ad4:	601e      	str	r6, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8004ad6:	4652      	mov	r2, sl
 8004ad8:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8004ada:	9b01      	ldr	r3, [sp, #4]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	18f6      	adds	r6, r6, r3
 8004ae0:	4643      	mov	r3, r8
 8004ae2:	609e      	str	r6, [r3, #8]
    }
 8004ae4:	b003      	add	sp, #12
 8004ae6:	bcf0      	pop	{r4, r5, r6, r7}
 8004ae8:	46bb      	mov	fp, r7
 8004aea:	46b2      	mov	sl, r6
 8004aec:	46a9      	mov	r9, r5
 8004aee:	46a0      	mov	r8, r4
 8004af0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004af2:	46c0      	nop			@ (mov r8, r8)
 8004af4:	1fffffff 	.word	0x1fffffff
 8004af8:	08006e0c 	.word	0x08006e0c

08004afc <_ZN13PoolContainer4initEtt>:
{
 8004afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004afe:	46de      	mov	lr, fp
 8004b00:	4657      	mov	r7, sl
 8004b02:	464e      	mov	r6, r9
 8004b04:	4645      	mov	r5, r8
 8004b06:	b5e0      	push	{r5, r6, r7, lr}
 8004b08:	b083      	sub	sp, #12
 8004b0a:	0005      	movs	r5, r0
 8004b0c:	000f      	movs	r7, r1
 8004b0e:	4690      	mov	r8, r2
	if (!RingBase::init(n_buffers) || max_size == 0) {
 8004b10:	f000 f869 	bl	8004be6 <_ZN8RingBase4initEj>
 8004b14:	4681      	mov	r9, r0
 8004b16:	2800      	cmp	r0, #0
 8004b18:	d004      	beq.n	8004b24 <_ZN13PoolContainer4initEtt+0x28>
 8004b1a:	4643      	mov	r3, r8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d109      	bne.n	8004b34 <_ZN13PoolContainer4initEtt+0x38>
		return false;
 8004b20:	2300      	movs	r3, #0
 8004b22:	4699      	mov	r9, r3
}
 8004b24:	4648      	mov	r0, r9
 8004b26:	b003      	add	sp, #12
 8004b28:	bcf0      	pop	{r4, r5, r6, r7}
 8004b2a:	46bb      	mov	fp, r7
 8004b2c:	46b2      	mov	sl, r6
 8004b2e:	46a9      	mov	r9, r5
 8004b30:	46a0      	mov	r8, r4
 8004b32:	bdf0      	pop	{r4, r5, r6, r7, pc}
	m_pool.reserve(n_buffers);
 8004b34:	2318      	movs	r3, #24
 8004b36:	469a      	mov	sl, r3
 8004b38:	44aa      	add	sl, r5
			 - this->_M_impl._M_start); }
 8004b3a:	69aa      	ldr	r2, [r5, #24]
 8004b3c:	6a2b      	ldr	r3, [r5, #32]
 8004b3e:	1a9b      	subs	r3, r3, r2
 8004b40:	109b      	asrs	r3, r3, #2
      if (this->capacity() < __n)
 8004b42:	429f      	cmp	r7, r3
 8004b44:	d922      	bls.n	8004b8c <_ZN13PoolContainer4initEtt+0x90>
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8004b46:	69eb      	ldr	r3, [r5, #28]
 8004b48:	1a9b      	subs	r3, r3, r2
 8004b4a:	469b      	mov	fp, r3
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8004b4c:	2600      	movs	r6, #0
 8004b4e:	2f00      	cmp	r7, #0
 8004b50:	d003      	beq.n	8004b5a <_ZN13PoolContainer4initEtt+0x5e>
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8004b52:	00b8      	lsls	r0, r7, #2
 8004b54:	f000 fde8 	bl	8005728 <_Znwj>
 8004b58:	0006      	movs	r6, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8004b5a:	69a8      	ldr	r0, [r5, #24]
 8004b5c:	69ec      	ldr	r4, [r5, #28]
 8004b5e:	42a0      	cmp	r0, r4
 8004b60:	d007      	beq.n	8004b72 <_ZN13PoolContainer4initEtt+0x76>
 8004b62:	1a24      	subs	r4, r4, r0
 8004b64:	1934      	adds	r4, r6, r4
 8004b66:	0002      	movs	r2, r0
      _ForwardIterator __cur = __result;
 8004b68:	0033      	movs	r3, r6
 8004b6a:	ca02      	ldmia	r2!, {r1}
 8004b6c:	c302      	stmia	r3!, {r1}
      for (; __first != __last; ++__first, (void)++__cur)
 8004b6e:	42a3      	cmp	r3, r4
 8004b70:	d1fb      	bne.n	8004b6a <_ZN13PoolContainer4initEtt+0x6e>
	if (__p)
 8004b72:	2800      	cmp	r0, #0
 8004b74:	d003      	beq.n	8004b7e <_ZN13PoolContainer4initEtt+0x82>
			- this->_M_impl._M_start);
 8004b76:	6a29      	ldr	r1, [r5, #32]
 8004b78:	1a09      	subs	r1, r1, r0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 8004b7a:	f000 fdbd 	bl	80056f8 <_ZdlPvj>
	  this->_M_impl._M_start = __tmp;
 8004b7e:	61ae      	str	r6, [r5, #24]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8004b80:	465b      	mov	r3, fp
 8004b82:	18f3      	adds	r3, r6, r3
 8004b84:	61eb      	str	r3, [r5, #28]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8004b86:	00bb      	lsls	r3, r7, #2
 8004b88:	18f6      	adds	r6, r6, r3
 8004b8a:	622e      	str	r6, [r5, #32]
	for (u16 i = 0; i < n_buffers; ++i) {
 8004b8c:	2f00      	cmp	r7, #0
 8004b8e:	d027      	beq.n	8004be0 <_ZN13PoolContainer4initEtt+0xe4>
 8004b90:	2600      	movs	r6, #0
   */
  template<typename _Tp>
    _GLIBCXX23_CONSTEXPR
    inline __detail::__unique_ptr_array_t<_Tp>
    make_unique(size_t __num)
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8004b92:	2301      	movs	r3, #1
 8004b94:	425b      	negs	r3, r3
 8004b96:	4443      	add	r3, r8
 8004b98:	469b      	mov	fp, r3
 8004b9a:	2400      	movs	r4, #0
 8004b9c:	e00c      	b.n	8004bb8 <_ZN13PoolContainer4initEtt+0xbc>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8004b9e:	aa01      	add	r2, sp, #4
 8004ba0:	4650      	mov	r0, sl
 8004ba2:	f7ff ff39 	bl	8004a18 <_ZNSt6vectorISt10unique_ptrIA_hSt14default_deleteIS1_EESaIS4_EE17_M_realloc_insertIJS4_EEEvN9__gnu_cxx17__normal_iteratorIPS4_S6_EEDpOT_>
	if (__ptr != nullptr)
 8004ba6:	9801      	ldr	r0, [sp, #4]
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	d001      	beq.n	8004bb0 <_ZN13PoolContainer4initEtt+0xb4>
	  delete [] __ptr;
 8004bac:	f000 fda8 	bl	8005700 <_ZdaPv>
 8004bb0:	3601      	adds	r6, #1
 8004bb2:	b2b6      	uxth	r6, r6
 8004bb4:	42b7      	cmp	r7, r6
 8004bb6:	d013      	beq.n	8004be0 <_ZN13PoolContainer4initEtt+0xe4>
    { return unique_ptr<_Tp>(new remove_extent_t<_Tp>[__num]()); }
 8004bb8:	4640      	mov	r0, r8
 8004bba:	f000 fdc7 	bl	800574c <_Znaj>
 8004bbe:	0003      	movs	r3, r0
 8004bc0:	465a      	mov	r2, fp
 8004bc2:	1881      	adds	r1, r0, r2
 8004bc4:	701c      	strb	r4, [r3, #0]
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	1aca      	subs	r2, r1, r3
 8004bca:	d5fb      	bpl.n	8004bc4 <_ZN13PoolContainer4initEtt+0xc8>
      __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
 8004bcc:	9001      	str	r0, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8004bce:	69e9      	ldr	r1, [r5, #28]
 8004bd0:	6a2b      	ldr	r3, [r5, #32]
 8004bd2:	4299      	cmp	r1, r3
 8004bd4:	d0e3      	beq.n	8004b9e <_ZN13PoolContainer4initEtt+0xa2>
 8004bd6:	6008      	str	r0, [r1, #0]
	    ++this->_M_impl._M_finish;
 8004bd8:	69eb      	ldr	r3, [r5, #28]
 8004bda:	3304      	adds	r3, #4
 8004bdc:	61eb      	str	r3, [r5, #28]
      pointer&   _M_ptr() noexcept { return std::get<0>(_M_t); }
 8004bde:	e7e7      	b.n	8004bb0 <_ZN13PoolContainer4initEtt+0xb4>
	m_max_size = max_size;
 8004be0:	4643      	mov	r3, r8
 8004be2:	84ab      	strh	r3, [r5, #36]	@ 0x24
	return true;
 8004be4:	e79e      	b.n	8004b24 <_ZN13PoolContainer4initEtt+0x28>

08004be6 <_ZN8RingBase4initEj>:
	init(capacity);
}


bool RingBase::init(const reg capacity)
{
 8004be6:	0003      	movs	r3, r0
	if (!is_power_of_2(capacity)) {
		return false;
 8004be8:	2000      	movs	r0, #0
    volatile reg head = 0;
};

inline bool is_power_of_2(const reg x)
{
    return (x != 0) && ((x & (x - 1)) == 0);
 8004bea:	2900      	cmp	r1, #0
 8004bec:	d00a      	beq.n	8004c04 <_ZN8RingBase4initEj+0x1e>
 8004bee:	1e4a      	subs	r2, r1, #1
 8004bf0:	420a      	tst	r2, r1
 8004bf2:	d107      	bne.n	8004c04 <_ZN8RingBase4initEj+0x1e>
	}

	cap = capacity;
 8004bf4:	6059      	str	r1, [r3, #4]
	msk = (capacity - 1);
 8004bf6:	609a      	str	r2, [r3, #8]
	xor_msk = (cap | msk);
 8004bf8:	4311      	orrs	r1, r2
 8004bfa:	60d9      	str	r1, [r3, #12]
	tail = 0;
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	611a      	str	r2, [r3, #16]
	head = 0;
 8004c00:	615a      	str	r2, [r3, #20]

	return true;
 8004c02:	3001      	adds	r0, #1
}
 8004c04:	4770      	bx	lr
	...

08004c08 <_ZN8RingBuffD1Ev>:
#include <cstdlib>
#include <cassert>

#include "crc/CrcCalculator.h"

RingBuff::~RingBuff()
 8004c08:	b510      	push	{r4, lr}
 8004c0a:	0004      	movs	r4, r0
 8004c0c:	4b05      	ldr	r3, [pc, #20]	@ (8004c24 <_ZN8RingBuffD1Ev+0x1c>)
 8004c0e:	6003      	str	r3, [r0, #0]
{
	// TODO Auto-generated destructor stub
	if (isHeap) {
 8004c10:	7f03      	ldrb	r3, [r0, #28]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d004      	beq.n	8004c20 <_ZN8RingBuffD1Ev+0x18>
		delete[] static_cast<u8*>(buffer);
 8004c16:	6980      	ldr	r0, [r0, #24]
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	d001      	beq.n	8004c20 <_ZN8RingBuffD1Ev+0x18>
 8004c1c:	f000 fd70 	bl	8005700 <_ZdaPv>
	}
}
 8004c20:	0020      	movs	r0, r4
 8004c22:	bd10      	pop	{r4, pc}
 8004c24:	08006e30 	.word	0x08006e30

08004c28 <_ZN8RingBuffD0Ev>:
RingBuff::~RingBuff()
 8004c28:	b510      	push	{r4, lr}
 8004c2a:	0004      	movs	r4, r0
}
 8004c2c:	f7ff ffec 	bl	8004c08 <_ZN8RingBuffD1Ev>
 8004c30:	2120      	movs	r1, #32
 8004c32:	0020      	movs	r0, r4
 8004c34:	f000 fd60 	bl	80056f8 <_ZdlPvj>
 8004c38:	0020      	movs	r0, r4
 8004c3a:	bd10      	pop	{r4, pc}

08004c3c <_ZN8RingBuff4initEPvj>:


bool RingBuff::init(void* const buffer, const reg size)
{
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	0004      	movs	r4, r0
 8004c40:	000e      	movs	r6, r1
 8004c42:	0017      	movs	r7, r2
	if(!RingBase::init(size)) {
 8004c44:	0011      	movs	r1, r2
 8004c46:	f7ff ffce 	bl	8004be6 <_ZN8RingBase4initEj>
 8004c4a:	1e05      	subs	r5, r0, #0
 8004c4c:	d004      	beq.n	8004c58 <_ZN8RingBuff4initEPvj+0x1c>
		return false;
	}

	if(buffer == nullptr) {
 8004c4e:	2e00      	cmp	r6, #0
 8004c50:	d004      	beq.n	8004c5c <_ZN8RingBuff4initEPvj+0x20>
		this->buffer = new u8[size];
		isHeap = true;
	} else {
		this->buffer = buffer;
 8004c52:	61a6      	str	r6, [r4, #24]
		isHeap = false;
 8004c54:	2300      	movs	r3, #0
 8004c56:	7723      	strb	r3, [r4, #28]
	}

	return true;
}
 8004c58:	0028      	movs	r0, r5
 8004c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		this->buffer = new u8[size];
 8004c5c:	0038      	movs	r0, r7
 8004c5e:	f000 fd75 	bl	800574c <_Znaj>
 8004c62:	61a0      	str	r0, [r4, #24]
		isHeap = true;
 8004c64:	2301      	movs	r3, #1
 8004c66:	7723      	strb	r3, [r4, #28]
 8004c68:	e7f6      	b.n	8004c58 <_ZN8RingBuff4initEPvj+0x1c>

08004c6a <_ZN8RingBuff3getEPvj>:
 * GET
 * *********************************************************
 */

reg RingBuff::get(void* const buffer, const reg size)
{
 8004c6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6c:	46de      	mov	lr, fp
 8004c6e:	4657      	mov	r7, sl
 8004c70:	464e      	mov	r6, r9
 8004c72:	4645      	mov	r5, r8
 8004c74:	b5e0      	push	{r5, r6, r7, lr}
 8004c76:	0004      	movs	r4, r0
 8004c78:	4689      	mov	r9, r1
	// move to registers------------------------------------------
	const u8* const ring_ptr 			= static_cast<u8*>(this->buffer);
 8004c7a:	6987      	ldr	r7, [r0, #24]
	if(ring_ptr == nullptr || isEmpty()) {
 8004c7c:	2f00      	cmp	r7, #0
 8004c7e:	d032      	beq.n	8004ce6 <_ZN8RingBuff3getEPvj+0x7c>
    inline bool isEmpty() const { return tail == head; }
 8004c80:	6903      	ldr	r3, [r0, #16]
 8004c82:	6941      	ldr	r1, [r0, #20]
 8004c84:	4299      	cmp	r1, r3
 8004c86:	d030      	beq.n	8004cea <_ZN8RingBuff3getEPvj+0x80>
    inline reg getTail() const { return tail; }
 8004c88:	6906      	ldr	r6, [r0, #16]
    inline reg length() const { return head - tail; }
 8004c8a:	6945      	ldr	r5, [r0, #20]
 8004c8c:	6903      	ldr	r3, [r0, #16]
 8004c8e:	1aed      	subs	r5, r5, r3
 8004c90:	4295      	cmp	r5, r2
 8004c92:	d900      	bls.n	8004c96 <_ZN8RingBuff3getEPvj+0x2c>
 8004c94:	0015      	movs	r5, r2
	const reg tail_reg 			= getTail();
	const reg msk_reg			= getMask();

	const reg n_elem 			= length();								// get n elements
	const reg size_constr 		= (size < n_elem) ? size : n_elem;		// constrain input size
	const reg tail_pos 			= tail_reg & msk_reg;					// get tail position
 8004c96:	68a3      	ldr	r3, [r4, #8]
 8004c98:	4033      	ands	r3, r6
 8004c9a:	4698      	mov	r8, r3
    inline reg capacity() const { return cap; }
 8004c9c:	6863      	ldr	r3, [r4, #4]
 8004c9e:	469a      	mov	sl, r3
	const reg remaining_to_end 	= capacity() - tail_pos;				// get remaining from tail to end
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	1a9b      	subs	r3, r3, r2
 8004ca4:	469b      	mov	fp, r3

	// do logic --------------------------------------------------
	if(size_constr > remaining_to_end) {
 8004ca6:	429d      	cmp	r5, r3
 8004ca8:	d916      	bls.n	8004cd8 <_ZN8RingBuff3getEPvj+0x6e>
		const reg remaining_n		= size_constr - remaining_to_end;
		/* first get the data from fifo->out until the end of the buffer */
		std::memcpy(buffer, ring_ptr + tail_pos, remaining_to_end);
 8004caa:	18b9      	adds	r1, r7, r2
 8004cac:	001a      	movs	r2, r3
 8004cae:	4648      	mov	r0, r9
 8004cb0:	f001 fec4 	bl	8006a3c <memcpy>
		/* then get the rest (if any) from the beginning of the buffer */
		std::memcpy(static_cast<u8*>(buffer) + remaining_to_end, ring_ptr, remaining_n);
 8004cb4:	4648      	mov	r0, r9
 8004cb6:	4458      	add	r0, fp
		const reg remaining_n		= size_constr - remaining_to_end;
 8004cb8:	4643      	mov	r3, r8
 8004cba:	4652      	mov	r2, sl
 8004cbc:	1a9a      	subs	r2, r3, r2
 8004cbe:	1952      	adds	r2, r2, r5
		std::memcpy(static_cast<u8*>(buffer) + remaining_to_end, ring_ptr, remaining_n);
 8004cc0:	0039      	movs	r1, r7
 8004cc2:	f001 febb 	bl	8006a3c <memcpy>
		/* get all the data */
		std::memcpy(buffer, ring_ptr + tail_pos, size_constr);
	}

	// proceed signalls
	setTail(tail_reg + size_constr);
 8004cc6:	19ab      	adds	r3, r5, r6
    inline void setTail(const reg new_tail) {tail = new_tail; }
 8004cc8:	6123      	str	r3, [r4, #16]
	return size_constr;
}
 8004cca:	0028      	movs	r0, r5
 8004ccc:	bcf0      	pop	{r4, r5, r6, r7}
 8004cce:	46bb      	mov	fp, r7
 8004cd0:	46b2      	mov	sl, r6
 8004cd2:	46a9      	mov	r9, r5
 8004cd4:	46a0      	mov	r8, r4
 8004cd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		std::memcpy(buffer, ring_ptr + tail_pos, size_constr);
 8004cd8:	0039      	movs	r1, r7
 8004cda:	4441      	add	r1, r8
 8004cdc:	002a      	movs	r2, r5
 8004cde:	4648      	mov	r0, r9
 8004ce0:	f001 feac 	bl	8006a3c <memcpy>
 8004ce4:	e7ef      	b.n	8004cc6 <_ZN8RingBuff3getEPvj+0x5c>
		return 0;
 8004ce6:	2500      	movs	r5, #0
 8004ce8:	e7ef      	b.n	8004cca <_ZN8RingBuff3getEPvj+0x60>
 8004cea:	2500      	movs	r5, #0
 8004cec:	e7ed      	b.n	8004cca <_ZN8RingBuff3getEPvj+0x60>

08004cee <_ZN8RingBuff4getcEv>:

u8 RingBuff::getc()
{
 8004cee:	0003      	movs	r3, r0
	// move to registers------------------------------------------
	const u8* const ring_ptr 	= static_cast<u8*>(this->buffer);
 8004cf0:	6981      	ldr	r1, [r0, #24]
	if(ring_ptr == nullptr || isEmpty()) {
 8004cf2:	2900      	cmp	r1, #0
 8004cf4:	d00a      	beq.n	8004d0c <_ZN8RingBuff4getcEv+0x1e>
    inline bool isEmpty() const { return tail == head; }
 8004cf6:	6900      	ldr	r0, [r0, #16]
 8004cf8:	695a      	ldr	r2, [r3, #20]
 8004cfa:	4290      	cmp	r0, r2
 8004cfc:	d008      	beq.n	8004d10 <_ZN8RingBuff4getcEv+0x22>
    inline reg getTail() const { return tail; }
 8004cfe:	691a      	ldr	r2, [r3, #16]
		return 0;
	}

	const reg tail_reg 		= getTail();
	const reg msk_reg		= getMask();
	const reg tail_pos 		= tail_reg & msk_reg;					// get tail position
 8004d00:	6898      	ldr	r0, [r3, #8]
 8004d02:	4010      	ands	r0, r2

	// do logic --------------------------------------------------
	const u8 value = *(ring_ptr + tail_pos);
 8004d04:	5c08      	ldrb	r0, [r1, r0]

	// proceed signalls
	setTail(tail_reg + 1);
 8004d06:	3201      	adds	r2, #1
    inline void setTail(const reg new_tail) {tail = new_tail; }
 8004d08:	611a      	str	r2, [r3, #16]
	return value;
}
 8004d0a:	4770      	bx	lr
		return 0;
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	e7fc      	b.n	8004d0a <_ZN8RingBuff4getcEv+0x1c>
 8004d10:	2000      	movs	r0, #0
 8004d12:	e7fa      	b.n	8004d0a <_ZN8RingBuff4getcEv+0x1c>

08004d14 <_ZN8RingBuff3putEPKvj>:
  * PUT
  * *********************************************************
  */

reg RingBuff::put(const void* const buffer, const reg size)
{
 8004d14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d16:	46de      	mov	lr, fp
 8004d18:	4657      	mov	r7, sl
 8004d1a:	464e      	mov	r6, r9
 8004d1c:	4645      	mov	r5, r8
 8004d1e:	b5e0      	push	{r5, r6, r7, lr}
 8004d20:	0004      	movs	r4, r0
 8004d22:	4688      	mov	r8, r1
	// move to registers------------------------------------------------------
	u8* const ring_ptr 			= static_cast<u8*>(this->buffer);
 8004d24:	6983      	ldr	r3, [r0, #24]
 8004d26:	4699      	mov	r9, r3
	if(ring_ptr == nullptr || isFull()) {
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d033      	beq.n	8004d94 <_ZN8RingBuff3putEPKvj+0x80>
    inline bool isFull() const { return (((head ^ tail) & xor_msk) == cap); }
 8004d2c:	6943      	ldr	r3, [r0, #20]
 8004d2e:	6901      	ldr	r1, [r0, #16]
 8004d30:	6846      	ldr	r6, [r0, #4]
 8004d32:	4059      	eors	r1, r3
 8004d34:	68c3      	ldr	r3, [r0, #12]
 8004d36:	400b      	ands	r3, r1
 8004d38:	42b3      	cmp	r3, r6
 8004d3a:	d02d      	beq.n	8004d98 <_ZN8RingBuff3putEPKvj+0x84>
    inline reg getTail() const { return tail; }
 8004d3c:	6905      	ldr	r5, [r0, #16]
    inline reg getHead() const { return head; }
 8004d3e:	6947      	ldr	r7, [r0, #20]
	const reg tail_reg 			= getTail();
	const reg head_reg 			= getHead();
	const reg msk_reg			= getMask();
	const reg cap_reg			= capacity();

	const reg head_pos 			= head_reg & msk_reg;
 8004d40:	6883      	ldr	r3, [r0, #8]
 8004d42:	403b      	ands	r3, r7
 8004d44:	469b      	mov	fp, r3
	const reg remaining_to_end 	= cap_reg - head_pos;					// get remaining from head to end
 8004d46:	1af3      	subs	r3, r6, r3
 8004d48:	469a      	mov	sl, r3
	const reg n_empty 			= (cap_reg - head_reg) + tail_reg;		// black magic for get empty cells
 8004d4a:	1975      	adds	r5, r6, r5
 8004d4c:	1bed      	subs	r5, r5, r7
 8004d4e:	4295      	cmp	r5, r2
 8004d50:	d900      	bls.n	8004d54 <_ZN8RingBuff3putEPKvj+0x40>
 8004d52:	0015      	movs	r5, r2
	const reg size_constr 		= (size < n_empty) ? size : n_empty;	// constrain input size

	// do logic ------------------------------------------------------------
	if(size_constr > remaining_to_end) {
 8004d54:	4555      	cmp	r5, sl
 8004d56:	d916      	bls.n	8004d86 <_ZN8RingBuff3putEPKvj+0x72>
		const reg remaining_n		= size_constr - remaining_to_end;
		/* first put the data starting from fifo->in to buffer end */
		std::memcpy(ring_ptr + head_pos, buffer, remaining_to_end);
 8004d58:	4648      	mov	r0, r9
 8004d5a:	4458      	add	r0, fp
 8004d5c:	4652      	mov	r2, sl
 8004d5e:	4641      	mov	r1, r8
 8004d60:	f001 fe6c 	bl	8006a3c <memcpy>
		const reg remaining_n		= size_constr - remaining_to_end;
 8004d64:	465b      	mov	r3, fp
 8004d66:	1b9a      	subs	r2, r3, r6
 8004d68:	1952      	adds	r2, r2, r5
		/* then put the rest (if any) at the beginning of the buffer */
		std::memcpy(ring_ptr, (u8* const)(buffer) + remaining_to_end, remaining_n);
 8004d6a:	4641      	mov	r1, r8
 8004d6c:	4451      	add	r1, sl
 8004d6e:	4648      	mov	r0, r9
 8004d70:	f001 fe64 	bl	8006a3c <memcpy>
		/* put all the data */
		std::memcpy(ring_ptr + head_pos, buffer, size_constr);
	}

	// proceed signalls
	setHead(head_reg + size_constr);
 8004d74:	19eb      	adds	r3, r5, r7
    inline void setHead(const reg new_head) {head = new_head; }
 8004d76:	6163      	str	r3, [r4, #20]
	return size_constr;
}
 8004d78:	0028      	movs	r0, r5
 8004d7a:	bcf0      	pop	{r4, r5, r6, r7}
 8004d7c:	46bb      	mov	fp, r7
 8004d7e:	46b2      	mov	sl, r6
 8004d80:	46a9      	mov	r9, r5
 8004d82:	46a0      	mov	r8, r4
 8004d84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		std::memcpy(ring_ptr + head_pos, buffer, size_constr);
 8004d86:	4648      	mov	r0, r9
 8004d88:	4458      	add	r0, fp
 8004d8a:	002a      	movs	r2, r5
 8004d8c:	4641      	mov	r1, r8
 8004d8e:	f001 fe55 	bl	8006a3c <memcpy>
 8004d92:	e7ef      	b.n	8004d74 <_ZN8RingBuff3putEPKvj+0x60>
		return 0;
 8004d94:	2500      	movs	r5, #0
 8004d96:	e7ef      	b.n	8004d78 <_ZN8RingBuff3putEPKvj+0x64>
 8004d98:	2500      	movs	r5, #0
 8004d9a:	e7ed      	b.n	8004d78 <_ZN8RingBuff3putEPKvj+0x64>

08004d9c <_ZN8RingBuff4putcEh>:

bool RingBuff::putc(const u8 c)
{
 8004d9c:	b510      	push	{r4, lr}
	// move to registers------------------------------------------------------
	u8* const ring_ptr 			= static_cast<u8*>(this->buffer);
 8004d9e:	6984      	ldr	r4, [r0, #24]
	if(ring_ptr == nullptr || isFull()) {
 8004da0:	2c00      	cmp	r4, #0
 8004da2:	d00f      	beq.n	8004dc4 <_ZN8RingBuff4putcEh+0x28>
    inline bool isFull() const { return (((head ^ tail) & xor_msk) == cap); }
 8004da4:	6942      	ldr	r2, [r0, #20]
 8004da6:	6903      	ldr	r3, [r0, #16]
 8004da8:	405a      	eors	r2, r3
 8004daa:	68c3      	ldr	r3, [r0, #12]
 8004dac:	4013      	ands	r3, r2
 8004dae:	6842      	ldr	r2, [r0, #4]
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d009      	beq.n	8004dc8 <_ZN8RingBuff4putcEh+0x2c>
    inline reg getHead() const { return head; }
 8004db4:	6943      	ldr	r3, [r0, #20]
		return false;
	}

	const reg head_reg 			= getHead();
	const reg msk_reg			= getMask();
	const reg head_pos 			= head_reg & msk_reg;
 8004db6:	6882      	ldr	r2, [r0, #8]
 8004db8:	401a      	ands	r2, r3

	*(ring_ptr + head_pos) = c;
 8004dba:	54a1      	strb	r1, [r4, r2]

	// proceed signalls
	setHead(head_reg + 1);
 8004dbc:	3301      	adds	r3, #1
    inline void setHead(const reg new_head) {head = new_head; }
 8004dbe:	6143      	str	r3, [r0, #20]
	return true;
 8004dc0:	2001      	movs	r0, #1
}
 8004dc2:	bd10      	pop	{r4, pc}
		return false;
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e7fc      	b.n	8004dc2 <_ZN8RingBuff4putcEh+0x26>
 8004dc8:	2000      	movs	r0, #0
 8004dca:	e7fa      	b.n	8004dc2 <_ZN8RingBuff4putcEh+0x26>

08004dcc <_ZN8RingBuff8crc_fromER13CrcCalculatorRKS_>:
  * *********************************************************
  * CRC calculation
  * *********************************************************
  */
void RingBuff::crc_from(CrcCalculator &crc, const RingBuff &from)
{
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	0004      	movs	r4, r0
	// move to registers------------------------------------------
	const u8* const ring_ptr 			= static_cast<u8*>(from.buffer);
 8004dd0:	698e      	ldr	r6, [r1, #24]
	if(ring_ptr == nullptr || from.isEmpty()) {
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	d018      	beq.n	8004e08 <_ZN8RingBuff8crc_fromER13CrcCalculatorRKS_+0x3c>
    inline bool isEmpty() const { return tail == head; }
 8004dd6:	690b      	ldr	r3, [r1, #16]
 8004dd8:	694a      	ldr	r2, [r1, #20]
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d014      	beq.n	8004e08 <_ZN8RingBuff8crc_fromER13CrcCalculatorRKS_+0x3c>
    inline reg getTail() const { return tail; }
 8004dde:	690a      	ldr	r2, [r1, #16]
    inline reg length() const { return head - tail; }
 8004de0:	694d      	ldr	r5, [r1, #20]
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	1aed      	subs	r5, r5, r3

	const reg tail_reg 			= from.getTail();
	const reg msk_reg			= from.getMask();

	const reg n_elem 			= from.length();								// get n elements
	const reg tail_pos 			= tail_reg & msk_reg;					// get tail position
 8004de6:	688b      	ldr	r3, [r1, #8]
 8004de8:	4013      	ands	r3, r2
    inline reg capacity() const { return cap; }
 8004dea:	6849      	ldr	r1, [r1, #4]
	const reg remaining_to_end 	= from.capacity() - tail_pos;				// get remaining from tail to end
 8004dec:	1aca      	subs	r2, r1, r3

	// do logic --------------------------------------------------
	if(n_elem > remaining_to_end) {
 8004dee:	42aa      	cmp	r2, r5
 8004df0:	d20b      	bcs.n	8004e0a <_ZN8RingBuff8crc_fromER13CrcCalculatorRKS_+0x3e>
		const reg remaining_n		= n_elem - remaining_to_end;
 8004df2:	195d      	adds	r5, r3, r5
 8004df4:	1a6d      	subs	r5, r5, r1
		/* first get the data from fifo->out until the end of the buffer */
		crc.array(ring_ptr + tail_pos, remaining_to_end);
 8004df6:	18f1      	adds	r1, r6, r3
	inline void array(const u8* const data, const reg len) { m_array_f(m_crc, data, len); }
 8004df8:	6800      	ldr	r0, [r0, #0]
 8004dfa:	68e3      	ldr	r3, [r4, #12]
 8004dfc:	4798      	blx	r3
 8004dfe:	6820      	ldr	r0, [r4, #0]
 8004e00:	68e3      	ldr	r3, [r4, #12]
 8004e02:	002a      	movs	r2, r5
 8004e04:	0031      	movs	r1, r6
 8004e06:	4798      	blx	r3
		crc.array(ring_ptr, remaining_n);
	} else {
		/* get all the data */
		crc.array(ring_ptr + tail_pos, n_elem);
	}
}
 8004e08:	bd70      	pop	{r4, r5, r6, pc}
		crc.array(ring_ptr + tail_pos, n_elem);
 8004e0a:	18f1      	adds	r1, r6, r3
 8004e0c:	6800      	ldr	r0, [r0, #0]
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	002a      	movs	r2, r5
 8004e12:	4798      	blx	r3
 8004e14:	e7f8      	b.n	8004e08 <_ZN8RingBuff8crc_fromER13CrcCalculatorRKS_+0x3c>

08004e16 <_ZN7CrcBaseC1Eh>:
#include "CrcBase.h"
#include <cstring>
#include <cstdlib>

// Constructor to allocate memory of given size
CrcBase::CrcBase(const u8 size)
 8004e16:	b570      	push	{r4, r5, r6, lr}
 8004e18:	0004      	movs	r4, r0
 8004e1a:	000d      	movs	r5, r1
{
    m_crc = std::malloc(size); 	// Allocate memory
 8004e1c:	0008      	movs	r0, r1
 8004e1e:	f000 ff09 	bl	8005c34 <malloc>
 8004e22:	6020      	str	r0, [r4, #0]
    m_crc_size = size; 			// Store the size
 8004e24:	7125      	strb	r5, [r4, #4]
}
 8004e26:	0020      	movs	r0, r4
 8004e28:	bd70      	pop	{r4, r5, r6, pc}

08004e2a <_ZN7CrcBaseC1ERKS_>:

// Copy constructor
CrcBase::CrcBase(const CrcBase& other)
 8004e2a:	b570      	push	{r4, r5, r6, lr}
 8004e2c:	0004      	movs	r4, r0
 8004e2e:	000d      	movs	r5, r1
{
    m_crc_size = other.m_crc_size; 					// Copy the size
 8004e30:	790e      	ldrb	r6, [r1, #4]
 8004e32:	7106      	strb	r6, [r0, #4]
    m_crc = std::malloc(m_crc_size); 				// Allocate new memory
 8004e34:	0030      	movs	r0, r6
 8004e36:	f000 fefd 	bl	8005c34 <malloc>
 8004e3a:	6020      	str	r0, [r4, #0]
    std::memcpy(m_crc, other.m_crc, m_crc_size); 	// Copy data from the other object
 8004e3c:	6829      	ldr	r1, [r5, #0]
 8004e3e:	0032      	movs	r2, r6
 8004e40:	f001 fdfc 	bl	8006a3c <memcpy>
}
 8004e44:	0020      	movs	r0, r4
 8004e46:	bd70      	pop	{r4, r5, r6, pc}

08004e48 <_ZN7CrcBaseD1Ev>:

// Destructor
CrcBase::~CrcBase()
 8004e48:	b510      	push	{r4, lr}
 8004e4a:	0004      	movs	r4, r0
{
    std::free(m_crc); // Free allocated memory
 8004e4c:	6800      	ldr	r0, [r0, #0]
 8004e4e:	f000 fefb 	bl	8005c48 <free>
}
 8004e52:	0020      	movs	r0, r4
 8004e54:	bd10      	pop	{r4, pc}

08004e56 <_ZNK7CrcBaseeqERKS_>:

// Equality operator
bool CrcBase::operator==(const CrcBase& other) const
{
 8004e56:	b510      	push	{r4, lr}
 8004e58:	0003      	movs	r3, r0
    if (m_crc_size != other.m_crc_size) { // Check for different sizes
 8004e5a:	7902      	ldrb	r2, [r0, #4]
 8004e5c:	790c      	ldrb	r4, [r1, #4]
        return false;
 8004e5e:	2000      	movs	r0, #0
    if (m_crc_size != other.m_crc_size) { // Check for different sizes
 8004e60:	4294      	cmp	r4, r2
 8004e62:	d106      	bne.n	8004e72 <_ZNK7CrcBaseeqERKS_+0x1c>
    }

    return std::memcmp(m_crc, other.m_crc, m_crc_size) == 0; // Compare memory
 8004e64:	6809      	ldr	r1, [r1, #0]
 8004e66:	6818      	ldr	r0, [r3, #0]
 8004e68:	f001 fcde 	bl	8006828 <memcmp>
 8004e6c:	4243      	negs	r3, r0
 8004e6e:	4158      	adcs	r0, r3
 8004e70:	b2c0      	uxtb	r0, r0
}
 8004e72:	bd10      	pop	{r4, pc}

08004e74 <_ZN7CrcBaseixEj>:
		static_cast<u8*>(m_crc)[index] = b;
	}
}
u8& CrcBase::operator[](const reg index)
{
	return static_cast<u8*>(m_crc)[index];
 8004e74:	6800      	ldr	r0, [r0, #0]
 8004e76:	1840      	adds	r0, r0, r1
}
 8004e78:	4770      	bx	lr

08004e7a <_ZN13CrcCalculatorC1EhPFvPvEPFvS0_PKhjEPFvS0_hE>:
 */

#include "CrcCalculator.h"

// constructor
CrcCalculator::CrcCalculator(const u8 size, crc_init_f init_f, crc_array_f array_f, crc_byte_f byte_f)
 8004e7a:	b570      	push	{r4, r5, r6, lr}
 8004e7c:	0004      	movs	r4, r0
 8004e7e:	0016      	movs	r6, r2
 8004e80:	001d      	movs	r5, r3
: CrcBase(size),
  m_init_f(init_f),
  m_array_f(array_f),
  m_byte_f(byte_f)
 8004e82:	f7ff ffc8 	bl	8004e16 <_ZN7CrcBaseC1Eh>
  m_init_f(init_f),
 8004e86:	60a6      	str	r6, [r4, #8]
  m_array_f(array_f),
 8004e88:	60e5      	str	r5, [r4, #12]
  m_byte_f(byte_f)
 8004e8a:	9b04      	ldr	r3, [sp, #16]
 8004e8c:	6123      	str	r3, [r4, #16]
{

}
 8004e8e:	0020      	movs	r0, r4
 8004e90:	bd70      	pop	{r4, r5, r6, pc}
	...

08004e94 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE>:
#	include "crc/crc64.h"
#endif /* _MY_CRC64_ENA */


CrcCalculator* const CrcFactory::createCRC(const CrcStrategy type)
{
 8004e94:	b510      	push	{r4, lr}
 8004e96:	b082      	sub	sp, #8
	switch(type) {
 8004e98:	2802      	cmp	r0, #2
 8004e9a:	d036      	beq.n	8004f0a <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x76>
 8004e9c:	d811      	bhi.n	8004ec2 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x2e>
 8004e9e:	2800      	cmp	r0, #0
 8004ea0:	d022      	beq.n	8004ee8 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x54>
#ifdef _MY_CRC16_ENA
		CrcCalculator* const crc = new CrcCalculator(
				sizeof(u8),
				reinterpret_cast<CrcCalculator::crc_init_f>(_MY_CRC16_INIT_BASE),
				reinterpret_cast<CrcCalculator::crc_array_f>(_MY_CRC16_ARRAY_BASE),
				reinterpret_cast<CrcCalculator::crc_byte_f>(_MY_CRC16_BYTE_BASE));
 8004ea2:	2014      	movs	r0, #20
 8004ea4:	f000 fc40 	bl	8005728 <_Znwj>
 8004ea8:	0004      	movs	r4, r0
 8004eaa:	4b20      	ldr	r3, [pc, #128]	@ (8004f2c <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x98>)
 8004eac:	4a20      	ldr	r2, [pc, #128]	@ (8004f30 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x9c>)
 8004eae:	4921      	ldr	r1, [pc, #132]	@ (8004f34 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xa0>)
 8004eb0:	9100      	str	r1, [sp, #0]
 8004eb2:	2101      	movs	r1, #1
 8004eb4:	f7ff ffe1 	bl	8004e7a <_ZN13CrcCalculatorC1EhPFvPvEPFvS0_PKhjEPFvS0_hE>
	// Copy constructor
	CrcCalculator(const CrcCalculator& other);
	//destructor
	~CrcCalculator() = default;

	inline void init() { m_init_f(m_crc); }
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	68a3      	ldr	r3, [r4, #8]
 8004ebc:	4798      	blx	r3

	default: return nullptr;

	}

	return nullptr;
 8004ebe:	2400      	movs	r4, #0
 8004ec0:	e020      	b.n	8004f04 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x70>
	switch(type) {
 8004ec2:	2400      	movs	r4, #0
 8004ec4:	2803      	cmp	r0, #3
 8004ec6:	d11d      	bne.n	8004f04 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x70>
				reinterpret_cast<CrcCalculator::crc_byte_f>(_MY_CRC64_BYTE_BASE));
 8004ec8:	2014      	movs	r0, #20
 8004eca:	f000 fc2d 	bl	8005728 <_Znwj>
 8004ece:	0004      	movs	r4, r0
 8004ed0:	4b19      	ldr	r3, [pc, #100]	@ (8004f38 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xa4>)
 8004ed2:	4a1a      	ldr	r2, [pc, #104]	@ (8004f3c <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xa8>)
 8004ed4:	491a      	ldr	r1, [pc, #104]	@ (8004f40 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xac>)
 8004ed6:	9100      	str	r1, [sp, #0]
 8004ed8:	2101      	movs	r1, #1
 8004eda:	f7ff ffce 	bl	8004e7a <_ZN13CrcCalculatorC1EhPFvPvEPFvS0_PKhjEPFvS0_hE>
 8004ede:	6820      	ldr	r0, [r4, #0]
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	4798      	blx	r3
	return nullptr;
 8004ee4:	2400      	movs	r4, #0
 8004ee6:	e00d      	b.n	8004f04 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x70>
				reinterpret_cast<CrcCalculator::crc_byte_f>(_MY_CRC8_BYTE_BASE));
 8004ee8:	2014      	movs	r0, #20
 8004eea:	f000 fc1d 	bl	8005728 <_Znwj>
 8004eee:	0004      	movs	r4, r0
 8004ef0:	4b14      	ldr	r3, [pc, #80]	@ (8004f44 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xb0>)
 8004ef2:	4a15      	ldr	r2, [pc, #84]	@ (8004f48 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xb4>)
 8004ef4:	4915      	ldr	r1, [pc, #84]	@ (8004f4c <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xb8>)
 8004ef6:	9100      	str	r1, [sp, #0]
 8004ef8:	2101      	movs	r1, #1
 8004efa:	f7ff ffbe 	bl	8004e7a <_ZN13CrcCalculatorC1EhPFvPvEPFvS0_PKhjEPFvS0_hE>
 8004efe:	6820      	ldr	r0, [r4, #0]
 8004f00:	68a3      	ldr	r3, [r4, #8]
 8004f02:	4798      	blx	r3
}
 8004f04:	0020      	movs	r0, r4
 8004f06:	b002      	add	sp, #8
 8004f08:	bd10      	pop	{r4, pc}
				reinterpret_cast<CrcCalculator::crc_byte_f>(_MY_CRC32_BYTE_BASE));
 8004f0a:	2014      	movs	r0, #20
 8004f0c:	f000 fc0c 	bl	8005728 <_Znwj>
 8004f10:	0004      	movs	r4, r0
 8004f12:	4b0f      	ldr	r3, [pc, #60]	@ (8004f50 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xbc>)
 8004f14:	4a0f      	ldr	r2, [pc, #60]	@ (8004f54 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xc0>)
 8004f16:	4910      	ldr	r1, [pc, #64]	@ (8004f58 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0xc4>)
 8004f18:	9100      	str	r1, [sp, #0]
 8004f1a:	2101      	movs	r1, #1
 8004f1c:	f7ff ffad 	bl	8004e7a <_ZN13CrcCalculatorC1EhPFvPvEPFvS0_PKhjEPFvS0_hE>
 8004f20:	6820      	ldr	r0, [r4, #0]
 8004f22:	68a3      	ldr	r3, [r4, #8]
 8004f24:	4798      	blx	r3
	return nullptr;
 8004f26:	2400      	movs	r4, #0
 8004f28:	e7ec      	b.n	8004f04 <_ZN10CrcFactory9createCRCENS_11CrcStrategyE+0x70>
 8004f2a:	46c0      	nop			@ (mov r8, r8)
 8004f2c:	08004f65 	.word	0x08004f65
 8004f30:	08004f5d 	.word	0x08004f5d
 8004f34:	08004f91 	.word	0x08004f91
 8004f38:	08005009 	.word	0x08005009
 8004f3c:	08004ffd 	.word	0x08004ffd
 8004f40:	08005049 	.word	0x08005049
 8004f44:	0800507d 	.word	0x0800507d
 8004f48:	08005075 	.word	0x08005075
 8004f4c:	080050a1 	.word	0x080050a1
 8004f50:	08004fb5 	.word	0x08004fb5
 8004f54:	08004fad 	.word	0x08004fad
 8004f58:	08004fe1 	.word	0x08004fe1

08004f5c <crc16_t10_dif_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc16_t10_dif_init_base(u16* const crc)
{
	*crc = CRC16INIT;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	8003      	strh	r3, [r0, #0]
}
 8004f60:	4770      	bx	lr
	...

08004f64 <fast_crc16_t10_dif_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc16_t10_dif_array_base(u16* const crc, const u8* data, reg len)
{
 8004f64:	b570      	push	{r4, r5, r6, lr}
	u16 crc16 = *crc;
 8004f66:	8803      	ldrh	r3, [r0, #0]
	CRC16_FAST_ARRAY_PROCEED(crc16, data, len);
 8004f68:	2a00      	cmp	r2, #0
 8004f6a:	d00d      	beq.n	8004f88 <fast_crc16_t10_dif_array_base+0x24>
 8004f6c:	000c      	movs	r4, r1
 8004f6e:	188a      	adds	r2, r1, r2
 8004f70:	4e06      	ldr	r6, [pc, #24]	@ (8004f8c <fast_crc16_t10_dif_array_base+0x28>)
 8004f72:	0a19      	lsrs	r1, r3, #8
 8004f74:	7825      	ldrb	r5, [r4, #0]
 8004f76:	4069      	eors	r1, r5
 8004f78:	0049      	lsls	r1, r1, #1
 8004f7a:	5b89      	ldrh	r1, [r1, r6]
 8004f7c:	021b      	lsls	r3, r3, #8
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	404b      	eors	r3, r1
 8004f82:	3401      	adds	r4, #1
 8004f84:	4294      	cmp	r4, r2
 8004f86:	d1f4      	bne.n	8004f72 <fast_crc16_t10_dif_array_base+0xe>
	*crc = crc16;
 8004f88:	8003      	strh	r3, [r0, #0]
}
 8004f8a:	bd70      	pop	{r4, r5, r6, pc}
 8004f8c:	08006e38 	.word	0x08006e38

08004f90 <fast_crc16_t10_dif_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc16_t10_dif_byte_base(u16* const crc, const u8 data)
{
 8004f90:	b510      	push	{r4, lr}
	u16 crc16 = *crc;
 8004f92:	8803      	ldrh	r3, [r0, #0]
	crc16 = CRC16_FAST_BYTE_PROCEED(crc16, data);
 8004f94:	4c04      	ldr	r4, [pc, #16]	@ (8004fa8 <fast_crc16_t10_dif_byte_base+0x18>)
 8004f96:	0a1a      	lsrs	r2, r3, #8
 8004f98:	404a      	eors	r2, r1
 8004f9a:	0052      	lsls	r2, r2, #1
 8004f9c:	5b12      	ldrh	r2, [r2, r4]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	4053      	eors	r3, r2
	*crc = crc16;
 8004fa2:	8003      	strh	r3, [r0, #0]
}
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	46c0      	nop			@ (mov r8, r8)
 8004fa8:	08006e38 	.word	0x08006e38

08004fac <crc32b_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc32b_init_base(u32* const crc)
{
	*crc = CRC32INIT;
 8004fac:	2301      	movs	r3, #1
 8004fae:	425b      	negs	r3, r3
 8004fb0:	6003      	str	r3, [r0, #0]
}
 8004fb2:	4770      	bx	lr

08004fb4 <fast_crc32b_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc32b_array_base(u32* const crc, const u8* data, reg len)
{
 8004fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32 crc32 = *crc;
 8004fb6:	6804      	ldr	r4, [r0, #0]
	CRC32_FAST_ARRAY_PROCEED(crc32, data, len);
 8004fb8:	2a00      	cmp	r2, #0
 8004fba:	d00d      	beq.n	8004fd8 <fast_crc32b_array_base+0x24>
 8004fbc:	000d      	movs	r5, r1
 8004fbe:	188a      	adds	r2, r1, r2
 8004fc0:	4f06      	ldr	r7, [pc, #24]	@ (8004fdc <fast_crc32b_array_base+0x28>)
 8004fc2:	26ff      	movs	r6, #255	@ 0xff
 8004fc4:	0a21      	lsrs	r1, r4, #8
 8004fc6:	782b      	ldrb	r3, [r5, #0]
 8004fc8:	4063      	eors	r3, r4
 8004fca:	4033      	ands	r3, r6
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	59dc      	ldr	r4, [r3, r7]
 8004fd0:	404c      	eors	r4, r1
 8004fd2:	3501      	adds	r5, #1
 8004fd4:	4295      	cmp	r5, r2
 8004fd6:	d1f5      	bne.n	8004fc4 <fast_crc32b_array_base+0x10>
	*crc = crc32;
 8004fd8:	6004      	str	r4, [r0, #0]
}
 8004fda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fdc:	08007038 	.word	0x08007038

08004fe0 <fast_crc32b_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc32b_byte_base(u32* const crc, const u8 data)
{
 8004fe0:	b510      	push	{r4, lr}
	u32 crc32 = *crc;
 8004fe2:	6804      	ldr	r4, [r0, #0]
	crc32 = CRC32_FAST_BYTE_PROCEED(crc32, data);
 8004fe4:	0a23      	lsrs	r3, r4, #8
 8004fe6:	4a04      	ldr	r2, [pc, #16]	@ (8004ff8 <fast_crc32b_byte_base+0x18>)
 8004fe8:	404c      	eors	r4, r1
 8004fea:	21ff      	movs	r1, #255	@ 0xff
 8004fec:	4021      	ands	r1, r4
 8004fee:	0089      	lsls	r1, r1, #2
 8004ff0:	588a      	ldr	r2, [r1, r2]
 8004ff2:	4053      	eors	r3, r2
	*crc = crc32;
 8004ff4:	6003      	str	r3, [r0, #0]
}
 8004ff6:	bd10      	pop	{r4, pc}
 8004ff8:	08007038 	.word	0x08007038

08004ffc <crc64jones_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc64jones_init_base(u64* const crc)
{
	*crc = CRC64INIT;
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	2300      	movs	r3, #0
 8005000:	6002      	str	r2, [r0, #0]
 8005002:	6043      	str	r3, [r0, #4]
}
 8005004:	4770      	bx	lr
	...

08005008 <fast_crc64jones_array_base>:
}

// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc64jones_array_base(u64* const crc, const u8* data, reg len)
{
 8005008:	b5f0      	push	{r4, r5, r6, r7, lr}
	u64 crc64 = *crc;
 800500a:	6805      	ldr	r5, [r0, #0]
 800500c:	6844      	ldr	r4, [r0, #4]
	CRC64_FAST_ARRAY_PROCEED(crc64, data, len);
 800500e:	2a00      	cmp	r2, #0
 8005010:	d014      	beq.n	800503c <fast_crc64jones_array_base+0x34>
 8005012:	000e      	movs	r6, r1
 8005014:	188a      	adds	r2, r1, r2
 8005016:	490b      	ldr	r1, [pc, #44]	@ (8005044 <fast_crc64jones_array_base+0x3c>)
 8005018:	7833      	ldrb	r3, [r6, #0]
 800501a:	406b      	eors	r3, r5
 800501c:	b2db      	uxtb	r3, r3
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	18cb      	adds	r3, r1, r3
 8005022:	681f      	ldr	r7, [r3, #0]
 8005024:	46bc      	mov	ip, r7
 8005026:	685f      	ldr	r7, [r3, #4]
 8005028:	0623      	lsls	r3, r4, #24
 800502a:	0a2d      	lsrs	r5, r5, #8
 800502c:	431d      	orrs	r5, r3
 800502e:	0a24      	lsrs	r4, r4, #8
 8005030:	4663      	mov	r3, ip
 8005032:	405d      	eors	r5, r3
 8005034:	407c      	eors	r4, r7
 8005036:	3601      	adds	r6, #1
 8005038:	4296      	cmp	r6, r2
 800503a:	d1ed      	bne.n	8005018 <fast_crc64jones_array_base+0x10>
	*crc = crc64;
 800503c:	6005      	str	r5, [r0, #0]
 800503e:	6044      	str	r4, [r0, #4]
}
 8005040:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005042:	46c0      	nop			@ (mov r8, r8)
 8005044:	08007438 	.word	0x08007438

08005048 <fast_crc64jones_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc64jones_byte_base(u64* const crc, const u8 data)
{
 8005048:	b530      	push	{r4, r5, lr}
	u64 crc64 = *crc;
 800504a:	6803      	ldr	r3, [r0, #0]
 800504c:	6844      	ldr	r4, [r0, #4]
	crc64 = CRC64_FAST_BYTE_PROCEED(crc64, data);
 800504e:	4a08      	ldr	r2, [pc, #32]	@ (8005070 <fast_crc64jones_byte_base+0x28>)
 8005050:	4059      	eors	r1, r3
 8005052:	b2c9      	uxtb	r1, r1
 8005054:	00c9      	lsls	r1, r1, #3
 8005056:	1852      	adds	r2, r2, r1
 8005058:	6811      	ldr	r1, [r2, #0]
 800505a:	6852      	ldr	r2, [r2, #4]
 800505c:	0625      	lsls	r5, r4, #24
 800505e:	0a1b      	lsrs	r3, r3, #8
 8005060:	432b      	orrs	r3, r5
 8005062:	0a24      	lsrs	r4, r4, #8
 8005064:	404b      	eors	r3, r1
 8005066:	6003      	str	r3, [r0, #0]
 8005068:	4062      	eors	r2, r4
 800506a:	6042      	str	r2, [r0, #4]
	*crc = crc64;
}
 800506c:	bd30      	pop	{r4, r5, pc}
 800506e:	46c0      	nop			@ (mov r8, r8)
 8005070:	08007438 	.word	0x08007438

08005074 <crc8_maxim_init_base>:

// base init implementation ----------------------------
//typedef void (*crc_init_func)(void* const crc);
void crc8_maxim_init_base(u8* const crc)
{
	*crc = CRC8INIT;
 8005074:	23ff      	movs	r3, #255	@ 0xff
 8005076:	7003      	strb	r3, [r0, #0]
}
 8005078:	4770      	bx	lr
	...

0800507c <fast_crc8_maxim_array_base>:


// base implementation ----------------------------
//typedef void (*crc_array_func)(void* const crc, const u8* const data, const reg len);
void fast_crc8_maxim_array_base(u8* const crc, const u8* data, reg len)
{
 800507c:	b530      	push	{r4, r5, lr}
	u8 crc8 = *crc;
 800507e:	7803      	ldrb	r3, [r0, #0]
	CRC8_FAST_ARRAY_PROCEED(crc8, data, len);
 8005080:	2a00      	cmp	r2, #0
 8005082:	d008      	beq.n	8005096 <fast_crc8_maxim_array_base+0x1a>
 8005084:	000c      	movs	r4, r1
 8005086:	188a      	adds	r2, r1, r2
 8005088:	4d04      	ldr	r5, [pc, #16]	@ (800509c <fast_crc8_maxim_array_base+0x20>)
 800508a:	7821      	ldrb	r1, [r4, #0]
 800508c:	404b      	eors	r3, r1
 800508e:	5ceb      	ldrb	r3, [r5, r3]
 8005090:	3401      	adds	r4, #1
 8005092:	4294      	cmp	r4, r2
 8005094:	d1f9      	bne.n	800508a <fast_crc8_maxim_array_base+0xe>
	*crc = crc8;
 8005096:	7003      	strb	r3, [r0, #0]
}
 8005098:	bd30      	pop	{r4, r5, pc}
 800509a:	46c0      	nop			@ (mov r8, r8)
 800509c:	08007c38 	.word	0x08007c38

080050a0 <fast_crc8_maxim_byte_base>:

//typedef void (*crc_byte_func)(void* const crc, const u8 data);
void fast_crc8_maxim_byte_base(u8* const crc, const u8 data)
{
	u8 crc8 = *crc;
	crc8 = CRC8_FAST_BYTE_PROCEED(crc8, data);
 80050a0:	7803      	ldrb	r3, [r0, #0]
 80050a2:	4059      	eors	r1, r3
 80050a4:	4b01      	ldr	r3, [pc, #4]	@ (80050ac <fast_crc8_maxim_byte_base+0xc>)
	*crc = crc8;
 80050a6:	5c5b      	ldrb	r3, [r3, r1]
 80050a8:	7003      	strb	r3, [r0, #0]
}
 80050aa:	4770      	bx	lr
 80050ac:	08007c38 	.word	0x08007c38

080050b0 <_ZN21FP_MovingAverageArrayD1Ev>:
 *      Author: admin
 */

#include "FPMovingAverageArray.h"

FP_MovingAverageArray::~FP_MovingAverageArray()
 80050b0:	b510      	push	{r4, lr}
 80050b2:	0004      	movs	r4, r0
 80050b4:	4b06      	ldr	r3, [pc, #24]	@ (80050d0 <_ZN21FP_MovingAverageArrayD1Ev+0x20>)
 80050b6:	6003      	str	r3, [r0, #0]
{
	// TODO Auto-generated destructor stub
	delete[] m_y_states;
 80050b8:	6900      	ldr	r0, [r0, #16]
 80050ba:	2800      	cmp	r0, #0
 80050bc:	d001      	beq.n	80050c2 <_ZN21FP_MovingAverageArrayD1Ev+0x12>
 80050be:	f000 fb1f 	bl	8005700 <_ZdaPv>
	delete[] m_y;
 80050c2:	6960      	ldr	r0, [r4, #20]
 80050c4:	2800      	cmp	r0, #0
 80050c6:	d001      	beq.n	80050cc <_ZN21FP_MovingAverageArrayD1Ev+0x1c>
 80050c8:	f000 fb1a 	bl	8005700 <_ZdaPv>
}
 80050cc:	0020      	movs	r0, r4
 80050ce:	bd10      	pop	{r4, pc}
 80050d0:	08007d40 	.word	0x08007d40

080050d4 <_ZN21FP_MovingAverageArrayD0Ev>:
FP_MovingAverageArray::~FP_MovingAverageArray()
 80050d4:	b510      	push	{r4, lr}
 80050d6:	0004      	movs	r4, r0
}
 80050d8:	f7ff ffea 	bl	80050b0 <_ZN21FP_MovingAverageArrayD1Ev>
 80050dc:	211c      	movs	r1, #28
 80050de:	0020      	movs	r0, r4
 80050e0:	f000 fb0a 	bl	80056f8 <_ZdlPvj>
 80050e4:	0020      	movs	r0, r4
 80050e6:	bd10      	pop	{r4, pc}

080050e8 <_ZN21FP_MovingAverageArray4initEhfh>:

bool FP_MovingAverageArray::init(const u8 n, const f32 alpha, const u8 Q)
{
 80050e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ea:	0004      	movs	r4, r0
 80050ec:	000e      	movs	r6, r1
 80050ee:	1c11      	adds	r1, r2, #0
 80050f0:	001a      	movs	r2, r3
	if(!FP_MovingAverageBase::init(alpha, Q)) {
 80050f2:	f000 f82d 	bl	8005150 <_ZN20FP_MovingAverageBase4initEfh>
 80050f6:	1e05      	subs	r5, r0, #0
 80050f8:	d101      	bne.n	80050fe <_ZN21FP_MovingAverageArray4initEhfh+0x16>
	m_y_states = new u32[n];
	m_y = new u32[n];
	m_n = n;

	return true;
}
 80050fa:	0028      	movs	r0, r5
 80050fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	m_y_states = new u32[n];
 80050fe:	00b7      	lsls	r7, r6, #2
 8005100:	0038      	movs	r0, r7
 8005102:	f000 fb23 	bl	800574c <_Znaj>
 8005106:	6120      	str	r0, [r4, #16]
	m_y = new u32[n];
 8005108:	0038      	movs	r0, r7
 800510a:	f000 fb1f 	bl	800574c <_Znaj>
 800510e:	6160      	str	r0, [r4, #20]
	m_n = n;
 8005110:	7626      	strb	r6, [r4, #24]
	return true;
 8005112:	e7f2      	b.n	80050fa <_ZN21FP_MovingAverageArray4initEhfh+0x12>

08005114 <_ZN21FP_MovingAverageArray7proceedEPKt>:

void FP_MovingAverageArray::proceed(const u16* const values)
{
 8005114:	b570      	push	{r4, r5, r6, lr}
	for(u8 i = 0; i != m_n; ++i) {
 8005116:	7e03      	ldrb	r3, [r0, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d018      	beq.n	800514e <_ZN21FP_MovingAverageArray7proceedEPKt+0x3a>
 800511c:	2200      	movs	r2, #0
		FP_MovingAverageBase::proceed(values[i], m_y[i], m_y_states[i]);
 800511e:	0093      	lsls	r3, r2, #2
 8005120:	6944      	ldr	r4, [r0, #20]
 8005122:	18e4      	adds	r4, r4, r3
 8005124:	6905      	ldr	r5, [r0, #16]
 8005126:	18ed      	adds	r5, r5, r3
 8005128:	0053      	lsls	r3, r2, #1
 800512a:	5a5e      	ldrh	r6, [r3, r1]
	bool init(const float alpha, const u8 Q);
	bool inline setAlpha(const float alpha) {return init(alpha, m_Q);}

	inline void proceed(const u32 x, u32& last, u32& last_shifted)
	{
		const int32_t val = (x - last) * m_alpha_scaled;
 800512c:	6823      	ldr	r3, [r4, #0]
 800512e:	1af6      	subs	r6, r6, r3
 8005130:	68c3      	ldr	r3, [r0, #12]
 8005132:	4373      	muls	r3, r6
		last_shifted += val >> m_diff_b;
 8005134:	7986      	ldrb	r6, [r0, #6]
 8005136:	4133      	asrs	r3, r6
 8005138:	682e      	ldr	r6, [r5, #0]
 800513a:	199b      	adds	r3, r3, r6
 800513c:	602b      	str	r3, [r5, #0]
		last = last_shifted >> m_N;
 800513e:	7945      	ldrb	r5, [r0, #5]
 8005140:	40eb      	lsrs	r3, r5
 8005142:	6023      	str	r3, [r4, #0]
	for(u8 i = 0; i != m_n; ++i) {
 8005144:	3201      	adds	r2, #1
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	7e03      	ldrb	r3, [r0, #24]
 800514a:	4293      	cmp	r3, r2
 800514c:	d1e7      	bne.n	800511e <_ZN21FP_MovingAverageArray7proceedEPKt+0xa>
	}
}
 800514e:	bd70      	pop	{r4, r5, r6, pc}

08005150 <_ZN20FP_MovingAverageBase4initEfh>:
#include "FPMovingAverageBase.h"
#include <cmath>


bool FP_MovingAverageBase::init(const float alpha, const u8 Q)
{
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	0004      	movs	r4, r0
 8005154:	1c0e      	adds	r6, r1, #0
 8005156:	0015      	movs	r5, r2

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  // DR 568.
  constexpr float
  log2(float __x)
  { return __builtin_log2f(__x); }
 8005158:	1c08      	adds	r0, r1, #0
 800515a:	f000 fbd1 	bl	8005900 <log2f>
	const int N = -std::log2(alpha);
 800515e:	2380      	movs	r3, #128	@ 0x80
 8005160:	061b      	lsls	r3, r3, #24
 8005162:	469c      	mov	ip, r3
 8005164:	4460      	add	r0, ip
 8005166:	f7fc f805 	bl	8001174 <__aeabi_f2iz>

	if(N < 0 || static_cast<u32>(Q + N) > sizeof(u32)) {
 800516a:	2800      	cmp	r0, #0
 800516c:	db14      	blt.n	8005198 <_ZN20FP_MovingAverageBase4initEfh+0x48>
 800516e:	182b      	adds	r3, r5, r0
 8005170:	2b04      	cmp	r3, #4
 8005172:	d813      	bhi.n	800519c <_ZN20FP_MovingAverageBase4initEfh+0x4c>
		return false;
	}

	m_N = N;
 8005174:	b2c3      	uxtb	r3, r0
 8005176:	7163      	strb	r3, [r4, #5]
	m_Q = Q;
 8005178:	7125      	strb	r5, [r4, #4]
	m_diff_b = (m_Q - m_N);
 800517a:	1aeb      	subs	r3, r5, r3
 800517c:	71a3      	strb	r3, [r4, #6]
	m_alpha = alpha;
 800517e:	60a6      	str	r6, [r4, #8]
	m_alpha_scaled = static_cast<u32>(static_cast<float>(1 << Q) * alpha);
 8005180:	2001      	movs	r0, #1
 8005182:	40a8      	lsls	r0, r5
 8005184:	f7fc f816 	bl	80011b4 <__aeabi_i2f>
 8005188:	1c31      	adds	r1, r6, #0
 800518a:	f7fb fcfb 	bl	8000b84 <__aeabi_fmul>
 800518e:	f7fb f971 	bl	8000474 <__aeabi_f2uiz>
 8005192:	60e0      	str	r0, [r4, #12]

	return true;
 8005194:	2001      	movs	r0, #1
}
 8005196:	bd70      	pop	{r4, r5, r6, pc}
		return false;
 8005198:	2000      	movs	r0, #0
 800519a:	e7fc      	b.n	8005196 <_ZN20FP_MovingAverageBase4initEfh+0x46>
 800519c:	2000      	movs	r0, #0
 800519e:	e7fa      	b.n	8005196 <_ZN20FP_MovingAverageBase4initEfh+0x46>

080051a0 <_ZN12Stm32ADC_dma5startEv>:
	// init filter
	ma.init(n_channels, settings.filter, 16);
}

bool Stm32ADC_dma::start()
{
 80051a0:	b510      	push	{r4, lr}
 80051a2:	0003      	movs	r3, r0
	if(n_channels) {
 80051a4:	7902      	ldrb	r2, [r0, #4]
		HAL_ADC_Start_DMA(m_hadc, (u32*)adc_values, n_channels);
		return true;
	}

	return false;
 80051a6:	2000      	movs	r0, #0
	if(n_channels) {
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	d100      	bne.n	80051ae <_ZN12Stm32ADC_dma5startEv+0xe>
}
 80051ac:	bd10      	pop	{r4, pc}
		HAL_ADC_Start_DMA(m_hadc, (u32*)adc_values, n_channels);
 80051ae:	6899      	ldr	r1, [r3, #8]
 80051b0:	6818      	ldr	r0, [r3, #0]
 80051b2:	f7fc fec5 	bl	8001f40 <HAL_ADC_Start_DMA>
		return true;
 80051b6:	2001      	movs	r0, #1
 80051b8:	e7f8      	b.n	80051ac <_ZN12Stm32ADC_dma5startEv+0xc>

080051ba <_ZN12Stm32ADC_dma7proceedEm>:


bool Stm32ADC_dma::proceed(const u32 current_time)
{
 80051ba:	b570      	push	{r4, r5, r6, lr}
 80051bc:	0004      	movs	r4, r0
	if(calculated) {
 80051be:	7b03      	ldrb	r3, [r0, #12]
 80051c0:	b2dd      	uxtb	r5, r3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <_ZN12Stm32ADC_dma7proceedEm+0x10>

		return true;
	}

	return false;
}
 80051c6:	0028      	movs	r0, r5
 80051c8:	bd70      	pop	{r4, r5, r6, pc}
		ma.proceed(adc_values);
 80051ca:	6881      	ldr	r1, [r0, #8]
 80051cc:	3010      	adds	r0, #16
 80051ce:	f7ff ffa1 	bl	8005114 <_ZN21FP_MovingAverageArray7proceedEPKt>
		calculated = false;
 80051d2:	2300      	movs	r3, #0
 80051d4:	7323      	strb	r3, [r4, #12]
		return true;
 80051d6:	e7f6      	b.n	80051c6 <_ZN12Stm32ADC_dma7proceedEm+0xc>

080051d8 <HAL_ADC_ConvCpltCallback>:
 * IT
 * *********************************************************************************
 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80051d8:	b510      	push	{r4, lr}
      : _M_current(__i) { }
 80051da:	4a08      	ldr	r2, [pc, #32]	@ (80051fc <HAL_ADC_ConvCpltCallback+0x24>)
 80051dc:	6813      	ldr	r3, [r2, #0]
 80051de:	6854      	ldr	r4, [r2, #4]



inline Stm32ADC_dma* const Stm32ADC_dma::adcToClass(ADC_HandleTypeDef* const hadc)
{
	for(Stm32ADC_dma* const it : m_objects) {
 80051e0:	42a3      	cmp	r3, r4
 80051e2:	d009      	beq.n	80051f8 <HAL_ADC_ConvCpltCallback+0x20>
 80051e4:	681a      	ldr	r2, [r3, #0]
		if(it->m_hadc == hadc) {
 80051e6:	6811      	ldr	r1, [r2, #0]
 80051e8:	4288      	cmp	r0, r1
 80051ea:	d003      	beq.n	80051f4 <HAL_ADC_ConvCpltCallback+0x1c>
	for(Stm32ADC_dma* const it : m_objects) {
 80051ec:	3304      	adds	r3, #4
 80051ee:	429c      	cmp	r4, r3
 80051f0:	d1f8      	bne.n	80051e4 <HAL_ADC_ConvCpltCallback+0xc>
 80051f2:	e001      	b.n	80051f8 <HAL_ADC_ConvCpltCallback+0x20>
	inline void calculateFinished() { calculated = true; }
 80051f4:	2301      	movs	r3, #1
 80051f6:	7313      	strb	r3, [r2, #12]
	Stm32ADC_dma* const root = Stm32ADC_dma::adcToClass(hadc);
	if(root) {
		root->calculateFinished();
	}
}
 80051f8:	bd10      	pop	{r4, pc}
 80051fa:	46c0      	nop			@ (mov r8, r8)
 80051fc:	200003cc 	.word	0x200003cc

08005200 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	46de      	mov	lr, fp
 8005204:	4657      	mov	r7, sl
 8005206:	464e      	mov	r6, r9
 8005208:	4645      	mov	r5, r8
 800520a:	b5e0      	push	{r5, r6, r7, lr}
 800520c:	0005      	movs	r5, r0
 800520e:	4688      	mov	r8, r1
 8005210:	4691      	mov	r9, r2
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8005212:	6846      	ldr	r6, [r0, #4]
 8005214:	6807      	ldr	r7, [r0, #0]
 8005216:	1bf3      	subs	r3, r6, r7
 8005218:	109b      	asrs	r3, r3, #2
	if (max_size() - size() < __n)
 800521a:	4a2d      	ldr	r2, [pc, #180]	@ (80052d0 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d013      	beq.n	8005248 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x48>
      return __a;
 8005220:	001a      	movs	r2, r3
      if (__a < __b)
 8005222:	42be      	cmp	r6, r7
 8005224:	d013      	beq.n	800524e <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x4e>
	const size_type __len = size() + (std::max)(size(), __n);
 8005226:	189a      	adds	r2, r3, r2
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005228:	4293      	cmp	r3, r2
 800522a:	d821      	bhi.n	8005270 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x70>
 800522c:	4692      	mov	sl, r2
 800522e:	2380      	movs	r3, #128	@ 0x80
 8005230:	059b      	lsls	r3, r3, #22
 8005232:	429a      	cmp	r2, r3
 8005234:	d301      	bcc.n	800523a <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x3a>
 8005236:	4b26      	ldr	r3, [pc, #152]	@ (80052d0 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
 8005238:	469a      	mov	sl, r3
    { return __lhs.base() - __rhs.base(); }
 800523a:	4643      	mov	r3, r8
 800523c:	1bdc      	subs	r4, r3, r7
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800523e:	2300      	movs	r3, #0
 8005240:	469b      	mov	fp, r3
 8005242:	2a00      	cmp	r2, #0
 8005244:	d01d      	beq.n	8005282 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x82>
 8005246:	e017      	b.n	8005278 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x78>
	  __throw_length_error(__N(__s));
 8005248:	4822      	ldr	r0, [pc, #136]	@ (80052d4 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd4>)
 800524a:	f000 fb49 	bl	80058e0 <_ZSt20__throw_length_errorPKc>
	return __b;
 800524e:	2201      	movs	r2, #1
 8005250:	e7e9      	b.n	8005226 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x26>
	      __gnu_cxx::__normal_iterator<_Tp*, void> __out(__result);
	      __out = std::__relocate_a_1(__first, __last, __out, __alloc);
	      return __out.base();
	    }
#endif
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8005252:	0022      	movs	r2, r4
 8005254:	0039      	movs	r1, r7
 8005256:	4658      	mov	r0, fp
 8005258:	f001 faf4 	bl	8006844 <memmove>
	      ++__new_finish;
 800525c:	3404      	adds	r4, #4
 800525e:	445c      	add	r4, fp
      ptrdiff_t __count = __last - __first;
 8005260:	4643      	mov	r3, r8
 8005262:	1af6      	subs	r6, r6, r3
      if (__count > 0)
 8005264:	2e00      	cmp	r6, #0
 8005266:	dc18      	bgt.n	800529a <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x9a>
	}
      return __result + __count;
 8005268:	19a4      	adds	r4, r4, r6
		    this->_M_impl._M_end_of_storage - __old_start);
 800526a:	68a9      	ldr	r1, [r5, #8]
 800526c:	1bc9      	subs	r1, r1, r7
      _M_deallocate(pointer __p, size_t __n)
 800526e:	e01e      	b.n	80052ae <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xae>
 8005270:	4643      	mov	r3, r8
 8005272:	1bdc      	subs	r4, r3, r7
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005274:	4b16      	ldr	r3, [pc, #88]	@ (80052d0 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xd0>)
 8005276:	469a      	mov	sl, r3
	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
 8005278:	4653      	mov	r3, sl
 800527a:	0098      	lsls	r0, r3, #2
 800527c:	f000 fa54 	bl	8005728 <_Znwj>
 8005280:	4683      	mov	fp, r0
#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005282:	464b      	mov	r3, r9
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	465a      	mov	r2, fp
 8005288:	5113      	str	r3, [r2, r4]
      if (__count > 0)
 800528a:	2c00      	cmp	r4, #0
 800528c:	dce1      	bgt.n	8005252 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x52>
	      ++__new_finish;
 800528e:	3404      	adds	r4, #4
 8005290:	445c      	add	r4, fp
      ptrdiff_t __count = __last - __first;
 8005292:	4643      	mov	r3, r8
 8005294:	1af6      	subs	r6, r6, r3
      if (__count > 0)
 8005296:	2e00      	cmp	r6, #0
 8005298:	dd04      	ble.n	80052a4 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xa4>
	  __builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800529a:	0032      	movs	r2, r6
 800529c:	4641      	mov	r1, r8
 800529e:	0020      	movs	r0, r4
 80052a0:	f001 fbcc 	bl	8006a3c <memcpy>
      return __result + __count;
 80052a4:	19a4      	adds	r4, r4, r6
	if (__p)
 80052a6:	2f00      	cmp	r7, #0
 80052a8:	d004      	beq.n	80052b4 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xb4>
		    this->_M_impl._M_end_of_storage - __old_start);
 80052aa:	68a9      	ldr	r1, [r5, #8]
 80052ac:	1bc9      	subs	r1, r1, r7
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 80052ae:	0038      	movs	r0, r7
 80052b0:	f000 fa22 	bl	80056f8 <_ZdlPvj>
      this->_M_impl._M_start = __new_start;
 80052b4:	465b      	mov	r3, fp
 80052b6:	602b      	str	r3, [r5, #0]
      this->_M_impl._M_finish = __new_finish;
 80052b8:	606c      	str	r4, [r5, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80052ba:	4653      	mov	r3, sl
 80052bc:	009b      	lsls	r3, r3, #2
 80052be:	445b      	add	r3, fp
 80052c0:	60ab      	str	r3, [r5, #8]
    }
 80052c2:	bcf0      	pop	{r4, r5, r6, r7}
 80052c4:	46bb      	mov	fp, r7
 80052c6:	46b2      	mov	sl, r6
 80052c8:	46a9      	mov	r9, r5
 80052ca:	46a0      	mov	r8, r4
 80052cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80052ce:	46c0      	nop			@ (mov r8, r8)
 80052d0:	1fffffff 	.word	0x1fffffff
 80052d4:	08006e0c 	.word	0x08006e0c

080052d8 <_ZN12Stm32ADC_dma4initERKNS_4InitE>:
{
 80052d8:	b530      	push	{r4, r5, lr}
 80052da:	b083      	sub	sp, #12
 80052dc:	0004      	movs	r4, r0
 80052de:	000d      	movs	r5, r1
	m_hadc = settings.hadc;
 80052e0:	680b      	ldr	r3, [r1, #0]
 80052e2:	6003      	str	r3, [r0, #0]
	n_channels = settings.hadc->Init.NbrOfConversion;
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	7103      	strb	r3, [r0, #4]
	adc_values = new uint16_t[n_channels];
 80052e8:	20ff      	movs	r0, #255	@ 0xff
 80052ea:	4018      	ands	r0, r3
 80052ec:	0040      	lsls	r0, r0, #1
 80052ee:	f000 fa2d 	bl	800574c <_Znaj>
 80052f2:	60a0      	str	r0, [r4, #8]
	m_objects.push_back(this);
 80052f4:	9401      	str	r4, [sp, #4]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80052f6:	4b0c      	ldr	r3, [pc, #48]	@ (8005328 <_ZN12Stm32ADC_dma4initERKNS_4InitE+0x50>)
 80052f8:	6859      	ldr	r1, [r3, #4]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	4299      	cmp	r1, r3
 80052fe:	d00d      	beq.n	800531c <_ZN12Stm32ADC_dma4initERKNS_4InitE+0x44>
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005300:	600c      	str	r4, [r1, #0]
	    ++this->_M_impl._M_finish;
 8005302:	4a09      	ldr	r2, [pc, #36]	@ (8005328 <_ZN12Stm32ADC_dma4initERKNS_4InitE+0x50>)
 8005304:	6853      	ldr	r3, [r2, #4]
 8005306:	3304      	adds	r3, #4
 8005308:	6053      	str	r3, [r2, #4]
	ma.init(n_channels, settings.filter, 16);
 800530a:	686a      	ldr	r2, [r5, #4]
 800530c:	7921      	ldrb	r1, [r4, #4]
 800530e:	0020      	movs	r0, r4
 8005310:	3010      	adds	r0, #16
 8005312:	2310      	movs	r3, #16
 8005314:	f7ff fee8 	bl	80050e8 <_ZN21FP_MovingAverageArray4initEhfh>
}
 8005318:	b003      	add	sp, #12
 800531a:	bd30      	pop	{r4, r5, pc}
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 800531c:	4802      	ldr	r0, [pc, #8]	@ (8005328 <_ZN12Stm32ADC_dma4initERKNS_4InitE+0x50>)
 800531e:	aa01      	add	r2, sp, #4
 8005320:	f7ff ff6e 	bl	8005200 <_ZNSt6vectorIP12Stm32ADC_dmaSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
 8005324:	e7f1      	b.n	800530a <_ZN12Stm32ADC_dma4initERKNS_4InitE+0x32>
 8005326:	46c0      	nop			@ (mov r8, r8)
 8005328:	200003cc 	.word	0x200003cc

0800532c <_GLOBAL__sub_I__ZN12Stm32ADC_dma9m_objectsE>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 800532c:	4b02      	ldr	r3, [pc, #8]	@ (8005338 <_GLOBAL__sub_I__ZN12Stm32ADC_dma9m_objectsE+0xc>)
 800532e:	2200      	movs	r2, #0
 8005330:	601a      	str	r2, [r3, #0]
 8005332:	605a      	str	r2, [r3, #4]
 8005334:	609a      	str	r2, [r3, #8]
}
 8005336:	4770      	bx	lr
 8005338:	200003cc 	.word	0x200003cc

0800533c <_GLOBAL__sub_D__ZN12Stm32ADC_dma9m_objectsE>:
 800533c:	b510      	push	{r4, lr}
	_M_deallocate(_M_impl._M_start,
 800533e:	4b04      	ldr	r3, [pc, #16]	@ (8005350 <_GLOBAL__sub_D__ZN12Stm32ADC_dma9m_objectsE+0x14>)
 8005340:	6818      	ldr	r0, [r3, #0]
	if (__p)
 8005342:	2800      	cmp	r0, #0
 8005344:	d003      	beq.n	800534e <_GLOBAL__sub_D__ZN12Stm32ADC_dma9m_objectsE+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005346:	6899      	ldr	r1, [r3, #8]
 8005348:	1a09      	subs	r1, r1, r0
	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
 800534a:	f000 f9d5 	bl	80056f8 <_ZdlPvj>
 800534e:	bd10      	pop	{r4, pc}
 8005350:	200003cc 	.word	0x200003cc

08005354 <_ZN12Stm32ADC_dmaD1Ev>:
Stm32ADC_dma::~Stm32ADC_dma()
 8005354:	b510      	push	{r4, lr}
 8005356:	0004      	movs	r4, r0
	delete[] adc_values;
 8005358:	6880      	ldr	r0, [r0, #8]
 800535a:	2800      	cmp	r0, #0
 800535c:	d001      	beq.n	8005362 <_ZN12Stm32ADC_dmaD1Ev+0xe>
 800535e:	f000 f9cf 	bl	8005700 <_ZdaPv>
}
 8005362:	0020      	movs	r0, r4
 8005364:	3010      	adds	r0, #16
 8005366:	f7ff fea3 	bl	80050b0 <_ZN21FP_MovingAverageArrayD1Ev>
 800536a:	0020      	movs	r0, r4
 800536c:	bd10      	pop	{r4, pc}
	...

08005370 <IRQ_UNLOCK>:
 *          Can only be executed in Privileged modes.
 *
 * @return  -
 *****************************************************************************/
void IRQ_UNLOCK(void)
{
 8005370:	b510      	push	{r4, lr}
    assert(g_irq_lock_ct > 0);
 8005372:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <IRQ_UNLOCK+0x30>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	dd06      	ble.n	8005388 <IRQ_UNLOCK+0x18>
    if (--g_irq_lock_ct <= 0)
 800537a:	4a09      	ldr	r2, [pc, #36]	@ (80053a0 <IRQ_UNLOCK+0x30>)
 800537c:	6813      	ldr	r3, [r2, #0]
 800537e:	3b01      	subs	r3, #1
 8005380:	6013      	str	r3, [r2, #0]
 8005382:	2b00      	cmp	r3, #0
 8005384:	dd06      	ble.n	8005394 <IRQ_UNLOCK+0x24>
    {
        g_irq_lock_ct = 0;
        __enable_irq();
    }
}
 8005386:	bd10      	pop	{r4, pc}
    assert(g_irq_lock_ct > 0);
 8005388:	4b06      	ldr	r3, [pc, #24]	@ (80053a4 <IRQ_UNLOCK+0x34>)
 800538a:	4a07      	ldr	r2, [pc, #28]	@ (80053a8 <IRQ_UNLOCK+0x38>)
 800538c:	4807      	ldr	r0, [pc, #28]	@ (80053ac <IRQ_UNLOCK+0x3c>)
 800538e:	2137      	movs	r1, #55	@ 0x37
 8005390:	f000 fc2a 	bl	8005be8 <__assert_func>
        g_irq_lock_ct = 0;
 8005394:	0013      	movs	r3, r2
 8005396:	2200      	movs	r2, #0
 8005398:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800539a:	b662      	cpsie	i
}
 800539c:	e7f3      	b.n	8005386 <IRQ_UNLOCK+0x16>
 800539e:	46c0      	nop			@ (mov r8, r8)
 80053a0:	200003d8 	.word	0x200003d8
 80053a4:	08007d48 	.word	0x08007d48
 80053a8:	08007d84 	.word	0x08007d84
 80053ac:	08007d5c 	.word	0x08007d5c

080053b0 <IRQ_LOCK>:
  __ASM volatile ("cpsid i" : : : "memory");
 80053b0:	b672      	cpsid	i
 * @return  -
 *****************************************************************************/
void IRQ_LOCK(void)
{
    __disable_irq();
    ++g_irq_lock_ct;
 80053b2:	4a02      	ldr	r2, [pc, #8]	@ (80053bc <IRQ_LOCK+0xc>)
 80053b4:	6813      	ldr	r3, [r2, #0]
 80053b6:	3301      	adds	r3, #1
 80053b8:	6013      	str	r3, [r2, #0]
}
 80053ba:	4770      	bx	lr
 80053bc:	200003d8 	.word	0x200003d8

080053c0 <_write>:

extern UART_HandleTypeDef huart1;
#define UART_PRINTF	huart1

int _write(int file, char *ptr, int len)
{
 80053c0:	b510      	push	{r4, lr}
 80053c2:	0014      	movs	r4, r2
	HAL_UART_Transmit(&UART_PRINTF, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 80053c4:	2301      	movs	r3, #1
 80053c6:	b292      	uxth	r2, r2
 80053c8:	4802      	ldr	r0, [pc, #8]	@ (80053d4 <_write+0x14>)
 80053ca:	425b      	negs	r3, r3
 80053cc:	f7fe fb4c 	bl	8003a68 <HAL_UART_Transmit>
	return len;
}
 80053d0:	0020      	movs	r0, r4
 80053d2:	bd10      	pop	{r4, pc}
 80053d4:	20000204 	.word	0x20000204

080053d8 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE>:
	: _M_start(), _M_finish(), _M_end_of_storage()
 80053d8:	4b02      	ldr	r3, [pc, #8]	@ (80053e4 <_GLOBAL__sub_I__ZN13TimingManager8m_timersE+0xc>)
 80053da:	2200      	movs	r2, #0
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	605a      	str	r2, [r3, #4]
 80053e0:	609a      	str	r2, [r3, #8]
//---------------------------- PUT INVOKING THIS FUNCTION TO SysTick() Interrupt!!!------------------------------------------------------------------------------
//---------------------------- file: stm32f1xx_it.c ------------------------------------------------------------------------------
void HAL_SYSTICK_Callback(void)
{
	TimingManager::proceed();
}
 80053e2:	4770      	bx	lr
 80053e4:	200003dc 	.word	0x200003dc

080053e8 <_GLOBAL__sub_D__ZN13TimingManager8m_timersE>:
 80053e8:	b510      	push	{r4, lr}
	_M_deallocate(_M_impl._M_start,
 80053ea:	4b04      	ldr	r3, [pc, #16]	@ (80053fc <_GLOBAL__sub_D__ZN13TimingManager8m_timersE+0x14>)
 80053ec:	6818      	ldr	r0, [r3, #0]
	if (__p)
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d003      	beq.n	80053fa <_GLOBAL__sub_D__ZN13TimingManager8m_timersE+0x12>
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80053f2:	6899      	ldr	r1, [r3, #8]
 80053f4:	1a09      	subs	r1, r1, r0
 80053f6:	f000 f97f 	bl	80056f8 <_ZdlPvj>
 80053fa:	bd10      	pop	{r4, pc}
 80053fc:	200003dc 	.word	0x200003dc

08005400 <UART_SendBuffer>:

	return STATUS_OK;
}

status_t UART_SendBuffer(stm32_DMA_uart_t* const self, uint8_t const *txBuff, const size_t txSize)
{
 8005400:	b570      	push	{r4, r5, r6, lr}
 8005402:	0005      	movs	r5, r0
 8005404:	000e      	movs	r6, r1
 8005406:	0014      	movs	r4, r2
	/* Verify arguments. */
	if (!txBuff || txSize == 0) {
 8005408:	2900      	cmp	r1, #0
 800540a:	d018      	beq.n	800543e <UART_SendBuffer+0x3e>
 800540c:	2a00      	cmp	r2, #0
 800540e:	d019      	beq.n	8005444 <UART_SendBuffer+0x44>
		return ERROR_INVALID_ARGUMENT;
	}

	/* Lock interrupts to prevent completion interrupt before setup is complete */
	IRQ_LOCK();
 8005410:	f7ff ffce 	bl	80053b0 <IRQ_LOCK>
	if (self->isTxBusy_) {
 8005414:	792b      	ldrb	r3, [r5, #4]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d10d      	bne.n	8005436 <UART_SendBuffer+0x36>
		IRQ_UNLOCK();
		return STATUS_BUSY;
	}

	/* Set Tx Busy Status. */
	self->isTxBusy_ = true;
 800541a:	2301      	movs	r3, #1
 800541c:	712b      	strb	r3, [r5, #4]

	const HAL_StatusTypeDef hal_error = HAL_UART_Transmit_DMA(self->huart, (uint8_t*) txBuff, txSize);
 800541e:	b2a2      	uxth	r2, r4
 8005420:	6828      	ldr	r0, [r5, #0]
 8005422:	0031      	movs	r1, r6
 8005424:	f7fd fe2c 	bl	8003080 <HAL_UART_Transmit_DMA>
 8005428:	0004      	movs	r4, r0
	IRQ_UNLOCK(); // this must come after HAL_UART_Transmit_DMA to avoid race conditions w/ IRQs
 800542a:	f7ff ffa1 	bl	8005370 <IRQ_UNLOCK>

	if (hal_error != HAL_OK) {
 800542e:	1e63      	subs	r3, r4, #1
 8005430:	419c      	sbcs	r4, r3
 8005432:	4260      	negs	r0, r4
		return ERROR_FAIL;
	}

	return STATUS_OK;
}
 8005434:	bd70      	pop	{r4, r5, r6, pc}
		IRQ_UNLOCK();
 8005436:	f7ff ff9b 	bl	8005370 <IRQ_UNLOCK>
		return STATUS_BUSY;
 800543a:	2002      	movs	r0, #2
 800543c:	e7fa      	b.n	8005434 <UART_SendBuffer+0x34>
		return ERROR_INVALID_ARGUMENT;
 800543e:	2005      	movs	r0, #5
 8005440:	4240      	negs	r0, r0
 8005442:	e7f7      	b.n	8005434 <UART_SendBuffer+0x34>
 8005444:	2005      	movs	r0, #5
 8005446:	4240      	negs	r0, r0
 8005448:	e7f4      	b.n	8005434 <UART_SendBuffer+0x34>

0800544a <UART_SetTxcallback>:

status_t UART_SetTxcallback(stm32_DMA_uart_t* const self, const uart_tx_callback_t f, void* const captured)
{
	if (self->isTxBusy_) {
 800544a:	7903      	ldrb	r3, [r0, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d103      	bne.n	8005458 <UART_SetTxcallback+0xe>
		return STATUS_BUSY;
	}

	self->TX.txCallback_ = f;
 8005450:	6081      	str	r1, [r0, #8]
	self->TX.txCallbackData_ = captured;
 8005452:	60c2      	str	r2, [r0, #12]

	return STATUS_OK;
 8005454:	2000      	movs	r0, #0
}
 8005456:	4770      	bx	lr
		return STATUS_BUSY;
 8005458:	2002      	movs	r0, #2
 800545a:	e7fc      	b.n	8005456 <UART_SetTxcallback+0xc>

0800545c <UART_TXCallback>:
 *                the configuration information for the specified UART module.
 * @retval None
 */
//tx callback in void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
void UART_TXCallback(stm32_DMA_uart_t* const self)
{
 800545c:	b510      	push	{r4, lr}
	void* const captured = self->TX.txCallbackData_;
 800545e:	68c1      	ldr	r1, [r0, #12]
	const uart_tx_callback_t callback = self->TX.txCallback_;
 8005460:	6882      	ldr	r2, [r0, #8]
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8005462:	6804      	ldr	r4, [r0, #0]
 8005464:	2388      	movs	r3, #136	@ 0x88
 8005466:	58e3      	ldr	r3, [r4, r3]
	self->isTxBusy_ = false;
 8005468:	2400      	movs	r4, #0
 800546a:	7104      	strb	r4, [r0, #4]

	if (callback) {
 800546c:	2a00      	cmp	r2, #0
 800546e:	d004      	beq.n	800547a <UART_TXCallback+0x1e>
	const status_t status = (self->huart->gState == HAL_UART_STATE_ERROR) ? ERROR_FAIL : STATUS_OK;
 8005470:	3be0      	subs	r3, #224	@ 0xe0
 8005472:	4258      	negs	r0, r3
 8005474:	4143      	adcs	r3, r0
		callback(status, captured);
 8005476:	4258      	negs	r0, r3
 8005478:	4790      	blx	r2
	}
}
 800547a:	bd10      	pop	{r4, pc}

0800547c <UART_ErrorCallback>:

// error callback in void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
void UART_ErrorCallback(stm32_DMA_uart_t* const self)
{
 800547c:	b510      	push	{r4, lr}
 800547e:	0003      	movs	r3, r0
	UART_HandleTypeDef* const huart = self->huart;
 8005480:	6802      	ldr	r2, [r0, #0]
	status_t status = ERROR_FAIL;

	if (huart->ErrorCode & HAL_UART_ERROR_ORE) {
 8005482:	2190      	movs	r1, #144	@ 0x90
 8005484:	5851      	ldr	r1, [r2, r1]
 8005486:	0709      	lsls	r1, r1, #28
 8005488:	d435      	bmi.n	80054f6 <UART_ErrorCallback+0x7a>
		status = ERROR_UART_RX_OVERRUN;
	} else if (huart->ErrorCode & HAL_UART_ERROR_FE) {
 800548a:	2190      	movs	r1, #144	@ 0x90
 800548c:	5851      	ldr	r1, [r2, r1]
 800548e:	0749      	lsls	r1, r1, #29
 8005490:	d439      	bmi.n	8005506 <UART_ErrorCallback+0x8a>
		status = ERROR_UART_FRAMING_ERR;
	} else if (huart->ErrorCode & HAL_UART_ERROR_NE) {
 8005492:	2190      	movs	r1, #144	@ 0x90
 8005494:	5851      	ldr	r1, [r2, r1]
 8005496:	0789      	lsls	r1, r1, #30
 8005498:	d438      	bmi.n	800550c <UART_ErrorCallback+0x90>
		status = ERROR_UART_RX_NOISE;
	} else if (huart->ErrorCode & HAL_UART_ERROR_DMA) {
 800549a:	2190      	movs	r1, #144	@ 0x90
 800549c:	5851      	ldr	r1, [r2, r1]
 800549e:	06c9      	lsls	r1, r1, #27
 80054a0:	d504      	bpl.n	80054ac <UART_ErrorCallback+0x30>
		self->isTxBusy_ = false;
 80054a2:	2200      	movs	r2, #0
 80054a4:	7102      	strb	r2, [r0, #4]
		status = ERROR_UART_TX_DMA_ERR;
 80054a6:	204b      	movs	r0, #75	@ 0x4b
 80054a8:	4240      	negs	r0, r0
 80054aa:	e026      	b.n	80054fa <UART_ErrorCallback+0x7e>
	} else if (huart->gState == HAL_UART_STATE_BUSY) {
 80054ac:	2188      	movs	r1, #136	@ 0x88
 80054ae:	5851      	ldr	r1, [r2, r1]
 80054b0:	2924      	cmp	r1, #36	@ 0x24
 80054b2:	d02e      	beq.n	8005512 <UART_ErrorCallback+0x96>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_RX) {
 80054b4:	2188      	movs	r1, #136	@ 0x88
 80054b6:	5851      	ldr	r1, [r2, r1]
 80054b8:	2922      	cmp	r1, #34	@ 0x22
 80054ba:	d02c      	beq.n	8005516 <UART_ErrorCallback+0x9a>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX) {
 80054bc:	2188      	movs	r1, #136	@ 0x88
 80054be:	5851      	ldr	r1, [r2, r1]
 80054c0:	2921      	cmp	r1, #33	@ 0x21
 80054c2:	d02a      	beq.n	800551a <UART_ErrorCallback+0x9e>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_BUSY_TX_RX) {
 80054c4:	2188      	movs	r1, #136	@ 0x88
 80054c6:	5851      	ldr	r1, [r2, r1]
 80054c8:	2923      	cmp	r1, #35	@ 0x23
 80054ca:	d028      	beq.n	800551e <UART_ErrorCallback+0xa2>
		status = STATUS_BUSY;
	} else if (huart->gState == HAL_UART_STATE_ERROR) {
 80054cc:	2188      	movs	r1, #136	@ 0x88
 80054ce:	5851      	ldr	r1, [r2, r1]
 80054d0:	29e0      	cmp	r1, #224	@ 0xe0
 80054d2:	d006      	beq.n	80054e2 <UART_ErrorCallback+0x66>
		self->isTxBusy_ = false;
		status = ERROR_FAIL;
	} else if (huart->gState == HAL_UART_STATE_TIMEOUT) {
 80054d4:	2188      	movs	r1, #136	@ 0x88
 80054d6:	5852      	ldr	r2, [r2, r1]
 80054d8:	2aa0      	cmp	r2, #160	@ 0xa0
 80054da:	d007      	beq.n	80054ec <UART_ErrorCallback+0x70>
	status_t status = ERROR_FAIL;
 80054dc:	2001      	movs	r0, #1
 80054de:	4240      	negs	r0, r0
 80054e0:	e00b      	b.n	80054fa <UART_ErrorCallback+0x7e>
		self->isTxBusy_ = false;
 80054e2:	2200      	movs	r2, #0
 80054e4:	7102      	strb	r2, [r0, #4]
		status = ERROR_FAIL;
 80054e6:	2001      	movs	r0, #1
 80054e8:	4240      	negs	r0, r0
 80054ea:	e006      	b.n	80054fa <UART_ErrorCallback+0x7e>
		self->isTxBusy_ = false;
 80054ec:	2200      	movs	r2, #0
 80054ee:	7102      	strb	r2, [r0, #4]
		status = ERROR_TIMEOUT;
 80054f0:	2006      	movs	r0, #6
 80054f2:	4240      	negs	r0, r0
 80054f4:	e001      	b.n	80054fa <UART_ErrorCallback+0x7e>
		status = ERROR_UART_RX_OVERRUN;
 80054f6:	2048      	movs	r0, #72	@ 0x48
 80054f8:	4240      	negs	r0, r0
	}

	void* const captured = self->Error.errorCallbackData_;
	const uart_error_callback_t callback = self->Error.errorCallback;
 80054fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
	if (callback) {
 80054fc:	2a00      	cmp	r2, #0
 80054fe:	d001      	beq.n	8005504 <UART_ErrorCallback+0x88>
		callback(status, captured);
 8005500:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8005502:	4790      	blx	r2
	}
}
 8005504:	bd10      	pop	{r4, pc}
		status = ERROR_UART_FRAMING_ERR;
 8005506:	204a      	movs	r0, #74	@ 0x4a
 8005508:	4240      	negs	r0, r0
 800550a:	e7f6      	b.n	80054fa <UART_ErrorCallback+0x7e>
		status = ERROR_UART_RX_NOISE;
 800550c:	2049      	movs	r0, #73	@ 0x49
 800550e:	4240      	negs	r0, r0
 8005510:	e7f3      	b.n	80054fa <UART_ErrorCallback+0x7e>
		status = STATUS_BUSY;
 8005512:	2002      	movs	r0, #2
 8005514:	e7f1      	b.n	80054fa <UART_ErrorCallback+0x7e>
		status = STATUS_BUSY;
 8005516:	2002      	movs	r0, #2
 8005518:	e7ef      	b.n	80054fa <UART_ErrorCallback+0x7e>
		status = STATUS_BUSY;
 800551a:	2002      	movs	r0, #2
 800551c:	e7ed      	b.n	80054fa <UART_ErrorCallback+0x7e>
		status = STATUS_BUSY;
 800551e:	2002      	movs	r0, #2
 8005520:	e7eb      	b.n	80054fa <UART_ErrorCallback+0x7e>
	...

08005524 <UART_RXCallback>:
{
 8005524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005526:	0004      	movs	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 8005528:	6805      	ldr	r5, [r0, #0]
	uint8_t* const r_rxBuffer1 = self->RX.rxBuffer1;
 800552a:	69c1      	ldr	r1, [r0, #28]
	uint8_t* const r_rxBuffer2 = self->RX.rxBuffer2;
 800552c:	6a03      	ldr	r3, [r0, #32]
	const uint32_t r_buff_size = self->RX.rxBufferSize;
 800552e:	6982      	ldr	r2, [r0, #24]
	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 8005530:	6daf      	ldr	r7, [r5, #88]	@ 0x58
 8005532:	428f      	cmp	r7, r1
 8005534:	d022      	beq.n	800557c <UART_RXCallback+0x58>
 8005536:	429f      	cmp	r7, r3
 8005538:	d119      	bne.n	800556e <UART_RXCallback+0x4a>
	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800553a:	2380      	movs	r3, #128	@ 0x80
 800553c:	58eb      	ldr	r3, [r5, r3]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	685e      	ldr	r6, [r3, #4]
 8005542:	1b96      	subs	r6, r2, r6
	const HAL_StatusTypeDef rtn = HAL_UART_Receive_DMA(huart, next, r_buff_size);
 8005544:	b292      	uxth	r2, r2
 8005546:	0028      	movs	r0, r5
 8005548:	f7fe fc08 	bl	8003d5c <HAL_UART_Receive_DMA>
	if (rtn != HAL_OK || huart->gState == HAL_UART_STATE_ERROR) {
 800554c:	2800      	cmp	r0, #0
 800554e:	d103      	bne.n	8005558 <UART_RXCallback+0x34>
 8005550:	2388      	movs	r3, #136	@ 0x88
 8005552:	58eb      	ldr	r3, [r5, r3]
 8005554:	2be0      	cmp	r3, #224	@ 0xe0
 8005556:	d102      	bne.n	800555e <UART_RXCallback+0x3a>
		UART_ErrorCallback(self);
 8005558:	0020      	movs	r0, r4
 800555a:	f7ff ff8f 	bl	800547c <UART_ErrorCallback>
	const uart_rx_callback_t callback = self->RX.rxCallback_;
 800555e:	6923      	ldr	r3, [r4, #16]
	if (callback) {
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <UART_RXCallback+0x48>
		callback(curr, size, captured);
 8005564:	6962      	ldr	r2, [r4, #20]
 8005566:	0031      	movs	r1, r6
 8005568:	0038      	movs	r0, r7
 800556a:	4798      	blx	r3
}
 800556c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	assert(huart->pRxBuffPtr == r_rxBuffer1 || huart->pRxBuffPtr == r_rxBuffer2);
 800556e:	4b07      	ldr	r3, [pc, #28]	@ (800558c <UART_RXCallback+0x68>)
 8005570:	4a07      	ldr	r2, [pc, #28]	@ (8005590 <UART_RXCallback+0x6c>)
 8005572:	212a      	movs	r1, #42	@ 0x2a
 8005574:	4807      	ldr	r0, [pc, #28]	@ (8005594 <UART_RXCallback+0x70>)
 8005576:	31ff      	adds	r1, #255	@ 0xff
 8005578:	f000 fb36 	bl	8005be8 <__assert_func>
	const uint32_t size = r_buff_size - __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800557c:	2180      	movs	r1, #128	@ 0x80
 800557e:	5869      	ldr	r1, [r5, r1]
 8005580:	6809      	ldr	r1, [r1, #0]
 8005582:	684e      	ldr	r6, [r1, #4]
 8005584:	1b96      	subs	r6, r2, r6
	uint8_t* const next = (huart->pRxBuffPtr == r_rxBuffer1) ? r_rxBuffer2 : r_rxBuffer1;
 8005586:	0019      	movs	r1, r3
 8005588:	e7dc      	b.n	8005544 <UART_RXCallback+0x20>
 800558a:	46c0      	nop			@ (mov r8, r8)
 800558c:	08007d90 	.word	0x08007d90
 8005590:	08007e04 	.word	0x08007e04
 8005594:	08007dd8 	.word	0x08007dd8

08005598 <UART_SetRxCallback>:
{
 8005598:	b570      	push	{r4, r5, r6, lr}
 800559a:	0004      	movs	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 800559c:	6805      	ldr	r5, [r0, #0]
	self->RX.rxCallback_ = f;
 800559e:	6101      	str	r1, [r0, #16]
	self->RX.rxCallbackData_ = captured;
 80055a0:	6142      	str	r2, [r0, #20]
	if (f) {
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d00a      	beq.n	80055bc <UART_SetRxCallback+0x24>
		HAL_UART_Receive_DMA(huart, r_rxBuffer, r_buff_size); // Start receiving via DMA
 80055a6:	8b02      	ldrh	r2, [r0, #24]
 80055a8:	69c1      	ldr	r1, [r0, #28]
 80055aa:	0028      	movs	r0, r5
 80055ac:	f7fe fbd6 	bl	8003d5c <HAL_UART_Receive_DMA>
		__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);  // Enable serial port idle interrupt
 80055b0:	682a      	ldr	r2, [r5, #0]
 80055b2:	6813      	ldr	r3, [r2, #0]
 80055b4:	2110      	movs	r1, #16
 80055b6:	430b      	orrs	r3, r1
 80055b8:	6013      	str	r3, [r2, #0]
}
 80055ba:	bd70      	pop	{r4, r5, r6, pc}
		HAL_UART_AbortReceive(huart);
 80055bc:	0028      	movs	r0, r5
 80055be:	f7fd fdbd 	bl	800313c <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 80055c2:	0020      	movs	r0, r4
 80055c4:	f7ff ffae 	bl	8005524 <UART_RXCallback>
		__HAL_UART_DISABLE_IT(huart, UART_IT_IDLE);  // Disable serial port idle interrupt
 80055c8:	682a      	ldr	r2, [r5, #0]
 80055ca:	6813      	ldr	r3, [r2, #0]
 80055cc:	2110      	movs	r1, #16
 80055ce:	438b      	bics	r3, r1
 80055d0:	6013      	str	r3, [r2, #0]
}
 80055d2:	e7f2      	b.n	80055ba <UART_SetRxCallback+0x22>

080055d4 <UART_Init>:
{
 80055d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055d6:	46c6      	mov	lr, r8
 80055d8:	b500      	push	{lr}
 80055da:	0004      	movs	r4, r0
 80055dc:	000e      	movs	r6, r1
 80055de:	0015      	movs	r5, r2
	if((self == NULL) || (huart == NULL) || (rxBufferSize > 2048U)) {
 80055e0:	2800      	cmp	r0, #0
 80055e2:	d038      	beq.n	8005656 <UART_Init+0x82>
 80055e4:	2900      	cmp	r1, #0
 80055e6:	d03a      	beq.n	800565e <UART_Init+0x8a>
 80055e8:	2380      	movs	r3, #128	@ 0x80
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	429a      	cmp	r2, r3
 80055ee:	d83a      	bhi.n	8005666 <UART_Init+0x92>
	memset(self, 0, sizeof(stm32_DMA_uart_t));
 80055f0:	3005      	adds	r0, #5
 80055f2:	2227      	movs	r2, #39	@ 0x27
 80055f4:	2100      	movs	r1, #0
 80055f6:	f001 f938 	bl	800686a <memset>
	self->huart = huart;
 80055fa:	6026      	str	r6, [r4, #0]
	self->isTxBusy_ = false;
 80055fc:	2300      	movs	r3, #0
 80055fe:	7123      	strb	r3, [r4, #4]
	if(pushContainerUartInstance(self) != STATUS_OK) {
 8005600:	0020      	movs	r0, r4
 8005602:	f000 f855 	bl	80056b0 <pushContainerUartInstance>
 8005606:	4680      	mov	r8, r0
 8005608:	2800      	cmp	r0, #0
 800560a:	d116      	bne.n	800563a <UART_Init+0x66>
	void* const buf1 = malloc(rxBufferSize);
 800560c:	0028      	movs	r0, r5
 800560e:	f000 fb11 	bl	8005c34 <malloc>
 8005612:	1e07      	subs	r7, r0, #0
	if(buf1 == NULL) {
 8005614:	d02b      	beq.n	800566e <UART_Init+0x9a>
	void* const buf2 = malloc(rxBufferSize);
 8005616:	0028      	movs	r0, r5
 8005618:	f000 fb0c 	bl	8005c34 <malloc>
	if(buf2 == NULL) {
 800561c:	2800      	cmp	r0, #0
 800561e:	d013      	beq.n	8005648 <UART_Init+0x74>
	self->RX.rxBuffer1 = buf1;
 8005620:	61e7      	str	r7, [r4, #28]
	self->RX.rxBuffer2 = buf2;
 8005622:	6220      	str	r0, [r4, #32]
	self->RX.rxBufferSize = rxBufferSize;
 8005624:	61a5      	str	r5, [r4, #24]
	huart->pRxBuffPtr = self->RX.rxBuffer1;
 8005626:	65b7      	str	r7, [r6, #88]	@ 0x58
	UART_SetRxCallback(self, 0, 0);
 8005628:	2200      	movs	r2, #0
 800562a:	2100      	movs	r1, #0
 800562c:	0020      	movs	r0, r4
 800562e:	f7ff ffb3 	bl	8005598 <UART_SetRxCallback>
}
 8005632:	4640      	mov	r0, r8
 8005634:	bc80      	pop	{r7}
 8005636:	46b8      	mov	r8, r7
 8005638:	bdf0      	pop	{r4, r5, r6, r7, pc}
		self->isTxBusy_ = true;
 800563a:	2301      	movs	r3, #1
 800563c:	7123      	strb	r3, [r4, #4]
		self->RX.rxBufferSize = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	61a3      	str	r3, [r4, #24]
		return ERROR_FAIL;
 8005642:	3b01      	subs	r3, #1
 8005644:	4698      	mov	r8, r3
 8005646:	e7f4      	b.n	8005632 <UART_Init+0x5e>
		free(buf1);
 8005648:	0038      	movs	r0, r7
 800564a:	f000 fafd 	bl	8005c48 <free>
		return ERROR_FAIL;
 800564e:	2301      	movs	r3, #1
 8005650:	425b      	negs	r3, r3
 8005652:	4698      	mov	r8, r3
 8005654:	e7ed      	b.n	8005632 <UART_Init+0x5e>
		return ERROR_INVALID_ARGUMENT;
 8005656:	2305      	movs	r3, #5
 8005658:	425b      	negs	r3, r3
 800565a:	4698      	mov	r8, r3
 800565c:	e7e9      	b.n	8005632 <UART_Init+0x5e>
 800565e:	2305      	movs	r3, #5
 8005660:	425b      	negs	r3, r3
 8005662:	4698      	mov	r8, r3
 8005664:	e7e5      	b.n	8005632 <UART_Init+0x5e>
 8005666:	2305      	movs	r3, #5
 8005668:	425b      	negs	r3, r3
 800566a:	4698      	mov	r8, r3
 800566c:	e7e1      	b.n	8005632 <UART_Init+0x5e>
		return ERROR_FAIL;
 800566e:	2301      	movs	r3, #1
 8005670:	425b      	negs	r3, r3
 8005672:	4698      	mov	r8, r3
 8005674:	e7dd      	b.n	8005632 <UART_Init+0x5e>

08005676 <USER_UART_IRQHandler>:
{
 8005676:	b510      	push	{r4, lr}
 8005678:	0004      	movs	r4, r0
	UART_HandleTypeDef* const huart = self->huart;
 800567a:	6800      	ldr	r0, [r0, #0]
	if (RESET != __HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE)) {
 800567c:	6802      	ldr	r2, [r0, #0]
 800567e:	69d3      	ldr	r3, [r2, #28]
 8005680:	06db      	lsls	r3, r3, #27
 8005682:	d400      	bmi.n	8005686 <USER_UART_IRQHandler+0x10>
}
 8005684:	bd10      	pop	{r4, pc}
		__HAL_UART_CLEAR_IDLEFLAG(huart); // Clear idle interrupt sign
 8005686:	2310      	movs	r3, #16
 8005688:	6213      	str	r3, [r2, #32]
		HAL_UART_AbortReceive(huart);
 800568a:	f7fd fd57 	bl	800313c <HAL_UART_AbortReceive>
		UART_RXCallback(self);
 800568e:	0020      	movs	r0, r4
 8005690:	f7ff ff48 	bl	8005524 <UART_RXCallback>
}
 8005694:	e7f6      	b.n	8005684 <USER_UART_IRQHandler+0xe>
	...

08005698 <getContainerUartInstance>:

stm32_DMA_uart_t* const getContainerUartInstance(UART_HandleTypeDef* const huart)
{
#if (UART_CONTAINER_COUNT == 1)

	stm32_DMA_uart_t* const r_inst = m_instances[0];
 8005698:	4b04      	ldr	r3, [pc, #16]	@ (80056ac <getContainerUartInstance+0x14>)
 800569a:	681a      	ldr	r2, [r3, #0]
	if(r_inst->huart == huart) {
 800569c:	6813      	ldr	r3, [r2, #0]
			return r_inst;
		}
	}
#endif /* (UART_CONTAINER_COUNT == 1) */

	return NULL;
 800569e:	1a1b      	subs	r3, r3, r0
 80056a0:	4259      	negs	r1, r3
 80056a2:	414b      	adcs	r3, r1
 80056a4:	425b      	negs	r3, r3
 80056a6:	401a      	ands	r2, r3
}
 80056a8:	0010      	movs	r0, r2
 80056aa:	4770      	bx	lr
 80056ac:	200003e8 	.word	0x200003e8

080056b0 <pushContainerUartInstance>:

status_t pushContainerUartInstance(stm32_DMA_uart_t* const inst)
{
#if (UART_CONTAINER_COUNT == 1)
	if(inst == NULL) {
 80056b0:	2800      	cmp	r0, #0
 80056b2:	d003      	beq.n	80056bc <pushContainerUartInstance+0xc>
		return ERROR_FAIL;
	}

	m_instances[0] = inst;
 80056b4:	4b03      	ldr	r3, [pc, #12]	@ (80056c4 <pushContainerUartInstance+0x14>)
 80056b6:	6018      	str	r0, [r3, #0]
	}
	m_instances[m_instance_counter] = inst;
	++m_instance_counter;
#endif /* (UART_CONTAINER_COUNT == 1) */

	return STATUS_OK;
 80056b8:	2000      	movs	r0, #0
}
 80056ba:	4770      	bx	lr
		return ERROR_FAIL;
 80056bc:	2001      	movs	r0, #1
 80056be:	4240      	negs	r0, r0
 80056c0:	e7fb      	b.n	80056ba <pushContainerUartInstance+0xa>
 80056c2:	46c0      	nop			@ (mov r8, r8)
 80056c4:	200003e8 	.word	0x200003e8

080056c8 <HAL_UART_TxCpltCallback>:

#include "stm32_uart.h"

// callbacks IT --------------------------------------------------------------------------------------------
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056c8:	b510      	push	{r4, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 80056ca:	f7ff ffe5 	bl	8005698 <getContainerUartInstance>
	if(uart_instance) {
 80056ce:	2800      	cmp	r0, #0
 80056d0:	d001      	beq.n	80056d6 <HAL_UART_TxCpltCallback+0xe>
		UART_TXCallback(uart_instance);
 80056d2:	f7ff fec3 	bl	800545c <UART_TXCallback>
	}
}
 80056d6:	bd10      	pop	{r4, pc}

080056d8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056d8:	b510      	push	{r4, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 80056da:	f7ff ffdd 	bl	8005698 <getContainerUartInstance>
	if(uart_instance) {
 80056de:	2800      	cmp	r0, #0
 80056e0:	d001      	beq.n	80056e6 <HAL_UART_RxCpltCallback+0xe>
		UART_RXCallback(uart_instance);
 80056e2:	f7ff ff1f 	bl	8005524 <UART_RXCallback>
	}
}
 80056e6:	bd10      	pop	{r4, pc}

080056e8 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056e8:	b510      	push	{r4, lr}
	stm32_DMA_uart_t* const uart_instance = getContainerUartInstance(huart);
 80056ea:	f7ff ffd5 	bl	8005698 <getContainerUartInstance>
	if(uart_instance) {
 80056ee:	2800      	cmp	r0, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_UART_ErrorCallback+0xe>
		UART_ErrorCallback(uart_instance);
 80056f2:	f7ff fec3 	bl	800547c <UART_ErrorCallback>
	}
}
 80056f6:	bd10      	pop	{r4, pc}

080056f8 <_ZdlPvj>:
 80056f8:	b510      	push	{r4, lr}
 80056fa:	f000 f8f7 	bl	80058ec <_ZdlPv>
 80056fe:	bd10      	pop	{r4, pc}

08005700 <_ZdaPv>:
 8005700:	b510      	push	{r4, lr}
 8005702:	f000 f8f3 	bl	80058ec <_ZdlPv>
 8005706:	bd10      	pop	{r4, pc}

08005708 <__cxa_guard_acquire>:
 8005708:	2301      	movs	r3, #1
 800570a:	6802      	ldr	r2, [r0, #0]
 800570c:	421a      	tst	r2, r3
 800570e:	d106      	bne.n	800571e <__cxa_guard_acquire+0x16>
 8005710:	7842      	ldrb	r2, [r0, #1]
 8005712:	2a00      	cmp	r2, #0
 8005714:	d000      	beq.n	8005718 <__cxa_guard_acquire+0x10>
 8005716:	deff      	udf	#255	@ 0xff
 8005718:	7043      	strb	r3, [r0, #1]
 800571a:	0018      	movs	r0, r3
 800571c:	4770      	bx	lr
 800571e:	2000      	movs	r0, #0
 8005720:	e7fc      	b.n	800571c <__cxa_guard_acquire+0x14>

08005722 <__cxa_guard_release>:
 8005722:	2301      	movs	r3, #1
 8005724:	6003      	str	r3, [r0, #0]
 8005726:	4770      	bx	lr

08005728 <_Znwj>:
 8005728:	b510      	push	{r4, lr}
 800572a:	1e04      	subs	r4, r0, #0
 800572c:	d100      	bne.n	8005730 <_Znwj+0x8>
 800572e:	3401      	adds	r4, #1
 8005730:	0020      	movs	r0, r4
 8005732:	f000 fa7f 	bl	8005c34 <malloc>
 8005736:	2800      	cmp	r0, #0
 8005738:	d000      	beq.n	800573c <_Znwj+0x14>
 800573a:	bd10      	pop	{r4, pc}
 800573c:	f000 f8da 	bl	80058f4 <_ZSt15get_new_handlerv>
 8005740:	2800      	cmp	r0, #0
 8005742:	d101      	bne.n	8005748 <_Znwj+0x20>
 8005744:	f000 fa48 	bl	8005bd8 <abort>
 8005748:	4780      	blx	r0
 800574a:	e7f1      	b.n	8005730 <_Znwj+0x8>

0800574c <_Znaj>:
 800574c:	b510      	push	{r4, lr}
 800574e:	f7ff ffeb 	bl	8005728 <_Znwj>
 8005752:	bd10      	pop	{r4, pc}

08005754 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>:
 8005754:	68c3      	ldr	r3, [r0, #12]
 8005756:	b510      	push	{r4, lr}
 8005758:	689a      	ldr	r2, [r3, #8]
 800575a:	60c2      	str	r2, [r0, #12]
 800575c:	2a00      	cmp	r2, #0
 800575e:	d000      	beq.n	8005762 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0xe>
 8005760:	6050      	str	r0, [r2, #4]
 8005762:	6842      	ldr	r2, [r0, #4]
 8005764:	605a      	str	r2, [r3, #4]
 8005766:	680c      	ldr	r4, [r1, #0]
 8005768:	4284      	cmp	r4, r0
 800576a:	d103      	bne.n	8005774 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x20>
 800576c:	600b      	str	r3, [r1, #0]
 800576e:	6098      	str	r0, [r3, #8]
 8005770:	6043      	str	r3, [r0, #4]
 8005772:	bd10      	pop	{r4, pc}
 8005774:	6891      	ldr	r1, [r2, #8]
 8005776:	4281      	cmp	r1, r0
 8005778:	d101      	bne.n	800577e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x2a>
 800577a:	6093      	str	r3, [r2, #8]
 800577c:	e7f7      	b.n	800576e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1a>
 800577e:	60d3      	str	r3, [r2, #12]
 8005780:	e7f5      	b.n	800576e <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_+0x1a>

08005782 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>:
 8005782:	6883      	ldr	r3, [r0, #8]
 8005784:	b510      	push	{r4, lr}
 8005786:	68da      	ldr	r2, [r3, #12]
 8005788:	6082      	str	r2, [r0, #8]
 800578a:	2a00      	cmp	r2, #0
 800578c:	d000      	beq.n	8005790 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0xe>
 800578e:	6050      	str	r0, [r2, #4]
 8005790:	6842      	ldr	r2, [r0, #4]
 8005792:	605a      	str	r2, [r3, #4]
 8005794:	680c      	ldr	r4, [r1, #0]
 8005796:	4284      	cmp	r4, r0
 8005798:	d103      	bne.n	80057a2 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x20>
 800579a:	600b      	str	r3, [r1, #0]
 800579c:	60d8      	str	r0, [r3, #12]
 800579e:	6043      	str	r3, [r0, #4]
 80057a0:	bd10      	pop	{r4, pc}
 80057a2:	68d1      	ldr	r1, [r2, #12]
 80057a4:	4281      	cmp	r1, r0
 80057a6:	d101      	bne.n	80057ac <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x2a>
 80057a8:	60d3      	str	r3, [r2, #12]
 80057aa:	e7f7      	b.n	800579c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1a>
 80057ac:	6093      	str	r3, [r2, #8]
 80057ae:	e7f5      	b.n	800579c <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_+0x1a>

080057b0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 80057b0:	68c3      	ldr	r3, [r0, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d004      	beq.n	80057c0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x10>
 80057b6:	0018      	movs	r0, r3
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1fb      	bne.n	80057b6 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x6>
 80057be:	4770      	bx	lr
 80057c0:	6843      	ldr	r3, [r0, #4]
 80057c2:	68da      	ldr	r2, [r3, #12]
 80057c4:	4282      	cmp	r2, r0
 80057c6:	d004      	beq.n	80057d2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x22>
 80057c8:	68c2      	ldr	r2, [r0, #12]
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d0f7      	beq.n	80057be <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80057ce:	0018      	movs	r0, r3
 80057d0:	e7f5      	b.n	80057be <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0xe>
 80057d2:	0018      	movs	r0, r3
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	e7f4      	b.n	80057c2 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base+0x12>

080057d8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 80057d8:	7802      	ldrb	r2, [r0, #0]
 80057da:	0003      	movs	r3, r0
 80057dc:	2a00      	cmp	r2, #0
 80057de:	d105      	bne.n	80057ec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 80057e0:	6842      	ldr	r2, [r0, #4]
 80057e2:	6852      	ldr	r2, [r2, #4]
 80057e4:	4282      	cmp	r2, r0
 80057e6:	d101      	bne.n	80057ec <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x14>
 80057e8:	68d0      	ldr	r0, [r2, #12]
 80057ea:	4770      	bx	lr
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	2a00      	cmp	r2, #0
 80057f0:	d004      	beq.n	80057fc <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x24>
 80057f2:	0010      	movs	r0, r2
 80057f4:	68d2      	ldr	r2, [r2, #12]
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	d1fb      	bne.n	80057f2 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x1a>
 80057fa:	e7f6      	b.n	80057ea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 80057fc:	6858      	ldr	r0, [r3, #4]
 80057fe:	6882      	ldr	r2, [r0, #8]
 8005800:	429a      	cmp	r2, r3
 8005802:	d1f2      	bne.n	80057ea <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x12>
 8005804:	0003      	movs	r3, r0
 8005806:	6840      	ldr	r0, [r0, #4]
 8005808:	e7f9      	b.n	80057fe <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base+0x26>

0800580a <_ZSt18_Rb_tree_incrementPSt18_Rb_tree_node_base>:
 800580a:	b510      	push	{r4, lr}
 800580c:	f7ff ffd0 	bl	80057b0 <_ZStL23local_Rb_tree_incrementPSt18_Rb_tree_node_base>
 8005810:	bd10      	pop	{r4, pc}

08005812 <_ZSt18_Rb_tree_decrementPSt18_Rb_tree_node_base>:
 8005812:	b510      	push	{r4, lr}
 8005814:	f7ff ffe0 	bl	80057d8 <_ZStL23local_Rb_tree_decrementPSt18_Rb_tree_node_base>
 8005818:	bd10      	pop	{r4, pc}

0800581a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_>:
 800581a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800581c:	001d      	movs	r5, r3
 800581e:	3304      	adds	r3, #4
 8005820:	9301      	str	r3, [sp, #4]
 8005822:	2300      	movs	r3, #0
 8005824:	000c      	movs	r4, r1
 8005826:	604a      	str	r2, [r1, #4]
 8005828:	608b      	str	r3, [r1, #8]
 800582a:	60cb      	str	r3, [r1, #12]
 800582c:	700b      	strb	r3, [r1, #0]
 800582e:	4298      	cmp	r0, r3
 8005830:	d00f      	beq.n	8005852 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x38>
 8005832:	6091      	str	r1, [r2, #8]
 8005834:	4295      	cmp	r5, r2
 8005836:	d102      	bne.n	800583e <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x24>
 8005838:	6069      	str	r1, [r5, #4]
 800583a:	60ec      	str	r4, [r5, #12]
 800583c:	e003      	b.n	8005846 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 800583e:	68ab      	ldr	r3, [r5, #8]
 8005840:	4293      	cmp	r3, r2
 8005842:	d100      	bne.n	8005846 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 8005844:	60a9      	str	r1, [r5, #8]
 8005846:	686b      	ldr	r3, [r5, #4]
 8005848:	42a3      	cmp	r3, r4
 800584a:	d134      	bne.n	80058b6 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x9c>
 800584c:	2201      	movs	r2, #1
 800584e:	701a      	strb	r2, [r3, #0]
 8005850:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8005852:	60d1      	str	r1, [r2, #12]
 8005854:	68eb      	ldr	r3, [r5, #12]
 8005856:	4293      	cmp	r3, r2
 8005858:	d1f5      	bne.n	8005846 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 800585a:	e7ee      	b.n	800583a <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x20>
 800585c:	68f3      	ldr	r3, [r6, #12]
 800585e:	42a3      	cmp	r3, r4
 8005860:	d104      	bne.n	800586c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x52>
 8005862:	0030      	movs	r0, r6
 8005864:	9901      	ldr	r1, [sp, #4]
 8005866:	f7ff ff75 	bl	8005754 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 800586a:	0034      	movs	r4, r6
 800586c:	2201      	movs	r2, #1
 800586e:	6863      	ldr	r3, [r4, #4]
 8005870:	0038      	movs	r0, r7
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	2300      	movs	r3, #0
 8005876:	9901      	ldr	r1, [sp, #4]
 8005878:	703b      	strb	r3, [r7, #0]
 800587a:	f7ff ff82 	bl	8005782 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 800587e:	e7e2      	b.n	8005846 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 8005880:	2b00      	cmp	r3, #0
 8005882:	d006      	beq.n	8005892 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x78>
 8005884:	781a      	ldrb	r2, [r3, #0]
 8005886:	2a00      	cmp	r2, #0
 8005888:	d103      	bne.n	8005892 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x78>
 800588a:	3201      	adds	r2, #1
 800588c:	7032      	strb	r2, [r6, #0]
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	e022      	b.n	80058d8 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0xbe>
 8005892:	68b3      	ldr	r3, [r6, #8]
 8005894:	42a3      	cmp	r3, r4
 8005896:	d104      	bne.n	80058a2 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x88>
 8005898:	0030      	movs	r0, r6
 800589a:	9901      	ldr	r1, [sp, #4]
 800589c:	f7ff ff71 	bl	8005782 <_ZStL26local_Rb_tree_rotate_rightPSt18_Rb_tree_node_baseRS0_>
 80058a0:	0034      	movs	r4, r6
 80058a2:	2201      	movs	r2, #1
 80058a4:	6863      	ldr	r3, [r4, #4]
 80058a6:	0038      	movs	r0, r7
 80058a8:	701a      	strb	r2, [r3, #0]
 80058aa:	2300      	movs	r3, #0
 80058ac:	9901      	ldr	r1, [sp, #4]
 80058ae:	703b      	strb	r3, [r7, #0]
 80058b0:	f7ff ff50 	bl	8005754 <_ZStL25local_Rb_tree_rotate_leftPSt18_Rb_tree_node_baseRS0_>
 80058b4:	e7c7      	b.n	8005846 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>
 80058b6:	6866      	ldr	r6, [r4, #4]
 80058b8:	7832      	ldrb	r2, [r6, #0]
 80058ba:	2a00      	cmp	r2, #0
 80058bc:	d1c6      	bne.n	800584c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x32>
 80058be:	6877      	ldr	r7, [r6, #4]
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	42b3      	cmp	r3, r6
 80058c4:	d1dc      	bne.n	8005880 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x66>
 80058c6:	68fa      	ldr	r2, [r7, #12]
 80058c8:	2a00      	cmp	r2, #0
 80058ca:	d0c7      	beq.n	800585c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x42>
 80058cc:	7811      	ldrb	r1, [r2, #0]
 80058ce:	2900      	cmp	r1, #0
 80058d0:	d1c4      	bne.n	800585c <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x42>
 80058d2:	3101      	adds	r1, #1
 80058d4:	7019      	strb	r1, [r3, #0]
 80058d6:	7011      	strb	r1, [r2, #0]
 80058d8:	2300      	movs	r3, #0
 80058da:	003c      	movs	r4, r7
 80058dc:	703b      	strb	r3, [r7, #0]
 80058de:	e7b2      	b.n	8005846 <_ZSt29_Rb_tree_insert_and_rebalancebPSt18_Rb_tree_node_baseS0_RS_+0x2c>

080058e0 <_ZSt20__throw_length_errorPKc>:
 80058e0:	b510      	push	{r4, lr}
 80058e2:	f000 f979 	bl	8005bd8 <abort>

080058e6 <_ZSt25__throw_bad_function_callv>:
 80058e6:	b510      	push	{r4, lr}
 80058e8:	f000 f976 	bl	8005bd8 <abort>

080058ec <_ZdlPv>:
 80058ec:	b510      	push	{r4, lr}
 80058ee:	f000 f9ab 	bl	8005c48 <free>
 80058f2:	bd10      	pop	{r4, pc}

080058f4 <_ZSt15get_new_handlerv>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	@ (80058fc <_ZSt15get_new_handlerv+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	46c0      	nop			@ (mov r8, r8)
 80058fc:	200003ec 	.word	0x200003ec

08005900 <log2f>:
 8005900:	b510      	push	{r4, lr}
 8005902:	f000 f807 	bl	8005914 <logf>
 8005906:	4902      	ldr	r1, [pc, #8]	@ (8005910 <log2f+0x10>)
 8005908:	f7fa ff56 	bl	80007b8 <__aeabi_fdiv>
 800590c:	bd10      	pop	{r4, pc}
 800590e:	46c0      	nop			@ (mov r8, r8)
 8005910:	3f317218 	.word	0x3f317218

08005914 <logf>:
 8005914:	b570      	push	{r4, r5, r6, lr}
 8005916:	1c05      	adds	r5, r0, #0
 8005918:	f000 f82c 	bl	8005974 <__ieee754_logf>
 800591c:	1c29      	adds	r1, r5, #0
 800591e:	1c04      	adds	r4, r0, #0
 8005920:	1c28      	adds	r0, r5, #0
 8005922:	f7fb fc11 	bl	8001148 <__aeabi_fcmpun>
 8005926:	2800      	cmp	r0, #0
 8005928:	d110      	bne.n	800594c <logf+0x38>
 800592a:	2100      	movs	r1, #0
 800592c:	1c28      	adds	r0, r5, #0
 800592e:	f7fa fd8d 	bl	800044c <__aeabi_fcmpgt>
 8005932:	2800      	cmp	r0, #0
 8005934:	d10a      	bne.n	800594c <logf+0x38>
 8005936:	2100      	movs	r1, #0
 8005938:	1c28      	adds	r0, r5, #0
 800593a:	f7fa fd6d 	bl	8000418 <__aeabi_fcmpeq>
 800593e:	2800      	cmp	r0, #0
 8005940:	d006      	beq.n	8005950 <logf+0x3c>
 8005942:	f001 f843 	bl	80069cc <__errno>
 8005946:	2322      	movs	r3, #34	@ 0x22
 8005948:	4c06      	ldr	r4, [pc, #24]	@ (8005964 <logf+0x50>)
 800594a:	6003      	str	r3, [r0, #0]
 800594c:	1c20      	adds	r0, r4, #0
 800594e:	bd70      	pop	{r4, r5, r6, pc}
 8005950:	f001 f83c 	bl	80069cc <__errno>
 8005954:	2321      	movs	r3, #33	@ 0x21
 8005956:	6003      	str	r3, [r0, #0]
 8005958:	4803      	ldr	r0, [pc, #12]	@ (8005968 <logf+0x54>)
 800595a:	f000 f807 	bl	800596c <nanf>
 800595e:	1c04      	adds	r4, r0, #0
 8005960:	e7f4      	b.n	800594c <logf+0x38>
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	ff800000 	.word	0xff800000
 8005968:	08007e4f 	.word	0x08007e4f

0800596c <nanf>:
 800596c:	4800      	ldr	r0, [pc, #0]	@ (8005970 <nanf+0x4>)
 800596e:	4770      	bx	lr
 8005970:	7fc00000 	.word	0x7fc00000

08005974 <__ieee754_logf>:
 8005974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005976:	0043      	lsls	r3, r0, #1
 8005978:	b085      	sub	sp, #20
 800597a:	2b00      	cmp	r3, #0
 800597c:	d106      	bne.n	800598c <__ieee754_logf+0x18>
 800597e:	20cc      	movs	r0, #204	@ 0xcc
 8005980:	2100      	movs	r1, #0
 8005982:	0600      	lsls	r0, r0, #24
 8005984:	f7fa ff18 	bl	80007b8 <__aeabi_fdiv>
 8005988:	b005      	add	sp, #20
 800598a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800598c:	1e03      	subs	r3, r0, #0
 800598e:	da04      	bge.n	800599a <__ieee754_logf+0x26>
 8005990:	1c01      	adds	r1, r0, #0
 8005992:	f7fb fa35 	bl	8000e00 <__aeabi_fsub>
 8005996:	2100      	movs	r1, #0
 8005998:	e7f4      	b.n	8005984 <__ieee754_logf+0x10>
 800599a:	21ff      	movs	r1, #255	@ 0xff
 800599c:	05c9      	lsls	r1, r1, #23
 800599e:	4288      	cmp	r0, r1
 80059a0:	db03      	blt.n	80059aa <__ieee754_logf+0x36>
 80059a2:	1c01      	adds	r1, r0, #0
 80059a4:	f7fa fd7e 	bl	80004a4 <__aeabi_fadd>
 80059a8:	e7ee      	b.n	8005988 <__ieee754_logf+0x14>
 80059aa:	2280      	movs	r2, #128	@ 0x80
 80059ac:	2100      	movs	r1, #0
 80059ae:	0412      	lsls	r2, r2, #16
 80059b0:	4290      	cmp	r0, r2
 80059b2:	da06      	bge.n	80059c2 <__ieee754_logf+0x4e>
 80059b4:	2198      	movs	r1, #152	@ 0x98
 80059b6:	05c9      	lsls	r1, r1, #23
 80059b8:	f7fb f8e4 	bl	8000b84 <__aeabi_fmul>
 80059bc:	2119      	movs	r1, #25
 80059be:	0003      	movs	r3, r0
 80059c0:	4249      	negs	r1, r1
 80059c2:	15da      	asrs	r2, r3, #23
 80059c4:	3a7f      	subs	r2, #127	@ 0x7f
 80059c6:	1852      	adds	r2, r2, r1
 80059c8:	2180      	movs	r1, #128	@ 0x80
 80059ca:	025b      	lsls	r3, r3, #9
 80059cc:	0a5e      	lsrs	r6, r3, #9
 80059ce:	4b74      	ldr	r3, [pc, #464]	@ (8005ba0 <__ieee754_logf+0x22c>)
 80059d0:	20fe      	movs	r0, #254	@ 0xfe
 80059d2:	0409      	lsls	r1, r1, #16
 80059d4:	18f3      	adds	r3, r6, r3
 80059d6:	400b      	ands	r3, r1
 80059d8:	21fe      	movs	r1, #254	@ 0xfe
 80059da:	0580      	lsls	r0, r0, #22
 80059dc:	4058      	eors	r0, r3
 80059de:	15dd      	asrs	r5, r3, #23
 80059e0:	4330      	orrs	r0, r6
 80059e2:	0589      	lsls	r1, r1, #22
 80059e4:	18ad      	adds	r5, r5, r2
 80059e6:	f7fb fa0b 	bl	8000e00 <__aeabi_fsub>
 80059ea:	0032      	movs	r2, r6
 80059ec:	4b6d      	ldr	r3, [pc, #436]	@ (8005ba4 <__ieee754_logf+0x230>)
 80059ee:	320f      	adds	r2, #15
 80059f0:	1c04      	adds	r4, r0, #0
 80059f2:	421a      	tst	r2, r3
 80059f4:	d145      	bne.n	8005a82 <__ieee754_logf+0x10e>
 80059f6:	2100      	movs	r1, #0
 80059f8:	f7fa fd0e 	bl	8000418 <__aeabi_fcmpeq>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d011      	beq.n	8005a24 <__ieee754_logf+0xb0>
 8005a00:	2000      	movs	r0, #0
 8005a02:	2d00      	cmp	r5, #0
 8005a04:	d0c0      	beq.n	8005988 <__ieee754_logf+0x14>
 8005a06:	0028      	movs	r0, r5
 8005a08:	f7fb fbd4 	bl	80011b4 <__aeabi_i2f>
 8005a0c:	4966      	ldr	r1, [pc, #408]	@ (8005ba8 <__ieee754_logf+0x234>)
 8005a0e:	1c04      	adds	r4, r0, #0
 8005a10:	f7fb f8b8 	bl	8000b84 <__aeabi_fmul>
 8005a14:	4965      	ldr	r1, [pc, #404]	@ (8005bac <__ieee754_logf+0x238>)
 8005a16:	1c05      	adds	r5, r0, #0
 8005a18:	1c20      	adds	r0, r4, #0
 8005a1a:	f7fb f8b3 	bl	8000b84 <__aeabi_fmul>
 8005a1e:	1c01      	adds	r1, r0, #0
 8005a20:	1c28      	adds	r0, r5, #0
 8005a22:	e7bf      	b.n	80059a4 <__ieee754_logf+0x30>
 8005a24:	4962      	ldr	r1, [pc, #392]	@ (8005bb0 <__ieee754_logf+0x23c>)
 8005a26:	1c20      	adds	r0, r4, #0
 8005a28:	f7fb f8ac 	bl	8000b84 <__aeabi_fmul>
 8005a2c:	1c01      	adds	r1, r0, #0
 8005a2e:	20fc      	movs	r0, #252	@ 0xfc
 8005a30:	0580      	lsls	r0, r0, #22
 8005a32:	f7fb f9e5 	bl	8000e00 <__aeabi_fsub>
 8005a36:	1c21      	adds	r1, r4, #0
 8005a38:	1c06      	adds	r6, r0, #0
 8005a3a:	1c20      	adds	r0, r4, #0
 8005a3c:	f7fb f8a2 	bl	8000b84 <__aeabi_fmul>
 8005a40:	1c01      	adds	r1, r0, #0
 8005a42:	1c30      	adds	r0, r6, #0
 8005a44:	f7fb f89e 	bl	8000b84 <__aeabi_fmul>
 8005a48:	1c06      	adds	r6, r0, #0
 8005a4a:	2d00      	cmp	r5, #0
 8005a4c:	d101      	bne.n	8005a52 <__ieee754_logf+0xde>
 8005a4e:	1c31      	adds	r1, r6, #0
 8005a50:	e079      	b.n	8005b46 <__ieee754_logf+0x1d2>
 8005a52:	0028      	movs	r0, r5
 8005a54:	f7fb fbae 	bl	80011b4 <__aeabi_i2f>
 8005a58:	4953      	ldr	r1, [pc, #332]	@ (8005ba8 <__ieee754_logf+0x234>)
 8005a5a:	1c05      	adds	r5, r0, #0
 8005a5c:	f7fb f892 	bl	8000b84 <__aeabi_fmul>
 8005a60:	4952      	ldr	r1, [pc, #328]	@ (8005bac <__ieee754_logf+0x238>)
 8005a62:	1c07      	adds	r7, r0, #0
 8005a64:	1c28      	adds	r0, r5, #0
 8005a66:	f7fb f88d 	bl	8000b84 <__aeabi_fmul>
 8005a6a:	1c01      	adds	r1, r0, #0
 8005a6c:	1c30      	adds	r0, r6, #0
 8005a6e:	f7fb f9c7 	bl	8000e00 <__aeabi_fsub>
 8005a72:	1c21      	adds	r1, r4, #0
 8005a74:	f7fb f9c4 	bl	8000e00 <__aeabi_fsub>
 8005a78:	1c01      	adds	r1, r0, #0
 8005a7a:	1c38      	adds	r0, r7, #0
 8005a7c:	f7fb f9c0 	bl	8000e00 <__aeabi_fsub>
 8005a80:	e782      	b.n	8005988 <__ieee754_logf+0x14>
 8005a82:	2180      	movs	r1, #128	@ 0x80
 8005a84:	05c9      	lsls	r1, r1, #23
 8005a86:	f7fa fd0d 	bl	80004a4 <__aeabi_fadd>
 8005a8a:	1c01      	adds	r1, r0, #0
 8005a8c:	1c20      	adds	r0, r4, #0
 8005a8e:	f7fa fe93 	bl	80007b8 <__aeabi_fdiv>
 8005a92:	9000      	str	r0, [sp, #0]
 8005a94:	0028      	movs	r0, r5
 8005a96:	f7fb fb8d 	bl	80011b4 <__aeabi_i2f>
 8005a9a:	9900      	ldr	r1, [sp, #0]
 8005a9c:	9001      	str	r0, [sp, #4]
 8005a9e:	1c08      	adds	r0, r1, #0
 8005aa0:	f7fb f870 	bl	8000b84 <__aeabi_fmul>
 8005aa4:	4b43      	ldr	r3, [pc, #268]	@ (8005bb4 <__ieee754_logf+0x240>)
 8005aa6:	1c01      	adds	r1, r0, #0
 8005aa8:	18f3      	adds	r3, r6, r3
 8005aaa:	9303      	str	r3, [sp, #12]
 8005aac:	9002      	str	r0, [sp, #8]
 8005aae:	f7fb f869 	bl	8000b84 <__aeabi_fmul>
 8005ab2:	4941      	ldr	r1, [pc, #260]	@ (8005bb8 <__ieee754_logf+0x244>)
 8005ab4:	1c07      	adds	r7, r0, #0
 8005ab6:	f7fb f865 	bl	8000b84 <__aeabi_fmul>
 8005aba:	4940      	ldr	r1, [pc, #256]	@ (8005bbc <__ieee754_logf+0x248>)
 8005abc:	f7fa fcf2 	bl	80004a4 <__aeabi_fadd>
 8005ac0:	1c39      	adds	r1, r7, #0
 8005ac2:	f7fb f85f 	bl	8000b84 <__aeabi_fmul>
 8005ac6:	493e      	ldr	r1, [pc, #248]	@ (8005bc0 <__ieee754_logf+0x24c>)
 8005ac8:	f7fa fcec 	bl	80004a4 <__aeabi_fadd>
 8005acc:	1c39      	adds	r1, r7, #0
 8005ace:	f7fb f859 	bl	8000b84 <__aeabi_fmul>
 8005ad2:	493c      	ldr	r1, [pc, #240]	@ (8005bc4 <__ieee754_logf+0x250>)
 8005ad4:	f7fa fce6 	bl	80004a4 <__aeabi_fadd>
 8005ad8:	9902      	ldr	r1, [sp, #8]
 8005ada:	f7fb f853 	bl	8000b84 <__aeabi_fmul>
 8005ade:	493a      	ldr	r1, [pc, #232]	@ (8005bc8 <__ieee754_logf+0x254>)
 8005ae0:	9002      	str	r0, [sp, #8]
 8005ae2:	1c38      	adds	r0, r7, #0
 8005ae4:	f7fb f84e 	bl	8000b84 <__aeabi_fmul>
 8005ae8:	4938      	ldr	r1, [pc, #224]	@ (8005bcc <__ieee754_logf+0x258>)
 8005aea:	f7fa fcdb 	bl	80004a4 <__aeabi_fadd>
 8005aee:	1c39      	adds	r1, r7, #0
 8005af0:	f7fb f848 	bl	8000b84 <__aeabi_fmul>
 8005af4:	4936      	ldr	r1, [pc, #216]	@ (8005bd0 <__ieee754_logf+0x25c>)
 8005af6:	f7fa fcd5 	bl	80004a4 <__aeabi_fadd>
 8005afa:	1c39      	adds	r1, r7, #0
 8005afc:	f7fb f842 	bl	8000b84 <__aeabi_fmul>
 8005b00:	1c01      	adds	r1, r0, #0
 8005b02:	9802      	ldr	r0, [sp, #8]
 8005b04:	f7fa fcce 	bl	80004a4 <__aeabi_fadd>
 8005b08:	4b32      	ldr	r3, [pc, #200]	@ (8005bd4 <__ieee754_logf+0x260>)
 8005b0a:	9a03      	ldr	r2, [sp, #12]
 8005b0c:	1b9b      	subs	r3, r3, r6
 8005b0e:	1c07      	adds	r7, r0, #0
 8005b10:	4313      	orrs	r3, r2
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dd2f      	ble.n	8005b76 <__ieee754_logf+0x202>
 8005b16:	21fc      	movs	r1, #252	@ 0xfc
 8005b18:	1c20      	adds	r0, r4, #0
 8005b1a:	0589      	lsls	r1, r1, #22
 8005b1c:	f7fb f832 	bl	8000b84 <__aeabi_fmul>
 8005b20:	1c21      	adds	r1, r4, #0
 8005b22:	f7fb f82f 	bl	8000b84 <__aeabi_fmul>
 8005b26:	1c01      	adds	r1, r0, #0
 8005b28:	1c06      	adds	r6, r0, #0
 8005b2a:	1c38      	adds	r0, r7, #0
 8005b2c:	f7fa fcba 	bl	80004a4 <__aeabi_fadd>
 8005b30:	9900      	ldr	r1, [sp, #0]
 8005b32:	f7fb f827 	bl	8000b84 <__aeabi_fmul>
 8005b36:	1c07      	adds	r7, r0, #0
 8005b38:	2d00      	cmp	r5, #0
 8005b3a:	d106      	bne.n	8005b4a <__ieee754_logf+0x1d6>
 8005b3c:	1c01      	adds	r1, r0, #0
 8005b3e:	1c30      	adds	r0, r6, #0
 8005b40:	f7fb f95e 	bl	8000e00 <__aeabi_fsub>
 8005b44:	1c01      	adds	r1, r0, #0
 8005b46:	1c20      	adds	r0, r4, #0
 8005b48:	e798      	b.n	8005a7c <__ieee754_logf+0x108>
 8005b4a:	4917      	ldr	r1, [pc, #92]	@ (8005ba8 <__ieee754_logf+0x234>)
 8005b4c:	9801      	ldr	r0, [sp, #4]
 8005b4e:	f7fb f819 	bl	8000b84 <__aeabi_fmul>
 8005b52:	4916      	ldr	r1, [pc, #88]	@ (8005bac <__ieee754_logf+0x238>)
 8005b54:	1c05      	adds	r5, r0, #0
 8005b56:	9801      	ldr	r0, [sp, #4]
 8005b58:	f7fb f814 	bl	8000b84 <__aeabi_fmul>
 8005b5c:	1c39      	adds	r1, r7, #0
 8005b5e:	f7fa fca1 	bl	80004a4 <__aeabi_fadd>
 8005b62:	1c01      	adds	r1, r0, #0
 8005b64:	1c30      	adds	r0, r6, #0
 8005b66:	f7fb f94b 	bl	8000e00 <__aeabi_fsub>
 8005b6a:	1c21      	adds	r1, r4, #0
 8005b6c:	f7fb f948 	bl	8000e00 <__aeabi_fsub>
 8005b70:	1c01      	adds	r1, r0, #0
 8005b72:	1c28      	adds	r0, r5, #0
 8005b74:	e782      	b.n	8005a7c <__ieee754_logf+0x108>
 8005b76:	1c01      	adds	r1, r0, #0
 8005b78:	1c20      	adds	r0, r4, #0
 8005b7a:	f7fb f941 	bl	8000e00 <__aeabi_fsub>
 8005b7e:	9900      	ldr	r1, [sp, #0]
 8005b80:	f7fb f800 	bl	8000b84 <__aeabi_fmul>
 8005b84:	1c06      	adds	r6, r0, #0
 8005b86:	2d00      	cmp	r5, #0
 8005b88:	d100      	bne.n	8005b8c <__ieee754_logf+0x218>
 8005b8a:	e760      	b.n	8005a4e <__ieee754_logf+0xda>
 8005b8c:	4906      	ldr	r1, [pc, #24]	@ (8005ba8 <__ieee754_logf+0x234>)
 8005b8e:	9801      	ldr	r0, [sp, #4]
 8005b90:	f7fa fff8 	bl	8000b84 <__aeabi_fmul>
 8005b94:	4905      	ldr	r1, [pc, #20]	@ (8005bac <__ieee754_logf+0x238>)
 8005b96:	1c05      	adds	r5, r0, #0
 8005b98:	9801      	ldr	r0, [sp, #4]
 8005b9a:	f7fa fff3 	bl	8000b84 <__aeabi_fmul>
 8005b9e:	e7e0      	b.n	8005b62 <__ieee754_logf+0x1ee>
 8005ba0:	004afb20 	.word	0x004afb20
 8005ba4:	007ffff0 	.word	0x007ffff0
 8005ba8:	3f317180 	.word	0x3f317180
 8005bac:	3717f7d1 	.word	0x3717f7d1
 8005bb0:	3eaaaaab 	.word	0x3eaaaaab
 8005bb4:	ffcf5c30 	.word	0xffcf5c30
 8005bb8:	3e178897 	.word	0x3e178897
 8005bbc:	3e3a3325 	.word	0x3e3a3325
 8005bc0:	3e924925 	.word	0x3e924925
 8005bc4:	3f2aaaab 	.word	0x3f2aaaab
 8005bc8:	3e1cd04f 	.word	0x3e1cd04f
 8005bcc:	3e638e29 	.word	0x3e638e29
 8005bd0:	3ecccccd 	.word	0x3ecccccd
 8005bd4:	0035c288 	.word	0x0035c288

08005bd8 <abort>:
 8005bd8:	2006      	movs	r0, #6
 8005bda:	b510      	push	{r4, lr}
 8005bdc:	f000 fe76 	bl	80068cc <raise>
 8005be0:	2001      	movs	r0, #1
 8005be2:	f7fb fd11 	bl	8001608 <_exit>
	...

08005be8 <__assert_func>:
 8005be8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8005bea:	0014      	movs	r4, r2
 8005bec:	001a      	movs	r2, r3
 8005bee:	4b09      	ldr	r3, [pc, #36]	@ (8005c14 <__assert_func+0x2c>)
 8005bf0:	0005      	movs	r5, r0
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	000e      	movs	r6, r1
 8005bf6:	68d8      	ldr	r0, [r3, #12]
 8005bf8:	4b07      	ldr	r3, [pc, #28]	@ (8005c18 <__assert_func+0x30>)
 8005bfa:	2c00      	cmp	r4, #0
 8005bfc:	d101      	bne.n	8005c02 <__assert_func+0x1a>
 8005bfe:	4b07      	ldr	r3, [pc, #28]	@ (8005c1c <__assert_func+0x34>)
 8005c00:	001c      	movs	r4, r3
 8005c02:	4907      	ldr	r1, [pc, #28]	@ (8005c20 <__assert_func+0x38>)
 8005c04:	9301      	str	r3, [sp, #4]
 8005c06:	9402      	str	r4, [sp, #8]
 8005c08:	002b      	movs	r3, r5
 8005c0a:	9600      	str	r6, [sp, #0]
 8005c0c:	f000 fcf4 	bl	80065f8 <fiprintf>
 8005c10:	f7ff ffe2 	bl	8005bd8 <abort>
 8005c14:	20000018 	.word	0x20000018
 8005c18:	08007e14 	.word	0x08007e14
 8005c1c:	08007e4f 	.word	0x08007e4f
 8005c20:	08007e21 	.word	0x08007e21

08005c24 <atexit>:
 8005c24:	2300      	movs	r3, #0
 8005c26:	b510      	push	{r4, lr}
 8005c28:	0001      	movs	r1, r0
 8005c2a:	001a      	movs	r2, r3
 8005c2c:	0018      	movs	r0, r3
 8005c2e:	f000 ff0f 	bl	8006a50 <__register_exitproc>
 8005c32:	bd10      	pop	{r4, pc}

08005c34 <malloc>:
 8005c34:	b510      	push	{r4, lr}
 8005c36:	4b03      	ldr	r3, [pc, #12]	@ (8005c44 <malloc+0x10>)
 8005c38:	0001      	movs	r1, r0
 8005c3a:	6818      	ldr	r0, [r3, #0]
 8005c3c:	f000 f830 	bl	8005ca0 <_malloc_r>
 8005c40:	bd10      	pop	{r4, pc}
 8005c42:	46c0      	nop			@ (mov r8, r8)
 8005c44:	20000018 	.word	0x20000018

08005c48 <free>:
 8005c48:	b510      	push	{r4, lr}
 8005c4a:	4b03      	ldr	r3, [pc, #12]	@ (8005c58 <free+0x10>)
 8005c4c:	0001      	movs	r1, r0
 8005c4e:	6818      	ldr	r0, [r3, #0]
 8005c50:	f000 ff5e 	bl	8006b10 <_free_r>
 8005c54:	bd10      	pop	{r4, pc}
 8005c56:	46c0      	nop			@ (mov r8, r8)
 8005c58:	20000018 	.word	0x20000018

08005c5c <sbrk_aligned>:
 8005c5c:	b570      	push	{r4, r5, r6, lr}
 8005c5e:	4e0f      	ldr	r6, [pc, #60]	@ (8005c9c <sbrk_aligned+0x40>)
 8005c60:	000d      	movs	r5, r1
 8005c62:	6831      	ldr	r1, [r6, #0]
 8005c64:	0004      	movs	r4, r0
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d102      	bne.n	8005c70 <sbrk_aligned+0x14>
 8005c6a:	f000 fe89 	bl	8006980 <_sbrk_r>
 8005c6e:	6030      	str	r0, [r6, #0]
 8005c70:	0029      	movs	r1, r5
 8005c72:	0020      	movs	r0, r4
 8005c74:	f000 fe84 	bl	8006980 <_sbrk_r>
 8005c78:	1c43      	adds	r3, r0, #1
 8005c7a:	d103      	bne.n	8005c84 <sbrk_aligned+0x28>
 8005c7c:	2501      	movs	r5, #1
 8005c7e:	426d      	negs	r5, r5
 8005c80:	0028      	movs	r0, r5
 8005c82:	bd70      	pop	{r4, r5, r6, pc}
 8005c84:	2303      	movs	r3, #3
 8005c86:	1cc5      	adds	r5, r0, #3
 8005c88:	439d      	bics	r5, r3
 8005c8a:	42a8      	cmp	r0, r5
 8005c8c:	d0f8      	beq.n	8005c80 <sbrk_aligned+0x24>
 8005c8e:	1a29      	subs	r1, r5, r0
 8005c90:	0020      	movs	r0, r4
 8005c92:	f000 fe75 	bl	8006980 <_sbrk_r>
 8005c96:	3001      	adds	r0, #1
 8005c98:	d1f2      	bne.n	8005c80 <sbrk_aligned+0x24>
 8005c9a:	e7ef      	b.n	8005c7c <sbrk_aligned+0x20>
 8005c9c:	200003f0 	.word	0x200003f0

08005ca0 <_malloc_r>:
 8005ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ca2:	2203      	movs	r2, #3
 8005ca4:	1ccb      	adds	r3, r1, #3
 8005ca6:	4393      	bics	r3, r2
 8005ca8:	3308      	adds	r3, #8
 8005caa:	0005      	movs	r5, r0
 8005cac:	001f      	movs	r7, r3
 8005cae:	2b0c      	cmp	r3, #12
 8005cb0:	d234      	bcs.n	8005d1c <_malloc_r+0x7c>
 8005cb2:	270c      	movs	r7, #12
 8005cb4:	42b9      	cmp	r1, r7
 8005cb6:	d833      	bhi.n	8005d20 <_malloc_r+0x80>
 8005cb8:	0028      	movs	r0, r5
 8005cba:	f000 f871 	bl	8005da0 <__malloc_lock>
 8005cbe:	4e37      	ldr	r6, [pc, #220]	@ (8005d9c <_malloc_r+0xfc>)
 8005cc0:	6833      	ldr	r3, [r6, #0]
 8005cc2:	001c      	movs	r4, r3
 8005cc4:	2c00      	cmp	r4, #0
 8005cc6:	d12f      	bne.n	8005d28 <_malloc_r+0x88>
 8005cc8:	0039      	movs	r1, r7
 8005cca:	0028      	movs	r0, r5
 8005ccc:	f7ff ffc6 	bl	8005c5c <sbrk_aligned>
 8005cd0:	0004      	movs	r4, r0
 8005cd2:	1c43      	adds	r3, r0, #1
 8005cd4:	d15f      	bne.n	8005d96 <_malloc_r+0xf6>
 8005cd6:	6834      	ldr	r4, [r6, #0]
 8005cd8:	9400      	str	r4, [sp, #0]
 8005cda:	9b00      	ldr	r3, [sp, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d14a      	bne.n	8005d76 <_malloc_r+0xd6>
 8005ce0:	2c00      	cmp	r4, #0
 8005ce2:	d052      	beq.n	8005d8a <_malloc_r+0xea>
 8005ce4:	6823      	ldr	r3, [r4, #0]
 8005ce6:	0028      	movs	r0, r5
 8005ce8:	18e3      	adds	r3, r4, r3
 8005cea:	9900      	ldr	r1, [sp, #0]
 8005cec:	9301      	str	r3, [sp, #4]
 8005cee:	f000 fe47 	bl	8006980 <_sbrk_r>
 8005cf2:	9b01      	ldr	r3, [sp, #4]
 8005cf4:	4283      	cmp	r3, r0
 8005cf6:	d148      	bne.n	8005d8a <_malloc_r+0xea>
 8005cf8:	6823      	ldr	r3, [r4, #0]
 8005cfa:	0028      	movs	r0, r5
 8005cfc:	1aff      	subs	r7, r7, r3
 8005cfe:	0039      	movs	r1, r7
 8005d00:	f7ff ffac 	bl	8005c5c <sbrk_aligned>
 8005d04:	3001      	adds	r0, #1
 8005d06:	d040      	beq.n	8005d8a <_malloc_r+0xea>
 8005d08:	6823      	ldr	r3, [r4, #0]
 8005d0a:	19db      	adds	r3, r3, r7
 8005d0c:	6023      	str	r3, [r4, #0]
 8005d0e:	6833      	ldr	r3, [r6, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	2a00      	cmp	r2, #0
 8005d14:	d133      	bne.n	8005d7e <_malloc_r+0xde>
 8005d16:	9b00      	ldr	r3, [sp, #0]
 8005d18:	6033      	str	r3, [r6, #0]
 8005d1a:	e019      	b.n	8005d50 <_malloc_r+0xb0>
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	dac9      	bge.n	8005cb4 <_malloc_r+0x14>
 8005d20:	230c      	movs	r3, #12
 8005d22:	602b      	str	r3, [r5, #0]
 8005d24:	2000      	movs	r0, #0
 8005d26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8005d28:	6821      	ldr	r1, [r4, #0]
 8005d2a:	1bc9      	subs	r1, r1, r7
 8005d2c:	d420      	bmi.n	8005d70 <_malloc_r+0xd0>
 8005d2e:	290b      	cmp	r1, #11
 8005d30:	d90a      	bls.n	8005d48 <_malloc_r+0xa8>
 8005d32:	19e2      	adds	r2, r4, r7
 8005d34:	6027      	str	r7, [r4, #0]
 8005d36:	42a3      	cmp	r3, r4
 8005d38:	d104      	bne.n	8005d44 <_malloc_r+0xa4>
 8005d3a:	6032      	str	r2, [r6, #0]
 8005d3c:	6863      	ldr	r3, [r4, #4]
 8005d3e:	6011      	str	r1, [r2, #0]
 8005d40:	6053      	str	r3, [r2, #4]
 8005d42:	e005      	b.n	8005d50 <_malloc_r+0xb0>
 8005d44:	605a      	str	r2, [r3, #4]
 8005d46:	e7f9      	b.n	8005d3c <_malloc_r+0x9c>
 8005d48:	6862      	ldr	r2, [r4, #4]
 8005d4a:	42a3      	cmp	r3, r4
 8005d4c:	d10e      	bne.n	8005d6c <_malloc_r+0xcc>
 8005d4e:	6032      	str	r2, [r6, #0]
 8005d50:	0028      	movs	r0, r5
 8005d52:	f000 f82d 	bl	8005db0 <__malloc_unlock>
 8005d56:	0020      	movs	r0, r4
 8005d58:	2207      	movs	r2, #7
 8005d5a:	300b      	adds	r0, #11
 8005d5c:	1d23      	adds	r3, r4, #4
 8005d5e:	4390      	bics	r0, r2
 8005d60:	1ac2      	subs	r2, r0, r3
 8005d62:	4298      	cmp	r0, r3
 8005d64:	d0df      	beq.n	8005d26 <_malloc_r+0x86>
 8005d66:	1a1b      	subs	r3, r3, r0
 8005d68:	50a3      	str	r3, [r4, r2]
 8005d6a:	e7dc      	b.n	8005d26 <_malloc_r+0x86>
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	e7ef      	b.n	8005d50 <_malloc_r+0xb0>
 8005d70:	0023      	movs	r3, r4
 8005d72:	6864      	ldr	r4, [r4, #4]
 8005d74:	e7a6      	b.n	8005cc4 <_malloc_r+0x24>
 8005d76:	9c00      	ldr	r4, [sp, #0]
 8005d78:	6863      	ldr	r3, [r4, #4]
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	e7ad      	b.n	8005cda <_malloc_r+0x3a>
 8005d7e:	001a      	movs	r2, r3
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	42a3      	cmp	r3, r4
 8005d84:	d1fb      	bne.n	8005d7e <_malloc_r+0xde>
 8005d86:	2300      	movs	r3, #0
 8005d88:	e7da      	b.n	8005d40 <_malloc_r+0xa0>
 8005d8a:	230c      	movs	r3, #12
 8005d8c:	0028      	movs	r0, r5
 8005d8e:	602b      	str	r3, [r5, #0]
 8005d90:	f000 f80e 	bl	8005db0 <__malloc_unlock>
 8005d94:	e7c6      	b.n	8005d24 <_malloc_r+0x84>
 8005d96:	6007      	str	r7, [r0, #0]
 8005d98:	e7da      	b.n	8005d50 <_malloc_r+0xb0>
 8005d9a:	46c0      	nop			@ (mov r8, r8)
 8005d9c:	200003f4 	.word	0x200003f4

08005da0 <__malloc_lock>:
 8005da0:	b510      	push	{r4, lr}
 8005da2:	4802      	ldr	r0, [pc, #8]	@ (8005dac <__malloc_lock+0xc>)
 8005da4:	f000 fe3d 	bl	8006a22 <__retarget_lock_acquire_recursive>
 8005da8:	bd10      	pop	{r4, pc}
 8005daa:	46c0      	nop			@ (mov r8, r8)
 8005dac:	20000538 	.word	0x20000538

08005db0 <__malloc_unlock>:
 8005db0:	b510      	push	{r4, lr}
 8005db2:	4802      	ldr	r0, [pc, #8]	@ (8005dbc <__malloc_unlock+0xc>)
 8005db4:	f000 fe36 	bl	8006a24 <__retarget_lock_release_recursive>
 8005db8:	bd10      	pop	{r4, pc}
 8005dba:	46c0      	nop			@ (mov r8, r8)
 8005dbc:	20000538 	.word	0x20000538

08005dc0 <__sfputc_r>:
 8005dc0:	6893      	ldr	r3, [r2, #8]
 8005dc2:	b510      	push	{r4, lr}
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	6093      	str	r3, [r2, #8]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	da04      	bge.n	8005dd6 <__sfputc_r+0x16>
 8005dcc:	6994      	ldr	r4, [r2, #24]
 8005dce:	42a3      	cmp	r3, r4
 8005dd0:	db07      	blt.n	8005de2 <__sfputc_r+0x22>
 8005dd2:	290a      	cmp	r1, #10
 8005dd4:	d005      	beq.n	8005de2 <__sfputc_r+0x22>
 8005dd6:	6813      	ldr	r3, [r2, #0]
 8005dd8:	1c58      	adds	r0, r3, #1
 8005dda:	6010      	str	r0, [r2, #0]
 8005ddc:	7019      	strb	r1, [r3, #0]
 8005dde:	0008      	movs	r0, r1
 8005de0:	bd10      	pop	{r4, pc}
 8005de2:	f000 fc81 	bl	80066e8 <__swbuf_r>
 8005de6:	0001      	movs	r1, r0
 8005de8:	e7f9      	b.n	8005dde <__sfputc_r+0x1e>

08005dea <__sfputs_r>:
 8005dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dec:	0006      	movs	r6, r0
 8005dee:	000f      	movs	r7, r1
 8005df0:	0014      	movs	r4, r2
 8005df2:	18d5      	adds	r5, r2, r3
 8005df4:	42ac      	cmp	r4, r5
 8005df6:	d101      	bne.n	8005dfc <__sfputs_r+0x12>
 8005df8:	2000      	movs	r0, #0
 8005dfa:	e007      	b.n	8005e0c <__sfputs_r+0x22>
 8005dfc:	7821      	ldrb	r1, [r4, #0]
 8005dfe:	003a      	movs	r2, r7
 8005e00:	0030      	movs	r0, r6
 8005e02:	f7ff ffdd 	bl	8005dc0 <__sfputc_r>
 8005e06:	3401      	adds	r4, #1
 8005e08:	1c43      	adds	r3, r0, #1
 8005e0a:	d1f3      	bne.n	8005df4 <__sfputs_r+0xa>
 8005e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005e10 <_vfiprintf_r>:
 8005e10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e12:	b0a1      	sub	sp, #132	@ 0x84
 8005e14:	000f      	movs	r7, r1
 8005e16:	0015      	movs	r5, r2
 8005e18:	001e      	movs	r6, r3
 8005e1a:	9003      	str	r0, [sp, #12]
 8005e1c:	2800      	cmp	r0, #0
 8005e1e:	d004      	beq.n	8005e2a <_vfiprintf_r+0x1a>
 8005e20:	6a03      	ldr	r3, [r0, #32]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d101      	bne.n	8005e2a <_vfiprintf_r+0x1a>
 8005e26:	f000 fbcf 	bl	80065c8 <__sinit>
 8005e2a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e2c:	07db      	lsls	r3, r3, #31
 8005e2e:	d405      	bmi.n	8005e3c <_vfiprintf_r+0x2c>
 8005e30:	89bb      	ldrh	r3, [r7, #12]
 8005e32:	059b      	lsls	r3, r3, #22
 8005e34:	d402      	bmi.n	8005e3c <_vfiprintf_r+0x2c>
 8005e36:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005e38:	f000 fdf3 	bl	8006a22 <__retarget_lock_acquire_recursive>
 8005e3c:	89bb      	ldrh	r3, [r7, #12]
 8005e3e:	071b      	lsls	r3, r3, #28
 8005e40:	d502      	bpl.n	8005e48 <_vfiprintf_r+0x38>
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d113      	bne.n	8005e70 <_vfiprintf_r+0x60>
 8005e48:	0039      	movs	r1, r7
 8005e4a:	9803      	ldr	r0, [sp, #12]
 8005e4c:	f000 fc8e 	bl	800676c <__swsetup_r>
 8005e50:	2800      	cmp	r0, #0
 8005e52:	d00d      	beq.n	8005e70 <_vfiprintf_r+0x60>
 8005e54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005e56:	07db      	lsls	r3, r3, #31
 8005e58:	d503      	bpl.n	8005e62 <_vfiprintf_r+0x52>
 8005e5a:	2001      	movs	r0, #1
 8005e5c:	4240      	negs	r0, r0
 8005e5e:	b021      	add	sp, #132	@ 0x84
 8005e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e62:	89bb      	ldrh	r3, [r7, #12]
 8005e64:	059b      	lsls	r3, r3, #22
 8005e66:	d4f8      	bmi.n	8005e5a <_vfiprintf_r+0x4a>
 8005e68:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8005e6a:	f000 fddb 	bl	8006a24 <__retarget_lock_release_recursive>
 8005e6e:	e7f4      	b.n	8005e5a <_vfiprintf_r+0x4a>
 8005e70:	2300      	movs	r3, #0
 8005e72:	ac08      	add	r4, sp, #32
 8005e74:	6163      	str	r3, [r4, #20]
 8005e76:	3320      	adds	r3, #32
 8005e78:	7663      	strb	r3, [r4, #25]
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	76a3      	strb	r3, [r4, #26]
 8005e7e:	9607      	str	r6, [sp, #28]
 8005e80:	002e      	movs	r6, r5
 8005e82:	7833      	ldrb	r3, [r6, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d001      	beq.n	8005e8c <_vfiprintf_r+0x7c>
 8005e88:	2b25      	cmp	r3, #37	@ 0x25
 8005e8a:	d148      	bne.n	8005f1e <_vfiprintf_r+0x10e>
 8005e8c:	1b73      	subs	r3, r6, r5
 8005e8e:	9305      	str	r3, [sp, #20]
 8005e90:	42ae      	cmp	r6, r5
 8005e92:	d00b      	beq.n	8005eac <_vfiprintf_r+0x9c>
 8005e94:	002a      	movs	r2, r5
 8005e96:	0039      	movs	r1, r7
 8005e98:	9803      	ldr	r0, [sp, #12]
 8005e9a:	f7ff ffa6 	bl	8005dea <__sfputs_r>
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d100      	bne.n	8005ea4 <_vfiprintf_r+0x94>
 8005ea2:	e0ae      	b.n	8006002 <_vfiprintf_r+0x1f2>
 8005ea4:	6963      	ldr	r3, [r4, #20]
 8005ea6:	9a05      	ldr	r2, [sp, #20]
 8005ea8:	189b      	adds	r3, r3, r2
 8005eaa:	6163      	str	r3, [r4, #20]
 8005eac:	7833      	ldrb	r3, [r6, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d100      	bne.n	8005eb4 <_vfiprintf_r+0xa4>
 8005eb2:	e0a6      	b.n	8006002 <_vfiprintf_r+0x1f2>
 8005eb4:	2201      	movs	r2, #1
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	4252      	negs	r2, r2
 8005eba:	6062      	str	r2, [r4, #4]
 8005ebc:	a904      	add	r1, sp, #16
 8005ebe:	3254      	adds	r2, #84	@ 0x54
 8005ec0:	1852      	adds	r2, r2, r1
 8005ec2:	1c75      	adds	r5, r6, #1
 8005ec4:	6023      	str	r3, [r4, #0]
 8005ec6:	60e3      	str	r3, [r4, #12]
 8005ec8:	60a3      	str	r3, [r4, #8]
 8005eca:	7013      	strb	r3, [r2, #0]
 8005ecc:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005ece:	4b59      	ldr	r3, [pc, #356]	@ (8006034 <_vfiprintf_r+0x224>)
 8005ed0:	2205      	movs	r2, #5
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	7829      	ldrb	r1, [r5, #0]
 8005ed6:	9305      	str	r3, [sp, #20]
 8005ed8:	f000 fda5 	bl	8006a26 <memchr>
 8005edc:	1c6e      	adds	r6, r5, #1
 8005ede:	2800      	cmp	r0, #0
 8005ee0:	d11f      	bne.n	8005f22 <_vfiprintf_r+0x112>
 8005ee2:	6822      	ldr	r2, [r4, #0]
 8005ee4:	06d3      	lsls	r3, r2, #27
 8005ee6:	d504      	bpl.n	8005ef2 <_vfiprintf_r+0xe2>
 8005ee8:	2353      	movs	r3, #83	@ 0x53
 8005eea:	a904      	add	r1, sp, #16
 8005eec:	185b      	adds	r3, r3, r1
 8005eee:	2120      	movs	r1, #32
 8005ef0:	7019      	strb	r1, [r3, #0]
 8005ef2:	0713      	lsls	r3, r2, #28
 8005ef4:	d504      	bpl.n	8005f00 <_vfiprintf_r+0xf0>
 8005ef6:	2353      	movs	r3, #83	@ 0x53
 8005ef8:	a904      	add	r1, sp, #16
 8005efa:	185b      	adds	r3, r3, r1
 8005efc:	212b      	movs	r1, #43	@ 0x2b
 8005efe:	7019      	strb	r1, [r3, #0]
 8005f00:	782b      	ldrb	r3, [r5, #0]
 8005f02:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f04:	d016      	beq.n	8005f34 <_vfiprintf_r+0x124>
 8005f06:	002e      	movs	r6, r5
 8005f08:	2100      	movs	r1, #0
 8005f0a:	200a      	movs	r0, #10
 8005f0c:	68e3      	ldr	r3, [r4, #12]
 8005f0e:	7832      	ldrb	r2, [r6, #0]
 8005f10:	1c75      	adds	r5, r6, #1
 8005f12:	3a30      	subs	r2, #48	@ 0x30
 8005f14:	2a09      	cmp	r2, #9
 8005f16:	d950      	bls.n	8005fba <_vfiprintf_r+0x1aa>
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	d111      	bne.n	8005f40 <_vfiprintf_r+0x130>
 8005f1c:	e017      	b.n	8005f4e <_vfiprintf_r+0x13e>
 8005f1e:	3601      	adds	r6, #1
 8005f20:	e7af      	b.n	8005e82 <_vfiprintf_r+0x72>
 8005f22:	9b05      	ldr	r3, [sp, #20]
 8005f24:	6822      	ldr	r2, [r4, #0]
 8005f26:	1ac0      	subs	r0, r0, r3
 8005f28:	2301      	movs	r3, #1
 8005f2a:	4083      	lsls	r3, r0
 8005f2c:	4313      	orrs	r3, r2
 8005f2e:	0035      	movs	r5, r6
 8005f30:	6023      	str	r3, [r4, #0]
 8005f32:	e7cc      	b.n	8005ece <_vfiprintf_r+0xbe>
 8005f34:	9b07      	ldr	r3, [sp, #28]
 8005f36:	1d19      	adds	r1, r3, #4
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	9107      	str	r1, [sp, #28]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	db01      	blt.n	8005f44 <_vfiprintf_r+0x134>
 8005f40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005f42:	e004      	b.n	8005f4e <_vfiprintf_r+0x13e>
 8005f44:	425b      	negs	r3, r3
 8005f46:	60e3      	str	r3, [r4, #12]
 8005f48:	2302      	movs	r3, #2
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	7833      	ldrb	r3, [r6, #0]
 8005f50:	2b2e      	cmp	r3, #46	@ 0x2e
 8005f52:	d10c      	bne.n	8005f6e <_vfiprintf_r+0x15e>
 8005f54:	7873      	ldrb	r3, [r6, #1]
 8005f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f58:	d134      	bne.n	8005fc4 <_vfiprintf_r+0x1b4>
 8005f5a:	9b07      	ldr	r3, [sp, #28]
 8005f5c:	3602      	adds	r6, #2
 8005f5e:	1d1a      	adds	r2, r3, #4
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	9207      	str	r2, [sp, #28]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	da01      	bge.n	8005f6c <_vfiprintf_r+0x15c>
 8005f68:	2301      	movs	r3, #1
 8005f6a:	425b      	negs	r3, r3
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f6e:	4d32      	ldr	r5, [pc, #200]	@ (8006038 <_vfiprintf_r+0x228>)
 8005f70:	2203      	movs	r2, #3
 8005f72:	0028      	movs	r0, r5
 8005f74:	7831      	ldrb	r1, [r6, #0]
 8005f76:	f000 fd56 	bl	8006a26 <memchr>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d006      	beq.n	8005f8c <_vfiprintf_r+0x17c>
 8005f7e:	2340      	movs	r3, #64	@ 0x40
 8005f80:	1b40      	subs	r0, r0, r5
 8005f82:	4083      	lsls	r3, r0
 8005f84:	6822      	ldr	r2, [r4, #0]
 8005f86:	3601      	adds	r6, #1
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	6023      	str	r3, [r4, #0]
 8005f8c:	7831      	ldrb	r1, [r6, #0]
 8005f8e:	2206      	movs	r2, #6
 8005f90:	482a      	ldr	r0, [pc, #168]	@ (800603c <_vfiprintf_r+0x22c>)
 8005f92:	1c75      	adds	r5, r6, #1
 8005f94:	7621      	strb	r1, [r4, #24]
 8005f96:	f000 fd46 	bl	8006a26 <memchr>
 8005f9a:	2800      	cmp	r0, #0
 8005f9c:	d040      	beq.n	8006020 <_vfiprintf_r+0x210>
 8005f9e:	4b28      	ldr	r3, [pc, #160]	@ (8006040 <_vfiprintf_r+0x230>)
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d122      	bne.n	8005fea <_vfiprintf_r+0x1da>
 8005fa4:	2207      	movs	r2, #7
 8005fa6:	9b07      	ldr	r3, [sp, #28]
 8005fa8:	3307      	adds	r3, #7
 8005faa:	4393      	bics	r3, r2
 8005fac:	3308      	adds	r3, #8
 8005fae:	9307      	str	r3, [sp, #28]
 8005fb0:	6963      	ldr	r3, [r4, #20]
 8005fb2:	9a04      	ldr	r2, [sp, #16]
 8005fb4:	189b      	adds	r3, r3, r2
 8005fb6:	6163      	str	r3, [r4, #20]
 8005fb8:	e762      	b.n	8005e80 <_vfiprintf_r+0x70>
 8005fba:	4343      	muls	r3, r0
 8005fbc:	002e      	movs	r6, r5
 8005fbe:	2101      	movs	r1, #1
 8005fc0:	189b      	adds	r3, r3, r2
 8005fc2:	e7a4      	b.n	8005f0e <_vfiprintf_r+0xfe>
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	200a      	movs	r0, #10
 8005fc8:	0019      	movs	r1, r3
 8005fca:	3601      	adds	r6, #1
 8005fcc:	6063      	str	r3, [r4, #4]
 8005fce:	7832      	ldrb	r2, [r6, #0]
 8005fd0:	1c75      	adds	r5, r6, #1
 8005fd2:	3a30      	subs	r2, #48	@ 0x30
 8005fd4:	2a09      	cmp	r2, #9
 8005fd6:	d903      	bls.n	8005fe0 <_vfiprintf_r+0x1d0>
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d0c8      	beq.n	8005f6e <_vfiprintf_r+0x15e>
 8005fdc:	9109      	str	r1, [sp, #36]	@ 0x24
 8005fde:	e7c6      	b.n	8005f6e <_vfiprintf_r+0x15e>
 8005fe0:	4341      	muls	r1, r0
 8005fe2:	002e      	movs	r6, r5
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	1889      	adds	r1, r1, r2
 8005fe8:	e7f1      	b.n	8005fce <_vfiprintf_r+0x1be>
 8005fea:	aa07      	add	r2, sp, #28
 8005fec:	9200      	str	r2, [sp, #0]
 8005fee:	0021      	movs	r1, r4
 8005ff0:	003a      	movs	r2, r7
 8005ff2:	4b14      	ldr	r3, [pc, #80]	@ (8006044 <_vfiprintf_r+0x234>)
 8005ff4:	9803      	ldr	r0, [sp, #12]
 8005ff6:	e000      	b.n	8005ffa <_vfiprintf_r+0x1ea>
 8005ff8:	bf00      	nop
 8005ffa:	9004      	str	r0, [sp, #16]
 8005ffc:	9b04      	ldr	r3, [sp, #16]
 8005ffe:	3301      	adds	r3, #1
 8006000:	d1d6      	bne.n	8005fb0 <_vfiprintf_r+0x1a0>
 8006002:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006004:	07db      	lsls	r3, r3, #31
 8006006:	d405      	bmi.n	8006014 <_vfiprintf_r+0x204>
 8006008:	89bb      	ldrh	r3, [r7, #12]
 800600a:	059b      	lsls	r3, r3, #22
 800600c:	d402      	bmi.n	8006014 <_vfiprintf_r+0x204>
 800600e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8006010:	f000 fd08 	bl	8006a24 <__retarget_lock_release_recursive>
 8006014:	89bb      	ldrh	r3, [r7, #12]
 8006016:	065b      	lsls	r3, r3, #25
 8006018:	d500      	bpl.n	800601c <_vfiprintf_r+0x20c>
 800601a:	e71e      	b.n	8005e5a <_vfiprintf_r+0x4a>
 800601c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800601e:	e71e      	b.n	8005e5e <_vfiprintf_r+0x4e>
 8006020:	aa07      	add	r2, sp, #28
 8006022:	9200      	str	r2, [sp, #0]
 8006024:	0021      	movs	r1, r4
 8006026:	003a      	movs	r2, r7
 8006028:	4b06      	ldr	r3, [pc, #24]	@ (8006044 <_vfiprintf_r+0x234>)
 800602a:	9803      	ldr	r0, [sp, #12]
 800602c:	f000 f87c 	bl	8006128 <_printf_i>
 8006030:	e7e3      	b.n	8005ffa <_vfiprintf_r+0x1ea>
 8006032:	46c0      	nop			@ (mov r8, r8)
 8006034:	08007e50 	.word	0x08007e50
 8006038:	08007e56 	.word	0x08007e56
 800603c:	08007e5a 	.word	0x08007e5a
 8006040:	00000000 	.word	0x00000000
 8006044:	08005deb 	.word	0x08005deb

08006048 <_printf_common>:
 8006048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800604a:	0016      	movs	r6, r2
 800604c:	9301      	str	r3, [sp, #4]
 800604e:	688a      	ldr	r2, [r1, #8]
 8006050:	690b      	ldr	r3, [r1, #16]
 8006052:	000c      	movs	r4, r1
 8006054:	9000      	str	r0, [sp, #0]
 8006056:	4293      	cmp	r3, r2
 8006058:	da00      	bge.n	800605c <_printf_common+0x14>
 800605a:	0013      	movs	r3, r2
 800605c:	0022      	movs	r2, r4
 800605e:	6033      	str	r3, [r6, #0]
 8006060:	3243      	adds	r2, #67	@ 0x43
 8006062:	7812      	ldrb	r2, [r2, #0]
 8006064:	2a00      	cmp	r2, #0
 8006066:	d001      	beq.n	800606c <_printf_common+0x24>
 8006068:	3301      	adds	r3, #1
 800606a:	6033      	str	r3, [r6, #0]
 800606c:	6823      	ldr	r3, [r4, #0]
 800606e:	069b      	lsls	r3, r3, #26
 8006070:	d502      	bpl.n	8006078 <_printf_common+0x30>
 8006072:	6833      	ldr	r3, [r6, #0]
 8006074:	3302      	adds	r3, #2
 8006076:	6033      	str	r3, [r6, #0]
 8006078:	6822      	ldr	r2, [r4, #0]
 800607a:	2306      	movs	r3, #6
 800607c:	0015      	movs	r5, r2
 800607e:	401d      	ands	r5, r3
 8006080:	421a      	tst	r2, r3
 8006082:	d027      	beq.n	80060d4 <_printf_common+0x8c>
 8006084:	0023      	movs	r3, r4
 8006086:	3343      	adds	r3, #67	@ 0x43
 8006088:	781b      	ldrb	r3, [r3, #0]
 800608a:	1e5a      	subs	r2, r3, #1
 800608c:	4193      	sbcs	r3, r2
 800608e:	6822      	ldr	r2, [r4, #0]
 8006090:	0692      	lsls	r2, r2, #26
 8006092:	d430      	bmi.n	80060f6 <_printf_common+0xae>
 8006094:	0022      	movs	r2, r4
 8006096:	9901      	ldr	r1, [sp, #4]
 8006098:	9800      	ldr	r0, [sp, #0]
 800609a:	9d08      	ldr	r5, [sp, #32]
 800609c:	3243      	adds	r2, #67	@ 0x43
 800609e:	47a8      	blx	r5
 80060a0:	3001      	adds	r0, #1
 80060a2:	d025      	beq.n	80060f0 <_printf_common+0xa8>
 80060a4:	2206      	movs	r2, #6
 80060a6:	6823      	ldr	r3, [r4, #0]
 80060a8:	2500      	movs	r5, #0
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b04      	cmp	r3, #4
 80060ae:	d105      	bne.n	80060bc <_printf_common+0x74>
 80060b0:	6833      	ldr	r3, [r6, #0]
 80060b2:	68e5      	ldr	r5, [r4, #12]
 80060b4:	1aed      	subs	r5, r5, r3
 80060b6:	43eb      	mvns	r3, r5
 80060b8:	17db      	asrs	r3, r3, #31
 80060ba:	401d      	ands	r5, r3
 80060bc:	68a3      	ldr	r3, [r4, #8]
 80060be:	6922      	ldr	r2, [r4, #16]
 80060c0:	4293      	cmp	r3, r2
 80060c2:	dd01      	ble.n	80060c8 <_printf_common+0x80>
 80060c4:	1a9b      	subs	r3, r3, r2
 80060c6:	18ed      	adds	r5, r5, r3
 80060c8:	2600      	movs	r6, #0
 80060ca:	42b5      	cmp	r5, r6
 80060cc:	d120      	bne.n	8006110 <_printf_common+0xc8>
 80060ce:	2000      	movs	r0, #0
 80060d0:	e010      	b.n	80060f4 <_printf_common+0xac>
 80060d2:	3501      	adds	r5, #1
 80060d4:	68e3      	ldr	r3, [r4, #12]
 80060d6:	6832      	ldr	r2, [r6, #0]
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	42ab      	cmp	r3, r5
 80060dc:	ddd2      	ble.n	8006084 <_printf_common+0x3c>
 80060de:	0022      	movs	r2, r4
 80060e0:	2301      	movs	r3, #1
 80060e2:	9901      	ldr	r1, [sp, #4]
 80060e4:	9800      	ldr	r0, [sp, #0]
 80060e6:	9f08      	ldr	r7, [sp, #32]
 80060e8:	3219      	adds	r2, #25
 80060ea:	47b8      	blx	r7
 80060ec:	3001      	adds	r0, #1
 80060ee:	d1f0      	bne.n	80060d2 <_printf_common+0x8a>
 80060f0:	2001      	movs	r0, #1
 80060f2:	4240      	negs	r0, r0
 80060f4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80060f6:	2030      	movs	r0, #48	@ 0x30
 80060f8:	18e1      	adds	r1, r4, r3
 80060fa:	3143      	adds	r1, #67	@ 0x43
 80060fc:	7008      	strb	r0, [r1, #0]
 80060fe:	0021      	movs	r1, r4
 8006100:	1c5a      	adds	r2, r3, #1
 8006102:	3145      	adds	r1, #69	@ 0x45
 8006104:	7809      	ldrb	r1, [r1, #0]
 8006106:	18a2      	adds	r2, r4, r2
 8006108:	3243      	adds	r2, #67	@ 0x43
 800610a:	3302      	adds	r3, #2
 800610c:	7011      	strb	r1, [r2, #0]
 800610e:	e7c1      	b.n	8006094 <_printf_common+0x4c>
 8006110:	0022      	movs	r2, r4
 8006112:	2301      	movs	r3, #1
 8006114:	9901      	ldr	r1, [sp, #4]
 8006116:	9800      	ldr	r0, [sp, #0]
 8006118:	9f08      	ldr	r7, [sp, #32]
 800611a:	321a      	adds	r2, #26
 800611c:	47b8      	blx	r7
 800611e:	3001      	adds	r0, #1
 8006120:	d0e6      	beq.n	80060f0 <_printf_common+0xa8>
 8006122:	3601      	adds	r6, #1
 8006124:	e7d1      	b.n	80060ca <_printf_common+0x82>
	...

08006128 <_printf_i>:
 8006128:	b5f0      	push	{r4, r5, r6, r7, lr}
 800612a:	b08b      	sub	sp, #44	@ 0x2c
 800612c:	9206      	str	r2, [sp, #24]
 800612e:	000a      	movs	r2, r1
 8006130:	3243      	adds	r2, #67	@ 0x43
 8006132:	9307      	str	r3, [sp, #28]
 8006134:	9005      	str	r0, [sp, #20]
 8006136:	9203      	str	r2, [sp, #12]
 8006138:	7e0a      	ldrb	r2, [r1, #24]
 800613a:	000c      	movs	r4, r1
 800613c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800613e:	2a78      	cmp	r2, #120	@ 0x78
 8006140:	d809      	bhi.n	8006156 <_printf_i+0x2e>
 8006142:	2a62      	cmp	r2, #98	@ 0x62
 8006144:	d80b      	bhi.n	800615e <_printf_i+0x36>
 8006146:	2a00      	cmp	r2, #0
 8006148:	d100      	bne.n	800614c <_printf_i+0x24>
 800614a:	e0bc      	b.n	80062c6 <_printf_i+0x19e>
 800614c:	497b      	ldr	r1, [pc, #492]	@ (800633c <_printf_i+0x214>)
 800614e:	9104      	str	r1, [sp, #16]
 8006150:	2a58      	cmp	r2, #88	@ 0x58
 8006152:	d100      	bne.n	8006156 <_printf_i+0x2e>
 8006154:	e090      	b.n	8006278 <_printf_i+0x150>
 8006156:	0025      	movs	r5, r4
 8006158:	3542      	adds	r5, #66	@ 0x42
 800615a:	702a      	strb	r2, [r5, #0]
 800615c:	e022      	b.n	80061a4 <_printf_i+0x7c>
 800615e:	0010      	movs	r0, r2
 8006160:	3863      	subs	r0, #99	@ 0x63
 8006162:	2815      	cmp	r0, #21
 8006164:	d8f7      	bhi.n	8006156 <_printf_i+0x2e>
 8006166:	f7f9 ffcb 	bl	8000100 <__gnu_thumb1_case_shi>
 800616a:	0016      	.short	0x0016
 800616c:	fff6001f 	.word	0xfff6001f
 8006170:	fff6fff6 	.word	0xfff6fff6
 8006174:	001ffff6 	.word	0x001ffff6
 8006178:	fff6fff6 	.word	0xfff6fff6
 800617c:	fff6fff6 	.word	0xfff6fff6
 8006180:	003600a1 	.word	0x003600a1
 8006184:	fff60080 	.word	0xfff60080
 8006188:	00b2fff6 	.word	0x00b2fff6
 800618c:	0036fff6 	.word	0x0036fff6
 8006190:	fff6fff6 	.word	0xfff6fff6
 8006194:	0084      	.short	0x0084
 8006196:	0025      	movs	r5, r4
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	3542      	adds	r5, #66	@ 0x42
 800619c:	1d11      	adds	r1, r2, #4
 800619e:	6019      	str	r1, [r3, #0]
 80061a0:	6813      	ldr	r3, [r2, #0]
 80061a2:	702b      	strb	r3, [r5, #0]
 80061a4:	2301      	movs	r3, #1
 80061a6:	e0a0      	b.n	80062ea <_printf_i+0x1c2>
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	6809      	ldr	r1, [r1, #0]
 80061ac:	1d02      	adds	r2, r0, #4
 80061ae:	060d      	lsls	r5, r1, #24
 80061b0:	d50b      	bpl.n	80061ca <_printf_i+0xa2>
 80061b2:	6806      	ldr	r6, [r0, #0]
 80061b4:	601a      	str	r2, [r3, #0]
 80061b6:	2e00      	cmp	r6, #0
 80061b8:	da03      	bge.n	80061c2 <_printf_i+0x9a>
 80061ba:	232d      	movs	r3, #45	@ 0x2d
 80061bc:	9a03      	ldr	r2, [sp, #12]
 80061be:	4276      	negs	r6, r6
 80061c0:	7013      	strb	r3, [r2, #0]
 80061c2:	4b5e      	ldr	r3, [pc, #376]	@ (800633c <_printf_i+0x214>)
 80061c4:	270a      	movs	r7, #10
 80061c6:	9304      	str	r3, [sp, #16]
 80061c8:	e018      	b.n	80061fc <_printf_i+0xd4>
 80061ca:	6806      	ldr	r6, [r0, #0]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	0649      	lsls	r1, r1, #25
 80061d0:	d5f1      	bpl.n	80061b6 <_printf_i+0x8e>
 80061d2:	b236      	sxth	r6, r6
 80061d4:	e7ef      	b.n	80061b6 <_printf_i+0x8e>
 80061d6:	6808      	ldr	r0, [r1, #0]
 80061d8:	6819      	ldr	r1, [r3, #0]
 80061da:	c940      	ldmia	r1!, {r6}
 80061dc:	0605      	lsls	r5, r0, #24
 80061de:	d402      	bmi.n	80061e6 <_printf_i+0xbe>
 80061e0:	0640      	lsls	r0, r0, #25
 80061e2:	d500      	bpl.n	80061e6 <_printf_i+0xbe>
 80061e4:	b2b6      	uxth	r6, r6
 80061e6:	6019      	str	r1, [r3, #0]
 80061e8:	4b54      	ldr	r3, [pc, #336]	@ (800633c <_printf_i+0x214>)
 80061ea:	270a      	movs	r7, #10
 80061ec:	9304      	str	r3, [sp, #16]
 80061ee:	2a6f      	cmp	r2, #111	@ 0x6f
 80061f0:	d100      	bne.n	80061f4 <_printf_i+0xcc>
 80061f2:	3f02      	subs	r7, #2
 80061f4:	0023      	movs	r3, r4
 80061f6:	2200      	movs	r2, #0
 80061f8:	3343      	adds	r3, #67	@ 0x43
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	6863      	ldr	r3, [r4, #4]
 80061fe:	60a3      	str	r3, [r4, #8]
 8006200:	2b00      	cmp	r3, #0
 8006202:	db03      	blt.n	800620c <_printf_i+0xe4>
 8006204:	2104      	movs	r1, #4
 8006206:	6822      	ldr	r2, [r4, #0]
 8006208:	438a      	bics	r2, r1
 800620a:	6022      	str	r2, [r4, #0]
 800620c:	2e00      	cmp	r6, #0
 800620e:	d102      	bne.n	8006216 <_printf_i+0xee>
 8006210:	9d03      	ldr	r5, [sp, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00c      	beq.n	8006230 <_printf_i+0x108>
 8006216:	9d03      	ldr	r5, [sp, #12]
 8006218:	0030      	movs	r0, r6
 800621a:	0039      	movs	r1, r7
 800621c:	f7fa f800 	bl	8000220 <__aeabi_uidivmod>
 8006220:	9b04      	ldr	r3, [sp, #16]
 8006222:	3d01      	subs	r5, #1
 8006224:	5c5b      	ldrb	r3, [r3, r1]
 8006226:	702b      	strb	r3, [r5, #0]
 8006228:	0033      	movs	r3, r6
 800622a:	0006      	movs	r6, r0
 800622c:	429f      	cmp	r7, r3
 800622e:	d9f3      	bls.n	8006218 <_printf_i+0xf0>
 8006230:	2f08      	cmp	r7, #8
 8006232:	d109      	bne.n	8006248 <_printf_i+0x120>
 8006234:	6823      	ldr	r3, [r4, #0]
 8006236:	07db      	lsls	r3, r3, #31
 8006238:	d506      	bpl.n	8006248 <_printf_i+0x120>
 800623a:	6862      	ldr	r2, [r4, #4]
 800623c:	6923      	ldr	r3, [r4, #16]
 800623e:	429a      	cmp	r2, r3
 8006240:	dc02      	bgt.n	8006248 <_printf_i+0x120>
 8006242:	2330      	movs	r3, #48	@ 0x30
 8006244:	3d01      	subs	r5, #1
 8006246:	702b      	strb	r3, [r5, #0]
 8006248:	9b03      	ldr	r3, [sp, #12]
 800624a:	1b5b      	subs	r3, r3, r5
 800624c:	6123      	str	r3, [r4, #16]
 800624e:	9b07      	ldr	r3, [sp, #28]
 8006250:	0021      	movs	r1, r4
 8006252:	9300      	str	r3, [sp, #0]
 8006254:	9805      	ldr	r0, [sp, #20]
 8006256:	9b06      	ldr	r3, [sp, #24]
 8006258:	aa09      	add	r2, sp, #36	@ 0x24
 800625a:	f7ff fef5 	bl	8006048 <_printf_common>
 800625e:	3001      	adds	r0, #1
 8006260:	d148      	bne.n	80062f4 <_printf_i+0x1cc>
 8006262:	2001      	movs	r0, #1
 8006264:	4240      	negs	r0, r0
 8006266:	b00b      	add	sp, #44	@ 0x2c
 8006268:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800626a:	2220      	movs	r2, #32
 800626c:	6809      	ldr	r1, [r1, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	6022      	str	r2, [r4, #0]
 8006272:	2278      	movs	r2, #120	@ 0x78
 8006274:	4932      	ldr	r1, [pc, #200]	@ (8006340 <_printf_i+0x218>)
 8006276:	9104      	str	r1, [sp, #16]
 8006278:	0021      	movs	r1, r4
 800627a:	3145      	adds	r1, #69	@ 0x45
 800627c:	700a      	strb	r2, [r1, #0]
 800627e:	6819      	ldr	r1, [r3, #0]
 8006280:	6822      	ldr	r2, [r4, #0]
 8006282:	c940      	ldmia	r1!, {r6}
 8006284:	0610      	lsls	r0, r2, #24
 8006286:	d402      	bmi.n	800628e <_printf_i+0x166>
 8006288:	0650      	lsls	r0, r2, #25
 800628a:	d500      	bpl.n	800628e <_printf_i+0x166>
 800628c:	b2b6      	uxth	r6, r6
 800628e:	6019      	str	r1, [r3, #0]
 8006290:	07d3      	lsls	r3, r2, #31
 8006292:	d502      	bpl.n	800629a <_printf_i+0x172>
 8006294:	2320      	movs	r3, #32
 8006296:	4313      	orrs	r3, r2
 8006298:	6023      	str	r3, [r4, #0]
 800629a:	2e00      	cmp	r6, #0
 800629c:	d001      	beq.n	80062a2 <_printf_i+0x17a>
 800629e:	2710      	movs	r7, #16
 80062a0:	e7a8      	b.n	80061f4 <_printf_i+0xcc>
 80062a2:	2220      	movs	r2, #32
 80062a4:	6823      	ldr	r3, [r4, #0]
 80062a6:	4393      	bics	r3, r2
 80062a8:	6023      	str	r3, [r4, #0]
 80062aa:	e7f8      	b.n	800629e <_printf_i+0x176>
 80062ac:	681a      	ldr	r2, [r3, #0]
 80062ae:	680d      	ldr	r5, [r1, #0]
 80062b0:	1d10      	adds	r0, r2, #4
 80062b2:	6949      	ldr	r1, [r1, #20]
 80062b4:	6018      	str	r0, [r3, #0]
 80062b6:	6813      	ldr	r3, [r2, #0]
 80062b8:	062e      	lsls	r6, r5, #24
 80062ba:	d501      	bpl.n	80062c0 <_printf_i+0x198>
 80062bc:	6019      	str	r1, [r3, #0]
 80062be:	e002      	b.n	80062c6 <_printf_i+0x19e>
 80062c0:	066d      	lsls	r5, r5, #25
 80062c2:	d5fb      	bpl.n	80062bc <_printf_i+0x194>
 80062c4:	8019      	strh	r1, [r3, #0]
 80062c6:	2300      	movs	r3, #0
 80062c8:	9d03      	ldr	r5, [sp, #12]
 80062ca:	6123      	str	r3, [r4, #16]
 80062cc:	e7bf      	b.n	800624e <_printf_i+0x126>
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	1d11      	adds	r1, r2, #4
 80062d2:	6019      	str	r1, [r3, #0]
 80062d4:	6815      	ldr	r5, [r2, #0]
 80062d6:	2100      	movs	r1, #0
 80062d8:	0028      	movs	r0, r5
 80062da:	6862      	ldr	r2, [r4, #4]
 80062dc:	f000 fba3 	bl	8006a26 <memchr>
 80062e0:	2800      	cmp	r0, #0
 80062e2:	d001      	beq.n	80062e8 <_printf_i+0x1c0>
 80062e4:	1b40      	subs	r0, r0, r5
 80062e6:	6060      	str	r0, [r4, #4]
 80062e8:	6863      	ldr	r3, [r4, #4]
 80062ea:	6123      	str	r3, [r4, #16]
 80062ec:	2300      	movs	r3, #0
 80062ee:	9a03      	ldr	r2, [sp, #12]
 80062f0:	7013      	strb	r3, [r2, #0]
 80062f2:	e7ac      	b.n	800624e <_printf_i+0x126>
 80062f4:	002a      	movs	r2, r5
 80062f6:	6923      	ldr	r3, [r4, #16]
 80062f8:	9906      	ldr	r1, [sp, #24]
 80062fa:	9805      	ldr	r0, [sp, #20]
 80062fc:	9d07      	ldr	r5, [sp, #28]
 80062fe:	47a8      	blx	r5
 8006300:	3001      	adds	r0, #1
 8006302:	d0ae      	beq.n	8006262 <_printf_i+0x13a>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	079b      	lsls	r3, r3, #30
 8006308:	d415      	bmi.n	8006336 <_printf_i+0x20e>
 800630a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800630c:	68e0      	ldr	r0, [r4, #12]
 800630e:	4298      	cmp	r0, r3
 8006310:	daa9      	bge.n	8006266 <_printf_i+0x13e>
 8006312:	0018      	movs	r0, r3
 8006314:	e7a7      	b.n	8006266 <_printf_i+0x13e>
 8006316:	0022      	movs	r2, r4
 8006318:	2301      	movs	r3, #1
 800631a:	9906      	ldr	r1, [sp, #24]
 800631c:	9805      	ldr	r0, [sp, #20]
 800631e:	9e07      	ldr	r6, [sp, #28]
 8006320:	3219      	adds	r2, #25
 8006322:	47b0      	blx	r6
 8006324:	3001      	adds	r0, #1
 8006326:	d09c      	beq.n	8006262 <_printf_i+0x13a>
 8006328:	3501      	adds	r5, #1
 800632a:	68e3      	ldr	r3, [r4, #12]
 800632c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800632e:	1a9b      	subs	r3, r3, r2
 8006330:	42ab      	cmp	r3, r5
 8006332:	dcf0      	bgt.n	8006316 <_printf_i+0x1ee>
 8006334:	e7e9      	b.n	800630a <_printf_i+0x1e2>
 8006336:	2500      	movs	r5, #0
 8006338:	e7f7      	b.n	800632a <_printf_i+0x202>
 800633a:	46c0      	nop			@ (mov r8, r8)
 800633c:	08007e61 	.word	0x08007e61
 8006340:	08007e72 	.word	0x08007e72

08006344 <__sflush_r>:
 8006344:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006346:	220c      	movs	r2, #12
 8006348:	5e8b      	ldrsh	r3, [r1, r2]
 800634a:	0005      	movs	r5, r0
 800634c:	000c      	movs	r4, r1
 800634e:	071a      	lsls	r2, r3, #28
 8006350:	d456      	bmi.n	8006400 <__sflush_r+0xbc>
 8006352:	684a      	ldr	r2, [r1, #4]
 8006354:	2a00      	cmp	r2, #0
 8006356:	dc02      	bgt.n	800635e <__sflush_r+0x1a>
 8006358:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800635a:	2a00      	cmp	r2, #0
 800635c:	dd4e      	ble.n	80063fc <__sflush_r+0xb8>
 800635e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006360:	2f00      	cmp	r7, #0
 8006362:	d04b      	beq.n	80063fc <__sflush_r+0xb8>
 8006364:	2200      	movs	r2, #0
 8006366:	2080      	movs	r0, #128	@ 0x80
 8006368:	682e      	ldr	r6, [r5, #0]
 800636a:	602a      	str	r2, [r5, #0]
 800636c:	001a      	movs	r2, r3
 800636e:	0140      	lsls	r0, r0, #5
 8006370:	6a21      	ldr	r1, [r4, #32]
 8006372:	4002      	ands	r2, r0
 8006374:	4203      	tst	r3, r0
 8006376:	d033      	beq.n	80063e0 <__sflush_r+0x9c>
 8006378:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800637a:	89a3      	ldrh	r3, [r4, #12]
 800637c:	075b      	lsls	r3, r3, #29
 800637e:	d506      	bpl.n	800638e <__sflush_r+0x4a>
 8006380:	6863      	ldr	r3, [r4, #4]
 8006382:	1ad2      	subs	r2, r2, r3
 8006384:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006386:	2b00      	cmp	r3, #0
 8006388:	d001      	beq.n	800638e <__sflush_r+0x4a>
 800638a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800638c:	1ad2      	subs	r2, r2, r3
 800638e:	2300      	movs	r3, #0
 8006390:	0028      	movs	r0, r5
 8006392:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8006394:	6a21      	ldr	r1, [r4, #32]
 8006396:	47b8      	blx	r7
 8006398:	89a2      	ldrh	r2, [r4, #12]
 800639a:	1c43      	adds	r3, r0, #1
 800639c:	d106      	bne.n	80063ac <__sflush_r+0x68>
 800639e:	6829      	ldr	r1, [r5, #0]
 80063a0:	291d      	cmp	r1, #29
 80063a2:	d846      	bhi.n	8006432 <__sflush_r+0xee>
 80063a4:	4b29      	ldr	r3, [pc, #164]	@ (800644c <__sflush_r+0x108>)
 80063a6:	410b      	asrs	r3, r1
 80063a8:	07db      	lsls	r3, r3, #31
 80063aa:	d442      	bmi.n	8006432 <__sflush_r+0xee>
 80063ac:	2300      	movs	r3, #0
 80063ae:	6063      	str	r3, [r4, #4]
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	6023      	str	r3, [r4, #0]
 80063b4:	04d2      	lsls	r2, r2, #19
 80063b6:	d505      	bpl.n	80063c4 <__sflush_r+0x80>
 80063b8:	1c43      	adds	r3, r0, #1
 80063ba:	d102      	bne.n	80063c2 <__sflush_r+0x7e>
 80063bc:	682b      	ldr	r3, [r5, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d100      	bne.n	80063c4 <__sflush_r+0x80>
 80063c2:	6560      	str	r0, [r4, #84]	@ 0x54
 80063c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80063c6:	602e      	str	r6, [r5, #0]
 80063c8:	2900      	cmp	r1, #0
 80063ca:	d017      	beq.n	80063fc <__sflush_r+0xb8>
 80063cc:	0023      	movs	r3, r4
 80063ce:	3344      	adds	r3, #68	@ 0x44
 80063d0:	4299      	cmp	r1, r3
 80063d2:	d002      	beq.n	80063da <__sflush_r+0x96>
 80063d4:	0028      	movs	r0, r5
 80063d6:	f000 fb9b 	bl	8006b10 <_free_r>
 80063da:	2300      	movs	r3, #0
 80063dc:	6363      	str	r3, [r4, #52]	@ 0x34
 80063de:	e00d      	b.n	80063fc <__sflush_r+0xb8>
 80063e0:	2301      	movs	r3, #1
 80063e2:	0028      	movs	r0, r5
 80063e4:	47b8      	blx	r7
 80063e6:	0002      	movs	r2, r0
 80063e8:	1c43      	adds	r3, r0, #1
 80063ea:	d1c6      	bne.n	800637a <__sflush_r+0x36>
 80063ec:	682b      	ldr	r3, [r5, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d0c3      	beq.n	800637a <__sflush_r+0x36>
 80063f2:	2b1d      	cmp	r3, #29
 80063f4:	d001      	beq.n	80063fa <__sflush_r+0xb6>
 80063f6:	2b16      	cmp	r3, #22
 80063f8:	d11a      	bne.n	8006430 <__sflush_r+0xec>
 80063fa:	602e      	str	r6, [r5, #0]
 80063fc:	2000      	movs	r0, #0
 80063fe:	e01e      	b.n	800643e <__sflush_r+0xfa>
 8006400:	690e      	ldr	r6, [r1, #16]
 8006402:	2e00      	cmp	r6, #0
 8006404:	d0fa      	beq.n	80063fc <__sflush_r+0xb8>
 8006406:	680f      	ldr	r7, [r1, #0]
 8006408:	600e      	str	r6, [r1, #0]
 800640a:	1bba      	subs	r2, r7, r6
 800640c:	9201      	str	r2, [sp, #4]
 800640e:	2200      	movs	r2, #0
 8006410:	079b      	lsls	r3, r3, #30
 8006412:	d100      	bne.n	8006416 <__sflush_r+0xd2>
 8006414:	694a      	ldr	r2, [r1, #20]
 8006416:	60a2      	str	r2, [r4, #8]
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	2b00      	cmp	r3, #0
 800641c:	ddee      	ble.n	80063fc <__sflush_r+0xb8>
 800641e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8006420:	0032      	movs	r2, r6
 8006422:	001f      	movs	r7, r3
 8006424:	0028      	movs	r0, r5
 8006426:	9b01      	ldr	r3, [sp, #4]
 8006428:	6a21      	ldr	r1, [r4, #32]
 800642a:	47b8      	blx	r7
 800642c:	2800      	cmp	r0, #0
 800642e:	dc07      	bgt.n	8006440 <__sflush_r+0xfc>
 8006430:	89a2      	ldrh	r2, [r4, #12]
 8006432:	2340      	movs	r3, #64	@ 0x40
 8006434:	2001      	movs	r0, #1
 8006436:	4313      	orrs	r3, r2
 8006438:	b21b      	sxth	r3, r3
 800643a:	81a3      	strh	r3, [r4, #12]
 800643c:	4240      	negs	r0, r0
 800643e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006440:	9b01      	ldr	r3, [sp, #4]
 8006442:	1836      	adds	r6, r6, r0
 8006444:	1a1b      	subs	r3, r3, r0
 8006446:	9301      	str	r3, [sp, #4]
 8006448:	e7e6      	b.n	8006418 <__sflush_r+0xd4>
 800644a:	46c0      	nop			@ (mov r8, r8)
 800644c:	dfbffffe 	.word	0xdfbffffe

08006450 <_fflush_r>:
 8006450:	690b      	ldr	r3, [r1, #16]
 8006452:	b570      	push	{r4, r5, r6, lr}
 8006454:	0005      	movs	r5, r0
 8006456:	000c      	movs	r4, r1
 8006458:	2b00      	cmp	r3, #0
 800645a:	d102      	bne.n	8006462 <_fflush_r+0x12>
 800645c:	2500      	movs	r5, #0
 800645e:	0028      	movs	r0, r5
 8006460:	bd70      	pop	{r4, r5, r6, pc}
 8006462:	2800      	cmp	r0, #0
 8006464:	d004      	beq.n	8006470 <_fflush_r+0x20>
 8006466:	6a03      	ldr	r3, [r0, #32]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <_fflush_r+0x20>
 800646c:	f000 f8ac 	bl	80065c8 <__sinit>
 8006470:	220c      	movs	r2, #12
 8006472:	5ea3      	ldrsh	r3, [r4, r2]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d0f1      	beq.n	800645c <_fflush_r+0xc>
 8006478:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800647a:	07d2      	lsls	r2, r2, #31
 800647c:	d404      	bmi.n	8006488 <_fflush_r+0x38>
 800647e:	059b      	lsls	r3, r3, #22
 8006480:	d402      	bmi.n	8006488 <_fflush_r+0x38>
 8006482:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006484:	f000 facd 	bl	8006a22 <__retarget_lock_acquire_recursive>
 8006488:	0028      	movs	r0, r5
 800648a:	0021      	movs	r1, r4
 800648c:	f7ff ff5a 	bl	8006344 <__sflush_r>
 8006490:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006492:	0005      	movs	r5, r0
 8006494:	07db      	lsls	r3, r3, #31
 8006496:	d4e2      	bmi.n	800645e <_fflush_r+0xe>
 8006498:	89a3      	ldrh	r3, [r4, #12]
 800649a:	059b      	lsls	r3, r3, #22
 800649c:	d4df      	bmi.n	800645e <_fflush_r+0xe>
 800649e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80064a0:	f000 fac0 	bl	8006a24 <__retarget_lock_release_recursive>
 80064a4:	e7db      	b.n	800645e <_fflush_r+0xe>
	...

080064a8 <std>:
 80064a8:	2300      	movs	r3, #0
 80064aa:	b510      	push	{r4, lr}
 80064ac:	0004      	movs	r4, r0
 80064ae:	6003      	str	r3, [r0, #0]
 80064b0:	6043      	str	r3, [r0, #4]
 80064b2:	6083      	str	r3, [r0, #8]
 80064b4:	8181      	strh	r1, [r0, #12]
 80064b6:	6643      	str	r3, [r0, #100]	@ 0x64
 80064b8:	81c2      	strh	r2, [r0, #14]
 80064ba:	6103      	str	r3, [r0, #16]
 80064bc:	6143      	str	r3, [r0, #20]
 80064be:	6183      	str	r3, [r0, #24]
 80064c0:	0019      	movs	r1, r3
 80064c2:	2208      	movs	r2, #8
 80064c4:	305c      	adds	r0, #92	@ 0x5c
 80064c6:	f000 f9d0 	bl	800686a <memset>
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <std+0x50>)
 80064cc:	6224      	str	r4, [r4, #32]
 80064ce:	6263      	str	r3, [r4, #36]	@ 0x24
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <std+0x54>)
 80064d2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80064d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006500 <std+0x58>)
 80064d6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80064d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006504 <std+0x5c>)
 80064da:	6323      	str	r3, [r4, #48]	@ 0x30
 80064dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006508 <std+0x60>)
 80064de:	429c      	cmp	r4, r3
 80064e0:	d005      	beq.n	80064ee <std+0x46>
 80064e2:	4b0a      	ldr	r3, [pc, #40]	@ (800650c <std+0x64>)
 80064e4:	429c      	cmp	r4, r3
 80064e6:	d002      	beq.n	80064ee <std+0x46>
 80064e8:	4b09      	ldr	r3, [pc, #36]	@ (8006510 <std+0x68>)
 80064ea:	429c      	cmp	r4, r3
 80064ec:	d103      	bne.n	80064f6 <std+0x4e>
 80064ee:	0020      	movs	r0, r4
 80064f0:	3058      	adds	r0, #88	@ 0x58
 80064f2:	f000 fa95 	bl	8006a20 <__retarget_lock_init_recursive>
 80064f6:	bd10      	pop	{r4, pc}
 80064f8:	08006651 	.word	0x08006651
 80064fc:	08006679 	.word	0x08006679
 8006500:	080066b1 	.word	0x080066b1
 8006504:	080066dd 	.word	0x080066dd
 8006508:	200003f8 	.word	0x200003f8
 800650c:	20000460 	.word	0x20000460
 8006510:	200004c8 	.word	0x200004c8

08006514 <stdio_exit_handler>:
 8006514:	b510      	push	{r4, lr}
 8006516:	4a03      	ldr	r2, [pc, #12]	@ (8006524 <stdio_exit_handler+0x10>)
 8006518:	4903      	ldr	r1, [pc, #12]	@ (8006528 <stdio_exit_handler+0x14>)
 800651a:	4804      	ldr	r0, [pc, #16]	@ (800652c <stdio_exit_handler+0x18>)
 800651c:	f000 f87c 	bl	8006618 <_fwalk_sglue>
 8006520:	bd10      	pop	{r4, pc}
 8006522:	46c0      	nop			@ (mov r8, r8)
 8006524:	2000000c 	.word	0x2000000c
 8006528:	08006451 	.word	0x08006451
 800652c:	2000001c 	.word	0x2000001c

08006530 <cleanup_stdio>:
 8006530:	6841      	ldr	r1, [r0, #4]
 8006532:	4b0b      	ldr	r3, [pc, #44]	@ (8006560 <cleanup_stdio+0x30>)
 8006534:	b510      	push	{r4, lr}
 8006536:	0004      	movs	r4, r0
 8006538:	4299      	cmp	r1, r3
 800653a:	d001      	beq.n	8006540 <cleanup_stdio+0x10>
 800653c:	f7ff ff88 	bl	8006450 <_fflush_r>
 8006540:	68a1      	ldr	r1, [r4, #8]
 8006542:	4b08      	ldr	r3, [pc, #32]	@ (8006564 <cleanup_stdio+0x34>)
 8006544:	4299      	cmp	r1, r3
 8006546:	d002      	beq.n	800654e <cleanup_stdio+0x1e>
 8006548:	0020      	movs	r0, r4
 800654a:	f7ff ff81 	bl	8006450 <_fflush_r>
 800654e:	68e1      	ldr	r1, [r4, #12]
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <cleanup_stdio+0x38>)
 8006552:	4299      	cmp	r1, r3
 8006554:	d002      	beq.n	800655c <cleanup_stdio+0x2c>
 8006556:	0020      	movs	r0, r4
 8006558:	f7ff ff7a 	bl	8006450 <_fflush_r>
 800655c:	bd10      	pop	{r4, pc}
 800655e:	46c0      	nop			@ (mov r8, r8)
 8006560:	200003f8 	.word	0x200003f8
 8006564:	20000460 	.word	0x20000460
 8006568:	200004c8 	.word	0x200004c8

0800656c <global_stdio_init.part.0>:
 800656c:	b510      	push	{r4, lr}
 800656e:	4b09      	ldr	r3, [pc, #36]	@ (8006594 <global_stdio_init.part.0+0x28>)
 8006570:	4a09      	ldr	r2, [pc, #36]	@ (8006598 <global_stdio_init.part.0+0x2c>)
 8006572:	2104      	movs	r1, #4
 8006574:	601a      	str	r2, [r3, #0]
 8006576:	4809      	ldr	r0, [pc, #36]	@ (800659c <global_stdio_init.part.0+0x30>)
 8006578:	2200      	movs	r2, #0
 800657a:	f7ff ff95 	bl	80064a8 <std>
 800657e:	2201      	movs	r2, #1
 8006580:	2109      	movs	r1, #9
 8006582:	4807      	ldr	r0, [pc, #28]	@ (80065a0 <global_stdio_init.part.0+0x34>)
 8006584:	f7ff ff90 	bl	80064a8 <std>
 8006588:	2202      	movs	r2, #2
 800658a:	2112      	movs	r1, #18
 800658c:	4805      	ldr	r0, [pc, #20]	@ (80065a4 <global_stdio_init.part.0+0x38>)
 800658e:	f7ff ff8b 	bl	80064a8 <std>
 8006592:	bd10      	pop	{r4, pc}
 8006594:	20000530 	.word	0x20000530
 8006598:	08006515 	.word	0x08006515
 800659c:	200003f8 	.word	0x200003f8
 80065a0:	20000460 	.word	0x20000460
 80065a4:	200004c8 	.word	0x200004c8

080065a8 <__sfp_lock_acquire>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4802      	ldr	r0, [pc, #8]	@ (80065b4 <__sfp_lock_acquire+0xc>)
 80065ac:	f000 fa39 	bl	8006a22 <__retarget_lock_acquire_recursive>
 80065b0:	bd10      	pop	{r4, pc}
 80065b2:	46c0      	nop			@ (mov r8, r8)
 80065b4:	2000053a 	.word	0x2000053a

080065b8 <__sfp_lock_release>:
 80065b8:	b510      	push	{r4, lr}
 80065ba:	4802      	ldr	r0, [pc, #8]	@ (80065c4 <__sfp_lock_release+0xc>)
 80065bc:	f000 fa32 	bl	8006a24 <__retarget_lock_release_recursive>
 80065c0:	bd10      	pop	{r4, pc}
 80065c2:	46c0      	nop			@ (mov r8, r8)
 80065c4:	2000053a 	.word	0x2000053a

080065c8 <__sinit>:
 80065c8:	b510      	push	{r4, lr}
 80065ca:	0004      	movs	r4, r0
 80065cc:	f7ff ffec 	bl	80065a8 <__sfp_lock_acquire>
 80065d0:	6a23      	ldr	r3, [r4, #32]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d002      	beq.n	80065dc <__sinit+0x14>
 80065d6:	f7ff ffef 	bl	80065b8 <__sfp_lock_release>
 80065da:	bd10      	pop	{r4, pc}
 80065dc:	4b04      	ldr	r3, [pc, #16]	@ (80065f0 <__sinit+0x28>)
 80065de:	6223      	str	r3, [r4, #32]
 80065e0:	4b04      	ldr	r3, [pc, #16]	@ (80065f4 <__sinit+0x2c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1f6      	bne.n	80065d6 <__sinit+0xe>
 80065e8:	f7ff ffc0 	bl	800656c <global_stdio_init.part.0>
 80065ec:	e7f3      	b.n	80065d6 <__sinit+0xe>
 80065ee:	46c0      	nop			@ (mov r8, r8)
 80065f0:	08006531 	.word	0x08006531
 80065f4:	20000530 	.word	0x20000530

080065f8 <fiprintf>:
 80065f8:	b40e      	push	{r1, r2, r3}
 80065fa:	b517      	push	{r0, r1, r2, r4, lr}
 80065fc:	4c05      	ldr	r4, [pc, #20]	@ (8006614 <fiprintf+0x1c>)
 80065fe:	ab05      	add	r3, sp, #20
 8006600:	cb04      	ldmia	r3!, {r2}
 8006602:	0001      	movs	r1, r0
 8006604:	6820      	ldr	r0, [r4, #0]
 8006606:	9301      	str	r3, [sp, #4]
 8006608:	f7ff fc02 	bl	8005e10 <_vfiprintf_r>
 800660c:	bc1e      	pop	{r1, r2, r3, r4}
 800660e:	bc08      	pop	{r3}
 8006610:	b003      	add	sp, #12
 8006612:	4718      	bx	r3
 8006614:	20000018 	.word	0x20000018

08006618 <_fwalk_sglue>:
 8006618:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800661a:	0014      	movs	r4, r2
 800661c:	2600      	movs	r6, #0
 800661e:	9000      	str	r0, [sp, #0]
 8006620:	9101      	str	r1, [sp, #4]
 8006622:	68a5      	ldr	r5, [r4, #8]
 8006624:	6867      	ldr	r7, [r4, #4]
 8006626:	3f01      	subs	r7, #1
 8006628:	d504      	bpl.n	8006634 <_fwalk_sglue+0x1c>
 800662a:	6824      	ldr	r4, [r4, #0]
 800662c:	2c00      	cmp	r4, #0
 800662e:	d1f8      	bne.n	8006622 <_fwalk_sglue+0xa>
 8006630:	0030      	movs	r0, r6
 8006632:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006634:	89ab      	ldrh	r3, [r5, #12]
 8006636:	2b01      	cmp	r3, #1
 8006638:	d908      	bls.n	800664c <_fwalk_sglue+0x34>
 800663a:	220e      	movs	r2, #14
 800663c:	5eab      	ldrsh	r3, [r5, r2]
 800663e:	3301      	adds	r3, #1
 8006640:	d004      	beq.n	800664c <_fwalk_sglue+0x34>
 8006642:	0029      	movs	r1, r5
 8006644:	9800      	ldr	r0, [sp, #0]
 8006646:	9b01      	ldr	r3, [sp, #4]
 8006648:	4798      	blx	r3
 800664a:	4306      	orrs	r6, r0
 800664c:	3568      	adds	r5, #104	@ 0x68
 800664e:	e7ea      	b.n	8006626 <_fwalk_sglue+0xe>

08006650 <__sread>:
 8006650:	b570      	push	{r4, r5, r6, lr}
 8006652:	000c      	movs	r4, r1
 8006654:	250e      	movs	r5, #14
 8006656:	5f49      	ldrsh	r1, [r1, r5]
 8006658:	f000 f968 	bl	800692c <_read_r>
 800665c:	2800      	cmp	r0, #0
 800665e:	db03      	blt.n	8006668 <__sread+0x18>
 8006660:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8006662:	181b      	adds	r3, r3, r0
 8006664:	6563      	str	r3, [r4, #84]	@ 0x54
 8006666:	bd70      	pop	{r4, r5, r6, pc}
 8006668:	89a3      	ldrh	r3, [r4, #12]
 800666a:	4a02      	ldr	r2, [pc, #8]	@ (8006674 <__sread+0x24>)
 800666c:	4013      	ands	r3, r2
 800666e:	81a3      	strh	r3, [r4, #12]
 8006670:	e7f9      	b.n	8006666 <__sread+0x16>
 8006672:	46c0      	nop			@ (mov r8, r8)
 8006674:	ffffefff 	.word	0xffffefff

08006678 <__swrite>:
 8006678:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800667a:	001f      	movs	r7, r3
 800667c:	898b      	ldrh	r3, [r1, #12]
 800667e:	0005      	movs	r5, r0
 8006680:	000c      	movs	r4, r1
 8006682:	0016      	movs	r6, r2
 8006684:	05db      	lsls	r3, r3, #23
 8006686:	d505      	bpl.n	8006694 <__swrite+0x1c>
 8006688:	230e      	movs	r3, #14
 800668a:	5ec9      	ldrsh	r1, [r1, r3]
 800668c:	2200      	movs	r2, #0
 800668e:	2302      	movs	r3, #2
 8006690:	f000 f938 	bl	8006904 <_lseek_r>
 8006694:	89a3      	ldrh	r3, [r4, #12]
 8006696:	4a05      	ldr	r2, [pc, #20]	@ (80066ac <__swrite+0x34>)
 8006698:	0028      	movs	r0, r5
 800669a:	4013      	ands	r3, r2
 800669c:	81a3      	strh	r3, [r4, #12]
 800669e:	0032      	movs	r2, r6
 80066a0:	230e      	movs	r3, #14
 80066a2:	5ee1      	ldrsh	r1, [r4, r3]
 80066a4:	003b      	movs	r3, r7
 80066a6:	f000 f97d 	bl	80069a4 <_write_r>
 80066aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80066ac:	ffffefff 	.word	0xffffefff

080066b0 <__sseek>:
 80066b0:	b570      	push	{r4, r5, r6, lr}
 80066b2:	000c      	movs	r4, r1
 80066b4:	250e      	movs	r5, #14
 80066b6:	5f49      	ldrsh	r1, [r1, r5]
 80066b8:	f000 f924 	bl	8006904 <_lseek_r>
 80066bc:	89a3      	ldrh	r3, [r4, #12]
 80066be:	1c42      	adds	r2, r0, #1
 80066c0:	d103      	bne.n	80066ca <__sseek+0x1a>
 80066c2:	4a05      	ldr	r2, [pc, #20]	@ (80066d8 <__sseek+0x28>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	81a3      	strh	r3, [r4, #12]
 80066c8:	bd70      	pop	{r4, r5, r6, pc}
 80066ca:	2280      	movs	r2, #128	@ 0x80
 80066cc:	0152      	lsls	r2, r2, #5
 80066ce:	4313      	orrs	r3, r2
 80066d0:	81a3      	strh	r3, [r4, #12]
 80066d2:	6560      	str	r0, [r4, #84]	@ 0x54
 80066d4:	e7f8      	b.n	80066c8 <__sseek+0x18>
 80066d6:	46c0      	nop			@ (mov r8, r8)
 80066d8:	ffffefff 	.word	0xffffefff

080066dc <__sclose>:
 80066dc:	b510      	push	{r4, lr}
 80066de:	230e      	movs	r3, #14
 80066e0:	5ec9      	ldrsh	r1, [r1, r3]
 80066e2:	f000 f8fd 	bl	80068e0 <_close_r>
 80066e6:	bd10      	pop	{r4, pc}

080066e8 <__swbuf_r>:
 80066e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066ea:	0006      	movs	r6, r0
 80066ec:	000d      	movs	r5, r1
 80066ee:	0014      	movs	r4, r2
 80066f0:	2800      	cmp	r0, #0
 80066f2:	d004      	beq.n	80066fe <__swbuf_r+0x16>
 80066f4:	6a03      	ldr	r3, [r0, #32]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <__swbuf_r+0x16>
 80066fa:	f7ff ff65 	bl	80065c8 <__sinit>
 80066fe:	69a3      	ldr	r3, [r4, #24]
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	89a3      	ldrh	r3, [r4, #12]
 8006704:	071b      	lsls	r3, r3, #28
 8006706:	d502      	bpl.n	800670e <__swbuf_r+0x26>
 8006708:	6923      	ldr	r3, [r4, #16]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d109      	bne.n	8006722 <__swbuf_r+0x3a>
 800670e:	0021      	movs	r1, r4
 8006710:	0030      	movs	r0, r6
 8006712:	f000 f82b 	bl	800676c <__swsetup_r>
 8006716:	2800      	cmp	r0, #0
 8006718:	d003      	beq.n	8006722 <__swbuf_r+0x3a>
 800671a:	2501      	movs	r5, #1
 800671c:	426d      	negs	r5, r5
 800671e:	0028      	movs	r0, r5
 8006720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	6820      	ldr	r0, [r4, #0]
 8006726:	b2ef      	uxtb	r7, r5
 8006728:	1ac0      	subs	r0, r0, r3
 800672a:	6963      	ldr	r3, [r4, #20]
 800672c:	b2ed      	uxtb	r5, r5
 800672e:	4283      	cmp	r3, r0
 8006730:	dc05      	bgt.n	800673e <__swbuf_r+0x56>
 8006732:	0021      	movs	r1, r4
 8006734:	0030      	movs	r0, r6
 8006736:	f7ff fe8b 	bl	8006450 <_fflush_r>
 800673a:	2800      	cmp	r0, #0
 800673c:	d1ed      	bne.n	800671a <__swbuf_r+0x32>
 800673e:	68a3      	ldr	r3, [r4, #8]
 8006740:	3001      	adds	r0, #1
 8006742:	3b01      	subs	r3, #1
 8006744:	60a3      	str	r3, [r4, #8]
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	1c5a      	adds	r2, r3, #1
 800674a:	6022      	str	r2, [r4, #0]
 800674c:	701f      	strb	r7, [r3, #0]
 800674e:	6963      	ldr	r3, [r4, #20]
 8006750:	4283      	cmp	r3, r0
 8006752:	d004      	beq.n	800675e <__swbuf_r+0x76>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	07db      	lsls	r3, r3, #31
 8006758:	d5e1      	bpl.n	800671e <__swbuf_r+0x36>
 800675a:	2d0a      	cmp	r5, #10
 800675c:	d1df      	bne.n	800671e <__swbuf_r+0x36>
 800675e:	0021      	movs	r1, r4
 8006760:	0030      	movs	r0, r6
 8006762:	f7ff fe75 	bl	8006450 <_fflush_r>
 8006766:	2800      	cmp	r0, #0
 8006768:	d0d9      	beq.n	800671e <__swbuf_r+0x36>
 800676a:	e7d6      	b.n	800671a <__swbuf_r+0x32>

0800676c <__swsetup_r>:
 800676c:	4b2d      	ldr	r3, [pc, #180]	@ (8006824 <__swsetup_r+0xb8>)
 800676e:	b570      	push	{r4, r5, r6, lr}
 8006770:	0005      	movs	r5, r0
 8006772:	6818      	ldr	r0, [r3, #0]
 8006774:	000c      	movs	r4, r1
 8006776:	2800      	cmp	r0, #0
 8006778:	d004      	beq.n	8006784 <__swsetup_r+0x18>
 800677a:	6a03      	ldr	r3, [r0, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d101      	bne.n	8006784 <__swsetup_r+0x18>
 8006780:	f7ff ff22 	bl	80065c8 <__sinit>
 8006784:	230c      	movs	r3, #12
 8006786:	5ee2      	ldrsh	r2, [r4, r3]
 8006788:	0713      	lsls	r3, r2, #28
 800678a:	d423      	bmi.n	80067d4 <__swsetup_r+0x68>
 800678c:	06d3      	lsls	r3, r2, #27
 800678e:	d407      	bmi.n	80067a0 <__swsetup_r+0x34>
 8006790:	2309      	movs	r3, #9
 8006792:	602b      	str	r3, [r5, #0]
 8006794:	2340      	movs	r3, #64	@ 0x40
 8006796:	2001      	movs	r0, #1
 8006798:	4313      	orrs	r3, r2
 800679a:	81a3      	strh	r3, [r4, #12]
 800679c:	4240      	negs	r0, r0
 800679e:	e03a      	b.n	8006816 <__swsetup_r+0xaa>
 80067a0:	0752      	lsls	r2, r2, #29
 80067a2:	d513      	bpl.n	80067cc <__swsetup_r+0x60>
 80067a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067a6:	2900      	cmp	r1, #0
 80067a8:	d008      	beq.n	80067bc <__swsetup_r+0x50>
 80067aa:	0023      	movs	r3, r4
 80067ac:	3344      	adds	r3, #68	@ 0x44
 80067ae:	4299      	cmp	r1, r3
 80067b0:	d002      	beq.n	80067b8 <__swsetup_r+0x4c>
 80067b2:	0028      	movs	r0, r5
 80067b4:	f000 f9ac 	bl	8006b10 <_free_r>
 80067b8:	2300      	movs	r3, #0
 80067ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80067bc:	2224      	movs	r2, #36	@ 0x24
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	4393      	bics	r3, r2
 80067c2:	81a3      	strh	r3, [r4, #12]
 80067c4:	2300      	movs	r3, #0
 80067c6:	6063      	str	r3, [r4, #4]
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	6023      	str	r3, [r4, #0]
 80067cc:	2308      	movs	r3, #8
 80067ce:	89a2      	ldrh	r2, [r4, #12]
 80067d0:	4313      	orrs	r3, r2
 80067d2:	81a3      	strh	r3, [r4, #12]
 80067d4:	6923      	ldr	r3, [r4, #16]
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d10b      	bne.n	80067f2 <__swsetup_r+0x86>
 80067da:	21a0      	movs	r1, #160	@ 0xa0
 80067dc:	2280      	movs	r2, #128	@ 0x80
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	0089      	lsls	r1, r1, #2
 80067e2:	0092      	lsls	r2, r2, #2
 80067e4:	400b      	ands	r3, r1
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d003      	beq.n	80067f2 <__swsetup_r+0x86>
 80067ea:	0021      	movs	r1, r4
 80067ec:	0028      	movs	r0, r5
 80067ee:	f000 fa03 	bl	8006bf8 <__smakebuf_r>
 80067f2:	230c      	movs	r3, #12
 80067f4:	5ee2      	ldrsh	r2, [r4, r3]
 80067f6:	2101      	movs	r1, #1
 80067f8:	0013      	movs	r3, r2
 80067fa:	400b      	ands	r3, r1
 80067fc:	420a      	tst	r2, r1
 80067fe:	d00b      	beq.n	8006818 <__swsetup_r+0xac>
 8006800:	2300      	movs	r3, #0
 8006802:	60a3      	str	r3, [r4, #8]
 8006804:	6963      	ldr	r3, [r4, #20]
 8006806:	425b      	negs	r3, r3
 8006808:	61a3      	str	r3, [r4, #24]
 800680a:	2000      	movs	r0, #0
 800680c:	6923      	ldr	r3, [r4, #16]
 800680e:	4283      	cmp	r3, r0
 8006810:	d101      	bne.n	8006816 <__swsetup_r+0xaa>
 8006812:	0613      	lsls	r3, r2, #24
 8006814:	d4be      	bmi.n	8006794 <__swsetup_r+0x28>
 8006816:	bd70      	pop	{r4, r5, r6, pc}
 8006818:	0791      	lsls	r1, r2, #30
 800681a:	d400      	bmi.n	800681e <__swsetup_r+0xb2>
 800681c:	6963      	ldr	r3, [r4, #20]
 800681e:	60a3      	str	r3, [r4, #8]
 8006820:	e7f3      	b.n	800680a <__swsetup_r+0x9e>
 8006822:	46c0      	nop			@ (mov r8, r8)
 8006824:	20000018 	.word	0x20000018

08006828 <memcmp>:
 8006828:	b530      	push	{r4, r5, lr}
 800682a:	2400      	movs	r4, #0
 800682c:	3901      	subs	r1, #1
 800682e:	42a2      	cmp	r2, r4
 8006830:	d101      	bne.n	8006836 <memcmp+0xe>
 8006832:	2000      	movs	r0, #0
 8006834:	e005      	b.n	8006842 <memcmp+0x1a>
 8006836:	5d03      	ldrb	r3, [r0, r4]
 8006838:	3401      	adds	r4, #1
 800683a:	5d0d      	ldrb	r5, [r1, r4]
 800683c:	42ab      	cmp	r3, r5
 800683e:	d0f6      	beq.n	800682e <memcmp+0x6>
 8006840:	1b58      	subs	r0, r3, r5
 8006842:	bd30      	pop	{r4, r5, pc}

08006844 <memmove>:
 8006844:	b510      	push	{r4, lr}
 8006846:	4288      	cmp	r0, r1
 8006848:	d806      	bhi.n	8006858 <memmove+0x14>
 800684a:	2300      	movs	r3, #0
 800684c:	429a      	cmp	r2, r3
 800684e:	d008      	beq.n	8006862 <memmove+0x1e>
 8006850:	5ccc      	ldrb	r4, [r1, r3]
 8006852:	54c4      	strb	r4, [r0, r3]
 8006854:	3301      	adds	r3, #1
 8006856:	e7f9      	b.n	800684c <memmove+0x8>
 8006858:	188b      	adds	r3, r1, r2
 800685a:	4298      	cmp	r0, r3
 800685c:	d2f5      	bcs.n	800684a <memmove+0x6>
 800685e:	3a01      	subs	r2, #1
 8006860:	d200      	bcs.n	8006864 <memmove+0x20>
 8006862:	bd10      	pop	{r4, pc}
 8006864:	5c8b      	ldrb	r3, [r1, r2]
 8006866:	5483      	strb	r3, [r0, r2]
 8006868:	e7f9      	b.n	800685e <memmove+0x1a>

0800686a <memset>:
 800686a:	0003      	movs	r3, r0
 800686c:	1882      	adds	r2, r0, r2
 800686e:	4293      	cmp	r3, r2
 8006870:	d100      	bne.n	8006874 <memset+0xa>
 8006872:	4770      	bx	lr
 8006874:	7019      	strb	r1, [r3, #0]
 8006876:	3301      	adds	r3, #1
 8006878:	e7f9      	b.n	800686e <memset+0x4>

0800687a <_raise_r>:
 800687a:	b570      	push	{r4, r5, r6, lr}
 800687c:	0004      	movs	r4, r0
 800687e:	000d      	movs	r5, r1
 8006880:	291f      	cmp	r1, #31
 8006882:	d904      	bls.n	800688e <_raise_r+0x14>
 8006884:	2316      	movs	r3, #22
 8006886:	6003      	str	r3, [r0, #0]
 8006888:	2001      	movs	r0, #1
 800688a:	4240      	negs	r0, r0
 800688c:	bd70      	pop	{r4, r5, r6, pc}
 800688e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d004      	beq.n	800689e <_raise_r+0x24>
 8006894:	008a      	lsls	r2, r1, #2
 8006896:	189b      	adds	r3, r3, r2
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	2a00      	cmp	r2, #0
 800689c:	d108      	bne.n	80068b0 <_raise_r+0x36>
 800689e:	0020      	movs	r0, r4
 80068a0:	f000 f86a 	bl	8006978 <_getpid_r>
 80068a4:	002a      	movs	r2, r5
 80068a6:	0001      	movs	r1, r0
 80068a8:	0020      	movs	r0, r4
 80068aa:	f000 f853 	bl	8006954 <_kill_r>
 80068ae:	e7ed      	b.n	800688c <_raise_r+0x12>
 80068b0:	2a01      	cmp	r2, #1
 80068b2:	d009      	beq.n	80068c8 <_raise_r+0x4e>
 80068b4:	1c51      	adds	r1, r2, #1
 80068b6:	d103      	bne.n	80068c0 <_raise_r+0x46>
 80068b8:	2316      	movs	r3, #22
 80068ba:	6003      	str	r3, [r0, #0]
 80068bc:	2001      	movs	r0, #1
 80068be:	e7e5      	b.n	800688c <_raise_r+0x12>
 80068c0:	2100      	movs	r1, #0
 80068c2:	0028      	movs	r0, r5
 80068c4:	6019      	str	r1, [r3, #0]
 80068c6:	4790      	blx	r2
 80068c8:	2000      	movs	r0, #0
 80068ca:	e7df      	b.n	800688c <_raise_r+0x12>

080068cc <raise>:
 80068cc:	b510      	push	{r4, lr}
 80068ce:	4b03      	ldr	r3, [pc, #12]	@ (80068dc <raise+0x10>)
 80068d0:	0001      	movs	r1, r0
 80068d2:	6818      	ldr	r0, [r3, #0]
 80068d4:	f7ff ffd1 	bl	800687a <_raise_r>
 80068d8:	bd10      	pop	{r4, pc}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	20000018 	.word	0x20000018

080068e0 <_close_r>:
 80068e0:	2300      	movs	r3, #0
 80068e2:	b570      	push	{r4, r5, r6, lr}
 80068e4:	4d06      	ldr	r5, [pc, #24]	@ (8006900 <_close_r+0x20>)
 80068e6:	0004      	movs	r4, r0
 80068e8:	0008      	movs	r0, r1
 80068ea:	602b      	str	r3, [r5, #0]
 80068ec:	f7fa fe9f 	bl	800162e <_close>
 80068f0:	1c43      	adds	r3, r0, #1
 80068f2:	d103      	bne.n	80068fc <_close_r+0x1c>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d000      	beq.n	80068fc <_close_r+0x1c>
 80068fa:	6023      	str	r3, [r4, #0]
 80068fc:	bd70      	pop	{r4, r5, r6, pc}
 80068fe:	46c0      	nop			@ (mov r8, r8)
 8006900:	20000534 	.word	0x20000534

08006904 <_lseek_r>:
 8006904:	b570      	push	{r4, r5, r6, lr}
 8006906:	0004      	movs	r4, r0
 8006908:	0008      	movs	r0, r1
 800690a:	0011      	movs	r1, r2
 800690c:	001a      	movs	r2, r3
 800690e:	2300      	movs	r3, #0
 8006910:	4d05      	ldr	r5, [pc, #20]	@ (8006928 <_lseek_r+0x24>)
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f7fa fe95 	bl	8001642 <_lseek>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d103      	bne.n	8006924 <_lseek_r+0x20>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d000      	beq.n	8006924 <_lseek_r+0x20>
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	bd70      	pop	{r4, r5, r6, pc}
 8006926:	46c0      	nop			@ (mov r8, r8)
 8006928:	20000534 	.word	0x20000534

0800692c <_read_r>:
 800692c:	b570      	push	{r4, r5, r6, lr}
 800692e:	0004      	movs	r4, r0
 8006930:	0008      	movs	r0, r1
 8006932:	0011      	movs	r1, r2
 8006934:	001a      	movs	r2, r3
 8006936:	2300      	movs	r3, #0
 8006938:	4d05      	ldr	r5, [pc, #20]	@ (8006950 <_read_r+0x24>)
 800693a:	602b      	str	r3, [r5, #0]
 800693c:	f7fa fe6a 	bl	8001614 <_read>
 8006940:	1c43      	adds	r3, r0, #1
 8006942:	d103      	bne.n	800694c <_read_r+0x20>
 8006944:	682b      	ldr	r3, [r5, #0]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d000      	beq.n	800694c <_read_r+0x20>
 800694a:	6023      	str	r3, [r4, #0]
 800694c:	bd70      	pop	{r4, r5, r6, pc}
 800694e:	46c0      	nop			@ (mov r8, r8)
 8006950:	20000534 	.word	0x20000534

08006954 <_kill_r>:
 8006954:	2300      	movs	r3, #0
 8006956:	b570      	push	{r4, r5, r6, lr}
 8006958:	4d06      	ldr	r5, [pc, #24]	@ (8006974 <_kill_r+0x20>)
 800695a:	0004      	movs	r4, r0
 800695c:	0008      	movs	r0, r1
 800695e:	0011      	movs	r1, r2
 8006960:	602b      	str	r3, [r5, #0]
 8006962:	f7fa fe49 	bl	80015f8 <_kill>
 8006966:	1c43      	adds	r3, r0, #1
 8006968:	d103      	bne.n	8006972 <_kill_r+0x1e>
 800696a:	682b      	ldr	r3, [r5, #0]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d000      	beq.n	8006972 <_kill_r+0x1e>
 8006970:	6023      	str	r3, [r4, #0]
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	20000534 	.word	0x20000534

08006978 <_getpid_r>:
 8006978:	b510      	push	{r4, lr}
 800697a:	f7fa fe3b 	bl	80015f4 <_getpid>
 800697e:	bd10      	pop	{r4, pc}

08006980 <_sbrk_r>:
 8006980:	2300      	movs	r3, #0
 8006982:	b570      	push	{r4, r5, r6, lr}
 8006984:	4d06      	ldr	r5, [pc, #24]	@ (80069a0 <_sbrk_r+0x20>)
 8006986:	0004      	movs	r4, r0
 8006988:	0008      	movs	r0, r1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	f7fa fe5c 	bl	8001648 <_sbrk>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d103      	bne.n	800699c <_sbrk_r+0x1c>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d000      	beq.n	800699c <_sbrk_r+0x1c>
 800699a:	6023      	str	r3, [r4, #0]
 800699c:	bd70      	pop	{r4, r5, r6, pc}
 800699e:	46c0      	nop			@ (mov r8, r8)
 80069a0:	20000534 	.word	0x20000534

080069a4 <_write_r>:
 80069a4:	b570      	push	{r4, r5, r6, lr}
 80069a6:	0004      	movs	r4, r0
 80069a8:	0008      	movs	r0, r1
 80069aa:	0011      	movs	r1, r2
 80069ac:	001a      	movs	r2, r3
 80069ae:	2300      	movs	r3, #0
 80069b0:	4d05      	ldr	r5, [pc, #20]	@ (80069c8 <_write_r+0x24>)
 80069b2:	602b      	str	r3, [r5, #0]
 80069b4:	f7fe fd04 	bl	80053c0 <_write>
 80069b8:	1c43      	adds	r3, r0, #1
 80069ba:	d103      	bne.n	80069c4 <_write_r+0x20>
 80069bc:	682b      	ldr	r3, [r5, #0]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d000      	beq.n	80069c4 <_write_r+0x20>
 80069c2:	6023      	str	r3, [r4, #0]
 80069c4:	bd70      	pop	{r4, r5, r6, pc}
 80069c6:	46c0      	nop			@ (mov r8, r8)
 80069c8:	20000534 	.word	0x20000534

080069cc <__errno>:
 80069cc:	4b01      	ldr	r3, [pc, #4]	@ (80069d4 <__errno+0x8>)
 80069ce:	6818      	ldr	r0, [r3, #0]
 80069d0:	4770      	bx	lr
 80069d2:	46c0      	nop			@ (mov r8, r8)
 80069d4:	20000018 	.word	0x20000018

080069d8 <__libc_init_array>:
 80069d8:	b570      	push	{r4, r5, r6, lr}
 80069da:	2600      	movs	r6, #0
 80069dc:	4c0c      	ldr	r4, [pc, #48]	@ (8006a10 <__libc_init_array+0x38>)
 80069de:	4d0d      	ldr	r5, [pc, #52]	@ (8006a14 <__libc_init_array+0x3c>)
 80069e0:	1b64      	subs	r4, r4, r5
 80069e2:	10a4      	asrs	r4, r4, #2
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	d109      	bne.n	80069fc <__libc_init_array+0x24>
 80069e8:	2600      	movs	r6, #0
 80069ea:	f000 f96b 	bl	8006cc4 <_init>
 80069ee:	4c0a      	ldr	r4, [pc, #40]	@ (8006a18 <__libc_init_array+0x40>)
 80069f0:	4d0a      	ldr	r5, [pc, #40]	@ (8006a1c <__libc_init_array+0x44>)
 80069f2:	1b64      	subs	r4, r4, r5
 80069f4:	10a4      	asrs	r4, r4, #2
 80069f6:	42a6      	cmp	r6, r4
 80069f8:	d105      	bne.n	8006a06 <__libc_init_array+0x2e>
 80069fa:	bd70      	pop	{r4, r5, r6, pc}
 80069fc:	00b3      	lsls	r3, r6, #2
 80069fe:	58eb      	ldr	r3, [r5, r3]
 8006a00:	4798      	blx	r3
 8006a02:	3601      	adds	r6, #1
 8006a04:	e7ee      	b.n	80069e4 <__libc_init_array+0xc>
 8006a06:	00b3      	lsls	r3, r6, #2
 8006a08:	58eb      	ldr	r3, [r5, r3]
 8006a0a:	4798      	blx	r3
 8006a0c:	3601      	adds	r6, #1
 8006a0e:	e7f2      	b.n	80069f6 <__libc_init_array+0x1e>
 8006a10:	08007e84 	.word	0x08007e84
 8006a14:	08007e84 	.word	0x08007e84
 8006a18:	08007e90 	.word	0x08007e90
 8006a1c:	08007e84 	.word	0x08007e84

08006a20 <__retarget_lock_init_recursive>:
 8006a20:	4770      	bx	lr

08006a22 <__retarget_lock_acquire_recursive>:
 8006a22:	4770      	bx	lr

08006a24 <__retarget_lock_release_recursive>:
 8006a24:	4770      	bx	lr

08006a26 <memchr>:
 8006a26:	b2c9      	uxtb	r1, r1
 8006a28:	1882      	adds	r2, r0, r2
 8006a2a:	4290      	cmp	r0, r2
 8006a2c:	d101      	bne.n	8006a32 <memchr+0xc>
 8006a2e:	2000      	movs	r0, #0
 8006a30:	4770      	bx	lr
 8006a32:	7803      	ldrb	r3, [r0, #0]
 8006a34:	428b      	cmp	r3, r1
 8006a36:	d0fb      	beq.n	8006a30 <memchr+0xa>
 8006a38:	3001      	adds	r0, #1
 8006a3a:	e7f6      	b.n	8006a2a <memchr+0x4>

08006a3c <memcpy>:
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	b510      	push	{r4, lr}
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d100      	bne.n	8006a46 <memcpy+0xa>
 8006a44:	bd10      	pop	{r4, pc}
 8006a46:	5ccc      	ldrb	r4, [r1, r3]
 8006a48:	54c4      	strb	r4, [r0, r3]
 8006a4a:	3301      	adds	r3, #1
 8006a4c:	e7f8      	b.n	8006a40 <memcpy+0x4>
	...

08006a50 <__register_exitproc>:
 8006a50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a52:	4d2a      	ldr	r5, [pc, #168]	@ (8006afc <__register_exitproc+0xac>)
 8006a54:	b085      	sub	sp, #20
 8006a56:	0006      	movs	r6, r0
 8006a58:	6828      	ldr	r0, [r5, #0]
 8006a5a:	9303      	str	r3, [sp, #12]
 8006a5c:	9101      	str	r1, [sp, #4]
 8006a5e:	9202      	str	r2, [sp, #8]
 8006a60:	f7ff ffdf 	bl	8006a22 <__retarget_lock_acquire_recursive>
 8006a64:	4b26      	ldr	r3, [pc, #152]	@ (8006b00 <__register_exitproc+0xb0>)
 8006a66:	681c      	ldr	r4, [r3, #0]
 8006a68:	2c00      	cmp	r4, #0
 8006a6a:	d108      	bne.n	8006a7e <__register_exitproc+0x2e>
 8006a6c:	4c25      	ldr	r4, [pc, #148]	@ (8006b04 <__register_exitproc+0xb4>)
 8006a6e:	601c      	str	r4, [r3, #0]
 8006a70:	4b25      	ldr	r3, [pc, #148]	@ (8006b08 <__register_exitproc+0xb8>)
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d003      	beq.n	8006a7e <__register_exitproc+0x2e>
 8006a76:	0022      	movs	r2, r4
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3288      	adds	r2, #136	@ 0x88
 8006a7c:	6013      	str	r3, [r2, #0]
 8006a7e:	6863      	ldr	r3, [r4, #4]
 8006a80:	2b1f      	cmp	r3, #31
 8006a82:	dd06      	ble.n	8006a92 <__register_exitproc+0x42>
 8006a84:	6828      	ldr	r0, [r5, #0]
 8006a86:	f7ff ffcd 	bl	8006a24 <__retarget_lock_release_recursive>
 8006a8a:	2001      	movs	r0, #1
 8006a8c:	4240      	negs	r0, r0
 8006a8e:	b005      	add	sp, #20
 8006a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006a92:	2e00      	cmp	r6, #0
 8006a94:	d025      	beq.n	8006ae2 <__register_exitproc+0x92>
 8006a96:	0027      	movs	r7, r4
 8006a98:	3788      	adds	r7, #136	@ 0x88
 8006a9a:	6838      	ldr	r0, [r7, #0]
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d10e      	bne.n	8006abe <__register_exitproc+0x6e>
 8006aa0:	4b1a      	ldr	r3, [pc, #104]	@ (8006b0c <__register_exitproc+0xbc>)
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d0ee      	beq.n	8006a84 <__register_exitproc+0x34>
 8006aa6:	2084      	movs	r0, #132	@ 0x84
 8006aa8:	0040      	lsls	r0, r0, #1
 8006aaa:	f7ff f8c3 	bl	8005c34 <malloc>
 8006aae:	2800      	cmp	r0, #0
 8006ab0:	d0e8      	beq.n	8006a84 <__register_exitproc+0x34>
 8006ab2:	0003      	movs	r3, r0
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	33fc      	adds	r3, #252	@ 0xfc
 8006ab8:	605a      	str	r2, [r3, #4]
 8006aba:	609a      	str	r2, [r3, #8]
 8006abc:	6038      	str	r0, [r7, #0]
 8006abe:	6861      	ldr	r1, [r4, #4]
 8006ac0:	9a02      	ldr	r2, [sp, #8]
 8006ac2:	008b      	lsls	r3, r1, #2
 8006ac4:	18c3      	adds	r3, r0, r3
 8006ac6:	c304      	stmia	r3!, {r2}
 8006ac8:	2201      	movs	r2, #1
 8006aca:	408a      	lsls	r2, r1
 8006acc:	30fc      	adds	r0, #252	@ 0xfc
 8006ace:	6841      	ldr	r1, [r0, #4]
 8006ad0:	4311      	orrs	r1, r2
 8006ad2:	6041      	str	r1, [r0, #4]
 8006ad4:	9903      	ldr	r1, [sp, #12]
 8006ad6:	67d9      	str	r1, [r3, #124]	@ 0x7c
 8006ad8:	2e02      	cmp	r6, #2
 8006ada:	d102      	bne.n	8006ae2 <__register_exitproc+0x92>
 8006adc:	6883      	ldr	r3, [r0, #8]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	6083      	str	r3, [r0, #8]
 8006ae2:	6863      	ldr	r3, [r4, #4]
 8006ae4:	6828      	ldr	r0, [r5, #0]
 8006ae6:	1c5a      	adds	r2, r3, #1
 8006ae8:	6062      	str	r2, [r4, #4]
 8006aea:	3302      	adds	r3, #2
 8006aec:	9a01      	ldr	r2, [sp, #4]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	511a      	str	r2, [r3, r4]
 8006af2:	f7ff ff97 	bl	8006a24 <__retarget_lock_release_recursive>
 8006af6:	2000      	movs	r0, #0
 8006af8:	e7c9      	b.n	8006a8e <__register_exitproc+0x3e>
 8006afa:	46c0      	nop			@ (mov r8, r8)
 8006afc:	20000068 	.word	0x20000068
 8006b00:	200005c8 	.word	0x200005c8
 8006b04:	2000053c 	.word	0x2000053c
 8006b08:	00000000 	.word	0x00000000
 8006b0c:	08005c35 	.word	0x08005c35

08006b10 <_free_r>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	0005      	movs	r5, r0
 8006b14:	1e0c      	subs	r4, r1, #0
 8006b16:	d010      	beq.n	8006b3a <_free_r+0x2a>
 8006b18:	3c04      	subs	r4, #4
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	da00      	bge.n	8006b22 <_free_r+0x12>
 8006b20:	18e4      	adds	r4, r4, r3
 8006b22:	0028      	movs	r0, r5
 8006b24:	f7ff f93c 	bl	8005da0 <__malloc_lock>
 8006b28:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba0 <_free_r+0x90>)
 8006b2a:	6813      	ldr	r3, [r2, #0]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d105      	bne.n	8006b3c <_free_r+0x2c>
 8006b30:	6063      	str	r3, [r4, #4]
 8006b32:	6014      	str	r4, [r2, #0]
 8006b34:	0028      	movs	r0, r5
 8006b36:	f7ff f93b 	bl	8005db0 <__malloc_unlock>
 8006b3a:	bd70      	pop	{r4, r5, r6, pc}
 8006b3c:	42a3      	cmp	r3, r4
 8006b3e:	d908      	bls.n	8006b52 <_free_r+0x42>
 8006b40:	6820      	ldr	r0, [r4, #0]
 8006b42:	1821      	adds	r1, r4, r0
 8006b44:	428b      	cmp	r3, r1
 8006b46:	d1f3      	bne.n	8006b30 <_free_r+0x20>
 8006b48:	6819      	ldr	r1, [r3, #0]
 8006b4a:	685b      	ldr	r3, [r3, #4]
 8006b4c:	1809      	adds	r1, r1, r0
 8006b4e:	6021      	str	r1, [r4, #0]
 8006b50:	e7ee      	b.n	8006b30 <_free_r+0x20>
 8006b52:	001a      	movs	r2, r3
 8006b54:	685b      	ldr	r3, [r3, #4]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <_free_r+0x4e>
 8006b5a:	42a3      	cmp	r3, r4
 8006b5c:	d9f9      	bls.n	8006b52 <_free_r+0x42>
 8006b5e:	6811      	ldr	r1, [r2, #0]
 8006b60:	1850      	adds	r0, r2, r1
 8006b62:	42a0      	cmp	r0, r4
 8006b64:	d10b      	bne.n	8006b7e <_free_r+0x6e>
 8006b66:	6820      	ldr	r0, [r4, #0]
 8006b68:	1809      	adds	r1, r1, r0
 8006b6a:	1850      	adds	r0, r2, r1
 8006b6c:	6011      	str	r1, [r2, #0]
 8006b6e:	4283      	cmp	r3, r0
 8006b70:	d1e0      	bne.n	8006b34 <_free_r+0x24>
 8006b72:	6818      	ldr	r0, [r3, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	1841      	adds	r1, r0, r1
 8006b78:	6011      	str	r1, [r2, #0]
 8006b7a:	6053      	str	r3, [r2, #4]
 8006b7c:	e7da      	b.n	8006b34 <_free_r+0x24>
 8006b7e:	42a0      	cmp	r0, r4
 8006b80:	d902      	bls.n	8006b88 <_free_r+0x78>
 8006b82:	230c      	movs	r3, #12
 8006b84:	602b      	str	r3, [r5, #0]
 8006b86:	e7d5      	b.n	8006b34 <_free_r+0x24>
 8006b88:	6820      	ldr	r0, [r4, #0]
 8006b8a:	1821      	adds	r1, r4, r0
 8006b8c:	428b      	cmp	r3, r1
 8006b8e:	d103      	bne.n	8006b98 <_free_r+0x88>
 8006b90:	6819      	ldr	r1, [r3, #0]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	1809      	adds	r1, r1, r0
 8006b96:	6021      	str	r1, [r4, #0]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	6054      	str	r4, [r2, #4]
 8006b9c:	e7ca      	b.n	8006b34 <_free_r+0x24>
 8006b9e:	46c0      	nop			@ (mov r8, r8)
 8006ba0:	200003f4 	.word	0x200003f4

08006ba4 <__swhatbuf_r>:
 8006ba4:	b570      	push	{r4, r5, r6, lr}
 8006ba6:	000e      	movs	r6, r1
 8006ba8:	001d      	movs	r5, r3
 8006baa:	230e      	movs	r3, #14
 8006bac:	5ec9      	ldrsh	r1, [r1, r3]
 8006bae:	0014      	movs	r4, r2
 8006bb0:	b096      	sub	sp, #88	@ 0x58
 8006bb2:	2900      	cmp	r1, #0
 8006bb4:	da0c      	bge.n	8006bd0 <__swhatbuf_r+0x2c>
 8006bb6:	89b2      	ldrh	r2, [r6, #12]
 8006bb8:	2380      	movs	r3, #128	@ 0x80
 8006bba:	0011      	movs	r1, r2
 8006bbc:	4019      	ands	r1, r3
 8006bbe:	421a      	tst	r2, r3
 8006bc0:	d114      	bne.n	8006bec <__swhatbuf_r+0x48>
 8006bc2:	2380      	movs	r3, #128	@ 0x80
 8006bc4:	00db      	lsls	r3, r3, #3
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	6029      	str	r1, [r5, #0]
 8006bca:	6023      	str	r3, [r4, #0]
 8006bcc:	b016      	add	sp, #88	@ 0x58
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	466a      	mov	r2, sp
 8006bd2:	f000 f853 	bl	8006c7c <_fstat_r>
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	dbed      	blt.n	8006bb6 <__swhatbuf_r+0x12>
 8006bda:	23f0      	movs	r3, #240	@ 0xf0
 8006bdc:	9901      	ldr	r1, [sp, #4]
 8006bde:	021b      	lsls	r3, r3, #8
 8006be0:	4019      	ands	r1, r3
 8006be2:	4b04      	ldr	r3, [pc, #16]	@ (8006bf4 <__swhatbuf_r+0x50>)
 8006be4:	18c9      	adds	r1, r1, r3
 8006be6:	424b      	negs	r3, r1
 8006be8:	4159      	adcs	r1, r3
 8006bea:	e7ea      	b.n	8006bc2 <__swhatbuf_r+0x1e>
 8006bec:	2100      	movs	r1, #0
 8006bee:	2340      	movs	r3, #64	@ 0x40
 8006bf0:	e7e9      	b.n	8006bc6 <__swhatbuf_r+0x22>
 8006bf2:	46c0      	nop			@ (mov r8, r8)
 8006bf4:	ffffe000 	.word	0xffffe000

08006bf8 <__smakebuf_r>:
 8006bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006bfa:	2602      	movs	r6, #2
 8006bfc:	898b      	ldrh	r3, [r1, #12]
 8006bfe:	0005      	movs	r5, r0
 8006c00:	000c      	movs	r4, r1
 8006c02:	b085      	sub	sp, #20
 8006c04:	4233      	tst	r3, r6
 8006c06:	d007      	beq.n	8006c18 <__smakebuf_r+0x20>
 8006c08:	0023      	movs	r3, r4
 8006c0a:	3347      	adds	r3, #71	@ 0x47
 8006c0c:	6023      	str	r3, [r4, #0]
 8006c0e:	6123      	str	r3, [r4, #16]
 8006c10:	2301      	movs	r3, #1
 8006c12:	6163      	str	r3, [r4, #20]
 8006c14:	b005      	add	sp, #20
 8006c16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c18:	ab03      	add	r3, sp, #12
 8006c1a:	aa02      	add	r2, sp, #8
 8006c1c:	f7ff ffc2 	bl	8006ba4 <__swhatbuf_r>
 8006c20:	9f02      	ldr	r7, [sp, #8]
 8006c22:	9001      	str	r0, [sp, #4]
 8006c24:	0039      	movs	r1, r7
 8006c26:	0028      	movs	r0, r5
 8006c28:	f7ff f83a 	bl	8005ca0 <_malloc_r>
 8006c2c:	2800      	cmp	r0, #0
 8006c2e:	d108      	bne.n	8006c42 <__smakebuf_r+0x4a>
 8006c30:	220c      	movs	r2, #12
 8006c32:	5ea3      	ldrsh	r3, [r4, r2]
 8006c34:	059a      	lsls	r2, r3, #22
 8006c36:	d4ed      	bmi.n	8006c14 <__smakebuf_r+0x1c>
 8006c38:	2203      	movs	r2, #3
 8006c3a:	4393      	bics	r3, r2
 8006c3c:	431e      	orrs	r6, r3
 8006c3e:	81a6      	strh	r6, [r4, #12]
 8006c40:	e7e2      	b.n	8006c08 <__smakebuf_r+0x10>
 8006c42:	2380      	movs	r3, #128	@ 0x80
 8006c44:	89a2      	ldrh	r2, [r4, #12]
 8006c46:	6020      	str	r0, [r4, #0]
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	81a3      	strh	r3, [r4, #12]
 8006c4c:	9b03      	ldr	r3, [sp, #12]
 8006c4e:	6120      	str	r0, [r4, #16]
 8006c50:	6167      	str	r7, [r4, #20]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d00c      	beq.n	8006c70 <__smakebuf_r+0x78>
 8006c56:	0028      	movs	r0, r5
 8006c58:	230e      	movs	r3, #14
 8006c5a:	5ee1      	ldrsh	r1, [r4, r3]
 8006c5c:	f000 f820 	bl	8006ca0 <_isatty_r>
 8006c60:	2800      	cmp	r0, #0
 8006c62:	d005      	beq.n	8006c70 <__smakebuf_r+0x78>
 8006c64:	2303      	movs	r3, #3
 8006c66:	89a2      	ldrh	r2, [r4, #12]
 8006c68:	439a      	bics	r2, r3
 8006c6a:	3b02      	subs	r3, #2
 8006c6c:	4313      	orrs	r3, r2
 8006c6e:	81a3      	strh	r3, [r4, #12]
 8006c70:	89a3      	ldrh	r3, [r4, #12]
 8006c72:	9a01      	ldr	r2, [sp, #4]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	81a3      	strh	r3, [r4, #12]
 8006c78:	e7cc      	b.n	8006c14 <__smakebuf_r+0x1c>
	...

08006c7c <_fstat_r>:
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	b570      	push	{r4, r5, r6, lr}
 8006c80:	4d06      	ldr	r5, [pc, #24]	@ (8006c9c <_fstat_r+0x20>)
 8006c82:	0004      	movs	r4, r0
 8006c84:	0008      	movs	r0, r1
 8006c86:	0011      	movs	r1, r2
 8006c88:	602b      	str	r3, [r5, #0]
 8006c8a:	f7fa fcd3 	bl	8001634 <_fstat>
 8006c8e:	1c43      	adds	r3, r0, #1
 8006c90:	d103      	bne.n	8006c9a <_fstat_r+0x1e>
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d000      	beq.n	8006c9a <_fstat_r+0x1e>
 8006c98:	6023      	str	r3, [r4, #0]
 8006c9a:	bd70      	pop	{r4, r5, r6, pc}
 8006c9c:	20000534 	.word	0x20000534

08006ca0 <_isatty_r>:
 8006ca0:	2300      	movs	r3, #0
 8006ca2:	b570      	push	{r4, r5, r6, lr}
 8006ca4:	4d06      	ldr	r5, [pc, #24]	@ (8006cc0 <_isatty_r+0x20>)
 8006ca6:	0004      	movs	r4, r0
 8006ca8:	0008      	movs	r0, r1
 8006caa:	602b      	str	r3, [r5, #0]
 8006cac:	f7fa fcc7 	bl	800163e <_isatty>
 8006cb0:	1c43      	adds	r3, r0, #1
 8006cb2:	d103      	bne.n	8006cbc <_isatty_r+0x1c>
 8006cb4:	682b      	ldr	r3, [r5, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d000      	beq.n	8006cbc <_isatty_r+0x1c>
 8006cba:	6023      	str	r3, [r4, #0]
 8006cbc:	bd70      	pop	{r4, r5, r6, pc}
 8006cbe:	46c0      	nop			@ (mov r8, r8)
 8006cc0:	20000534 	.word	0x20000534

08006cc4 <_init>:
 8006cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cc6:	46c0      	nop			@ (mov r8, r8)
 8006cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cca:	bc08      	pop	{r3}
 8006ccc:	469e      	mov	lr, r3
 8006cce:	4770      	bx	lr

08006cd0 <_fini>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	46c0      	nop			@ (mov r8, r8)
 8006cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cd6:	bc08      	pop	{r3}
 8006cd8:	469e      	mov	lr, r3
 8006cda:	4770      	bx	lr
